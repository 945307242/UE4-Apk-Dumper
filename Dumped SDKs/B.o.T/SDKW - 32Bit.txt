//Dumper Made By Ascarre 
//Join TlgChannel - https://t.me/ascarrehacks

//Gamelink - https://apkpure.com/b-o-t/com.rbuttongames.battlemechs

//Global Offsets Used to Dump:
//GWorld - 0x7693780
//GNames - 0x751f584

Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 0x4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 0x4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 0x4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 0x4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 0x4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 0x4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 0xc]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 0xc]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 0xc]
	<LevelStreaming*> StreamingLevelsToConsider;//[Offset: 0x60, Size: 0x3c]
	FString StreamingLevelsPrefix;//[Offset: 0x9c, Size: 0xc]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xa8, Size: 0x4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xac, Size: 0x4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xb0, Size: 0x4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xb4, Size: 0x4]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xb8, Size: 0x4]
	NavigationSystemBase* NavigationSystem;//[Offset: 0xcc, Size: 0x4]
	GameModeBase* AuthorityGameMode;//[Offset: 0xd0, Size: 0x4]
	GameStateBase* GameState;//[Offset: 0xd4, Size: 0x4]
	AISystemBase* AISystem;//[Offset: 0xd8, Size: 0x4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0xdc, Size: 0x4]
	Level*[] Levels;//[Offset: 0xe0, Size: 0xc]
	LevelCollection[] LevelCollections;//[Offset: 0xec, Size: 0xc]
	Level* CurrentLevel;//[Offset: 0xfc, Size: 0x4]
	GameInstance* OwningGameInstance;//[Offset: 0x100, Size: 0x4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x104, Size: 0xc]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x110, Size: 0x4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x114, Size: 0x4]
	WorldComposition* WorldComposition;//[Offset: 0x59c, Size: 0x4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e2, Size: 0x1]
	WorldPSCPool PSCPool;//[Offset: 0x5fc, Size: 0x44]
	void HandleTimelineScrubbed();// 0x5cb5aec

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x4528238

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 0x4]
	Model* Model;//[Offset: 0x8c, Size: 0x4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 0xc]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 0x4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 0x4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 0x4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 0x4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 0xc]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 0xc]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	Guid LevelBuildDataId;//[Offset: 0x154, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x164, Size: 0x4]
	IntVector LightBuildLevelOffset;//[Offset: 0x168, Size: 0xc]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x174, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x174, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x1b8, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1c0, Size: 0xc]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x1d8, Size: 0xc]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x474, Size: 0x4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x1f0, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x1f4, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x1f8, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x1fc, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x1fd, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x1fe, Size: 0x1]
	enum LightmapType;//[Offset: 0x1ff, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x201, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x201, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x201, Size: 0x1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x202, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x202, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x202, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x202, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x202, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x203, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x203, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x203, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x203, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x203, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x203, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	byte ReceiveDecalsChannelsMask;//[Offset: 0x205, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x206, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x206, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x206, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x206, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x206, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x207, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x209, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x20a, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x20b, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x20c, Size: 0x4]
	float MobileCustomStencilAdditiveAlphaMultiplier;//[Offset: 0x210, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x214, Size: 0x4]
	int VisibilityId;//[Offset: 0x218, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x220, Size: 0x4]
	float BoundsScale;//[Offset: 0x22c, Size: 0x4]
	float LastSubmitTime;//[Offset: 0x230, Size: 0x4]
	float LastRenderTime;//[Offset: 0x234, Size: 0x4]
	float LastRenderTimeOnScreen;//[Offset: 0x238, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x23c, Size: 0xc]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x248, Size: 0xc]
	BodyInstance BodyInstance;//[Offset: 0x260, Size: 0x118]
	delegate OnComponentHit;//[Offset: 0x378, Size: 0xc]
	delegate OnComponentBeginOverlap;//[Offset: 0x384, Size: 0xc]
	delegate OnComponentEndOverlap;//[Offset: 0x390, Size: 0xc]
	delegate OnComponentWake;//[Offset: 0x39c, Size: 0xc]
	delegate OnComponentSleep;//[Offset: 0x3a8, Size: 0xc]
	delegate OnBeginCursorOver;//[Offset: 0x3c0, Size: 0xc]
	delegate OnEndCursorOver;//[Offset: 0x3cc, Size: 0xc]
	delegate OnClicked;//[Offset: 0x3d8, Size: 0xc]
	delegate OnReleased;//[Offset: 0x3e4, Size: 0xc]
	delegate OnInputTouchBegin;//[Offset: 0x3f0, Size: 0xc]
	delegate OnInputTouchEnd;//[Offset: 0x3fc, Size: 0xc]
	delegate OnInputTouchEnter;//[Offset: 0x408, Size: 0xc]
	delegate OnInputTouchLeave;//[Offset: 0x414, Size: 0xc]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x428, Size: 0x4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x42c, Size: 0x3c]
	bool WasRecentlyRenderedOnScreen(float Tolerance);// 0x5c6e2dc
	bool WasRecentlyRendered(float Tolerance);// 0x5c6e25c
	void WakeRigidBody(FName BoneName);// 0x5c6e1dc
	void WakeAllRigidBodies();// 0x3ea6308
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x5c6e144
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x5c6e074
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x5c6dffc
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x5c6df7c
	void SetSimulatePhysics(bool bSimulate);// 0x5c6def4
	void SetRenderInMono(bool bValue);// 0x5c6de74
	void SetRenderInMainPass(bool bValue);// 0x5c6ddf4
	void SetRenderCustomDepth(bool bValue);// 0x5c6dd74
	void SetReceiveDecalsChannelsMask(byte NewReceiveDecalsChannelsMask);// 0x5c6dcfc
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x5c6dc7c
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x5c6db68
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x5c6da44
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x5c6da44
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x5c6d930
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x5c6d81c
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x5c6d6e4
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x5c6d6e4
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x5c6d664
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x5c6d5e4
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x5c6d55c
	void SetMobileCustomStencilAdditiveAlphaMultiplier(float Value);// 0x5c6d4e4
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x5c6d420
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x5c6d35c
	void SetMassScale(FName BoneName, float InMassScale);// 0x5c6d290
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x5c6d174
	void SetLockedAxis(byte LockedAxis);// 0x5c6d0f4
	void SetLinearDamping(float InDamping);// 0x5b799a0
	void SetLightingChannels(LightingChannels NewLightingChannels);// 0x5c6d07c
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x5c6cffc
	void SetEnableGravity(bool bGravityEnabled);// 0x400c244
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x5c6cf84
	void SetCustomDepthStencilValue(int Value);// 0x5c6cf0c
	void SetCullDistance(float NewCullDistance);// 0x5c6ce94
	void SetConstraintMode(byte ConstraintMode);// 0x5c6ce14
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x5c6cd50
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x5c6ccd0
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x5c6cc50
	void SetCollisionObjectType(byte Channel);// 0x5c6cbd0
	void SetCollisionEnabled(byte NewType);// 0x5c6cb50
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x5c6ca90
	void SetCastShadow(bool NewCastShadow);// 0x5c6ca10
	void SetBoundsScale(float NewBoundsScale);// 0x5c6c998
	void SetAngularDamping(float InDamping);// 0x37ccbbc
	void SetAllUseCCD(bool InUseCCD);// 0x5c6c910
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x5c6c844
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x5c6c768
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x5c6c660
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x5c6c584
	void SetAllMassScale(float InMassScale);// 0x3ea6cac
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x5c6c498
	void PutRigidBodyToSleep(FName BoneName);// 0x5c6c420
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x5c6c130
	bool K2_IsQueryCollisionEnabled();// 0x5c6c0f0
	bool K2_IsPhysicsCollisionEnabled();// 0x5c6c0b0
	bool K2_IsCollisionEnabled();// 0x5c6c078
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x5c6bff8
	bool IsOverlappingActor(const Actor* Other);// 0x5c6bf78
	bool IsGravityEnabled();// 0x5c6bf48
	bool IsAnyRigidBodyAwake();// 0x5c6bf18
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x5c6be54
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x5c6bd90
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x5c6bd54
	void GetUsedTextures2D(out Texture2D*[] OutTextures, byte QualityLevel);// 0x5c6bc5c
	void GetUsedTextures(out Texture*[] OutTextures, byte QualityLevel);// 0x5c6bb64
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x5c6ba80
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x5c6b9ec
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x5c6b958
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x5c6b8ac
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x5c6b8ac
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x5c6b80c
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x5c6b724
	int GetNumMaterials();// 0x5b713a0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x5c6b648
	MaterialInterface* GetMaterial(int ElementIndex);// 0x5c6b5c0
	float GetMassScale(FName BoneName);// 0x5c6b538
	float GetMass();// 0x5c6b508
	float GetLinearDamping();// 0x5c6b4d8
	Vector GetInertiaTensor(FName BoneName);// 0x5c6b43c
	bool GetGenerateOverlapEvents();// 0x5c6b41c
	byte GetCollisionResponseToChannel(byte Channel);// 0x5c6b394
	FName GetCollisionProfileName();// 0x5c6b354
	byte GetCollisionObjectType();// 0x5c6b324
	byte GetCollisionEnabled();// 0x5c6b2f4
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x5c6b1c4
	Vector GetCenterOfMass(FName BoneName);// 0x5c6b130
	float GetAngularDamping();// 0x37cccec
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x5c6b018
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x5c6af4c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x5c6aec4
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x5c6ae30
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x5c6ad9c
	void ClearMoveIgnoreComponents();// 0x5c6ad6c
	void ClearMoveIgnoreActors();// 0x5c6ad58
	bool CanCharacterStepUp(Pawn* Pawn);// 0x5c6acd0
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x5c6aa8c
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x5c6ab9c
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x5c6aa8c
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x5c6a8e8
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x5c6a744
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x5c6a62c
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x5c6a514
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x5c6a3fc
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x5c6a2e4
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x5c6a1cc
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x5c6a0b4
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x5c69f78
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x5c69e60

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xac, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xb4, Size: 0x4]
	FName AttachSocketName;//[Offset: 0xb8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xc0, Size: 0xc]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xcc, Size: 0xc]
	Vector RelativeLocation;//[Offset: 0x100, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x10c, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x118, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x160, Size: 0xc]
	enum AttachParentTickOrderPreference;//[Offset: 0x16c, Size: 0x1]
	enum AttachChildrenTickOrderPreference;//[Offset: 0x16d, Size: 0x1]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16f, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16f, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16f, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16f, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16f, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16f, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16f, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x170, Size: 0x1]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x170, Size: 0x1]
	byte Mobility;//[Offset: 0x171, Size: 0x1]
	byte DetailMode;//[Offset: 0x172, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x1c0, Size: 0xc]
	void ToggleVisibility(bool bPropagateToChildren);// 0x5c814a8
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x5c813e4
	void SetWorldScale3D(Vector NewScale);// 0x5c81374
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x5c812a0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x5c81220
	void SetRelativeScale3D(Vector NewScale3D);// 0x5c811a8
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x5c810d4
	void SetAttachParentTickOrderPreference(enum TickOrder);// 0x5c81060
	void SetAttachChildrenTickOrderPreference(enum TickOrder);// 0x5c80fec
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x5c80ecc
	void ResetRelativeTransform();// 0x5c80eb8
	void OnRep_Visibility(bool OldValue);// 0x5c80e38
	void OnRep_Transform();// 0x5c80e24
	void OnRep_AttachSocketName();// 0x5c80e10
	void OnRep_AttachParent();// 0x5c80e10
	void OnRep_AttachChildren();// 0x5c80dfc
	void K2_SweepToWorldLocationAndRotationQuat(Vector TargetLocation, out const Quat TargetRotationQuat, out HitResult SweepHitResult, enum Teleport);// 0x5c80c7c
	void K2_SweepToRelativeLocationAndRotationQuat(Vector TargetLocation, out const Quat TargetRotationQuat, out HitResult SweepHitResult, enum Teleport);// 0x5c80afc
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c808e0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c8075c
	void K2_SetWorldLocationAndRotationQuat(Vector NewLocation, out const Quat NewRotationQuat, enum Teleport);// 0x5c8063c
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c8047c
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c802fc
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c800e0
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7ff60
	void K2_SetRelativeLocationAndRotationQuat(Vector NewLocation, out const Quat NewRotationQuat, enum Teleport);// 0x5c7fe40
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7fc80
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7f96c
	Transform K2_GetComponentToWorld();// 0x5c7f8e4
	Vector K2_GetComponentScale();// 0x5c7f89c
	Rotator K2_GetComponentRotation();// 0x5c7f854
	Vector K2_GetComponentLocation();// 0x5c7f80c
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x5c7f6bc
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies, enum AttachmentTickOrder);// 0x5c7f488
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x5c7f32c
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7f110
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7ef8c
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7ee0c
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7ec64
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7e92c
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7e710
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7e58c
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c7e40c
	bool IsVisible();// 0x5c7e3dc
	bool IsSimulatingPhysics(FName BoneName);// 0x5c7e354
	bool IsAnySimulatingPhysics();// 0x5c7e324
	Vector GetUpVector();// 0x5c7e2dc
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x5c7e1b4
	Rotator GetSocketRotation(FName InSocketName);// 0x5c7e118
	Quat GetSocketQuaternion(FName InSocketName);// 0x5c7e07c
	Vector GetSocketLocation(FName InSocketName);// 0x5c7dfe0
	bool GetShouldUpdatePhysicsVolume();// 0x5c7dfb8
	Vector GetRightVector();// 0x5c7df70
	Transform GetRelativeTransform();// 0x5c7dee8
	PhysicsVolume* GetPhysicsVolume();// 0x5c7dec0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x5c7de20
	int GetNumChildrenComponents();// 0x5c7ddf8
	Vector GetForwardVector();// 0x5c530f0
	Vector GetComponentVelocity();// 0x5c7dda8
	void GetChildrenComponentsByClass(class SceneComponent ComponentClass, bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x5c7dc74
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x5c7db84
	SceneComponent* GetChildComponent(int ChildIndex);// 0x5c7db04
	BoxSphereBounds GetBounds();// 0x5c7dad4
	FName GetAttachSocketName();// 0x5c7dab8
	enum GetAttachParentTickOrderPreference();// 0x5c7da9c
	SceneComponent* GetAttachParent();// 0x37c78c4
	enum GetAttachChildrenTickOrderPreference();// 0x5c7da80
	FName[] GetAllSocketNames();// 0x5c7d9ec
	bool DoesSocketExist(FName InSocketName);// 0x5c7d964
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x5c7d88c
	BoxSphereBounds CalcBounds(out const Transform LocalToWorld);// 0x5c7d750

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 0x3c]
	FName[] ComponentTags;//[Offset: 0x5c, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0xc]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x74, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x74, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x75, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76, Size: 0x1]
	enum CreationMethod;//[Offset: 0x78, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x7c, Size: 0xc]
	delegate OnComponentActivated;//[Offset: 0x88, Size: 0xc]
	delegate OnComponentDeactivated;//[Offset: 0x94, Size: 0xc]
	void ToggleActive();// 0x3e708fc
	void SetTickGroup(byte NewTickGroup);// 0x5b2f344
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x5b2f2c4
	void SetIsReplicated(bool ShouldReplicate);// 0x5b2f244
	void SetComponentTickInterval(float TickInterval);// 0x5b2f1cc
	void SetComponentTickEnabled(bool bEnabled);// 0x5b2f144
	void SetAutoActivate(bool bNewAutoActivate);// 0x5b2f0bc
	void SetActive(bool bNewActive, bool bReset);// 0x5b2efe4
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5b2ef64
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5b2eee4
	void RemoveTickPrerequisite(out const TickPrerequisite Prerequisite);// 0x5b2ee48
	void ReceiveTick(float DeltaSeconds);// 0x4528238
	void ReceiveEndPlay(byte EndPlayReason);// 0x4528238
	void ReceiveBeginPlay();// 0x4528238
	void OnRep_IsActive();// 0x36fd75c
	void K2_DestroyComponent(Object* Object);// 0x5b2edd0
	bool IsComponentTickEnabled();// 0x5b2eda8
	bool IsBeingDestroyed();// 0x5b2ed88
	bool IsActive();// 0x5b2ed58
	bool HasBegunPlay();// 0x5b2ed38
	Actor* GetOwner();// 0x37a6724
	float GetComponentTickInterval();// 0x5b2ed10
	void DestroyPhysicsState();// 0x5b2ecfc
	void Deactivate();// 0x3e3f120
	void CreatePhysicsState();// 0x5b2ece8
	bool ComponentHasTag(FName Tag);// 0x5b2ec68
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5b2ebe8
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5b2eb68
	void AddTickPrerequisite(out const TickPrerequisite Prerequisite);// 0x5b2eacc
	void Activate(bool bReset);// 0x5b2ea44

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x5, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	float TickInterval;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2a4, Size: 0x4]
	int Priority;//[Offset: 0x2a8, Size: 0x4]
	float FluidFriction;//[Offset: 0x2ac, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x27c, Size: 0x1]
	Color BrushColor;//[Offset: 0x280, Size: 0x4]
	int PolyFlags;//[Offset: 0x284, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	Model* Brush;//[Offset: 0x28c, Size: 0x4]
	BrushComponent* BrushComponent;//[Offset: 0x290, Size: 0x4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x298, Size: 0xc]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 0x3c]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	byte RemoteRole;//[Offset: 0x5d, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 0x38]
	float InitialLifeSpan;//[Offset: 0x98, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0x9c, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa8, Size: 0x38]
	Actor* Owner;//[Offset: 0xe0, Size: 0x4]
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8]
	byte Role;//[Offset: 0xf0, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf1, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 0x1]
	int InputPriority;//[Offset: 0xf4, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 0x4]
	float NetCullDistanceSquared;//[Offset: 0xfc, Size: 0x4]
	int NetTag;//[Offset: 0x100, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x104, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x108, Size: 0x4]
	float NetPriority;//[Offset: 0x10c, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x110, Size: 0x4]
	Actor*[] Children;//[Offset: 0x114, Size: 0xc]
	SceneComponent* RootComponent;//[Offset: 0x120, Size: 0x4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x124, Size: 0xc]
	FName[] Layers;//[Offset: 0x138, Size: 0xc]
	ChildActorComponent* ParentComponent;//[Offset: 0x144, Size: 0x8]
	FName[] Tags;//[Offset: 0x14c, Size: 0xc]
	delegate OnTakeAnyDamage;//[Offset: 0x158, Size: 0xc]
	delegate OnTakePointDamage;//[Offset: 0x164, Size: 0xc]
	delegate OnTakeRadialDamage;//[Offset: 0x170, Size: 0xc]
	delegate OnActorBeginOverlap;//[Offset: 0x17c, Size: 0xc]
	delegate OnActorEndOverlap;//[Offset: 0x188, Size: 0xc]
	delegate OnBeginCursorOver;//[Offset: 0x194, Size: 0xc]
	delegate OnEndCursorOver;//[Offset: 0x1a0, Size: 0xc]
	delegate OnClicked;//[Offset: 0x1ac, Size: 0xc]
	delegate OnReleased;//[Offset: 0x1b8, Size: 0xc]
	delegate OnInputTouchBegin;//[Offset: 0x1c4, Size: 0xc]
	delegate OnInputTouchEnd;//[Offset: 0x1d0, Size: 0xc]
	delegate OnInputTouchEnter;//[Offset: 0x1dc, Size: 0xc]
	delegate OnInputTouchLeave;//[Offset: 0x1e8, Size: 0xc]
	delegate OnActorHit;//[Offset: 0x1f4, Size: 0xc]
	delegate OnDestroyed;//[Offset: 0x200, Size: 0xc]
	delegate OnEndPlay;//[Offset: 0x20c, Size: 0xc]
	ActorComponent*[] InstanceComponents;//[Offset: 0x260, Size: 0xc]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x26c, Size: 0xc]
	bool WasRecentlyRendered(float Tolerance);// 0x5b2b7fc
	void UserConstructionScript();// 0x4528238
	void TearOff();// 0x36fd75c
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x5b2b740
	void SetTickGroup(byte NewTickGroup);// 0x5b2b6c8
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x5b2b648
	bool SetRootComponent(SceneComponent* NewRootComponent);// 0x5b2b5c8
	void SetReplicates(bool bInReplicates);// 0x5b2b548
	void SetReplicateMovement(bool bInReplicateMovement);// 0x3e432cc
	void SetOwner(Actor* NewOwner);// 0x3e4f34c
	void SetNetDormancy(byte NewDormancy);// 0x5b2b4d0
	void SetLifeSpan(float InLifespan);// 0x5b2b450
	void SetActorTickInterval(float TickInterval);// 0x5b2b3d8
	void SetActorTickEnabled(bool bEnabled);// 0x5b2b358
	void SetActorScale3D(Vector NewScale3D);// 0x5b2b2e8
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x5b2b278
	void SetActorHiddenInGame(bool bNewHidden);// 0x5b2b1f0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x5b2b170
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5b2b0f0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3e2d71c
	void ReceiveTick(float DeltaSeconds);// 0x4528238
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Object* DamageCauser);// 0x4528238
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Object* DamageCauser, out const HitResult HitInfo);// 0x4528238
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x4528238
	void ReceiveEndPlay(byte EndPlayReason);// 0x4528238
	void ReceiveDestroyed();// 0x4528238
	void ReceiveBeginPlay();// 0x4528238
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Object* DamageCauser);// 0x4528238
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x4528238
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x4528238
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x4528238
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x4528238
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x4528238
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x4528238
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x4528238
	void ReceiveActorEndCursorOver();// 0x4528238
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x4528238
	void ReceiveActorBeginCursorOver();// 0x4528238
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x5b2afdc
	void OnRep_ReplicateMovement();// 0x36fd5d0
	void OnRep_ReplicatedMovement();// 0x3e3279c
	void OnRep_Owner();// 0x3e3f120
	void OnRep_Instigator();// 0x5b2afc0
	void OnRep_AttachmentReplication();// 0x3e708fc
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x5b2ae24
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x5b2ada4
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x5b2acdc
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b2aac0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x5b2a9ec
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b2a7e0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b2a65c
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b2a4e0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b2a310
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b2a190
	void K2_OnReset();// 0x4528238
	void K2_OnEndViewTarget(PlayerController* PC);// 0x4528238
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x4528238
	SceneComponent* K2_GetRootComponent();// 0x5b2a174
	Rotator K2_GetActorRotation();// 0x5b2a06c
	Vector K2_GetActorLocation();// 0x5b2a008
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x5b29f08
	void K2_DestroyComponent(ActorComponent* Component);// 0x5b29e90
	void K2_DestroyActor();// 0x5b29e74
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies, enum AttachmentTickOrder);// 0x5b29c4c
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies, enum AttachmentTickOrder);// 0x5b29a24
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5b298d0
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5b2977c
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b29570
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b293e8
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b2926c
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b29060
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b28ee4
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5b28d68
	bool IsOverlappingActor(const Actor* Other);// 0x5b28ce8
	bool IsChildActor();// 0x5b28cc0
	bool IsActorTickEnabled();// 0x5b28c98
	bool IsActorBeingDestroyed();// 0x5b28c78
	bool IsActorBeginningPlay();// 0x5b28c4c
	bool HasAuthority();// 0x5b28c24
	bool HasActorBegunPlay();// 0x5b28bf8
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x5b28b78
	Vector GetVelocity();// 0x5b28b28
	void GetUsedTextures2D(out Texture2D*[] OutTextures, byte QualityLevel);// 0x5b28a30
	void GetUsedTextures(out Texture*[] OutTextures, byte QualityLevel);// 0x5b28938
	Transform GetTransform();// 0x5b288a4
	bool GetTickableWhenPaused();// 0x5b2887c
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x5b287fc
	byte GetRemoteRole();// 0x5b287e0
	ChildActorComponent* GetParentComponent();// 0x5b287b8
	Actor* GetParentActor();// 0x5b28790
	Actor* GetOwner();// 0x5b28774
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x5b286d4
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x5b285ec
	byte GetLocalRole();// 0x5b285d0
	float GetLifeSpan();// 0x5b285a0
	Controller* GetInstigatorController();// 0x5b28578
	Pawn* GetInstigator();// 0x5b28550
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x5b28380
	InputComponent* GetInputComponent();// 0x5b28364
	float GetInputAxisValue(const FName InputAxisName);// 0x5b282e4
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x5b28124
	FString GetHumanReadableName();// 0x5b28088
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x5b28008
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x5b27f88
	float GetGameTimeSinceCreation();// 0x5b27f60
	float GetDotProductTo(const Actor* OtherActor);// 0x5b27ee0
	float GetDistanceTo(const Actor* OtherActor);// 0x5b27e60
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x5b27d38
	ActorComponent*[] GetComponentsByInterfaceAndTag(class Interface InterfaceClass, FName Tag);// 0x5b27c10
	ActorComponent*[] GetComponentsByInterface(class Interface InterfaceClass);// 0x5b27b34
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x5b27a58
	FName GetAttachParentSocketName();// 0x5b27a18
	Actor* GetAttachParentActor();// 0x5b279f0
	void GetAttachedActors(out Actor*[] OutActors, bool bRecursive);// 0x5b27900
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x5b27810
	Vector GetActorUpVector();// 0x5b2779c
	float GetActorTimeDilation();// 0x5b27774
	float GetActorTickInterval();// 0x5b2774c
	Vector GetActorScale3D();// 0x5b27704
	Vector GetActorRightVector();// 0x5b27690
	Vector GetActorRelativeScale3D();// 0x5b27648
	Vector GetActorForwardVector();// 0x5b275d4
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x5b274f4
	bool GetActorEnableCollision();// 0x5b274d4
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x5b273ac
	void ForceNetUpdate();// 0x5b27390
	void FlushNetDormancy();// 0x5b2737c
	ActorComponent* FindComponentByTag(const class ActorComponent ComponentClass, FName Tag);// 0x5b272b0
	ActorComponent* FindComponentByClass(const class ActorComponent ComponentClass);// 0x5b27228
	void EnableInput(PlayerController* PlayerController);// 0x520b948
	void DisableInput(PlayerController* PlayerController);// 0x5b271a8
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x5b27128
	Box CalculateComponentsBoundingBoxInLocalSpace(bool bNonColliding);// 0x5b2707c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5b26ffc
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5b26f7c
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x5b26d90
	bool ActorHasTag(FName Tag);// 0x5b26d04

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	float Timestamp;//[Offset: 0x24, Size: 0x4]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bReplicateTimeStamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x35, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x36, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x37, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 0xc]
	FName AttachSocket;//[Offset: 0x28, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0xfc, Size: 0xc]
	bool WasControllerKeyJustReleased(Key Key);// 0x5badcb4
	bool WasControllerKeyJustPressed(Key Key);// 0x5badcb4
	void UnbindTouch(const byte KeyEvent, out const delegate Delegate);// 0x5bae328
	void UnbindObjectTouch(const Object* Object);// 0x5bae2b0
	void UnbindObjectAxisKey(const Object* Object);// 0x5bae238
	void UnbindObjectAxis(const Object* Object);// 0x5bae1c0
	void UnbindAxisKey(const Key AxisKey, out const delegate Delegate);// 0x5badf7c
	void UnbindAxis(const FName AxisName, out const delegate Delegate);// 0x5bade74
	bool IsControllerKeyDown(Key Key);// 0x5badcb4
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x5badb34
	Vector GetControllerVectorKeyState(Key Key);// 0x5bad964
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x5bad884
	float GetControllerKeyTimeDown(Key Key);// 0x5bad5a0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x5bad760
	float GetControllerAnalogKeyState(Key Key);// 0x5bad5a0
	void BindTouch(const byte KeyEvent, out const delegate Delegate);// 0x5bad4a0
	void BindAxisKey(const Key AxisKey, out const delegate Delegate, bool bConsumeInput, bool bExecuteWhenPaused);// 0x5bad1b8
	void BindAxis(const FName AxisName, out const delegate Delegate, bool bConsumeInput, bool bExecuteWhenPaused);// 0x5bad014

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0xf8, Size: 0xc]
	FName[] InvertedAxis;//[Offset: 0x128, Size: 0xc]
	void SetMouseSensitivity(const float Sensitivity);// 0x5c6506c
	void SetBind(FName BindName, FString Command);// 0x5c64f90
	void InvertAxisKey(const Key AxisKey);// 0x5c64dd8
	void InvertAxis(const FName AxisName);// 0x5c64d60
	void ClearSmoothing();// 0x5c64d4c

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x10]
	FString Command;//[Offset: 0x10, Size: 0xc]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x284, Size: 0x4]
	float NavAgentLocationVerticalOffset;//[Offset: 0x288, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x28c, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x28d, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x290, Size: 0x4]
	PlayerState* PlayerState;//[Offset: 0x294, Size: 0x4]
	byte RemoteViewPitch;//[Offset: 0x298, Size: 0x1]
	Controller* LastHitBy;//[Offset: 0x2a0, Size: 0x4]
	delegate OnControllerChanged;//[Offset: 0x2a4, Size: 0xc]
	Controller* Controller;//[Offset: 0x2b0, Size: 0x4]
	Vector ControlInputVector;//[Offset: 0x2b8, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x2c4, Size: 0xc]
	void SpawnDefaultController();// 0x400bd70
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x5c4beec
	void ReceiveUnpossessed(Controller* OldController);// 0x4528238
	void ReceivePossessed(Controller* NewController);// 0x4528238
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x5c4bd98
	void OnRep_PlayerState();// 0x34dae90
	void OnRep_Controller(Controller* OldController);// 0x4005e68
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x5c4bc84
	Vector K2_GetMovementInputVector();// 0x5c4bb84
	bool IsPlayerControlled();// 0x5c4bc54
	bool IsMoveInputIgnored();// 0x5c4bc24
	bool IsLocallyControlled();// 0x5c4bbf4
	bool IsControlled();// 0x5c4bbcc
	Vector GetPendingMovementInputVector();// 0x5c4bb84
	Vector GetNavAgentLocation();// 0x5c4bb34
	PawnMovementComponent* GetMovementComponent();// 0x5ba1fdc
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x5c4babc
	Vector GetLastMovementInputVector();// 0x5c4ba74
	Rotator GetControlRotation();// 0x5c4ba2c
	Controller* GetController();// 0x5c4ba10
	Rotator GetBaseAimRotation();// 0x5c4b9c0
	void DetachFromControllerPendingDestroy();// 0x3ea5bf4
	void ControllerChangedEvent__DelegateSignature(Controller* NewController, Controller* OldController, Pawn* Pawn);// 0x4528238
	Vector ConsumeMovementInputVector();// 0x5c4b970
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x5c4b85c
	void AddControllerYawInput(float Val);// 0x37cd1a8
	void AddControllerRollInput(float Val);// 0x3ea63c0
	void AddControllerPitchInput(float Val);// 0x3ea69bc

--------------------------------
Class: Controller.Actor.Object
	delegate OnInstigatedAnyDamage;//[Offset: 0x288, Size: 0xc]
	FName StateName;//[Offset: 0x298, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x2a0, Size: 0x4]
	Character* Character;//[Offset: 0x2ac, Size: 0x4]
	PlayerState* PlayerState;//[Offset: 0x2b0, Size: 0x4]
	SceneComponent* TransformComponent;//[Offset: 0x2b4, Size: 0x4]
	Rotator ControlRotation;//[Offset: 0x2cc, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]
	bool bSetControlRotationToPawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8, Size: 0x1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8, Size: 0x1]
	delegate OnControllerStateChanged;//[Offset: 0x2dc, Size: 0xc]
	delegate OnPawnChanged;//[Offset: 0x2e8, Size: 0xc]
	delegate OnPlayerStateChanged;//[Offset: 0x2f4, Size: 0xc]
	void UnPossess();// 0x37ccde8
	void StopMovement();// 0x3eaf3a8
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x5b717a4
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x5b7171c
	void SetIgnoreLookInput(bool bNewLookInput);// 0x5b71694
	void SetControlRotation(out const Rotator NewRotation);// 0x5b71608
	void ResetIgnoreMoveInput();// 0x400c47c
	void ResetIgnoreLookInput();// 0x3eaf7c0
	void ResetIgnoreInputFlags();// 0x3ea6308
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Object* DamageCauser);// 0x4528238
	void Possess(Pawn* InPawn);// 0x4019014
	void PlayerStateChangedEvent__DelegateSignature(PlayerState* NewPlayerState, PlayerState* OldPlayerState, Controller* Controller);// 0x4528238
	void PawnChangedEvent__DelegateSignature(Pawn* NewPawn, Pawn* OldPawn, Controller* Controller);// 0x4528238
	void OnRep_PlayerState(PlayerState* OldPlayerState);// 0x3e98700
	void OnRep_Pawn();// 0x3e723b0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x5b714ec
	Pawn* K2_GetPawn();// 0x5b714c4
	bool IsPlayerController();// 0x5b714a4
	bool IsMoveInputIgnored();// 0x5b71474
	bool IsLookInputIgnored();// 0x5b71444
	bool IsLocalPlayerController();// 0x5b71400
	bool IsLocalController();// 0x5b713d0
	Actor* GetViewTarget();// 0x5b713a0
	FName GetStateName();// 0x5b7137c
	Rotator GetDesiredRotation();// 0x5b7132c
	Rotator GetControlRotation();// 0x5b712dc
	void ControllerStateChangedEvent__DelegateSignature(FName NewStateName, FName OldStateName, Controller* Controller);// 0x4528238
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x5b71210
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x5b71148
	void ChangeState(FName NewState);// 0x5b710c8
	PlayerController* CastToPlayerController();// 0x5b710a0

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2d0, Size: 0x4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x2d4, Size: 0x4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2d8, Size: 0x4]
	BasedMovementInfo BasedMovement;//[Offset: 0x2e0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x310, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x340, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x344, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x350, Size: 0x10]
	byte ReplicatedMovementMode;//[Offset: 0x360, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x364, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x368, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x368, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x368, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x368, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x368, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x368, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x368, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x369, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x369, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x369, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x36c, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x370, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x374, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x378, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x37c, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x380, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x388, Size: 0xc]
	delegate MovementModeChangedDelegate;//[Offset: 0x3a0, Size: 0xc]
	delegate OnCharacterMovementUpdated;//[Offset: 0x3ac, Size: 0xc]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3b8, Size: 0x90]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x450, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x490, Size: 0xc]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x4a0, Size: 0xe0]
	void UnCrouch(bool bClientSimulation);// 0x5b69364
	void StopJumping();// 0x3ef0f2c
	void StopAnimMontage(const AnimMontage* AnimMontage);// 0x37cd428
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x5b69220
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x5b68f9c
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x5b68b70
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5b6866c
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5b68168
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5b67df8
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x5b67d60
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x5b67c48
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x5b67ac8
	void OnRep_RootMotion();// 0x5b67ab4
	void OnRep_ReplicatedBasedMovement();// 0x372fbdc
	void OnRep_IsCrouched();// 0x3ea6c10
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4528238
	void OnLanded(out const HitResult Hit);// 0x4528238
	void OnJumped();// 0x3ea64b0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x5b67998
	void K2_UpdateCustomMovement(float DeltaTime);// 0x4528238
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x4528238
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x4528238
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x4528238
	void Jump();// 0x3ea6d2c
	bool IsPlayingRootMotion();// 0x5b67970
	bool IsPlayingNetworkedRootMotionMontage();// 0x5b67948
	bool IsJumpProvidingForce();// 0x5b67918
	AnimMontage* GetCurrentMontage();// 0x5b678f0
	Vector GetBaseTranslationOffset();// 0x5b678cc
	Rotator GetBaseRotationOffsetRotator();// 0x5b67868
	float GetAnimRootMotionTranslationScale();// 0x5001244
	void Crouch(bool bClientSimulation);// 0x5b677e0
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5b675a4
	void ClientCheatWalk();// 0x3ea6b58
	void ClientCheatGhost();// 0x3ee915c
	void ClientCheatFly();// 0x3ea6d48
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5b671c8
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5b66ea4
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5b66c24
	void ClientAckGoodMove(float Timestamp);// 0x5b66bac
	bool CanJumpInternal();// 0x5b66b7c
	bool CanJump();// 0x5b66b54
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x5b66a8c

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x5d8, Size: 0x4]
	class AnimInstance* AnimClass;//[Offset: 0x5dc, Size: 0x4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x5e0, Size: 0x4]
	AnimInstance*[] SubInstances;//[Offset: 0x5e4, Size: 0xc]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x5f0, Size: 0x4]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]
	SingleAnimationPlayData AnimationData;//[Offset: 0x5f8, Size: 0x10]
	Vector RootBoneTranslation;//[Offset: 0x618, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x624, Size: 0xc]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x644, Size: 0xc]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x650, Size: 0xc]
	float GlobalAnimRateScale;//[Offset: 0x670, Size: 0x4]
	enum UseAsyncScene;//[Offset: 0x674, Size: 0x1]
	byte KinematicBonesUpdateType;//[Offset: 0x675, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x676, Size: 0x1]
	byte AnimationMode;//[Offset: 0x678, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67b, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x67b, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x67b, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x67b, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x67b, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67c, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67c, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x67c, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x67c, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x67c, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67d, Size: 0x1]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67d, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x67d, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x67d, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x67d, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x67d, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x67d, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67e, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67e, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67e, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x67e, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x67e, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x67e, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x67e, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x67e, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67f, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0x680, Size: 0xc]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x690, Size: 0x2]
	float ClothBlendWeight;//[Offset: 0x694, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x698, Size: 0x4]
	float BendingStiffness;//[Offset: 0x69c, Size: 0x4]
	float AreaStiffness;//[Offset: 0x6a0, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x6a4, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x6a8, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x6ac, Size: 0x4]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b2, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b3, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x6b8, Size: 0x4]
	delegate OnConstraintBroken;//[Offset: 0x6c4, Size: 0xc]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x6d0, Size: 0x4]
	float TeleportDistanceThreshold;//[Offset: 0x790, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x794, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x7a0, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x7f8, Size: 0x4]
	delegate OnAnimInitialized;//[Offset: 0x884, Size: 0xc]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x5c88170
	void ToggleDisablePostProcessBlueprint();// 0x5c8815c
	void TermBodiesBelow(FName ParentBoneName);// 0x5c880e4
	void SuspendClothingSimulation();// 0x5c880d0
	void Stop();// 0x5c880bc
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x5c87ff8
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x5c87f78
	void SetTeleportRotationThreshold(float Threshold);// 0x5c87f00
	void SetTeleportDistanceThreshold(float Threshold);// 0x5c87e88
	void SetPosition(float InPos, bool bFireNotifies);// 0x5c87dc4
	void SetPlayRate(float Rate);// 0x5c87d4c
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x5c87cd4
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x5c87bb0
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x5c87a9c
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x5c87a1c
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x5c87900
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x5c87838
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x5c877b8
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x5c87738
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x5c8766c
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x5c87550
	void SetClothMaxDistanceScale(float Scale);// 0x5c874d8
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x5c87408
	void SetAnimationMode(byte InAnimationMode);// 0x5c87390
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x5c87318
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x5c871c4
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x5c870d4
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x5c87054
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x5c86f34
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x5c86e14
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x5c86cc4
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x5c86c44
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x5c86b80
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x5c86a54
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x5c868e0
	void ResumeClothingSimulation();// 0x5c868cc
	void ResetClothTeleportMode();// 0x5c868b8
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x5c86840
	void ResetAllowedAnimCurveEvaluation();// 0x5c8682c
	void ResetAllBodiesSimulatePhysics();// 0x5c86818
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x5c86754
	void Play(bool bLooping);// 0x5c866d4
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x5c8652c
	void MarkRequiredBonesOutdated();// 0x5c864fc
	void K2_SetAnimInstanceClass(class Object NewClass);// 0x379cd48
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x5c86310
	bool IsPlaying();// 0x5c862e8
	bool IsClothingSimulationSuspended();// 0x5c862c0
	bool IsBodyGravityEnabled(FName BoneName);// 0x5c86240
	bool IsAnyBodyEnabledSimulatePhysics();// 0x5c8621c
	bool HasValidAnimationInstance();// 0x5c861f4
	float GetTeleportRotationThreshold();// 0x5c861cc
	float GetTeleportDistanceThreshold();// 0x5c861cc
	Vector GetSkeletalCenterOfMass();// 0x5c86184
	AnimInstance* GetPostProcessInstance();// 0x5c8615c
	float GetPosition();// 0x5c86134
	float GetPlayRate();// 0x5c8610c
	float GetMorphTarget(FName MorphTargetName);// 0x5c8608c
	TickPrerequisite GetEndPhysicsTickFunction();// 0x5c86038
	bool GetDisablePostProcessBlueprint();// 0x5c86010
	bool GetDisableAnimCurves();// 0x5c85fec
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x5c85e6c
	float GetClothMaxDistanceScale();// 0x5c85e44
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x5c85e1c
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x5c85d48
	AnimInstance* GetAnimInstance();// 0x5c85d20
	byte GetAnimationMode();// 0x5c85cf8
	bool GetAllowedAnimCurveEvaluate();// 0x5c85cd8
	void ForceClothNextUpdateTeleportAndReset();// 0x5c85cc4
	void ForceClothNextUpdateTeleport();// 0x5c85cb0
	FName FindConstraintBoneName(int ConstraintIndex);// 0x5c85c28
	void ClearMorphTargets();// 0x5c85c14
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x5c85b04
	void BindClothToMasterPoseComponent();// 0x5c85af0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x5c85a24
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x5c858bc
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x5c85754
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x5c85634

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x488, Size: 0x4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x48c, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x54c, Size: 0x4]
	int ForcedLodModel;//[Offset: 0x550, Size: 0x4]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]
	int MinLodModel;//[Offset: 0x558, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x568, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x56c, Size: 0xc]
	byte MeshComponentUpdateFlag;//[Offset: 0x584, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x585, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x585, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x585, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x585, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x585, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x585, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x585, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x585, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x586, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x586, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x586, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x586, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x586, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x586, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x586, Size: 0x1]
	bool bEnableSkippedFramesInterpolation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x586, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x587, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x587, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x587, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x587, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x58c, Size: 0x4]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x590, Size: 0x1c]
	int AnimUpdateRateTrackerValidationRate;//[Offset: 0x5b0, Size: 0x4]
	float[] OverrideAnimUpdateRateVisibleDistanceFactorThesholds;//[Offset: 0x5c0, Size: 0xc]
	int OverrideNonRenderedAnimUpdateRate;//[Offset: 0x5cc, Size: 0x4]
	float OverrideAnimInterpolationVisibleDistanceFactorTheshold;//[Offset: 0x5d0, Size: 0x4]
	bool UnHideBoneByName(const FName BoneName);// 0x5c8e764
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x5c8e5a0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x5c8e3dc
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);// 0x5c8e2d0
	void ShowAllMaterialSections(int LODIndex);// 0x5c8e258
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x5c8e174
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x5c8e090
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x5c8dfc4
	void SetRenderStatic(bool bNewValue);// 0x5c8df44
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x5c8de78
	void SetMinLOD(int InNewMinLOD);// 0x5c8de00
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x5c8dd3c
	void SetForcedLOD(int InNewForcedLOD);// 0x5c8dcc4
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x5c8dc44
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x5c8dbc4
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x5c8db4c
	bool IsRecentlyRendered();// 0x5c8db28
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x5c8da64
	bool IsBoneHiddenByName(FName BoneName);// 0x5c8d9e4
	bool HideBoneByName(const FName BoneName, const byte PhysBodyOption);// 0x5c8d918
	SkeletalMeshSocket* GetSocketByName(FName InSocketName);// 0x5c8d898
	FName GetSocketBoneName(FName InSocketName);// 0x5c8d80c
	Vector GetRefPosePosition(int BoneIndex);// 0x5c8d77c
	FName GetParentBone(FName BoneName);// 0x5c8d6f0
	int GetNumLODs();// 0x5c8d6c8
	int GetNumBones();// 0x5c8d6a0
	int GetCurrentLOD();// 0x5c8d684
	Transform GetComponentSpaceBoneTransform(const int BoneIndex);// 0x5c8d5dc
	FName GetBoneName(int BoneIndex);// 0x5c8d554
	int GetBoneIndex(FName BoneName);// 0x5c8d4d4
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x5c8d35c
	void ClearVertexColorOverride(int LODIndex);// 0x5c8d2e4
	void ClearSkinWeightOverride(int LODIndex);// 0x5c8d26c
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x5c8d1a0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x468, Size: 0xc]
	int MobileMaxLODReceiveDynamicShadows;//[Offset: 0x480, Size: 0x4]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x5c2beb0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x5c2bdec
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x5c2bcd8
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x5c2bc50
	FName[] GetMaterialSlotNames();// 0x5c2bbb4
	MaterialInterface*[] GetMaterials();// 0x5c2bb18
	int GetMaterialIndex(FName MaterialSlotName);// 0x5c2ba90

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 0x4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x30, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x4c, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0x68, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x74, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0x80, Size: 0xc]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x8c, Size: 0xc]
	byte SkelMirrorAxis;//[Offset: 0x98, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x99, Size: 0x1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x9c, Size: 0xc]
	PerPlatformInt MinLOD;//[Offset: 0xa8, Size: 0x4]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0xb0, Size: 0x4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xb4, Size: 0x4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xb8, Size: 0x4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xbc, Size: 0xc]
	MorphTarget*[] MorphTargets;//[Offset: 0xc8, Size: 0xc]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x1e4, Size: 0xc]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x1f0, Size: 0x4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x1f4, Size: 0xc]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x200, Size: 0x24]
	AssetUserData*[] AssetUserData;//[Offset: 0x224, Size: 0xc]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x230, Size: 0xc]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x40ff70c
	int NumSockets();// 0x5c848c4
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x5c847f8
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x5c84778
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x5c846f8
	BoxSphereBounds GetImportedBounds();// 0x5c846a4
	BoxSphereBounds GetBounds();// 0x5c84650
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x5c84574
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x5c844f4

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x24, Size: 0xc]
	Transform[] RefLocalPoses;//[Offset: 0x30, Size: 0xc]
	Guid VirtualBoneGuid;//[Offset: 0x110, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x120, Size: 0xc]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x12c, Size: 0xc]
	SmartNameContainer SmartNames;//[Offset: 0x174, Size: 0x3c]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1c0, Size: 0xc]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1cc, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x270, Size: 0xc]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: Transform.RotationTranslation
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: RotationTranslation
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 0x8]
	FName BoneName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x5c8be24
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x5c8bd94

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 0x4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]
	float BlendScale;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x24, Size: 0x4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 0x14]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x4c, Size: 0xc]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x5c294b4
	PhysicalMaterial* GetPhysicalMaterial();// 0x5c29484
	Material* GetBaseMaterial();// 0x5c2945c

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 0x50]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x24, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x34, Size: 0x4]
	float NormalScale;//[Offset: 0x38, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x3c, Size: 0x4]
	float IOR;//[Offset: 0x40, Size: 0x4]
	float Roughness0;//[Offset: 0x44, Size: 0x4]
	float Roughness1;//[Offset: 0x48, Size: 0x4]
	float LobeMix;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	float Restitution;//[Offset: 0x24, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float Density;//[Offset: 0x2c, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x34, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x38, Size: 0x4]
	byte SurfaceType;//[Offset: 0x3c, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x40, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x4]
	float FrictionScale;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 0x4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x60, Size: 0x38]
	ColorMaterialInput SpecularColor;//[Offset: 0x98, Size: 0x38]
	ColorMaterialInput BaseColor;//[Offset: 0xd0, Size: 0x38]
	ScalarMaterialInput Metallic;//[Offset: 0x108, Size: 0x38]
	ScalarMaterialInput Specular;//[Offset: 0x140, Size: 0x38]
	ScalarMaterialInput Roughness;//[Offset: 0x178, Size: 0x38]
	VectorMaterialInput Normal;//[Offset: 0x1b0, Size: 0x40]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1f0, Size: 0x38]
	ScalarMaterialInput Opacity;//[Offset: 0x228, Size: 0x38]
	ScalarMaterialInput OpacityMask;//[Offset: 0x260, Size: 0x38]
	byte MaterialDomain;//[Offset: 0x298, Size: 0x1]
	byte BlendMode;//[Offset: 0x299, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x29a, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x29b, Size: 0x1]
	enum DecalClipMode;//[Offset: 0x29c, Size: 0x1]
	byte ShadingModel;//[Offset: 0x29d, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x2a0, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a4, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 0x40]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 0x40]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 0x38]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 0x38]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 0x38]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 0x38]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 0x38]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 0x38]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 0x40]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 0x38]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 0x38]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e8, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e8, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6e8, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6e8, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6e8, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6e8, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6e8, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6e8, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e9, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x6ec, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x6f0, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x6f4, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f8, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x6fc, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x700, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x704, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x708, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x70c, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x710, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x720, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x724, Size: 0x1]
	bool bWriteAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x724, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x724, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x724, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x724, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x724, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x724, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x724, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x725, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x725, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x725, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x725, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x725, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x725, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x725, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x725, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x726, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x726, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x726, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x726, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x726, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x726, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x726, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x726, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x727, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x727, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x727, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x727, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x727, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x727, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x727, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x728, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x729, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x729, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x72c, Size: 0x4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x730, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x730, Size: 0x1]
	int EditorX;//[Offset: 0x734, Size: 0x4]
	int EditorY;//[Offset: 0x738, Size: 0x4]
	int EditorPitch;//[Offset: 0x73c, Size: 0x4]
	int EditorYaw;//[Offset: 0x740, Size: 0x4]
	MaterialExpression*[] Expressions;//[Offset: 0x744, Size: 0xc]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x750, Size: 0xc]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x75c, Size: 0xc]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x768, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x768, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x768, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x768, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x768, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x768, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x768, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x768, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x769, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x76c, Size: 0x4]
	byte BlendableLocation;//[Offset: 0x770, Size: 0x1]
	int BlendablePriority;//[Offset: 0x774, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1]
	byte RefractionMode;//[Offset: 0x779, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x77c, Size: 0x4]
	Guid StateId;//[Offset: 0x780, Size: 0x10]
	bool[] CachedQualityLevelsUsed;//[Offset: 0x79c, Size: 0xc]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x7e8, Size: 0xc]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	Color Constant;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName InputName;//[Offset: 0x8, Size: 0x8]
	int Mask;//[Offset: 0x10, Size: 0x4]
	int MaskR;//[Offset: 0x14, Size: 0x4]
	int MaskG;//[Offset: 0x18, Size: 0x4]
	int MaskB;//[Offset: 0x1c, Size: 0x4]
	int MaskA;//[Offset: 0x20, Size: 0x4]
	FName ExpressionName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float Constant;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	Vector Constant;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float ConstantX;//[Offset: 0x34, Size: 0x4]
	float ConstantY;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName InputName;//[Offset: 0x8, Size: 0x8]
	int Mask;//[Offset: 0x10, Size: 0x4]
	int MaskR;//[Offset: 0x14, Size: 0x4]
	int MaskG;//[Offset: 0x18, Size: 0x4]
	int MaskB;//[Offset: 0x1c, Size: 0x4]
	int MaskA;//[Offset: 0x20, Size: 0x4]
	FName ExpressionName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 0x4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 0x4]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x30, Size: 0xc]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x40, Size: 0xc]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x1c, Size: 0x10]
	byte MaterialFunctionUsage;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x1c, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 0xc]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 0x10]
	int LODBias;//[Offset: 0x30, Size: 0x4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x38, Size: 0x1]
	byte Filter;//[Offset: 0x39, Size: 0x1]
	byte LODGroup;//[Offset: 0x3a, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b, Size: 0x1]
	int CachedCombinedLODBias;//[Offset: 0x3c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0xc]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 0xc]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x24, Size: 0x38]
	FName[] RemovedBones;//[Offset: 0x5c, Size: 0xc]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0xc]
	AnimSequence* BakePose;//[Offset: 0x74, Size: 0x4]
	FString SourceImportFilename;//[Offset: 0x78, Size: 0xc]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 0x4]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0xd, Size: 0x1]
	byte TextureImportance;//[Offset: 0xe, Size: 0x1]
	byte ShadingImportance;//[Offset: 0xf, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x10, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x14, Size: 0x4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float NormalsThreshold;//[Offset: 0x1c, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x20, Size: 0x4]
	BoneReference[] BonesToRemove;//[Offset: 0x24, Size: 0xc]
	int BaseLOD;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x80, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x84, Size: 0xc]
	byte AdditiveAnimType;//[Offset: 0xf4, Size: 0x1]
	byte RefPoseType;//[Offset: 0xf5, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0xf8, Size: 0x4]
	int RefFrameIndex;//[Offset: 0xfc, Size: 0x4]
	int EncodingPkgVersion;//[Offset: 0x100, Size: 0x4]
	FName RetargetSource;//[Offset: 0x108, Size: 0x8]
	enum Interpolation;//[Offset: 0x110, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x112, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x118, Size: 0xc]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x60, Size: 0xc]
	float SequenceLength;//[Offset: 0x6c, Size: 0x4]
	float RateScale;//[Offset: 0x70, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x74, Size: 0xc]
	float GetPlayLength();// 0x5b43fc0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x24, Size: 0x4]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 0x4]
	FName NotifyName;//[Offset: 0x38, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 0x4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 0x4]
	float Duration;//[Offset: 0x48, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 0x24]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	byte MontageTickType;//[Offset: 0x71, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	int TrackIndex;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 0x4]
	int SlotIndex;//[Offset: 0x8, Size: 0x4]
	int SegmentIndex;//[Offset: 0xc, Size: 0x4]
	byte LinkMethod;//[Offset: 0x10, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 0x4]
	float SegmentLength;//[Offset: 0x18, Size: 0x4]
	float LinkValue;//[Offset: 0x1c, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x80, Size: 0x2c]
	float BlendInTime;//[Offset: 0xac, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xb0, Size: 0x2c]
	float BlendOutTime;//[Offset: 0xdc, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0xe0, Size: 0x4]
	FName SyncGroup;//[Offset: 0xe8, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0xf0, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0xf4, Size: 0x18]
	CompositeSection[] CompositeSections;//[Offset: 0x10c, Size: 0xc]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x118, Size: 0xc]
	BranchingPoint[] BranchingPoints;//[Offset: 0x124, Size: 0xc]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x133, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x134, Size: 0xc]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x140, Size: 0xc]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x14c, Size: 0x20]
	FName TimeStretchCurveName;//[Offset: 0x170, Size: 0x8]
	void GetSectionStartAndEndTime(FName InSectionName, out float OutStartTime, out float OutEndTime);// 0x5b3d4d0
	float GetSectionLength(FName InSectionName);// 0x5b3d444

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 0x4]
	float BlendTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 0x54]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	float GetFloatValue(float InTime);// 0x5b73a30

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x5b73408
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x5b73328

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 0x1]
	float DefaultValue;//[Offset: 0x44, Size: 0x4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 0x3c]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 0x8]
	float StartTime;//[Offset: 0x30, Size: 0x4]
	FName NextSectionName;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x4]
	float StartPos;//[Offset: 0x4, Size: 0x4]
	float AnimStartTime;//[Offset: 0x8, Size: 0x4]
	float AnimEndTime;//[Offset: 0xc, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x10, Size: 0x4]
	int LoopingCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 0x8]
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0xc]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x4528238
	FString GetNotifyName();// 0x5b3f15c

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x4528238
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x4528238
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x4528238
	FString GetNotifyName();// 0x5b3f15c

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 0x54]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0x10]
	int CurveTypeFlags;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SmartName
	FName displayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 0x40]
	FName BoneName;//[Offset: 0x60, Size: 0x8]
	byte PhysicsType;//[Offset: 0x68, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x69, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x69, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x69, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x69, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x69, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x6b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x6c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x70, Size: 0x4]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x74, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0xd8, Size: 0x118]
	Vector BuildScale3D;//[Offset: 0x1f4, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0xc]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 0xc]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 0xc]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 0xc]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]
	Vector Center;//[Offset: 0x60, Size: 0xc]
	float Radius;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x4, Size: 0x4]
	FName Name;//[Offset: 0x8, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]
	Quat Orientation;//[Offset: 0x60, Size: 0x10]
	Vector Center;//[Offset: 0x70, Size: 0xc]
	Rotator Rotation;//[Offset: 0x7c, Size: 0xc]
	float X;//[Offset: 0x88, Size: 0x4]
	float Y;//[Offset: 0x8c, Size: 0x4]
	float Z;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]
	Quat Orientation;//[Offset: 0x60, Size: 0x10]
	Vector Center;//[Offset: 0x70, Size: 0xc]
	Rotator Rotation;//[Offset: 0x7c, Size: 0xc]
	float Radius;//[Offset: 0x88, Size: 0x4]
	float Length;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x20, Size: 0xc]
	Box ElemBox;//[Offset: 0x2c, Size: 0x1c]
	Transform Transform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x20, Size: 0xc]
	Rotator Rotation;//[Offset: 0x2c, Size: 0xc]
	float Radius0;//[Offset: 0x38, Size: 0x4]
	float Radius1;//[Offset: 0x3c, Size: 0x4]
	float Length;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0xa, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0xc, Size: 0x1]
	enum SleepFamily;//[Offset: 0xe, Size: 0x1]
	byte DOFMode;//[Offset: 0xf, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 0x8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x2c]
	float MaxDepenetrationVelocity;//[Offset: 0x54, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x58, Size: 0x4]
	float LinearDamping;//[Offset: 0x64, Size: 0x4]
	float AngularDamping;//[Offset: 0x68, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x6c, Size: 0xc]
	Vector COMNudge;//[Offset: 0x78, Size: 0xc]
	float MassScale;//[Offset: 0x84, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x88, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x9c, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xac, Size: 0x4]
	float MaxAngularVelocity;//[Offset: 0xb0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xb4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xb8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xbc, Size: 0x4]
	int PositionSolverIterationCount;//[Offset: 0xc0, Size: 0x4]
	int VelocitySolverIterationCount;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x20, Size: 0xc]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x2c, Size: 0xc]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x38, Size: 0xc]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xc0, Size: 0x4]
	BodySetup*[] BodySetup;//[Offset: 0xc4, Size: 0xc]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x204, Size: 0xc]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 0x1a0]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 0xc]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 0x8]
	Vector Pos1;//[Offset: 0x28, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x34, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x40, Size: 0xc]
	Vector Pos2;//[Offset: 0x4c, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x58, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x64, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x1c, Size: 0x3c]
	<FName,NodeItem> TargetItems;//[Offset: 0x58, Size: 0x3c]
	<FName,FName> SourceToTarget;//[Offset: 0x94, Size: 0x3c]
	Object* SourceAsset;//[Offset: 0xd0, Size: 0x28]
	Object* TargetAsset;//[Offset: 0xf8, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 0x8]
	FString ApexFileName;//[Offset: 0x8, Size: 0xc]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 0x4]
	float HorizontalResistance;//[Offset: 0x4, Size: 0x4]
	float BendResistance;//[Offset: 0x8, Size: 0x4]
	float ShearResistance;//[Offset: 0xc, Size: 0x4]
	float Friction;//[Offset: 0x10, Size: 0x4]
	float Damping;//[Offset: 0x14, Size: 0x4]
	float TetherStiffness;//[Offset: 0x18, Size: 0x4]
	float TetherLimit;//[Offset: 0x1c, Size: 0x4]
	float Drag;//[Offset: 0x20, Size: 0x4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 0x4]
	float GravityScale;//[Offset: 0x28, Size: 0x4]
	float MassScale;//[Offset: 0x2c, Size: 0x4]
	float InertiaBlend;//[Offset: 0x30, Size: 0x4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 0x4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 0x4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 0x4]
	float SolverFrequency;//[Offset: 0x40, Size: 0x4]
	float FiberCompression;//[Offset: 0x44, Size: 0x4]
	float FiberExpansion;//[Offset: 0x48, Size: 0x4]
	float FiberResistance;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x1c, Size: 0x4]
	byte RootMotionMode;//[Offset: 0x20, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 0x1]
	bool bExecuteBlueprintInitializeAnimationOnDedicatedServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 0x1]
	bool bExecuteBlueprintUninitializeAnimationOnDedicatedServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21, Size: 0x1]
	bool bExecuteBlueprintUpdateAnimationOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21, Size: 0x1]
	bool bExecuteBlueprintPostEvaluateAnimationOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22, Size: 0x1]
	bool bExecuteBlueprintLODorRenderedChangedOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x24, Size: 0xc]
	delegate OnMontageStarted;//[Offset: 0x30, Size: 0xc]
	delegate OnMontageEnded;//[Offset: 0x3c, Size: 0xc]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x48, Size: 0xc]
	AnimNotifyQueue NotifyQueue;//[Offset: 0xf0, Size: 0x54]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x144, Size: 0xc]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x5b37660
	Pawn* TryGetPawnOwner();// 0x5b397d8
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x5b3971c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x5b39650
	void SetRootMotionMode(byte Value);// 0x5b395d0
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x5b3950c
	void SavePoseSnapshot(FName SnapshotName);// 0x5b3948c
	void ResetDynamics(enum InTeleportType);// 0x5b39414
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x5b3919c
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x5b38fb4
	static void MontageInstance_Stop(out const AnimMontageInstanceRef MontageInstanceRef, float InBlendOutTime);// 0x5b38e98
	static void MontageInstance_SetPosition(out const AnimMontageInstanceRef MontageInstanceRef, float NewPosition);// 0x5b38d90
	static void MontageInstance_SetPlayRate(out const AnimMontageInstanceRef MontageInstanceRef, float NewPlayRate);// 0x5b38c94
	static void MontageInstance_SetNextSection(out const AnimMontageInstanceRef MontageInstanceRef, FName SectionNameToChange, FName NextSection);// 0x5b38b3c
	static void MontageInstance_Resume(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b38a78
	static void MontageInstance_Pause(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b389c0
	static void MontageInstance_JumpToSectionsEnd(out const AnimMontageInstanceRef MontageInstanceRef, FName SectionName);// 0x5b388a4
	static void MontageInstance_JumpToSection(out const AnimMontageInstanceRef MontageInstanceRef, FName SectionName);// 0x5b38788
	static bool MontageInstance_IsPlaying(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b386c4
	static bool MontageInstance_IsActive(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b385f0
	static float MontageInstance_GetPosition(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b38534
	static float MontageInstance_GetPlayRate(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b38478
	static bool MontageInstance_GetIsStopped(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b383a4
	static FName MontageInstance_GetCurrentSection(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b382d8
	static float MontageInstance_GetBlendTime(out const AnimMontageInstanceRef MontageInstanceRef);// 0x5b3821c
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x5b38160
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x5b380a4
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x5b37fe8
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x5b37ee0
	void Montage_Resume(const AnimMontage* Montage);// 0x5b37e68
	AnimMontageInstanceRef Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x5b37ca8
	void Montage_Pause(const AnimMontage* Montage);// 0x5b37c30
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x5b37b74
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x5b37ab8
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x5b37a38
	bool Montage_IsActive(const AnimMontage* Montage);// 0x5b379b8
	float Montage_GetPosition(const AnimMontage* Montage);// 0x5b37938
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x5b378b8
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x5b37838
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x5b377b0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x5b37730
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x5b37660
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x5b374f0
	bool IsRecentlyRendered();// 0x5b374c8
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x5b37404
	bool IsAnyMontagePlaying();// 0x5b373dc
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x5b37310
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x5b371e0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x5b37148
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x5b37084
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x5b36fc0
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x5b36efc
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x5b36e38
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x5b36d74
	SkeletalMeshComponent* GetOwningComponent();// 0x5b36d4c
	Actor* GetOwningActor();// 0x5b36d24
	int GetLODLevel();// 0x5b36d04
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x5b36c40
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x5b36b7c
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x5b36ab8
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x5b369f4
	float GetInstanceMachineWeight(int MachineIndex);// 0x5b36974
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x5b368f4
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x5b36874
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x5b367f4
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x5b36774
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x5b366f4
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x5b36674
	float GetCurveValue(FName CurveName);// 0x5b365f4
	FName GetCurrentStateName(int MachineIndex);// 0x5b3656c
	AnimMontage* GetCurrentActiveMontage();// 0x5b36544
	void GetAllCurveNames(out FName[] OutNames);// 0x5b364a4
	AnimMontageInstanceRef GetActiveMontageInstanceRef();// 0x5b36408
	AnimMontageInstanceRef GetActiveInstanceRefForMontage(const AnimMontage* Montage);// 0x5b36324
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x5b36240
	void ClearMorphTargets();// 0x5b3622c
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x5b3614c
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x4528238
	void BlueprintUninitializeAnimation();// 0x4528238
	void BlueprintPostEvaluateAnimation();// 0x4528238
	void BlueprintLODOrRenderedChanged(const bool bLODChanged, const bool bRenderedChanged);// 0x4528238
	void BlueprintInitializeAnimation();// 0x4528238
	void BlueprintBeginPlay();// 0x4528238

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0xc, Size: 0xc]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x18, Size: 0x3c]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0xc]
	FName[] BoneNames;//[Offset: 0xc, Size: 0xc]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 0x8]
	FName SnapshotName;//[Offset: 0x20, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: AnimMontageInstanceRef

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 0xc]
	Guid AssetGuid;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0xc]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0xc, Size: 0x18]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0xc]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0xc]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x20, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0xc, Size: 0xc]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x18, Size: 0x38]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 0x4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 0x4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 0x4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 0xc]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 0xc]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 0x4]
	byte BlueprintType;//[Offset: 0x68, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 0x4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 0x4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 0x4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 0xc]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 0xc]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 0x4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 0x4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 0x4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 0x4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 0x38]
	FName VariableName;//[Offset: 0x60, Size: 0x8]
	FName AttachToName;//[Offset: 0x68, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 0xc]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 0xc]
	Guid VariableGuid;//[Offset: 0x9c, Size: 0x10]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 0x8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 0x4]
	byte LengthMode;//[Offset: 0x20, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 0x1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 0xc]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 0xc]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 0xc]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 0xc]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 0xc]
	Guid TimelineGuid;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 0x54]
	Vector GetVectorValue(float InTime);// 0x5b755a0

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 0x54]
	float AdjustHue;//[Offset: 0x170, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x174, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x178, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x17c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x180, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x184, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x188, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x5b73ec0

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 0xc]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 0x4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 0x38]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x4]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	float SavedPosition;//[Offset: 0x8, Size: 0x4]
	float SavedPlayRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void PhysicsAssetUpdated();// 0x36fd5d0
	void ClothConfigUpdated();// 0x36fd75c

--------------------------------
Class: TickPrerequisite

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c, Size: 0x4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	float GravityScale;//[Offset: 0x134, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x138, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x13c, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x140, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x144, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x148, Size: 0x4]
	byte MovementMode;//[Offset: 0x14c, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x14d, Size: 0x1]
	float GroundFriction;//[Offset: 0x170, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x174, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x17c, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x180, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x184, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x188, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x190, Size: 0x4]
	float BrakingFriction;//[Offset: 0x194, Size: 0x4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 0x1]
	float BrakingDecelerationWalking;//[Offset: 0x19c, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8, Size: 0x4]
	float AirControl;//[Offset: 0x1ac, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1b8, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1bc, Size: 0x4]
	float Buoyancy;//[Offset: 0x1c0, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1c4, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1c8, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1cc, Size: 0xc]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d9, Size: 0x1]
	bool bSkipAdjustVelocityOnPhysicalImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1da, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc, Size: 0x4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x1e4, Size: 0x4]
	float Mass;//[Offset: 0x1e8, Size: 0x4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	float StandingDownwardForceScale;//[Offset: 0x1f4, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x1f8, Size: 0x4]
	float PushForceFactor;//[Offset: 0x1fc, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x204, Size: 0x4]
	float MinTouchForce;//[Offset: 0x208, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x20c, Size: 0x4]
	float RepulsionForce;//[Offset: 0x210, Size: 0x4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218, Size: 0x4]
	float UpperImpactNormalScale;//[Offset: 0x21c, Size: 0x4]
	Vector Acceleration;//[Offset: 0x220, Size: 0xc]
	Vector LastUpdateLocation;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateVelocity;//[Offset: 0x250, Size: 0xc]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x25c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x260, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x264, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x270, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x27c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x288, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x28c, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x290, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x294, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x298, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x29c, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2a0, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a4, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a8, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2ac, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2b0, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b4, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b8, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2bc, Size: 0x4]
	enum NetworkSmoothingMode;//[Offset: 0x2c0, Size: 0x1]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2c4, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2c8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2cc, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2d0, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2d4, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2d8, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2e0, Size: 0x98]
	byte DefaultLandMovementMode;//[Offset: 0x378, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x379, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x37a, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37b, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37b, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37b, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37b, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37b, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37b, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37b, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37b, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37c, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37c, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37c, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37c, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37d, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37d, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37d, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37d, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37d, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37d, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37d, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37e, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37e, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37e, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x390, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x394, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3a0, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3a4, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3a8, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3ac, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3b0, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3b4, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x460, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x464, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x468, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x46c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x470, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x474, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x478, Size: 0x3c]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4bc, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4c4, Size: 0x90]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5e0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x620, Size: 0xc]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62d, Size: 0x1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x5b6b808
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x5b6b790
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x5b6b6cc
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x5b6b648
	void SetGroupsToIgnore(int GroupFlags);// 0x5b6b5d0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x5b6b54c
	void SetGroupsToAvoid(int GroupFlags);// 0x5b6b4d4
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x5b6b450
	void SetAvoidanceGroup(int GroupFlags);// 0x5b6b3d8
	void SetAvoidanceEnabled(bool bEnable);// 0x5b6b358
	float K2_GetWalkableFloorZ();// 0x5b6b330
	float K2_GetWalkableFloorAngle();// 0x5b6b308
	float K2_GetModifiedMaxAcceleration();// 0x5b6b2d8
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x5b6b1e8
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x5b6b020
	bool IsWalking();// 0x5b6aff0
	bool IsWalkable(out const HitResult Hit);// 0x5b6af44
	float GetValidPerchRadius();// 0x5b6af1c
	float GetPerchRadiusThreshold();// 0x5b6aef4
	PrimitiveComponent* GetMovementBase();// 0x5b6aecc
	float GetMinAnalogSpeed();// 0x5b6ae9c
	float GetMaxJumpHeightWithJumpTime();// 0x5b6ae6c
	float GetMaxJumpHeight();// 0x5b6ae3c
	float GetMaxBrakingDeceleration();// 0x5b6ae0c
	float GetMaxAcceleration();// 0x5b6addc
	Vector GetImpartedMovementBaseVelocity();// 0x5b6ad8c
	Vector GetCurrentAcceleration();// 0x5b6ad44
	Character* GetCharacterOwner();// 0x5b6ad28
	float GetAnalogInputModifier();// 0x4138fac
	void DisableMovement();// 0x3fa7180
	void ClearAccumulatedForces();// 0x3ea5bf4
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5b6ab24
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x5b6a9c8
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x5b6a8fc
	void AddForce(Vector Force);// 0x5b6a884

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120, Size: 0x4]
	Vector K2_GetInputVector();// 0x5c4cb24
	bool IsMoveInputIgnored();// 0x5c4cb6c
	Vector GetPendingInputVector();// 0x5c4cb24
	Pawn* GetPawnOwner();// 0x5c4cafc
	Vector GetLastInputVector();// 0x5c4cab4
	Vector ConsumeInputVector();// 0x5c4ca64
	void AddInputVector(Vector WorldVector, bool bForce);// 0x5c4c998

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xe0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x110, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x114, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x114, Size: 0x1]
	bool bFinishPathIfMissTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x114, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x118, Size: 0x4]
	MovementProperties MovementState;//[Offset: 0x11c, Size: 0x4]
	void StopMovementKeepPathing();// 0x5c32398
	void StopActiveMovement();// 0x3fa9838
	void SetFixedBrakingDistance(float DistanceToEndOfPath);// 0x5c32320
	bool IsSwimming();// 0x5c322f0
	bool IsMovingOnGround();// 0x5b6aff0
	bool IsFlying();// 0x5c322c0
	bool IsFalling();// 0x5c32290
	bool IsCrouching();// 0x5c32260
	Vector GetActorFeetLocation();// 0x5c32210
	void ClearFixedBrakingDistance();// 0x5c321fc

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xa8, Size: 0x4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xac, Size: 0x4]
	Vector Velocity;//[Offset: 0xb0, Size: 0xc]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xc1, Size: 0x1]
	Vector PlaneConstraintNormal;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xd0, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xdc, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xdc, Size: 0x1]
	void StopMovementImmediately();// 0x371babc
	void SnapUpdatedComponentToPlane();// 0x3ff9654
	void SetVelocity(out const Vector NewVelocity);// 0x5c2f370
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x3e83c14
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x5c2f2f8
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x5c2f280
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x5c2f1b8
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x5c2f130
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x3faa3a8
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x3f10d18
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x5c2ef6c
	float K2_GetModifiedMaxSpeed();// 0x5c2ef3c
	float K2_GetMaxSpeedModifier();// 0x5c2ef0c
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x5c2ee84
	Vector GetVelocity();// 0x5c2ee60
	Vector GetPlaneConstraintOrigin();// 0x5c2ee2c
	Vector GetPlaneConstraintNormal();// 0x5c2edf8
	enum GetPlaneConstraintAxisSetting();// 0x5c2eddc
	PhysicsVolume* GetPhysicsVolume();// 0x5c2edac
	float GetMaxSpeed();// 0x5c2ed7c
	float GetGravityZ();// 0x5c2ed4c
	Vector ConstrainNormalToPlane(Vector Normal);// 0x5c2ecb0
	Vector ConstrainLocationToPlane(Vector Location);// 0x5c2ec14
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x5c2eb78

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0x10, Size: 0x88]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName ExtraName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 0xc]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x478, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x47c, Size: 0x4]
	float CapsuleHeight;//[Offset: 0x480, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x5b65198
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x5b650d0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x5b65008
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5b64f1c
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5b64e38
	float GetUnscaledCapsuleRadius();// 0x5b64e1c
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x5b64de8
	float GetUnscaledCapsuleHalfHeight();// 0x5b64dcc
	float GetShapeScale();// 0x5b64d84
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5b64c50
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5b64b24
	float GetScaledCapsuleRadius();// 0x5b64acc
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x5b64a64
	float GetScaledCapsuleHalfHeight();// 0x5b64a0c

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x468, Size: 0x4]
	BodySetup* ShapeBodySetup;//[Offset: 0x46c, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x470, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x470, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x474, Size: 0x4]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x4]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0xe0]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 0x4]
	float Position;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 0x4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 0x90]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 0xc]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x27c, Size: 0x4]
	byte Ping;//[Offset: 0x280, Size: 0x1]
	FString PlayerName;//[Offset: 0x284, Size: 0xc]
	int PlayerId;//[Offset: 0x29c, Size: 0x4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a0, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a0, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a0, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a0, Size: 0x1]
	int StartTime;//[Offset: 0x2a4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2a8, Size: 0x4]
	FString SavedNetworkAddress;//[Offset: 0x2b0, Size: 0xc]
	UniqueNetIdRepl UniqueId;//[Offset: 0x2bc, Size: 0x18]
	FString PlayerNamePrivate;//[Offset: 0x2f0, Size: 0xc]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void SetScore(float NewScore);// 0x3eaaf78
	void SetIsSpectator(bool bValue);// 0x5c65a94
	void SetIsOnlySpectator(bool bValue);// 0x5c65a0c
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x4528238
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x4528238
	void OnRep_UniqueId();// 0x3e5a370
	void OnRep_Score();// 0x3e5a3c4
	void OnRep_PlayerName();// 0x3e5a38c
	void OnRep_PlayerId();// 0x3eab180
	bool IsInactive();// 0x5c659ec
	FString GetPlayerName();// 0x5c65958
	void ActiveStateChanged();// 0x3e98664

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	float DamageImpulse;//[Offset: 0x20, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 0x4]
	float DamageFalloff;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x300, Size: 0x4]
	Pawn* AcknowledgedPawn;//[Offset: 0x304, Size: 0x4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x308, Size: 0x4]
	HUD* MyHUD;//[Offset: 0x30c, Size: 0x4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x310, Size: 0x4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x314, Size: 0x4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x31c, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x334, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x33c, Size: 0xc]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x348, Size: 0xc]
	float LastSpectatorStateSynchTime;//[Offset: 0x358, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x35c, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x368, Size: 0xc]
	int ClientCap;//[Offset: 0x374, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x378, Size: 0x4]
	class CheatManager* CheatClass;//[Offset: 0x37c, Size: 0x4]
	PlayerInput* PlayerInput;//[Offset: 0x380, Size: 0x4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x384, Size: 0xc]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3dc, Size: 0x1]
	bool bShouldSpawnSpectatorPawnWhenBeginSpectating;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3dc, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3dd, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x40c, Size: 0x4]
	NetConnection* NetConnection;//[Offset: 0x410, Size: 0x4]
	float InputYawScale;//[Offset: 0x420, Size: 0x4]
	float InputPitchScale;//[Offset: 0x424, Size: 0x4]
	float InputRollScale;//[Offset: 0x428, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x42c, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x42c, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x42c, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x42c, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x42c, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x430, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x434, Size: 0xc]
	byte DefaultMouseCursor;//[Offset: 0x440, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x441, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x442, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x443, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x444, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x448, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x44a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4b8, Size: 0x4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bc, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4c8, Size: 0x4]
	delegate OnSpectatorPawnChanged;//[Offset: 0x520, Size: 0xc]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x52c, Size: 0x4]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x538, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x5c61a7c
	bool WasInputKeyJustPressed(Key Key);// 0x5c618bc
	void ToggleSpeaking(bool bInSpeaking);// 0x5c61834
	void SwitchLevel(FString URL);// 0x5c6179c
	void StopHapticEffect(enum Hand);// 0x5c61724
	void StartSpectatingOnly();// 0x5c61708
	void StartFire(byte FireModeNum);// 0x5c61688
	void SpectatorPawnChangedEvent__DelegateSignature(SpectatorPawn* NewSpectatorPawn, SpectatorPawn* OldSpectatorPawn, PlayerController* Controller);// 0x4528238
	SpectatorPawn* SpawnSpectatorPawn();// 0x5c61658
	bool ShouldSpawnSpectatorPawnWhenBeginSpectating();// 0x5c61638
	void SetVirtualJoystickVisibility(bool bVisible);// 0x5c615b0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x5c61410
	void SetSpectatorPawn(SpectatorPawn* NewSpectatorPawn);// 0x5c61390
	void SetShouldSpawnSpectatorPawnWhenBeginSpectating(bool bValue);// 0x5c61308
	void SetName(FString S);// 0x5c61270
	void SetMouseLocation(const int X, const int Y);// 0x5c611b4
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x5c610f8
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x5c60ff8
	void SetDisableHaptics(bool bNewDisabled);// 0x5c60f70
	void SetControllerLightColor(Color Color);// 0x5c60f00
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x5c60d34
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x5c60c28
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x5c60b68
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x5c60a58
	void ServerViewPrevPlayer();// 0x5c609fc
	void ServerViewNextPlayer();// 0x5c609a0
	void ServerVerifyViewTarget();// 0x5c60944
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x5c6088c
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x5c60780
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x5c6067c
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x5c602c8
	void ServerToggleAILogging();// 0x5c6026c
	void ServerShortTimeout();// 0x5c60210
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x5c60148
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x5c60030
	void ServerRestartPlayer();// 0x5c5ffd4
	void ServerPause();// 0x5c5ff78
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x5c5fed4
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x5c5fb20
	void ServerCheckClientPossessionReliable();// 0x5c5fac4
	void ServerCheckClientPossession();// 0x5c5fa68
	void ServerChangeName(FString S);// 0x5c5f9a0
	void ServerCamera(FName NewMode);// 0x5c5f8ec
	void ServerAcknowledgePossession(Pawn* P);// 0x5c5f838
	void SendToConsole(FString Command);// 0x5c5f7a0
	void RestartLevel();// 0x3eb0a14
	void RemoveHiddenActorWithChildren(Actor* InActor);// 0x5c5f728
	void RemoveHiddenActor(Actor* InActor);// 0x5c5f6b0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x5c5f590
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x5c5f440
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x5c5f160
	void Pause();// 0x3e91a2c
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x5c5f0cc
	void LocalTravel(FString URL);// 0x5c5f034
	bool IsInputKeyDown(Key Key);// 0x5c5ee74
	bool IsConnected();// 0x5c5ee44
	void GetViewportSize(out int SizeX, out int SizeY);// 0x5c5ed64
	SpectatorPawn* GetSpectatorPawn();// 0x5c5ed48
	Pawn* GetPawnOrSpectator();// 0x5c5ed24
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x5c5ec3c
	LocalPlayer* GetLocalPlayer();// 0x5c5ec14
	Vector GetInputVectorKeyState(Key Key);// 0x5c5ea44
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x5c5e8c4
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x5c5e7e4
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x5c5e660
	float GetInputKeyTimeDown(Key Key);// 0x5c5e4a0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x5c5e37c
	float GetInputAnalogKeyState(Key Key);// 0x5c5e1bc
	HUD* GetHUD();// 0x5c5e194
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x5c5dfec
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x5c5de70
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x5c5dcf4
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x5c5db90
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x5c5da58
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x5c5d920
	Actor*[] GetHiddenActors();// 0x5c5d8b8
	Vector GetFocalLocation();// 0x5c5d868
	void FOV(float NewFOV);// 0x3fb2d40
	void EnableCheats();// 0x3eaf31c
	void DestroySpectatorPawn();// 0x5c5d84c
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x5c5d6e0
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x5c5d600
	void ConsoleKey(Key Key);// 0x5c5d440
	void ClientWasKicked(const FText KickReason);// 0x5c5d344
	void ClientVoiceHandshakeComplete();// 0x3e91890
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x5c5d2ac
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x5c5d0f4
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x5c5ce88
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x5c5cd04
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x5c5cb90
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x5c5ca20
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x5c5c95c
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x5c5c890
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x3f0c39c
	void ClientStartOnlineSession();// 0x3e61c30
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3e61efc
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x5c5c788
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x5c5c700
	void ClientSetHUD(class HUD NewHUDClass);// 0x4011c4c
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x5c5c5f8
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x5c5c47c
	void ClientSetCameraMode(FName NewCamMode);// 0x5c5c3fc
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x5c5c258
	void ClientSetBlockOnAsyncLoading();// 0x3e48af8
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x5c5c15c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x5c5c0c4
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x5c5c044
	void ClientRestart(Pawn* NewPawn);// 0x3fae1c4
	void ClientReset();// 0x3e47f9c
	void ClientRepObjRef(Object* Object);// 0x5c5bfc4
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x5c5be2c
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x5c5bcd0
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x5c5bbac
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x5c5ba58
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x5c5b950
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x5c5b7e4
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x5c5b690
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x5c5b3c0
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x5c5b154
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x5c5b02c
	void ClientIgnoreMoveInput(bool bIgnore);// 0x5c5afa4
	void ClientIgnoreLookInput(bool bIgnore);// 0x5c5af1c
	void ClientGotoState(FName NewState);// 0x5c5ae9c
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x5c5add0
	void ClientForceGarbageCollection();// 0x3e90170
	void ClientFlushLevelStreaming();// 0x5c5adbc
	void ClientEndOnlineSession();// 0x4028b4c
	void ClientEnableNetworkVoice(bool bEnable);// 0x5c5ad34
	void ClientCommitMapChange();// 0x3e46e5c
	void ClientClearCameraLensEffects();// 0x3e61af8
	void ClientCapBandwidth(int Cap);// 0x3e48b94
	void ClientCancelPendingMapChange();// 0x3e9115c
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x5c5ac28
	void ClearHiddenActors();// 0x5c5ac14
	void ClearAudioListenerOverride();// 0x5c5ac00
	void ClearAudioListenerAttenuationOverride();// 0x5c5abec
	bool CanRestartPlayer();// 0x5c5abbc
	void Camera(FName NewMode);// 0x5c5ab3c
	void AddYawInput(float Val);// 0x5c5aabc
	void AddRollInput(float Val);// 0x5c5aa3c
	void AddPitchInput(float Val);// 0x3eaca84
	void AddHiddenActorWithChildren(Actor* InActor);// 0x5c5a9c4
	void AddHiddenActor(Actor* InActor);// 0x5c5a94c
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x402edc0

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 0x4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x27c, Size: 0x4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x284, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x28c, Size: 0xc]
	FName[] DebugDisplay;//[Offset: 0x2a0, Size: 0xc]
	FName[] ToggledDebugCategories;//[Offset: 0x2ac, Size: 0xc]
	Canvas* Canvas;//[Offset: 0x2b8, Size: 0x4]
	Canvas* DebugCanvas;//[Offset: 0x2bc, Size: 0x4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x2c0, Size: 0xc]
	delegate OnHUDToggled;//[Offset: 0x2cc, Size: 0xc]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2d8, Size: 0x4]
	Actor* ShowDebugTargetActor;//[Offset: 0x2dc, Size: 0x4]
	void ShowHUD();// 0x3e43d40
	void ShowDebugToggleSubCategory(FName Category);// 0x5ba8b78
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x5ba8b00
	void ShowDebug(FName DebugType);// 0x5ba8a80
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x5ba89bc
	void RemoveAllDebugStrings();// 0x5ba89a8
	void ReceiveHitBoxRelease(const FName BoxName);// 0x4528238
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x4528238
	void ReceiveHitBoxClick(const FName BoxName);// 0x4528238
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x4528238
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x4528238
	Vector Project(Vector Location);// 0x5ba8914
	void PreviousDebugTarget();// 0x3e721a8
	void NextDebugTarget();// 0x4009614
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x5ba8744
	PlayerController* GetOwningPlayerController();// 0x4138fac
	Pawn* GetOwningPawn();// 0x5ba871c
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x5ba84f0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x5ba8358
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x5ba7ee0
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x5ba7c94
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x5ba7af8
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x5ba7774
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x5ba754c
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x5ba7174
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x5ba6f90
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x5ba6e2c
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x5ba6c90
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x5ba68cc

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 0x4]
	float OrgY;//[Offset: 0x20, Size: 0x4]
	float ClipX;//[Offset: 0x24, Size: 0x4]
	float ClipY;//[Offset: 0x28, Size: 0x4]
	Color DrawColor;//[Offset: 0x2c, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	int SizeX;//[Offset: 0x34, Size: 0x4]
	int SizeY;//[Offset: 0x38, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x40, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 0x4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 0x4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 0x4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x5b63a48
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x5b63964
	Vector K2_Project(Vector WorldLocation);// 0x5b638d0
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x5b637a0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x5b634cc
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x5b630f0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x5b62f5c
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x5b62e2c
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x5b62c14
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x5b62abc
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x5b62964
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x5b62444
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x5b62328

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0x84, Size: 0x4]
	int LevelIndex;//[Offset: 0x88, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0x8c, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1]
	byte AddressX;//[Offset: 0x91, Size: 0x1]
	byte AddressY;//[Offset: 0x92, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0x94, Size: 0x8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xa0, Size: 0x8]
	bool StreamIn(int NewMipCount, bool bHighPrio);// 0x5cab67c
	int GetNumResidentMips();// 0x5cab654
	int GetNumRequestedMips();// 0x5cab62c
	int GetNumMipsAllowed(bool bIgnoreMinResidency);// 0x5cab5a4
	int Blueprint_GetSizeY();// 0x5cab57c
	int Blueprint_GetSizeX();// 0x5cab554

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 0xc]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 0xc]
	int IsRemapped;//[Offset: 0x3c, Size: 0x4]
	float EmScale;//[Offset: 0x40, Size: 0x4]
	float Ascent;//[Offset: 0x44, Size: 0x4]
	float Descent;//[Offset: 0x48, Size: 0x4]
	float Leading;//[Offset: 0x4c, Size: 0x4]
	int Kerning;//[Offset: 0x50, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 0x90]
	int NumCharacters;//[Offset: 0xe4, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 0xc]
	float ScalingFactor;//[Offset: 0xf4, Size: 0x4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x100, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 0x28]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0xc]
	float Height;//[Offset: 0xc, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	byte CharacterSet;//[Offset: 0x11, Size: 0x1]
	FString Chars;//[Offset: 0x14, Size: 0xc]
	FString UnicodeRange;//[Offset: 0x20, Size: 0xc]
	FString CharsFilePath;//[Offset: 0x2c, Size: 0xc]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 0xc]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 0x4]
	int XPadding;//[Offset: 0x64, Size: 0x4]
	int YPadding;//[Offset: 0x68, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	int Kerning;//[Offset: 0x80, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0xc]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0xc, Size: 0x10]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0xc]
	enum Hinting;//[Offset: 0xc, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x10, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0xc]
	float ScalingFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x10, Size: 0xc]
	FString Cultures;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 0xc]
	FString DebugText;//[Offset: 0x1c, Size: 0xc]
	float TimeRemaining;//[Offset: 0x28, Size: 0x4]
	float Duration;//[Offset: 0x2c, Size: 0x4]
	Color TextColor;//[Offset: 0x30, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 0xc]
	Font* Font;//[Offset: 0x44, Size: 0x4]
	float FontScale;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x27c, Size: 0x4]
	SceneComponent* TransformComponent;//[Offset: 0x280, Size: 0x4]
	float DefaultFOV;//[Offset: 0x290, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x298, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x2a0, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2f0, Size: 0x550]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x840, Size: 0x550]
	TViewTarget ViewTarget;//[Offset: 0xd90, Size: 0x560]
	TViewTarget PendingViewTarget;//[Offset: 0x12f0, Size: 0x560]
	delegate OnViewTargetAssigned;//[Offset: 0x1868, Size: 0xc]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1880, Size: 0x550]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x1e10, Size: 0x550]
	CameraModifier*[] ModifierList;//[Offset: 0x2360, Size: 0xc]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x236c, Size: 0xc]
	float FreeCamDistance;//[Offset: 0x2378, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x237c, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2388, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x23a4, Size: 0xc]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x23b0, Size: 0x4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x23b4, Size: 0x4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x23d4, Size: 0xc]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x23ec, Size: 0xc]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x23f8, Size: 0xc]
	CameraActor* AnimCameraActor;//[Offset: 0x2404, Size: 0x4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2408, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2408, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2408, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2408, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2409, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x240c, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2410, Size: 0x4]
	float ViewYawMin;//[Offset: 0x2414, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2418, Size: 0x4]
	float ViewRollMin;//[Offset: 0x241c, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2420, Size: 0x4]
	void ViewTargetAssignedEvent__DelegateSignature(Actor* NewTarget, Actor* OldTarget);// 0x4528238
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4018d54
	void StopCameraFade();// 0x3ea6308
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x5c56684
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x5c565b8
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x5c564ec
	void StopAllCameraShakes(bool bImmediately);// 0x5c56464
	void StopAllCameraAnims(bool bImmediate);// 0x373d18c
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x5c56278
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x5c56164
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x5c560dc
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x3ea6288
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x5c55f80
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x5c55c5c
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x5c55af4
	void OnPhotographySessionStart();// 0x3e5a3c4
	void OnPhotographySessionEnd();// 0x3e5a3a8
	void OnPhotographyMultiPartCaptureStart();// 0x3e82394
	void OnPhotographyMultiPartCaptureEnd();// 0x3e43d40
	TViewTarget GetViewTargetInfo();// 0x5c55974
	PlayerController* GetOwningPlayerController();// 0x5c55944
	float GetFOVAngle();// 0x5b713a0
	Vector GetCameraUpVector();// 0x5c55914
	Quat GetCameraRotationQuat();// 0x5c558f0
	Rotator GetCameraRotation();// 0x5c558c0
	Vector GetCameraRightVector();// 0x5c55890
	Vector GetCameraLocation();// 0x5c55860
	Vector GetCameraForwardVector();// 0x5c55830
	float GetAspectRatio();// 0x5c55810
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x5b93cd8
	void ClearCameraLensEffects();// 0x4018234
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x4528238
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x5c55788
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x5c55700

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x540]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x4f0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x530, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	float WhiteTemp;//[Offset: 0x14, Size: 0x4]
	float WhiteTint;//[Offset: 0x18, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 0x10]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 0x4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float BlueCorrection;//[Offset: 0x174, Size: 0x4]
	float ExpandGamut;//[Offset: 0x178, Size: 0x4]
	float FilmSlope;//[Offset: 0x17c, Size: 0x4]
	float FilmToe;//[Offset: 0x180, Size: 0x4]
	float FilmShoulder;//[Offset: 0x184, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x188, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x18c, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x190, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1a0, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1b0, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1b4, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1b8, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1bc, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1cc, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1dc, Size: 0x10]
	float FilmContrast;//[Offset: 0x1ec, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1f0, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1f4, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x1f8, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x1fc, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x20c, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x210, Size: 0x4]
	byte BloomMethod;//[Offset: 0x214, Size: 0x1]
	float BloomIntensity;//[Offset: 0x218, Size: 0x4]
	float BloomThreshold;//[Offset: 0x21c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x220, Size: 0x4]
	float Bloom1Size;//[Offset: 0x224, Size: 0x4]
	float Bloom2Size;//[Offset: 0x228, Size: 0x4]
	float Bloom3Size;//[Offset: 0x22c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x230, Size: 0x4]
	float Bloom5Size;//[Offset: 0x234, Size: 0x4]
	float Bloom6Size;//[Offset: 0x238, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x23c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x24c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x25c, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x26c, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x27c, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x28c, Size: 0x10]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x29c, Size: 0x4]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 0x4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2a4, Size: 0x8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2ac, Size: 0xc]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 0x4]
	float BloomDirtMaskIntensity;//[Offset: 0x2cc, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d0, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e0, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x2f0, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f4, Size: 0x4]
	float CameraShutterSpeed;//[Offset: 0x2f8, Size: 0x4]
	float CameraISO;//[Offset: 0x2fc, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x300, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x304, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x308, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x30c, Size: 0x4]
	byte AutoExposureMethod;//[Offset: 0x310, Size: 0x1]
	float AutoExposureLowPercent;//[Offset: 0x314, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x318, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x31c, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x320, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x324, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x328, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x32c, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x330, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x334, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x338, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x33c, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x34c, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x350, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x354, Size: 0x4]
	LinearColor LensFlareTints;//[Offset: 0x358, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x3d8, Size: 0x4]
	float GrainJitter;//[Offset: 0x3dc, Size: 0x4]
	float GrainIntensity;//[Offset: 0x3e0, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x3e4, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3e8, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x3ec, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3f4, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3f8, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x3fc, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x400, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x404, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x408, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x40c, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x410, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x414, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x418, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x428, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x42c, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x430, Size: 0x4]
	byte DepthOfFieldMethod;//[Offset: 0x434, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x435, Size: 0x1]
	float DepthOfFieldSensorWidth;//[Offset: 0x438, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x43c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x440, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x444, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x448, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x44c, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x450, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x454, Size: 0x4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x458, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x45c, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x460, Size: 0x4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x464, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x468, Size: 0x4]
	float DepthOfFieldColorThreshold;//[Offset: 0x46c, Size: 0x4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x470, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x474, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x478, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x47c, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x480, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x484, Size: 0x4]
	float LPVIntensity;//[Offset: 0x488, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x48c, Size: 0x4]
	float LPVSize;//[Offset: 0x490, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x494, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x498, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x49c, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4a0, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4a4, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4a8, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4ac, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4b0, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4b4, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4b8, Size: 0x4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4bc, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4c0, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4c4, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x4c8, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4cc, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x4d0, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4d4, Size: 0xc]
	Object*[] Blendables;//[Offset: 0x4e0, Size: 0xc]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x540]
	PlayerState* PlayerState;//[Offset: 0x550, Size: 0x4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	byte Priority;//[Offset: 0x1d, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 0x4]
	float AlphaInTime;//[Offset: 0x24, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x28, Size: 0x4]
	float Alpha;//[Offset: 0x2c, Size: 0x4]
	bool IsDisabled();// 0x51fdcc8
	Actor* GetViewTarget();// 0x5b6042c
	void EnableModifier();// 0x3e3f0e8
	void DisableModifier(bool bImmediate);// 0x5b603a4
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x4528238
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x4528238

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x2b4, Size: 0x4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x2b8, Size: 0x4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x2bc, Size: 0x4]
	Transform RelativeTransform;//[Offset: 0x2c0, Size: 0x30]
	float BaseFOV;//[Offset: 0x2f0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2f8, Size: 0xc]
	float DistFromCamera;//[Offset: 0x304, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x27c, Size: 0x4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x284, Size: 0xc]
	delegate OnParticleBurst;//[Offset: 0x290, Size: 0xc]
	delegate OnParticleDeath;//[Offset: 0x29c, Size: 0xc]
	delegate OnParticleCollide;//[Offset: 0x2a8, Size: 0xc]
	void ToggleActive();// 0x5b80f50
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5b80e90
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3e98068
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5b80dd4
	void SetFloatParameter(FName ParameterName, float Param);// 0x5b80d10
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5b80c48
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5b80b8c
	void OnRep_bCurrentlyActive();// 0x3e82394
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x3eaaf78
	bool IsActive();// 0x5b80b64
	void Deactivate();// 0x5b80b50
	void Activate();// 0x5b80b3c

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x468, Size: 0x4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x46c, Size: 0xc]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x478, Size: 0xc]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x484, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x485, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x485, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x485, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x485, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x486, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x486, Size: 0x1]
	byte LODMethod;//[Offset: 0x489, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x48a, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x48c, Size: 0xc]
	delegate OnParticleSpawn;//[Offset: 0x498, Size: 0xc]
	delegate OnParticleBurst;//[Offset: 0x4a4, Size: 0xc]
	delegate OnParticleDeath;//[Offset: 0x4b0, Size: 0xc]
	delegate OnParticleCollide;//[Offset: 0x4bc, Size: 0xc]
	Vector OldPosition;//[Offset: 0x4c8, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x4d4, Size: 0xc]
	float WarmupTime;//[Offset: 0x4e0, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x4e4, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x4ec, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x4f4, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x514, Size: 0xc]
	float CustomTimeDilation;//[Offset: 0x528, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x56c, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x578, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x580, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x581, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x582, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x5ac, Size: 0xc]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5c49ed4
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x5c49d7c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x5c49d04
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5c49c48
	void SetFloatParameter(FName ParameterName, float Param);// 0x5c49b84
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x5c49ab0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5c499e8
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x5c498dc
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x5c497d4
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x5c496c8
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x5c495bc
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x5c494b4
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x5c493a8
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x5c492e4
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x5c491b8
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x5c49014
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5c48f58
	void ResetParameters(out const ParticleSysParam[] NewParameters);// 0x5c48e74
	void ReleaseToPool();// 0x5c48e60
	void KillParticlesForced();// 0x5c48e4c
	void KillParticle(int EmitterIndex, int ParticleIndex);// 0x5c48d90
	int GetNumActiveParticles();// 0x5c48d68
	MaterialInterface* GetNamedMaterial(FName InName);// 0x5c48ce0
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x5c48bc4
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x5c48aa4
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x5c48988
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x5c4886c
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x5c4874c
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x5c48630
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x5c48558
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x5c483b8
	void ForceSpawn(int EmitterIndex, float DeltaTime, int InSpawnCount, int InBurstCount, out const Vector InLocation, out const Vector InVelocity);// 0x5c481cc
	void EndTrails();// 0x5c481b8
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x5c480ec
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x5c47f94

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 0x4]
	float WarmupTime;//[Offset: 0x28, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 0xc]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 0x4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 0x4]
	byte LODMethod;//[Offset: 0x4c, Size: 0x1]
	float[] LODDistances;//[Offset: 0x50, Size: 0xc]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 0xc]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0x8c, Size: 0x4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	float Delay;//[Offset: 0x94, Size: 0x4]
	float DelayLow;//[Offset: 0x98, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa0, Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xa4, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xa8, Size: 0x4]
	enum MaxSignificanceLevel;//[Offset: 0xac, Size: 0x1]
	uint32 MaxPoolSize;//[Offset: 0xb0, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xb4, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xc0, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0xc4, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0xc8, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe4, Size: 0xc]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf0, Size: 0xc]
	bool ContainsEmitterType(class Object TypeData);// 0x5c478a4

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 0xc]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 0x4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 0x4]
	byte DetailMode;//[Offset: 0x50, Size: 0x1]
	uint32 DetailModeBitmask;//[Offset: 0x54, Size: 0x4]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x59, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 0x4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 0xc]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 0x4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 0x4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 0x4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 0xc]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 0xc]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 0xc]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 0xc]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 0xc]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x24, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x30, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x3c, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	byte SortMode;//[Offset: 0x49, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a, Size: 0x1]
	float EmitterDuration;//[Offset: 0x4c, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x50, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	int EmitterLoops;//[Offset: 0x58, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c, Size: 0x28]
	byte ParticleBurstMethod;//[Offset: 0x84, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x88, Size: 0xc]
	float EmitterDelay;//[Offset: 0x94, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0x98, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0x9d, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xa0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xa4, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	float RandomImageTime;//[Offset: 0xac, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xb0, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xb8, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xc4, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	int MaxDrawCount;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0xd4, Size: 0x4]
	byte BoundingMode;//[Offset: 0xd8, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xd9, Size: 0x1]
	float AlphaThreshold;//[Offset: 0xdc, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0xe0, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xe4, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0xf0, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x100, Size: 0xc]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	byte LODValidity;//[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 0x4]
	float MaxValue;//[Offset: 0x20, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x1c]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0xc, Size: 0xc]
	byte LockFlag;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20, Size: 0x28]
	RawDistributionFloat RateScale;//[Offset: 0x48, Size: 0x28]
	byte ParticleBurstMethod;//[Offset: 0x70, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x74, Size: 0xc]
	RawDistributionFloat BurstScale;//[Offset: 0x80, Size: 0x28]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24, Size: 0x40]
	OrbitOptions OffsetOptions;//[Offset: 0x64, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x68, Size: 0x40]
	OrbitOptions RotationOptions;//[Offset: 0xa8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac, Size: 0x40]
	OrbitOptions RotationRateOptions;//[Offset: 0xec, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 0x4]
	float MaxValue;//[Offset: 0x20, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x24, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x30, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f, Size: 0x1]
	FName EventName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 0xc]
	int ActiveTab;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0xc]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 0xc]
	float ViewStartInput;//[Offset: 0x18, Size: 0x4]
	float ViewEndInput;//[Offset: 0x1c, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x20, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x4]
	Color CurveColor;//[Offset: 0x4, Size: 0x4]
	FString CurveName;//[Offset: 0x8, Size: 0xc]
	int bHideCurve;//[Offset: 0x14, Size: 0x4]
	int bColorCurve;//[Offset: 0x18, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 0x4]
	int bClamp;//[Offset: 0x20, Size: 0x4]
	float ClampLow;//[Offset: 0x24, Size: 0x4]
	float ClampHigh;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x5c28bc4
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x5c28b08
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x5c28a44
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x5c28944
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x5c28208
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x5c28188
	float K2_GetScalarParameterValue(FName ParameterName);// 0x5c28108
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x5c28880
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x5c28808
	void CopyInterpParameters(MaterialInstance* Source);// 0x5c28790

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 0x4]
	MaterialInterface* Parent;//[Offset: 0x60, Size: 0x4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x68, Size: 0xc]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x74, Size: 0xc]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x80, Size: 0xc]
	FontParameterValue[] FontParameterValues;//[Offset: 0x8c, Size: 0xc]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x9c, Size: 0x10]
	Texture*[] PermutationTextureReferences;//[Offset: 0xc0, Size: 0xc]
	StaticParameterSet StaticParameters;//[Offset: 0xcc, Size: 0x30]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x4]
	int FontPage;//[Offset: 0x14, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]
	byte BlendMode;//[Offset: 0xc, Size: 0x1]
	byte ShadingModel;//[Offset: 0xd, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0xc]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0xc, Size: 0xc]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x18, Size: 0xc]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: StaticSwitchParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: StaticTerrainLayerWeightParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: StaticMaterialLayersParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	MaterialLayersFunctions Value;//[Offset: 0x10, Size: 0x30]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0xc]
	MaterialFunctionInterface*[] Blends;//[Offset: 0xc, Size: 0xc]
	bool[] LayerStates;//[Offset: 0x18, Size: 0xc]
	FString KeyString;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x30, Size: 0xc]
	float SplitScreenShakeScale;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float OscillationDuration;//[Offset: 0x20, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x80, Size: 0x4]
	float AnimScale;//[Offset: 0x84, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 0x4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 0x4]
	float ShakeScale;//[Offset: 0x134, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 0x4]
	void ReceiveStopShake(bool bImmediately);// 0x4528238
	void ReceivePlayShake(float Scale);// 0x4528238
	bool ReceiveIsFinished();// 0x40fe89c
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x4528238

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 0x4]
	float AnimLength;//[Offset: 0x20, Size: 0x4]
	Box BoundingBox;//[Offset: 0x24, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	float BaseFOV;//[Offset: 0x44, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 0x4f0]
	float BasePostProcessBlendWeight;//[Offset: 0x540, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 0xc]
	FName GroupName;//[Offset: 0x30, Size: 0x8]
	Color GroupColor;//[Offset: 0x38, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 0xc]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 0x4]
	byte ActiveCondition;//[Offset: 0x34, Size: 0x1]
	FString TrackTitle;//[Offset: 0x38, Size: 0xc]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 0x4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 0x4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 0x4]
	byte PlaySpace;//[Offset: 0x58, Size: 0x1]
	void Stop(bool bImmediate);// 0x5b5ecc0
	void SetScale(float NewDuration);// 0x5b5ec48
	void SetDuration(float NewDuration);// 0x5b5ebd0

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 0x4]
	Actor* GroupActor;//[Offset: 0x20, Size: 0x4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 0x14]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 0x14]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 0xc]
	FName LookAtGroupName;//[Offset: 0x80, Size: 0x8]
	float LinCurveTension;//[Offset: 0x88, Size: 0x4]
	float AngCurveTension;//[Offset: 0x8c, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1]
	byte RotMode;//[Offset: 0x91, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x27c, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x280, Size: 0x4]
	SceneComponent* SceneComponent;//[Offset: 0x284, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	float AspectRatio;//[Offset: 0x294, Size: 0x4]
	float FOVAngle;//[Offset: 0x298, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x29c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2a0, Size: 0x4f0]
	int GetAutoActivatePlayerIndex();// 0x5b5e534

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1ec, Size: 0x4]
	float OrthoWidth;//[Offset: 0x1f0, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x1f4, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x1f8, Size: 0x4]
	float AspectRatio;//[Offset: 0x1fc, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x201, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x204, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x210, Size: 0x4f0]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74c, Size: 0x1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x5b5f90c
	void SetProjectionMode(byte InProjectionMode);// 0x5b5f898
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x5b5f824
	void SetOrthoWidth(float InOrthoWidth);// 0x5b5f7b0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x5b5f73c
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x5b5f6c8
	void SetFieldOfView(float InFieldOfView);// 0x5b5f654
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x5b5f5cc
	void SetAspectRatio(float InAspectRatio);// 0x5b5f558
	void RemoveBlendable(interface classNone InBlendableObject);// 0x5b5f468
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x5b5f2d0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5b5f198

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 0x4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 0x4]
	void Walk();// 0x3e3f0e8
	void ViewSelf();// 0x5b6d6d8
	void ViewPlayer(FString S);// 0x5b6d640
	void ViewClass(class Actor DesiredClass);// 0x5b26f7c
	void ViewActor(FName ActorName);// 0x5b6d5c0
	void UpdateSafeArea();// 0x5b6d5ac
	void ToggleServerStatReplicatorUpdateStatNet();// 0x5b6d598
	void ToggleServerStatReplicatorClientOverwrite();// 0x5b6d584
	void ToggleDebugCamera();// 0x3e2d87c
	void ToggleAILogging();// 0x3e2d860
	void TestCollisionDistance();// 0x3e327b8
	void Teleport();// 0x3e3f120
	void Summon(FString ClassName);// 0x5b6d4ec
	void StreamLevelOut(FName PackageName);// 0x5b6d46c
	void StreamLevelIn(FName PackageName);// 0x5b6d3ec
	void SpawnServerStatReplicator();// 0x5b6d3d8
	void Slomo(float NewTimeDilation);// 0x5b6d358
	void SetWorldOrigin();// 0x5b6d344
	void SetMouseSensitivityToDefault();// 0x3e326bc
	void ServerToggleAILogging();// 0x5b6d2e8
	void ReceiveInitCheatManager();// 0x4528238
	void ReceiveEndPlay();// 0x4528238
	void PlayersOnly();// 0x5b6d2cc
	void OnlyLoadLevel(FName PackageName);// 0x5b6d24c
	void LogLoc();// 0x3e32710
	void InvertMouse();// 0x3e3272c
	void God();// 0x3e3ef28
	void Ghost();// 0x3e3ef7c
	void FreezeFrame(float Delay);// 0x5b6d1cc
	void Fly();// 0x3e708fc
	void FlushLog();// 0x3e32684
	void EnableDebugCamera();// 0x3e326d8
	void DumpVoiceMutingState();// 0x3e32588
	void DumpPartyState();// 0x3e2d898
	void DumpOnlineSessionState();// 0x3e2d7b8
	void DumpChatState();// 0x3e2d8ec
	void DisableDebugCamera();// 0x3e3279c
	void DestroyTarget();// 0x3e58788
	void DestroyServerStatReplicator();// 0x5b6d1b8
	void DestroyPawns(class Pawn aClass);// 0x51cfe9c
	void DestroyAllPawnsExceptTarget();// 0x5b6d19c
	void DestroyAll(class Actor aClass);// 0x5b6d11c
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x5b6d058
	void DebugCapsuleSweepPawn();// 0x3e2d988
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x5b6cfd0
	void DebugCapsuleSweepClear();// 0x3e2d8d0
	void DebugCapsuleSweepChannel(byte Channel);// 0x5b6cf50
	void DebugCapsuleSweepCapture();// 0x3e3264c
	void DebugCapsuleSweep();// 0x3e2d844
	void DamageTarget(float DamageAmount);// 0x5b6ced0
	void CheatScript(FString ScriptName);// 0x5b6cdec
	void ChangeSize(float F);// 0x37177c0
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x5b6cc40
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x5b6ca60
	void BugIt(FString ScreenShotDescription);// 0x5b6c9c8

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x545, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x545, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x548, Size: 0x4]
	float SpeedScale;//[Offset: 0x55c, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x560, Size: 0x4]
	float InitialAccel;//[Offset: 0x564, Size: 0x4]
	float InitialDecel;//[Offset: 0x568, Size: 0x4]
	void ToggleDisplay();// 0x5b772fc
	void ShowDebugSelectedInfo();// 0x3e42ce8
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x5b77284
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x4528238
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x4528238
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x4528238
	Actor* GetSelectedActor();// 0x5b7725c

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x468, Size: 0x4]
	float FrustumAngle;//[Offset: 0x46c, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x470, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x474, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x478, Size: 0x4]
	Texture* Texture;//[Offset: 0x47c, Size: 0x4]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 0xc]
	float Duration;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 0x58]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x54]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 0xc]
	NetDriver* Driver;//[Offset: 0x3c, Size: 0x4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 0x4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 0x4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 0xc]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 0xc]
	Actor* ViewTarget;//[Offset: 0x60, Size: 0x4]
	Actor* OwningActor;//[Offset: 0x64, Size: 0x4]
	int MaxPacket;//[Offset: 0x68, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0xec, Size: 0x18]
	double LastReceiveTime;//[Offset: 0x150, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x15c4, Size: 0xc]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x16cc, Size: 0x4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 0xc]
	FString ReplicationDriverClassName;//[Offset: 0x2c, Size: 0xc]
	int MaxDownloadSize;//[Offset: 0x38, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x40, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x44, Size: 0x4]
	int MaxClientRate;//[Offset: 0x48, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x4c, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x50, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x54, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x58, Size: 0x4]
	float MaxFlushNetInterval;//[Offset: 0x5c, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x60, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x64, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x68, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x70, Size: 0x4]
	NetConnection*[] ClientConnections;//[Offset: 0x74, Size: 0xc]
	World* World;//[Offset: 0x94, Size: 0x4]
	Package* WorldPackage;//[Offset: 0x98, Size: 0x4]
	class Object* NetConnectionClass;//[Offset: 0xac, Size: 0x4]
	class Object* ReplicationDriverClass;//[Offset: 0xb0, Size: 0x4]
	Property* RoleProperty;//[Offset: 0xb4, Size: 0x4]
	Property* RemoteRoleProperty;//[Offset: 0xb8, Size: 0x4]
	FName NetDriverName;//[Offset: 0xc0, Size: 0x8]
	float Time;//[Offset: 0xec, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x3e0, Size: 0x4]

--------------------------------
Class: Package.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 0xc]
	float ActiveOpacity;//[Offset: 0x28, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x34, Size: 0x4]
	float ActivationDelay;//[Offset: 0x38, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float StartupDelay;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x4]
	Texture2D* Image2;//[Offset: 0x4, Size: 0x4]
	Vector2D Center;//[Offset: 0x8, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x10, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x18, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x28, Size: 0x8]
	Key MainInputKey;//[Offset: 0x30, Size: 0x10]
	Key AltInputKey;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x2d0, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x2d4, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x2d8, Size: 0x4]
	SphereComponent* CollisionComponent;//[Offset: 0x2dc, Size: 0x4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2e0, Size: 0x4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 0x1]
	void TurnAtRate(float Rate);// 0x3ea6c2c
	void MoveUp_World(float Val);// 0x37ccd68
	void MoveRight(float Val);// 0x37cd128
	void MoveForward(float Val);// 0x3eaf7dc
	void LookUpAtRate(float Rate);// 0x5b799a0

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x478, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x5c9a454
	float GetUnscaledSphereRadius();// 0x5b64dcc
	float GetShapeScale();// 0x5b64d84
	float GetScaledSphereRadius();// 0x5b64a0c

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x488, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x48c, Size: 0x4]
	int MinLOD;//[Offset: 0x490, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x494, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x498, Size: 0x4]
	Color WireframeColorOverride;//[Offset: 0x49c, Size: 0x4]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a0, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a0, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a0, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4a0, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4a0, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4a0, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4a0, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4a0, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a1, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a1, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a1, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4a1, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x4a4, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x4a8, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x4ac, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x4b0, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4b4, Size: 0xc]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4c0, Size: 0xc]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4cc, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x5ca664c
	void SetReverseCulling(bool ReverseCulling);// 0x5ca65cc
	void SetForcedLodModel(int NewForcedLodModel);// 0x5ca6554
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x5ca64dc
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x5ca6464
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x5ca638c

--------------------------------
Class: StaticMesh.Object
	PerPlatformInt MinLOD;//[Offset: 0x2c, Size: 0x4]
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0xc]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c, Size: 0xc]
	float LightmapUVDensity;//[Offset: 0x48, Size: 0x4]
	int LightMapResolution;//[Offset: 0x4c, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x50, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x54, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x5c, Size: 0x4]
	int LODForCollision;//[Offset: 0x60, Size: 0x4]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0x94, Size: 0xc]
	Vector PositiveBoundsExtension;//[Offset: 0xa8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xb4, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xc0, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0xdc, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0xe0, Size: 0xc]
	Object* EditableMesh;//[Offset: 0xf0, Size: 0x4]
	NavCollisionBase* NavCollision;//[Offset: 0xf4, Size: 0x4]
	int GetNumSections(int InLOD);// 0x5ca5020
	int GetNumLODs();// 0x5ca4ff8
	int GetMaterialIndex(FName MaterialSlotName);// 0x5ca4f78
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x5ca4ef8
	BoxSphereBounds GetBounds();// 0x5ca4ea4
	Box GetBoundingBox();// 0x5ca4e50

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x40, Size: 0xc]
	FString Tag;//[Offset: 0x4c, Size: 0xc]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector4 Normal;//[Offset: 0x10, Size: 0x10]
	Color Color;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xe0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0xf0, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x100, Size: 0x1c]
	delegate ForegroundColorDelegate;//[Offset: 0x120, Size: 0x10]
	Margin Padding;//[Offset: 0x130, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x140, Size: 0xc]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x14c, Size: 0xc]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x158, Size: 0xc]
	WidgetTree* WidgetTree;//[Offset: 0x164, Size: 0x4]
	int Priority;//[Offset: 0x168, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16c, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16c, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16c, Size: 0x1]
	bool bBlueprintTickEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16c, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16c, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16d, Size: 0x1]
	enum TickFrequency;//[Offset: 0x16e, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x170, Size: 0x4]
	void UnregisterInputComponent();// 0x51fa5a4
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x4528238
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x51fa4d8
	void StopListeningForAllInputActions();// 0x51fa4c4
	void StopAnimationsAndLatentActions();// 0x51fa4b0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x51fa438
	void StopAllAnimations();// 0x51fa424
	void SetWidgetTickEnabled(bool bEnabled);// 0x51fa370
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x51fa2b0
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x51fa1f4
	void SetPadding(Margin InPadding);// 0x51fa16c
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x51fa0f4
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x51fa038
	void SetInputActionPriority(int NewPriority);// 0x51f9fc0
	void SetInputActionBlocking(bool bShouldBlock);// 0x51f9f40
	void SetForegroundColor(SlateColor InForegroundColor);// 0x51f9d50
	void SetDesiredSizeInViewport(Vector2D Size);// 0x51f9cd4
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x51f9c58
	void SetAnchorsInViewport(Anchors Anchors);// 0x51f9bd0
	void SetAlignmentInViewport(Vector2D Alignment);// 0x51f9b60
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x51f9ae8
	void RemoveFromViewport();// 0x51f9ad4
	void RegisterInputComponent();// 0x51f9ac0
	void PreConstruct(bool IsDesignTime);// 0x4528238
	void PlaySound(SoundBase* SoundToPlay);// 0x51f9a48
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x51f9874
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x51f96e4
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x51f9664
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4528238
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4528238
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x4528238
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4528238
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x4528238
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4528238
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4528238
	void OnPaint(out PaintContext Context);// 0x4528238
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4528238
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4528238
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x4528238
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4528238
	void OnMouseCaptureLost(out const CaptureLostEvent InCaptureLostEvent);// 0x4528238
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4528238
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4528238
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x4528238
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x4528238
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4528238
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4528238
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x4528238
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x4528238
	void OnFocusLost(FocusEvent InFocusEvent);// 0x4528238
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4528238
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4528238
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4528238
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4528238
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x4528238
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4528238
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x51f95e4
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x51f9564
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x4528238
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x4528238
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x51f93d4
	bool IsWidgetTickEnabled();// 0x51f93b0
	bool IsPlayingAnimation();// 0x51f9388
	bool IsListeningForInputAction(FName ActionName);// 0x51f9308
	bool IsInViewport();// 0x51f9168
	bool IsInteractable();// 0x4528238
	bool IsAnyAnimationPlaying();// 0x51f92e0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x51f9260
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x51f91e0
	Widget* GetRootWidget();// 0x51f91b8
	Pawn* GetOwningPlayerPawn();// 0x51f9190
	bool GetIsVisible();// 0x51f9168
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x51f90e8
	Anchors GetAnchorsInViewport();// 0x51f90a4
	Vector2D GetAlignmentInViewport();// 0x51f9064
	void Destruct();// 0x4528238
	void Construct();// 0x4528238
	void CancelLatentActions();// 0x51f9050
	void AddToViewport(int ZOrder);// 0x51f8fd8
	bool AddToPlayerScreen(int ZOrder);// 0x51f8f58

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 0x4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 0x10]
	FText ToolTipText;//[Offset: 0x30, Size: 0xc]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 0x4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 0x1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 0x1]
	byte Cursor;//[Offset: 0x9d, Size: 0x1]
	enum Clipping;//[Offset: 0x9e, Size: 0x1]
	enum Visibility;//[Offset: 0x9f, Size: 0x1]
	float RenderOpacity;//[Offset: 0xa0, Size: 0x4]
	Margin HitTestGeometryExtension;//[Offset: 0xa4, Size: 0x10]
	WidgetNavigation* Navigation;//[Offset: 0xb4, Size: 0x4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xd0, Size: 0xc]
	void SetVisibility(enum InVisibility);// 0x51fe698
	void SetUserFocus(PlayerController* PlayerController);// 0x51fe620
	void SetToolTipText(out const FText InToolTipText);// 0x51fe514
	void SetToolTip(Widget* Widget);// 0x51fe49c
	void SetRenderTranslation(Vector2D Translation);// 0x51fe42c
	void SetRenderTransformPivot(Vector2D Pivot);// 0x51fe3bc
	void SetRenderTransform(WidgetTransform InTransform);// 0x51fe2e4
	void SetRenderShear(Vector2D Shear);// 0x51fe274
	void SetRenderScale(Vector2D Scale);// 0x51fe204
	void SetRenderOpacity(float InOpacity);// 0x51fe18c
	void SetRenderAngle(float Angle);// 0x51fe114
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x51fe00c
	void SetKeyboardFocus();// 0x51fdff8
	void SetIsEnabled(bool bInIsEnabled);// 0x51fdf70
	void SetHitTestGeometryExtension(out const Margin InHitTestGeometryExtension);// 0x51fdee0
	void SetCursor(byte InCursor);// 0x51fde68
	void SetClipping(enum InClipping);// 0x51fddf0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x51fdd34
	void ResetCursor();// 0x51fdd20
	void RemoveFromParent();// 0x3e3f104
	EventReply OnReply__DelegateSignature();// 0x4528238
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4528238
	bool IsVisible();// 0x51fdcf8
	bool IsHovered();// 0x51fdcc8
	void InvalidateLayoutAndVolatility();// 0x51fdcb4
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x51fdc34
	bool HasUserFocus(PlayerController* PlayerController);// 0x51fdbb4
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x51fdaf0
	bool HasMouseCapture();// 0x51fdac8
	bool HasKeyboardFocus();// 0x51fdaa0
	bool HasFocusedDescendants();// 0x51fda78
	bool HasAnyUserFocus();// 0x51fda50
	Widget* GetWidget__DelegateSignature();// 0x4528238
	enum GetVisibility();// 0x51fda28
	FText GetText__DelegateSignature();// 0x4528238
	enum GetSlateVisibility__DelegateSignature();// 0x4528238
	SlateColor GetSlateColor__DelegateSignature();// 0x4528238
	SlateBrush GetSlateBrush__DelegateSignature();// 0x4528238
	float GetRenderOpacity();// 0x51fda00
	PanelWidget* GetParent();// 0x51fd9d8
	PlayerController* GetOwningPlayer();// 0x3e433e4
	LocalPlayer* GetOwningLocalPlayer();// 0x51fd9a8
	byte GetMouseCursor__DelegateSignature();// 0x4528238
	LinearColor GetLinearColor__DelegateSignature();// 0x4528238
	bool GetIsEnabled();// 0x51fd980
	int GetInt32__DelegateSignature();// 0x4528238
	Margin GetHitTestGeometryExtension();// 0x51fd954
	float GetFloat__DelegateSignature();// 0x4528238
	Vector2D GetDesiredSize();// 0x51fd914
	enum GetClipping();// 0x51fd8ec
	enum GetCheckBoxState__DelegateSignature();// 0x4528238
	Geometry GetCachedGeometry();// 0x51fd8bc
	bool GetBool__DelegateSignature();// 0x4528238
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x4528238
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x4528238
	void ForceVolatile(bool bForce);// 0x51fd83c
	void ForceLayoutPrepass();// 0x51fd828

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 0x4]
	Widget* Content;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xdc, Size: 0xc]
	bool ReplaceChildAt(int Index, Widget* Content);// 0x51e4fa8
	bool RemoveChildAt(int Index);// 0x51e4f28
	bool RemoveChild(Widget* Content);// 0x51e4ea8
	bool HasChild(Widget* Content);// 0x51e4e28
	bool HasAnyChildren();// 0x51e4e00
	int GetChildrenCount();// 0x51e4dd8
	int GetChildIndex(Widget* Content);// 0x51e4d58
	Widget* GetChildAt(int Index);// 0x51e4cd8
	void ClearChildren();// 0x51e4cc4
	PanelSlot* AddChild(Widget* Content);// 0x51e4c44

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 0x4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x288, Size: 0xc]
	delegate OnAnimationFinished;//[Offset: 0x294, Size: 0xc]
	MovieScene* MovieScene;//[Offset: 0x2a0, Size: 0x4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x2a4, Size: 0xc]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	float GetStartTime();// 0x51ff5a0
	float GetEndTime();// 0x51ff578

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x40, Size: 0x244]
	enum DefaultCompletionMode;//[Offset: 0x284, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x3c]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 0x24]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 0x78]
	Guid SequenceSignature;//[Offset: 0x114, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x124, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x128, Size: 0x7c]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x1a4, Size: 0x50]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x1f4, Size: 0x50]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x14, Size: 0x18]
	MovieSceneTrack* SourceTrack;//[Offset: 0x2c, Size: 0x4]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x30, Size: 0x50]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x80, Size: 0xc]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x90, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xc8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0xc]
	MovieSceneSegment[] SortedSegments;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0xc]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 0xc]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0xc]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0xc]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 0xc]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x18, Size: 0x3c]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x3c]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 0x3c]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0xc]
	FrameRate TickResolution;//[Offset: 0x24, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x2c, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x30, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x40, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x50, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x60, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x68, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0x88, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x4, Size: 0x3c]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 0xc]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 0xc]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 0xc]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 0xc]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 0x4]
	MovieSceneFrameRange SelectionRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0x84, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x94, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x9c, Size: 0x8]
	enum EvaluationType;//[Offset: 0xa4, Size: 0x1]
	enum ClockSource;//[Offset: 0xa5, Size: 0x1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0xc]
	Guid Guid;//[Offset: 0x3c, Size: 0x10]
	FString Name;//[Offset: 0x4c, Size: 0xc]
	Object* ObjectTemplate;//[Offset: 0x58, Size: 0x4]
	Guid[] ChildPossessables;//[Offset: 0x5c, Size: 0xc]
	enum Ownership;//[Offset: 0x68, Size: 0x1]
	FName LevelName;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0xc]
	Guid Guid;//[Offset: 0xc, Size: 0x10]
	FString Name;//[Offset: 0x1c, Size: 0xc]
	class Object* PossessedObjectClass;//[Offset: 0x28, Size: 0x4]
	Guid ParentGuid;//[Offset: 0x2c, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0xc]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: Geometry

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 0x4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	bool bHasVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20, Size: 0x1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x28, Size: 0x4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x2c, Size: 0xc]
	float Duration;//[Offset: 0x38, Size: 0x4]
	float MaxDistance;//[Offset: 0x3c, Size: 0x4]
	float TotalSamples;//[Offset: 0x40, Size: 0x4]
	float Priority;//[Offset: 0x44, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x4c, Size: 0x4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x50, Size: 0xc]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x5c, Size: 0x4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x60, Size: 0xc]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x6c, Size: 0xc]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 0x28]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 0xc]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 0xc]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float StereoBleed;//[Offset: 0x8, Size: 0x4]
	float LFEBleed;//[Offset: 0xc, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	byte OutputTarget;//[Offset: 0x25, Size: 0x1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float EQPriority;//[Offset: 0x20, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 0x38]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 0xc]
	float InitialDelay;//[Offset: 0x6c, Size: 0x4]
	float FadeInTime;//[Offset: 0x70, Size: 0x4]
	float Duration;//[Offset: 0x74, Size: 0x4]
	float FadeOutTime;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4]
	float Gain0;//[Offset: 0xc, Size: 0x4]
	float Bandwidth0;//[Offset: 0x10, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4]
	float Gain1;//[Offset: 0x18, Size: 0x4]
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4]
	float Gain2;//[Offset: 0x24, Size: 0x4]
	float Bandwidth2;//[Offset: 0x28, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4]
	float Gain3;//[Offset: 0x30, Size: 0x4]
	float Bandwidth3;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 0x4]
	float PitchAdjuster;//[Offset: 0x8, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 0x214]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0x7a, Size: 0x1]
	enum AbsorptionMethod;//[Offset: 0x7b, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0x7c, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0x7d, Size: 0x1]
	float OmniRadius;//[Offset: 0x80, Size: 0x4]
	float StereoSpread;//[Offset: 0x84, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0x88, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0x8c, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0x90, Size: 0x58]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xe8, Size: 0x58]
	float LPFFrequencyAtMin;//[Offset: 0x140, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x144, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x148, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x14c, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x150, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x154, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x158, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x15c, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x160, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x164, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x168, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x16c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x170, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x174, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x178, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x17c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x180, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x184, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x188, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x18c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x190, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x194, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x198, Size: 0x58]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x1f0, Size: 0x24]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x5, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0x8, Size: 0x4]
	Vector AttenuationShapeExtents;//[Offset: 0xc, Size: 0xc]
	float ConeOffset;//[Offset: 0x18, Size: 0x4]
	float FalloffDistance;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x20, Size: 0x58]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0xc]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0xc, Size: 0xc]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 0xc]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 0x4]
	enum ChannelFormat;//[Offset: 0x2c, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x30, Size: 0xc]
	AmbisonicsSubmixSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x3c, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x40, Size: 0xc]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x5c9988c
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x5c997d0

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: AmbisonicsSubmixSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x78, Size: 0x4]
	int StreamingPriority;//[Offset: 0x7c, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x80, Size: 0x1]
	byte SoundGroup;//[Offset: 0x82, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1]
	FString SpokenText;//[Offset: 0x94, Size: 0xc]
	float SubtitlePriority;//[Offset: 0xa0, Size: 0x4]
	float Volume;//[Offset: 0xa4, Size: 0x4]
	float Pitch;//[Offset: 0xa8, Size: 0x4]
	int NumChannels;//[Offset: 0xac, Size: 0x4]
	int RawPCMDataSize;//[Offset: 0xb0, Size: 0x4]
	int SampleRate;//[Offset: 0xb4, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0xb8, Size: 0xc]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xc4, Size: 0xc]
	CurveTable* Curves;//[Offset: 0xd0, Size: 0x4]
	CurveTable* InternalCurves;//[Offset: 0xd4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0xc]
	float Time;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 0xc]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 0xc]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 0xc]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x174, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x178, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17c, Size: 0x1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: CaptureLostEvent

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 0xc]
	Object* Payload;//[Offset: 0x28, Size: 0x4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 0x4]
	enum Pivot;//[Offset: 0x30, Size: 0x1]
	Vector2D Offset;//[Offset: 0x34, Size: 0x8]
	delegate OnDrop;//[Offset: 0x3c, Size: 0xc]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 0xc]
	delegate OnDragged;//[Offset: 0x54, Size: 0xc]
	void Drop(out const PointerEvent PointerEvent);// 0x51d7a24
	void Dragged(out const PointerEvent PointerEvent);// 0x51d7890
	void DragCancelled(out const PointerEvent PointerEvent);// 0x51d76fc

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 0x28]
	WidgetNavigationData Down;//[Offset: 0x48, Size: 0x28]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x28]
	WidgetNavigationData Right;//[Offset: 0x98, Size: 0x28]
	WidgetNavigationData Next;//[Offset: 0xc0, Size: 0x28]
	WidgetNavigationData Previous;//[Offset: 0xe8, Size: 0x28]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 0x8]
	Widget* Widget;//[Offset: 0x10, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 0x18]
	FName DestinationProperty;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0xc]
	Function* CachedFunction;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0xc, Size: 0x4]
	Field* Field;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 0x8]
	Margin Margin;//[Offset: 0xc, Size: 0x10]
	Margin MarginOffset;//[Offset: 0x1c, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x2c, Size: 0x1c]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x4]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x48, Size: 0x4]
	byte AspectRatioAxisConstraint;//[Offset: 0x290, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x294, Size: 0x4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	int ControllerId;//[Offset: 0x2d0, Size: 0x4]
	bool ProjectWorldToViewport(out const Vector WorldPosition, out Vector4 ViewportPosition);// 0x5c12350
	bool ProjectWorldToScreen(out const Vector WorldPosition, out Vector4 ScreenPosition);// 0x5c12240
	Matrix GetLastViewProjectionMatrix();// 0x5c121f4
	void GetLastViewPositionAndDirection(out Vector ViewPosition, out Vector ViewDirection);// 0x5c12108
	Vector GetLastViewPosition();// 0x5c120e4
	Matrix GetLastProjectionMatrix();// 0x5c12098
	Matrix GetLastInvViewProjectionMatrix();// 0x5c1204c
	void DeprojectViewportToWorldRay(const Vector2D ViewportPosition, out Vector WorldOrigin, out Vector WorldDir);// 0x5c11f30
	void DeprojectViewportToWorld(out const Vector4 ViewportPosition, out Vector WorldPosition);// 0x5c11e30
	void DeprojectScreenToWorldRay(const Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDir);// 0x5c11d10
	void DeprojectScreenToWorld(out const Vector4 ScreenPosition, out Vector WorldPosition);// 0x5c11c10

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x2c, Size: 0x4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x30, Size: 0xc]
	World* World;//[Offset: 0x50, Size: 0x4]
	GameInstance* GameInstance;//[Offset: 0x54, Size: 0x4]
	void SSSwapControllers();// 0x36fd5d0
	void ShowTitleSafeArea();// 0x36fd75c
	void SetConsoleTarget(int PlayerIndex);// 0x5b6d1cc

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 0x4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 0x4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 0x4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x4]
	class Object* WithinClass;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x24, Size: 0xc]
	OnlineSession* OnlineSession;//[Offset: 0x30, Size: 0x4]
	Object*[] ReferencedObjects;//[Offset: 0x34, Size: 0xc]
	delegate HandleDiconnectDelegate;//[Offset: 0x74, Size: 0xc]
	void ReceiveShutdown();// 0x4528238
	void ReceiveInit();// 0x4528238
	void HandleTravelError(byte FailureType);// 0x4528238
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x4528238
	void HandleDiconnectDelegate__DelegateSignature();// 0x4528238
	int GetNumLocalPlayers();// 0x5b915f4
	LocalPlayer* GetLocalPlayerByIndex(const int Index);// 0x5b91574
	LocalPlayer* GetFirstGamePlayer();// 0x5b9154c
	void DebugRemovePlayer(int ControllerId);// 0x5b6d358
	void DebugCreatePlayer(int ControllerId);// 0x5b914cc

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x27c, Size: 0x4]
	FName MatineeControllerName;//[Offset: 0x280, Size: 0x8]
	float PlayRate;//[Offset: 0x288, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x290, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x294, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x294, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x294, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x294, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x298, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x2a0, Size: 0xc]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x2b0, Size: 0xc]
	CameraCutInfo[] CameraCuts;//[Offset: 0x2bc, Size: 0xc]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c8, Size: 0x1]
	float InterpPosition;//[Offset: 0x2cc, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x2d4, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2d8, Size: 0xc]
	delegate OnStop;//[Offset: 0x2e4, Size: 0xc]
	delegate OnPause;//[Offset: 0x2f0, Size: 0xc]
	void Stop();// 0x3e5a3a8
	void SetPosition(float NewPosition, bool bJump);// 0x5c2af5c
	void SetLoopingState(bool bNewLooping);// 0x5c2aed4
	void Reverse();// 0x3e5a3c4
	void Play();// 0x3e82394
	void Pause();// 0x3e5a38c
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x5c2ada0
	void ChangePlaybackDirection();// 0x3eab180

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 0x4]
	float PathBuildTime;//[Offset: 0x20, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 0xc]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 0x4]
	float EdSectionStart;//[Offset: 0x34, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x38, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 0x4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1ec, Size: 0x4]
	Actor* ChildActor;//[Offset: 0x1f0, Size: 0x4]
	Actor* ChildActorTemplate;//[Offset: 0x1f4, Size: 0x4]
	void SetChildActorClass(class Actor InClass);// 0x5b6ed30

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x468, Size: 0x4]
	BodySetup* BrushBodySetup;//[Offset: 0x46c, Size: 0x4]
	Vector PrePivot;//[Offset: 0x470, Size: 0xc]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Interface.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x4]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x4528238
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x5c0b874
	bool RemoteEvent(FName EventName);// 0x5c0b7ec
	void LevelReset();// 0x4528238

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x280, Size: 0x4]
	BillboardComponent* GoodSprite;//[Offset: 0x284, Size: 0x4]
	BillboardComponent* BadSprite;//[Offset: 0x288, Size: 0x4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x468, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46c, Size: 0x1]
	float ScreenSize;//[Offset: 0x470, Size: 0x4]
	float U;//[Offset: 0x474, Size: 0x4]
	float UL;//[Offset: 0x478, Size: 0x4]
	float V;//[Offset: 0x47c, Size: 0x4]
	float VL;//[Offset: 0x480, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x5b51e84
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x5b51cec
	void SetSprite(Texture2D* NewSprite);// 0x4027f90

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x280, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x280, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x280, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x280, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x284, Size: 0x4]
	float KillZ;//[Offset: 0x288, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x28c, Size: 0x4]
	float WorldGravityZ;//[Offset: 0x290, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x294, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x298, Size: 0x4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x29c, Size: 0x4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2a0, Size: 0x4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2a4, Size: 0x4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2a8, Size: 0x4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1]
	Vector DefaultColorScale;//[Offset: 0x2b0, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2bc, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2c0, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2c4, Size: 0x4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8, Size: 0x1]
	int VisibilityCellSize;//[Offset: 0x2cc, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x2d0, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d1, Size: 0x1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x2d4, Size: 0x54]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x328, Size: 0x14]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x33c, Size: 0x24]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x360, Size: 0x4]
	float WorldToMeters;//[Offset: 0x364, Size: 0x4]
	float MonoCullingDistance;//[Offset: 0x368, Size: 0x4]
	BookMark* BookMarks;//[Offset: 0x36c, Size: 0x4]
	float TimeDilation;//[Offset: 0x394, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x398, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x39c, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x3a0, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x3a4, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x3a8, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x3ac, Size: 0x4]
	PlayerState* Pauser;//[Offset: 0x3b0, Size: 0x4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b4, Size: 0x1]
	NetViewer[] ReplicationViewers;//[Offset: 0x3b8, Size: 0xc]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x3c8, Size: 0x24]
	AssetUserData*[] AssetUserData;//[Offset: 0x3ec, Size: 0xc]
	void OnRep_WorldGravityZ();// 0x3e82394

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 0x4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x27c, Size: 0xc]
	class GameSession* GameSessionClass;//[Offset: 0x288, Size: 0x4]
	class GameStateBase* GameStateClass;//[Offset: 0x28c, Size: 0x4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x290, Size: 0x4]
	class PlayerState* PlayerStateClass;//[Offset: 0x294, Size: 0x4]
	class HUD* HUDClass;//[Offset: 0x298, Size: 0x4]
	class Pawn* DefaultPawnClass;//[Offset: 0x29c, Size: 0x4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2a0, Size: 0x4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2a4, Size: 0x4]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x2a8, Size: 0x4]
	GameSession* GameSession;//[Offset: 0x2ac, Size: 0x4]
	GameStateBase* GameState;//[Offset: 0x2b0, Size: 0x4]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x2b4, Size: 0x4]
	FText DefaultPlayerName;//[Offset: 0x2b8, Size: 0xc]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c4, Size: 0x1]
	void StartPlay();// 0x34d93fc
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x5b9445c
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x5b94300
	bool ShouldReset(Actor* ActorToReset);// 0x5b9426c
	void ReturnToMainMenuHost();// 0x3e98664
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x5b94110
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x5b94040
	void RestartPlayer(Controller* NewPlayer);// 0x37ccd68
	void ResetLevel();// 0x37ccde8
	bool PlayerCanRestart(PlayerController* Player);// 0x5b93fb8
	bool MustSpectate(PlayerController* NewPlayerController);// 0x5b93f30
	void K2_PostLogin(PlayerController* NewPlayer);// 0x4528238
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x4528238
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x4528238
	void K2_OnLogout(Controller* ExitingController);// 0x4528238
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x4528238
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x5b93e54
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x5b93d90
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x3eaaf78
	bool HasMatchStarted();// 0x5b713d0
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x4005d68
	int GetNumSpectators();// 0x5b713a0
	int GetNumPlayers();// 0x5b93d60
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x5b93cd8
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x5b93bf4
	Actor* ChoosePlayerStart(Controller* Player);// 0x5b93b6c
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x5b93a44
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x5b93978

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x27c, Size: 0x4]
	int MaxPlayers;//[Offset: 0x280, Size: 0x4]
	int MaxPartySize;//[Offset: 0x284, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x288, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	FName SessionName;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x27c, Size: 0x4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x280, Size: 0x4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x284, Size: 0x4]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x28c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x290, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x294, Size: 0x4]
	PlayerState*[] PlayerArray;//[Offset: 0x2a0, Size: 0xc]
	void OnRep_SpectatorClass();// 0x3e723b0
	void OnRep_ReplicatedWorldTimeSeconds();// 0x34d93fc
	void OnRep_ReplicatedHasBegunPlay();// 0x4009614
	void OnRep_GameModeClass();// 0x34dae90
	bool HasMatchStarted();// 0x5ba203c
	bool HasBegunPlay();// 0x5ba200c
	float GetServerWorldTimeSeconds();// 0x5ba1fdc
	float GetPlayerStartTime(Controller* Controller);// 0x5ba1f54
	float GetPlayerRespawnDelay(Controller* Controller);// 0x5ba1ecc

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 0x1]
	uint32 Channels;//[Offset: 0x280, Size: 0x4]
	uint32 InRate;//[Offset: 0x284, Size: 0x4]
	uint32 OutRate;//[Offset: 0x288, Size: 0x4]
	uint32 OutSaturation;//[Offset: 0x28c, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x290, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x294, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x298, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x29c, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x2a0, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x2a4, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x2a8, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x2ac, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x2b0, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x2b4, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x2b8, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x2bc, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x2c0, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x2c4, Size: 0x4]
	uint32 InPackets;//[Offset: 0x2c8, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x2cc, Size: 0x4]
	uint32 InBunches;//[Offset: 0x2d0, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x2d4, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x2d8, Size: 0x4]
	uint32 InLoss;//[Offset: 0x2dc, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x2e0, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x2e4, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x2e8, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x2ec, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2f0, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2f4, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2f8, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2fc, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x300, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x304, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x308, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x30c, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x310, Size: 0x4]
	uint32 NumActors;//[Offset: 0x314, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x318, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x31c, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x320, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x324, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x328, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x32c, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x330, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x334, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x338, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x33c, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x27c, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x280, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x284, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x288, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x28c, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x294, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x298, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x29c, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x2a0, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x2a4, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x2a8, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2ac, Size: 0x4]
	float MoveRepSize;//[Offset: 0x2b0, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x2b4, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x2b8, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x2bc, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x2c0, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x2c4, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x2c8, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x2cc, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2d0, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2d4, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2d8, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2e0, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2e8, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2ec, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2f0, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2f4, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 0x4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 0x4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 0x4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 0x4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 0x4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 0x4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 0x4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x20, Size: 0x4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 0x1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 0x4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 0x4]
	float VolumetricLightmapSphericalHarmonicSmoothing;//[Offset: 0x30, Size: 0x4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x34, Size: 0x4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 0x4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x40, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x44, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x48, Size: 0x4]
	float MaxOcclusionDistance;//[Offset: 0x4c, Size: 0x4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	byte ReverbType;//[Offset: 0x1, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 0x4]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x8, Size: 0x4]
	float Volume;//[Offset: 0xc, Size: 0x4]
	float FadeTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 0x4]
	float Diffusion;//[Offset: 0x20, Size: 0x4]
	float Gain;//[Offset: 0x24, Size: 0x4]
	float GainHF;//[Offset: 0x28, Size: 0x4]
	float DecayTime;//[Offset: 0x2c, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x30, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 0x4]
	float LateGain;//[Offset: 0x3c, Size: 0x4]
	float LateDelay;//[Offset: 0x40, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x4]
	Actor* InViewer;//[Offset: 0x4, Size: 0x4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 0x4]
	Vector ViewLocation;//[Offset: 0xc, Size: 0xc]
	Vector ViewDir;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x20, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x48, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x50, Size: 0xc]
	Transform LevelTransform;//[Offset: 0x70, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xa0, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa6, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa6, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa6, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa6, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa6, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa6, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa7, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa7, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xa8, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xb8, Size: 0xc]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xc4, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xcc, Size: 0xc]
	delegate OnLevelUnloaded;//[Offset: 0xd8, Size: 0xc]
	delegate OnLevelShown;//[Offset: 0xe4, Size: 0xc]
	delegate OnLevelHidden;//[Offset: 0xf0, Size: 0xc]
	Level* LoadedLevel;//[Offset: 0xfc, Size: 0x4]
	Level* PendingUnloadLevel;//[Offset: 0x100, Size: 0x4]
	bool ShouldBeLoaded();// 0x5c0ca8c
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x5c0ca0c
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x5ba265c
	void SetLevelLODIndex(int LODIndex);// 0x5c0c994
	bool IsStreamingStatePending();// 0x5c0c96c
	bool IsLevelVisible();// 0x5c0c944
	bool IsLevelLoaded();// 0x5c0c920
	FName GetWorldAssetPackageFName();// 0x5c0c8e0
	LevelScriptActor* GetLevelScriptActor();// 0x5c0c8b8
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x5c0c820

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2a4, Size: 0xc]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x2b1, Size: 0x1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x484, Size: 0x3c]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x778, Size: 0x4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x4]
	Level* Level;//[Offset: 0x24, Size: 0x4]
	Object*[] ObjReferences;//[Offset: 0x6c, Size: 0xc]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x38, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x34, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x5b5184c
	int GetObjectCount();// 0x5b51824
	int GetNewAvoidanceUID();// 0x5b517fc
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x5b5176c

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 0x4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 0x4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 0x4]
	<Level*> Levels;//[Offset: 0x14, Size: 0x3c]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 0x4]
	World* World;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x34, Size: 0xc]
	double TilesStreamingTimeThreshold;//[Offset: 0x40, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0xc]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0xc, Size: 0xc]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x27c, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	void ToggleEnabled();// 0x5c0e450
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x5c0e3e0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x5c0e368
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x5c0e2f0
	void SetLightColor(LinearColor NewLightColor);// 0x5c0e274
	void SetEnabled(bool bSetEnabled);// 0x5c0e1f4
	void SetCastShadows(bool bNewValue);// 0x5c0e174
	void SetBrightness(float NewBrightness);// 0x5c0e0fc
	void SetAffectTranslucentLighting(bool bNewValue);// 0x5c0e07c
	void OnRep_bEnabled();// 0x3e43d40
	bool IsEnabled();// 0x5c0e054
	LinearColor GetLightColor();// 0x5c0e010
	float GetBrightness();// 0x5c0dfe8

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x214, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x218, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x21c, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x224, Size: 0x4]
	float MinRoughness;//[Offset: 0x22c, Size: 0x4]
	float SpecularScale;//[Offset: 0x230, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x234, Size: 0x4]
	float ShadowBias;//[Offset: 0x238, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x23c, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x240, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x245, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x248, Size: 0x4]
	Vector LightFunctionScale;//[Offset: 0x24c, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x258, Size: 0x4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x260, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x264, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x268, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	float BloomScale;//[Offset: 0x270, Size: 0x4]
	float BloomThreshold;//[Offset: 0x274, Size: 0x4]
	Color BloomTint;//[Offset: 0x278, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x280, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x5c0f430
	void SetTransmission(bool bNewValue);// 0x5c0f3b0
	void SetTemperature(float NewTemperature);// 0x5c0f338
	void SetShadowBias(float NewValue);// 0x5c0f2c0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x5c0f250
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x5c0f1d8
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x5c0f160
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x5c0f0e8
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x5c0f020
	void SetIntensity(float NewIntensity);// 0x5c0efa8
	void SetIndirectLightingIntensity(float NewIntensity);// 0x5c0ef30
	void SetIESTexture(TextureLightProfile* NewValue);// 0x5c0eeb8
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x5c0ee38
	void SetEnableLightShaftBloom(bool bNewValue);// 0x5c0edb8
	void SetBloomTint(Color NewValue);// 0x5c0ed48
	void SetBloomThreshold(float NewValue);// 0x5c0ecd0
	void SetBloomScale(float NewValue);// 0x5c0ec58
	void SetAffectTranslucentLighting(bool bNewValue);// 0x5c0ebd8
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x5c0eb58

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1ec, Size: 0x10]
	float Brightness;//[Offset: 0x1fc, Size: 0x4]
	float Intensity;//[Offset: 0x200, Size: 0x4]
	Color LightColor;//[Offset: 0x204, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x208, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x208, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x208, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x20c, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x210, Size: 0x4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x5c0ff10
	void SetCastShadows(bool bNewValue);// 0x5c0fe90
	LinearColor GetLightColor();// 0x5c0fe4c

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xb4, Size: 0x4]
	float TextureMultiplier;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x27c, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	void OnRep_bEnabled();// 0x3e43d40

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x214, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x218, Size: 0x4]
	float SourceCubemapAngle;//[Offset: 0x21c, Size: 0x4]
	int CubemapResolution;//[Offset: 0x220, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x224, Size: 0x4]
	LinearColor MobileReflectionTint;//[Offset: 0x228, Size: 0x10]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x23c, Size: 0x10]
	float OcclusionMaxDistance;//[Offset: 0x24c, Size: 0x4]
	float Contrast;//[Offset: 0x250, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x254, Size: 0x4]
	float MinOcclusion;//[Offset: 0x258, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x25c, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x260, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x308, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x5c918c8
	void SetOcclusionTint(out const Color InTint);// 0x5c91844
	void SetOcclusionExponent(float InOcclusionExponent);// 0x5c917cc
	void SetOcclusionContrast(float InOcclusionContrast);// 0x5c91754
	void SetMinOcclusion(float InMinOcclusion);// 0x5c916dc
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x5c91658
	void SetLightColor(LinearColor NewLightColor);// 0x5c915dc
	void SetIntensity(float NewIntensity);// 0x5c91564
	void SetIndirectLightingIntensity(float NewIntensity);// 0x5c914ec
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x5c913ec
	void SetCubemap(TextureCube* NewCubemap);// 0x5c91374
	void RecaptureSky();// 0x5c91360

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x284, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x5ca3688
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x5ca3610

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x308, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x30c, Size: 0x4]
	float LightShaftConeAngle;//[Offset: 0x310, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x5ca3b54
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x5ca3adc

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x2f8, Size: 0x4]
	float SourceRadius;//[Offset: 0x2fc, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x300, Size: 0x4]
	float SourceLength;//[Offset: 0x304, Size: 0x4]
	void SetSourceRadius(float bNewValue);// 0x5c6694c
	void SetSourceLength(float NewValue);// 0x5c668d4
	void SetSoftSourceRadius(float bNewValue);// 0x5c6685c
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x5c667e4

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x2dd, Size: 0x1]
	float Radius;//[Offset: 0x2e0, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x2e4, Size: 0x4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x2e8, Size: 0xc]
	void SetAttenuationRadius(float NewRadius);// 0x5c11210
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x5c11110

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x27c, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	void OnRep_bEnabled();// 0x3e43d40

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x1ec, Size: 0x4]
	LinearColor FogInscatteringColor;//[Offset: 0x1f0, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x200, Size: 0x4]
	float InscatteringColorCubemapAngle;//[Offset: 0x204, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x208, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x218, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x21c, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x220, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x224, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x228, Size: 0x10]
	float FogHeightFalloff;//[Offset: 0x238, Size: 0x4]
	float FogMaxOpacity;//[Offset: 0x23c, Size: 0x4]
	float StartDistance;//[Offset: 0x240, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x244, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x24c, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x250, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x254, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x264, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x268, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x26c, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x5b8e8e8
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x5b8e870
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x5b8e7f4
	void SetVolumetricFogDistance(float NewValue);// 0x5b8e77c
	void SetVolumetricFogAlbedo(Color NewValue);// 0x5b8e70c
	void SetVolumetricFog(bool bNewValue);// 0x5b8e68c
	void SetStartDistance(float Value);// 0x5b8e614
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x5b8e59c
	void SetInscatteringTextureTint(LinearColor Value);// 0x5b8e520
	void SetInscatteringColorCubemapAngle(float Value);// 0x5b4bcc0
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x5b8e4a8
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x5b8e430
	void SetFogMaxOpacity(float Value);// 0x5b8e3b8
	void SetFogInscatteringColor(LinearColor Value);// 0x5b8e33c
	void SetFogHeightFalloff(float Value);// 0x5b8e2c4
	void SetFogDensity(float Value);// 0x5b4bfa0
	void SetFogCutoffDistance(float Value);// 0x5b8e24c
	void SetDirectionalInscatteringStartDistance(float Value);// 0x5b8e1d4
	void SetDirectionalInscatteringExponent(float Value);// 0x5b8e15c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x5b8e0e0

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x27c, Size: 0x4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x281, Size: 0x1]
	void SetMobility(byte InMobility);// 0x5ca547c

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x280, Size: 0x4]

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x27c, Size: 0x4]

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x1ec, Size: 0x4]
	enum ReflectionSourceType;//[Offset: 0x1f0, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x1f4, Size: 0x4]
	float SourceCubemapAngle;//[Offset: 0x1f8, Size: 0x4]
	float Brightness;//[Offset: 0x1fc, Size: 0x4]
	Vector CaptureOffset;//[Offset: 0x200, Size: 0xc]
	Guid MapBuildDataId;//[Offset: 0x20c, Size: 0x10]

--------------------------------
Class: GarageGameMode_C.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 0x4]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2d8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	int NumSpectators;//[Offset: 0x2e4, Size: 0x4]
	int NumPlayers;//[Offset: 0x2e8, Size: 0x4]
	int NumBots;//[Offset: 0x2ec, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2f0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2f4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f8, Size: 0x4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2fc, Size: 0xc]
	float InactivePlayerStateLifeSpan;//[Offset: 0x308, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x30c, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	void StartMatch();// 0x3eaf370
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x3eb0428
	void Say(FString Msg);// 0x5b91c08
	void RestartGame();// 0x3ea65a0
	bool ReadyToStartMatch();// 0x5b91bd8
	bool ReadyToEndMatch();// 0x5b91ba8
	void K2_OnSetMatchState(FName NewState, FName OldState);// 0x4528238
	bool IsMatchInProgress();// 0x5b91b78
	bool HasMatchEnded();// 0x5b91b48
	FName GetMatchState();// 0x5b91b24
	void EndMatch();// 0x3ea6440
	void AbortMatch();// 0x37ccb28

--------------------------------
Class: Garage_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x4]
	void ReceiveBeginPlay();// 0x4528238
	void ExecuteUbergraph_Garage(int EntryPoint);// 0x4528238

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2b0, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x2b8, Size: 0x8]
	float MatchStartServerTime;//[Offset: 0x2c0, Size: 0x4]
	void OnRep_MatchState();// 0x3e98664
	bool IsMatchInProgress();// 0x5b713d0
	bool HasMatchEnded();// 0x5ba1864
	float GetMatchStartServerTime();// 0x5ba1848
	float GetMatchStartLocalTime();// 0x5ba1824
	float GetMatchEndServerTime();// 0x5ba1800
	float GetMatchEndLocalTime();// 0x5ba17e4
	float GetElapsedTime();// 0x5ba1788

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x280, Size: 0x4]
	NavDataConfig NavDataConfig;//[Offset: 0x288, Size: 0x68]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2f1, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2f4, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2f8, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x384, Size: 0xc]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0xc]
	int AreaID;//[Offset: 0xc, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GarageController_C.BattleMechsPlayerController_C.PlayerController.Controller.Actor.Object
	WidgetInteractionComponent* WidgetInteraction;//[Offset: 0x550, Size: 0x4]
	class Object* GarageCameraClass;//[Offset: 0x554, Size: 0x4]
	GarageCamera_C* GarageCamera;//[Offset: 0x558, Size: 0x4]
	PlayerProfileItem* SelectedItem;//[Offset: 0x55c, Size: 0x4]
	int SelectedSlotIndex;//[Offset: 0x560, Size: 0x4]
	delegate OnStateChanged;//[Offset: 0x564, Size: 0xc]
	PlayerProfileItem* SelectedDemoItem;//[Offset: 0x570, Size: 0x4]
	Vector2D PointerPressedPosition;//[Offset: 0x574, Size: 0x8]
	float PointerPressedTime;//[Offset: 0x57c, Size: 0x4]
	float MaxIntervalForTap;//[Offset: 0x580, Size: 0x4]
	float MaxDeltaPositionForTap;//[Offset: 0x584, Size: 0x4]
	PlayerProfileItem* SelectedItemToEquip;//[Offset: 0x588, Size: 0x4]
	PlayerProfileIAP* SelectedIAP;//[Offset: 0x58c, Size: 0x4]
	PlayerProfileSlotCompatibility SlotFilter;//[Offset: 0x590, Size: 0xc]
	int DisablePointerInputCounter;//[Offset: 0x59c, Size: 0x4]
	GarageSquad_C* GarageSquad;//[Offset: 0x5a0, Size: 0x4]
	PlayerProfilePurchasedItem* StorageItem;//[Offset: 0x5a4, Size: 0x4]
	PlayerProfileSlotCompatibility PendingSlotFilter;//[Offset: 0x5a8, Size: 0xc]
	PlayerProfileSlotCompatibility DefaultSlotFilter;//[Offset: 0x5b4, Size: 0xc]
	bool bPendingNotifyStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	delegate OnSlotFilterChanged;//[Offset: 0x5c4, Size: 0xc]
	PlayerProfileMatchResult* MatchResult;//[Offset: 0x5d0, Size: 0x4]
	byte ReceiveMatchResultStatus;//[Offset: 0x5d4, Size: 0x1]
	delegate OnOperationComplete;//[Offset: 0x5d8, Size: 0xc]
	PlayerProfileCurrency* MainCurrency;//[Offset: 0x5e4, Size: 0x4]
	int MainCurrencyAmount;//[Offset: 0x5e8, Size: 0x4]
	delegate OnCurrenciesUpdateComplete;//[Offset: 0x5ec, Size: 0xc]
	byte ReceiveStorageAndStoreItemsStatus;//[Offset: 0x5f8, Size: 0x1]
	PlayerProfileIAP*[] ItemsIAPs;//[Offset: 0x5fc, Size: 0xc]
	byte ReceiveItemsIAPsStatus;//[Offset: 0x608, Size: 0x1]
	byte LastInAppPurchaseStatus;//[Offset: 0x609, Size: 0x1]
	delegate OnFriendsListChanged;//[Offset: 0x60c, Size: 0xc]
	FName PremiumIAPAttributeName;//[Offset: 0x618, Size: 0x8]
	FName PremiumExpirationAttributeName;//[Offset: 0x620, Size: 0x8]
	FName EngineeringPremiumExpirationAttributeName;//[Offset: 0x628, Size: 0x8]
	int PremiumExpirationTimeSeconds;//[Offset: 0x630, Size: 0x4]
	int EngineeringPremiumExpirationTimeSeconds;//[Offset: 0x634, Size: 0x4]
	delegate OnPremiumStateChanged;//[Offset: 0x638, Size: 0xc]
	FName RewardedLeaderboardAttributeName;//[Offset: 0x648, Size: 0x8]
	FName[] CachedLeaderboardIds;//[Offset: 0x650, Size: 0xc]
	bool bLeaderboardsIdsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]
	delegate RequestHasNewLeaderboardsComplete;//[Offset: 0x660, Size: 0xc]
	bool bAllowCheckLeaderboardsRewards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	float LoadingScreenFadeOutDuration;//[Offset: 0x670, Size: 0x4]
	PlayerProfileStoreItem*[] BlackMarketDeliveryItems;//[Offset: 0x674, Size: 0xc]
	int BlackMarketVersion;//[Offset: 0x680, Size: 0x4]
	int NextBlackMarketRenewTime;//[Offset: 0x684, Size: 0x4]
	int NextBlackMarketDeliveryRequestPrice;//[Offset: 0x688, Size: 0x4]
	int ExpectedBlackMarketDeliveryDeadline;//[Offset: 0x68c, Size: 0x4]
	int SecondsLeft;//[Offset: 0x690, Size: 0x4]
	byte BlackMarketDeliveryInfoReceivingStatus;//[Offset: 0x694, Size: 0x1]
	byte RequestBlackMarketDeliveryStatus;//[Offset: 0x695, Size: 0x1]
	delegate BlackMarketDeliveryInfoChanged;//[Offset: 0x698, Size: 0xc]
	int UtcNowSeconds;//[Offset: 0x6a4, Size: 0x4]
	<FString> ProcessedInboxMessageIds;//[Offset: 0x6a8, Size: 0x3c]
	delegate SocialIdentityOperationComplete;//[Offset: 0x6e4, Size: 0xc]
	OnlineInboxMessage K2Node_CustomEvent_Message;//[Offset: 0x6f0, Size: 0x28]
	UniqueNetIdRepl K2Node_CustomEvent_FriendId6;//[Offset: 0x718, Size: 0x18]
	JsonObjectBlueprintWrapper CallFunc_BuildJsonObjectFromString_ReturnValue;//[Offset: 0x730, Size: 0x8]
	int K2Node_CustomEvent_LocalUserNum4;//[Offset: 0x738, Size: 0x4]
	UniqueNetIdRepl K2Node_CustomEvent_FriendId5;//[Offset: 0x73c, Size: 0x18]
	FString K2Node_CustomEvent_ListName4;//[Offset: 0x754, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg21;//[Offset: 0x760, Size: 0xc]
	byte K2Node_CustomEvent_Status22;//[Offset: 0x76c, Size: 0x1]
	UniqueNetIdRepl K2Node_CustomEvent_FriendId4;//[Offset: 0x770, Size: 0x18]
	int K2Node_CustomEvent_LocalUserNum3;//[Offset: 0x788, Size: 0x4]
	UniqueNetIdRepl K2Node_CustomEvent_FriendId3;//[Offset: 0x78c, Size: 0x18]
	FString K2Node_CustomEvent_ListName3;//[Offset: 0x7a4, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg20;//[Offset: 0x7b0, Size: 0xc]
	byte K2Node_CustomEvent_Status21;//[Offset: 0x7bc, Size: 0x1]
	UniqueNetIdRepl K2Node_CustomEvent_FriendId2;//[Offset: 0x7c0, Size: 0x18]
	int K2Node_CustomEvent_LocalUserNum2;//[Offset: 0x7d8, Size: 0x4]
	UniqueNetIdRepl K2Node_CustomEvent_FriendId1;//[Offset: 0x7dc, Size: 0x18]
	FString K2Node_CustomEvent_ListName2;//[Offset: 0x7f4, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg19;//[Offset: 0x800, Size: 0xc]
	byte K2Node_CustomEvent_Status20;//[Offset: 0x80c, Size: 0x1]
	UniqueNetIdRepl K2Node_CustomEvent_FriendId;//[Offset: 0x810, Size: 0x18]
	int K2Node_CustomEvent_LocalUserNum1;//[Offset: 0x828, Size: 0x4]
	FString K2Node_CustomEvent_ListName1;//[Offset: 0x82c, Size: 0xc]
	int K2Node_CustomEvent_LocalUserNum;//[Offset: 0x838, Size: 0x4]
	FString K2Node_CustomEvent_ListName;//[Offset: 0x83c, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg18;//[Offset: 0x848, Size: 0xc]
	byte K2Node_CustomEvent_Status19;//[Offset: 0x854, Size: 0x1]
	enum K2Node_CustomEvent_Result2;//[Offset: 0x855, Size: 0x1]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD;//[Offset: 0x858, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c, Size: 0x1]
	int K2Node_CustomEvent_LocalUserNum5;//[Offset: 0x860, Size: 0x4]
	UniqueNetIdRepl K2Node_CustomEvent_FriendId7;//[Offset: 0x864, Size: 0x18]
	FString K2Node_CustomEvent_ListName5;//[Offset: 0x87c, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg22;//[Offset: 0x888, Size: 0xc]
	byte K2Node_CustomEvent_Status23;//[Offset: 0x894, Size: 0x1]
	PlayerProfilePurchasedItem*[] K2Node_CustomEvent_Items1;//[Offset: 0x898, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg17;//[Offset: 0x8a4, Size: 0xc]
	byte K2Node_CustomEvent_Status18;//[Offset: 0x8b0, Size: 0x1]
	PlayerProfilePurchasedItem* CallFunc_Array_Get_Item;//[Offset: 0x8b4, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x8b8, Size: 0x10]
	PlayerProfilePurchasedItem*[] K2Node_CustomEvent_Items;//[Offset: 0x8c8, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg16;//[Offset: 0x8d4, Size: 0xc]
	byte K2Node_CustomEvent_Status17;//[Offset: 0x8e0, Size: 0x1]
	PlayerProfileSlotCompatibility K2Node_CustomEvent_NewFilter;//[Offset: 0x8e4, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x8f0, Size: 0x10]
	PlayerProfileCurrencyAmount K2Node_CustomEvent_Result1;//[Offset: 0x900, Size: 0x10]
	FString K2Node_CustomEvent_ErrorMsg15;//[Offset: 0x910, Size: 0xc]
	byte K2Node_CustomEvent_Status16;//[Offset: 0x91c, Size: 0x1]
	PlayerProfileCurrency*[] K2Node_CustomEvent_Currencies;//[Offset: 0x920, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg14;//[Offset: 0x92c, Size: 0xc]
	byte K2Node_CustomEvent_Status15;//[Offset: 0x938, Size: 0x1]
	PlayerProfileCurrency* CallFunc_Array_Get_Item1;//[Offset: 0x93c, Size: 0x4]
	PlayerProfileIAP*[] K2Node_CustomEvent_IAPs;//[Offset: 0x940, Size: 0xc]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request4;//[Offset: 0x94c, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg13;//[Offset: 0x950, Size: 0xc]
	byte K2Node_CustomEvent_Status14;//[Offset: 0x95c, Size: 0x1]
	PlayerProfileIAP* K2Node_CustomEvent_IAP2;//[Offset: 0x960, Size: 0x4]
	PlayerProfileDelta*[] K2Node_CustomEvent_ProfileDeltas1;//[Offset: 0x964, Size: 0xc]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request3;//[Offset: 0x970, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg12;//[Offset: 0x974, Size: 0xc]
	byte K2Node_CustomEvent_Status13;//[Offset: 0x980, Size: 0x1]
	FName CallFunc_GetIAPFirstCurrency_CurrencyId;//[Offset: 0x988, Size: 0x8]
	int CallFunc_GetIAPFirstCurrency_Amount;//[Offset: 0x990, Size: 0x4]
	bool CallFunc_GetIAPFirstCurrency_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x998, Size: 0x10]
	OfflinePlayerProfile* K2Node_DynamicCast_AsOffline_Player_Profile;//[Offset: 0x9a8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 0x1]
	interface class FloatProperty* CallFunc_SaveLocalPlayerProfile_self_CastInput;//[Offset: 0x9b0, Size: 0x8]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x9b8, Size: 0x1]
	FName K2Node_CustomEvent_SubsystemName;//[Offset: 0x9c0, Size: 0x8]
	FName K2Node_CustomEvent_SubsystemName1;//[Offset: 0x9c8, Size: 0x8]
	PlayerProfilePurchasedItem* K2Node_DynamicCast_AsPlayer_Profile_Purchased_Item;//[Offset: 0x9d0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d4, Size: 0x1]
	PlayerProfilePurchasedItem* K2Node_CustomEvent_Item7;//[Offset: 0x9d8, Size: 0x4]
	PlayerProfilePurchasedItem* K2Node_CustomEvent_Item6;//[Offset: 0x9dc, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg11;//[Offset: 0x9e0, Size: 0xc]
	byte K2Node_CustomEvent_Status12;//[Offset: 0x9ec, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor;//[Offset: 0x9f0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x9f5, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f6, Size: 0x1]
	int CallFunc_GetEquipmentOwnerAndSlot_SlotIndex;//[Offset: 0x9f8, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x9fc, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0xa00, Size: 0x10]
	FName K2Node_CustomEvent_SubsystemName2;//[Offset: 0xa10, Size: 0x8]
	FString K2Node_CustomEvent_ErrorMsg23;//[Offset: 0xa18, Size: 0xc]
	byte K2Node_CustomEvent_Status24;//[Offset: 0xa24, Size: 0x1]
	FName K2Node_CustomEvent_SubsystemName3;//[Offset: 0xa28, Size: 0x8]
	FName K2Node_CustomEvent_SubsystemName4;//[Offset: 0xa30, Size: 0x8]
	FString K2Node_CustomEvent_ErrorMsg24;//[Offset: 0xa38, Size: 0xc]
	byte K2Node_CustomEvent_Status25;//[Offset: 0xa44, Size: 0x1]
	FName K2Node_CustomEvent_SubsystemName5;//[Offset: 0xa48, Size: 0x8]
	FName K2Node_CustomEvent_SubsystemName6;//[Offset: 0xa50, Size: 0x8]
	int K2Node_CustomEvent_LocalUserIndex;//[Offset: 0xa58, Size: 0x4]
	bool K2Node_CustomEvent_bWasSuccessful;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 0x1]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility;//[Offset: 0xa60, Size: 0xc]
	UniqueNetIdRepl CallFunc_GetUniquePlayerId_ReturnValue;//[Offset: 0xa6c, Size: 0x18]
	FName K2Node_CustomEvent_SubsystemName7;//[Offset: 0xa88, Size: 0x8]
	UniqueNetIdRepl K2Node_CustomEvent_PlayerId;//[Offset: 0xa90, Size: 0x18]
	FString K2Node_CustomEvent_Nickname;//[Offset: 0xaa8, Size: 0xc]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer2;//[Offset: 0xab4, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg25;//[Offset: 0xab8, Size: 0xc]
	byte K2Node_CustomEvent_Status26;//[Offset: 0xac4, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0xac8, Size: 0x10]
	PlayerProfileStoreItem* K2Node_CustomEvent_StoreItem;//[Offset: 0xad8, Size: 0x4]
	PlayerProfilePurchasedItem* K2Node_CustomEvent_PurchasedItem;//[Offset: 0xadc, Size: 0x4]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request2;//[Offset: 0xae0, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg10;//[Offset: 0xae4, Size: 0xc]
	byte K2Node_CustomEvent_Status11;//[Offset: 0xaf0, Size: 0x1]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility1;//[Offset: 0xaf4, Size: 0xc]
	PlayerProfileIAP* K2Node_CustomEvent_IAP1;//[Offset: 0xb00, Size: 0x4]
	PlayerProfileDelta*[] K2Node_CustomEvent_ProfileDeltas;//[Offset: 0xb04, Size: 0xc]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request1;//[Offset: 0xb10, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg9;//[Offset: 0xb14, Size: 0xc]
	byte K2Node_CustomEvent_Status10;//[Offset: 0xb20, Size: 0x1]
	PlayerProfilePurchasedItem* CallFunc_GetProfileDeltasFirstNewItem_Output;//[Offset: 0xb24, Size: 0x4]
	PlayerProfileItem* CallFunc_GetIAPFirstItem_Item;//[Offset: 0xb28, Size: 0x4]
	PlayerProfilePurchasedItem* K2Node_CustomEvent_Item5;//[Offset: 0xb2c, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg8;//[Offset: 0xb30, Size: 0xc]
	byte K2Node_CustomEvent_Status9;//[Offset: 0xb3c, Size: 0x1]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request;//[Offset: 0xb40, Size: 0x4]
	byte K2Node_CustomEvent_Status8;//[Offset: 0xb44, Size: 0x1]
	PlayerProfilePurchasedItem* K2Node_CustomEvent_EqippedItem;//[Offset: 0xb48, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches2;//[Offset: 0xb4c, Size: 0x1]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4d, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor1;//[Offset: 0xb50, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb54, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate5;//[Offset: 0xb58, Size: 0x10]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility2;//[Offset: 0xb68, Size: 0xc]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility3;//[Offset: 0xb74, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate6;//[Offset: 0xb80, Size: 0x10]
	bool CallFunc_SpawnItemAndAttachmentsObjectsIfDifferent_bSomeObjectsNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor2;//[Offset: 0xb94, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor3;//[Offset: 0xb9c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 0x1]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility4;//[Offset: 0xba4, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate7;//[Offset: 0xbb0, Size: 0x10]
	PlayerProfilePurchasedItem* K2Node_DynamicCast_AsPlayer_Profile_Purchased_Item1;//[Offset: 0xbc0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc4, Size: 0x1]
	int Temp_int_Array_Index_Variable;//[Offset: 0xbc8, Size: 0x4]
	PlayerProfilePurchasedItem* K2Node_CustomEvent_Item4;//[Offset: 0xbcc, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg7;//[Offset: 0xbd0, Size: 0xc]
	byte K2Node_CustomEvent_Status7;//[Offset: 0xbdc, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor4;//[Offset: 0xbe0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe4, Size: 0x1]
	PlayerProfilePurchasedItem* K2Node_CustomEvent_Item3;//[Offset: 0xbe8, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate8;//[Offset: 0xbf0, Size: 0x10]
	PlayerProfileItem* K2Node_CustomEvent_Item2;//[Offset: 0xc00, Size: 0x4]
	PlayerProfileItem* K2Node_CustomEvent_Item1;//[Offset: 0xc04, Size: 0x4]
	int K2Node_CustomEvent_SlotIndex1;//[Offset: 0xc08, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate9;//[Offset: 0xc10, Size: 0x10]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility5;//[Offset: 0xc20, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate10;//[Offset: 0xc30, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate11;//[Offset: 0xc40, Size: 0x10]
	PlayerProfileItem* K2Node_CustomEvent_Item;//[Offset: 0xc50, Size: 0x4]
	PlayerProfileIAP* K2Node_CustomEvent_IAP;//[Offset: 0xc54, Size: 0x4]
	int K2Node_CustomEvent_SlotIndex;//[Offset: 0xc58, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate12;//[Offset: 0xc60, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate13;//[Offset: 0xc70, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate14;//[Offset: 0xc80, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate15;//[Offset: 0xc90, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate16;//[Offset: 0xca0, Size: 0x10]
	float CallFunc_GetMousePositionScaledByDPI_LocationX;//[Offset: 0xcb0, Size: 0x4]
	float CallFunc_GetMousePositionScaledByDPI_LocationY;//[Offset: 0xcb4, Size: 0x4]
	float CallFunc_GetMousePositionScaledByDPI_LocationX1;//[Offset: 0xcb8, Size: 0x4]
	float CallFunc_GetMousePositionScaledByDPI_LocationY1;//[Offset: 0xcbc, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate17;//[Offset: 0xcc0, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate18;//[Offset: 0xcd0, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate19;//[Offset: 0xce0, Size: 0x10]
	HitResult CallFunc_GetLastHitResult_ReturnValue;//[Offset: 0xcf0, Size: 0x88]
	bool CallFunc_BreakHitResult_bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 0x1]
	bool CallFunc_BreakHitResult_bInitialOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd79, Size: 0x1]
	float CallFunc_BreakHitResult_Time;//[Offset: 0xd7c, Size: 0x4]
	float CallFunc_BreakHitResult_Distance;//[Offset: 0xd80, Size: 0x4]
	Vector CallFunc_BreakHitResult_Location;//[Offset: 0xd84, Size: 0xc]
	Vector CallFunc_BreakHitResult_ImpactPoint;//[Offset: 0xd90, Size: 0xc]
	Vector CallFunc_BreakHitResult_Normal;//[Offset: 0xd9c, Size: 0xc]
	Vector CallFunc_BreakHitResult_ImpactNormal;//[Offset: 0xda8, Size: 0xc]
	PhysicalMaterial* CallFunc_BreakHitResult_PhysMat;//[Offset: 0xdb4, Size: 0x4]
	Actor* CallFunc_BreakHitResult_HitActor;//[Offset: 0xdb8, Size: 0x4]
	PrimitiveComponent* CallFunc_BreakHitResult_HitComponent;//[Offset: 0xdbc, Size: 0x4]
	FName CallFunc_BreakHitResult_HitBoneName;//[Offset: 0xdc0, Size: 0x8]
	int CallFunc_BreakHitResult_HitItem;//[Offset: 0xdc8, Size: 0x4]
	int CallFunc_BreakHitResult_FaceIndex;//[Offset: 0xdcc, Size: 0x4]
	Vector CallFunc_BreakHitResult_TraceStart;//[Offset: 0xdd0, Size: 0xc]
	Vector CallFunc_BreakHitResult_TraceEnd;//[Offset: 0xddc, Size: 0xc]
	WidgetsManagerHUD_C* K2Node_DynamicCast_AsWidgets_Manager_HUD;//[Offset: 0xde8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdec, Size: 0x1]
	Object* CallFunc_GetTopModalWidget_Widget;//[Offset: 0xdf0, Size: 0x4]
	int CallFunc_GetTopModalWidget_Priority;//[Offset: 0xdf4, Size: 0x4]
	WidgetActor_Item_C* K2Node_DynamicCast_AsWidget_Actor_Item;//[Offset: 0xdf8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess10;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfc, Size: 0x1]
	HitResult CallFunc_GetLastHitResult_ReturnValue1;//[Offset: 0xe00, Size: 0x88]
	bool CallFunc_BreakHitResult_bBlockingHit1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe88, Size: 0x1]
	bool CallFunc_BreakHitResult_bInitialOverlap1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe89, Size: 0x1]
	float CallFunc_BreakHitResult_Time1;//[Offset: 0xe8c, Size: 0x4]
	float CallFunc_BreakHitResult_Distance1;//[Offset: 0xe90, Size: 0x4]
	Vector CallFunc_BreakHitResult_Location1;//[Offset: 0xe94, Size: 0xc]
	Vector CallFunc_BreakHitResult_ImpactPoint1;//[Offset: 0xea0, Size: 0xc]
	Vector CallFunc_BreakHitResult_Normal1;//[Offset: 0xeac, Size: 0xc]
	Vector CallFunc_BreakHitResult_ImpactNormal1;//[Offset: 0xeb8, Size: 0xc]
	PhysicalMaterial* CallFunc_BreakHitResult_PhysMat1;//[Offset: 0xec4, Size: 0x4]
	Actor* CallFunc_BreakHitResult_HitActor1;//[Offset: 0xec8, Size: 0x4]
	PrimitiveComponent* CallFunc_BreakHitResult_HitComponent1;//[Offset: 0xecc, Size: 0x4]
	FName CallFunc_BreakHitResult_HitBoneName1;//[Offset: 0xed0, Size: 0x8]
	int CallFunc_BreakHitResult_HitItem1;//[Offset: 0xed8, Size: 0x4]
	int CallFunc_BreakHitResult_FaceIndex1;//[Offset: 0xedc, Size: 0x4]
	Vector CallFunc_BreakHitResult_TraceStart1;//[Offset: 0xee0, Size: 0xc]
	Vector CallFunc_BreakHitResult_TraceEnd1;//[Offset: 0xeec, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate20;//[Offset: 0xef8, Size: 0x10]
	enum K2Node_CustomEvent_Result;//[Offset: 0xf08, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate21;//[Offset: 0xf10, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate22;//[Offset: 0xf20, Size: 0x10]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD1;//[Offset: 0xf30, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess11;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf34, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate23;//[Offset: 0xf38, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate24;//[Offset: 0xf48, Size: 0x10]
	BattleMechsGameInstance_C* K2Node_DynamicCast_AsBattle_Mechs_Game_Instance;//[Offset: 0xf58, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess12;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5c, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate25;//[Offset: 0xf60, Size: 0x10]
	BattleMechsGameInstance_C* K2Node_DynamicCast_AsBattle_Mechs_Game_Instance1;//[Offset: 0xf70, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess13;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate26;//[Offset: 0xf78, Size: 0x10]
	PlayerProfileMatchResult* K2Node_CustomEvent_MatchResult;//[Offset: 0xf88, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg6;//[Offset: 0xf8c, Size: 0xc]
	byte K2Node_CustomEvent_Status6;//[Offset: 0xf98, Size: 0x1]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer1;//[Offset: 0xf9c, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg5;//[Offset: 0xfa0, Size: 0xc]
	byte K2Node_CustomEvent_Status5;//[Offset: 0xfac, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate27;//[Offset: 0xfb0, Size: 0x10]
	BattleMechsGameInstance_C* K2Node_DynamicCast_AsBattle_Mechs_Game_Instance2;//[Offset: 0xfc0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess14;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc4, Size: 0x1]
	OnlineLeaderboard*[] K2Node_CustomEvent_Leaderboards1;//[Offset: 0xfc8, Size: 0xc]
	FName CallFunc_Array_Get_Item2;//[Offset: 0xfd8, Size: 0x8]
	BattleMechsGameInstance_C* K2Node_DynamicCast_AsBattle_Mechs_Game_Instance3;//[Offset: 0xfe0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess15;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe4, Size: 0x1]
	OnlineLeaderboard*[] K2Node_CustomEvent_Leaderboards;//[Offset: 0xfe8, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg4;//[Offset: 0xff4, Size: 0xc]
	byte K2Node_CustomEvent_Status4;//[Offset: 0x1000, Size: 0x1]
	UniqueNetIdRepl K2Node_CustomEvent_LeaderboardId;//[Offset: 0x1004, Size: 0x18]
	FString K2Node_CustomEvent_ErrorMsg3;//[Offset: 0x101c, Size: 0xc]
	byte K2Node_CustomEvent_Status3;//[Offset: 0x1028, Size: 0x1]
	OnlineLeaderboard* K2Node_CustomEvent_Leaderboard1;//[Offset: 0x102c, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate28;//[Offset: 0x1030, Size: 0x10]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD2;//[Offset: 0x1040, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1044, Size: 0x1]
	OnlineLeaderboard* K2Node_CustomEvent_Leaderboard;//[Offset: 0x1048, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg2;//[Offset: 0x104c, Size: 0xc]
	byte K2Node_CustomEvent_Status2;//[Offset: 0x1058, Size: 0x1]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer;//[Offset: 0x105c, Size: 0x4]
	FString CallFunc_GetAttributeAsString_OutValue;//[Offset: 0x1060, Size: 0xc]
	UniqueNetIdRepl CallFunc_CreateUniqueLeaderboardId_ReturnValue;//[Offset: 0x106c, Size: 0x18]
	bool CallFunc_IsLastBlackMarketDeliveryProcessed_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 0x1]
	bool CallFunc_IsAncestorOrEqualItem_bIsAncestor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1085, Size: 0x1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1086, Size: 0x1]
	BattleMechsGameInstance_C* K2Node_DynamicCast_AsBattle_Mechs_Game_Instance4;//[Offset: 0x1088, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess17;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 0x1]
	byte K2Node_Select_Default;//[Offset: 0x108d, Size: 0x1]
	Key Temp_struct_Variable;//[Offset: 0x1090, Size: 0x10]
	Key K2Node_InputKeyEvent_Key;//[Offset: 0x10a0, Size: 0x10]
	Key K2Node_InputKeyEvent_Key1;//[Offset: 0x10b0, Size: 0x10]
	Key Temp_struct_Variable1;//[Offset: 0x10c0, Size: 0x10]
	Key K2Node_InputKeyEvent_Key2;//[Offset: 0x10d0, Size: 0x10]
	Key K2Node_InputKeyEvent_Key3;//[Offset: 0x10e0, Size: 0x10]
	Vector Temp_struct_Variable2;//[Offset: 0x10f0, Size: 0xc]
	float CallFunc_BreakVector_X;//[Offset: 0x10fc, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x1100, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x1104, Size: 0x4]
	byte Temp_byte_Variable;//[Offset: 0x1108, Size: 0x1]
	byte K2Node_InputTouchEvent_FingerIndex;//[Offset: 0x1109, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location;//[Offset: 0x110c, Size: 0xc]
	byte K2Node_InputTouchEvent_FingerIndex1;//[Offset: 0x1118, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location1;//[Offset: 0x111c, Size: 0xc]
	byte K2Node_InputTouchEvent_FingerIndex2;//[Offset: 0x1128, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location2;//[Offset: 0x112c, Size: 0xc]
	PlayerProfileCurrencyAmount[] K2Node_CustomEvent_NextUpdatePrice1;//[Offset: 0x1138, Size: 0xc]
	int K2Node_CustomEvent_Version1;//[Offset: 0x1144, Size: 0x4]
	int K2Node_CustomEvent_NextAutoUpdateTime1;//[Offset: 0x1148, Size: 0x4]
	PlayerProfileStoreItem*[] K2Node_CustomEvent_NewStoreItems1;//[Offset: 0x114c, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg1;//[Offset: 0x1158, Size: 0xc]
	byte K2Node_CustomEvent_Status1;//[Offset: 0x1164, Size: 0x1]
	PlayerProfileCurrencyAmount CallFunc_Array_Get_Item3;//[Offset: 0x1168, Size: 0x10]
	OnlinePlayerProfileBattleMechs* K2Node_DynamicCast_AsOnline_Player_Profile_Battle_Mechs;//[Offset: 0x1178, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess18;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117c, Size: 0x1]
	interface class FloatProperty* CallFunc_UpdateStore_self_CastInput;//[Offset: 0x1180, Size: 0x8]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility6;//[Offset: 0x1188, Size: 0xc]
	PlayerProfileCurrencyAmount[] K2Node_CustomEvent_NextUpdatePrice;//[Offset: 0x1194, Size: 0xc]
	int K2Node_CustomEvent_Version;//[Offset: 0x11a0, Size: 0x4]
	int K2Node_CustomEvent_NextAutoUpdateTime;//[Offset: 0x11a4, Size: 0x4]
	PlayerProfileStoreItem*[] K2Node_CustomEvent_NewStoreItems;//[Offset: 0x11a8, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0x11b4, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0x11c0, Size: 0x1]
	PlayerProfileCurrencyAmount CallFunc_Array_Get_Item4;//[Offset: 0x11c8, Size: 0x10]
	OnlinePlayerProfileBattleMechs* K2Node_DynamicCast_AsOnline_Player_Profile_Battle_Mechs1;//[Offset: 0x11d8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess19;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11dc, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate29;//[Offset: 0x11e0, Size: 0x10]
	interface class FloatProperty* CallFunc_GetStoreUpdateInfo_self_CastInput;//[Offset: 0x11f0, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate30;//[Offset: 0x11f8, Size: 0x10]
	FString CallFunc_PopRemoteNotification_OutPayload;//[Offset: 0x1208, Size: 0xc]
	int CallFunc_PopRemoteNotification_OutAppState;//[Offset: 0x1214, Size: 0x4]
	void SocialIdentityOperationComplete__DelegateSignature(FName bpp__SubsystemName__pf, enum bpp__Operation__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf, GarageController_C* bpp__Controller__pf);// 0x4528238
	void RequestHasNewLeaderboardsComplete__DelegateSignature(bool bpp__bHasNewLeaderboards__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnStateChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnSlotFilterChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnPremiumStateChanged__DelegateSignature(bool bpp__IsPremiumStateChanged__pf, bool bpp__IsEngineeringPremiumStateChanged__pf);// 0x4528238
	void OnOperationComplete__DelegateSignature(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnFriendsListChanged__DelegateSignature();// 0x4528238
	void OnCurrenciesUpdateComplete__DelegateSignature(byte bpp__Status__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void WaitExpectedBlackMarketDelivery();// 0x3ea01e4
	void UpdatePremiumState(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf);// 0x3ea0164
	void UpdatePlayerAttributes();// 0x3ea0148
	void UpdateCurrencies();// 0x3ea012c
	void UpdateCachedLeaderboardsIds(out const OnlineLeaderboard*[] bpp__Leaderboards__pf__const);// 0x3ea0084
	void UnequipItem(PlayerProfilePurchasedItem* bpp__Item__pf);// 0x3ea0004
	void Unequip();// 0x3e9ffe8
	void TriggerBlackMarketDeliveryInfoChanged();// 0x3e9ffcc
	void StorageItemsReceived(out const PlayerProfilePurchasedItem*[] bpp__Items__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9fe80
	void SpawnSquads(out PlayerProfilePurchasedItem*[] bpp__SquadItems__pf);// 0x3e9fdd8
	void SpawnItemActorForStore(PlayerProfileItem* bpp__Item__pf, bool bpp__bSetObjectRefToItem__pf, out Actor* bpp__Actor__pf);// 0x3e9fcb4
	void SetupRemoteNotifications();// 0x3e9fc98
	void SetupItemActorAndChildren(Actor* bpp__Actor__pf);// 0x3e9fc18
	void SetupInbox();// 0x3e9fbfc
	void SetSocialIdentityLinkStatus(const FName bpp__SubsystemName__pf__const, enum bpp__Value__pf);// 0x3e9fb30
	void SetSelectedItemAndSlot(PlayerProfileItem* bpp__Item__pf, int bpp__SlotIndex__pf);// 0x3e9fa6c
	void SetSelectedDemoItem(PlayerProfileItem* bpp__Item__pf);// 0x3e9f9ec
	void SetReceiveStorageAndStoreStatus(byte bpp__NewStatus__pf);// 0x3e9f96c
	void SendInviteComplete(int bpp__LocalUserNum__pf, out const UniqueNetIdRepl bpp__FriendId__pf__const, FString bpp__ListName__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9f6bc
	void SellItem(PlayerProfilePurchasedItem* bpp__Item__pf);// 0x3e9f63c
	void Sell();// 0x3e9f620
	void SelectSlotInSelectedItem(int bpp__SlotIndex__pf);// 0x3e9f5a0
	void SelectItemAndIAPToEquip(PlayerProfileItem* bpp__Item__pf, PlayerProfileIAP* bpp__IAP__pf);// 0x3e9f4dc
	void SaveOfflinePlayerProfile();// 0x3e9f4c0
	void RequestHasNewLeaderboards();// 0x3e9f4a4
	void RequestBlackMarketDelivery();// 0x3e9f488
	void RemoveItemComplete(PlayerProfilePurchasedItem* bpp__Item__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9f368
	void RejectFriendInviteComplete(int bpp__LocalUserNum__pf, out const UniqueNetIdRepl bpp__FriendId__pf__const, FString bpp__ListName__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9f0b8
	void RejectFriendInvite(out const UniqueNetIdRepl bpp__FriendId__pf__const);// 0x3e9ef50
	void ReceiveStorageItem();// 0x3e9ef34
	void ReceiveSquadsComplete(out const PlayerProfilePurchasedItem*[] bpp__Items__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9ede8
	void ReceiveProfileInfoForSocialIdentity(FName bpp__SubsystemName__pf);// 0x3e9ed68
	void ReceiveMatchResult();// 0x3e9ed4c
	void ReceiveItemsIAPs();// 0x3e9ed30
	void ReceiveFriendsList();// 0x3e9ed14
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e9ec94
	void ReceivedRemoteNotification();// 0x3e9ec78
	void ReceivedInboxMessage(out const OnlineInboxMessage bpp__Message__pf__const);// 0x3e9ebac
	void ReceiveBlackMarketDeliveryInfo();// 0x3e9eb90
	void ReceiveAndSpawnSquads();// 0x3e9eb74
	void QueryLeaderboardsComplete(out const OnlineLeaderboard*[] bpp__Leaderboards__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9ea28
	void QueryLeaderboardComplete(OnlineLeaderboard* bpp__Leaderboard__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9e908
	void QueryFriendsListComplete(int bpp__LocalUserNum__pf, FString bpp__ListName__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9e788
	void PurchaseItemIAP(PlayerProfileIAP* bpp__IAP__pf, PlayerProfilePurchasedItem* bpp__AttachParent__pf, int bpp__AttachSlotIndex__pf, out const OnlineServiceRequestPtr bpp__OutRequest__pf__const);// 0x3e9e600
	void PurchaseItemComplete(PlayerProfileStoreItem* bpp__StoreItem__pf, PlayerProfilePurchasedItem* bpp__PurchasedItem__pf, OnlineServiceRequestPtr bpp__Request__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9e3e8
	void PurchaseItem(PlayerProfileStoreItem* bpp__StoreItem__pf, PlayerProfilePurchasedItem* bpp__AttachParent__pf, int bpp__AttachSlotIndex__pf, out OnlineServiceRequestPtr bpp__OutRequest__pf);// 0x3e9e260
	void ProcessRemoteNotification(out FString bpp__NotificationPayload__pf);// 0x3e9e1b8
	void ProcessPointerTap();// 0x3e9e19c
	void ProcessInboxMessage(out FString bpp__Id__pf, FName bpp__Type__pf, out JsonObjectBlueprintWrapper bpp__Message__pf);// 0x3e9dfd0
	void ProcessInAppPurchaseFail(PlayerProfileIAP* bpp__IAP__pf, byte bpp__InAppPurchaseStatus__pf);// 0x3e9df0c
	void OnLogoutComplete(FName bpp__SubsystemName__pf, int bpp__LocalUserIndex__pf, bool bpp__bWasSuccessful__pf);// 0x3e9ddf0
	void NotifyStateChangedImmediately();// 0x3e9ddd4
	void NotifyPendingStateChanged();// 0x3e9ddb8
	void MatchResultProcessed();// 0x3e9dd9c
	void MakeInAppPurchaseItemComplete(PlayerProfileIAP* bpp__IAP__pf, out const PlayerProfileDelta*[] bpp__ProfileDeltas__pf__const, OnlineServiceRequestPtr bpp__Request__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9db58
	void MakeInAppPurchaseCompleted(PlayerProfileIAP* bpp__IAP__pf, out const PlayerProfileDelta*[] bpp__ProfileDeltas__pf__const, OnlineServiceRequestPtr bpp__Request__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9d914
	void MakeInAppPurchase(PlayerProfileIAP* bpp__IAP__pf, out OnlineServiceRequestPtr bpp__OutRequest__pf);// 0x3e9d818
	void Logout(FName bpp__SubsystemName__pf);// 0x3e9d798
	void LoadProfileForSocialIdentityComplete(FName bpp__SubsystemName__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9d670
	void LoadProfileForSocialIdentity(FName bpp__SubsystemName__pf);// 0x3e9d5f0
	void LinkSocialIdentityComplete(FName bpp__SubsystemName__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9d4c8
	void LinkSocialIdentity(FName bpp__SubsystemName__pf);// 0x3e9d448
	void LeaderboardsShown(out const OnlineLeaderboard*[] bpp__Leaderboards__pf__const);// 0x3e9d3a0
	void ItemSold(PlayerProfilePurchasedItem* bpp__Item__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9d280
	void ItemsIAPsReceiveComplete(out const PlayerProfileIAP*[] bpp__IAPs__pf__const, OnlineServiceRequestPtr bpp__Request__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9d084
	void ItemEquipComplete(OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, PlayerProfilePurchasedItem* bpp__EqippedItem__pf);// 0x3e9cf14
	bool IsPointerInputEnabled();// 0x3e9cee4
	void IsLastBlackMarketDeliveryProcessed(out bool bpp__bResult__pf);// 0x3e9ce54
	void IsAncestorOrEqualItem(PlayerProfileItem* bpp__Ancestor__pf, PlayerProfileItem* bpp__Item__pf, out bool bpp__bIsAncestor__pf);// 0x3e9cd3c
	void InviteFriend(out const UniqueNetIdRepl bpp__FriendId__pf__const);// 0x3e9cbd4
	void InvalidateProfileCache();// 0x3e9cbb8
	void InpTchEvt_Released(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x3e9caf4
	void InpTchEvt_Pressed(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x3e9ca30
	void InpTchEvt_Moved(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x3e9c96c
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x3e9c7ac
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x3e9c5ec
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x3e9c42c
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x3e9c26c
	void InitPerfomanceStats();// 0x3e9c250
	void InitFriends();// 0x3e9c234
	void InitCurrencies();// 0x3e9c218
	void InitBlackMarket();// 0x3e9c1fc
	void InitAppDelegates();// 0x3e9c1e0
	enum GetSocialIdentityLinkStatus(out const FName bpp__SubsystemName__pf__const);// 0x3e9c144
	void GetProfileInfoForSocialIdentityComplete(FName bpp__SubsystemName__pf, out const UniqueNetIdRepl bpp__PlayerId__pf__const, FString bpp__Nickname__pf__const, OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9be44
	void GetProfileDeltasFirstNewItem(out PlayerProfileDelta*[] bpp__ProfileDeltas__pf, out PlayerProfilePurchasedItem* bpp__Output__pf);// 0x3e9bd44
	void GetPlayerAttributesCompleted(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9bc24
	void GetMatchResultComplete(PlayerProfileMatchResult* bpp__MatchResult__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9bb04
	void GetCurrencyAmountComplete(PlayerProfileCurrencyAmount bpp__Result__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9b9cc
	void GetCurrenciesComplete(out const PlayerProfileCurrency*[] bpp__Currencies__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9b880
	void GetAvailableSquadSpaceToAddOrReplace(out float bpp__AvailableSquadSpace__pf);// 0x3e9b7f0
	void FriendsListChanged(int bpp__LocalUserNum__pf, FString bpp__ListName__pf__const);// 0x3e9b714
	void FindMatch();// 0x3e9b6f8
	void EquipItem(PlayerProfilePurchasedItem* bpp__PurchasedItem__pf, PlayerProfilePurchasedItem* bpp__AttachParentItem__pf, int bpp__AttachSlotIndex__pf, out OnlineServiceRequestPtr bpp__OutRequest__pf);// 0x3e9b570
	void Equip(out OnlineServiceRequestPtr bpp__OutRequest__pf);// 0x3e9b4b8
	void EnablePointerInput();// 0x3e9b49c
	void DisablePointerInput();// 0x3e9b480
	void DeleteFriendComplete(int bpp__LocalUserNum__pf, out const UniqueNetIdRepl bpp__FriendId__pf__const, FString bpp__ListName__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9b1d0
	void DeleteFriend(out const UniqueNetIdRepl bpp__FriendId__pf__const);// 0x3e9b068
	void DeferredSetSlotFilter(PlayerProfileSlotCompatibility bpp__NewFilter__pf);// 0x3e9afe0
	void DeferredResetSlotFilter();// 0x3e9afc4
	void DeferredNotifyStateChanged();// 0x3e9afa8
	void DeferredAllowCheckLeaderboardsRewards();// 0x3e9af8c
	void ContinueBlackMarketDeliveryRequest();// 0x3e9af70
	void CleanupRemoteNotifications();// 0x3e9af54
	void CleanupInbox();// 0x3e9af38
	void CleanupFriends();// 0x3e9af1c
	void CheckVersionCompleted(enum bpp__Result__pf);// 0x3e9ae9c
	void CheckVersion();// 0x3e9ae80
	void CheckLeaderboardReward(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf);// 0x3e9ae00
	void CheckHasNewLeaderboardsAndNotify();// 0x3e9ade4
	void CheckExpectedBlackMarketDelivery();// 0x3e9adc8
	void CheckClientVersionComplete(enum bpp__Result__pf);// 0x3e9ad48
	void CheckBlackMarketRenewTime();// 0x3e9ad2c
	void BlackMarketDeliveryRequestComplete(out const PlayerProfileCurrencyAmount[] bpp__NextUpdatePrice__pf__const, int bpp__Version__pf, int bpp__NextAutoUpdateTime__pf, out const PlayerProfileStoreItem*[] bpp__NewStoreItems__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9aae4
	void BlackMarketDeliveryProcessed();// 0x3e9aac8
	void BlackMarketDeliveryInfoReceived(out const PlayerProfileCurrencyAmount[] bpp__NextUpdatePrice__pf__const, int bpp__Version__pf, int bpp__NextAutoUpdateTime__pf, out const PlayerProfileStoreItem*[] bpp__NewStoreItems__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9a880
	void Back();// 0x3e9a864
	void AttachItemComplete(PlayerProfilePurchasedItem* bpp__Item__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9a744
	void ApplicationWillEnterBackground();// 0x3e9a728
	void ApplicationHasEnteredForeground();// 0x3e9a70c
	void AcceptLeaderboardRewardsComplete(out const UniqueNetIdRepl bpp__LeaderboardId__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9a500
	void AcceptLeaderboardReward(OnlineLeaderboard* bpp__Leaderboard__pf);// 0x3e9a480
	void AcceptFriendInviteComplete(int bpp__LocalUserNum__pf, out const UniqueNetIdRepl bpp__FriendId__pf__const, FString bpp__ListName__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e9a1d0
	void AcceptFriendInvite(out const UniqueNetIdRepl bpp__FriendId__pf__const);// 0x3e9a068
	void BlackMarketDeliveryInfoChanged__DelegateSignature(byte bpp__ReceivingStatus__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void PlatformDelegate__DelegateSignature();// 0x4528238

--------------------------------
Class: BattleMechsPlayerController_C.PlayerController.Controller.Actor.Object
	BattleMechsGameInstance_C* K2Node_DynamicCast_AsBattle_Mechs_Game_Instance;//[Offset: 0x548, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	void UserConstructionScript();// 0x3e42d04
	void ReceiveBeginPlay();// 0x3e42ce8

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x1ec, Size: 0xc]
	delegate OnPointerPressed;//[Offset: 0x1f8, Size: 0xc]
	int VirtualUserIndex;//[Offset: 0x20c, Size: 0x4]
	int MousePointerIndex;//[Offset: 0x210, Size: 0x4]
	byte TraceChannel;//[Offset: 0x214, Size: 0x1]
	float InteractionDistance;//[Offset: 0x218, Size: 0x4]
	enum InteractionSource;//[Offset: 0x21c, Size: 0x1]
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 0x1]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21e, Size: 0x1]
	LinearColor DebugColor;//[Offset: 0x220, Size: 0x10]
	HitResult CustomHitResult;//[Offset: 0xbc8, Size: 0x88]
	bool bHitTestIgnoreRelatedComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 0x1]
	bool bHitTestIgnoreInvisibleWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc51, Size: 0x1]
	enum SimulateMouseMovementMode;//[Offset: 0xc52, Size: 0x1]
	bool bTraceMoveNotStartedOnWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc53, Size: 0x1]
	void SetCustomHitResult(out const HitResult HitResult);// 0x5209aa0
	bool SendKeyChar(FString Characters, bool bRepeat);// 0x520995c
	void ScrollWheel(float ScrollDelta);// 0x52098dc
	bool ReleasePointerKey(const Key Key);// 0x520971c
	bool ReleaseKey(Key Key);// 0x5209554
	bool PressPointerKeyAtLocation(const Key Key, const Vector2D PointerLocation);// 0x5209354
	bool PressPointerKey(const Key Key);// 0x5209194
	bool PressKey(Key Key, bool bRepeat);// 0x5208f80
	bool PressAndReleaseKey(Key Key);// 0x5208db8
	bool MovePointer(const int PointerIndex, const Vector2D PointerLocation);// 0x5208cf4
	bool MoveMouse(const Vector2D PointerLocation);// 0x5208c70
	bool IsPointerOverInteractableWidget(const int PointerIndex);// 0x5208be8
	bool IsPointerOverHitTestVisibleWidget(const int PointerIndex);// 0x5208b60
	bool IsPointerOverFocusableWidget(const int PointerIndex);// 0x5208ad8
	bool IsOverInteractableWidget();// 0x5208aac
	bool IsOverHitTestVisibleWidget();// 0x5208a80
	bool IsOverFocusableWidget();// 0x5208a54
	Vector2D GetPointerLocalHitLocation(const int PointerIndex);// 0x52089c8
	HitResult GetPointerLastHitResult(const int PointerIndex);// 0x52088fc
	HitResult GetLastHitResult();// 0x5208880
	WidgetComponent* GetHoveredWidgetComponentForPointer(const int PointerIndex);// 0x52087fc
	WidgetComponent* GetHoveredWidgetComponent();// 0x52087d4
	Vector2D Get2DHitLocation();// 0x52087a4
	bool EndTouch(const int PointerIndex);// 0x5208724
	bool BeginTouch(const int PointerIndex, const Vector2D PointerLocation);// 0x5208668

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x485, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x486, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x488, Size: 0x4]
	float RedrawTime;//[Offset: 0x4b4, Size: 0x4]
	float Scale;//[Offset: 0x4b8, Size: 0x4]
	Vector2D ManualSize;//[Offset: 0x4c8, Size: 0x8]
	float HorizontalRadius;//[Offset: 0x4d8, Size: 0x4]
	float VerticalRadius;//[Offset: 0x4ec, Size: 0x4]
	enum GeometryMode;//[Offset: 0x500, Size: 0x1]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1]
	bool bManuallyRedrawImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 0x1]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x507, Size: 0x1]
	Vector Pivot;//[Offset: 0x508, Size: 0xc]
	Vector NegativeCollisionExtension;//[Offset: 0x514, Size: 0xc]
	Vector PositiveCollisionExtension;//[Offset: 0x520, Size: 0xc]
	delegate MetricsChangedEvent;//[Offset: 0x52c, Size: 0xc]
	LocalPlayer* OwnerPlayer;//[Offset: 0x538, Size: 0x4]
	LinearColor BackgroundColor;//[Offset: 0x53c, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x54c, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x55c, Size: 0x4]
	enum BlendMode;//[Offset: 0x560, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 0x1]
	bool bExecuteBecameVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x568, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x57c, Size: 0x4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x580, Size: 0x4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x584, Size: 0x4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x588, Size: 0x4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x58c, Size: 0x4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x590, Size: 0x4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x594, Size: 0x4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x598, Size: 0x4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x59c, Size: 0x4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	bool bShouldRedrawOnHovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 0x1]
	bool bShouldRedrawOnPointerReleased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a2, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x5a8, Size: 0x8]
	int LayerZOrder;//[Offset: 0x5b0, Size: 0x4]
	void UpdateCollision();// 0x52075bc
	bool ShouldRedrawOnPointerReleased();// 0x52075a0
	bool ShouldRedrawOnHovered();// 0x5207584
	void SetWidgetClass(class UserWidget InWidgetClass);// 0x520750c
	void SetWidget(UserWidget* Widget);// 0x3e48cb0
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x5207490
	void SetShouldRedrawOnPointerReleased(bool bValue);// 0x5207414
	void SetShouldRedrawOnHovered(bool bValue);// 0x5207398
	void SetScale(float InScale);// 0x5207318
	void SetPivot(out const Vector InPivot);// 0x5207294
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x520721c
	void SetOpacityFromTexture(const float NewOpacityFromTexture);// 0x52071a4
	void SetManualSize(Vector2D Size);// 0x5207134
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x52070b4
	void SetDrawAtDesiredSize(bool InbDrawAtDesiredSize);// 0x5207038
	void SetCurvatureRadiuses(float NewHorizRadius, float NewVertRadius);// 0x5206f7c
	void SetCollisionExtension(out const Vector NegativeExtension, out const Vector PositiveExtension);// 0x5206e84
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x5206e08
	void RequestRedraw();// 0x3e46e78
	class UserWidget GetWidgetClass();// 0x5206dec
	float GetVerticalRadius();// 0x5206dd0
	float GetVerticalArcAngle();// 0x5206db4
	float GetVerticalApothem();// 0x5206d98
	UserWidget* GetUserWidgetObject();// 0x5206d70
	LinearColor GetTintColorAndOpacity();// 0x5206d4c
	float GetScale();// 0x5206d30
	TextureRenderTarget2D* GetRenderTarget();// 0x5206d08
	Vector GetPositiveCollisionExtension();// 0x5206ce0
	Vector GetPivot();// 0x5206cb4
	LocalPlayer* GetOwnerPlayer();// 0x5206c8c
	Vector GetNegativeCollisionExtension();// 0x5206c60
	MaterialInstanceDynamic* GetMaterialInstance();// 0x5206c38
	Vector2D GetManualSize();// 0x5206c14
	float GetHorizontalRadius();// 0x5206bf8
	float GetHorizontalArcAngle();// 0x5206bdc
	float GetHorizontalApothem();// 0x5206bc0
	enum GetGeometryMode();// 0x5206ba4
	Vector2D GetDrawSize();// 0x5206b80
	bool GetDrawAtDesiredSize();// 0x5206b64
	Vector GetComponentSize();// 0x5206b38
	void BecameVisible();// 0x3e48038

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0x8c, Size: 0x4]
	int SizeY;//[Offset: 0x90, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0x94, Size: 0x10]
	byte AddressX;//[Offset: 0xa4, Size: 0x1]
	byte AddressY;//[Offset: 0xa5, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa6, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa6, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa6, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa6, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xa7, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: GarageCamera_C.CameraActor.Actor.Object
	delegate OnViewPointChanged;//[Offset: 0x790, Size: 0xc]
	float TargetViewYawInputScale;//[Offset: 0x79c, Size: 0x4]
	float TargetViewPitchInputScale;//[Offset: 0x7a0, Size: 0x4]
	float CurrentYawInputScale;//[Offset: 0x7a4, Size: 0x4]
	float CurrentPitchInputScale;//[Offset: 0x7a8, Size: 0x4]
	float PendingYawInput;//[Offset: 0x7ac, Size: 0x4]
	float PendingPitchInput;//[Offset: 0x7b0, Size: 0x4]
	float YawInput;//[Offset: 0x7b4, Size: 0x4]
	float PitchInput;//[Offset: 0x7b8, Size: 0x4]
	float InputIncreaseRate;//[Offset: 0x7bc, Size: 0x4]
	float CurrentInputDecreaseRate;//[Offset: 0x7c0, Size: 0x4]
	float ActiveInputDecreaseRate;//[Offset: 0x7c4, Size: 0x4]
	float InertialInputDecreaseRate;//[Offset: 0x7c8, Size: 0x4]
	float YawMin;//[Offset: 0x7cc, Size: 0x4]
	float YawMax;//[Offset: 0x7d0, Size: 0x4]
	float PitchMin;//[Offset: 0x7d4, Size: 0x4]
	float PitchMax;//[Offset: 0x7d8, Size: 0x4]
	float LastTranslationDeltaLength;//[Offset: 0x7dc, Size: 0x4]
	float LastRotationDeltaLength;//[Offset: 0x7e0, Size: 0x4]
	float RotationInterpSpeed;//[Offset: 0x7e4, Size: 0x4]
	float RotationSpeedMax;//[Offset: 0x7e8, Size: 0x4]
	float MaxInputAngle;//[Offset: 0x7ec, Size: 0x4]
	Vector TmpVector;//[Offset: 0x7f0, Size: 0xc]
	GarageController_C* GarageController;//[Offset: 0x7fc, Size: 0x4]
	float MouseAxisXScale;//[Offset: 0x800, Size: 0x4]
	float MouseAxisYScale;//[Offset: 0x804, Size: 0x4]
	float TouchMoveDeltaScaleX;//[Offset: 0x808, Size: 0x4]
	float TouchMoveDeltaScaleY;//[Offset: 0x80c, Size: 0x4]
	Vector TouchLocation;//[Offset: 0x810, Size: 0xc]
	bool bMousePointerPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 0x1]
	bool bTouchPointerPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81d, Size: 0x1]
	Transform TargetCameraTransform;//[Offset: 0x820, Size: 0x30]
	SceneComponent* ViewTargetPivotComponent;//[Offset: 0x850, Size: 0x4]
	Vector ViewTargetLocalPivot;//[Offset: 0x854, Size: 0xc]
	Vector CameraTargetRelativePosition;//[Offset: 0x860, Size: 0xc]
	Rotator CameraTargetRotation;//[Offset: 0x86c, Size: 0xc]
	Vector4 ViewportRegionMinMax;//[Offset: 0x880, Size: 0x10]
	Vector4 DefaultViewportRegionMinMax;//[Offset: 0x890, Size: 0x10]
	Vector4 DefaultEquippingViewportRegionMinMax;//[Offset: 0x8a0, Size: 0x10]
	Vector2D ViewTargetBaseSize;//[Offset: 0x8b0, Size: 0x8]
	Vector2D ViewTargetSize;//[Offset: 0x8b8, Size: 0x8]
	Vector BaseViewOffset;//[Offset: 0x8c0, Size: 0xc]
	Vector ViewOffset;//[Offset: 0x8cc, Size: 0xc]
	float LastRotationPivotX;//[Offset: 0x8d8, Size: 0x4]
	float MaxPivotSpeed;//[Offset: 0x8dc, Size: 0x4]
	bool bNeedsUpdateRelativePositionAndRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 0x1]
	bool bShouldInterpolateToSquadView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e1, Size: 0x1]
	float FovMultiplier;//[Offset: 0x8e4, Size: 0x4]
	byte K2Node_InputTouchEvent_FingerIndex1;//[Offset: 0x8e8, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location1;//[Offset: 0x8ec, Size: 0xc]
	byte K2Node_InputTouchEvent_FingerIndex;//[Offset: 0x8f8, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location;//[Offset: 0x8fc, Size: 0xc]
	byte Temp_byte_Variable;//[Offset: 0x908, Size: 0x1]
	Vector Temp_struct_Variable;//[Offset: 0x90c, Size: 0xc]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x918, Size: 0x4]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x91c, Size: 0x4]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x920, Size: 0x1]
	byte K2Node_InputTouchEvent_FingerIndex2;//[Offset: 0x921, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location2;//[Offset: 0x924, Size: 0xc]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x930, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x934, Size: 0x1]
	Key Temp_struct_Variable1;//[Offset: 0x938, Size: 0x10]
	Key K2Node_InputKeyEvent_Key;//[Offset: 0x948, Size: 0x10]
	Key K2Node_InputKeyEvent_Key1;//[Offset: 0x958, Size: 0x10]
	float CallFunc_BreakVector_X;//[Offset: 0x968, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x96c, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x970, Size: 0x4]
	float CallFunc_BreakVector_X1;//[Offset: 0x974, Size: 0x4]
	float CallFunc_BreakVector_Y1;//[Offset: 0x978, Size: 0x4]
	float CallFunc_BreakVector_Z1;//[Offset: 0x97c, Size: 0x4]
	float K2Node_InputAxisKeyEvent_AxisValue1;//[Offset: 0x980, Size: 0x4]
	float K2Node_InputAxisKeyEvent_AxisValue;//[Offset: 0x984, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x988, Size: 0x10]
	void OnViewPointChanged__DelegateSignature(GarageCamera_C* bpp__Camera__pf);// 0x4528238
	void OnStateChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void UserConstructionScript();// 0x3e723b0
	void UpdateTransform(float bpp__DeltaTime__pf);// 0x3e98700
	void UpdateInput(float bpp__DeltaTime__pf);// 0x3e98680
	void UpdateCameraTargetRelativePosition();// 0x37cd4c4
	void SetViewTargetRotationDynamics();// 0x3e98664
	void SetViewTarget(PlayerProfileItem* bpp__Item__pf, int bpp__SlotIndex__pf);// 0x3e985a0
	void SetViewportRegionMinMax(float bpp__MinX__pf, float bpp__MaxX__pf, float bpp__MinY__pf, float bpp__MaxY__pf);// 0x3e98450
	void SetupSquadView();// 0x3e72394
	void SetInputRotationDynamics();// 0x37cd4a8
	void ResetRotationInput();// 0x3e723cc
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e983d0
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e5a3e0
	void ReceiveBeginPlay();// 0x3e983b4
	void PointerReleased();// 0x3e5a3c4
	void PointerPressed();// 0x3e5a38c
	void InpTchEvt_Released(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x3e982f0
	void InpTchEvt_Pressed(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x3e9822c
	void InpTchEvt_Moved(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x3e98168
	void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent(float bpp__AxisValue__pf);// 0x3e980e8
	void InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent(float bpp__AxisValue__pf);// 0x3e98068
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x3e97ea8
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x3e97ce8
	void GarageControllerStateChanged(GarageController_C* bpp__GarageController__pf);// 0x3e97c68
	void EvaluateDynamics(Vector bpp__CurrPos__pf, Vector bpp__VecToTarget__pf, float bpp__ThresholdSquared__pf, float bpp__MaxSpeed__pf, float bpp__DeltaTime__pf, float bpp__LastDeltaLength__pf, float bpp__InterpSpeed__pf, out Vector bpp__ResultPos__pf, out bool bpp__bChanged__pf, out float bpp__ResultDeltaLength__pf);// 0x3e97934
	void CacheViewParams();// 0x3e95dd8
	void AdjustView(Vector2D bpp__AdjustedViewTargetSize__pf, Vector bpp__AdjustedViewOffset__pf);// 0x3e9786c
	void AddYawInput(float bpp__Value__pf);// 0x37cc910
	void AddPitchInput(float bpp__Value__pf);// 0x3e977ec

--------------------------------
Class: PlayerProfileItem.OnlineServiceAttributesContainer.Object
	PlayerProfileItemType* ItemType;//[Offset: 0x60, Size: 0x4]
	Object* Object;//[Offset: 0x64, Size: 0x4]
	PlayerProfileItem* AttachParent;//[Offset: 0x68, Size: 0x4]
	PlayerProfileItemSlot[] Slots;//[Offset: 0x70, Size: 0xc]
	void SetObject(Object* NewObject);// 0x3511ba8
	bool HasItemOrTypeAttribute(FName Name);// 0x3511a2c
	PlayerProfileItemSlot GetSlot(int Index);// 0x35119ac
	Object* GetObject();// 0x3511990
	int GetNumSlots();// 0x3511974
	PlayerProfileItemType* GetItemType();// 0x3511958
	int GetItemOrTypeAttributeAsVectorArray(FName Name, out Vector[] OutValue);// 0x3511838
	bool GetItemOrTypeAttributeAsVector(FName Name, out Vector OutValue);// 0x351172c
	int GetItemOrTypeAttributeAsStringArray(FName Name, out FString[] OutValue);// 0x35115c8
	bool GetItemOrTypeAttributeAsString(FName Name, out FString OutValue);// 0x351136c
	int GetItemOrTypeAttributeAsIntegerArray(FName Name, out int[] OutValue);// 0x351124c
	bool GetItemOrTypeAttributeAsInteger(FName Name, out int OutValue);// 0x3511170
	int GetItemOrTypeAttributeAsFloatArray(FName Name, out float[] OutValue);// 0x3511050
	bool GetItemOrTypeAttributeAsFloat(FName Name, out float OutValue);// 0x3510f74
	FName GetId();// 0x350f7d0
	int GetAttachSlotIndex();// 0x3510f58
	PlayerProfileItem* GetAttachParent();// 0x3510f3c

--------------------------------
Class: OnlineServiceAttributesContainer.Object
	void SetAttributeAsVector(FName Name, out const Vector Value);// 0x35006dc
	void SetAttributeAsString(FName Name, FString Value);// 0x3500524
	void SetAttributeAsInteger(FName Name, int Value);// 0x3500468
	void SetAttributeAsFloat(FName Name, float Value);// 0x35003a4
	void RemoveAttribute(FName Name);// 0x35002a4
	bool HasAttribute(FName Name);// 0x35001a0
	int GetAttributeAsVectorArray(FName Name, out Vector[] OutValues);// 0x35000a8
	bool GetAttributeAsVector(FName Name, out Vector OutValue);// 0x34fffcc
	int GetAttributeAsStringArray(FName Name, out FString[] OutValues);// 0x34ffe90
	bool GetAttributeAsString(FName Name, out FString OutValue);// 0x34ffcd4
	int GetAttributeAsIntegerArray(FName Name, out int[] OutValues);// 0x34ffbdc
	bool GetAttributeAsInteger(FName Name, out int OutValue);// 0x34ffa54
	int GetAttributeAsFloatArray(FName Name, out float[] OutValues);// 0x34ff95c
	bool GetAttributeAsFloat(FName Name, out float OutValue);// 0x34ff7dc
	OnlineServiceAttributesConstIterator CreateConstIterator();// 0x34ff700
	void ClearAttributes();// 0x34ff680
	void AddAttributeAsVector(FName Name, out const Vector Value);// 0x34ff548
	void AddAttributeAsString(FName Name, FString Value);// 0x34ff450
	void AddAttributeAsInteger(FName Name, int Value);// 0x34ff348
	void AddAttributeAsFloat(FName Name, float Value);// 0x34ff23c

--------------------------------
Class: PlayerProfileItemType.OnlineServiceAttributesContainer.Object
	PlayerProfileSlotCompatibility Compatibility;//[Offset: 0x78, Size: 0xc]
	bool HasSlotAttribute(int SlotIndex, FName Name);// 0x3510828
	PlayerProfileSlotType GetSlotType(int Index);// 0x3510764
	int GetSlotAttributeAsVectorArray(int SlotIndex, FName Name, out Vector[] OutValue);// 0x351061c
	bool GetSlotAttributeAsVector(int SlotIndex, FName Name, out Vector OutValue);// 0x35104f0
	int GetSlotAttributeAsStringArray(int SlotIndex, FName Name, out FString[] OutValue);// 0x3510364
	bool GetSlotAttributeAsString(int SlotIndex, FName Name, out FString OutValue);// 0x3510158
	int GetSlotAttributeAsIntegerArray(int SlotIndex, FName Name, out int[] OutValue);// 0x3510010
	bool GetSlotAttributeAsInteger(int SlotIndex, FName Name, out int OutValue);// 0x350fe38
	int GetSlotAttributeAsFloatArray(int SlotIndex, FName Name, out float[] OutValue);// 0x350fcf0
	bool GetSlotAttributeAsFloat(int SlotIndex, FName Name, out float OutValue);// 0x350fb20
	int GetNumSlots();// 0x350fb04
	SoftClassPath GetItemClassReference();// 0x350fa6c
	FName GetId();// 0x350f7d0

--------------------------------
Class: PlayerProfileSlotCompatibility
	int OrMask;//[Offset: 0x0, Size: 0x4]
	int AndMask;//[Offset: 0x4, Size: 0x4]
	int NotMask;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PlayerProfileSlotType
	PlayerProfileSlotCompatibility Compatibility;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: OnlineServiceAttributesConstIterator

--------------------------------
Class: PlayerProfileItemSlot
	PlayerProfileItem* AttachedItem;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PlayerProfileIAP.OnlineServiceAttributesContainer.Object
	PlayerProfileBundle*[] Bundles;//[Offset: 0x98, Size: 0xc]
	FText GetTitle();// 0x3512a48
	float GetRawPrice();// 0x3512a2c
	FString GetProductId();// 0x35129c4
	FText GetDisplayPrice();// 0x35129a8
	FText GetDescription();// 0x351298c
	FString GetCurrencyCode();// 0x3512924

--------------------------------
Class: PlayerProfileBundle.OnlineServiceAttributesContainer.Object
	PlayerProfileCurrencyAmount[] Currencies;//[Offset: 0x58, Size: 0xc]
	PlayerProfileItem*[] Items;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: PlayerProfileCurrencyAmount
	FName CurrencyId;//[Offset: 0x0, Size: 0x8]
	int Amount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GarageSquad_C.Actor.Object
	EquipmentControllerComponent* EquipmentController;//[Offset: 0x27c, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x280, Size: 0x4]
	PlayerProfileItem* SquadItem;//[Offset: 0x284, Size: 0x4]
	Vector4[] MemberSizes;//[Offset: 0x288, Size: 0xc]
	float SquadWidth;//[Offset: 0x294, Size: 0x4]
	float SquadHeight;//[Offset: 0x298, Size: 0x4]
	float NumFree;//[Offset: 0x29c, Size: 0x4]
	float Capacity;//[Offset: 0x2a0, Size: 0x4]
	float[] LastUnequippedMembersX;//[Offset: 0x2a4, Size: 0xc]
	int[] PendingMemberIndicesToUpdateMetrics;//[Offset: 0x2b0, Size: 0xc]
	bool IsUpdateMembersMetricsAndRearrangeSquadScheduled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bUpdatePositionsNotRequired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x2be, Size: 0x1]
	int K2Node_CustomEvent_SlotIndex;//[Offset: 0x2c0, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment;//[Offset: 0x2c4, Size: 0x4]
	Object* K2Node_CustomEvent_OldEquipment;//[Offset: 0x2c8, Size: 0x4]
	Actor* K2Node_DynamicCast_AsActor;//[Offset: 0x2cc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	float CallFunc_BreakVector_X;//[Offset: 0x2d4, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x2d8, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x2dc, Size: 0x4]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x2e0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x2e8, Size: 0x10]
	interface class FloatProperty* CallFunc_BindToEquipmentChangedEvent_self_CastInput;//[Offset: 0x2f8, Size: 0x8]
	interface class DoubleProperty* CallFunc_UnbindFromEquipmentChangedEvent_self_CastInput;//[Offset: 0x300, Size: 0x8]
	int K2Node_CustomEvent_MemberIndex;//[Offset: 0x308, Size: 0x4]
	int Temp_int_Array_Index_Variable;//[Offset: 0x30c, Size: 0x4]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility;//[Offset: 0x310, Size: 0xc]
	int CallFunc_Array_Get_Item;//[Offset: 0x31c, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x320, Size: 0x10]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x330, Size: 0x4]
	void UserConstructionScript();// 0x3eab180
	void UpdateSquadInfo();// 0x34d7bdc
	void UpdateMemberMetrics(int bpp__SlotIndex__pf);// 0x3eab100
	void ResetRemovedMembersInfo();// 0x3524d3c
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3eab080
	void ReceiveBeginPlay();// 0x3e5a38c
	void RearrangeMembers(bool bpp__bUpdatePositionsInSquad__pf);// 0x3eaaff8
	void ProcessPendingMembersToUpdateMetrics();// 0x3e82394
	void PendingUpdateMemberMetricsAndRearrangeSquad(int bpp__MemberIndex__pf);// 0x3eaaf78
	void EquipmentChanged(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf, Object* bpp__OldEquipment__pf);// 0x3eaae70
	void ComputeMemberMetrics(Actor* bpp__Actor__pf, float bpp__Padding__pf, out Vector4 bpp__Size__pf);// 0x3eaad30

--------------------------------
Class: EquipmentControllerComponent.ActorComponent.Object
	EquipmentSlot[] EquipmentSlots;//[Offset: 0xac, Size: 0xc]
	ActorComponentReference DefaultAttachParentReference;//[Offset: 0xc8, Size: 0x8]
	void ObjectInSlotDestructed(Object* DestructedObject, interface classNone DamageableInterface);// 0x3525aa8
	int GetSlotCount();// 0x3525a8c
	Object* GetEquipment(int SlotIndex);// 0x35259f4
	SceneComponent* GetAttachSocket(int SlotIndex, out FName SocketName);// 0x3525914
	Object* Equip(int SlotIndex, Object* Equipment);// 0x3525848
	void ActorInSlotDestroyed(Actor* DestroyedActor);// 0x35257d0

--------------------------------
Class: EquipmentSlot
	SceneComponent* AttachParent;//[Offset: 0x0, Size: 0x4]
	FName SocketName;//[Offset: 0x8, Size: 0x8]
	ActorComponentReference AttachParentReference;//[Offset: 0x10, Size: 0x8]
	Object* Equipment;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ActorComponentReference.SubObjectReference

--------------------------------
Class: SubObjectReference
	FName SubObjectPropertyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerProfilePurchasedItem.PlayerProfileItem.OnlineServiceAttributesContainer.Object

--------------------------------
Class: PlayerProfileMatchResult.OnlineServiceAttributesContainer.Object
	PlayerProfileDelta*[] Deltas;//[Offset: 0x5c, Size: 0xc]
	float GetScore();// 0x3512f78
	enum GetResult();// 0x3512f5c

--------------------------------
Class: PlayerProfileDelta.OnlineServiceAttributesContainer.Object
	PlayerProfileCurrencyAmount[] Currencies;//[Offset: 0x58, Size: 0xc]
	PlayerProfilePurchasedItem*[] NewItems;//[Offset: 0x64, Size: 0xc]
	PlayerProfilePurchasedItem*[] RemovedItems;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: PlayerProfileCurrency.OnlineServiceAttributesContainer.Object
	FName GetId();// 0x350f7d0
	FString GetDisplayName();// 0x350f704

--------------------------------
Class: PlayerProfileStoreItem.PlayerProfileItem.OnlineServiceAttributesContainer.Object
	PlayerProfileCurrencyAmount GetPriceCurrencyAmount(int Index);// 0x3512304
	int GetNumPriceCurrencies();// 0x35122e8

--------------------------------
Class: OnlineInboxMessage
	FString ID;//[Offset: 0x0, Size: 0xc]
	FName Type;//[Offset: 0x10, Size: 0x8]
	FString Message;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: JsonObjectBlueprintWrapper

--------------------------------
Class: BattleMechsGameInstance_C.PlatformGameInstance.GameInstance.Object
	PlayerProfilePurchasedItem* SquadItem;//[Offset: 0x11c, Size: 0x4]
	ClientPersistentState_C* PersistentState;//[Offset: 0x120, Size: 0x4]
	TimerHandle DeferredSavePersistentStateTimerHandle;//[Offset: 0x128, Size: 0x8]
	float MaxEffectsVolume;//[Offset: 0x130, Size: 0x4]
	float MaxMusicVolume;//[Offset: 0x134, Size: 0x4]
	float MaxVoiceVolume;//[Offset: 0x138, Size: 0x4]
	float SoundMixOverrideFadeInTime;//[Offset: 0x13c, Size: 0x4]
	FName Temp_name_Variable;//[Offset: 0x140, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x148, Size: 0x10]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	FName Temp_name_Variable1;//[Offset: 0x160, Size: 0x8]
	ClientPersistentState_C* K2Node_DynamicCast_AsClient_Persistent_State;//[Offset: 0x168, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	enum CallFunc_Map_Find_Value;//[Offset: 0x16d, Size: 0x1]
	ClientPersistentState_C* K2Node_Select_Default;//[Offset: 0x170, Size: 0x4]
	void ShutdownPersistentState();// 0x3e2d898
	void SetVoiceVolume(float bpp__Volume__pf);// 0x3e4205c
	void SetupAudio();// 0x3e32710
	void SetMusicVolume(float bpp__Volume__pf);// 0x3e41fdc
	void SetEffectsVolume(float bpp__Volume__pf);// 0x3e37478
	void SavePersistentState();// 0x3e327b8
	void ReceiveShutdown();// 0x3e2d988
	void ReceiveInit();// 0x3e3264c
	void InitWidgetsStyle();// 0x3e326bc
	void InitPersistentState();// 0x3e2d8d0
	void ImmediatelySaveIfScheduled();// 0x3e2d8ec
	void GetVoiceVolume(out float bpp__Volume__pf);// 0x3e41f4c
	void GetMusicVolume(out float bpp__Volume__pf);// 0x3e41ebc
	void GetEffectsVolume(out float bpp__Value__pf);// 0x3e41e2c
	void DeferredSavePersistentState();// 0x3e2d7b8

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x80, Size: 0xc]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x8c, Size: 0xc]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x98, Size: 0xc]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xa4, Size: 0xc]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xb0, Size: 0xc]
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0xbc, Size: 0xc]
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0xc8, Size: 0xc]
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0xd4, Size: 0xc]
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0xe0, Size: 0xc]
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0xec, Size: 0xc]
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0xf8, Size: 0xc]
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x104, Size: 0xc]
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: ClientPersistentState_C.SaveGame.Object
	FString LastUnhandledMatchID;//[Offset: 0x1c, Size: 0xc]
	FString SaveSlotName;//[Offset: 0x28, Size: 0xc]
	enum FacebookLinkStatus;//[Offset: 0x34, Size: 0x1]
	float InputYawScale;//[Offset: 0x38, Size: 0x4]
	float InputYawExponent;//[Offset: 0x3c, Size: 0x4]
	float InputYawInertia;//[Offset: 0x40, Size: 0x4]
	float InputPitchScale;//[Offset: 0x44, Size: 0x4]
	float InputPitchExponent;//[Offset: 0x48, Size: 0x4]
	float InputPitchInertia;//[Offset: 0x4c, Size: 0x4]
	float InputYawScaleMin;//[Offset: 0x50, Size: 0x4]
	float InputYawScaleMax;//[Offset: 0x54, Size: 0x4]
	float InputYawExponentMin;//[Offset: 0x58, Size: 0x4]
	float InputYawExponentMax;//[Offset: 0x5c, Size: 0x4]
	float InputYawInertiaMin;//[Offset: 0x60, Size: 0x4]
	float InputYawInertiaMax;//[Offset: 0x64, Size: 0x4]
	float InputPitchScaleMin;//[Offset: 0x68, Size: 0x4]
	float InputPitchScaleMax;//[Offset: 0x6c, Size: 0x4]
	bool AimAssistEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float EffectsVolume;//[Offset: 0x74, Size: 0x4]
	float MusicVolume;//[Offset: 0x78, Size: 0x4]
	float VoiceVolume;//[Offset: 0x7c, Size: 0x4]
	<FName,enum> SocialIdentityLinkStatusMap;//[Offset: 0x80, Size: 0x3c]
	FName[] LastShownLeaderboardsIds;//[Offset: 0xbc, Size: 0xc]
	float InputPitchExponentMin;//[Offset: 0xc8, Size: 0x4]
	float InputPitchExponentMax;//[Offset: 0xcc, Size: 0x4]
	float InputPitchInertiaMin;//[Offset: 0xd0, Size: 0x4]
	float InputPitchInertiaMax;//[Offset: 0xd4, Size: 0x4]
	int ProcessedBlackMarketDeliveryVersion;//[Offset: 0xd8, Size: 0x4]
	HudPreset[] PlayerHudPresets;//[Offset: 0xdc, Size: 0xc]
	HudPreset[] SpectatorHudPresets;//[Offset: 0xe8, Size: 0xc]
	int PlayerHudPresetIndex;//[Offset: 0xf4, Size: 0x4]
	int SpectatorHudPresetIndex;//[Offset: 0xf8, Size: 0x4]
	FString LastReadInboxMessageId;//[Offset: 0xfc, Size: 0xc]
	ControlLayoutAndOpacity ToggleAzimuthDistanceAimControlData;//[Offset: 0x108, Size: 0x10]
	AimDistanceControlPersistentData AimDistanceControlData;//[Offset: 0x118, Size: 0x14]
	StickyControlPersistentData FireAllControlData;//[Offset: 0x12c, Size: 0x14]
	StickyControlPersistentData FireLeftControlData;//[Offset: 0x140, Size: 0x14]
	StickyControlPersistentData FireRightControlData;//[Offset: 0x154, Size: 0x14]
	StickyControlPersistentData FireMidControlData;//[Offset: 0x168, Size: 0x14]
	StickyControlPersistentData FireSpecControlData;//[Offset: 0x17c, Size: 0x14]
	ControlLayoutAndOpacity ReloadControlData;//[Offset: 0x190, Size: 0x10]
	ControlLayoutAndOpacity FlyUpControlData;//[Offset: 0x1a0, Size: 0x10]
	ControlLayoutAndOpacity FlyDownControlData;//[Offset: 0x1b0, Size: 0x10]
	ControlLayoutAndOpacity JumpControlData;//[Offset: 0x1c0, Size: 0x10]
	ControlLayoutAndOpacity SprintControlData;//[Offset: 0x1d0, Size: 0x10]
	ControlLayoutAndOpacity FlightControlData;//[Offset: 0x1e0, Size: 0x10]
	ControlLayoutAndOpacity JoystickControlData;//[Offset: 0x1f0, Size: 0x10]
	ControlLayoutAndOpacity NextSpectatorTargetControlData;//[Offset: 0x200, Size: 0x10]
	ControlLayoutAndOpacity PrevSpectatorTargetControlData;//[Offset: 0x210, Size: 0x10]
	ControlLayoutAndOpacity SpectatorModeControlData;//[Offset: 0x220, Size: 0x10]
	ControlLayoutAndOpacity SpectatorLookModeControlData;//[Offset: 0x230, Size: 0x10]
	class Object* WidgetsStyle;//[Offset: 0x240, Size: 0x4]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: HudPreset
	float ControlsTransparency_2_BECBD97A954A167178ACF1872010FBB2;//[Offset: 0x0, Size: 0x4]
	float ButtonsTransparency_14_4613C6187F4FBB9399EF0A9DB90AEFF4;//[Offset: 0x4, Size: 0x4]
	bool bShouldShowMatchProgressWidgets_7_9F9660F17C4E7B5A487B1FA09E899528;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bShouldShowMarkers_16_BE1B2DE5D14A868C8543C5B4B3851E55;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bShouldShowSpectatingPlayerName_9_90E123306842D6568CFCDB993D9EFE04;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bShouldShowTeamMembersWidgets_17_9DE930154845F65709BB0EBE1B7681A5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]

--------------------------------
Class: ControlLayoutAndOpacity
	ControlLayoutAttributes Layout_3_63B0357E442DFEF34E6F2D85686EF43C;//[Offset: 0x0, Size: 0xc]
	float Opacity_6_FE75836A47E5913FF835188F3BE4E843;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ControlLayoutAttributes
	Vector2D Offset_2_8AC016A44E3D93E1978C8F9221E232EA;//[Offset: 0x0, Size: 0x8]
	float Scale_5_C6FC9536413C8BE5FBC117AE85742893;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AimDistanceControlPersistentData
	ControlLayoutAndOpacity LayoutAndOpacity_2_055C244D46983F8215C3E0B72ABB5A5C;//[Offset: 0x0, Size: 0x10]
	float DistanceIntervalAlpha_5_9FA5ADB341A0B814C943CDAD26F43643;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: StickyControlPersistentData
	ControlLayoutAndOpacity LayoutAndOpacity_2_055C244D46983F8215C3E0B72ABB5A5C;//[Offset: 0x0, Size: 0x10]
	float StickingTime_6_9FA5ADB341A0B814C943CDAD26F43643;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GarageHUD_C.WidgetsManagerHUD_C.HUD.Actor.Object
	GarageHUDWidgetComponent_C* PremiumStateWidget;//[Offset: 0x354, Size: 0x4]
	LayoutSpacerComponent* TopLeftLayoutSpacer;//[Offset: 0x358, Size: 0x4]
	WidgetComponent_Button_Rating_C* RatingButtonWidgetComponent;//[Offset: 0x35c, Size: 0x4]
	WidgetComponent_Button_Nickname_C* NicknameButtonWidgetComponent;//[Offset: 0x360, Size: 0x4]
	BoxLayoutComponent* NicknameButtonHorizontalLayout;//[Offset: 0x364, Size: 0x4]
	WidgetComponent_Button_C* SettingsButtonWidgetComponent;//[Offset: 0x368, Size: 0x4]
	WidgetComponent_Button_C* ShopButtonWidgetComponent;//[Offset: 0x36c, Size: 0x4]
	WidgetComponent_Button_C* MultiplayerBattleButtonWidgetComponent;//[Offset: 0x370, Size: 0x4]
	WidgetComponent_Button_C* SquadButtonWidgetComponent;//[Offset: 0x374, Size: 0x4]
	WidgetComponent_Button_C* FriendsButtonWidgetComponent;//[Offset: 0x378, Size: 0x4]
	LayoutSpacerComponent* TopRightLayoutSpacer;//[Offset: 0x37c, Size: 0x4]
	HangarPostProcessManagerComponent_C* HangarPostProcessManagerComponent;//[Offset: 0x380, Size: 0x4]
	SceneCaptureComponent2D* SceneCapture;//[Offset: 0x384, Size: 0x4]
	RootAnchorsLayoutComponent_C* RootWidgetLayout;//[Offset: 0x388, Size: 0x4]
	WidgetsManagerComponent_C* WidgetsManagerComponent;//[Offset: 0x38c, Size: 0x4]
	WidgetsAnimationComponent* WidgetsAnimation;//[Offset: 0x390, Size: 0x4]
	WidgetComponent_Button_Currency_C* CurrencyButtonWidgetComponent;//[Offset: 0x394, Size: 0x4]
	WidgetComponent_Button_C* HelpButtonWidgetComponent;//[Offset: 0x398, Size: 0x4]
	BoxLayoutComponent* TopRightHorizontalLayout;//[Offset: 0x39c, Size: 0x4]
	BoxLayoutComponent* TopLeftHorizontalLayout;//[Offset: 0x3a0, Size: 0x4]
	GarageHUDWidgetComponent_C* PlayMenuWidget;//[Offset: 0x3a4, Size: 0x4]
	BoxLayoutComponent* TopHorizontalLayout;//[Offset: 0x3a8, Size: 0x4]
	FullscreenFixedAnglesAnchorsLayoutComponent_C* CurvedAnchorsLayout;//[Offset: 0x3ac, Size: 0x4]
	GarageController_C* GarageController;//[Offset: 0x3b0, Size: 0x4]
	Actor* SelectedItemActor;//[Offset: 0x3b4, Size: 0x4]
	Vector SelectedItemActorLocalOrigin;//[Offset: 0x3b8, Size: 0xc]
	UserWidget* PerfStatsWidget;//[Offset: 0x3c4, Size: 0x4]
	FName DefaultTag;//[Offset: 0x3c8, Size: 0x8]
	FName SelectionDependentTag;//[Offset: 0x3d0, Size: 0x8]
	FName ItemsShopTag;//[Offset: 0x3d8, Size: 0x8]
	FName SelectedDemoUpgradeTag;//[Offset: 0x3e0, Size: 0x8]
	FName SelectedDemoWeaponTag;//[Offset: 0x3e8, Size: 0x8]
	FName SelectedDemoPawnTag;//[Offset: 0x3f0, Size: 0x8]
	FName SelectedSquadItemTag;//[Offset: 0x3f8, Size: 0x8]
	FName SelectedEquippedPawnTag;//[Offset: 0x400, Size: 0x8]
	FName SelectedEquippedWeaponTag;//[Offset: 0x408, Size: 0x8]
	FName SelectedEquippedUpgradeTag;//[Offset: 0x410, Size: 0x8]
	FName SelectedTierUpgradeTag;//[Offset: 0x418, Size: 0x8]
	FName HideBySquadTag;//[Offset: 0x420, Size: 0x8]
	FName HideByLeaderboardsTag;//[Offset: 0x428, Size: 0x8]
	FName HideByInAppsTag;//[Offset: 0x430, Size: 0x8]
	FName HideByHelpTag;//[Offset: 0x438, Size: 0x8]
	bool bSubscribedToMatchResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	enum LastFriendFailedOperation;//[Offset: 0x441, Size: 0x1]
	FString InboxMessageTextFieldName;//[Offset: 0x444, Size: 0xc]
	FString InboxMessageSenderNameFieldName;//[Offset: 0x450, Size: 0xc]
	FString InboxMessageSenderIdFieldName;//[Offset: 0x45c, Size: 0xc]
	FString InboxMessageSquadIdFieldName;//[Offset: 0x468, Size: 0xc]
	ControlsManagerComponent_C* ControlsManager;//[Offset: 0x474, Size: 0x4]
	FName HideByControlsCustomization;//[Offset: 0x478, Size: 0x8]
	bool K2Node_CustomEvent_bCustomizing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	ControlsManagerComponent_C* K2Node_CustomEvent_ControlsManager;//[Offset: 0x484, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x488, Size: 0x10]
	OnlineLeaderboard* K2Node_CustomEvent_Leaderboard;//[Offset: 0x498, Size: 0x4]
	WidgetActor_C* CallFunc_GetWidgetInstance_WidgetInstance;//[Offset: 0x49c, Size: 0x4]
	WidgetActor_C* CallFunc_GetWidgetInstance_WidgetInstance1;//[Offset: 0x4a0, Size: 0x4]
	WidgetActor_Squad_C* K2Node_DynamicCast_AsWidget_Actor_Squad;//[Offset: 0x4a4, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	bool CallFunc_OpenPriorityModalWidget_bSucceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1]
	bool CallFunc_OpenPriorityModalWidget_bSucceed1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 0x1]
	bool CallFunc_OpenPriorityModalWidget_bSucceed2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ab, Size: 0x1]
	bool CallFunc_OpenPriorityModalWidget_bSucceed3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	bool CallFunc_OpenPriorityModalWidget_bSucceed4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 0x1]
	bool CallFunc_OpenPriorityModalWidget_bSucceed5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ae, Size: 0x1]
	WidgetActor_C* CallFunc_FindWidgetInstance_WidgetInstance;//[Offset: 0x4b0, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x4b8, Size: 0x10]
	WidgetActor_C* CallFunc_GetWidgetInstance_WidgetInstance2;//[Offset: 0x4c8, Size: 0x4]
	WidgetActor_Shop_C* K2Node_DynamicCast_AsWidget_Actor_Shop;//[Offset: 0x4cc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x4d8, Size: 0x10]
	UniqueNetIdRepl K2Node_CustomEvent_SquadID;//[Offset: 0x4e8, Size: 0x18]
	FName[] K2Node_MakeArray_Array;//[Offset: 0x500, Size: 0xc]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x50c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller1;//[Offset: 0x514, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x519, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x520, Size: 0x10]
	FName[] K2Node_MakeArray_Array1;//[Offset: 0x530, Size: 0xc]
	FName[] K2Node_MakeArray_Array2;//[Offset: 0x53c, Size: 0xc]
	FName[] K2Node_MakeArray_Array3;//[Offset: 0x548, Size: 0xc]
	GarageController_C* K2Node_CustomEvent_GarageController7;//[Offset: 0x554, Size: 0x4]
	GarageController_C* K2Node_CustomEvent_GarageController6;//[Offset: 0x558, Size: 0x4]
	enum K2Node_CustomEvent_RequestCategory;//[Offset: 0x55c, Size: 0x1]
	int K2Node_CustomEvent_Priority;//[Offset: 0x560, Size: 0x4]
	bool K2Node_CustomEvent_bCloseAfterPurchase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	FName[] K2Node_MakeArray_Array4;//[Offset: 0x568, Size: 0xc]
	FName[] K2Node_MakeArray_Array5;//[Offset: 0x574, Size: 0xc]
	bool CallFunc_OpenPriorityModalWidget_bSucceed6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	FName[] K2Node_MakeArray_Array6;//[Offset: 0x584, Size: 0xc]
	FName[] K2Node_MakeArray_Array7;//[Offset: 0x590, Size: 0xc]
	FName[] K2Node_MakeArray_Array8;//[Offset: 0x59c, Size: 0xc]
	FName[] K2Node_MakeArray_Array9;//[Offset: 0x5a8, Size: 0xc]
	GarageController_C* K2Node_CustomEvent_GarageController5;//[Offset: 0x5b4, Size: 0x4]
	int CallFunc_GetItemOrTypeAttributeAsInteger_OutValue;//[Offset: 0x5b8, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0x5c0, Size: 0x10]
	GarageController_C* K2Node_CustomEvent_GarageController4;//[Offset: 0x5d0, Size: 0x4]
	bool CallFunc_IsLastBlackMarketDeliveryProcessed_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate5;//[Offset: 0x5d8, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate6;//[Offset: 0x5e8, Size: 0x10]
	enum K2Node_CustomEvent_Operation;//[Offset: 0x5f8, Size: 0x1]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request;//[Offset: 0x5fc, Size: 0x4]
	byte K2Node_CustomEvent_Status;//[Offset: 0x600, Size: 0x1]
	FString K2Node_CustomEvent_ErrorStr;//[Offset: 0x604, Size: 0xc]
	GarageController_C* K2Node_CustomEvent_GarageController3;//[Offset: 0x610, Size: 0x4]
	GarageController_C* K2Node_CustomEvent_GarageController2;//[Offset: 0x614, Size: 0x4]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	GarageController_C* K2Node_CustomEvent_GarageController1;//[Offset: 0x61c, Size: 0x4]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller2;//[Offset: 0x620, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate7;//[Offset: 0x628, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent8;//[Offset: 0x638, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent7;//[Offset: 0x63c, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent6;//[Offset: 0x640, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent5;//[Offset: 0x644, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent4;//[Offset: 0x648, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent3;//[Offset: 0x64c, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent2;//[Offset: 0x650, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent1;//[Offset: 0x654, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent;//[Offset: 0x658, Size: 0x4]
	WidgetsManagerComponent_C* K2Node_ComponentBoundEvent_WidgetsManager;//[Offset: 0x65c, Size: 0x4]
	bool CallFunc_HasOpenModalWidgets_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate8;//[Offset: 0x668, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate9;//[Offset: 0x678, Size: 0x10]
	byte K2Node_CustomEvent_ReceivingStatus;//[Offset: 0x688, Size: 0x1]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x68c, Size: 0x4]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility;//[Offset: 0x690, Size: 0xc]
	bool CallFunc_IsLastBlackMarketDeliveryProcessed_bResult1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility1;//[Offset: 0x6a0, Size: 0xc]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility2;//[Offset: 0x6ac, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate10;//[Offset: 0x6b8, Size: 0x10]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility3;//[Offset: 0x6c8, Size: 0xc]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility4;//[Offset: 0x6d4, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate11;//[Offset: 0x6e0, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate12;//[Offset: 0x6f0, Size: 0x10]
	void OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4528238
	void OnStateChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnOperationComplete__DelegateSignature(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnControlsCustomizingStateChanged__DelegateSignature(bool bpp__bCustomizing__pf, ControlsManagerComponent_C* bpp__ControlsManager__pf);// 0x4528238
	void WaitLoadingScreenFadeoutTimerFired();// 0x37cd4c4
	void WaitLoadingScreenFadeOut();// 0x3e95df4
	void UpdateNickname();// 0x3ea6d48
	void UnsubscribeFromMatchResult();// 0x3ea6d2c
	void UnbindFromGarageStateChanged(GarageController_C* bpp__GarageController__pf);// 0x3ea6cac
	void UnbindFromGarageOperationComplete(GarageController_C* bpp__GarageController__pf);// 0x3ea6c2c
	void SubscribeToMatchResult();// 0x3ea6c10
	void SquadButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6b90
	void ShowPerfStats();// 0x3ea6b74
	void ShopButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x37cd228
	void SetupWidgetsLayout();// 0x3ea6b58
	void SettingsButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6ad8
	void ResetControlsSettings();// 0x3ea6abc
	void ReceiveMatchResultComplete(GarageController_C* bpp__GarageController__pf);// 0x37ccbbc
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3ea6a3c
	void RatingButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea69bc
	void ProcessInboxMessage(FName bpp__Type__pf, out JsonObjectBlueprintWrapper bpp__Message__pf);// 0x3ea6860
	void Play();// 0x3ea6844
	void OpenSquad(UniqueNetIdRepl bpp__SquadID__pf);// 0x3ea65d8
	void OpenSettings();// 0x3ea65bc
	void OpenPlayMenu();// 0x3ea65a0
	void OpenNicknameEdit();// 0x3ea6584
	void OpenMatchResult();// 0x3ea6568
	void OpenLeaderbordReward(OnlineLeaderboard* bpp__Leaderboard__pf);// 0x3ea64e8
	void OpenLeaderboards();// 0x3ea64cc
	void OpenItem();// 0x3ea64b0
	void OpenHelp();// 0x3ea6494
	void OpenFriends();// 0x3ea6478
	void OpenForceUpdate();// 0x3ea645c
	void OpenFindMatch();// 0x3ea6440
	void OpenBlackMarketDelivery();// 0x3e57b04
	void OpenBlackMarket();// 0x3e57a0c
	void NicknameButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea63c0
	void MultiplayerButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6340
	void InitWidgets();// 0x3ea6324
	void InitBlackMarketDeliveryHandling();// 0x3e95dd8
	void HidePerfStats();// 0x3ea6308
	void HelpButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6288
	void GarageOperationComplete(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf__const, GarageController_C* bpp__GarageController__pf);// 0x3ea6070
	void GarageControllerStateChanged(GarageController_C* bpp__GarageController__pf);// 0x3ea5ff0
	void FriendsButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea5f70
	void FindSelectedSquadMember(out PlayerProfileItem* bpp__SquadMemberItem__pf);// 0x3ea5ee0
	void FindProfileItemPawnOrRoot(PlayerProfileItem* bpp__Item__pf, out PlayerProfileItem* bpp__RootItem__pf);// 0x3ea5e0c
	void EnqueueOpenInAppPurchase(enum bpp__RequestCategory__pf, int bpp__Priority__pf, bool bpp__bCloseAfterPurchase__pf);// 0x3ea5cfc
	void CurrencyButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x37cd1a8
	void ControlsCustomizingStateChanged(bool bpp__bCustomizing__pf, ControlsManagerComponent_C* bpp__ControlsManager__pf);// 0x3ea5c2c
	void CleanupMatchControls();// 0x3ea5c10
	void CleanupBlackMarketDeliveryHandling();// 0x3ea5bf4
	void BndEvt__WidgetsManagerComponent_K2Node_ComponentBoundEvent_0_ModalWidgetsStackChangedEvent__Delegate(WidgetsManagerComponent_C* bpp__WidgetsManager__pf);// 0x3ea5b74
	void BlackMarketDeliveryInfoChanged(byte bpp__ReceivingStatus__pf, GarageController_C* bpp__GarageController__pf);// 0x3ea5ab0
	void BindToGarageStateChanged(GarageController_C* bpp__GarageController__pf);// 0x3ea5a30
	void BindToGarageOperationComplete(GarageController_C* bpp__GarageController__pf);// 0x37ccd68
	void BeginControlsCustomization(out const FName[] bpp__FilterControlNames__pf__const, bool bpp__bInclusiveFilter__pf__const);// 0x3ea5938
	void BlackMarketDeliveryInfoChanged__DelegateSignature(byte bpp__ReceivingStatus__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238

--------------------------------
Class: WidgetsManagerHUD_C.HUD.Actor.Object
	CameraFollowingComponent_C* Root;//[Offset: 0x334, Size: 0x4]
	WidgetsManagerComponent_C* WidgetsManager;//[Offset: 0x338, Size: 0x4]
	ActorComponentReference WidgetsManagerComponentReference;//[Offset: 0x340, Size: 0x8]
	WidgetsManagerComponent_C* K2Node_DynamicCast_AsWidgets_Manager_Component;//[Offset: 0x348, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	void UserConstructionScript();// 0x37ccde8
	void ReceiveBeginPlay();// 0x37ccd4c

--------------------------------
Class: CameraFollowingComponent_C.SceneComponent.ActorComponent.Object
	PlayerCameraManager* CameraManager;//[Offset: 0x1ec, Size: 0x4]
	Vector LastCameraLocation;//[Offset: 0x1f0, Size: 0xc]
	float MaxCameraSpeed;//[Offset: 0x1fc, Size: 0x4]
	Vector LastCameraVelocity;//[Offset: 0x200, Size: 0xc]
	Vector LocalLinearAccelMultiplier;//[Offset: 0x20c, Size: 0xc]
	float LocalLinearAccelInterpSpeed;//[Offset: 0x218, Size: 0x4]
	float LocalLinearAccelMaxInterpSpeed;//[Offset: 0x21c, Size: 0x4]
	Vector CurrentRelativePosition;//[Offset: 0x220, Size: 0xc]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x22c, Size: 0x4]
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e56c5c
	void ReceiveBeginPlay();// 0x3e56c40
	void FollowCamera(float bpp__DeltaTime__pf);// 0x3e56bc0

--------------------------------
Class: WidgetsManagerComponent_C.ActorComponent.Object
	ModalWidgetsStackElement[] ModalWidgetsStack;//[Offset: 0xa8, Size: 0xc]
	ModalWidgetsQueueElement[] ModalWidgetsQueue;//[Offset: 0xb4, Size: 0xc]
	<class Object,WidgetActor_C*> InstancedWidgetActorsMap;//[Offset: 0xc0, Size: 0x3c]
	class Object[] WidgetActorClasses;//[Offset: 0xfc, Size: 0xc]
	FName HideByModalTag;//[Offset: 0x108, Size: 0x8]
	FName ShowIfNoModalTag;//[Offset: 0x110, Size: 0x8]
	FName NoTag;//[Offset: 0x118, Size: 0x8]
	FName[] EmptyTags;//[Offset: 0x120, Size: 0xc]
	WidgetsLayoutComponent* DefaultLayoutParent;//[Offset: 0x12c, Size: 0x4]
	delegate ModalWidgetsStackChangedEvent;//[Offset: 0x130, Size: 0xc]
	WidgetsLayoutComponent* CurvedLayoutParent;//[Offset: 0x13c, Size: 0x4]
	ActorComponentReference DefaultLayoutParentComponentReference;//[Offset: 0x140, Size: 0x8]
	bool bPreparingToOpenModalWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	FName[] ModalWidgetsAdditionalHideTags;//[Offset: 0x14c, Size: 0xc]
	ActorComponentReference CurvedLayoutParentComponentReference;//[Offset: 0x158, Size: 0x8]
	WidgetActor_C* K2Node_CustomEvent_WidgetActor2;//[Offset: 0x160, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x168, Size: 0x10]
	WidgetActor_C* K2Node_CustomEvent_WidgetActor1;//[Offset: 0x178, Size: 0x4]
	WidgetActor_C* K2Node_CustomEvent_WidgetActor;//[Offset: 0x17c, Size: 0x4]
	WidgetsLayoutComponent* K2Node_DynamicCast_AsWidgets_Layout_Component;//[Offset: 0x180, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	WidgetsLayoutComponent* K2Node_DynamicCast_AsWidgets_Layout_Component1;//[Offset: 0x188, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	void WidgetActorClosedEvent__DelegateSignature(WidgetActor_C* bpp__WidgetActor__pf);// 0x4528238
	void ModalWidgetsStackChangedEvent__DelegateSignature(WidgetsManagerComponent_C* bpp__WidgetsManager__pf);// 0x4528238
	void UpdateWidgetComponentsAndActorsVisibility(FName bpp__HideIncludeTag__pf, out FName[] bpp__HideExcludeTags__pf, FName bpp__ShowIncludeTag__pf, out FName[] bpp__ShowExcludeTags__pf);// 0x40469f0
	void UnbindFromModalWidgetClosedEvent(WidgetActor_C* bpp__WidgetActor__pf);// 0x3e4f34c
	void TryOpenNextEnqueuedModalWidget();// 0x3e32614
	void SetWidgetComponentsVisibility(FName bpp__IncludeTag__pf, out FName[] bpp__ExcludeTags__pf, bool bpp__bVisible__pf);// 0x40468ac
	void RemoveClosedModalWidgetWithIndex(int bpp__Index__pf);// 0x3e5129c
	void ReceiveBeginPlay();// 0x3e32828
	void ProcessModalWidgetClose(Object* bpp__Widget__pf);// 0x3e41334
	void OpenWidgetActors(FName bpp__IncludeTag__pf, out const FName[] bpp__ExcludeTags__pf__const);// 0x40467b8
	void OpenPriorityModalWidget(Object* bpp__WidgetInstance__pf, class Object bpp__WidgetClass__pf, UserWidget* bpp__UserWidget__pf, WidgetsLayoutComponent* bpp__LayoutParent__pf, FName bpp__AdditionalHideTag__pf, int bpp__Priority__pf, int bpp__TestPriority__pf, out bool bpp__bSucceed__pf);// 0x4046530
	void OpenModalWidget(Object* bpp__WidgetInstance__pf, class Object bpp__WidgetClass__pf, UserWidget* bpp__UserWidget__pf, WidgetsLayoutComponent* bpp__LayoutParent__pf, FName bpp__AdditionalHideTag__pf, int bpp__Priority__pf, out bool bpp__bSucceed__pf);// 0x40462f4
	void ModalWidgetClosed(WidgetActor_C* bpp__WidgetActor__pf);// 0x37190b4
	void InsertModalWidget(Object* bpp__Widget__pf, int bpp__Priority__pf, FName bpp__AdditionalHideTag__pf);// 0x40461e4
	void HideWidgetComponentsAndActorsBeforeOpenModalWidget(FName bpp__AdditionalHideTag__pf, bool bpp__WasOpenModalWidgets__pf);// 0x4046110
	void HasOpenModalWidgets(out bool bpp__bResult__pf);// 0x4046080
	void GetWidgetInstance(const class Object bpp__WidgetClass__pf__const, out WidgetActor_C* bpp__WidgetInstance__pf);// 0x4045fac
	void GetTopModalWidget(out Object* bpp__Widget__pf, out int bpp__Priority__pf);// 0x4045ec4
	void GetDefaultLayoutParent(out WidgetsLayoutComponent* bpp__LayoutParent__pf);// 0x4045e34
	void GetCurvedLayoutParent(out WidgetsLayoutComponent* bpp__LayoutParent__pf);// 0x3fbff40
	void FindWidgetInstance(const class Object bpp__WidgetClass__pf__const, out WidgetActor_C* bpp__WidgetInstance__pf);// 0x4045d60
	void EnqueueOpenModalWidget(Object* bpp__WidgetInstance__pf, class Object bpp__WidgetClass__pf, UserWidget* bpp__UserWidget__pf, WidgetsLayoutComponent* bpp__LayoutParent__pf, FName bpp__AdditionalHideTag__pf, int bpp__Priority__pf, int bpp__TestPriority__pf);// 0x4045b30
	void CloseWidgetActors(FName bpp__IncludeTag__pf, out const FName[] bpp__ExcludeTags__pf__const);// 0x4045a3c
	void CloseModalWidgetComponent(WidgetComponent_Advanced_C* bpp__WidgetComponent__pf);// 0x36fe074
	void BindToModalWidgetClosedEvent(WidgetActor_C* bpp__WidgetActor__pf);// 0x3e413b4

--------------------------------
Class: ModalWidgetsStackElement
	Object* Widget_2_FFDF71B6487E3A20F9C9CBA3DD26896B;//[Offset: 0x0, Size: 0x4]
	int Priority_5_C1725229454D6254E58F018881E8B8BF;//[Offset: 0x4, Size: 0x4]
	FName AdditionalHideTag_9_07354594405055F64BEC63890072540F;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ModalWidgetsQueueElement
	Object* WidgetInstance_18_297347DD43A17C5AD5F9F58857F3929D;//[Offset: 0x0, Size: 0x4]
	class Object* WidgetClass_16_488EB0B2410C52D5758A3FBA8F696092;//[Offset: 0x4, Size: 0x4]
	UserWidget* UserWidget_20_5AFB5C7541D3D8AB496EBEAB0DBC5B2C;//[Offset: 0x8, Size: 0x4]
	WidgetsLayoutComponent* LayoutParent_25_D6D6471E4EE36D7A73AD51A7E56AC8B1;//[Offset: 0xc, Size: 0x4]
	FName AdditionalHideTag_14_D553BF7C924533D9A6998FA73CF06873;//[Offset: 0x10, Size: 0x8]
	int Priority_11_9B424720BB49B743B7964AA094FB59F7;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WidgetsLayoutComponent.SceneComponent.ActorComponent.Object
	WidgetsLayoutComponent* LayoutRoot;//[Offset: 0x1f0, Size: 0x4]
	WidgetsLayoutComponent* LayoutParent;//[Offset: 0x1f4, Size: 0x4]
	int ChildrenCount;//[Offset: 0x20c, Size: 0x4]
	float RelativeScale;//[Offset: 0x210, Size: 0x4]
	float Scale;//[Offset: 0x214, Size: 0x4]
	Vector DesiredSize;//[Offset: 0x218, Size: 0xc]
	Vector DesiredLinearSize;//[Offset: 0x224, Size: 0xc]
	Vector LayoutSize;//[Offset: 0x230, Size: 0xc]
	Vector LinearSize;//[Offset: 0x23c, Size: 0xc]
	Vector ComponentSize;//[Offset: 0x248, Size: 0xc]
	Vector Pivot;//[Offset: 0x270, Size: 0xc]
	Transform LayoutTransform;//[Offset: 0x280, Size: 0x30]
	Transform PostLayoutTransform;//[Offset: 0x2b0, Size: 0x30]
	enum SelfVisibility;//[Offset: 0x2e4, Size: 0x1]
	float HorizontalRadius;//[Offset: 0x2ec, Size: 0x4]
	float VerticalRadius;//[Offset: 0x300, Size: 0x4]
	delegate PostLayoutEvent;//[Offset: 0x314, Size: 0xc]
	enum GeometryMode;//[Offset: 0x320, Size: 0x1]
	bool bInheritHorizontalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	bool bInheritVerticalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 0x1]
	bool bShouldUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 0x1]
	void SetSelfVisibility(enum NewSelfVisibility);// 0x379f4a8
	void SetScale(float InScale);// 0x379f428
	void SetRelativeScale(float InRelativeScale);// 0x379de88
	void SetRelativeLayoutPositionAndRotation(out const Vector Position, out const Quat Rotation);// 0x379f34c
	void SetPostLayoutTransform(out const Transform InTransform);// 0x379f240
	void SetPivot(out const Vector InPivot);// 0x379f1b0
	void SetCurvatureRadiuses(float NewHorizRadius, float NewVertRadius);// 0x379f0f4
	void RemoveChildAt(int Index);// 0x379f054
	void RemoveChild(const Object* Child);// 0x379efdc
	void RelayoutHierarchy();// 0x379efc8
	bool IsVisibleInLayout();// 0x379efac
	bool IsCollapsedInLayout();// 0x379ef90
	void InsertChild(out const interface classNone Child, int Index);// 0x379eeb4
	float GetVerticalRadius();// 0x379ee98
	enum GetSelfVisibility();// 0x379ee7c
	float GetScale();// 0x379ee60
	float GetRelativeScale();// 0x379ee44
	Transform GetPostLayoutTransform();// 0x379ee10
	Vector GetPivot();// 0x379edec
	Vector GetLinearSize();// 0x373cdb4
	Transform GetLayoutTransform();// 0x379edb8
	Vector GetLayoutSize();// 0x379ed94
	WidgetsLayoutComponent* GetLayoutRoot();// 0x379ed78
	WidgetsLayoutComponent* GetLayoutParentAndSlotIndex(out int OutSlotIndex);// 0x379ece4
	float GetHorizontalRadius();// 0x379ecc8
	enum GetGeometryMode();// 0x379ecac
	Vector GetDesiredSize();// 0x379ec88
	Vector GetDesiredLinearSize();// 0x379ec64
	Vector GetComponentSize();// 0x379ec40
	int GetChildrenCount();// 0x3715538
	interface classNone GetChildAt(int Index);// 0x379ebb0
	void ClearChildren();// 0x379eb94
	int AddChild(out const interface classNone Child);// 0x379eaf8

--------------------------------
Class: WidgetActor_C.Actor.Object
	SceneComponent* Root;//[Offset: 0x27c, Size: 0x4]
	LinearColor BackgroundTintColorMultiplier;//[Offset: 0x280, Size: 0x10]
	Vector BackgroundOffsetStep;//[Offset: 0x290, Size: 0xc]
	int BackgroundDepth;//[Offset: 0x29c, Size: 0x4]
	delegate WidgetActorClosedEvent;//[Offset: 0x2a0, Size: 0xc]
	bool bIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	float BackgroundOffsetAnimationSpeed;//[Offset: 0x2b0, Size: 0x4]
	bool bShouldBackgroundMultiplyTintColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x2b5, Size: 0x1]
	void WidgetActorClosedEvent__DelegateSignature(WidgetActor_C* bpp__WidgetActor__pf);// 0x4528238
	void UserConstructionScript();// 0x3e82394
	void SetRoot(SceneComponent* bpp__NewRoot__pf);// 0x3eab100
	void SetBackgroundDepth(int bpp__Value__pf);// 0x36ff7bc
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x400604c
	void Open(WidgetsLayoutComponent* bpp__LayoutParent__pf, out bool bpp__IsOpen__pf);// 0x4005f78
	void IsOpen(out bool bpp__IsOpen__pf);// 0x4005ee8
	void HandleReopen(WidgetsLayoutComponent* bpp__LayoutParent__pf);// 0x4005e68
	void HandleOpen(WidgetsLayoutComponent* bpp__LayoutParent__pf);// 0x4005de8
	void HandleClose();// 0x3eab180
	void Close();// 0x3e5a3c4
	void BecomeForeground();// 0x34d7bdc
	void BackgroundDepthChanged(int bpp__NewBackgroundDepth__pf);// 0x4005d68
	void ApplyBackgroundOffset(WidgetsLayoutComponent* bpp__WidgetsLayout__pf);// 0x3524d58

--------------------------------
Class: WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68f, Size: 0x1]
	enum ShouldBeInvisibleVisibility;//[Offset: 0x690, Size: 0x1]
	enum ShouldBeVisibleVisibility;//[Offset: 0x691, Size: 0x1]
	Widget_ComponentWidget_C* K2Node_DynamicCast_AsWidget_Component_Widget;//[Offset: 0x694, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	void ShouldBeVisibleChanged(bool bpp__bShouldBeVisible__pf);// 0x402dea8
	bool ShouldBeVisible();// 0x402de78
	void SetShouldBeVisible(bool bpp__bValue__pf);// 0x402ddf0
	void SetAndSetupWidget(UserWidget* bpp__Widget__pf);// 0x402dd70
	void ReceiveBeginPlay();// 0x3e4797c
	void Destroy();// 0x3e91890

--------------------------------
Class: LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform LayoutTransform;//[Offset: 0x5d0, Size: 0x30]
	Transform PostLayoutTransform;//[Offset: 0x600, Size: 0x30]
	WidgetsLayoutComponent* LayoutRoot;//[Offset: 0x630, Size: 0x4]
	WidgetsLayoutComponent* LayoutParent;//[Offset: 0x634, Size: 0x4]
	Vector2D MinDesiredDrawSize;//[Offset: 0x650, Size: 0x8]
	Vector2D MaxDesiredDrawSize;//[Offset: 0x658, Size: 0x8]
	Vector2D MinLayoutSizeGreaterThanDesired;//[Offset: 0x660, Size: 0x8]
	Vector2D MaxLayoutSize;//[Offset: 0x670, Size: 0x8]
	float RelativeScale;//[Offset: 0x680, Size: 0x4]
	enum SelfVisibility;//[Offset: 0x684, Size: 0x1]
	bool bInheritHorizontalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 0x1]
	bool bInheritVerticalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e, Size: 0x1]
	void SetSelfVisibility(enum NewVisibility);// 0x379cdc8
	void SetRelativeScale(float InRelativeScale);// 0x379cd48
	void SetRelativeLayoutPositionAndRotation(out const Vector Position, out const Quat Rotation);// 0x379cc6c
	void SetPostLayoutTransform(out const Transform InTransform);// 0x379cb60
	void SetMinLayoutSizeGreaterThanDesired(Vector2D Value);// 0x379cae8
	void SetMinDesiredDrawSize(Vector2D InMinDesiredDrawSize);// 0x379ca70
	void SetMaxLayoutSize(Vector2D Value);// 0x379c9f8
	void SetMaxDesiredDrawSize(Vector2D InMaxDesiredDrawSize);// 0x379c980
	bool IsVisibleInLayout();// 0x379c964
	bool IsCollapsedInLayout();// 0x379c948
	enum GetSelfVisibility();// 0x379c92c
	float GetRelativeScale();// 0x379c910
	Transform GetPostLayoutTransform();// 0x379c8d8
	Vector2D GetMinLayoutSizeGreaterThanDesired();// 0x379c8b4
	Vector2D GetMinDesiredDrawSize();// 0x379c890
	Vector2D GetMaxLayoutSize();// 0x379c86c
	Vector2D GetMaxDesiredDrawSize();// 0x379c848
	Transform GetLayoutTransform();// 0x379c810
	WidgetsLayoutComponent* GetLayoutRoot();// 0x379c7f4
	WidgetsLayoutComponent* GetLayoutParentAndSlotIndex(out int OutSlotIndex);// 0x379c760

--------------------------------
Class: Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	WidgetComponent_Advanced_C* WidgetComponent;//[Offset: 0x1bc, Size: 0x4]
	void WidgetComponentShouldBeVisibleChanged(bool bpp__bShouldBeVisible__pf);// 0x3fc4f38
	void WidgetComponentChanged();// 0x371422c
	void SetWidgetComponent(WidgetComponent_Advanced_C* bpp__NewWidgetComponent__pf);// 0x37005b8
	void SetShouldBeVisible(bool bpp__bShouldBeVisible__pf);// 0x3faa218
	void SetSelfVisibility(enum bpp__Visibility__pf);// 0x3fc4eb8
	void RequestRedraw();// 0x3719018
	void Construct();// 0x3719134

--------------------------------
Class: GarageHUDWidgetComponent_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float FadeDirection;//[Offset: 0x69c, Size: 0x4]
	float FadeAlpha;//[Offset: 0x6a0, Size: 0x4]
	FName FadeParameterName;//[Offset: 0x6a8, Size: 0x8]
	TimerHandle FadeTimerHandle;//[Offset: 0x6b0, Size: 0x8]
	MaterialInterface* FadeMaterial;//[Offset: 0x6b8, Size: 0x4]
	MaterialInterface* RegularMaterial;//[Offset: 0x6bc, Size: 0x4]
	float FadeInDelay;//[Offset: 0x6c0, Size: 0x4]
	float AdditionalRandomFadeInDelayRange;//[Offset: 0x6c4, Size: 0x4]
	float FadeInTime;//[Offset: 0x6c8, Size: 0x4]
	float AdditionalRandomFadeInTimeRange;//[Offset: 0x6cc, Size: 0x4]
	float FadeOutTime;//[Offset: 0x6d0, Size: 0x4]
	float FadeTime;//[Offset: 0x6d4, Size: 0x4]
	float FadeTickInterval;//[Offset: 0x6d8, Size: 0x4]
	float FadeInBlinkDelay;//[Offset: 0x6dc, Size: 0x4]
	float PendingFadeInDelay;//[Offset: 0x6e0, Size: 0x4]
	float PendingFadeInTime;//[Offset: 0x6e4, Size: 0x4]
	float PendingFadeInBlinkDelay;//[Offset: 0x6e8, Size: 0x4]
	Vector2D FadeParamsXYScale;//[Offset: 0x6ec, Size: 0x8]
	float BackgroundBlurAmount;//[Offset: 0x6f4, Size: 0x4]
	enum BackgroundBlurComparison;//[Offset: 0x6f8, Size: 0x1]
	bool bFadeInInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 0x1]
	bool bFadeOutInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fa, Size: 0x1]
	bool bSelectiveBlurRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fb, Size: 0x1]
	TimerHandle BlinkTimerHandle;//[Offset: 0x700, Size: 0x8]
	LinearColor BlinkTintColorAndOpacity;//[Offset: 0x708, Size: 0x10]
	LinearColor BlinkAdditiveColor;//[Offset: 0x718, Size: 0x10]
	float BlinkDelay;//[Offset: 0x728, Size: 0x4]
	float AdditionalRandomBlinkDelayRange;//[Offset: 0x72c, Size: 0x4]
	float BlinkTickInterval;//[Offset: 0x730, Size: 0x4]
	float BlinkInSpeed;//[Offset: 0x734, Size: 0x4]
	float BlinkOutSpeed;//[Offset: 0x738, Size: 0x4]
	float BlinkAlpha;//[Offset: 0x73c, Size: 0x4]
	float BlinkAlphaChangeSpeed;//[Offset: 0x740, Size: 0x4]
	Transform FadeInStartTransform;//[Offset: 0x750, Size: 0x30]
	float FadeInTransformAnimSpeed;//[Offset: 0x780, Size: 0x4]
	bool bAnimateFadeInTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 0x1]
	bool bFadeInAnimateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x785, Size: 0x1]
	bool PendingFadeInAnimateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x786, Size: 0x1]
	bool bExecuteBecameVisibleIfShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x787, Size: 0x1]
	LinearColor K2Node_MakeStruct_LinearColor;//[Offset: 0x788, Size: 0x10]
	float K2Node_CustomEvent_Delay;//[Offset: 0x798, Size: 0x4]
	MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic;//[Offset: 0x79c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x7a8, Size: 0x10]
	float CallFunc_BreakVector2D_X;//[Offset: 0x7b8, Size: 0x4]
	float CallFunc_BreakVector2D_Y;//[Offset: 0x7bc, Size: 0x4]
	LinearColor K2Node_MakeStruct_LinearColor1;//[Offset: 0x7c0, Size: 0x10]
	MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic1;//[Offset: 0x7d0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 0x1]
	float CallFunc_BreakVector2D_X1;//[Offset: 0x7d8, Size: 0x4]
	float CallFunc_BreakVector2D_Y1;//[Offset: 0x7dc, Size: 0x4]
	float CallFunc_BreakVector2D_X2;//[Offset: 0x7e0, Size: 0x4]
	float CallFunc_BreakVector2D_Y2;//[Offset: 0x7e4, Size: 0x4]
	LinearColor K2Node_MakeStruct_LinearColor2;//[Offset: 0x7e8, Size: 0x10]
	LinearColor K2Node_MakeStruct_LinearColor3;//[Offset: 0x7f8, Size: 0x10]
	float K2Node_CustomEvent_Time1;//[Offset: 0x808, Size: 0x4]
	float K2Node_CustomEvent_Dalay;//[Offset: 0x80c, Size: 0x4]
	float K2Node_CustomEvent_Time;//[Offset: 0x810, Size: 0x4]
	float K2Node_CustomEvent_BlinkDelay;//[Offset: 0x814, Size: 0x4]
	bool K2Node_CustomEvent_bAnimateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x820, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x830, Size: 0x10]
	bool K2Node_Event_bShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1]
	Widget_ComponentWidget_C* K2Node_DynamicCast_AsWidget_Component_Widget;//[Offset: 0x844, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x849, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x850, Size: 0x10]
	void StopFade();// 0x3eb0b20
	void StartFadeTranformation(out Transform bpp__StartTransform__pf, float bpp__AnimSpeed__pf);// 0x40448f0
	void StartFadeIn();// 0x3eb09f8
	void StartBlinkingDelayOver();// 0x3e916bc
	void SetRegularMaterial(MaterialInterface* bpp__Material__pf);// 0x3e919ac
	void ReleaseSelectiveBlur();// 0x3e91a2c
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x403e844
	bool HasPendingOrActiveBlink();// 0x40448b8
	void FinishBlink();// 0x3eaf2ac
	void FadeTick();// 0x403e9c4
	void FadeOutFinished();// 0x3e91758
	void FadeOut(float bpp__Time__pf);// 0x3e91774
	void FadeIn(float bpp__Dalay__pf, float bpp__Time__pf, float bpp__BlinkDelay__pf, bool bpp__bAnimateTransform__pf);// 0x4044760
	void DefaultFadeOut();// 0x3eaf31c
	void DefaultFadeIn();// 0x3e91bb0
	void BlinkWithDelay(float bpp__Delay__pf);// 0x3fb4220
	void BlinkWithDefaultDelay();// 0x3e91874
	void BlinkTick();// 0x3e46eb0
	void Blink();// 0x3eaf878
	void BeginFadeOut();// 0x3eaf290
	void BeginFadeIn();// 0x3eaf85c

--------------------------------
Class: LayoutSpacerComponent.SceneComponent.ActorComponent.Object
	Vector Pivot;//[Offset: 0x1f0, Size: 0xc]
	Transform LayoutTransform;//[Offset: 0x200, Size: 0x30]
	Transform PostLayoutTransform;//[Offset: 0x230, Size: 0x30]
	WidgetsLayoutComponent* LayoutRoot;//[Offset: 0x260, Size: 0x4]
	WidgetsLayoutComponent* LayoutParent;//[Offset: 0x264, Size: 0x4]
	Vector MinDesiredSize;//[Offset: 0x26c, Size: 0xc]
	Vector MaxLayoutSize;//[Offset: 0x278, Size: 0xc]
	Vector ComponentSize;//[Offset: 0x2a8, Size: 0xc]
	float Scale;//[Offset: 0x2d0, Size: 0x4]
	float RelativeScale;//[Offset: 0x2d4, Size: 0x4]
	float HorizontalRadius;//[Offset: 0x2d8, Size: 0x4]
	float VerticalRadius;//[Offset: 0x2e4, Size: 0x4]
	enum GeometryMode;//[Offset: 0x2f0, Size: 0x1]
	enum SelfVisibility;//[Offset: 0x2f1, Size: 0x1]
	bool bShouldUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bInheritHorizontalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	bool bInheritVerticalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1]
	void SetSelfVisibility(enum NewVisibility);// 0x379df88
	void SetScale(float InScale);// 0x379df08
	void SetRelativeScale(float InRelativeScale);// 0x379de88
	void SetRelativeLayoutPositionAndRotation(out const Vector Position, out const Quat Rotation);// 0x379ddac
	void SetPostLayoutTransform(out const Transform InTransform);// 0x379dca0
	void SetPivot(out const Vector InPivot);// 0x379dc08
	void SetMinDesiredSize(out const Vector InMinDesiredSize);// 0x379db7c
	void SetMaxLayoutSize(out const Vector InMaxLayoutSize);// 0x379daf0
	void SetCurvatureRadiuses(float NewHorizRadius, float NewVertRadius);// 0x379da34
	bool IsVisibleInLayout();// 0x379da18
	bool IsCollapsedInLayout();// 0x379d9fc
	float GetVerticalRadius();// 0x379d9e0
	enum GetSelfVisibility();// 0x379d9c4
	float GetScale();// 0x379d9a8
	float GetRelativeScale();// 0x379d98c
	Transform GetPostLayoutTransform();// 0x379d958
	Vector GetPivot();// 0x379d91c
	Vector GetMinDesiredSize();// 0x373cc74
	Vector GetMaxLayoutSize();// 0x379d8f8
	Transform GetLayoutTransform();// 0x379d8c4
	WidgetsLayoutComponent* GetLayoutRoot();// 0x379d8a8
	WidgetsLayoutComponent* GetLayoutParentAndSlotIndex(out int OutSlotIndex);// 0x379d814
	float GetHorizontalRadius();// 0x379d7f8
	enum GetGeometryMode();// 0x379d7dc
	Vector GetComponentSize();// 0x379d7a0

--------------------------------
Class: WidgetComponent_Button_Rating_C.WidgetComponent_Button_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FName RatingAttributeName;//[Offset: 0x9d8, Size: 0x8]
	LinearColor BlinkedWdgetComponentTintColor0;//[Offset: 0x9e0, Size: 0x10]
	LinearColor BlinkedWdgetComponentTintColor1;//[Offset: 0x9f0, Size: 0x10]
	LinearColor NormalWidgetComponentTintColor;//[Offset: 0xa00, Size: 0x10]
	TimerHandle BlinkingTimerHandle;//[Offset: 0xa10, Size: 0x8]
	bool bRatingUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0xa20, Size: 0x10]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer;//[Offset: 0xa30, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0xa34, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0xa40, Size: 0x1]
	int CallFunc_GetAttributeAsInteger_OutValue;//[Offset: 0xa44, Size: 0x4]
	bool K2Node_Event_bShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 0x1]
	bool K2Node_CustomEvent_bHasNewLeaderboards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 0x1]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0xa4c, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0xa50, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0xa60, Size: 0x10]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0xa70, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74, Size: 0x1]
	void RequestHasNewLeaderboardsComplete__DelegateSignature(bool bpp__bHasNewLeaderboards__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void UpdateRating();// 0x3e9486c
	void StartBlinking();// 0x3eaf2e4
	void RequestHasNewLeaderboardsComplete(bool bpp__bHasNewLeaderboards__pf, GarageController_C* bpp__GarageController__pf);// 0x4031658
	void BlinkingTick();// 0x3e94888
	void AttributesReceived(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x4031538

--------------------------------
Class: WidgetComponent_Button_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Margin Padding;//[Offset: 0x8b8, Size: 0x10]
	Widget_Button_Base_C* ButtonWidget;//[Offset: 0x8c8, Size: 0x4]
	FText Text;//[Offset: 0x8cc, Size: 0xc]
	DataTable* TextStyleSet;//[Offset: 0x8d8, Size: 0x4]
	Anchors TextAnchors;//[Offset: 0x8dc, Size: 0x10]
	Vector2D TextAlignment;//[Offset: 0x8ec, Size: 0x8]
	Margin TextPadding;//[Offset: 0x8f4, Size: 0x10]
	Margin TextMargin;//[Offset: 0x904, Size: 0x10]
	float TextLineHeightPercentageOverride;//[Offset: 0x914, Size: 0x4]
	Texture2D* IconTexture;//[Offset: 0x918, Size: 0x4]
	Vector2D IconSize;//[Offset: 0x91c, Size: 0x8]
	Anchors IconAnchors;//[Offset: 0x924, Size: 0x10]
	Vector2D IconAlignment;//[Offset: 0x934, Size: 0x8]
	Margin IconPadding;//[Offset: 0x93c, Size: 0x10]
	Vector2D IconShadowOffset;//[Offset: 0x94c, Size: 0x8]
	LinearColor IconColor;//[Offset: 0x954, Size: 0x10]
	LinearColor IconShadowColor;//[Offset: 0x964, Size: 0x10]
	byte TextJustification;//[Offset: 0x974, Size: 0x1]
	FName IconColorName;//[Offset: 0x978, Size: 0x8]
	FName IconShadowColorName;//[Offset: 0x980, Size: 0x8]
	FName BackgroundColorName;//[Offset: 0x988, Size: 0x8]
	float CallFunc_BreakVector2D_X;//[Offset: 0x990, Size: 0x4]
	float CallFunc_BreakVector2D_Y;//[Offset: 0x994, Size: 0x4]
	RichTextBlock* CallFunc_GetRichTextBlock_RichTextBlock;//[Offset: 0x998, Size: 0x4]
	LinearColor CallFunc_FindColor_OutColor;//[Offset: 0x99c, Size: 0x10]
	LinearColor CallFunc_FindColor_OutColor1;//[Offset: 0x9ac, Size: 0x10]
	Widget_Button_Base_C* K2Node_DynamicCast_AsWidget_Button_Base;//[Offset: 0x9bc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	LinearColor CallFunc_FindColor_OutColor2;//[Offset: 0x9c4, Size: 0x10]
	void SetText(out const FText bpp__NewText__pf__const);// 0x402fa44
	void SetButtonTextAndIcon(out const FText bpp__NewText__pf__const, Texture2D* bpp__NewIconTexture__pf);// 0x402f8ec

--------------------------------
Class: WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnWidgetClicked;//[Offset: 0x860, Size: 0xc]
	delegate OnWidgetPressed;//[Offset: 0x86c, Size: 0xc]
	delegate OnWidgetReleased;//[Offset: 0x878, Size: 0xc]
	Button* K2Node_CustomEvent_Button;//[Offset: 0x884, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x888, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x898, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x8a8, Size: 0x10]
	void OnWidgetReleased__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4528238
	void OnWidgetPressed__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4528238
	void OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4528238
	void HandleReleased();// 0x3eb0860
	void HandlePressed();// 0x3eaf338
	void HandleClicked();// 0x3e4cd14
	void BindToButton(Button* bpp__Button__pf);// 0x3e4cc94
	void OnButtonReleasedEvent__DelegateSignature();// 0x4528238
	void OnButtonPressedEvent__DelegateSignature();// 0x4528238
	void OnButtonClickedEvent__DelegateSignature();// 0x4528238

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0xec, Size: 0x4]
	ButtonStyle WidgetStyle;//[Offset: 0xf0, Size: 0x258]
	LinearColor ColorAndOpacity;//[Offset: 0x348, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x358, Size: 0x10]
	byte ClickMethod;//[Offset: 0x368, Size: 0x1]
	byte TouchMethod;//[Offset: 0x369, Size: 0x1]
	byte PressMethod;//[Offset: 0x36a, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 0x1]
	delegate OnClicked;//[Offset: 0x36c, Size: 0xc]
	delegate OnPressed;//[Offset: 0x378, Size: 0xc]
	delegate OnReleased;//[Offset: 0x384, Size: 0xc]
	delegate OnHovered;//[Offset: 0x390, Size: 0xc]
	delegate OnUnhovered;//[Offset: 0x39c, Size: 0xc]
	void SetTouchMethod(byte InTouchMethod);// 0x51d2a74
	void SetStyle(out const ButtonStyle InStyle);// 0x51d29e0
	void SetPressMethod(byte InPressMethod);// 0x51d2968
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x51d28ec
	void SetClickMethod(byte InClickMethod);// 0x51d2874
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x51d27f8
	bool IsPressed();// 0x51d27d0

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x51d69dc
	PanelSlot* GetContentSlot();// 0x51d69b4
	Widget* GetContent();// 0x51d698c

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x80]
	SlateBrush Hovered;//[Offset: 0x88, Size: 0x80]
	SlateBrush Pressed;//[Offset: 0x108, Size: 0x80]
	SlateBrush Disabled;//[Offset: 0x188, Size: 0x80]
	Margin NormalPadding;//[Offset: 0x208, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x218, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x228, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x240, Size: 0x18]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: Widget_Button_Base_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	void SetTextVisibility(enum bpp__Visibility__pf);// 0x3faa3a8
	void SetTextPadding(Margin bpp__Padding__pf);// 0x3fc046c
	void SetTextAnchors(Anchors bpp__Anchors__pf, Vector2D bpp__Alignment__pf);// 0x3fc039c
	void SetIconTexture(Texture2D* bpp__Texture__pf);// 0x3e5129c
	void SetIconSize(Vector2D bpp__Size__pf);// 0x3fc0324
	void SetIconShadowOffset(Vector2D bpp__Offset__pf);// 0x3fc02ac
	void SetIconShadowColor(LinearColor bpp__Color__pf);// 0x3fc022c
	void SetIconPadding(Margin bpp__Padding__pf);// 0x3fc01a0
	void SetIconColor(LinearColor bpp__Color__pf);// 0x3fc0120
	void SetIconAnchors(Anchors bpp__Anchors__pf, Vector2D bpp__Alignment__pf);// 0x3fc0050
	void SetBackgroundColor(LinearColor bpp__Color__pf);// 0x3fbffd0
	void GetRichTextBlock(out RichTextBlock* bpp__RichTextBlock__pf);// 0x3fbff40

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xfc, Size: 0xc]
	DataTable* TextStyleSet;//[Offset: 0x108, Size: 0x4]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x10c, Size: 0xc]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x2d8, Size: 0xc]
	void SetTextWrapping(bool bAutoWrap, float WrapAt);// 0x51e6504
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x51e648c
	void SetText(out const FText InText);// 0x51e6380
	void SetMargin(out const Margin InMargin);// 0x51e62f0
	void SetLineHeightPercentage(float Value);// 0x51e6278
	void SetJustification(byte InJustification);// 0x51e61f8
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x51e6178

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xdc, Size: 0x3]
	byte Justification;//[Offset: 0xdf, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0xe0, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe1, Size: 0x1]
	float WrapTextAt;//[Offset: 0xe4, Size: 0x4]
	Margin Margin;//[Offset: 0xe8, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0xf8, Size: 0x4]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 0x4]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: WidgetComponent_Button_Nickname_C.WidgetComponent_Button_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x9d8, Size: 0x10]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer;//[Offset: 0x9e8, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0x9ec, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0x9f8, Size: 0x1]
	bool K2Node_Event_bShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 0x1]
	UserOnlineAccountWrapper CallFunc_GetLocalUserAccount_ReturnValue1;//[Offset: 0x9fc, Size: 0x8]
	void UpdateTextForUserAccount(UserOnlineAccountWrapper bpp__UserAccount__pf);// 0x4030b38
	void UpdateText(FString bpp__PlayerId__pf__const, FString bpp__Nickname__pf__const);// 0x4030a44
	void UpdateNickname();// 0x3e94888
	void ProfileUpdateComplete(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x4030924

--------------------------------
Class: UserOnlineAccountWrapper.OnlineUserWrapper

--------------------------------
Class: OnlineUserWrapper

--------------------------------
Class: BoxLayoutComponent.WidgetsLayoutComponent.SceneComponent.ActorComponent.Object
	BoxLayoutSlotSetup[] SlotsSetup;//[Offset: 0x328, Size: 0xc]
	Vector LayoutDirection;//[Offset: 0x334, Size: 0xc]
	Vector MinDesiredSize;//[Offset: 0x340, Size: 0xc]
	Vector MinLayoutSizeGreaterThanDesired;//[Offset: 0x34c, Size: 0xc]
	Vector MaxLayoutSize;//[Offset: 0x364, Size: 0xc]
	void SetMinLayoutSizeGreaterThanDesired(out const Vector Value);// 0x379b564
	void SetMinDesiredSize(out const Vector InMinDesiredSize);// 0x379b408
	void SetMaxLayoutSize(out const Vector InMaxLayoutSize);// 0x379b37c
	void SetLayoutDirection(out const Vector InLayoutDirection);// 0x379b27c
	BoxLayoutSlotAttributesReference InsertBoxLayoutChild(out const interface classNone Child, int Index);// 0x3799594
	BoxLayoutSlotAttributesReference GetSlotAttributesRefAt(int Index);// 0x379b1f4
	Vector GetMinLayoutSizeGreaterThanDesired();// 0x379b1d0
	Vector GetMinDesiredSize();// 0x379b1ac
	Vector GetMaxLayoutSize();// 0x379b188
	Vector GetLayoutDirection();// 0x379b164
	BoxLayoutSlotAttributesReference FindSlotAttributesRef(const Object* Child);// 0x379b0ac
	void CommitSlotAttributes(BoxLayoutSlotAttributesReference Attributes);// 0x379afcc
	BoxLayoutSlotAttributesReference AddBoxLayoutChild(out const interface classNone Child);// 0x37992d4

--------------------------------
Class: BoxLayoutSlotSetup
	ActorComponentReference ChildReference;//[Offset: 0x0, Size: 0x8]
	Margin3D Padding;//[Offset: 0x8, Size: 0x18]
	float FillWeight;//[Offset: 0x20, Size: 0x4]
	float DepthAlignment;//[Offset: 0x24, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x28, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x29, Size: 0x1]

--------------------------------
Class: Margin3D
	float Back;//[Offset: 0x0, Size: 0x4]
	float Left;//[Offset: 0x4, Size: 0x4]
	float Top;//[Offset: 0x8, Size: 0x4]
	float Front;//[Offset: 0xc, Size: 0x4]
	float Right;//[Offset: 0x10, Size: 0x4]
	float Bottom;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BoxLayoutSlotAttributesReference

--------------------------------
Class: HangarPostProcessManagerComponent_C.BasePostProcessManagerComponent_C.ActorComponent.Object
	CameraComponent* PostProcessCameraComponent;//[Offset: 0x10c, Size: 0x4]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD;//[Offset: 0x110, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD1;//[Offset: 0x118, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	float K2Node_Event_BlurAmount;//[Offset: 0x120, Size: 0x4]
	enum K2Node_Event_Comparison;//[Offset: 0x124, Size: 0x1]
	bool K2Node_Event_bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]

--------------------------------
Class: BasePostProcessManagerComponent_C.ActorComponent.Object
	int GreatThanSelectiveBlurBlendableIndex;//[Offset: 0xac, Size: 0x4]
	int LessThanThanSelectiveBlurBlendableIndex;//[Offset: 0xb0, Size: 0x4]
	int OutlineBlendableIndex;//[Offset: 0xb4, Size: 0x4]
	SelectiveBlurRequest[] SelectiveBlurRequestsStack;//[Offset: 0xb8, Size: 0xc]
	Object*[] OutlineRequestsStack;//[Offset: 0xc4, Size: 0xc]
	float K2Node_CustomEvent_BlurAmount;//[Offset: 0xd0, Size: 0x4]
	enum K2Node_CustomEvent_Comparison;//[Offset: 0xd4, Size: 0x1]
	Object* K2Node_Event_Requester2;//[Offset: 0xd8, Size: 0x4]
	SelectiveBlurRequest K2Node_Event_Request;//[Offset: 0xdc, Size: 0xc]
	int Temp_int_Array_Index_Variable;//[Offset: 0xe8, Size: 0x4]
	int Temp_int_Array_Index_Variable1;//[Offset: 0xec, Size: 0x4]
	bool K2Node_CustomEvent_bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int Temp_int_Array_Index_Variable2;//[Offset: 0xf4, Size: 0x4]
	int Temp_int_Array_Index_Variable3;//[Offset: 0xf8, Size: 0x4]
	Object* K2Node_Event_Requester1;//[Offset: 0xfc, Size: 0x4]
	Object* K2Node_Event_Requester;//[Offset: 0x100, Size: 0x4]
	Object* CallFunc_Array_Get_Item;//[Offset: 0x104, Size: 0x4]
	Object* CallFunc_Array_Get_Item1;//[Offset: 0x108, Size: 0x4]
	void SetupSelectiveBlur(float bpp__BlurAmount__pf, enum bpp__Comparison__pf);// 0x3e41534
	void SetupOutline(bool bpp__bEnabled__pf);// 0x3e414ac
	void RequestSelectiveBlur(SelectiveBlurRequest bpp__Request__pf);// 0x3e41434
	void RequestOutline(Object* bpp__Requester__pf);// 0x3e413b4
	void ReleaseSelectiveBlur(Object* bpp__Requester__pf);// 0x3e41334
	void ReleaseOutline(Object* bpp__Requester__pf);// 0x3e412b4
	void ApplySelectiveBlurSettings(out PostProcessSettings bpp__PostProcessSettings__pf, float bpp__BlurAmount__pf, enum bpp__Comparison__pf);// 0x3e4113c
	void ApplyOutlineSettings(out PostProcessSettings bpp__PostProcessSettings__pf, bool bpp__bEnabled__pf);// 0x3e41000

--------------------------------
Class: SelectiveBlurRequest
	Object* Requester_8_97E3639BD448A3F35EABBBBF4EA56A27;//[Offset: 0x0, Size: 0x4]
	float BlurAmount_2_A38D239EAF42568446E7DDA49E814881;//[Offset: 0x4, Size: 0x4]
	enum StencilValueComparison_5_215D9B986D427B970E3A85AC07FD2CE9;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x260, Size: 0x1]
	float FOVAngle;//[Offset: 0x264, Size: 0x4]
	float OrthoWidth;//[Offset: 0x268, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x26c, Size: 0x4]
	byte CaptureSource;//[Offset: 0x270, Size: 0x1]
	byte CompositeMode;//[Offset: 0x271, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x280, Size: 0x4f0]
	float PostProcessBlendWeight;//[Offset: 0x770, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x780, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x7c4, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x7d0, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 0x1]
	void CaptureScene();// 0x5c7c970
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5c7c840

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x1ec, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x1f0, Size: 0xc]
	Actor*[] HiddenActors;//[Offset: 0x1fc, Size: 0xc]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x208, Size: 0xc]
	Actor*[] ShowOnlyActors;//[Offset: 0x214, Size: 0xc]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1]
	float LODDistanceFactor;//[Offset: 0x224, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x228, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x22c, Size: 0x4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x230, Size: 0xc]
	FString ProfilingEventName;//[Offset: 0x248, Size: 0xc]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x5c7bf30
	void ShowOnlyActorComponents(Actor* InActor);// 0x5c7beb8
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x5c7be40
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x5c7bdc8
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x5c7bd50
	void HideComponent(PrimitiveComponent* InComponent);// 0x5c7bcd8
	void HideActorComponents(Actor* InActor);// 0x5c7bc60
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x5c7bbe8
	void ClearHiddenComponents();// 0x5c7bbd4

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0xc]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: RootAnchorsLayoutComponent_C.AnchorsLayoutComponent.WidgetsLayoutComponent.SceneComponent.ActorComponent.Object
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x340, Size: 0x10]
	void Setup();// 0x3e5a3c4
	void ReceiveBeginPlay();// 0x3e5a3a8
	void DeferredBeginPlay();// 0x3e82394

--------------------------------
Class: AnchorsLayoutComponent.WidgetsLayoutComponent.SceneComponent.ActorComponent.Object
	AnchorsLayoutSlotSetup[] SlotsSetup;//[Offset: 0x328, Size: 0xc]
	void SetDesiredSize(out const Vector NewSize);// 0x37997c0
	void SetDesiredLinearSize(out const Vector NewSize);// 0x3799678
	AnchorsLayoutSlotAttributesReference InsertAnchorsLayoutChild(out const interface classNone Child, int Index);// 0x3799594
	AnchorsLayoutSlotAttributesReference GetSlotAttributesRefAt(int Index);// 0x379950c
	AnchorsLayoutSlotAttributesReference FindSlotAttributesRef(const Object* Child);// 0x3799454
	void CommitSlotAttributes(AnchorsLayoutSlotAttributesReference Attributes);// 0x3799370
	AnchorsLayoutSlotAttributesReference AddAnchorsLayoutChild(out const interface classNone Child);// 0x37992d4

--------------------------------
Class: AnchorsLayoutSlotSetup
	ActorComponentReference ChildReference;//[Offset: 0x0, Size: 0x8]
	Anchors3D Anchors;//[Offset: 0x8, Size: 0x18]
	Margin3D Offset;//[Offset: 0x20, Size: 0x18]
	Vector Alignment;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: Anchors3D
	Vector Minimum;//[Offset: 0x0, Size: 0xc]
	Vector Maximum;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: AnchorsLayoutSlotAttributesReference

--------------------------------
Class: WidgetsAnimationComponent.ActorComponent.Object
	float AnimationSpeed;//[Offset: 0xa8, Size: 0x4]
	bool bShared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	void StopAnimation(SceneComponent* Component);// 0x37a1e38
	void StopAllAnimations();// 0x37a1dec
	WidgetTransformAnimationTaskPtr FindTransformAnimationTask(SceneComponent* Component);// 0x37a1d6c
	WidgetTransformAnimationTaskPtr FindOrStartTransformAnimationTask(out const interface classNone WidgetsLayoutInterface, out const Transform StartTargetTransform, float StartOverrideAnimSpeed, float StartAlpha);// 0x37a1b70
	void AnimatePostLayoutTransform(out const interface classNone WidgetsLayoutInterface, out const Transform TargetTransform, float OverrideAnimSpeed, float StartAlpha);// 0x37a1980

--------------------------------
Class: WidgetTransformAnimationTaskPtr

--------------------------------
Class: WidgetComponent_Button_Currency_C.WidgetComponent_Button_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x9d4, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 0x1]
	bool K2Node_Event_bShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d9, Size: 0x1]
	byte K2Node_CustomEvent_Status;//[Offset: 0x9da, Size: 0x1]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x9dc, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x9e0, Size: 0x10]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x9f0, Size: 0x28]
	FormatArgumentData[] K2Node_MakeArray_Array;//[Offset: 0xa18, Size: 0xc]
	void OnCurrenciesUpdateComplete__DelegateSignature(byte bpp__Status__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void CurrencyUpdateComplete(byte bpp__Status__pf, GarageController_C* bpp__GarageController__pf);// 0x40303cc

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0xc]
	byte ArgumentValueType;//[Offset: 0xc, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x10, Size: 0xc]
	int ArgumentValueInt;//[Offset: 0x1c, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x20, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: FullscreenFixedAnglesAnchorsLayoutComponent_C.AnchorsLayoutComponent.WidgetsLayoutComponent.SceneComponent.ActorComponent.Object
	float InvHorizontalArcAngle;//[Offset: 0x340, Size: 0x4]
	float InvVerticalArcAngle;//[Offset: 0x344, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x348, Size: 0x10]
	void Setup();// 0x3e5a3c4
	void ReceiveBeginPlay();// 0x3e5a3a8
	void DeferredBeginPlay();// 0x3e82394

--------------------------------
Class: ControlsManagerComponent_C.ActorComponent.Object
	<FName,HUDControlInfo> ControlsMap;//[Offset: 0xa8, Size: 0x3c]
	FName SelectedControlName;//[Offset: 0xe8, Size: 0x8]
	ControlNameAndInterface[] ControlsGroup;//[Offset: 0xf0, Size: 0xc]
	WidgetComponent_ControlSettings_C* ControlsGroupSettingsWidgetComponent;//[Offset: 0xfc, Size: 0x4]
	Widget_ControlSettings_C* ControlsGroupSettingsWidget;//[Offset: 0x100, Size: 0x4]
	WidgetActor_ControlsCustomizationMenu_C* ControlsCustomizationMenu;//[Offset: 0x104, Size: 0x4]
	Box2D ControlsGroupBounds;//[Offset: 0x108, Size: 0x14]
	float ControlsGroupScale;//[Offset: 0x11c, Size: 0x4]
	float ControlsGroupScaleMin;//[Offset: 0x120, Size: 0x4]
	float ControlsGroupScaleMax;//[Offset: 0x124, Size: 0x4]
	bool bCustomizingControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	WidgetsLayoutComponent* ControlsLayoutParent;//[Offset: 0x12c, Size: 0x4]
	WidgetsLayoutComponent* CustomSettingsLayoutParent;//[Offset: 0x130, Size: 0x4]
	BoxLayoutSlotAttributes ControlsGroupSettingsLayoutAttributes;//[Offset: 0x134, Size: 0x24]
	float MasterOpacity;//[Offset: 0x158, Size: 0x4]
	bool bGroupSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	delegate OnControlsCustomizingStateChanged;//[Offset: 0x160, Size: 0xc]
	interface class * ControlsTouchInputProxy;//[Offset: 0x16c, Size: 0x8]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x174, Size: 0x1]
	void OnControlsCustomizingStateChanged__DelegateSignature(bool bpp__bCustomizing__pf, ControlsManagerComponent_C* bpp__ControlsManager__pf);// 0x4528238
	void ShowControlsGroupSettings();// 0x3718ffc
	void ShowControlsCustomizationMenu();// 0x3e32860
	interface classNone ShowControl(FName bpp__Name__pf);// 0x3e5ede0
	void SetMasterOpacity(float bpp__Value__pf);// 0x3e5ed60
	void SetGroupSelection(bool bpp__bValue__pf);// 0x3e5ecd8
	void SetControlsGroupOpacity(float bpp__Value__pf);// 0x3e5ec58
	void ResetControlsSettings(bool bpp__bVisibleOnly__pf);// 0x3e5ebd0
	void RescaleControlsGroup(Vector2D bpp__Scale__pf);// 0x3e5eb58
	void RequestUnselectCustomizingControl(FName bpp__ControlName__pf);// 0x3e5ead8
	void RequestSelectCustomizingControl(FName bpp__ControlName__pf);// 0x3e5ea58
	bool RemoveControlFromGroupSelection(FName bpp__ControlName__pf);// 0x3e5e9d0
	void ReconfigureControlsGroupSettings();// 0x371422c
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e50510
	void RecalculateGroupSelectedControlsBounds();// 0x3714184
	void MoveControlsGroup(Vector2D bpp__Delta__pf);// 0x3e5e958
	void HideControlsGroupSettings();// 0x3719134
	void HideControlsCustomizationMenu();// 0x3e5e93c
	void HideControl(FName bpp__Name__pf);// 0x3e5e8bc
	void HideAllControls();// 0x3718728
	interface classNone GetControlsTouchInputProxy();// 0x3e5e86c
	WidgetsLayoutComponent* GetControlsSettingsLayoutParent();// 0x3e5e83c
	FName[] GetAllControlsNames();// 0x3e5e7a0
	void EndControlsCustomization();// 0x37189ec
	void ClearControlsGroupSelection();// 0x3714210
	bool BeginVisibleControlsCustomization();// 0x3e5e770
	WidgetActor_ControlCustomizer_C* BeginControlCustomization(out const interface classNone bpp__ControlInterface__pf, FName bpp__ControlName__pf);// 0x3e5e68c
	void AddControlToGroupSelection(FName bpp__ControlName__pf, out const interface classNone bpp__ControlInterface__pf);// 0x3e5e5ac

--------------------------------
Class: HUDControlInfo
	interface class * ControlInstance_9_967673484E01C4018825FB986C8C37F4;//[Offset: 0x0, Size: 0x8]
	class Object* ControlClass_5_FF6CC99C43D5DAFC08F1C4844966D61D;//[Offset: 0x8, Size: 0x4]
	WidgetActor_ControlCustomizer_C* CustomizerInstance_8_A83E2AD248D0D5D12BC1C88A64FC54C6;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WidgetActor_ControlCustomizer_C.WidgetActor_C.Actor.Object
	WidgetComponent_WithEffects_C* SizeBottomRightWidgetComponent;//[Offset: 0x2bc, Size: 0x4]
	WidgetComponent_WithEffects_C* SizeBottomLeftWidgetComponent;//[Offset: 0x2c0, Size: 0x4]
	WidgetComponent_WithEffects_C* SizeTopRightWidgetComponent;//[Offset: 0x2c4, Size: 0x4]
	WidgetComponent_WithEffects_C* SizeTopLeftWidgetComponent;//[Offset: 0x2c8, Size: 0x4]
	WidgetComponent_WithEffects_C* PositionWidgetComponent;//[Offset: 0x2cc, Size: 0x4]
	WidgetsLayoutComponent* HostPostLayoutEventSender;//[Offset: 0x2d0, Size: 0x4]
	interface class FloatProperty* HostControlInterface;//[Offset: 0x2d4, Size: 0x8]
	interface class DoubleProperty* HostLayoutInterface;//[Offset: 0x2dc, Size: 0x8]
	Vector InvRelativeScale3D;//[Offset: 0x2e4, Size: 0xc]
	Vector ScaledHostSize;//[Offset: 0x2f0, Size: 0xc]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	ControlsManagerComponent_C* ControlsManager;//[Offset: 0x300, Size: 0x4]
	FName ControlName;//[Offset: 0x308, Size: 0x8]
	LinearColor UnselectedColor;//[Offset: 0x310, Size: 0x10]
	bool GroupSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x328, Size: 0x10]
	WidgetsLayoutComponent* K2Node_CustomEvent_WidgetsLayoutComponent;//[Offset: 0x338, Size: 0x4]
	WidgetComponent* K2Node_CustomEvent_WidgetComponent;//[Offset: 0x33c, Size: 0x4]
	bool CallFunc_Open_isOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x344, Size: 0x4]
	void UpdateWidgetsTransforms();// 0x4008904
	void UpdatePositionWidgetCollision();// 0x37cd4c4
	void UpdateAttachmentToHost();// 0x3e72394
	void UnbindFromHostPostLayoutEvent();// 0x37ccde8
	void SetWidgetsColor(const LinearColor bpp__Color__pf__const);// 0x4008884
	void SetWidgetCorner(LayoutableWidgetComponent* bpp__WidgetComponent__pf, enum bpp__Corner__pf);// 0x40087c0
	void SetupWidgets();// 0x3e723e8
	void SetSelectedState(bool bpp__bInSelected__pf, bool bpp__bInGroupSelection__pf);// 0x40086e8
	void SetHost(out const interface classNone bpp__NewHostControlInterface__pf);// 0x4008654
	void ResizeHost(Vector2D bpp__CornerPosition__pf, Vector2D bpp__Pivot__pf);// 0x4008594
	void RequestUnselect();// 0x4008578
	void RequestSelect();// 0x3e95dd8
	void ReceiveBeginPlay();// 0x3e721a8
	void PositionWidgetMetricsChanged(WidgetComponent* bpp__WidgetComponent__pf);// 0x40084f8
	void MoveHostCenter(Vector2D bpp__LocalPosition__pf);// 0x4008480
	bool IsSelected();// 0x4008450
	void HandleHostPostLayout(WidgetsLayoutComponent* bpp__WidgetsLayoutComponent__pf);// 0x3e98700
	void ControlScaleChanged(float bpp__Scale__pf);// 0x40083d0
	void BindToHostPostLayoutEvent();// 0x37ccd4c
	void WidgetsPostLayoutEvent__DelegateSignature(WidgetsLayoutComponent* bpp__WidgetsLayoutComponent__pf);// 0x4528238
	void WidgetMetricsChangedEvent__DelegateSignature(WidgetComponent* bpp__WidgetComponent__pf);// 0x4528238

--------------------------------
Class: ControlNameAndInterface
	FName Name_2_32EDD581419DF0898BAE4C9F568E001E;//[Offset: 0x0, Size: 0x8]
	interface class * ControlInterface_5_0771FD8240EE54F2319049ABE6FC7241;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetComponent_ControlSettings_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: Widget_ControlSettings_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Widget_ControlSettingsOpacity_C* CustomizeOpacity;//[Offset: 0x1c0, Size: 0x4]
	Widget_ControlSettingsMove_C* CustomizePosition;//[Offset: 0x1c4, Size: 0x4]
	Widget_ControlSettingsScale_C* CustomizeScale;//[Offset: 0x1c8, Size: 0x4]
	void Init(out const interface classNone bpp__InControlInterface__pf, float bpp__InOpacity__pf, float bpp__InScale__pf, float bpp__InScaleMin__pf, float bpp__InScaleMax__pf);// 0x3fc5bbc
	void ConfigureWithControlsManager(ControlsManagerComponent_C* bpp__InControlsManager__pf, float bpp__InOpacity__pf, float bpp__InScale__pf, float bpp__InScaleMin__pf, float bpp__InScaleMax__pf);// 0x3fc5a24

--------------------------------
Class: Widget_ControlSettingsOpacity_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Widget_SliderWithButtons_C* Slider;//[Offset: 0x1c0, Size: 0x4]
	RichTextBlock* ValueRichText;//[Offset: 0x1c4, Size: 0x4]
	interface class FloatProperty* ControlInterface;//[Offset: 0x1c8, Size: 0x8]
	ControlsManagerComponent_C* ControlsManager;//[Offset: 0x1d0, Size: 0x4]
	float K2Node_ComponentBoundEvent_Value;//[Offset: 0x1d4, Size: 0x4]
	void SetValueText(float bpp__Value__pf);// 0x3e7d8d4
	void Init(out const interface classNone bpp__InControlInterface__pf, float bpp__InOpacity__pf);// 0x3fc6f9c
	void Destruct();// 0x3e32844
	void ConfigureWithControlsManager(ControlsManagerComponent_C* bpp__InControlsManager__pf, float bpp__InOpacity__pf);// 0x3fc6ed8
	void BndEvt__Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature(float bpp__Value__pf);// 0x3e5ec58

--------------------------------
Class: Widget_SliderWithButtons_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Button* DecrementButton;//[Offset: 0x1c0, Size: 0x4]
	Button* IncrementButton;//[Offset: 0x1c4, Size: 0x4]
	Slider* Slider;//[Offset: 0x1c8, Size: 0x4]
	float StepSize;//[Offset: 0x1cc, Size: 0x4]
	delegate OnValueChanged;//[Offset: 0x1d0, Size: 0xc]
	TimerHandle RepeatTimerHandle;//[Offset: 0x1e0, Size: 0x8]
	float IncrementDelta;//[Offset: 0x1e8, Size: 0x4]
	float StartRepeatIncrementDelay;//[Offset: 0x1ec, Size: 0x4]
	float RepeatIncrementInterval;//[Offset: 0x1f0, Size: 0x4]
	float K2Node_ComponentBoundEvent_Value;//[Offset: 0x1f4, Size: 0x4]
	void OnValueChanged__DelegateSignature(float bpp__Value__pf);// 0x4528238
	void StopIncrementValue();// 0x3fa9800
	void StartRepeatIncrementValue();// 0x35365bc
	void StartRepeat();// 0x3e326f4
	void StartIncrementValue(float bpp__Delta__pf);// 0x3fc1f1c
	void SetValueAndNotify(float bpp__InValue__pf);// 0x3ff55e8
	void SetValue(float bpp__InValue__pf);// 0x3fbd138
	void SetStepSize(float bpp__Value__pf);// 0x3fc1c48
	void Repeat();// 0x3e32614
	float GetValue();// 0x3ff55b8
	void Destruct();// 0x3e32844
	void BndEvt__Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature(float bpp__Value__pf);// 0x3ff3ca8
	void BndEvt__IncrementButton_K2Node_ComponentBoundEvent_6_OnButtonReleasedEvent__DelegateSignature();// 0x3e32940
	void BndEvt__IncrementButton_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x3e32860
	void BndEvt__DecrementButton_K2Node_ComponentBoundEvent_4_OnButtonReleasedEvent__DelegateSignature();// 0x3e5e93c
	void BndEvt__DecrementButton_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x3fbe124

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0xdc, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0xe0, Size: 0x10]
	SliderStyle WidgetStyle;//[Offset: 0xf0, Size: 0x210]
	byte Orientation;//[Offset: 0x300, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x304, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x314, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 0x1]
	float StepSize;//[Offset: 0x328, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x330, Size: 0xc]
	delegate OnMouseCaptureEnd;//[Offset: 0x33c, Size: 0xc]
	delegate OnControllerCaptureBegin;//[Offset: 0x348, Size: 0xc]
	delegate OnControllerCaptureEnd;//[Offset: 0x354, Size: 0xc]
	delegate OnValueChanged;//[Offset: 0x360, Size: 0xc]
	void SetValue(float InValue);// 0x51ec8d4
	void SetStepSize(float InValue);// 0x51ec85c
	void SetSliderHandleColor(LinearColor InValue);// 0x51ec7e0
	void SetSliderBarColor(LinearColor InValue);// 0x51ec764
	void SetLocked(bool InValue);// 0x51ec6e4
	void SetIndentHandle(bool InValue);// 0x51ec664
	float GetValue();// 0x51ec63c

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x80]
	SlateBrush DisabledBarImage;//[Offset: 0x88, Size: 0x80]
	SlateBrush NormalThumbImage;//[Offset: 0x108, Size: 0x80]
	SlateBrush DisabledThumbImage;//[Offset: 0x188, Size: 0x80]
	float BarThickness;//[Offset: 0x208, Size: 0x4]

--------------------------------
Class: Widget_ControlSettingsMove_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Button* MoveDownButton;//[Offset: 0x1c0, Size: 0x4]
	Button* MoveLeftButton;//[Offset: 0x1c4, Size: 0x4]
	Button* MoveRightButton;//[Offset: 0x1c8, Size: 0x4]
	Button* MoveUpButton;//[Offset: 0x1cc, Size: 0x4]
	interface class FloatProperty* ControlInterface;//[Offset: 0x1d0, Size: 0x8]
	ControlsManagerComponent_C* ControlsManager;//[Offset: 0x1d8, Size: 0x4]
	Vector2D MoveDelta;//[Offset: 0x1dc, Size: 0x8]
	TimerHandle RepeatTimerHandle;//[Offset: 0x1e8, Size: 0x8]
	float RepeatMoveDeltaScale;//[Offset: 0x1f0, Size: 0x4]
	float StartRepeatMoveDelay;//[Offset: 0x1f4, Size: 0x4]
	float RepeatMoveInterval;//[Offset: 0x1f8, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x200, Size: 0x10]
	void StopMove();// 0x3fa9800
	void StatRepeatMove();// 0x3e32614
	void StartMove(Vector2D bpp__Delta__pf);// 0x3fc62c0
	void RepeatMove();// 0x3e32844
	void Init(out const interface classNone bpp__ControlInterface__pf);// 0x3fc622c
	void Destruct();// 0x3e326f4
	void ConfigureWithControlsManager(ControlsManagerComponent_C* bpp__ControlsManager__pf);// 0x3fc1c48
	void BndEvt__MoveUpButton_K2Node_ComponentBoundEvent_5_OnButtonReleasedEvent__DelegateSignature();// 0x3e5e93c
	void BndEvt__MoveUpButton_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x3fbe124
	void BndEvt__MoveRightButton_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x3fc1cc8
	void BndEvt__MoveRightButton_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x3fc6210
	void BndEvt__MoveLeftButton_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x3e51180
	void BndEvt__MoveLeftButton_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x3fc61f4
	void BndEvt__MoveDownButton_K2Node_ComponentBoundEvent_7_OnButtonReleasedEvent__DelegateSignature();// 0x3e32940
	void BndEvt__MoveDownButton_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x3e32860

--------------------------------
Class: Widget_ControlSettingsScale_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Widget_SliderWithButtons_C* Slider;//[Offset: 0x1c4, Size: 0x4]
	RichTextBlock* ValueRichText;//[Offset: 0x1c8, Size: 0x4]
	interface class FloatProperty* ControlInterface;//[Offset: 0x1cc, Size: 0x8]
	ControlsManagerComponent_C* ControlsManager;//[Offset: 0x1d4, Size: 0x4]
	float MinScale;//[Offset: 0x1d8, Size: 0x4]
	float ScaleRange;//[Offset: 0x1dc, Size: 0x4]
	float InvScaleRange;//[Offset: 0x1e0, Size: 0x4]
	float Scale;//[Offset: 0x1e4, Size: 0x4]
	float K2Node_ComponentBoundEvent_Value;//[Offset: 0x1e8, Size: 0x4]
	interface class FloatProperty* CallFunc_RemoveControlCustomizationDelegate_Delegate_CastInput;//[Offset: 0x1ec, Size: 0x8]
	void SetValueText(float bpp__Value__pf);// 0x3e7d8d4
	void Init(out const interface classNone bpp__InControlInterface__pf, float bpp__InScale__pf, float bpp__InScaleMin__pf, float bpp__InScaleMax__pf);// 0x3fc7840
	void Destruct();// 0x3e32844
	void ControlScaleChanged(float bpp__Scale__pf);// 0x3e456b0
	void ConfigureWithControlsManager(ControlsManagerComponent_C* bpp__InControlsManager__pf, float bpp__InScale__pf, float bpp__InScaleMin__pf, float bpp__InScaleMax__pf);// 0x3fc76f0
	void BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnValueChanged__DelegateSignature(float bpp__Value__pf);// 0x3e5ec58

--------------------------------
Class: WidgetActor_ControlsCustomizationMenu_C.WidgetActor_C.Actor.Object
	WidgetComponent_Button_C* ResetButtonWidgetComponent;//[Offset: 0x2b8, Size: 0x4]
	WidgetComponent_Button_C* DoneButtonWidgetComponent;//[Offset: 0x2bc, Size: 0x4]
	WidgetComponent_WithEffects_C* ToggleGroupSelectionWidgetComponent;//[Offset: 0x2c0, Size: 0x4]
	BoxLayoutComponent* ButtonsLayout;//[Offset: 0x2c4, Size: 0x4]
	BoxLayoutComponent* VerticalBoxLayout;//[Offset: 0x2c8, Size: 0x4]
	BoxLayoutSlotAttributes BoxLayoutAttributes;//[Offset: 0x2cc, Size: 0x24]
	ControlsManagerComponent_C* ControlsManager;//[Offset: 0x2f0, Size: 0x4]
	AnchorsLayoutSlotAttributes AnchorsLayoutAttributes;//[Offset: 0x2f4, Size: 0x3c]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x330, Size: 0x4]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component;//[Offset: 0x334, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	BoxLayoutComponent* K2Node_DynamicCast_AsBox_Layout_Component;//[Offset: 0x33c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	interface class FloatProperty* CallFunc_InsertBoxLayoutChild_Child_CastInput;//[Offset: 0x344, Size: 0x8]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent1;//[Offset: 0x34c, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent;//[Offset: 0x350, Size: 0x4]
	Widget_ToggleControlsGroupSelection_C* K2Node_DynamicCast_AsWidget_Toggle_Controls_Group_Selection;//[Offset: 0x354, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	interface class FloatProperty* CallFunc_AddAnchorsLayoutChild_Child_CastInput;//[Offset: 0x35c, Size: 0x8]
	void ReceiveBeginPlay();// 0x4009614
	void BndEvt__ResetButtonWidgetComponent_K2Node_ComponentBoundEvent_1_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e721c4
	void BndEvt__DoneButtonWidgetComponent_K2Node_ComponentBoundEvent_0_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x40084f8

--------------------------------
Class: BoxLayoutSlotAttributes
	Margin3D Padding;//[Offset: 0x0, Size: 0x18]
	float FillWeight;//[Offset: 0x18, Size: 0x4]
	float DepthAlignment;//[Offset: 0x1c, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x20, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x21, Size: 0x1]

--------------------------------
Class: AnchorsLayoutSlotAttributes
	Anchors3D Anchors;//[Offset: 0x0, Size: 0x18]
	Margin3D Offset;//[Offset: 0x18, Size: 0x18]
	Vector Alignment;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: Widget_ToggleControlsGroupSelection_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	CheckBox* CheckBox;//[Offset: 0x1c0, Size: 0x4]
	ControlsManagerComponent_C* ControlsManager;//[Offset: 0x1c4, Size: 0x4]
	bool K2Node_ComponentBoundEvent_bIsChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	void BndEvt__CheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bpp__bIsChecked__pf);// 0x3fd1758

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0xe9, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0xf0, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x100, Size: 0x518]
	SlateWidgetStyleAsset* Style;//[Offset: 0x618, Size: 0x4]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x61c, Size: 0x4]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x620, Size: 0x4]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x624, Size: 0x4]
	SlateBrushAsset* CheckedImage;//[Offset: 0x628, Size: 0x4]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x62c, Size: 0x4]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x630, Size: 0x4]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x634, Size: 0x4]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x638, Size: 0x4]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x63c, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x640, Size: 0x1]
	Margin Padding;//[Offset: 0x644, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x654, Size: 0x1c]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x674, Size: 0xc]
	void SetIsChecked(bool InIsChecked);// 0x51d47f0
	void SetCheckedState(enum InCheckedState);// 0x51d4778
	bool IsPressed();// 0x51d4750
	bool IsChecked();// 0x51d4728
	enum GetCheckedState();// 0x51d4700

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x4, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x8, Size: 0x80]
	SlateBrush UncheckedHoveredImage;//[Offset: 0x88, Size: 0x80]
	SlateBrush UncheckedPressedImage;//[Offset: 0x108, Size: 0x80]
	SlateBrush CheckedImage;//[Offset: 0x188, Size: 0x80]
	SlateBrush CheckedHoveredImage;//[Offset: 0x208, Size: 0x80]
	SlateBrush CheckedPressedImage;//[Offset: 0x288, Size: 0x80]
	SlateBrush UndeterminedImage;//[Offset: 0x308, Size: 0x80]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x388, Size: 0x80]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x408, Size: 0x80]
	Margin Padding;//[Offset: 0x488, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x498, Size: 0x1c]
	SlateColor BorderBackgroundColor;//[Offset: 0x4b4, Size: 0x1c]
	SlateSound CheckedSlateSound;//[Offset: 0x4d0, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x4e8, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x500, Size: 0x18]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 0x80]

--------------------------------
Class: OnlineLeaderboard.OnlineServiceAttributesContainer.Object
	OnlineLeaderboardReward[] Rewards;//[Offset: 0x70, Size: 0xc]
	enum GetState();// 0x34fa354
	DateTime GetStartTime();// 0x34fa338
	OnlineLeaderboardReward[] GetRewards();// 0x34fa2cc
	UniqueNetIdRepl GetLeaderboardId();// 0x34fa078
	DateTime GetEndTime();// 0x34fa05c

--------------------------------
Class: OnlineLeaderboardReward
	int BeginRank;//[Offset: 0x0, Size: 0x4]
	int EndRank;//[Offset: 0x4, Size: 0x4]
	PlayerProfileBundle* Bundle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: DateTime

--------------------------------
Class: WidgetActor_Squad_C.WidgetActor_Friends_C.WidgetActor_C.Actor.Object
	WidgetComponent_Panel_C* OptionsWidgetComponent;//[Offset: 0x5b8, Size: 0x4]
	WidgetComponent_WithEffects_C* RightSquadWidgetComponent;//[Offset: 0x5bc, Size: 0x4]
	WidgetComponent_WithEffects_C* RightSquadTitleWidgetComponent;//[Offset: 0x5c0, Size: 0x4]
	BoxLayoutComponent* RightSquadTopHorizontalLayout;//[Offset: 0x5c4, Size: 0x4]
	BoxLayoutComponent* ButtonsHorizontalLayout;//[Offset: 0x5c8, Size: 0x4]
	WidgetComponent_WithEffects_C* SpectatorsSquadWidgetComponent;//[Offset: 0x5cc, Size: 0x4]
	WidgetComponent_WithEffects_C* SpectatorsSquadTitleWidgetComponent;//[Offset: 0x5d0, Size: 0x4]
	BoxLayoutComponent* RightVerticalLayout;//[Offset: 0x5d4, Size: 0x4]
	WidgetComponent_Button_C* SummonButtonWidgetComponent;//[Offset: 0x5d8, Size: 0x4]
	WidgetComponent_Button_C* LeaveButtonWidgetComponent;//[Offset: 0x5dc, Size: 0x4]
	WidgetComponent_Button_C* PlayButtonWidgetComponent;//[Offset: 0x5e0, Size: 0x4]
	WidgetComponent_WithEffects_C* LeftSquadWidgetComponent;//[Offset: 0x5e4, Size: 0x4]
	WidgetComponent_WithEffects_C* LeftSquadTitleWidgetComponent;//[Offset: 0x5e8, Size: 0x4]
	BoxLayoutComponent* LeftSquadTopHorizontalLayout;//[Offset: 0x5ec, Size: 0x4]
	BoxLayoutComponent* LeftVerticalLayout;//[Offset: 0x5f0, Size: 0x4]
	UniqueNetIdRepl SquadId;//[Offset: 0x5f4, Size: 0x18]
	Widget_Squad_C* LeftSquadWidget;//[Offset: 0x60c, Size: 0x4]
	Widget_SquadTitle_C* LeftSquadTitleWidget;//[Offset: 0x610, Size: 0x4]
	Widget_Squad_C* RightSquadWidget;//[Offset: 0x614, Size: 0x4]
	Widget_SquadTitle_C* RightSquadTitleWidget;//[Offset: 0x618, Size: 0x4]
	Widget_Squad_C* SpectatorsSquadWidget;//[Offset: 0x61c, Size: 0x4]
	Widget_SquadTitle_C* SpectatorsSquadTitleWidget;//[Offset: 0x620, Size: 0x4]
	WidgetActor_SquadMatchmaking_C* MMWidgetActor;//[Offset: 0x624, Size: 0x4]
	BlueprintSessionResult MMResult;//[Offset: 0x628, Size: 0x84]
	LinearColor EnablePlayButtonTintColorMultiplier;//[Offset: 0x6ac, Size: 0x10]
	LinearColor DisablePlayButtonTintColorMultiplier;//[Offset: 0x6bc, Size: 0x10]
	UniqueNetIdRepl MasterId;//[Offset: 0x6cc, Size: 0x18]
	OnlineSquadPermissions Permissions;//[Offset: 0x6e4, Size: 0x4]
	FName TeamIndexAttributeName;//[Offset: 0x6e8, Size: 0x8]
	FName SpectatorFlagAttributeName;//[Offset: 0x6f0, Size: 0x8]
	FName CustomGameOptionsAttributeName;//[Offset: 0x6f8, Size: 0x8]
	UniqueNetIdRepl[] PendingInvitations;//[Offset: 0x700, Size: 0xc]
	OnlineServiceRequestPtr CustomGameOptionsRequest;//[Offset: 0x70c, Size: 0x4]
	OnlineServiceAttributes ChangedOptions;//[Offset: 0x710, Size: 0x3c]
	TimerHandle CommitOptionsTimerHandle;//[Offset: 0x750, Size: 0x8]
	AnchorsLayoutSlotAttributes SelectModeLayoutAttributes;//[Offset: 0x758, Size: 0x3c]
	float FriendListSelectorScaleFactor;//[Offset: 0x794, Size: 0x4]
	float HorizFitScaleFactor;//[Offset: 0x798, Size: 0x4]
	float LeftSquadsLayoutFixedHeight;//[Offset: 0x79c, Size: 0x4]
	float RightSquadsLayoutFixedHeight;//[Offset: 0x7a0, Size: 0x4]
	Vector DisabledPlayButtonPostLayoutTranslation;//[Offset: 0x7a4, Size: 0xc]
	LinearColor LeftSquadBackgroundColor;//[Offset: 0x7b0, Size: 0x10]
	LinearColor RightSquadBackgroundColor;//[Offset: 0x7c0, Size: 0x10]
	int NumSquads;//[Offset: 0x7d0, Size: 0x4]
	bool bConnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 0x1]
	bool bMMStartedByMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d5, Size: 0x1]
	bool bPlayButtonDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d6, Size: 0x1]
	bool bFriendsIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d7, Size: 0x1]
	bool bBoundToPostLayoutEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	bool bOptionsBuildInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 0x1]
	BoxLayoutComponent* SelectModeLayout;//[Offset: 0x7dc, Size: 0x4]
	bool bConnectedToCustomGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	class GameMode_Match_C[] GameModeClasses;//[Offset: 0x7e4, Size: 0xc]
	FName[] SinglePlayerMatchMaps;//[Offset: 0x7f0, Size: 0xc]
	FName GameModeOptionKey;//[Offset: 0x800, Size: 0x8]
	FName MapOptionKey;//[Offset: 0x808, Size: 0x8]
	FName ExpectedPlayersSettingsKey;//[Offset: 0x810, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x818, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x828, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x838, Size: 0x10]
	OnlineServiceKeyValue[] K2Node_MakeArray_Array;//[Offset: 0x848, Size: 0xc]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x854, Size: 0x4]
	WidgetActor_C* CallFunc_ShowError_ErrorWidgetActor;//[Offset: 0x858, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x860, Size: 0x10]
	WidgetActor_C* CallFunc_ShowErrorAndClose_ErrorWidgetActor;//[Offset: 0x870, Size: 0x4]
	DestroySessionCallbackProxy* CallFunc_DestroySession_ReturnValue;//[Offset: 0x874, Size: 0x4]
	WidgetActor_C* CallFunc_ShowErrorAndClose_ErrorWidgetActor1;//[Offset: 0x878, Size: 0x4]
	bool CallFunc_IsValid_ReturnValue1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 0x1]
	PlayerController* CallFunc_GetPlayerController_ReturnValue1;//[Offset: 0x880, Size: 0x4]
	bool K2Node_CustomEvent_bCreateCustomGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 0x1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x888, Size: 0x4]
	JoinSessionCallbackProxy* CallFunc_JoinSession_ReturnValue;//[Offset: 0x88c, Size: 0x4]
	bool CallFunc_IsValid_ReturnValue2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 0x1]
	OnlineSquadEvent K2Node_CustomEvent_SquadEvent;//[Offset: 0x894, Size: 0x88]
	BlueprintSessionResult CallFunc_GetMatchmakingResult_ReturnValue;//[Offset: 0x91c, Size: 0x84]
	MatchmakingIntermediateResult CallFunc_GetMatchmakingIntermediateResult_ReturnValue;//[Offset: 0x9a0, Size: 0xc]
	OnlineSquadGameState CallFunc_GetOnlineSquadGameState_ReturnValue;//[Offset: 0x9ac, Size: 0x68]
	OnlineSquadState CallFunc_GetOnlineSquadState_ReturnValue;//[Offset: 0xa14, Size: 0x60]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74, Size: 0x1]
	WidgetActor_C* CallFunc_ShowError_ErrorWidgetActor1;//[Offset: 0xa78, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0xa80, Size: 0x10]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent1;//[Offset: 0xa90, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate5;//[Offset: 0xa98, Size: 0x10]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer1;//[Offset: 0xaa8, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg1;//[Offset: 0xaac, Size: 0xc]
	byte K2Node_CustomEvent_Status1;//[Offset: 0xab8, Size: 0x1]
	interface class FloatProperty* CallFunc_GetPlayerProfile_ReturnValue2;//[Offset: 0xabc, Size: 0x8]
	FString CallFunc_GetAttributeAsString_OutValue;//[Offset: 0xac4, Size: 0xc]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0xad0, Size: 0x4]
	WidgetActor_C* CallFunc_ShowError_ErrorWidgetActor2;//[Offset: 0xad4, Size: 0x4]
	bool CallFunc_CanStartSinglePlayerMatch_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 0x1]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent2;//[Offset: 0xadc, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent1;//[Offset: 0xae0, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent;//[Offset: 0xae4, Size: 0x4]
	WidgetActor_C* K2Node_CustomEvent_WidgetActor1;//[Offset: 0xae8, Size: 0x4]
	WidgetActor_C* K2Node_CustomEvent_WidgetActor;//[Offset: 0xaec, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate6;//[Offset: 0xaf0, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent2;//[Offset: 0xb00, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent1;//[Offset: 0xb04, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent;//[Offset: 0xb08, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate7;//[Offset: 0xb10, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate8;//[Offset: 0xb20, Size: 0x10]
	FName[] K2Node_MakeArray_Array1;//[Offset: 0xb30, Size: 0xc]
	UserWidget* CallFunc_GetContentWidget_Widget;//[Offset: 0xb3c, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate9;//[Offset: 0xb40, Size: 0x10]
	Widget_Options_C* K2Node_DynamicCast_AsWidget_Options;//[Offset: 0xb50, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb54, Size: 0x1]
	bool CallFunc_HasOptions_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb55, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate10;//[Offset: 0xb58, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate11;//[Offset: 0xb68, Size: 0x10]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer;//[Offset: 0xb78, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0xb7c, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0xb88, Size: 0x1]
	FString CallFunc_GetAttributeAsString_OutValue1;//[Offset: 0xb8c, Size: 0xc]
	JsonObjectBlueprintWrapper[] CallFunc_BuildJsonObjectArrayFromString_OutArray;//[Offset: 0xb98, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate12;//[Offset: 0xba8, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate13;//[Offset: 0xbb8, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate14;//[Offset: 0xbc8, Size: 0x10]
	FName K2Node_CustomEvent_Key;//[Offset: 0xbd8, Size: 0x8]
	FString K2Node_CustomEvent_NewValue;//[Offset: 0xbe0, Size: 0xc]
	Margin K2Node_MakeStruct_Margin;//[Offset: 0xbec, Size: 0x10]
	WidgetsLayoutComponent* K2Node_CustomEvent_WidgetsLayoutComponent;//[Offset: 0xbfc, Size: 0x4]
	PlayerController* CallFunc_GetPlayerController_ReturnValue2;//[Offset: 0xc00, Size: 0x4]
	FName CallFunc_GetSinglePlayerMatchMapName_Result;//[Offset: 0xc08, Size: 0x8]
	DestroySessionCallbackProxy* CallFunc_DestroySession_ReturnValue1;//[Offset: 0xc10, Size: 0x4]
	CreateSessionCallbackProxy* CallFunc_CreateSession_ReturnValue;//[Offset: 0xc14, Size: 0x4]
	bool CallFunc_IsValid_ReturnValue7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 0x1]
	bool CallFunc_IsValid_ReturnValue8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc19, Size: 0x1]
	class GameMode_Match_C* CallFunc_GetSinglePlayerMatchGameModeClass_Result;//[Offset: 0xc20, Size: 0x28]
	OnlineServiceKeyValue K2Node_MakeStruct_OnlineServiceKeyValue;//[Offset: 0xc48, Size: 0x18]
	OnlineServiceKeyValue[] K2Node_MakeArray_Array2;//[Offset: 0xc60, Size: 0xc]
	void WidgetActorClosedEvent__DelegateSignature(WidgetActor_C* bpp__WidgetActor__pf);// 0x4528238
	void OptionValueChangedEvent__DelegateSignature(FName bpp__Key__pf, FString bpp__NewValue__pf);// 0x4528238
	void OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4528238
	void UpdateSummonButtonVisibility();// 0x3e7f430
	void UpdateSquadState(out OnlineSquadState bpp__SquadState__pf);// 0x4028c64
	void UpdateInvitationToSquadAllowability();// 0x3e90808
	void UpdateCustomGameOptions(out OnlineServiceAttributes bpp__CustomGameAttributes__pf);// 0x4028b68
	void UnbindFromSquadEvent();// 0x4028b4c
	void UnbindFromPostLayoutEvent();// 0x3ea6568
	void Summon();// 0x3e47020
	void StartSinglePlayerMatch();// 0x3ea65bc
	void StartMM();// 0x3e7f340
	void SquadsStateUpdated();// 0x3e7eb00
	void SquadModeButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4028acc
	void SquadEvent(out const OnlineSquadEvent bpp__SquadEvent__pf__const);// 0x4028940
	void SquadActionConfirmed(Widget_PlayersListElement_C* bpp__ActionSourceWidget__pf, Widget_Squad_C* bpp__SquadWidget__pf, byte bpp__ActionCode__pf);// 0x4028838
	void ShowMM();// 0x3eb0a4c
	void ShowFriends();// 0x3e48038
	void ShowErrorAndClose(out const FText bpp__Message__pf__const, out WidgetActor_C* bpp__ErrorWidgetActor__pf);// 0x40286d0
	void SetupSinglePlayerMatchSessionAttributes();// 0x3e491a8
	void SetupRightSquadSizeLimits();// 0x3e910b0
	void SetupMultiSquadGameLayout();// 0x40286b4
	void SetupLeftSquadSizeLimits();// 0x3e9115c
	void OptionsValueChanged(FName bpp__Key__pf, FString bpp__NewValue__pf__const);// 0x40285d0
	void OpenSquadModeSelection();// 0x3e7f44c
	void OnSuccess_CCB21F174175470EA9085DB2306922DB();// 0x3e7f0e4
	void OnSuccess_9FC732C30D4D933CF30A1E8C1DF79003();// 0x3e61c30
	void OnSuccess_41B9E0CE4EEFBB2C8142C1BA0B07D708();// 0x3e61e60
	void OnSuccess_004CF7D0204F2396900B31ABEBDB172B();// 0x3e61f7c
	void OnFailure_CCB21F174175470EA9085DB2306922DB();// 0x3e470d8
	void OnFailure_9FC732C30D4D933CF30A1E8C1DF79003();// 0x3e47998
	void OnFailure_41B9E0CE4EEFBB2C8142C1BA0B07D708();// 0x3e46e78
	void OnFailure_004CF7D0204F2396900B31ABEBDB172B();// 0x3e46fe8
	void MoveCloseButtonToConnectionLocation();// 0x3e47110
	void Leave();// 0x3e48af8
	void InitWidgets();// 0x3e470f4
	void HidePlayButton();// 0x3eaf300
	void HideMM(bool bpp__bCanceled__pf);// 0x4028548
	void HideFriends();// 0x3e61af8
	void HandlePostLayoutEvent(WidgetsLayoutComponent* bpp__WidgetsLayoutComponent__pf);// 0x4010fcc
	void GetSinglePlayerMatchMapName(out FName bpp__Result__pf);// 0x40284b4
	void GetSinglePlayerMatchGameModeClass(out class GameMode_Match_C bpp__Result__pf);// 0x40283e8
	void GetPlayerAttributesComplete(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x40282c8
	void GetCustomGameOptionsCompleted(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x40281a8
	void ErrorWidgetActorClosed(WidgetActor_C* bpp__WidgetActor__pf);// 0x3eb02f0
	void EnablePlayButton();// 0x3e61c4c
	void DisconnectFromSquad();// 0x3e61c68
	void Disconnected();// 0x4011208
	void DisablePlayButton();// 0x3e48d30
	void CustomModeButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4028128
	void ConnectToSquad(bool bpp__bCreateCustomGame__pf);// 0x40280a0
	void CommitChangedOptions();// 0x3eaf370
	void CloseSquadModeSelection();// 0x3eb0b3c
	void ClearCustomGameOptions();// 0x3e48c94
	void CleanupPendingInvitations();// 0x3e90170
	void CheckPlayButtonVisibility();// 0x3e4797c
	void CheckFriendsVisibility();// 0x3e46fcc
	void CanStartSinglePlayerMatch(out bool bpp__bResult__pf);// 0x4028010
	void CancelSelectModeBButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3eb0a84
	void CancelMM();// 0x3e47f9c
	void BuildCustomGameOptions();// 0x3ea6440
	void BndEvt__SummonButtonWidgetComponent_K2Node_ComponentBoundEvent_2_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e96a40
	void BndEvt__PlayButtonWidgetComponent_K2Node_ComponentBoundEvent_0_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4027f90
	void BndEvt__LeaveButtonWidgetComponent_K2Node_ComponentBoundEvent_1_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4027f10
	void BindToSquadEvent();// 0x3e61b14
	void BindToPostLayoutEvent();// 0x3ea6844
	void BindToErrorWidgetActorClose(WidgetActor_C* bpp__WidgetActor__pf);// 0x4027e90
	void AdjustScaleAndLayout();// 0x3e91094
	void AdjustFriendListSelectorTextScale();// 0x3e46e5c
	void WidgetsPostLayoutEvent__DelegateSignature(WidgetsLayoutComponent* bpp__WidgetsLayoutComponent__pf);// 0x4528238
	void EmptyOnlineDelegate__DelegateSignature();// 0x4528238

--------------------------------
Class: WidgetActor_Friends_C.WidgetActor_C.Actor.Object
	WidgetComponent_FindPlayers_C* FindWidgetComponent;//[Offset: 0x2b8, Size: 0x4]
	WidgetComponent_TabBar_C* OutboundSelectorWidgetComponent;//[Offset: 0x2bc, Size: 0x4]
	WidgetComponent_TabBar_C* InboundSelectorWidgetComponent;//[Offset: 0x2c0, Size: 0x4]
	WidgetComponent_TabBar_C* AcceptedSelectorWidgetComponent;//[Offset: 0x2c4, Size: 0x4]
	WidgetComponent_Button_C* CloseButtonWidgetComponent;//[Offset: 0x2c8, Size: 0x4]
	WidgetComponent_WithEffects_C* FriendsListsWidgetComponent;//[Offset: 0x2cc, Size: 0x4]
	BoxLayoutComponent* FriendsListSelectorLayout;//[Offset: 0x2d0, Size: 0x4]
	WidgetComponent_WithEffects_C* RecomendedWidgetComponent;//[Offset: 0x2d4, Size: 0x4]
	BoxLayoutComponent* FriendsTopHorizontalLyout;//[Offset: 0x2d8, Size: 0x4]
	BoxLayoutComponent* FriendsVerticalLayout;//[Offset: 0x2dc, Size: 0x4]
	BoxLayoutComponent* OuterHorizontalLayout;//[Offset: 0x2e0, Size: 0x4]
	Widget_RecomendedFriends_C* RecomendedWidget;//[Offset: 0x2e4, Size: 0x4]
	Widget_TabBar_C* AcceptedSelectorWidget;//[Offset: 0x2e8, Size: 0x4]
	Widget_TabBar_C* InboundSelectorWidget;//[Offset: 0x2ec, Size: 0x4]
	Widget_TabBar_C* OutboundSelectorWidget;//[Offset: 0x2f0, Size: 0x4]
	Widget_FriendLists_C* FriendListsWidget;//[Offset: 0x2f4, Size: 0x4]
	bool bSearchingPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	OnlineUsersWidgetsAndStateMapWrapper UsersMap;//[Offset: 0x2fc, Size: 0x3c]
	bool bInviteToSquadAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	WidgetActor_FriendActionConfirmation_C* ConfirmationWidgetActor;//[Offset: 0x33c, Size: 0x4]
	class Object* ErrorWidgetActorClass;//[Offset: 0x340, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x344, Size: 0x4]
	float DesiredVerticalCenterAnchor;//[Offset: 0x348, Size: 0x4]
	float MinVerticalAnchor;//[Offset: 0x34c, Size: 0x4]
	float MaxVerticalAnchor;//[Offset: 0x350, Size: 0x4]
	float RightAnchor;//[Offset: 0x354, Size: 0x4]
	float FriendsLayoutFixedHeight;//[Offset: 0x358, Size: 0x4]
	float MaxLayoutHeight;//[Offset: 0x35c, Size: 0x4]
	bool bFriendsIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	Widget_PlayersListElement_C*[] ReorderAnimatingWidgets;//[Offset: 0x364, Size: 0xc]
	float ReorderAnimationSpeed;//[Offset: 0x370, Size: 0x4]
	bool bIsReorderAnimationRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	FText Temp_text_Variable;//[Offset: 0x378, Size: 0xc]
	FText Temp_text_Variable1;//[Offset: 0x384, Size: 0xc]
	OnlineUserWrapper[] K2Node_CustomEvent_FoundPlayers;//[Offset: 0x390, Size: 0xc]
	bool K2Node_CustomEvent_bHasSearchQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	FText Temp_text_Variable2;//[Offset: 0x3a0, Size: 0xc]
	FText Temp_text_Variable3;//[Offset: 0x3ac, Size: 0xc]
	FText Temp_text_Variable4;//[Offset: 0x3b8, Size: 0xc]
	WidgetComponent_TabBar_C* K2Node_CustomEvent_WidgetComponent;//[Offset: 0x3c4, Size: 0x4]
	Widget_FriendLists_C* K2Node_DynamicCast_AsWidget_Friend_Lists;//[Offset: 0x3c8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	FText Temp_text_Variable5;//[Offset: 0x3d0, Size: 0xc]
	Widget_RecomendedFriends_C* K2Node_DynamicCast_AsWidget_Recomended_Friends;//[Offset: 0x3dc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	FString K2Node_CustomEvent_Namespace;//[Offset: 0x3e4, Size: 0xc]
	OnlineUserWrapper[] K2Node_CustomEvent_RecentPlayers;//[Offset: 0x3f0, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0x3fc, Size: 0xc]
	byte K2Node_CustomEvent_Status1;//[Offset: 0x408, Size: 0x1]
	FText Temp_text_Variable6;//[Offset: 0x40c, Size: 0xc]
	enum K2Node_CustomEvent_Operation;//[Offset: 0x418, Size: 0x1]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request;//[Offset: 0x41c, Size: 0x4]
	byte K2Node_CustomEvent_Status;//[Offset: 0x420, Size: 0x1]
	FString K2Node_CustomEvent_ErrorStr;//[Offset: 0x424, Size: 0xc]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x430, Size: 0x4]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 0x1]
	bool CallFunc_ShouldBeVisible_bShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x438, Size: 0x10]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x448, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller1;//[Offset: 0x450, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x458, Size: 0x10]
	FText Temp_text_Variable7;//[Offset: 0x468, Size: 0xc]
	FText Temp_text_Variable8;//[Offset: 0x474, Size: 0xc]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent;//[Offset: 0x480, Size: 0x4]
	FText Temp_text_Variable9;//[Offset: 0x484, Size: 0xc]
	FText Temp_text_Variable10;//[Offset: 0x490, Size: 0xc]
	FText Temp_text_Variable11;//[Offset: 0x49c, Size: 0xc]
	FText Temp_text_Variable12;//[Offset: 0x4a8, Size: 0xc]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x4b4, Size: 0x4]
	FText Temp_text_Variable13;//[Offset: 0x4b8, Size: 0xc]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component;//[Offset: 0x4c4, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	float CallFunc_CalculateLayoutVerticalAnchors_VerticalAnchorMin;//[Offset: 0x4cc, Size: 0x4]
	float CallFunc_CalculateLayoutVerticalAnchors_VerticalAnchorMax;//[Offset: 0x4d0, Size: 0x4]
	interface class FloatProperty* CallFunc_AddAnchorsLayoutChild_Child_CastInput;//[Offset: 0x4d4, Size: 0x8]
	Anchors3D K2Node_MakeStruct_Anchors3D;//[Offset: 0x4dc, Size: 0x18]
	AnchorsLayoutSlotAttributes K2Node_MakeStruct_AnchorsLayoutSlotAttributes;//[Offset: 0x4f4, Size: 0x3c]
	FText Temp_text_Variable14;//[Offset: 0x530, Size: 0xc]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x53c, Size: 0x1]
	enum Temp_byte_Variable;//[Offset: 0x53d, Size: 0x1]
	FText Temp_text_Variable15;//[Offset: 0x540, Size: 0xc]
	FText Temp_text_Variable16;//[Offset: 0x54c, Size: 0xc]
	FText Temp_text_Variable17;//[Offset: 0x558, Size: 0xc]
	FText K2Node_Select_Default;//[Offset: 0x564, Size: 0xc]
	WidgetActor_C* CallFunc_ShowError_ErrorWidgetActor;//[Offset: 0x570, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x578, Size: 0x10]
	int K2Node_Event_NewBackgroundDepth;//[Offset: 0x588, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x590, Size: 0x10]
	WidgetActor_C* K2Node_CustomEvent_WidgetActor;//[Offset: 0x5a0, Size: 0x4]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x5a4, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0x5a8, Size: 0x10]
	void WidgetActorClosedEvent__DelegateSignature(WidgetActor_C* bpp__WidgetActor__pf);// 0x4528238
	void OnWidgetClicked__DelegateSignature(WidgetComponent_TabBar_C* bpp__WidgetComponent__pf);// 0x4528238
	void OnSearchResultChanged__DelegateSignature(out OnlineUserWrapper[] bpp__FoundPlayers__pf, bool bpp__bHasSearchQuery__pf);// 0x4528238
	void OnOperationComplete__DelegateSignature(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnFriendsListChanged__DelegateSignature();// 0x4528238
	void UpdateReorderAnimation(float bpp__DeltaTime__pf);// 0x37cd2a8
	void UpdateRecomendationsVisibility();// 0x4008578
	void UpdateFriendsLists();// 0x3eaff64
	void StopUsersStatusesObserving();// 0x3ea64b0
	void StartUsersStatusesObserving();// 0x3e57b04
	void StartReorderAnimation();// 0x3ea6494
	void ShowError(out const FText bpp__Message__pf__const, out WidgetActor_C* bpp__ErrorWidgetActor__pf);// 0x400c498
	void SetupRecomendationsDesiredSize();// 0x3ea5bf4
	void SetupGarageControllerEvents();// 0x3e723e8
	void SetupConfirmationWidget();// 0x400c47c
	void SetPlayerSquadWidget(out UniqueNetIdRepl bpp__PlayerId__pf, Widget_PlayersListElement_C* bpp__Widget__pf);// 0x400c2cc
	void SetInviteToSquadAllowed(bool bpp__bAllowed__pf);// 0x400c244
	void SetFriendInviteStatus(out UniqueNetIdRepl bpp__UserId__pf, byte bpp__FriendInviteStatus__pf);// 0x400c094
	void SelectList(int bpp__Index__pf);// 0x3f16e20
	void ReorderAnimationEnded();// 0x3e57958
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e721c4
	void ReceiveRecentPlayers();// 0x4008904
	void ReceiveBeginPlay();// 0x4009614
	void ProcessUsersStatusChanges(out UserOnlineStatus[] bpp__ChangedUsersStatuses__pf);// 0x400bf1c
	void PlayersSearchResultChanged(out OnlineUserWrapper[] bpp__FoundPlayers__pf, bool bpp__bHasSearchQuery__pf);// 0x400bd8c
	void InviteSent();// 0x400bd70
	void InviteRejected();// 0x3eb0b04
	void InviteAccepted();// 0x3ea6324
	void InitSearchingFriends();// 0x37cd4c4
	void InitRecomendations();// 0x37ccde8
	void InitFriendLists();// 0x3e98664
	void HandleFriendAction(Widget_PlayersListElement_C* bpp__Widget__pf, byte bpp__ActionCode__pf);// 0x400bcac
	void GetRecentPlayersComplete(FString bpp__Namespace__pf__const, out const OnlineUserWrapper[] bpp__RecentPlayers__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x400ba64
	void GarageOperationComplete(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf__const, GarageController_C* bpp__GarageController__pf);// 0x400b84c
	void FriendsListChanged();// 0x34d93fc
	void FriendRemoved();// 0x3eb02d4
	void FriendListSelectorClicked(WidgetComponent_TabBar_C* bpp__WidgetComponent__pf);// 0x3eaef88
	void FriendActionDeclined(Widget_PlayersListElement_C* bpp__ActionSourceWidget__pf, byte bpp__ActionCode__pf);// 0x400b788
	void FriendActionConfirmed(Widget_PlayersListElement_C* bpp__ActionSourceWidget__pf, byte bpp__ActionCode__pf);// 0x400b6c4
	void FillRecomendedPlayers(out const OnlineUserWrapper[] bpp__Players__pf__const, bool bpp__bIsFoundPlayers__pf);// 0x400b534
	void DeactivateFriends();// 0x3ea6c10
	void CreateConfirmationWidget();// 0x3eb0370
	void ConfirmationWidgetClosed(WidgetActor_C* bpp__WidgetActor__pf);// 0x40084f8
	void CloseCleanup();// 0x3ea6d2c
	void ClearPlayerSquadWidget(out UniqueNetIdRepl bpp__PlayerId__pf);// 0x400b3cc
	void CleanupReorderAnimation();// 0x3ea6478
	void CleanupGarageControllerEvents();// 0x3e723cc
	void CleanupConfirmationWidget();// 0x3e57a0c
	void CancelRecomendedPlayersWidgetActionConfirmation();// 0x3ea6308
	void CancelFriendsListsWidgetActionConfirmation();// 0x3eaf7c0
	void CalculateMaxLayoutHeight(WidgetsLayoutComponent* bpp__LayoutParent__pf, float bpp__VertAnchorsMin__pf, float bpp__VertAnchorsMax__pf);// 0x400b2c4
	void CalculateLayoutVerticalAnchors(WidgetsLayoutComponent* bpp__LayoutParent__pf, out float bpp__VerticalAnchorMin__pf, out float bpp__VerticalAnchorMax__pf);// 0x400b198
	void BndEvt__CloseButtonWidgetComponent_K2Node_ComponentBoundEvent_0_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x37cc910
	void ActivateFriends();// 0x37ccc50

--------------------------------
Class: WidgetComponent_Panel_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* ContentWidgetClass;//[Offset: 0x860, Size: 0x4]
	Margin ContentWidgetPaddings;//[Offset: 0x864, Size: 0x10]
	byte ContentWidgetHorizontalAlignment;//[Offset: 0x874, Size: 0x1]
	byte ContentWidgetVerticalAlignment;//[Offset: 0x875, Size: 0x1]
	Widget_PanelBase_C* Panel;//[Offset: 0x878, Size: 0x4]
	Widget_PanelBase_C* K2Node_DynamicCast_AsWidget_Panel_Base;//[Offset: 0x87c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	Margin K2Node_MakeStruct_Margin;//[Offset: 0x884, Size: 0x10]
	void SetPanelBrush(FName bpp__BrushTag__pf, out SlateBrush bpp__Brush__pf);// 0x403cf40
	void SetContentWidget(Widget_ComponentWidget_C* bpp__Widget__pf, byte bpp__HorizontalAlignment__pf, byte bpp__VerticalAlignment__pf);// 0x403ce38
	void GetContentWidget(out UserWidget* bpp__Widget__pf);// 0x3e47214

--------------------------------
Class: Widget_PanelBase_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	FName K2Node_CustomEvent_BrushTag;//[Offset: 0x1c0, Size: 0x8]
	SlateBrush K2Node_CustomEvent_Brush;//[Offset: 0x1c8, Size: 0x80]
	void SetPanelBrush(FName bpp__BrushTag__pf, out const SlateBrush bpp__Brush__pf__const);// 0x3fe8724
	void SetContentWidget(Widget_ComponentWidget_C* bpp__Widget__pf, byte bpp__HorizontalAlignment__pf, byte bpp__VerticalAlignment__pf);// 0x3fe861c
	void GetContentWidget(out UserWidget* bpp__Widget__pf);// 0x3fe858c

--------------------------------
Class: WidgetComponent_FindPlayers_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Widget_FindPlayers_C* FindWidget;//[Offset: 0x860, Size: 0x4]
	FString SearchQuery;//[Offset: 0x864, Size: 0xc]
	FString LastSearchQuery;//[Offset: 0x870, Size: 0xc]
	TimerHandle SubmitSearchTimerHandle;//[Offset: 0x880, Size: 0x8]
	float SubmitSearchTime;//[Offset: 0x888, Size: 0x4]
	bool bHasSearchQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 0x1]
	delegate OnSearchResultChanged;//[Offset: 0x890, Size: 0xc]
	OnlineUserWrapper[] K2Node_MakeArray_Array;//[Offset: 0x89c, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x8a8, Size: 0x10]
	Widget_FindPlayers_C* K2Node_DynamicCast_AsWidget_Find_Players;//[Offset: 0x8b8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x8c0, Size: 0x10]
	int K2Node_CustomEvent_LocalPlayerIndex;//[Offset: 0x8d0, Size: 0x4]
	FString K2Node_CustomEvent_Query;//[Offset: 0x8d4, Size: 0xc]
	FString K2Node_CustomEvent_Namespace;//[Offset: 0x8e0, Size: 0xc]
	OnlineUserWrapper[] K2Node_CustomEvent_FoundPlayers;//[Offset: 0x8ec, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0x8f8, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0x904, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x908, Size: 0x10]
	FString CallFunc_GetSearchQuery_SearchQuery;//[Offset: 0x918, Size: 0xc]
	void OnSearchTextChanged__DelegateSignature();// 0x4528238
	void OnSearchResultChanged__DelegateSignature(out OnlineUserWrapper[] bpp__FoundPlayers__pf, bool bpp__bHasSearchQuery__pf);// 0x4528238
	void SubmitSearch();// 0x3eaf338
	void SearchTextChanged();// 0x3e4cd14
	void FindPlayersComlete(int bpp__LocalPlayerIndex__pf, FString bpp__Query__pf__const, FString bpp__Namespace__pf__const, out const OnlineUserWrapper[] bpp__FoundPlayers__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x4036300

--------------------------------
Class: Widget_FindPlayers_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Button* ClearSearchButton;//[Offset: 0x1c0, Size: 0x4]
	EditableTextBox* SearchTextBox;//[Offset: 0x1c4, Size: 0x4]
	delegate OnSearchTextChanged;//[Offset: 0x1c8, Size: 0xc]
	bool bRequestRedrawOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	FText K2Node_ComponentBoundEvent_Text1;//[Offset: 0x1d8, Size: 0xc]
	FText K2Node_ComponentBoundEvent_Text;//[Offset: 0x1e4, Size: 0xc]
	byte K2Node_ComponentBoundEvent_CommitMethod;//[Offset: 0x1f0, Size: 0x1]
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x1f4, Size: 0x38]
	float K2Node_Event_InDeltaTime;//[Offset: 0x22c, Size: 0x4]
	void OnSearchTextChanged__DelegateSignature();// 0x4528238
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x3fbd1b8
	void GetSearchQuery(out FString bpp__SearchQuery__pf);// 0x3fcecb0
	void BndEvt__SearchTextBox_K2Node_ComponentBoundEvent_29_OnEditableTextBoxChangedEvent__DelegateSignature(out const FText bpp__Text__pf__const);// 0x3fceb9c
	void BndEvt__SearchTextBox_K2Node_ComponentBoundEvent_0_OnEditableTextBoxCommittedEvent__DelegateSignatur(out const FText bpp__Text__pf__const, byte bpp__CommitMethod__pf);// 0x3fcea44
	void BndEvt__ClearSearchButton_K2Node_ComponentBoundEvent_83_OnButtonClickedEvent__DelegateSignature();// 0x3e326f4

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0xdc, Size: 0xc]
	delegate TextDelegate;//[Offset: 0xe8, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0xf8, Size: 0x760]
	SlateWidgetStyleAsset* Style;//[Offset: 0x858, Size: 0x4]
	FText HintText;//[Offset: 0x85c, Size: 0xc]
	delegate HintTextDelegate;//[Offset: 0x868, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x878, Size: 0x40]
	LinearColor ForegroundColor;//[Offset: 0x8b8, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x8c8, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x8d8, Size: 0x10]
	bool IsReadonly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0x8ec, Size: 0x4]
	Margin Padding;//[Offset: 0x8f0, Size: 0x10]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x901, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x902, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x903, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x905, Size: 0x1]
	byte KeyboardType;//[Offset: 0x906, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x907, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x908, Size: 0x1]
	byte Justification;//[Offset: 0x909, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x90a, Size: 0x3]
	delegate OnTextChanged;//[Offset: 0x910, Size: 0xc]
	delegate OnTextCommitted;//[Offset: 0x91c, Size: 0xc]
	void SetText(FText InText);// 0x51d97a8
	void SetIsReadOnly(bool bReadOnly);// 0x51d9728
	void SetIsPassword(bool bIsPassword);// 0x51d96a8
	void SetHintText(FText InText);// 0x51d9528
	void SetError(FText InError);// 0x51d93a8
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x4528238
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x4528238
	bool HasError();// 0x51d9380
	FText GetText();// 0x51d92bc
	void ClearError();// 0x51d92a8

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x80]
	SlateBrush BackgroundImageHovered;//[Offset: 0x88, Size: 0x80]
	SlateBrush BackgroundImageFocused;//[Offset: 0x108, Size: 0x80]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x188, Size: 0x80]
	Margin Padding;//[Offset: 0x208, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x218, Size: 0x40]
	SlateColor ForegroundColor;//[Offset: 0x258, Size: 0x1c]
	SlateColor BackgroundColor;//[Offset: 0x274, Size: 0x1c]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x290, Size: 0x1c]
	Margin HScrollBarPadding;//[Offset: 0x2ac, Size: 0x10]
	Margin VScrollBarPadding;//[Offset: 0x2bc, Size: 0x10]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x2d0, Size: 0x490]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x4]
	Object* FontMaterial;//[Offset: 0x4, Size: 0x4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 0x1c]
	FName TypefaceFontName;//[Offset: 0x30, Size: 0x8]
	int Size;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x4]
	LinearColor OutlineColor;//[Offset: 0xc, Size: 0x10]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x80]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x88, Size: 0x80]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x108, Size: 0x80]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x188, Size: 0x80]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x208, Size: 0x80]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x288, Size: 0x80]
	SlateBrush NormalThumbImage;//[Offset: 0x308, Size: 0x80]
	SlateBrush HoveredThumbImage;//[Offset: 0x388, Size: 0x80]
	SlateBrush DraggedThumbImage;//[Offset: 0x408, Size: 0x80]
	float InactiveThumbOpacity;//[Offset: 0x488, Size: 0x4]

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: WidgetComponent_TabBar_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x860, Size: 0xc]
	DataTable* OverrideRegularTextStyleSet;//[Offset: 0x86c, Size: 0x4]
	DataTable* OverrideSelectedTextStyleSet;//[Offset: 0x870, Size: 0x4]
	float LineHeightPercentageOverride;//[Offset: 0x874, Size: 0x4]
	float TextHorizontalScaleOverride;//[Offset: 0x878, Size: 0x4]
	int RegularTranslucentSortPriority;//[Offset: 0x87c, Size: 0x4]
	int SelectedTranslucentSortPriority;//[Offset: 0x880, Size: 0x4]
	int Index;//[Offset: 0x884, Size: 0x4]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	Widget_TabBarBase_C* TabBarWidget;//[Offset: 0x88c, Size: 0x4]
	delegate OnWidgetClicked;//[Offset: 0x890, Size: 0xc]
	Vector RegularOffset;//[Offset: 0x89c, Size: 0xc]
	Vector SelectedOffset;//[Offset: 0x8a8, Size: 0xc]
	bool bBasePaddingInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 0x1]
	Vector2D BasePadding;//[Offset: 0x8b8, Size: 0x8]
	void OnWidgetClicked__DelegateSignature(WidgetComponent_TabBar_C* bpp__WidgetComponent__pf);// 0x4528238
	void SetTextHorizontalScale(float bpp__Scale__pf);// 0x4042d7c
	void SetText(out const FText bpp__Text__pf__const);// 0x4042c68
	void SetSelectedTextStyleSet(DataTable* bpp__TextStyleSet__pf);// 0x4042be8
	void SetSelectedState(bool bpp__bValue__pf);// 0x4042b60
	void SetRegularTextStyleSet(DataTable* bpp__TextStyleSet__pf);// 0x4042ae0
	void SetLineHeightPercentage(float bpp__Value__pf);// 0x3e4c3a8
	void SelectedStateChanged();// 0x3e4cd30
	void InitWidget();// 0x3eb0860
	void HandleClicked();// 0x3e4c30c

--------------------------------
Class: Widget_TabBarBase_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	void SetTextHorizontalScale(float bpp__Scale__pf);// 0x3e456b0
	void SetText(out const FText bpp__Text__pf__const);// 0x3fe9afc
	void SetSelectedTextStyleSet(DataTable* bpp__TextStyleSet__pf);// 0x3e5121c
	void SetSelectedState(bool bpp__bValue__pf, out Vector2D bpp__ExtraPadding__pf);// 0x3ffa408
	void SetRegularTextStyleSet(DataTable* bpp__TextStyleSet__pf);// 0x3e7d8d4
	void SetLineHeightPercentage(float bpp__Value__pf);// 0x3f13090

--------------------------------
Class: Widget_Squad_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Border* Background;//[Offset: 0x1c0, Size: 0x4]
	TextBlock* MessageText;//[Offset: 0x1c4, Size: 0x4]
	ScrollBox* ScrollBox;//[Offset: 0x1c8, Size: 0x4]
	VerticalBox* SquadList;//[Offset: 0x1cc, Size: 0x4]
	WidgetActor_Squad_C* SquadWidgetActor;//[Offset: 0x1d0, Size: 0x4]
	int NumSlots;//[Offset: 0x1d4, Size: 0x4]
	int NumMembers;//[Offset: 0x1d8, Size: 0x4]
	UniqueNetIdRepl SquadId;//[Offset: 0x1dc, Size: 0x18]
	UniqueNetIdRepl LocalPlayerId;//[Offset: 0x1f4, Size: 0x18]
	bool bHasNotReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 0x1]
	bool bShouldRequestRedrawNextTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 0x1]
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x210, Size: 0x38]
	float K2Node_Event_InDeltaTime;//[Offset: 0x248, Size: 0x4]
	float K2Node_ComponentBoundEvent_CurrentOffset;//[Offset: 0x24c, Size: 0x4]
	void UpdateSquadState(out OnlineSquadState bpp__SquadState__pf);// 0x3ff7d98
	void UpdateSquadSlots(out OnlineSquadSlot[] bpp__SquadSlots__pf);// 0x3ff7cd4
	void UpdateSquadSlot(out OnlineSquadSlot bpp__SquadSlot__pf);// 0x3ff7bec
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x3fca244
	void ResetState();// 0x3e5e93c
	void BndEvt__ScrollBox_K2Node_ComponentBoundEvent_0_OnUserScrolledEvent__DelegateSignature(float bpp__CurrentOffset__pf);// 0x3e5129c

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0xe9, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0xea, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xeb, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0xec, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x100, Size: 0x10]
	Margin Padding;//[Offset: 0x110, Size: 0x10]
	SlateBrush Background;//[Offset: 0x120, Size: 0x80]
	delegate BackgroundDelegate;//[Offset: 0x1a0, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x1b0, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x1c0, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x1d0, Size: 0x8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1d8, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x1e8, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x1f8, Size: 0x10]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x208, Size: 0x10]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x51d14a4
	void SetPadding(Margin InPadding);// 0x51d141c
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x51d13a4
	void SetDesiredSizeScale(Vector2D InScale);// 0x51d1334
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x51d12b8
	void SetBrushFromTexture(Texture2D* Texture);// 0x51d1240
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x51d1240
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x51d11c8
	void SetBrushColor(LinearColor InBrushColor);// 0x51d114c
	void SetBrush(out const SlateBrush InBrush);// 0x51d0f1c
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x51d0ef4

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xfc, Size: 0xc]
	delegate TextDelegate;//[Offset: 0x108, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x118, Size: 0x1c]
	delegate ColorAndOpacityDelegate;//[Offset: 0x138, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x148, Size: 0x40]
	Vector2D ShadowOffset;//[Offset: 0x188, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x190, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1a0, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x1b0, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 0x1]
	void SetText(FText InText);// 0x51eeac8
	void SetShadowOffset(Vector2D InShadowOffset);// 0x51eea58
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x51ee9dc
	void SetOpacity(float InOpacity);// 0x51ee964
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x51ee8ec
	void SetJustification(byte InJustification);// 0x51ee874
	void SetFont(SlateFontInfo InFontInfo);// 0x51ee690
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x51ee4a0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x51ee420
	FText GetText();// 0x51ee35c
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x51ee334
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x51ee30c

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0xf0, Size: 0x208]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x2f8, Size: 0x490]
	SlateWidgetStyleAsset* Style;//[Offset: 0x788, Size: 0x4]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x78c, Size: 0x4]
	byte Orientation;//[Offset: 0x790, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0x791, Size: 0x1]
	enum HiddenScrollBarVisibility;//[Offset: 0x792, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x793, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x794, Size: 0x8]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 0x1]
	bool bHideMobileScrollBarWhenNotInUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79d, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79e, Size: 0x1]
	bool bSnapMouseOnReleaseScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79f, Size: 0x1]
	enum NavigationDestination;//[Offset: 0x7a0, Size: 0x1]
	float NavigationScrollPadding;//[Offset: 0x7a4, Size: 0x4]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]
	delegate OnUserScrolled;//[Offset: 0x7ac, Size: 0xc]
	void SetSnapMouseOnReleaseScroll(bool bSnap);// 0x51e8698
	void SetScrollOffset(float NewScrollOffset);// 0x51e8620
	void SetScrollBarVisibility(enum NewScrollBarVisibility);// 0x51e85a8
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x51e8524
	void SetOrientation(byte NewOrientation);// 0x51e84ac
	void SetHideMobileScrollBarWhenNotInUse(bool bHide);// 0x51e842c
	void SetHiddenScrollBarVisibility(enum NewHiddenScrollBarVisibility);// 0x51e83b4
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x51e8334
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x51e82b4
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination);// 0x51e81a8
	void ScrollToStart();// 0x51e8194
	void ScrollToEnd();// 0x51e8180
	bool IsScrolling();// 0x51e8150
	float GetViewOffsetFraction();// 0x51e8128
	bool GetSnapMouseOnReleaseScroll();// 0x51e8100
	float GetScrollOffset();// 0x51e80d8

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x80]
	SlateBrush BottomShadowBrush;//[Offset: 0x88, Size: 0x80]
	SlateBrush LeftShadowBrush;//[Offset: 0x108, Size: 0x80]
	SlateBrush RightShadowBrush;//[Offset: 0x188, Size: 0x80]

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x51fc0b0

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x34, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x3c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x3d, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x51dba68
	void SetSize(SlateChildSize InSize);// 0x51db9d8
	void SetPadding(Margin InPadding);// 0x51db950
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x51db8d8

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: OnlineSquadState
	UniqueNetIdRepl SquadId;//[Offset: 0x0, Size: 0x18]
	OnlineSquadSlot[] Slots;//[Offset: 0x18, Size: 0xc]
	OnlineServiceAttributes Attributes;//[Offset: 0x24, Size: 0x3c]

--------------------------------
Class: OnlineSquadSlot
	int Index;//[Offset: 0x0, Size: 0x4]
	UniqueNetIdRepl PlayerId;//[Offset: 0x4, Size: 0x18]
	FString PlayerName;//[Offset: 0x1c, Size: 0xc]
	OnlineServiceAttributes Attributes;//[Offset: 0x28, Size: 0x3c]
	enum State;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: OnlineServiceAttributes

--------------------------------
Class: Widget_SquadTitle_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Border* Background;//[Offset: 0x1c0, Size: 0x4]
	TextBlock* SquadLabel;//[Offset: 0x1c4, Size: 0x4]
	TextBlock* SquadMemberCounterText;//[Offset: 0x1c8, Size: 0x4]
	void SetSquadCounters(int bpp__NumMembers__pf, int bpp__NumSlots__pf);// 0x3ff8d30

--------------------------------
Class: WidgetActor_SquadMatchmaking_C.WidgetActor_Matchmaking_C.WidgetActor_C.Actor.Object
	WidgetActor_Squad_C* SquadWidgetActor;//[Offset: 0x3e8, Size: 0x4]
	float AwgWaitTime;//[Offset: 0x3ec, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_Event_WidgetComponent;//[Offset: 0x3f0, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x3f8, Size: 0x10]
	void TickMM();// 0x37cd4c4
	void HandleMMIntemediateResult(MatchmakingIntermediateResult bpp__IntermediateResult__pf);// 0x402c414

--------------------------------
Class: WidgetActor_Matchmaking_C.WidgetActor_C.Actor.Object
	WidgetComponent_WithEffects_C* TitleWidgetComponent;//[Offset: 0x2b8, Size: 0x4]
	WidgetComponent_Button_C* CancelButtonWidgetComponent;//[Offset: 0x2bc, Size: 0x4]
	WidgetComponent_WithEffects_C* MMProgressWidgetComponent;//[Offset: 0x2c0, Size: 0x4]
	BoxLayoutComponent* TopHorizontalLayout;//[Offset: 0x2c4, Size: 0x4]
	BoxLayoutComponent* VerticalLayout;//[Offset: 0x2c8, Size: 0x4]
	Widget_MMProgress_C* MMProgressWidget;//[Offset: 0x2cc, Size: 0x4]
	FindOnlineSessionsProxy* SessionSearchProxy;//[Offset: 0x2d0, Size: 0x4]
	TimerHandle TickTimerHandle;//[Offset: 0x2d8, Size: 0x8]
	float StartTime;//[Offset: 0x2e0, Size: 0x4]
	int AvgWaitTimeMs;//[Offset: 0x2e4, Size: 0x4]
	AnchorsLayoutSlotAttributes AnchorsLayoutAttributes;//[Offset: 0x2e8, Size: 0x3c]
	FindOnlineSessionsProxy* Temp_object_Variable;//[Offset: 0x324, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x328, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x338, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x348, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x358, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0x368, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate5;//[Offset: 0x378, Size: 0x10]
	FindOnlineSessionsProxy* K2Node_CustomEvent_FindOnlineSessionsProxy1;//[Offset: 0x388, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate6;//[Offset: 0x390, Size: 0x10]
	FindOnlineSessionsProxy* K2Node_CustomEvent_FindOnlineSessionsProxy;//[Offset: 0x3a0, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent;//[Offset: 0x3a4, Size: 0x4]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x3a8, Size: 0x4]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component;//[Offset: 0x3ac, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	interface class FloatProperty* CallFunc_AddAnchorsLayoutChild_Child_CastInput;//[Offset: 0x3b4, Size: 0x8]
	PlayerController* CallFunc_GetPlayerController_ReturnValue;//[Offset: 0x3bc, Size: 0x4]
	JoinSessionCallbackProxy* CallFunc_JoinSession_ReturnValue;//[Offset: 0x3c0, Size: 0x4]
	DestroySessionCallbackProxy* CallFunc_DestroySession_ReturnValue;//[Offset: 0x3c4, Size: 0x4]
	bool CallFunc_IsValid_ReturnValue2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	bool CallFunc_IsValid_ReturnValue3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]
	FindOnlineSessionsProxy* CallFunc_FindSessions_ReturnValue;//[Offset: 0x3cc, Size: 0x4]
	bool CallFunc_IsValid_ReturnValue4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate7;//[Offset: 0x3d8, Size: 0x10]
	void OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4528238
	void TickSeconds();// 0x34dae90
	void StartMM();// 0x3e723b0
	void ReceiveBeginPlay();// 0x4009614
	void OnSuccess_7941A4234352FDE39A85D496CD361204();// 0x3e72394
	void OnSuccess_5106472C434A5372D40DFDBEBFF52AD3(FindOnlineSessionsProxy* bpp__FindOnlineSessionsProxy__pf);// 0x4019014
	void OnSuccess_0C471CB848AB1BA4C69C069FE81B4C4F();// 0x3e723cc
	void OnFailure_7941A4234352FDE39A85D496CD361204();// 0x3e723e8
	void OnFailure_5106472C434A5372D40DFDBEBFF52AD3(FindOnlineSessionsProxy* bpp__FindOnlineSessionsProxy__pf);// 0x4011ccc
	void OnFailure_0C471CB848AB1BA4C69C069FE81B4C4F();// 0x4008904
	void InitWidgets();// 0x3e98664
	void InitButtons();// 0x3e721a8
	void CancelMM();// 0x37cd4a8
	void CancelButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e977ec
	void FindOnlineSessionsCompleteDelegate__DelegateSignature(FindOnlineSessionsProxy* bpp__FindOnlineSessionsProxy__pf);// 0x4528238
	void EmptyOnlineDelegate__DelegateSignature();// 0x4528238

--------------------------------
Class: MatchmakingIntermediateResult
	int NumPlayers;//[Offset: 0x0, Size: 0x4]
	int MaxPlayers;//[Offset: 0x4, Size: 0x4]
	float WaitTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Widget_MMProgress_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	TextBlock* AvgWaitTimeText;//[Offset: 0x1c0, Size: 0x4]
	RichTextBlock* WaitTimeRichText;//[Offset: 0x1c4, Size: 0x4]
	void SetWaitTime(float bpp__Value__pf);// 0x3e5ec58
	void SetAvgWaitTime(float bpp__Value__pf);// 0x3e5129c

--------------------------------
Class: FindOnlineSessionsProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	FString GetServerName(int ResultIndex);// 0x34f49f8
	BlueprintSessionResult GetSearchResult(int ResultIndex);// 0x34f4958
	int GetPingInMs(int ResultIndex);// 0x34f48d8
	int GetNumResults();// 0x34f48b0
	int GetMaxNumPlayers(int ResultIndex);// 0x34f4830
	int GetCurrentNumPlayers(int ResultIndex);// 0x34f47b0
	static FindOnlineSessionsProxy* FindSessionsWithAttributes(Object* WorldContextObject, PlayerController* PlayerController, out const OnlineServiceKeyValue[] SearchAttributes, int MaxResults, bool bUseLAN);// 0x34f45c0
	static FindOnlineSessionsProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0x34f4474
	void FindOnlineSessionsCompleteDelegate__DelegateSignature(FindOnlineSessionsProxy* FindOnlineSessionsProxy);// 0x4528238
	void CancelFindSessions();// 0x34f4460

--------------------------------
Class: OnlineBlueprintCallProxyBase.Object
	void Activate();// 0x36fd5d0

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: OnlineServiceKeyValue
	FName Key;//[Offset: 0x0, Size: 0x8]
	FString Value;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0x34d6544

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0x34d37f4

--------------------------------
Class: OnlineSquadPermissions
	bool bCanInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanKick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanSummon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanStartMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: OnlineServiceRequestPtr

--------------------------------
Class: GameMode_Match_C.BattleGameMode.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x318, Size: 0x4]
	FName MaxMatchSecondsAttributeName;//[Offset: 0x320, Size: 0x8]
	FName MaxPlayersJoinSecondsAttributeName;//[Offset: 0x328, Size: 0x8]
	int MaxMatchSeconds;//[Offset: 0x330, Size: 0x4]
	FName FriendlyDamageAttributeName;//[Offset: 0x338, Size: 0x8]
	bool bFriendlyDamageAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float TestSpawnSpotCollisionRadius;//[Offset: 0x344, Size: 0x4]
	PlayerStart*[] SpawnSpots;//[Offset: 0x348, Size: 0xc]
	PlayerStart* ForceSpawnSpot;//[Offset: 0x354, Size: 0x4]
	FName SubmitBotsMatchResultsAttributeName;//[Offset: 0x358, Size: 0x8]
	int MatchSessionFinishPreventionCounter;//[Offset: 0x360, Size: 0x4]
	TimerHandle ForceMatchSessionFinishTimerHandle;//[Offset: 0x368, Size: 0x8]
	float ForceMatchSessionFinishTimeout;//[Offset: 0x370, Size: 0x4]
	FName KillScoreMultiplierAttributeName;//[Offset: 0x378, Size: 0x8]
	FName DamageScoreMultiplierAttributeName;//[Offset: 0x380, Size: 0x8]
	FName EquipmentDestructionScoreMultiplierAttributeName;//[Offset: 0x388, Size: 0x8]
	FName EMPDamageScoreMultiplierAttributeName;//[Offset: 0x390, Size: 0x8]
	float EmpDamageScoreMultiplier;//[Offset: 0x398, Size: 0x4]
	float ModeEmpDamageScoreMultiplier;//[Offset: 0x39c, Size: 0x4]
	float KillScoreMultiplier;//[Offset: 0x3a0, Size: 0x4]
	float ModeKillScoreMultiplier;//[Offset: 0x3a4, Size: 0x4]
	float DamageScoreMultiplier;//[Offset: 0x3a8, Size: 0x4]
	float ModeDamageScoreMultiplier;//[Offset: 0x3ac, Size: 0x4]
	float ModeEquipmentDestructionScoreMultiplier;//[Offset: 0x3b0, Size: 0x4]
	float EquipmentDestructionScoreMultiplier;//[Offset: 0x3b4, Size: 0x4]
	float MaxPlayersJoinTime;//[Offset: 0x3b8, Size: 0x4]
	bool bSubmitBotsMatchResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	Actor* TopActor;//[Offset: 0x3c0, Size: 0x4]
	FName[] RequestingMatchAttributes;//[Offset: 0x3c4, Size: 0xc]
	float PlayerScore;//[Offset: 0x3d0, Size: 0x4]
	FName DisallowedItemsAttributeName;//[Offset: 0x3d8, Size: 0x8]
	PlayerProfilePurchasedItem* OverrideSquad;//[Offset: 0x3e0, Size: 0x4]
	byte[] OverrideSquadSerializedData;//[Offset: 0x3e4, Size: 0xc]
	FName SquadOverrideModeAttribbuteName;//[Offset: 0x3f0, Size: 0x8]
	FName SessionOwnerIdAttributeName;//[Offset: 0x3f8, Size: 0x8]
	FName SquadOverrideConfiguredOwnerIdAttributeName;//[Offset: 0x400, Size: 0x8]
	enum SquadOverrideStatus;//[Offset: 0x408, Size: 0x1]
	delegate SquadOverrideStatusChanged;//[Offset: 0x40c, Size: 0xc]
	PlayerProfilePurchasedItem*[] K2Node_CustomEvent_Items;//[Offset: 0x418, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0x424, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0x430, Size: 0x1]
	PlayerProfilePurchasedItem* CallFunc_Array_Get_Item;//[Offset: 0x434, Size: 0x4]
	int Temp_int_Variable;//[Offset: 0x438, Size: 0x4]
	bool CallFunc_IsMatchSessionFinishAllowed_MatchFinishSessionAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x43d, Size: 0x1]
	GameState* K2Node_DynamicCast_AsGame_State;//[Offset: 0x440, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer1;//[Offset: 0x448, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg2;//[Offset: 0x44c, Size: 0xc]
	byte K2Node_CustomEvent_Status2;//[Offset: 0x458, Size: 0x1]
	OnlineServiceAttributesContainer* CallFunc_PrepareMatchAttributes_OutAttributesContainer;//[Offset: 0x45c, Size: 0x4]
	bool CallFunc_ProcessMatchAttributes_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	Controller* K2Node_CustomEvent_Controller3;//[Offset: 0x464, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller2;//[Offset: 0x468, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller1;//[Offset: 0x46c, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x470, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x471, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x473, Size: 0x1]
	Controller* K2Node_CustomEvent_Controller;//[Offset: 0x474, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x478, Size: 0x10]
	FName K2Node_Event_NewState;//[Offset: 0x488, Size: 0x8]
	FName K2Node_Event_OldState;//[Offset: 0x490, Size: 0x8]
	bool CallFunc_BuildRequestMatchAttributesNames_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	bool CallFunc_MatchStartedAndConfigured_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1]
	bool CallFunc_MatchStartedAndConfigured_bResult1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 0x1]
	PlayerController* K2Node_Event_NewPlayer;//[Offset: 0x49c, Size: 0x4]
	PlayerController* K2Node_Event_NewPlayer1;//[Offset: 0x4a0, Size: 0x4]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match;//[Offset: 0x4a4, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match1;//[Offset: 0x4ac, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	Controller* K2Node_Event_ExitingController;//[Offset: 0x4b4, Size: 0x4]
	OnlineServiceAttributesContainer* CallFunc_PrepareMatchAttributes_OutAttributesContainer1;//[Offset: 0x4b8, Size: 0x4]
	bool CallFunc_ProcessMatchAttributes_bResult1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	Pawn* K2Node_CustomEvent_Pawn3;//[Offset: 0x4c0, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller4;//[Offset: 0x4c4, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x4c8, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x4d8, Size: 0x10]
	int Temp_int_Variable1;//[Offset: 0x4e8, Size: 0x4]
	int Temp_int_EndIndex_Variable;//[Offset: 0x4ec, Size: 0x4]
	int Temp_int_Variable2;//[Offset: 0x4f0, Size: 0x4]
	Pawn* K2Node_CustomEvent_Pawn2;//[Offset: 0x4f4, Size: 0x4]
	int Temp_int_Index_Variable;//[Offset: 0x4f8, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches2;//[Offset: 0x4fc, Size: 0x1]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fd, Size: 0x1]
	Object* K2Node_CustomEvent_DestructedObject;//[Offset: 0x500, Size: 0x4]
	Controller* K2Node_CustomEvent_EventInstigator;//[Offset: 0x504, Size: 0x4]
	Object* K2Node_CustomEvent_DamageCauser;//[Offset: 0x508, Size: 0x4]
	interface class FloatProperty* K2Node_CustomEvent_DamageableInterface;//[Offset: 0x50c, Size: 0x8]
	PlayerState_Match_C* K2Node_DynamicCast_AsPlayer_State_Match;//[Offset: 0x514, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	Pawn* K2Node_DynamicCast_AsPawn;//[Offset: 0x51c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches3;//[Offset: 0x521, Size: 0x1]
	PlayerState_Match_C* K2Node_DynamicCast_AsPlayer_State_Match1;//[Offset: 0x524, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	bool K2Node_SwitchEnum3_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x530, Size: 0x10]
	Pawn* K2Node_CustomEvent_Pawn1;//[Offset: 0x540, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches4;//[Offset: 0x544, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0x548, Size: 0x10]
	bool K2Node_SwitchEnum4_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1]
	interface class FloatProperty* K2Node_DynamicCast_AsEquipment_Controller_Interface;//[Offset: 0x55c, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	int K2Node_CustomEvent_SlotIndex;//[Offset: 0x568, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment;//[Offset: 0x56c, Size: 0x4]
	Object* K2Node_CustomEvent_OldEquipment;//[Offset: 0x570, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches5;//[Offset: 0x574, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate5;//[Offset: 0x578, Size: 0x10]
	bool K2Node_SwitchEnum5_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate6;//[Offset: 0x590, Size: 0x10]
	Pawn* K2Node_CustomEvent_Pawn;//[Offset: 0x5a0, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate7;//[Offset: 0x5a8, Size: 0x10]
	FName K2Node_CustomEvent_SubsystemName;//[Offset: 0x5b8, Size: 0x8]
	int K2Node_CustomEvent_LocalUserIndex;//[Offset: 0x5c0, Size: 0x4]
	bool K2Node_CustomEvent_bWasSuccessful;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1]
	UniqueNetIdRepl K2Node_CustomEvent_UserId;//[Offset: 0x5c8, Size: 0x18]
	FString K2Node_CustomEvent_Error;//[Offset: 0x5e0, Size: 0xc]
	OnlineServiceAttributesContainer* K2Node_CustomEvent_AttributesContainer;//[Offset: 0x5ec, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg1;//[Offset: 0x5f0, Size: 0xc]
	byte K2Node_CustomEvent_Status1;//[Offset: 0x5fc, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate8;//[Offset: 0x600, Size: 0x10]
	FString CallFunc_GetAttributeAsString_OutValue;//[Offset: 0x610, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate9;//[Offset: 0x620, Size: 0x10]
	void SquadOverrideStatusChanged__DelegateSignature(enum bpp__NewStatus__pf, GameMode_Match_C* bpp__GameMode__pf);// 0x4528238
	void OnEmpDamagedOnServer__DelegateSignature(Object* bpp__DamagedObject__pf, float bpp__DamageAmount__pf, Controller* bpp__Instigator__pf, Object* bpp__DamageCauser__pf);// 0x4528238
	void UserConstructionScript();// 0x3e48318
	void UnbindFromCollectedDamage(Controller* bpp__Controller__pf);// 0x3e7ee88
	void UnbindFromAllControllersCollectedDamage();// 0x3e91bb0
	void SetupSquadOverrideWithOwnerId(out const UniqueNetIdRepl bpp__SquadOwnerId__pf__const);// 0x3e91a48
	void SetupSquadOverride();// 0x3e91a2c
	void SetupSessionOwnerSquadOverride(OnlineSessionPtr bpp__Session__pf);// 0x3e919ac
	void SetupPawnEquipmentHandling(Pawn* bpp__Pawn__pf);// 0x3e7ec24
	void SetupPawnEmpDamageHandling(Pawn* bpp__Pawn__pf);// 0x3e9192c
	void SetupPawnDestructionHandling(Pawn* bpp__Pawn__pf);// 0x3e918ac
	void SetupMatchID();// 0x3e91890
	void SetupConfiguredSquadOverride();// 0x3e91874
	void SetSquadOverrideStatus(enum bpp__NewStatus__pf);// 0x3e917f4
	void SetMaxMatchSeconds(int bpp__MaxMatchSeconds__pf);// 0x3e91774
	void SerializeOverrideSquad();// 0x3e91758
	void RemoveMatchSessionFinishPrevention();// 0x3e480d4
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e916d8
	void ReceiveBeginPlay();// 0x3e470bc
	void ProcessSessionGameOptionsBeforeMatchAttributes();// 0x3e916bc
	void ProcessMatchAttributes(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, out bool bpp__bResult__pf);// 0x3e915e8
	void PrepareMatchAttributes(OnlineServiceAttributesContainer* bpp__InAttributesContainer__pf, out OnlineServiceAttributesContainer* bpp__OutAttributesContainer__pf);// 0x3e91514
	void PawnPreDestructed(Object* bpp__DestructedObject__pf, Controller* bpp__EventInstigator__pf, Object* bpp__DamageCauser__pf, out const interface classNone bpp__DamageableInterface__pf);// 0x3e7eca4
	void PawnEquipmentChanged(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf, Object* bpp__OldEquipment__pf);// 0x3e9140c
	void PawnEmpDamaged(Object* bpp__DamagedObject__pf, float bpp__DamageAmount__pf, Controller* bpp__Instigator__pf, Object* bpp__DamageCauser__pf);// 0x3e912bc
	void OnPawnSpawned(Pawn* bpp__Pawn__pf, Controller* bpp__Controller__pf);// 0x3e911f8
	void MergeSessionGameOptions(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf);// 0x3e91178
	void MatchTimeOut();// 0x3e9115c
	void MatchStartedAndConfigured(out bool bpp__bResult__pf);// 0x3e910cc
	void MatchStarted();// 0x3e910b0
	void MatchEnded();// 0x3e91094
	void MatchAttributesReceived(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e90f74
	void K2_PostLogin(PlayerController* bpp__NewPlayer__pf);// 0x3e90ef4
	void K2_OnSetMatchState(FName bpp__NewState__pf, FName bpp__OldState__pf);// 0x3e90e20
	void K2_OnLogout(Controller* bpp__ExitingController__pf);// 0x3e90da0
	void IsSuitableSpawnSpot(PlayerStart* bpp__SpawnSpot__pf, Controller* bpp__Controller__pf, int bpp__ZonesMask__pf, out bool bpp__bSuitable__pf);// 0x3e90c40
	void IsMatchSessionFinishAllowed(out bool bpp__MatchFinishSessionAllowed__pf);// 0x3e90bb0
	void GetSquadOverrideStatus(out enum bpp__Status__pf);// 0x3e90b20
	void GetOverrideSquadComplete(out const PlayerProfilePurchasedItem*[] bpp__Items__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e909d4
	void GetMaxMatchSeconds(out int bpp__MaxMatchSeconds__pf);// 0x3e90944
	void GetConfiguredSquadOverrideSettingsComplete(OnlineServiceAttributesContainer* bpp__AttributesContainer__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3e90824
	void FinishMatchSession();// 0x3e90808
	void EquipmentDestructed(Object* bpp__DestructedObject__pf, Controller* bpp__EventInstigator__pf, Object* bpp__DamageCauser__pf, out const interface classNone bpp__DamageableInterface__pf);// 0x3e906a4
	void ControllerReadyToStart(Controller* bpp__Controller__pf);// 0x3e90624
	void ConfiguredSquadOverrideOwnerLoginComplete(FName bpp__SubsystemName__pf, int bpp__LocalUserIndex__pf, bool bpp__bWasSuccessful__pf, UniqueNetIdRepl bpp__UserId__pf, FString bpp__Error__pf__const);// 0x3e9027c
	void CollectorDamageFlushed(out ActorCollectedDamage[] bpp__CollectedDamage__pf, Controller* bpp__Controller__pf);// 0x3e9018c
	void CheckMatchTimeout();// 0x3e48c94
	void CheckMatchSessionFinishConditions();// 0x3e90170
	void BuildSessionGameOptionsKeys(out FName[] bpp__OutKeys__pf, out bool bpp__bResult__pf);// 0x3e90070
	void BuildRequestMatchAttributesNames(out FName[] bpp__OutArrributes__pf, out bool bpp__bResult__pf);// 0x3e8ff70
	void BlueprintPostInitNewPlayer(PlayerController* bpp__NewPlayer__pf);// 0x3e487bc
	void BindToCollectedDamage(Controller* bpp__Controller__pf);// 0x3e8fef0
	void AddMatchSessionFinishPrevention();// 0x3e491a8
	void AddController(Controller* bpp__Controller__pf);// 0x3e48a5c

--------------------------------
Class: BattleGameMode.GameMode.GameModeBase.Info.Actor.Object
	class Pawn GetPawnClassForController(Controller* InController);// 0x404cedc
	void BlueprintPreInitialize();// 0x4528238
	void BlueprintPostInitNewPlayer(PlayerController* NewPlayer);// 0x4528238
	void BlueprintInitGameState();// 0x4528238

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: PlayerController_Match_C.BattleMechsPlayerController_C.PlayerController.Controller.Actor.Object
	SpectatorControllerComponent_C* SpectatorControllerComponent;//[Offset: 0x558, Size: 0x4]
	WeaponBlockerComponent_C* WeaponBlockerComponent;//[Offset: 0x55c, Size: 0x4]
	PerformanceStatsComponent* PerformanceStats;//[Offset: 0x560, Size: 0x4]
	MatchZoneControllerComponent_C* MatchZoneControllerComponent;//[Offset: 0x564, Size: 0x4]
	MultiActorDamageCollectorComponent* DamageCollector;//[Offset: 0x568, Size: 0x4]
	WidgetInteractionComponent* WidgetInteraction;//[Offset: 0x56c, Size: 0x4]
	ControllerTeamInfoComponent* TeamInfo;//[Offset: 0x570, Size: 0x4]
	AimPointControllerComponent* AimPointController;//[Offset: 0x574, Size: 0x4]
	TargetControllerComponent* TargetController;//[Offset: 0x578, Size: 0x4]
	CameraAimingComponent* CameraAimPoint;//[Offset: 0x57c, Size: 0x4]
	PlayerProfileItem* Squad;//[Offset: 0x580, Size: 0x4]
	int DesiredPawnIndex;//[Offset: 0x584, Size: 0x4]
	CameraManager_Match_C* MatchCameraManager;//[Offset: 0x588, Size: 0x4]
	CameraModifier_Zoom_C* ZoomCameraMod;//[Offset: 0x58c, Size: 0x4]
	float InitialSpawnDelay;//[Offset: 0x590, Size: 0x4]
	int FiringWeaponsMask;//[Offset: 0x594, Size: 0x4]
	Team* TmpTeam;//[Offset: 0x598, Size: 0x4]
	interface class FloatProperty* PawnMovementInterface;//[Offset: 0x59c, Size: 0x8]
	float DampedMoveInputSizeSquared;//[Offset: 0x5a4, Size: 0x4]
	float MoveInputSizeSquaredInterpSpeed;//[Offset: 0x5a8, Size: 0x4]
	float CurrentMovingInputSquaredThreshold;//[Offset: 0x5ac, Size: 0x4]
	float StartMovingInputSquaredThreshold;//[Offset: 0x5b0, Size: 0x4]
	float StopMovingInputSquaredThreshold;//[Offset: 0x5b4, Size: 0x4]
	bool bIsMovingInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	int ServerFiringWeaponsMask;//[Offset: 0x5bc, Size: 0x4]
	int PendingControlledReloadWeaponsMask;//[Offset: 0x5c0, Size: 0x4]
	int ControlledReloadWeaponsMask;//[Offset: 0x5c4, Size: 0x4]
	PlayerControlledWeapon[] LeftWeapons;//[Offset: 0x5c8, Size: 0xc]
	PlayerControlledWeapon[] RightWeapons;//[Offset: 0x5d4, Size: 0xc]
	PlayerControlledWeapon[] MiddleWeapons;//[Offset: 0x5e0, Size: 0xc]
	PlayerControlledWeapon[] SpecialWeapons;//[Offset: 0x5ec, Size: 0xc]
	float MinTimeForRespawn;//[Offset: 0x5f8, Size: 0x4]
	bool bPendingPostLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 0x1]
	int AllowSpawnIndexMask;//[Offset: 0x600, Size: 0x4]
	bool bPendingTestAndSendFiringWeaponsMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1]
	float PendingClientRespawnScheduledDelay;//[Offset: 0x608, Size: 0x4]
	FString MatchID;//[Offset: 0x60c, Size: 0xc]
	bool bMatchFinalized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	BattleMechsGameInstance_C* GameInstance;//[Offset: 0x61c, Size: 0x4]
	delegate PrimarySpawnZonesMaskChangedEvent;//[Offset: 0x620, Size: 0xc]
	float TmpFloatValue;//[Offset: 0x62c, Size: 0x4]
	bool bTmpIsLocalController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 0x1]
	int TeamIndex;//[Offset: 0x634, Size: 0x4]
	int EnabledSpawnZonesMask;//[Offset: 0x638, Size: 0x4]
	int PrimarySpawnZonesMask;//[Offset: 0x63c, Size: 0x4]
	bool bAllowSquadMemberSpawnMultipleTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]
	bool IsZoomRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x641, Size: 0x1]
	bool bUseShootingZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x642, Size: 0x1]
	byte MatchResult;//[Offset: 0x643, Size: 0x1]
	Vector2D RotationInput;//[Offset: 0x644, Size: 0x8]
	interface classNone[] CameraRotationInputDelegates;//[Offset: 0x64c, Size: 0xc]
	float InputPitchExponent;//[Offset: 0x658, Size: 0x4]
	float InputPitchExponentCompensationScale;//[Offset: 0x65c, Size: 0x4]
	float InputPitchFinalScale;//[Offset: 0x660, Size: 0x4]
	float InputYawExponent;//[Offset: 0x664, Size: 0x4]
	float InputYawExponentCompensationScale;//[Offset: 0x668, Size: 0x4]
	float InputYawFinalScale;//[Offset: 0x66c, Size: 0x4]
	bool bDeferProcessPendingControlledReloadWeaponsMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	delegate ControlledReloadWeaponsChangedEvent;//[Offset: 0x674, Size: 0xc]
	int BattleworthyMask;//[Offset: 0x680, Size: 0x4]
	delegate RespawnAbilityChangedEvent;//[Offset: 0x684, Size: 0xc]
	bool bInitializedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	bool bEquipmentEnumerationInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1]
	delegate ControllerSquadAssigned;//[Offset: 0x694, Size: 0xc]
	AzimuthDistanceAimComponent* AzimuthDistanceAimComponent;//[Offset: 0x6a0, Size: 0x4]
	AzimuthDistanceAimComponent*[] AllAzimuthDistanceAimComponents;//[Offset: 0x6a4, Size: 0xc]
	FName DistanceInputAxisName;//[Offset: 0x6b0, Size: 0x8]
	bool bIsAzimuthDistanceAimingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	delegate AimDistanceChangedEvent;//[Offset: 0x6bc, Size: 0xc]
	delegate AzimuthDistanceAimingStateChanged;//[Offset: 0x6c8, Size: 0xc]
	float K2Node_CustomEvent_AxisValue;//[Offset: 0x6d4, Size: 0x4]
	int K2Node_Event_Mask;//[Offset: 0x6d8, Size: 0x4]
	enum CallFunc_GetRespawnAbility_Result;//[Offset: 0x6dc, Size: 0x1]
	Key K2Node_InputActionEvent_Key15;//[Offset: 0x6e0, Size: 0x10]
	Key K2Node_InputActionEvent_Key14;//[Offset: 0x6f0, Size: 0x10]
	Key K2Node_InputActionEvent_Key13;//[Offset: 0x700, Size: 0x10]
	Key K2Node_InputActionEvent_Key12;//[Offset: 0x710, Size: 0x10]
	bool CallFunc_IsPawnBattleworthy_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	interface class MulticastDelegateProperty* CallFunc_IsDestructed_self_CastInput;//[Offset: 0x724, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x730, Size: 0x10]
	Key K2Node_InputActionEvent_Key11;//[Offset: 0x740, Size: 0x10]
	Key K2Node_InputActionEvent_Key10;//[Offset: 0x750, Size: 0x10]
	Key Temp_struct_Variable;//[Offset: 0x760, Size: 0x10]
	int K2Node_CustomEvent_OldMask;//[Offset: 0x770, Size: 0x4]
	Key K2Node_InputActionEvent_Key9;//[Offset: 0x778, Size: 0x10]
	Key K2Node_InputActionEvent_Key16;//[Offset: 0x788, Size: 0x10]
	int K2Node_CustomEvent_ZonesMask;//[Offset: 0x798, Size: 0x4]
	Key K2Node_InputActionEvent_Key8;//[Offset: 0x7a0, Size: 0x10]
	Key Temp_struct_Variable1;//[Offset: 0x7b0, Size: 0x10]
	float K2Node_CustomEvent_Delay1;//[Offset: 0x7c0, Size: 0x4]
	Key K2Node_InputActionEvent_Key7;//[Offset: 0x7c8, Size: 0x10]
	int K2Node_Event_Index1;//[Offset: 0x7d8, Size: 0x4]
	bool K2Node_Event_bAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dc, Size: 0x1]
	Key K2Node_InputActionEvent_Key6;//[Offset: 0x7e0, Size: 0x10]
	Key Temp_struct_Variable2;//[Offset: 0x7f0, Size: 0x10]
	Key K2Node_InputActionEvent_Key5;//[Offset: 0x800, Size: 0x10]
	int K2Node_Event_Index;//[Offset: 0x810, Size: 0x4]
	bool K2Node_Event_bKillCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 0x1]
	float K2Node_Event_Delay;//[Offset: 0x818, Size: 0x4]
	float K2Node_CustomEvent_Delay;//[Offset: 0x81c, Size: 0x4]
	HUD_Match_C* K2Node_DynamicCast_AsHUD_Match;//[Offset: 0x820, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 0x1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x828, Size: 0x4]
	TViewTarget CallFunc_GetViewTargetInfo_ReturnValue;//[Offset: 0x830, Size: 0x560]
	int K2Node_CustomEvent_Index;//[Offset: 0xd90, Size: 0x4]
	bool K2Node_CustomEvent_bKillCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd94, Size: 0x1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xd98, Size: 0x4]
	int K2Node_CustomEvent_NewTeamIndex1;//[Offset: 0xd9c, Size: 0x4]
	int K2Node_CustomEvent_OldTeamIndex1;//[Offset: 0xda0, Size: 0x4]
	interface class ATeamManager* K2Node_CustomEvent_TeamInfo1;//[Offset: 0xda4, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0xdb0, Size: 0x10]
	int K2Node_CustomEvent_NewTeamIndex;//[Offset: 0xdc0, Size: 0x4]
	int K2Node_CustomEvent_OldTeamIndex;//[Offset: 0xdc4, Size: 0x4]
	interface class DoubleProperty* K2Node_CustomEvent_TeamInfo;//[Offset: 0xdc8, Size: 0x8]
	Key K2Node_InputActionEvent_Key4;//[Offset: 0xdd0, Size: 0x10]
	int Temp_int_Loop_Counter_Variable1;//[Offset: 0xde0, Size: 0x4]
	interface class MulticastDelegateProperty* CallFunc_GetTeamIndex_self_CastInput;//[Offset: 0xde4, Size: 0x8]
	enum CallFunc_GetTeamManagerInpure_Branches;//[Offset: 0xdec, Size: 0x1]
	interface class DoubleProperty* CallFunc_TeamChanged_TeamInfo_CastInput;//[Offset: 0xdf0, Size: 0x8]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 0x1]
	Key Temp_struct_Variable3;//[Offset: 0xe00, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0xe10, Size: 0x10]
	int Temp_int_Array_Index_Variable1;//[Offset: 0xe20, Size: 0x4]
	Team* K2Node_CustomEvent_Team;//[Offset: 0xe24, Size: 0x4]
	interface class FloatProperty* K2Node_CustomEvent_Member;//[Offset: 0xe28, Size: 0x8]
	enum CallFunc_GetTeamManagerInpure_Branches1;//[Offset: 0xe30, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe31, Size: 0x1]
	interface class DoubleProperty* K2Node_DynamicCast_AsAffilation_to_Team_Interface;//[Offset: 0xe34, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3c, Size: 0x1]
	enum CallFunc_GetTeamManagerInpure_Branches2;//[Offset: 0xe3d, Size: 0x1]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3e, Size: 0x1]
	Key K2Node_InputActionEvent_Key3;//[Offset: 0xe40, Size: 0x10]
	float CallFunc_BreakVector2D_X;//[Offset: 0xe50, Size: 0x4]
	float CallFunc_BreakVector2D_Y;//[Offset: 0xe54, Size: 0x4]
	float CallFunc_BreakVector2D_X1;//[Offset: 0xe58, Size: 0x4]
	float CallFunc_BreakVector2D_Y1;//[Offset: 0xe5c, Size: 0x4]
	float K2Node_InputAxisEvent_AxisValue4;//[Offset: 0xe60, Size: 0x4]
	float K2Node_InputAxisEvent_AxisValue3;//[Offset: 0xe64, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0xe68, Size: 0x10]
	float K2Node_Event_DeltaSeconds;//[Offset: 0xe78, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0xe80, Size: 0x10]
	enum CallFunc_GetRespawnAbility_Result1;//[Offset: 0xe90, Size: 0x1]
	int Temp_int_EndIndex_Variable;//[Offset: 0xe94, Size: 0x4]
	bool CallFunc_IsPawnBattleworthy_bResult1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 0x1]
	Object* K2Node_CustomEvent_Equipment1;//[Offset: 0xe9c, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0xea0, Size: 0x1]
	bool K2Node_SwitchEnum3_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea1, Size: 0x1]
	Object* K2Node_CustomEvent_DestructedObject;//[Offset: 0xea4, Size: 0x4]
	interface class FloatProperty* K2Node_CustomEvent_DamageableInterface;//[Offset: 0xea8, Size: 0x8]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0xeb0, Size: 0x1]
	bool K2Node_SwitchEnum4_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb1, Size: 0x1]
	int CallFunc_GetEquipmentOwnerAndSlot_SlotIndex;//[Offset: 0xeb4, Size: 0x4]
	Object* K2Node_CustomEvent_Equipment;//[Offset: 0xeb8, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches2;//[Offset: 0xebc, Size: 0x1]
	bool K2Node_SwitchEnum5_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebd, Size: 0x1]
	int Temp_int_Array_Index_Variable2;//[Offset: 0xec0, Size: 0x4]
	interface class FloatProperty* CallFunc_Array_Get_Item;//[Offset: 0xec4, Size: 0x8]
	int Temp_int_EndIndex_Variable1;//[Offset: 0xecc, Size: 0x4]
	int K2Node_CustomEvent_SlotIndex2;//[Offset: 0xed0, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment2;//[Offset: 0xed4, Size: 0x4]
	Object* K2Node_CustomEvent_OldEquipment2;//[Offset: 0xed8, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches3;//[Offset: 0xedc, Size: 0x1]
	int K2Node_CustomEvent_SlotIndex1;//[Offset: 0xee0, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment1;//[Offset: 0xee4, Size: 0x4]
	Object* K2Node_CustomEvent_OldEquipment1;//[Offset: 0xee8, Size: 0x4]
	bool K2Node_SwitchEnum6_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeec, Size: 0x1]
	enum CallFunc_UpdateBattleworthyMaskAndGetControlGroup_ControlGroup;//[Offset: 0xeed, Size: 0x1]
	int Temp_int_Index_Variable;//[Offset: 0xef0, Size: 0x4]
	int Temp_int_EndIndex_Variable2;//[Offset: 0xef4, Size: 0x4]
	int Temp_int_Index_Variable1;//[Offset: 0xef8, Size: 0x4]
	Pawn* K2Node_CustomEvent_NewPawn2;//[Offset: 0xefc, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn2;//[Offset: 0xf00, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller2;//[Offset: 0xf04, Size: 0x4]
	Pawn* K2Node_CustomEvent_NewPawn1;//[Offset: 0xf08, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn1;//[Offset: 0xf0c, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller1;//[Offset: 0xf10, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches4;//[Offset: 0xf14, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches5;//[Offset: 0xf15, Size: 0x1]
	bool K2Node_SwitchEnum7_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf16, Size: 0x1]
	bool K2Node_SwitchEnum8_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf17, Size: 0x1]
	Key K2Node_InputActionEvent_Key2;//[Offset: 0xf18, Size: 0x10]
	HUD_Match_C* K2Node_DynamicCast_AsHUD_Match1;//[Offset: 0xf28, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2c, Size: 0x1]
	Pawn* K2Node_CustomEvent_NewPawn;//[Offset: 0xf30, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn;//[Offset: 0xf34, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller;//[Offset: 0xf38, Size: 0x4]
	int Temp_int_Array_Index_Variable3;//[Offset: 0xf3c, Size: 0x4]
	interface class FloatProperty* CallFunc_QueryInterfacePure_OutInterface;//[Offset: 0xf40, Size: 0x8]
	int Temp_int_Index_Variable2;//[Offset: 0xf48, Size: 0x4]
	int K2Node_CustomEvent_SlotIndex;//[Offset: 0xf4c, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment;//[Offset: 0xf50, Size: 0x4]
	Object* K2Node_CustomEvent_OldEquipment;//[Offset: 0xf54, Size: 0x4]
	enum K2Node_CustomEvent_ControlGroup;//[Offset: 0xf58, Size: 0x1]
	bool K2Node_SwitchEnum9_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf59, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor;//[Offset: 0xf5c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 0x1]
	int Temp_int_EndIndex_Variable3;//[Offset: 0xf64, Size: 0x4]
	PlayerControlledWeapon CallFunc_Array_Get_Item1;//[Offset: 0xf68, Size: 0xc]
	int Temp_int_Loop_Counter_Variable2;//[Offset: 0xf74, Size: 0x4]
	FName Temp_name_Variable;//[Offset: 0xf78, Size: 0x8]
	enum K2Node_CustomEvent_NewStatus;//[Offset: 0xf80, Size: 0x1]
	GameMode_Match_C* K2Node_CustomEvent_GameMode;//[Offset: 0xf84, Size: 0x4]
	GameMode_Match_C* K2Node_DynamicCast_AsGame_Mode_Match;//[Offset: 0xf88, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8c, Size: 0x1]
	bool K2Node_SwitchEnum10_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8d, Size: 0x1]
	enum CallFunc_GetSquadOverrideStatus_Status;//[Offset: 0xf8e, Size: 0x1]
	bool K2Node_SwitchEnum11_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8f, Size: 0x1]
	int Temp_int_Array_Index_Variable4;//[Offset: 0xf90, Size: 0x4]
	int Temp_int_Index_Variable3;//[Offset: 0xf94, Size: 0x4]
	PlayerControlledWeapon CallFunc_Array_Get_Item2;//[Offset: 0xf98, Size: 0xc]
	interface class RotatorProperty* K2Node_DynamicCast_AsAffilation_to_Team_Interface1;//[Offset: 0xfa4, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfac, Size: 0x1]
	PlayerProfileItemType* K2Node_CustomEvent_ItemType;//[Offset: 0xfb0, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg1;//[Offset: 0xfb4, Size: 0xc]
	byte K2Node_CustomEvent_Status1;//[Offset: 0xfc0, Size: 0x1]
	interface class FloatProperty* CallFunc_GetPlayerProfile_ReturnValue;//[Offset: 0xfc4, Size: 0x8]
	byte[] K2Node_CustomEvent_Data;//[Offset: 0xfcc, Size: 0xc]
	GameMode_Match_C* K2Node_DynamicCast_AsGame_Mode_Match1;//[Offset: 0xfd8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdc, Size: 0x1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdd, Size: 0x1]
	int Temp_int_Loop_Counter_Variable3;//[Offset: 0xfe0, Size: 0x4]
	PlayerProfilePurchasedItem*[] K2Node_CustomEvent_Items;//[Offset: 0xfe4, Size: 0xc]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0xff0, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0xffc, Size: 0x1]
	PlayerProfilePurchasedItem* CallFunc_Array_Get_Item3;//[Offset: 0x1000, Size: 0x4]
	Key K2Node_InputActionEvent_Key17;//[Offset: 0x1008, Size: 0x10]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility;//[Offset: 0x1018, Size: 0xc]
	HUD_Match_C* K2Node_DynamicCast_AsHUD_Match2;//[Offset: 0x1024, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1028, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate5;//[Offset: 0x1030, Size: 0x10]
	FName K2Node_Select_Default;//[Offset: 0x1040, Size: 0x8]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x1048, Size: 0x1]
	CameraManager_Match_C* K2Node_DynamicCast_AsCamera_Manager_Match;//[Offset: 0x104c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1050, Size: 0x1]
	CameraModifier_Zoom_C* K2Node_DynamicCast_AsCamera_Modifier_Zoom;//[Offset: 0x1054, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1058, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate6;//[Offset: 0x1060, Size: 0x10]
	DestroySessionCallbackProxy* CallFunc_DestroySession_ReturnValue;//[Offset: 0x1070, Size: 0x4]
	bool CallFunc_IsValid_ReturnValue23;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1074, Size: 0x1]
	FName K2Node_CustomEvent_NewMatchState;//[Offset: 0x1078, Size: 0x8]
	FName K2Node_CustomEvent_OldMatchState;//[Offset: 0x1080, Size: 0x8]
	BattleGameState* K2Node_DynamicCast_AsBattle_Game_State;//[Offset: 0x1088, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess10;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 0x1]
	BattleGameState* K2Node_DynamicCast_AsBattle_Game_State1;//[Offset: 0x1090, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess11;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate7;//[Offset: 0x1098, Size: 0x10]
	int Temp_int_Array_Index_Variable5;//[Offset: 0x10a8, Size: 0x4]
	PlayerControlledWeapon CallFunc_Array_Get_Item4;//[Offset: 0x10ac, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate8;//[Offset: 0x10b8, Size: 0x10]
	int Temp_int_Loop_Counter_Variable4;//[Offset: 0x10c8, Size: 0x4]
	int Temp_int_Loop_Counter_Variable5;//[Offset: 0x10cc, Size: 0x4]
	float K2Node_InputAxisEvent_AxisValue2;//[Offset: 0x10d0, Size: 0x4]
	float K2Node_InputAxisEvent_AxisValue1;//[Offset: 0x10d4, Size: 0x4]
	float K2Node_InputAxisEvent_AxisValue;//[Offset: 0x10d8, Size: 0x4]
	int Temp_int_Array_Index_Variable6;//[Offset: 0x10dc, Size: 0x4]
	PlayerControlledWeapon CallFunc_Array_Get_Item5;//[Offset: 0x10e0, Size: 0xc]
	bool CallFunc_ViewLastSpectatorTarget_bSucceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ec, Size: 0x1]
	PlayerControlledWeapon K2Node_SetFieldsInStruct_StructOut;//[Offset: 0x10f0, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate9;//[Offset: 0x1100, Size: 0x10]
	bool CallFunc_GetPreferSpectatorTargetRotation_bValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 0x1]
	bool CallFunc_IsFreeSpectating_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1111, Size: 0x1]
	bool CallFunc_ViewPrevSpectatorTarget_bSucceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1112, Size: 0x1]
	bool CallFunc_ViewNextSpectatorTarget_bSucceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1113, Size: 0x1]
	HUD_Match_C* K2Node_DynamicCast_AsHUD_Match3;//[Offset: 0x1114, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess12;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1118, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate10;//[Offset: 0x1120, Size: 0x10]
	Key K2Node_InputActionEvent_Key;//[Offset: 0x1130, Size: 0x10]
	int K2Node_CustomEvent_NewFiringWeaponsMask;//[Offset: 0x1140, Size: 0x4]
	BattleMechsGameInstance_C* K2Node_DynamicCast_AsBattle_Mechs_Game_Instance;//[Offset: 0x1144, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess13;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1148, Size: 0x1]
	bool K2Node_CustomEvent_bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1149, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate11;//[Offset: 0x1150, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate12;//[Offset: 0x1160, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate13;//[Offset: 0x1170, Size: 0x10]
	Key K2Node_InputActionEvent_Key1;//[Offset: 0x1180, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate14;//[Offset: 0x1190, Size: 0x10]
	interface class MulticastDelegateProperty* K2Node_DynamicCast_AsActor_Camera_Interface;//[Offset: 0x11a0, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess14;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a8, Size: 0x1]
	ActorCameraParams CallFunc_GetCameraParams_CameraParams;//[Offset: 0x11ac, Size: 0x18]
	interface class * K2Node_DynamicCast_AsActor_Camera_Interface1;//[Offset: 0x11c4, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess15;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cc, Size: 0x1]
	ActorCameraParams CallFunc_GetCameraParams_CameraParams1;//[Offset: 0x11d0, Size: 0x18]
	interface class * K2Node_DynamicCast_AsActor_Camera_Interface2;//[Offset: 0x11e8, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f0, Size: 0x1]
	ActorCameraParams CallFunc_GetCameraParams_CameraParams2;//[Offset: 0x11f4, Size: 0x18]
	delegate K2Node_CreateDelegate_OutputDelegate15;//[Offset: 0x1210, Size: 0x10]
	interface class * CallFunc_UnbindFromTeamChangedEvent_self_CastInput;//[Offset: 0x1220, Size: 0x8]
	interface class DoubleProperty* CallFunc_BindToTeamChangedEvent_self_CastInput;//[Offset: 0x1228, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate16;//[Offset: 0x1230, Size: 0x10]
	AzimuthDistanceAimComponent* CallFunc_Array_Get_Item6;//[Offset: 0x1240, Size: 0x4]
	interface class FloatProperty* CallFunc_GetState_self_CastInput;//[Offset: 0x1244, Size: 0x8]
	enum K2Node_CustomEvent_NewState;//[Offset: 0x124c, Size: 0x1]
	interface class DoubleProperty* K2Node_CustomEvent_Provider;//[Offset: 0x1250, Size: 0x8]
	AzimuthDistanceAimComponent* CallFunc_Array_Get_Item7;//[Offset: 0x1258, Size: 0x4]
	void SquadOverrideStatusChanged__DelegateSignature(enum bpp__NewStatus__pf, GameMode_Match_C* bpp__GameMode__pf);// 0x4528238
	void RespawnAbilityChangedEvent__DelegateSignature(PlayerController_Match_C* bpp__Controller__pf);// 0x4528238
	void PrimarySpawnZonesMaskChangedEvent__DelegateSignature(int bpp__NewMask__pf, int bpp__OldMask__pf);// 0x4528238
	void ControllerSquadAssigned__DelegateSignature(PlayerProfileItem* bpp__Squad__pf);// 0x4528238
	void ControlledReloadWeaponsChangedEvent__DelegateSignature(int bpp__NewControlledReloadWeaponsMask__pf);// 0x4528238
	void UpdateZoom();// 0x3e9adc8
	void UpdateWeaponInSlot(out PlayerControlledWeapon[] bpp__Weapons__pf, Object* bpp__NewWeapon__pf, int bpp__SlotIndex__pf);// 0x3ed4208
	void UpdateTempraryTargetSelection();// 0x3ed41ec
	void UpdatePlayerStateBattleworty();// 0x3ed41d0
	void UpdateBattleworthyMaskAndGetControlGroup(int bpp__EquipmentSlotIndex__pf, Object* bpp__Equipment__pf, out enum bpp__ControlGroup__pf);// 0x3ed40b8
	void UpdateAzimuthDistanceAimComponents(Object* bpp__OldEquipment__pf, Object* bpp__NewEquipment__pf);// 0x3ed3ff4
	void UpdateAimAssistState();// 0x3ed3fd8
	void UnbindFromEquipmentDestructed(Object* bpp__Equipment__pf);// 0x3ed3f58
	void UnbindFromAimDistanceInput();// 0x3ed3f3c
	void TeamMemberAddedLocal(Team* bpp__Team__pf, out const interface classNone bpp__Member__pf);// 0x3ed3e64
	void TeamChanged(int bpp__NewTeamIndex__pf, int bpp__OldTeamIndex__pf, out const interface classNone bpp__TeamInfo__pf);// 0x3ed3d48
	void StopFireWeapons(out PlayerControlledWeapon[] bpp__Weapons__pf);// 0x3ed3ca0
	void StartFireWeapons(out PlayerControlledWeapon[] bpp__Weapons__pf);// 0x3ed3bf8
	void SquadOverrideStatusChanged(enum bpp__NewStatus__pf, GameMode_Match_C* bpp__GameMode__pf);// 0x3ed3b34
	void SpawnWithIndex(int bpp__Index__pf, Vector bpp__Position__pf, Rotator bpp__Rotation__pf, out const <FName> bpp__DisallowedItemTypeIds__pf__const, out Pawn* bpp__Pawn__pf);// 0x3ed38c8
	void Spawn(int bpp__Index__pf, Vector bpp__Position__pf, Rotator bpp__Rotation__pf, out Pawn* bpp__Pawn__pf);// 0x3ed3764
	void SetupSquadOverride(GameMode_Match_C* bpp__GameMode__pf);// 0x3ed36e4
	void SetupSquad();// 0x3ed36c8
	void SetupPawnControl();// 0x3ed36ac
	void SetupOwnPlayerSquad();// 0x3ed3690
	void SetupMatchStateHandling();// 0x3e9b6f8
	void SetSpawnWithIndexAllowed(int bpp__Index__pf, bool bpp__bAllowed__pf);// 0x3ed35c4
	void SetPrimarySpawnZonesMaskImplementation(int bpp__NewMask__pf);// 0x3ed3544
	void SetPrimarySpawnZonesMask(int bpp__Mask__pf);// 0x3ed34c4
	void SetMatchID(FString bpp__InMatchID__pf__const);// 0x3ed342c
	void SetInputYawScaleInternal(float bpp__Value__pf);// 0x3ed33ac
	void SetInputYawScale(float bpp__Value__pf);// 0x3ed332c
	void SetInputYawInertiaInternal(float bpp__Value__pf);// 0x3ed32ac
	void SetInputYawInertia(float bpp__Value__pf);// 0x3ed322c
	void SetInputYawExponentInternal(float bpp__Value__pf);// 0x3ed31ac
	void SetInputYawExponent(float bpp__Value__pf);// 0x3ed312c
	void SetInputPitchScaleInternal(float bpp__Value__pf);// 0x3ed30ac
	void SetInputPitchScale(float bpp__Value__pf);// 0x3ed302c
	void SetInputPitchInertiaInternal(float bpp__Value__pf);// 0x3ed2fac
	void SetInputPitchInertia(float bpp__Value__pf);// 0x3ed2f2c
	void SetInputPitchExponentInternal(float bpp__Value__pf);// 0x3ed2eac
	void SetInputPitchExponent(float bpp__Value__pf);// 0x3ed2e2c
	void SetAimAssistStateInternal(bool bpp__bEnabled__pf);// 0x3ed2da4
	void SetAimAssistState(bool bpp__bEnabled__pf);// 0x3ed2d1c
	void ServerSetSquad(PlayerProfileItem* bpp__NewSquad__pf);// 0x3ed2c9c
	void ServerSetSpawnZonesMask(int bpp__ZonesMask__pf);// 0x3ed2c1c
	void ServerSetFiringWeaponsMask(int bpp__NewFiringWeaponsMask__pf);// 0x3ed2b9c
	void ServerRequestRespawn(int bpp__Index__pf, bool bpp__bKillCurrent__pf);// 0x3ed2ad0
	void ServerPawnEquipmentChanged(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf, Object* bpp__OldEquipment__pf);// 0x3ed29c8
	void ServerPawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x3ed28c0
	void SerializeSquadToClient(PlayerProfileItem* bpp__Squad__pf);// 0x3ed2840
	void ScheduleSpawn(float bpp__Delay__pf);// 0x3ed27c0
	void ResetPawnControl();// 0x3e9f4c0
	void ResetMatchStateHandling();// 0x3ed27a4
	void ResetConnectionStateHandling();// 0x3e9c1fc
	void ResetAllowedSpawnIndices();// 0x3ed2788
	void RequestSpawn(int bpp__Index__pf, bool bpp__bKillCurrent__pf);// 0x3ed26bc
	void RemoveCameraRotationInputDelegate(out const interface classNone bpp__Delegate__pf);// 0x3ed2628
	void ReloadWeapons(out PlayerControlledWeapon[] bpp__Weapons__pf);// 0x3ed2580
	void ReloadAllWeapons();// 0x3ed2564
	void RecordMatchStatsAnalyticsEvent(enum bpp__MatchFinishType__pf, enum bpp__MatchResult__pf);// 0x3ed24a0
	void RecordMatchStartAnalyticsEvent();// 0x3ea01e4
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3ed2420
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3ed23a0
	void ProcessRotationInput(float bpp__DeltaTime__pf);// 0x3ed2320
	void ProcessPendingControlledReloadWeaponsMask();// 0x3ed2304
	void PrimarySpawnZonesMaskChanged(int bpp__OldMask__pf);// 0x3ed2284
	void PostInitOnServer();// 0x3ed2268
	void PostInitAndLogin();// 0x3ed224c
	void PerformSpawn();// 0x3e9ed14
	void PawnEquipmentChanged(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf, Object* bpp__OldEquipment__pf);// 0x3ed2144
	void PawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x3ed203c
	void OnSuccess_7F71156947BB1B4C528ED383BD0C085D();// 0x3ed2020
	void OnRep_EnabledSpawnZonesMask();// 0x3ed2004
	void OnRep_AllowSpawnIndexMask();// 0x3ed1fe8
	void OnMatchStateChanged(FName bpp__NewMatchState__pf, FName bpp__OldMatchState__pf);// 0x3ed1f14
	void OnFailure_7F71156947BB1B4C528ED383BD0C085D();// 0x3ed1ef8
	void MovingInputStateChanged();// 0x3e9ed4c
	void MoveToViewTarget();// 0x3ed1edc
	void MatchEndDelayEnded();// 0x3e9e19c
	void LocalTeamChanged(int bpp__NewTeamIndex__pf, int bpp__OldTeamIndex__pf, out const interface classNone bpp__TeamInfo__pf);// 0x3ed1dc0
	void LocalPawnEquipmentChanged(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf, Object* bpp__OldEquipment__pf, enum bpp__ControlGroup__pf);// 0x3ed1c70
	void LocalPawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x3ed1b68
	PlayerProfileItem* LoadSquad(out byte[] bpp__Data__pf, out const interface classNone bpp__PlayerProfile__pf);// 0x3ed1a5c
	void LeaveMatch();// 0x3ed1a40
	void IsSpawnWithIndexAllowed(int bpp__Index__pf, out bool bpp__bAllowed__pf);// 0x3ed196c
	void IsPawnBattleworthy(out bool bpp__bResult__pf);// 0x3ed18dc
	void IsControllerBattleworthy(out bool bpp__bResult__pf);// 0x3ed184c
	bool IsAzimuthDistanceAimingEnabled();// 0x3ed181c
	void InputAxisDistance(float bpp__AxisValue__pf);// 0x3ed179c
	void InpAxisEvt_TurnVertical_K2Node_InputAxisEvent(float bpp__AxisValue__pf);// 0x3ed171c
	void InpAxisEvt_TurnHorizontal_K2Node_InputAxisEvent(float bpp__AxisValue__pf);// 0x3ed169c
	void InpAxisEvt_MoveUp_K2Node_InputAxisEvent(float bpp__AxisValue__pf);// 0x3ed161c
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent(float bpp__AxisValue__pf);// 0x3ed159c
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent(float bpp__AxisValue__pf);// 0x3ed151c
	void InpActEvt_Zoom_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed135c
	void InpActEvt_UnlockSelectedTarget_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed119c
	void InpActEvt_ToggleMatchStats_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed0fdc
	void InpActEvt_ToggleAzimuthDistanceAim_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed0e1c
	void InpActEvt_SwitchHudPreset_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed0c5c
	void InpActEvt_SpectatorMode_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3e9c5ec
	void InpActEvt_SpectatorLookMode_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3e9c7ac
	void InpActEvt_SpectatePrev_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3e9c42c
	void InpActEvt_SpectateNext_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3e9c26c
	void InpActEvt_Reload_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed0a9c
	void InpActEvt_FireSpecial_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed08dc
	void InpActEvt_FireSpecial_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed071c
	void InpActEvt_FireRight_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed055c
	void InpActEvt_FireRight_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed039c
	void InpActEvt_FireMiddle_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed01dc
	void InpActEvt_FireMiddle_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ed001c
	void InpActEvt_FireLeft_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ecfe5c
	void InpActEvt_FireLeft_K2Node_InputActionEvent(Key bpp__Key__pf);// 0x3ecfc9c
	void InitTeamsMembersHandlingLocal();// 0x3ecfc80
	void InitTeamHandling();// 0x3ecfc64
	void InitialSpawn();// 0x3ecfc48
	void InitializedClientRespawnScheduled(float bpp__Delay__pf);// 0x3ecfbc8
	void InitGameInstance();// 0x3ecfbac
	void InitConnectionStateHandling();// 0x3e9aac8
	void InitCameraControl();// 0x3e9ddd4
	void HasMovementInput(float bpp__ScaleValue__pf);// 0x3ecfb2c
	void HandlePostLogin();// 0x3ecfb10
	void HandleDisconnect();// 0x3e9ad2c
	void GetSquadPawnCount(out int bpp__Count__pf);// 0x3ecfa80
	void GetSquadPawnClass(int bpp__Index__pf, out class Pawn bpp__Class__pf);// 0x3ecf970
	void GetSquadComplete(out const PlayerProfilePurchasedItem*[] bpp__Items__pf__const, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3ecf824
	void GetSquad(out PlayerProfileItem* bpp__Squad__pf);// 0x3ecf794
	void GetRespawnAbility(out enum bpp__Result__pf);// 0x3ecf704
	void GetPrimarySpawnZonesMask(out int bpp__Mask__pf);// 0x3ecf674
	void GetMatchResultForTeam(int bpp__InTeamIndex__pf, out enum bpp__MatchResult__pf);// 0x3ecf5a0
	void GetMatchResult(out enum bpp__MatchResult__pf);// 0x3ecf510
	void GetMatchID(out FString bpp__MatchID__pf);// 0x3ecf468
	void GetItemTypeComplete(PlayerProfileItemType* bpp__ItemType__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x3ecf348
	void GetInputYawScale(out float bpp__Value__pf);// 0x3ecf2b8
	void GetInputYawExponent(out float bpp__Value__pf);// 0x3ecf228
	void GetInputPitchScale(out float bpp__Value__pf);// 0x3ecf198
	void GetInputPitchExponent(out float bpp__Value__pf);// 0x3ecf108
	void GetControlledReloadWeaponsMask(out int bpp__Mask__pf);// 0x3ecf078
	void GetAvailableSpawnZonesMask(out int bpp__Mask__pf);// 0x3ecefe8
	void FiringWeaponsMaskPossiblyChanged();// 0x3e9ade4
	void FinalizeMatch(enum bpp__MatchFinishType__pf);// 0x3ecef68
	void EquipmentDestructed(Object* bpp__DestructedObject__pf, out const interface classNone bpp__DamageableInterface__pf);// 0x3ecee90
	void DisqualifyPlayer();// 0x3ecee74
	void DestroySession();// 0x3e9a864
	void DeferUpdateZoom();// 0x3ecee58
	void ConditionalBindToAimDistanceInput();// 0x3ecee3c
	void CompareAndSendFiringWeaponsMaskToServer();// 0x3ecee20
	void ClientRespawnScheduled(float bpp__Delay__pf);// 0x3eceda0
	void ClientLoadSquad(const byte[] bpp__Data__pf__const);// 0x3eced08
	void CleanupTeamsMembersHandlingLocal();// 0x3e9eb74
	void CleanupTeamHandling();// 0x3e9ef34
	void CleanupGameInstance();// 0x3e9f4a4
	void CheckPendingClientRespawnScheduled();// 0x3ececec
	void BindToEquipmentDestructed(Object* bpp__Equipment__pf);// 0x3ecec6c
	void AzimuthDistanceAimProviderStateChanged(enum bpp__NewState__pf, out const interface classNone bpp__Provider__pf__const);// 0x3eceb94
	void AddCameraRotationInputDelegate(out const interface classNone bpp__Delegate__pf);// 0x3eceb00
	void ActivatePerformanceStats();// 0x3e9ffcc
	void AzimuthDistanceAimingStateChanged__DelegateSignature(PlayerController_Match_C* bpp__Controller__pf);// 0x4528238
	void AimDistanceChangedEvent__DelegateSignature(PlayerController_Match_C* bpp__Controller__pf);// 0x4528238
	void TeamMemberAddedEvent__DelegateSignature(Team* bpp__Team__pf, out const interface classNone bpp__Member__pf);// 0x4528238
	void PawnChangedEvent__DelegateSignature(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x4528238
	void MatchStateChangedEvent__DelegateSignature(FName bpp__NewMatchState__pf, FName bpp__OldMatchState__pf);// 0x4528238
	void HandleDiconnectDelegate__DelegateSignature();// 0x4528238
	void EmptyOnlineDelegate__DelegateSignature();// 0x4528238

--------------------------------
Class: SpectatorControllerComponent_C.ActorComponent.Object
	FName SpectatingStateName;//[Offset: 0xa8, Size: 0x8]
	TimerHandle AutoChangeSpectatorViewTargetTimerHandle;//[Offset: 0xb0, Size: 0x8]
	int CurrentViewTargetTeamIndex;//[Offset: 0xb8, Size: 0x4]
	int CurrentViewTargetIndexInTeam;//[Offset: 0xbc, Size: 0x4]
	PlayerController* OwningPlayerController;//[Offset: 0xc0, Size: 0x4]
	bool bBoundToControllerStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bBoundToRespawnAbilityChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool bBoundToPawnChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]
	bool bPreferSpectatorTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bSpectatingStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	int SpectatableTeamsMask;//[Offset: 0xcc, Size: 0x4]
	PlayerController* K2Node_CustomEvent_Controller4;//[Offset: 0xd0, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0xd8, Size: 0x10]
	byte K2Node_Event_EndPlayReason;//[Offset: 0xe8, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0xf0, Size: 0x10]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match;//[Offset: 0x100, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	PlayerController* K2Node_DynamicCast_AsPlayer_Controller;//[Offset: 0x108, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	interface class FloatProperty* CallFunc_GetRespawnAbility_self_CastInput;//[Offset: 0x110, Size: 0x8]
	enum CallFunc_GetRespawnAbility_Result;//[Offset: 0x118, Size: 0x1]
	Controller* K2Node_DynamicCast_AsController;//[Offset: 0x11c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	FName K2Node_CustomEvent_NewStateName;//[Offset: 0x128, Size: 0x8]
	FName K2Node_CustomEvent_OldStateName;//[Offset: 0x130, Size: 0x8]
	Controller* K2Node_CustomEvent_Controller3;//[Offset: 0x138, Size: 0x4]
	Controller* K2Node_DynamicCast_AsController1;//[Offset: 0x13c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x148, Size: 0x10]
	PlayerController_Match_C* K2Node_CustomEvent_Controller2;//[Offset: 0x158, Size: 0x4]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match1;//[Offset: 0x15c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match2;//[Offset: 0x164, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	Controller* K2Node_CustomEvent_Controller1;//[Offset: 0x16c, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x170, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	enum CallFunc_GetRespawnAbility_Result1;//[Offset: 0x172, Size: 0x1]
	bool CallFunc_SelectNextSpectatorTarget_bSucceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x178, Size: 0x10]
	UserOnlineAccountWrapper CallFunc_GetUserAccount_ReturnValue;//[Offset: 0x188, Size: 0x8]
	FString CallFunc_GetUserAttribute_OutValue;//[Offset: 0x190, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0x1a0, Size: 0x10]
	Pawn* K2Node_CustomEvent_NewPawn;//[Offset: 0x1b0, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn;//[Offset: 0x1b4, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller;//[Offset: 0x1b8, Size: 0x4]
	Controller* K2Node_DynamicCast_AsController2;//[Offset: 0x1bc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	Controller* K2Node_DynamicCast_AsController3;//[Offset: 0x1c4, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	void RespawnAbilityChangedEvent__DelegateSignature(PlayerController_Match_C* bpp__Controller__pf);// 0x4528238
	void ViewPrevSpectatorTarget(out bool bpp__bSucceed__pf);// 0x3f13230
	void ViewNextSpectatorTarget(out bool bpp__bSucceed__pf);// 0x3f131a0
	void ViewLastSpectatorTarget(out bool bpp__bSucceed__pf);// 0x3f13110
	void UnbindFromRespawnAbilityChanged();// 0x3718ffc
	void UnbindFromPawnChanged();// 0x3e325f8
	void UnbindFromControllerStateChanged();// 0x3714168
	void StopSpectating();// 0x371babc
	void StopAutoChangeSpectatorViewTarget();// 0x37189ec
	void StartSpectating();// 0x3e32630
	void StartFreeSpectating();// 0x3e5e93c
	void StartAutoChangeSpectatorViewTarget();// 0x3e32780
	void SetupSpecatableTeamsMask();// 0x3e51180
	void SetSpectatorTarget(Actor* bpp__NewViewTarget__pf);// 0x3f13090
	void SetPreferSpectatorTargetRotation(bool bpp__bValue__pf);// 0x3f13008
	void SelectNextSpectatorTarget(int bpp__AdvanceDirection__pf, out bool bpp__bSucceed__pf);// 0x3f12f34
	void RespawnAbilityChanged(PlayerController_Match_C* bpp__Controller__pf);// 0x3e83c14
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3f12eb4
	void ReceiveBeginPlay();// 0x371422c
	void PostInitOnServer(PlayerController* bpp__Controller__pf);// 0x3e7d854
	void PawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x3e60b74
	void IsFreeSpectating(out bool bpp__bResult__pf);// 0x3f12e24
	void GetPreferSpectatorTargetRotation(out bool bpp__bValue__pf);// 0x3f12d94
	void ControllerStateChanged(FName bpp__NewStateName__pf, FName bpp__OldStateName__pf, Controller* bpp__Controller__pf);// 0x3f12c78
	void CheckLocalSpectatingConditions(Controller* bpp__Controller__pf);// 0x36fe074
	void CheckConditionsToStartSpectating();// 0x3714210
	void ChangeViewTargetTimerTick();// 0x3e32748
	void BindToRespawnAbilityChanged();// 0x3e32668
	void BindToPawnChanged();// 0x3e32828
	void BindToControllerStateChanged();// 0x3719018
	void PawnChangedEvent__DelegateSignature(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x4528238
	void ControllerStateChangedEvent__DelegateSignature(FName bpp__NewStateName__pf, FName bpp__OldStateName__pf, Controller* bpp__Controller__pf);// 0x4528238

--------------------------------
Class: WeaponBlockerComponent_C.ActorComponent.Object
	Pawn* Pawn;//[Offset: 0xa8, Size: 0x4]
	Actor* PrimaryTargetActor;//[Offset: 0xac, Size: 0x4]
	WeaponBlockingData[] WeaponsData;//[Offset: 0xb0, Size: 0xc]
	float SquaredDistanceToTarget;//[Offset: 0xbc, Size: 0x4]
	bool bObserving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	int Temp_int_Index_Variable;//[Offset: 0xc4, Size: 0x4]
	int Temp_int_EndIndex_Variable;//[Offset: 0xc8, Size: 0x4]
	int Temp_int_Array_Index_Variable;//[Offset: 0xcc, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0xd0, Size: 0x10]
	int Temp_int_Array_Index_Variable1;//[Offset: 0xe0, Size: 0x4]
	Pawn* K2Node_CustomEvent_NewPawn;//[Offset: 0xe4, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn;//[Offset: 0xe8, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller;//[Offset: 0xec, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0xf0, Size: 0x10]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x100, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x104, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x105, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107, Size: 0x1]
	Object* K2Node_CustomEvent_Equipment;//[Offset: 0x108, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches2;//[Offset: 0x10c, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches3;//[Offset: 0x10d, Size: 0x1]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]
	bool K2Node_SwitchEnum3_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 0x1]
	float CallFunc_GetMaxRange_MaxRange;//[Offset: 0x110, Size: 0x4]
	bool CallFunc_IsShootingRequiresTargetInRange_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	WeaponBlockingData K2Node_MakeStruct_WeaponBlockingData;//[Offset: 0x118, Size: 0x10]
	WeaponBlockingData K2Node_MakeStruct_WeaponBlockingData1;//[Offset: 0x128, Size: 0x10]
	int Temp_int_Loop_Counter_Variable1;//[Offset: 0x138, Size: 0x4]
	int Temp_int_Array_Index_Variable2;//[Offset: 0x13c, Size: 0x4]
	int K2Node_CustomEvent_SlotIndex;//[Offset: 0x140, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment;//[Offset: 0x144, Size: 0x4]
	Object* K2Node_CustomEvent_OldEquipment;//[Offset: 0x148, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x150, Size: 0x10]
	enum CallFunc_QueryInterfaceInpure_Branches4;//[Offset: 0x160, Size: 0x1]
	bool K2Node_SwitchEnum4_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	BattleTarget* K2Node_CustomEvent_NewTarget;//[Offset: 0x164, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches5;//[Offset: 0x168, Size: 0x1]
	bool K2Node_SwitchEnum5_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x16a, Size: 0x1]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x16c, Size: 0x4]
	void SetupPawnWeaponHandling();// 0x3718728
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e412b4
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3ec913c
	void ReceiveBeginPlay();// 0x3e325f8
	void PrimaryTargetChanged(BattleTarget* bpp__NewTarget__pf);// 0x3e41334
	void PawnEquipmenrChanged(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf, Object* bpp__OldEquipment__pf);// 0x3fafb6c
	void PawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x3716b34
	void InitTargetHandling();// 0x3e32780
	void InitPawnHandling();// 0x3718ffc
	void HandleNewEquipment(Object* bpp__Equipment__pf);// 0x3e5ed60
	void CleanupTargetHandling();// 0x37189ec
	void CleanupPawnWeaponHandling();// 0x371babc
	void CleanupPawnHandling();// 0x3719018
	void CheckTarget();// 0x3719150
	void PawnChangedEvent__DelegateSignature(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x4528238

--------------------------------
Class: WeaponBlockingData
	interface class * WeaponInterface_2_3CE389F2474C29FD7650D48F4050B56A;//[Offset: 0x0, Size: 0x8]
	float MaxRangeSquared_6_56D452654FF23CE6FBC0BCBC718DD74B;//[Offset: 0x8, Size: 0x4]
	bool bBlocked_8_E90D3C484DC96AFA2E5EBDAB7B889CE8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: BattleTarget.Object
	Actor* Actor;//[Offset: 0x1c, Size: 0x4]
	interface class FloatProperty* TargetPointsProviderInterface;//[Offset: 0x20, Size: 0x8]
	interface classNone GetTargetPointsProvider();// 0x3717918
	Actor* GetActor();// 0x36fd470
	void ActorDestructed(Object* DestructedObject, interface classNone SourceDamageableInterface);// 0x3717840
	void ActorDestroyed(Actor* DestroyedActor);// 0x37177c0

--------------------------------
Class: PerformanceStatsComponent.ActorComponent.Object
	float StatPeriod;//[Offset: 0xb0, Size: 0x4]
	PlayerController* PlayerController;//[Offset: 0xcc, Size: 0x4]
	void GetTotalInOutStats(out int InBytes, out int OutBytes, out int AvgInBytesPerSecond, out int AvgOutBytesPerSecond, out int MaxInBytesPerSecond, out int MaxOutBytesPerSecond, out int InPackets, out int OutPackets, out int AvgInPacketsPerSecond, out int AvgOutPacketsPerSecond, out int MaxInPacketsPerSecond, out int MaxOutPacketsPerSecond, out int InPacketsLost, out int OutPacketsLost);// 0x3783404
	float GetTotalAvgPing();// 0x37833e0
	float GetTotalAvgDeltaTime();// 0x37833bc
	void GetStatPeriodInOutStats(out int InBytesPerSecond, out int OutBytesPerSecond, out int InPackets, out int OutPackets, out int InPacketsPerSecond, out int OutPacketsPerSecond, out int InPacketsLost, out int OutPacketsLost);// 0x37830a0
	float GetStatPeriodAvgPing();// 0x3716c3c
	float GetStatPeriodAvgDeltaTime();// 0x3783084
	void GetReceiveStats(out float AvgReceiveDeltaTime, out float MaxReceiveDeltaTime);// 0x3782fa4
	float GetMaxAvgPing();// 0x3716c58
	float GetMaxAvgDeltaTime();// 0x36f03e8

--------------------------------
Class: MatchZoneControllerComponent_C.ActorComponent.Object
	delegate OnEnterZone;//[Offset: 0xa8, Size: 0xc]
	delegate OnLeaveZone;//[Offset: 0xb4, Size: 0xc]
	MatchZoneCheckerComponent_C* MatchZoneChecker;//[Offset: 0xc0, Size: 0x4]
	Pawn* Pawn;//[Offset: 0xc4, Size: 0x4]
	bool bPlayerInMatchZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	float MatchZoneOutTimeout;//[Offset: 0xcc, Size: 0x4]
	TimerHandle MatchZoneOutTimerHandle;//[Offset: 0xd0, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0xd8, Size: 0x10]
	float K2Node_Event_DeltaSeconds;//[Offset: 0xe8, Size: 0x4]
	MatchZoneCheckerComponent_C*[] CallFunc_GetObjectsOfClass_OutObjects;//[Offset: 0xec, Size: 0xc]
	MatchZoneCheckerComponent_C* CallFunc_Array_Get_Item;//[Offset: 0xf8, Size: 0x4]
	Controller* K2Node_DynamicCast_AsController;//[Offset: 0xfc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	Pawn* K2Node_CustomEvent_NewPawn;//[Offset: 0x104, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn;//[Offset: 0x108, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller;//[Offset: 0x10c, Size: 0x4]
	Controller* K2Node_DynamicCast_AsController1;//[Offset: 0x110, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool CallFunc_IsInMatchZone_bResultInZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x118, Size: 0x10]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x128, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	void OnLeaveZone__DelegateSignature(float bpp__Timeout__pf);// 0x4528238
	void OnEnterZone__DelegateSignature();// 0x4528238
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x36fe074
	void ReceiveBeginPlay();// 0x371babc
	void PawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x3ec6ee8
	void MatchZoneLeaved();// 0x3e32828
	void MatchZoneEntered();// 0x3e325f8
	void IsPlayerInMatchZone(out bool bpp__bInZone__pf);// 0x3ec6e58
	void HandleMatchZoneOutTimeout();// 0x3e326a0
	void DeactivateZoneControl();// 0x3e32780
	void ActivateZoneControl();// 0x37189ec
	void PawnChangedEvent__DelegateSignature(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x4528238

--------------------------------
Class: MatchZoneCheckerComponent_C.ActorComponent.Object
	void IsInMatchZone(Vector bpp__Location__pf, bool bpp__bCurrentlyInZone__pf, out bool bpp__bResultInZone__pf);// 0x3ec677c

--------------------------------
Class: MultiActorDamageCollectorComponent.DamageCollectorComponent.ActorComponent.Object
	ActorCollectedDamage[] LastFlushedCollectedDamage;//[Offset: 0x164, Size: 0xc]

--------------------------------
Class: DamageCollectorComponent.ActorComponent.Object
	FName DamageCollectableActorTag;//[Offset: 0xb8, Size: 0x8]
	float FirstFlushCollectedDamageInterval;//[Offset: 0xd0, Size: 0x4]
	float NextFlushCollectedDamageInterval;//[Offset: 0xd4, Size: 0x4]
	void DamageableActorDestructed(Actor* DestructedActor, Controller* EventInstigator, Object* DamageCauser, interface classNone DamageableInterface);// 0x3534b70
	void ClientReceiveCollectedDamage(CollectedDamage InCollectedDamage, bool bInDestructedByOwner);// 0x3534a9c

--------------------------------
Class: ActorCollectedDamage
	Actor* DamagedActor;//[Offset: 0x0, Size: 0x4]
	Object* DamageCauser;//[Offset: 0x4, Size: 0x4]
	CollectedDamage CollectedDamage;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CollectedDamage

--------------------------------
Class: ControllerTeamInfoComponent.ActorComponent.Object
	void PlayerStateTeamChanged(int NewTeamIndex, int OldTeamIndex, interface classNone TeamInfo);// 0x36fbc78
	void PlayerStateSquadChanged(out const UniqueNetIdRepl NewSquadId, out const UniqueNetIdRepl OldSquadId, interface classNone TeamInfo);// 0x36fb98c
	void PlayerStateChanged(PlayerState* NewPlayerState, PlayerState* OldPlayerState, Controller* Controller);// 0x36fb884
	void PawnChanged(Pawn* NewPawn, Pawn* OldPawn, Controller* Controller);// 0x36fb77c

--------------------------------
Class: AimPointControllerComponent.ActorComponent.Object
	interface class * TargetPointsListProvider;//[Offset: 0xb4, Size: 0x8]
	PawnAimComponent* PawnAimComponent;//[Offset: 0xbc, Size: 0x4]
	interface class FloatProperty* PawnCollisionParams;//[Offset: 0xc0, Size: 0x8]
	Actor* AimTargetActor;//[Offset: 0xd4, Size: 0x4]
	float AimPointReplicationThresholdSquared;//[Offset: 0xfc, Size: 0x4]
	float SendAimPointToServerMinInterval;//[Offset: 0x104, Size: 0x4]
	float SendTargetPointToServerMinInterval;//[Offset: 0x108, Size: 0x4]
	byte VisibilityTraceChannel;//[Offset: 0x10c, Size: 0x1]
	float MaxHorizAngleToTargetPoint;//[Offset: 0x208, Size: 0x4]
	float MaxVertAngleToTargetPoint;//[Offset: 0x20c, Size: 0x4]
	float TargetPointDistanceScoringFactor;//[Offset: 0x210, Size: 0x4]
	delegate AimAssistStateChangedEvent;//[Offset: 0x218, Size: 0xc]
	bool bForceAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	void TargetChanged(BattleTarget* NewTarget);// 0x3715d3c
	void SetMaxVertAngleToTargetPoint(float Value);// 0x3715b40
	void SetMaxHorizAngleToTargetPoint(float Value);// 0x3715944
	void SetForceAimAssist(bool bInForceAimAssist);// 0x3715760
	void ServerSetState(enum NewState);// 0x37156ac
	void ServerSetAimPoint(Actor* NewAimTargetActor, const Vector_NetQuantize NewAimPoint, int16 NewTargetPointKey);// 0x3715570
	void OnPawnChanged(Pawn* NewPawn, Pawn* OldPawn, Controller* PawnController);// 0x36fb884
	bool IsForceAimAssist();// 0x3715554
	float GetMaxVertAngleToTargetPoint();// 0x3715538
	float GetMaxHorizAngleToTargetPoint();// 0x371551c
	Vector GetAimPoint();// 0x37154f8
	enum GetAimAssistState();// 0x37154dc
	void AimAssistStateChangedEvent__DelegateSignature(enum NewState);// 0x4528238

--------------------------------
Class: PawnAimComponent.ActorComponent.Object
	interface class * AimInfoProvider;//[Offset: 0xac, Size: 0x8]
	interface class DoubleProperty* TargetPointsProviderInterface;//[Offset: 0xb4, Size: 0x8]
	FName TargetDynamicsProviderComponentTag;//[Offset: 0xc0, Size: 0x8]
	SceneComponent* TargetDynamicsProviderComponent;//[Offset: 0xc8, Size: 0x4]
	float TargetVelocityInterpSpeed;//[Offset: 0xd0, Size: 0x4]
	float TargetAccelerationInterpSpeed;//[Offset: 0xd8, Size: 0x4]
	float MaxAimPointExtrapotationTime;//[Offset: 0x11c, Size: 0x4]
	Actor* AimTargetActor;//[Offset: 0x120, Size: 0x4]
	Vector_NetQuantize AimPoint;//[Offset: 0x124, Size: 0xc]
	int16 TargetPointKey;//[Offset: 0x134, Size: 0x2]
	float AimPointInterpSpeed;//[Offset: 0x13c, Size: 0x4]
	float MaxLOSDistance;//[Offset: 0x140, Size: 0x4]
	float MaxLOSAngle;//[Offset: 0x144, Size: 0x4]
	enum State;//[Offset: 0x168, Size: 0x1]
	void StateChanged();// 0x37189ec
	void SetLOSCapabilities(float NewMaxLOSDistance, float NewMaxLOSAngle);// 0x3718930
	void GetLOSCapabilities(out float OutMaxLOSDistance, out float OutMaxLOSAngle);// 0x371884c
	void ControllerChanged(Controller* NewController, Controller* OldController, Pawn* Pawn);// 0x3718744
	void AimTargetActorChanged();// 0x3718728

--------------------------------
Class: TargetControllerComponent.TargetControllerBaseComponent.ActorComponent.Object
	bool bUseTeamVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x109, Size: 0x1]
	float TemporarySelectionDuration;//[Offset: 0x10c, Size: 0x4]
	interface class * TeamVisiblilty;//[Offset: 0x118, Size: 0x8]
	float MaxPrimaryTargetDistance;//[Offset: 0x150, Size: 0x4]
	float MaxHorizAngleToPrimaryTarget;//[Offset: 0x154, Size: 0x4]
	float MaxVertAngleToPrimaryTarget;//[Offset: 0x158, Size: 0x4]
	void UnlockTargetSelection();// 0x3719f4c
	void SetTemporarySelectionDuration(float Value);// 0x3719eb0
	void SetMaxVertAngleToPrimaryAngle(float Angle);// 0x3719db8
	void SetMaxPrimaryTargetDistance(float Value);// 0x3719d3c
	void SetMaxHorizAngleToPrimaryTarget(float Angle);// 0x3719c44
	float GetTemporarySelectionDuration();// 0x3719c28
	float GetMaxVertAngleToPrimaryTarget();// 0x35367b4
	float GetMaxPrimaryTargetDistance();// 0x3719c0c
	float GetMaxHorizAngleToPrimaryTarget();// 0x3719bf0

--------------------------------
Class: TargetControllerBaseComponent.ActorComponent.Object
	BattleTargetsManager* TargetsManager;//[Offset: 0xb4, Size: 0x4]
	enum State;//[Offset: 0xc4, Size: 0x1]
	void SetState(enum NewState);// 0x3719498
	void SetPendingTargetActor(Actor* Actor);// 0x3719368
	void ServerConfirmSetTargetActor();// 0x371930c
	void PrimaryTargetActorDestructed(Object* DestructedObject, interface classNone SourceDamageableInterface);// 0x371923c
	void PendingTargetActorDestructed(Object* DestructedObject, interface classNone SourceDamageableInterface);// 0x371916c
	void DeactivateProvider();// 0x3719150
	void Deactivated();// 0x3719134
	void ClientSetTargetActor(Actor* Actor);// 0x37190b4
	void ClientSetState(enum NewState);// 0x3719034
	void ActivateProvider();// 0x3719018
	void Activated();// 0x3718ffc

--------------------------------
Class: BattleTargetsManager.Object
	BattleTarget*[] Targets;//[Offset: 0x5c, Size: 0xc]

--------------------------------
Class: CameraAimingComponent.ActorComponent.Object
	LocalPlayer* LocalPlayer;//[Offset: 0xac, Size: 0x4]
	SceneComponent* LOSOriginComponent;//[Offset: 0xb0, Size: 0x4]
	FName LOSOriginComponentTag;//[Offset: 0xb8, Size: 0x8]
	FName LOSOriginSocketName;//[Offset: 0xc0, Size: 0x8]
	float OwnerAimTraceInterval;//[Offset: 0x134, Size: 0x4]
	float ServerAimTraceInterval;//[Offset: 0x138, Size: 0x4]
	float AimReplicationMinInterval;//[Offset: 0x13c, Size: 0x4]
	float AimPointReplicationThresholdSquared;//[Offset: 0x14c, Size: 0x4]
	float AimRightReplicationCosThreshold;//[Offset: 0x15c, Size: 0x4]
	float MinAimDistance;//[Offset: 0x16c, Size: 0x4]
	float MaxAimDistance;//[Offset: 0x170, Size: 0x4]
	float MaxLOSDistance;//[Offset: 0x174, Size: 0x4]
	float MaxLOSAngle;//[Offset: 0x178, Size: 0x4]
	float AimActorBias;//[Offset: 0x17c, Size: 0x4]
	byte AimTraceChannel;//[Offset: 0x311, Size: 0x1]
	bool bRotateOwnerOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x312, Size: 0x1]
	bool bPawnRequiredToActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x312, Size: 0x1]
	void WaitPlayerAndActivate();// 0x3718310
	void ServerSetState(enum NewState);// 0x371825c
	void ServerSetAimInfo(const Vector_NetQuantize NewAimPoint, const Vector_NetQuantize NewAimOrigin, const Vector_NetQuantizeNormal NewAimRight);// 0x3718130
	void PawnEquipmentChanged(int SlotIndex, Object* NewEquipment, Object* OldEquipment);// 0x35364b4
	void PawnChanged(Pawn* NewPawn, Pawn* OldPawn, Controller* Controller);// 0x3718028
	void ClientSetLOSCapabilities(float NewMaxLOSDistance, float NewMaxLOSAngle);// 0x3717f64

--------------------------------
Class: CameraManager_Match_C.PlayerCameraManager.Actor.Object
	Vector SmoothSocketRelPos;//[Offset: 0x2424, Size: 0xc]
	Vector SmoothSocketRelVel;//[Offset: 0x2430, Size: 0xc]
	float SmoothCamDist;//[Offset: 0x243c, Size: 0x4]
	Vector SmoothCamOffset;//[Offset: 0x2440, Size: 0xc]
	float CamOffsetInterpSpeed;//[Offset: 0x244c, Size: 0x4]
	Vector SmoothViewTargetPos;//[Offset: 0x2450, Size: 0xc]
	float PositionInterpSpeed;//[Offset: 0x245c, Size: 0x4]
	float SocketRelativePositionInterpSpeed;//[Offset: 0x2460, Size: 0x4]
	Vector SmoothTargetVel;//[Offset: 0x2464, Size: 0xc]
	float SocketRelativeVelocityInterpSpeed;//[Offset: 0x2470, Size: 0x4]
	float TargetVelocityInterpSpeed;//[Offset: 0x2474, Size: 0x4]
	float TargetVelocityDamping;//[Offset: 0x2478, Size: 0x4]
	float MaxTargetSpeed;//[Offset: 0x247c, Size: 0x4]
	float ViewTargetRotationInterpSpeed;//[Offset: 0x2480, Size: 0x4]
	float CamOffsetMultiplierInterpSpeed;//[Offset: 0x2484, Size: 0x4]
	float CamDistanceInterpSpeed;//[Offset: 0x2488, Size: 0x4]
	float BaseCamDistance;//[Offset: 0x248c, Size: 0x4]
	CollisionQueryParamsWrapper TraceParams;//[Offset: 0x2490, Size: 0xb8]
	float TraceRadius;//[Offset: 0x2548, Size: 0x4]
	Vector CameraBoundsMin;//[Offset: 0x254c, Size: 0xc]
	Vector CameraBoundsMax;//[Offset: 0x2558, Size: 0xc]
	float CamOffsetHitTimeSubstractor;//[Offset: 0x2564, Size: 0x4]
	float SmoothCamOffsetMultiplier;//[Offset: 0x2568, Size: 0x4]
	float CameraOffsetMinDistanceFromObstacle;//[Offset: 0x256c, Size: 0x4]
	float CamOffsetHitTimeMin;//[Offset: 0x2570, Size: 0x4]
	float CameraMinOffset;//[Offset: 0x2574, Size: 0x4]
	interface class RotatorProperty* ViewTargetCameraInterface;//[Offset: 0x2578, Size: 0x8]
	bool bPreferViewTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2580, Size: 0x1]
	Rotator LastCameraRotation;//[Offset: 0x2584, Size: 0xc]
	TViewTarget CallFunc_GetViewTargetInfo_ReturnValue;//[Offset: 0x2590, Size: 0x560]
	Actor* K2Node_CustomEvent_NewTarget;//[Offset: 0x2af0, Size: 0x4]
	Actor* K2Node_CustomEvent_OldTarget;//[Offset: 0x2af4, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x2af8, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af9, Size: 0x1]
	ActorCameraParams CallFunc_GetCameraParams_CameraParams;//[Offset: 0x2afc, Size: 0x18]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x2b18, Size: 0x10]
	void ViewTargetAssigned(Actor* bpp__NewTarget__pf, Actor* bpp__OldTarget__pf);// 0x3e57b20
	void UserConstructionScript();// 0x3e57b04
	void SetCameraParams(ActorCameraParams bpp__CameraParams__pf, float bpp__Damping__pf);// 0x3e57a28
	void ReceiveBeginPlay();// 0x3e57a0c
	void GetCameraParams(out ActorCameraParams bpp__CameraParams__pf);// 0x3e57974
	void ClearIgnoredActorsCollision();// 0x3e57958
	bool BlueprintUpdateCamera(Actor* bpp__CameraTarget__pf, out Vector bpp__NewCameraLocation__pf, out Rotator bpp__NewCameraRotation__pf, out float bpp__NewCameraFOV__pf);// 0x3e577d0
	void AddIgnoredActorWithAttachmentsCollision(Actor* bpp__Actor__pf);// 0x3e57750
	void ViewTargetAssignedEvent__DelegateSignature(Actor* bpp__NewTarget__pf, Actor* bpp__OldTarget__pf);// 0x4528238

--------------------------------
Class: CollisionQueryParamsWrapper

--------------------------------
Class: ActorCameraParams
	Vector AdditionalOffset_2_03ABCCDB429A23EEE130DEA24AFEC31B;//[Offset: 0x0, Size: 0xc]
	float MinOffset_9_E9A90788447A7E2F076279A6003C4A67;//[Offset: 0xc, Size: 0x4]
	float AdditionalDistance_5_934A272941FDE3E724E6508F65A70718;//[Offset: 0x10, Size: 0x4]
	bool bIgnoreWhenTraceView_11_5A80769421484B0D5A2C6D8A099C0D23;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: CameraModifier_Zoom_C.CameraModifier.Object
	float CurrentFOVScale;//[Offset: 0x30, Size: 0x4]
	float FireZoomFOVScale;//[Offset: 0x34, Size: 0x4]
	float RegularFOVScale;//[Offset: 0x38, Size: 0x4]
	float FireZoomInTime;//[Offset: 0x3c, Size: 0x4]
	float FireZoomOutTime;//[Offset: 0x40, Size: 0x4]
	float RegularZoomInTime;//[Offset: 0x44, Size: 0x4]
	float RegularZoomOutTime;//[Offset: 0x48, Size: 0x4]
	void SwitchToRegularZoom();// 0x3e58788
	void SwitchToFireZoom();// 0x3e5876c
	void BlueprintModifyCamera(float bpp__DeltaTime__pf, Vector bpp__ViewLocation__pf, Rotator bpp__ViewRotation__pf, float bpp__FOV__pf, out Vector bpp__NewViewLocation__pf, out Rotator bpp__NewViewRotation__pf, out float bpp__NewFOV__pf);// 0x3e58510

--------------------------------
Class: Team.Object
	int Index;//[Offset: 0x1c, Size: 0x4]
	float Score;//[Offset: 0x20, Size: 0x4]
	void StateChangedAndNeedsReplicate();// 0x36fd82c
	float SetScore(float Value);// 0x36fd778
	void ScoreChanged();// 0x36fd75c
	void RemoveMemberActor(Actor* MemberActor);// 0x36fd5ec
	void IndexChanged();// 0x36fd5d0
	float GetScore();// 0x36fc854
	int GetNumMembers();// 0x36fd5b4
	interface classNone GetMemberInterface(int IndexInTeam);// 0x36fd518
	Actor* GetMemberActor(int IndexInTeam);// 0x36fd48c
	int GetIndex();// 0x36fd470
	void AddMemberActor(Actor* MemberActor);// 0x36fd2e4

--------------------------------
Class: PlayerControlledWeapon
	interface class * Weapon_7_358ADE044BF18240A5CD75B09AB4744C;//[Offset: 0x0, Size: 0x8]
	int StotIndex_6_4C442C664969B42445E310A50B7CE0C8;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AzimuthDistanceAimComponent.ActorComponent.Object
	interface class * AimInfoProvider;//[Offset: 0xac, Size: 0x8]
	interface class DoubleProperty* EquipmentInterface;//[Offset: 0xb4, Size: 0x8]
	Pawn* OwnerPawn;//[Offset: 0xbc, Size: 0x4]
	Vector_NetQuantize AimPoint;//[Offset: 0xc0, Size: 0xc]
	float DistanceAlpha;//[Offset: 0xd0, Size: 0x4]
	float MinDistance;//[Offset: 0xd4, Size: 0x4]
	float MaxDistance;//[Offset: 0xd8, Size: 0x4]
	float AimPointReplicationThresholdSquared;//[Offset: 0xf0, Size: 0x4]
	float SendAimPointToServerMinInterval;//[Offset: 0xf8, Size: 0x4]
	bool bIsAzimuthDistanceAimingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	enum State;//[Offset: 0x11d, Size: 0x1]
	void StateChanged();// 0x3714168
	void SetDistanceRange(const float Min, const float Max);// 0x3716f7c
	void SetDistanceAlpha(const float Value);// 0x3716f04
	void SetDistance(const float Value);// 0x3716e8c
	void SetAzimuthDistanceAimingEnabled(bool bEnabled);// 0x3716e0c
	void Server_SetState(enum NewState);// 0x3716d58
	void Server_SetAimPoint(const Vector_NetQuantize InAimPoint);// 0x3716cac
	bool IsAzimuthDistanceAimingEnabled();// 0x3716c90
	float GetMinDistance();// 0x3716c74
	float GetMaxDistance();// 0x3716c58
	float GetDistanceAlpha();// 0x3716c3c
	float GetDistance();// 0x36f03cc
	void ControllerChanged(Controller* NewController, Controller* OldController, Pawn* Pawn);// 0x3716b34

--------------------------------
Class: HUD_Match_C.WidgetsManagerHUD_C.HUD.Actor.Object
	WidgetComponent_Button_C* SettingsButtonWidgetComponent;//[Offset: 0x35c, Size: 0x4]
	WidgetComponent_Button_C* ScoreboardButtonWidgetComponent;//[Offset: 0x360, Size: 0x4]
	WidgetComponent_InputActionButton_C* SwitchHudButtonWidgetComponent;//[Offset: 0x364, Size: 0x4]
	WidgetComponent_Speedometer_C* SpeedometerWidgetComponent;//[Offset: 0x368, Size: 0x4]
	MatchHUDWidgetComponent_C* OutOfZoneWarningWidget;//[Offset: 0x36c, Size: 0x4]
	WidgetComponent_GameModeDescription_C* GameModeDescriptionWidget;//[Offset: 0x370, Size: 0x4]
	MatchHUDWidgetComponent_C* DamageStagesIndicatorsWidget;//[Offset: 0x374, Size: 0x4]
	BoxLayoutComponent* PawnInfoLayout;//[Offset: 0x378, Size: 0x4]
	BoxLayoutComponent* CenterLayout;//[Offset: 0x37c, Size: 0x4]
	BoxLayoutComponent* TopButtonsLayout;//[Offset: 0x380, Size: 0x4]
	MatchPostProcessManagerComponent_C* PostProcessManagerComponent;//[Offset: 0x384, Size: 0x4]
	WidgetsAnimationComponent* WidgetsAnimation;//[Offset: 0x388, Size: 0x4]
	WidgetsManagerComponent_C* WidgetsManagerComponent;//[Offset: 0x38c, Size: 0x4]
	BoxLayoutComponent* CenterBottomLayout;//[Offset: 0x390, Size: 0x4]
	BoxLayoutComponent* CenterMiddleLayout;//[Offset: 0x394, Size: 0x4]
	BoxLayoutComponent* CeneterTopLayout;//[Offset: 0x398, Size: 0x4]
	TeamMemberMarkersComponent* TeamMemberMarkers;//[Offset: 0x39c, Size: 0x4]
	RootAnchorsLayoutComponent_C* RootWidgetsLayout;//[Offset: 0x3a0, Size: 0x4]
	Widget_HudCanvas_C* HudCanvasWidget;//[Offset: 0x3a4, Size: 0x4]
	Widget_Reticle_C* ReticleWidget;//[Offset: 0x3a8, Size: 0x4]
	Widget_SelectedTarget_C* TargetWidget;//[Offset: 0x3ac, Size: 0x4]
	Widget_AimedPlayerName_C* AimedPlayerWidget;//[Offset: 0x3b0, Size: 0x4]
	Widget_HitAndDamageIndicator_C* HitAndDamageIndicatorWidget;//[Offset: 0x3b4, Size: 0x4]
	Widget_AimAssist_C* AimAssistWidget;//[Offset: 0x3b8, Size: 0x4]
	UserWidget* InteractionProxyWidget;//[Offset: 0x3bc, Size: 0x4]
	Widget_TouchCameraControl_C* TouchCameraControlWidget;//[Offset: 0x3c0, Size: 0x4]
	UserWidget* CountdownWidget;//[Offset: 0x3c4, Size: 0x4]
	HudControlGroupData[] ControlsGroupsMasks;//[Offset: 0x3c8, Size: 0xc]
	int[] WeaponsMasks;//[Offset: 0x3d4, Size: 0xc]
	Pawn* OwnPawn;//[Offset: 0x3e0, Size: 0x4]
	TimerHandle SetupSpawnZonesTimerHandle;//[Offset: 0x3e8, Size: 0x8]
	SpawnZoneUIData[] SpawnZones;//[Offset: 0x3f0, Size: 0xc]
	SpawnSpot_Match_C* TmpSpawnSpot;//[Offset: 0x3fc, Size: 0x4]
	int TeamIndex;//[Offset: 0x400, Size: 0x4]
	float RequestedSpawnDeadline;//[Offset: 0x404, Size: 0x4]
	bool bSpawnUIRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	bool bSpawnUIVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	WidgetComponent_SpectatingPlayerName_C* SpectatingPlayerNameWidgetComponent;//[Offset: 0x40c, Size: 0x4]
	Component_TeamMembersWidgetComponentsManager_C* TeamMembersMarkerComponentsManager;//[Offset: 0x410, Size: 0x4]
	class Object* MatchProgressWidgetClass;//[Offset: 0x414, Size: 0x4]
	class Object* MatchResultWidgetClass;//[Offset: 0x418, Size: 0x4]
	int HudPresetIndex;//[Offset: 0x41c, Size: 0x4]
	float ControlsTransparency;//[Offset: 0x420, Size: 0x4]
	float ButtonsTransparency;//[Offset: 0x424, Size: 0x4]
	bool bHUDEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x42c, Size: 0x4]
	FName SpectatingStateName;//[Offset: 0x430, Size: 0x8]
	bool bSpectatorUIRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool bSpectatorUIVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	class Object* SquadDestroyedWidgetActorClass;//[Offset: 0x43c, Size: 0x4]
	bool bShouldShowSquadDestroyedWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bShouldShowMatchProgressWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	bool bShouldShowMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 0x1]
	bool bShouldShowSpectatingPlayerName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x443, Size: 0x1]
	bool bShouldShowTeamMembersWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	WidgetComponent_AzimuthDistanceAimingMarker_C* AzimuthDistanceAimimgMarkerWidgetComponent;//[Offset: 0x448, Size: 0x4]
	SimulatedProjectilePathComponent_C* AzimuthDistanceAimProjectilePathVisualization;//[Offset: 0x44c, Size: 0x4]
	DamageAreaDecalComponent_C* DamagAreaDecalComponent;//[Offset: 0x450, Size: 0x4]
	ProjectileSimulation* ProjectileSimulation;//[Offset: 0x454, Size: 0x4]
	bool bHasTouchScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool bPendingOpenScoreboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]
	ControlsManagerComponent_C* ControlsManager;//[Offset: 0x45c, Size: 0x4]
	int ControlGroupsAvailabilityMask;//[Offset: 0x460, Size: 0x4]
	byte PawnMovementMode;//[Offset: 0x464, Size: 0x1]
	SpawnSpot_TeamMatch_C* K2Node_DynamicCast_AsSpawn_Spot_Team_Match;//[Offset: 0x468, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 0x1]
	SpawnSpot_Match_C*[] CallFunc_GetAllActorsOfClass_OutActors;//[Offset: 0x470, Size: 0xc]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x47c, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 0x1]
	int K2Node_CustomEvent_NewTeamIndex;//[Offset: 0x480, Size: 0x4]
	int K2Node_CustomEvent_OldTeamIndex;//[Offset: 0x484, Size: 0x4]
	interface class RotatorProperty* K2Node_CustomEvent_TeamInfo;//[Offset: 0x488, Size: 0x8]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x490, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x498, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x4a8, Size: 0x10]
	float K2Node_CustomEvent_Timeout2;//[Offset: 0x4b8, Size: 0x4]
	bool CallFunc_OpenModalWidget_bSucceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	float K2Node_CustomEvent_Timeout1;//[Offset: 0x4c0, Size: 0x4]
	Object* Temp_object_Variable;//[Offset: 0x4c4, Size: 0x4]
	int Temp_int_Variable;//[Offset: 0x4c8, Size: 0x4]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x4cc, Size: 0x1]
	Object* Temp_object_Variable1;//[Offset: 0x4d0, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent1;//[Offset: 0x4d4, Size: 0x4]
	int Temp_int_Array_Index_Variable;//[Offset: 0x4d8, Size: 0x4]
	WidgetActor_C* CallFunc_FindWidgetInstance_WidgetInstance;//[Offset: 0x4dc, Size: 0x4]
	bool CallFunc_IsOpen_IsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	WidgetActor_C* CallFunc_FindWidgetInstance_WidgetInstance1;//[Offset: 0x4e4, Size: 0x4]
	WidgetActor_Scoreboard_C* K2Node_DynamicCast_AsWidget_Actor_Scoreboard;//[Offset: 0x4e8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 0x1]
	WidgetActor_C* CallFunc_FindWidgetInstance_WidgetInstance2;//[Offset: 0x4f0, Size: 0x4]
	bool CallFunc_IsOpen_IsOpen1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 0x1]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent;//[Offset: 0x4f8, Size: 0x4]
	WidgetActor_C* CallFunc_FindWidgetInstance_WidgetInstance3;//[Offset: 0x4fc, Size: 0x4]
	bool CallFunc_IsOpen_IsOpen2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	WidgetActor_C* CallFunc_FindWidgetInstance_WidgetInstance4;//[Offset: 0x504, Size: 0x4]
	int Temp_int_Variable1;//[Offset: 0x508, Size: 0x4]
	byte K2Node_CustomEvent_NewMovementMode;//[Offset: 0x50c, Size: 0x1]
	byte K2Node_CustomEvent_OldMovementMode;//[Offset: 0x50d, Size: 0x1]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match;//[Offset: 0x510, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x518, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x528, Size: 0x10]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x538, Size: 0x4]
	int K2Node_CustomEvent_SlotIndex1;//[Offset: 0x53c, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment1;//[Offset: 0x540, Size: 0x4]
	Object* K2Node_CustomEvent_OldEquipment;//[Offset: 0x544, Size: 0x4]
	Pawn* K2Node_CustomEvent_NewPawn1;//[Offset: 0x548, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn1;//[Offset: 0x54c, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller4;//[Offset: 0x550, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches2;//[Offset: 0x554, Size: 0x1]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 0x1]
	interface class FloatProperty* K2Node_DynamicCast_AsEquipment_Controller_Interface;//[Offset: 0x558, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	interface class DoubleProperty* K2Node_DynamicCast_AsEquipment_Controller_Interface1;//[Offset: 0x564, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches3;//[Offset: 0x56d, Size: 0x1]
	bool K2Node_SwitchEnum3_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56e, Size: 0x1]
	interface class DoubleProperty* K2Node_DynamicCast_AsEquipment_Controller_Interface2;//[Offset: 0x570, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	interface class DoubleProperty* K2Node_DynamicCast_AsEquipment_Controller_Interface3;//[Offset: 0x57c, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches4;//[Offset: 0x585, Size: 0x1]
	int K2Node_CustomEvent_SlotIndex;//[Offset: 0x588, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment;//[Offset: 0x58c, Size: 0x4]
	bool K2Node_SwitchEnum4_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	EquipmentSlotInfo CallFunc_GetEquipmentSlotInfo_SlotInfo;//[Offset: 0x594, Size: 0x30]
	Pawn* K2Node_CustomEvent_NewPawn;//[Offset: 0x5c4, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn;//[Offset: 0x5c8, Size: 0x4]
	int Temp_int_Array_Index_Variable1;//[Offset: 0x5cc, Size: 0x4]
	SpawnSpot_Match_C* CallFunc_Array_Get_Item;//[Offset: 0x5d0, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0x5d8, Size: 0x10]
	interface class FloatProperty* K2Node_DynamicCast_AsDamage_Stages_Indicators_Interface;//[Offset: 0x5e8, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	FName K2Node_Event_Name;//[Offset: 0x5f8, Size: 0x8]
	interface class DoubleProperty* K2Node_Event_DamageableInterface;//[Offset: 0x600, Size: 0x8]
	interface class DoubleProperty* K2Node_DynamicCast_AsDamage_Stages_Indicators_Interface1;//[Offset: 0x608, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate5;//[Offset: 0x618, Size: 0x10]
	int Temp_int_Variable2;//[Offset: 0x628, Size: 0x4]
	int Temp_int_Loop_Counter_Variable1;//[Offset: 0x62c, Size: 0x4]
	float K2Node_CustomEvent_Timeout;//[Offset: 0x630, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate6;//[Offset: 0x638, Size: 0x10]
	WidgetsManagerComponent_C* K2Node_ComponentBoundEvent_WidgetsManager;//[Offset: 0x648, Size: 0x4]
	Object* CallFunc_GetTopModalWidget_Widget;//[Offset: 0x64c, Size: 0x4]
	int CallFunc_GetTopModalWidget_Priority;//[Offset: 0x650, Size: 0x4]
	bool CallFunc_HasOpenModalWidgets_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 0x1]
	int Temp_int_Variable3;//[Offset: 0x658, Size: 0x4]
	WidgetActor_C* CallFunc_FindWidgetInstance_WidgetInstance5;//[Offset: 0x65c, Size: 0x4]
	SpectatorPawn* K2Node_CustomEvent_NewSpectatorPawn;//[Offset: 0x660, Size: 0x4]
	SpectatorPawn* K2Node_CustomEvent_OldSpectatorPawn;//[Offset: 0x664, Size: 0x4]
	PlayerController* K2Node_CustomEvent_Controller3;//[Offset: 0x668, Size: 0x4]
	FName K2Node_CustomEvent_NewStateName;//[Offset: 0x670, Size: 0x8]
	FName K2Node_CustomEvent_OldStateName;//[Offset: 0x678, Size: 0x8]
	Controller* K2Node_CustomEvent_Controller2;//[Offset: 0x680, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches5;//[Offset: 0x684, Size: 0x1]
	bool K2Node_SwitchEnum5_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x685, Size: 0x1]
	enum CallFunc_GetRespawnAbility_Result;//[Offset: 0x686, Size: 0x1]
	PlayerController_Match_C* K2Node_CustomEvent_Controller1;//[Offset: 0x688, Size: 0x4]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match1;//[Offset: 0x68c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	interface class FloatProperty* CallFunc_GetRespawnAbility_self_CastInput;//[Offset: 0x694, Size: 0x8]
	enum CallFunc_GetRespawnAbility_Result1;//[Offset: 0x69c, Size: 0x1]
	bool K2Node_CustomEvent_bCustomizing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 0x1]
	ControlsManagerComponent_C* K2Node_CustomEvent_ControlsManager;//[Offset: 0x6a0, Size: 0x4]
	int K2Node_CustomEvent_NewControlledReloadWeaponsMask;//[Offset: 0x6a4, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate7;//[Offset: 0x6a8, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate8;//[Offset: 0x6b8, Size: 0x10]
	PlayerController_Match_C* K2Node_CustomEvent_Controller;//[Offset: 0x6c8, Size: 0x4]
	interface class FloatProperty* CallFunc_QueryInterfacePure_OutInterface;//[Offset: 0x6cc, Size: 0x8]
	interface class DoubleProperty* CallFunc_GetState_self_CastInput;//[Offset: 0x6d4, Size: 0x8]
	void RespawnAbilityChangedEvent__DelegateSignature(PlayerController_Match_C* bpp__Controller__pf);// 0x4528238
	void OnLeaveZone__DelegateSignature(float bpp__Timeout__pf);// 0x4528238
	void OnEnterZone__DelegateSignature();// 0x4528238
	void OnControlsCustomizingStateChanged__DelegateSignature(bool bpp__bCustomizing__pf, ControlsManagerComponent_C* bpp__ControlsManager__pf);// 0x4528238
	void ControlledReloadWeaponsChangedEvent__DelegateSignature(int bpp__NewControlledReloadWeaponsMask__pf);// 0x4528238
	void UpdatePawnMovementModeHandling(Pawn* bpp__OldPawn__pf, Pawn* bpp__NewPawn__pf);// 0x3eb1044
	void UpdatePawnAbilityHandling(Pawn* bpp__OldPawn__pf, Pawn* bpp__NewPawn__pf);// 0x3e4c428
	void UpdateControlGroupsOnPawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf);// 0x3eb0f80
	void UpdateControlGroupsForEquipment(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf);// 0x3eb0ebc
	void UpdateControlGroupsAvailability(Object* bpp__NewEquipment__pf, int bpp__SlotIndex__pf, enum bpp__ControlGroup__pf);// 0x3eb0db4
	void UnbindAllDamageablesFromIndicators();// 0x3eb0d98
	void ToggleSettings();// 0x3ea64cc
	void ToggleScoreboard();// 0x3e57958
	void TeamChanged(int bpp__NewTeamIndex__pf, int bpp__OldTeamIndex__pf, out const interface classNone bpp__TeamInfo__pf);// 0x3eb0c7c
	void SwitchToNextHudPreset();// 0x3e91890
	void StopAzimuthDistanceAimVisualization();// 0x3e91874
	void StartAzimuthDistanceAimVisualization();// 0x3eb0c60
	void SpectatorPawnChanged(SpectatorPawn* bpp__NewSpectatorPawn__pf, SpectatorPawn* bpp__OldSpectatorPawn__pf, PlayerController* bpp__Controller__pf);// 0x3eb0b58
	void ShowTeamMembersWidgets();// 0x3eb0b3c
	void ShowTargetWidget();// 0x3eb0b20
	void ShowSquadDestroyedWidget();// 0x3e61c4c
	void ShowSpectatorUI();// 0x3eb0b04
	void ShowSpectatingPlayerName();// 0x3e7eb00
	void ShowSpawnZones();// 0x3e470d8
	void ShowSpawnUI(float bpp__Timeout__pf);// 0x3eb0a84
	void ShowReticle();// 0x3e47020
	void ShowPerfStats();// 0x3eb0a68
	void ShowMatchResultWidgets();// 0x3eb0a4c
	void ShowMatchProgressWidgets();// 0x3e48038
	void ShowMarkers();// 0x3eb0a30
	void ShowHitAndDamageIndicatorWidget();// 0x3eb0a14
	void ShowAimedPlayerWidget();// 0x3eb09f8
	void ShowAimAssistWidget();// 0x3e91758
	void SetupSpectatorPawnHandling();// 0x3e4c30c
	void SetupPawnHandling();// 0x3eb09dc
	void SetupInteractionProxy();// 0x3eb09c0
	void SetupDamageStageIndicatorsForPawn(Pawn* bpp__Pawn__pf);// 0x3eb0940
	void SetupDamageStageIndicatorsForEquipment(int bpp__SlotIndex__pf, Object* bpp__Equipment__pf);// 0x3eb087c
	void SetupControlledReloadWeaponsHandling();// 0x3eb0860
	void SetupControlGroupsManegement();// 0x3ea6c10
	void SetupAzimuthDistanceAiming();// 0x3eb0844
	void SetShouldShowTeamMembersWidgets(bool bpp__bValue__pf);// 0x3eb07bc
	void SetShouldShowSpectatingPlayerName(bool bpp__bValue__pf);// 0x3eb0734
	void SetShouldShowMatchProgressWidgets(bool bpp__bValue__pf);// 0x3eb06ac
	void SetShouldShowMarkers(bool bpp__bValue__pf);// 0x3eb0624
	void SetHudPresetIndex(out HudPreset[] bpp__HudPresets__pf, int bpp__Index__pf);// 0x3eb0534
	void SetHudPreset(out HudPreset bpp__HudPreset__pf);// 0x3eb04a8
	void SetControlsWidgetsTransparency(float bpp__Value__pf);// 0x379cd48
	void SetControlGroupsAvalabilityMask(int bpp__AvalabilityMask__pf);// 0x3eb0428
	void SetButtonsTransparency(float bpp__Value__pf);// 0x3e48b94
	void RespawnAbilityChanged(PlayerController_Match_C* bpp__Controller__pf);// 0x3eb03a8
	void ResetHudPresets();// 0x3e9115c
	void ResetControlsSettings();// 0x3eb038c
	void ResetControlGroupsManagement();// 0x3eb0370
	void ResetControlGroupsAvailability();// 0x3e61c30
	void RequestShowSpectatorUI();// 0x3ea6324
	void RequestShowSpawnUI(float bpp__Timeout__pf);// 0x3eb02f0
	void RequestRedrawDamageStagesIndicators();// 0x37ccc50
	void RequestHideSpectatorUI();// 0x3eb02d4
	void RequestHideSpawnUI();// 0x3ea5c10
	void RenewSpawnZones();// 0x3e48720
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3eb0254
	void PawnMovementModeChanged(byte bpp__NewMovementMode__pf, byte bpp__OldMovementMode__pf);// 0x3eb0190
	void PawnEquipmentChanged(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf, Object* bpp__OldEquipment__pf);// 0x3eb0088
	void PawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x3eaff80
	void OpenSettings();// 0x3ea64b0
	void OpenScoreboard();// 0x3ea6478
	void OpenOrUpdateScoreBoard();// 0x3ea645c
	void OnMatchEnded();// 0x3ea6568
	void InitTeamInfo();// 0x3e48704
	void InitRespawnAbilityHandling();// 0x3e95dd8
	void InitOutOfZoneWarning();// 0x3eaff64
	void InitHUDEnabledState();// 0x3ea6440
	void InitControls();// 0x3eaff48
	void InitControllerStateHandling();// 0x3ea5bf4
	void HUDToggled();// 0x3ea65a0
	void HudPresetShouldShowTeamMembersWidgetsChanged(bool bpp__IsSpectatorHudPreset__pf, int bpp__PresetIndex__pf, bool bpp__bValue__pf);// 0x3eafe2c
	void HudPresetShouldShowSpectatingPlayerNameChanged(bool bpp__IsSpectatorHudPreset__pf, int bpp__PresetIndex__pf, bool bpp__bValue__pf);// 0x3eafd10
	void HudPresetShouldShowMatchProgressWidgetsChanged(bool bpp__IsSpectatorHudPreset__pf, int bpp__PresetIndex__pf, bool bpp__bValue__pf);// 0x3eafbf4
	void HudPresetShouldShowMarkersChanged(bool bpp__IsSpectatorHudPreset__pf, int bpp__PresetIndex__pf, bool bpp__bValue__pf);// 0x3eafad8
	void HudPresetControlsWidgetsTransparencyChanged(bool bpp__IsSpectatorHudPreset__pf, int bpp__PresetIndex__pf, float bpp__Value__pf);// 0x3eaf9c4
	void HudPresetButtonsTransparencyChanged(bool bpp__IsSpectatorHudPreset__pf, int bpp__PresetIndex__pf, float bpp__Value__pf);// 0x3eaf8b0
	void HideTeamMembersWidgets();// 0x3e48c94
	void HideTargetWidget();// 0x3e91bb0
	void HideSquadDestroyedWidget();// 0x3e48d30
	void HideSpectatorUI();// 0x3eaf894
	void HideSpectatingPlayerName();// 0x3e47110
	void HideSpawnZones();// 0x3e61e60
	void HideSpawnUI();// 0x3ea6d48
	void HideReticle();// 0x3e48af8
	void HidePawnAbilityControls();// 0x3e94888
	void HideMatchResultWidgets();// 0x3e48adc
	void HideMatchProgressWidgets();// 0x3e61af8
	void HideMarkers();// 0x3e491a8
	void HideHitAndDamageIndicatorWidget();// 0x3eaf878
	void HideGameModeDescription();// 0x3e47f9c
	void HideAimedPlayerWidget();// 0x3e46eb0
	void HideAimAssistWidget();// 0x3eaf85c
	void HandleMatchZoneLeave(float bpp__Timeout__pf);// 0x3eaf7dc
	void HandleMatchZoneEnter();// 0x3eaf7c0
	void ForceEndControlsCustomization();// 0x3eaf7a4
	void FinalizeSetupSpawnZone(out SpawnZoneUIData bpp__ZoneData__pf, int bpp__Index__pf);// 0x3eaf64c
	void EnableHUD();// 0x37ccb28
	void DisableHUD();// 0x3eaf630
	void DeferredSpawnZoneInit();// 0x3e61b14
	void ControlsCustomizingStateChanged(bool bpp__bCustomizing__pf, ControlsManagerComponent_C* bpp__ControlsManager__pf);// 0x3eaf560
	void ControllerStateChanged(FName bpp__NewStateName__pf, FName bpp__OldStateName__pf, Controller* bpp__Controller__pf);// 0x3eaf444
	void ControlledReloadWeaponsChanged(int bpp__NewControlledReloadWeaponsMask__pf);// 0x3eaf3c4
	void ConditionalShowSpectatorUI();// 0x3eaf3a8
	void ConditionalShowSpawnUI();// 0x3ea6abc
	void ConditionalShowGameModeDescription();// 0x3e470f4
	void CloseSettings();// 0x3eaf38c
	void CloseScoreboard();// 0x3ea65bc
	void ClearSpawnZonesData();// 0x3e46e78
	void CleanupTeamInfo();// 0x3e46e94
	void CleanupSpectatorPawnHandling();// 0x3e4cd4c
	void CleanupSpawnZones();// 0x3e61c68
	void CleanupPawnHandling();// 0x3e57a0c
	void CleanupInteractionProxy();// 0x3e9486c
	void CleanupHUDEnabledState();// 0x3eaf370
	void CleanupControls();// 0x3eaf354
	void CleanupControlledReloadWeaponsHandling();// 0x3eaf338
	void CleanupAzimuthDistanceAiming();// 0x3e94afc
	void CleanOutOfZoneWarning();// 0x3ea6308
	void CheckTeamMembersWidgetsVisibility();// 0x3e470bc
	void CheckTargetWidgetVisibility();// 0x3eaf31c
	void CheckSquadDestroyedWidgetVisibility();// 0x3eaf300
	void CheckSpectatingPlayerNameVisibility();// 0x3e7f44c
	void CheckReticleVisibility();// 0x3e7f340
	void CheckPawnSpecificControls();// 0x3eaf2e4
	void CheckMovementSpecificControls();// 0x3e4cd30
	void CheckMatchResultWidgetsVisibility();// 0x3e7eb1c
	void CheckMatchProgressWidgetsVisibility();// 0x3eaf2c8
	void CheckMarkersVisibility();// 0x3e480d4
	void CheckHitAndDamageIndicatorWidgetVisibility();// 0x3e916bc
	void CheckAimedPlayerWidgetVisibility();// 0x3eaf2ac
	void CheckAimAssistWidgetVisibility();// 0x3eaf290
	float CalculateSpawnDelay();// 0x3eaf260
	void BndEvt__WidgetsManagerComponent_K2Node_ComponentBoundEvent_1_ModalWidgetsStackChangedEvent__Delegate(WidgetsManagerComponent_C* bpp__WidgetsManager__pf);// 0x3ea69bc
	void BndEvt__SettingsButtonWidgetComponent_K2Node_ComponentBoundEvent_1_OnWidgetClicked__DelegateSignatur(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e57750
	void BndEvt__ScoreboardButtonWidgetComponent_K2Node_ComponentBoundEvent_0_OnWidgetClicked__DelegateSignat(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3eaf1e0
	void BindDamageableToIndicator(FName bpp__Name__pf, out const interface classNone bpp__DamageableInterface__pf);// 0x3eaf100
	void BeginControlsCustomization(out const FName[] bpp__FilterControlNames__pf__const, bool bpp__bInclusiveFilter__pf__const);// 0x3eaf008
	void AzimuthDistanceAimingStateChanged(PlayerController_Match_C* bpp__Controller__pf);// 0x3eaef88
	void AbilityAvilabilityChanged();// 0x3eaef6c
	void AzimuthDistanceAimingStateChanged__DelegateSignature(PlayerController_Match_C* bpp__Controller__pf);// 0x4528238
	void SpectatorPawnChangedEvent__DelegateSignature(SpectatorPawn* bpp__NewSpectatorPawn__pf, SpectatorPawn* bpp__OldSpectatorPawn__pf, PlayerController* bpp__Controller__pf);// 0x4528238
	void PawnChangedEvent__DelegateSignature(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x4528238
	void MovementModeChangedEvent__DelegateSignature(byte bpp__NewMovementMode__pf, byte bpp__OldMovementMode__pf);// 0x4528238
	void HUDToggledEvent__DelegateSignature();// 0x4528238
	void ControllerStateChangedEvent__DelegateSignature(FName bpp__NewStateName__pf, FName bpp__OldStateName__pf, Controller* bpp__Controller__pf);// 0x4528238

--------------------------------
Class: WidgetComponent_InputActionButton_C.WidgetComponent_Button_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Key InputActionKey;//[Offset: 0x9d8, Size: 0x10]

--------------------------------
Class: WidgetComponent_Speedometer_C.WidgetComponent_RichText_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PawnMovementComponent* MovementComponent;//[Offset: 0x880, Size: 0x4]
	int CurrentSpeed;//[Offset: 0x884, Size: 0x4]
	int LastSpeed;//[Offset: 0x888, Size: 0x4]
	Pawn* K2Node_CustomEvent_NewPawn;//[Offset: 0x88c, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn;//[Offset: 0x890, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller;//[Offset: 0x894, Size: 0x4]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x898, Size: 0x1]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x89c, Size: 0x28]
	FormatArgumentData[] K2Node_MakeArray_Array;//[Offset: 0x8c4, Size: 0xc]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x8d0, Size: 0x4]
	Vector CallFunc_GetVelocity_ReturnValue;//[Offset: 0x8d4, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x8e0, Size: 0x10]
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x403c51c
	void PawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x40416f0
	void InitPawnHandling();// 0x3e4cd4c
	void CleanupPawnHandling();// 0x3e4cd14
	void PawnChangedEvent__DelegateSignature(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x4528238

--------------------------------
Class: WidgetComponent_RichText_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Widget_RichText_C* RichTextWidget;//[Offset: 0x860, Size: 0x4]
	FText Text;//[Offset: 0x864, Size: 0xc]
	DataTable* TextStyleSet;//[Offset: 0x870, Size: 0x4]
	float TextLineHeightPercentageOverride;//[Offset: 0x874, Size: 0x4]
	Widget_RichText_C* K2Node_DynamicCast_AsWidget_Rich_Text;//[Offset: 0x878, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 0x1]
	void SetText(out const FText bpp__Text__pf__const);// 0x403f9f8

--------------------------------
Class: Widget_RichText_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	RichTextBlock* RichText;//[Offset: 0x1c0, Size: 0x4]
	void SetTextWrapping(bool bpp__bAutoWrap__pf, float bpp__WrapAt__pf);// 0x3fece24
	void SetTextStyleSet(DataTable* bpp__TextStyleSet__pf);// 0x3e5ec58
	void SetText(out const FText bpp__InText__pf__const);// 0x3fe9afc
	void SetLineHeightPercentage(float bpp__Value__pf);// 0x3f13090
	void SetJustification(byte bpp__Justification__pf);// 0x3e45630

--------------------------------
Class: MatchHUDWidgetComponent_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WidgetComponent_GameModeDescription_C.MatchHUDWidgetComponent_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	HUD_Match_C* K2Node_DynamicCast_AsHUD_Match;//[Offset: 0x860, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 0x1]

--------------------------------
Class: MatchPostProcessManagerComponent_C.BasePostProcessManagerComponent_C.ActorComponent.Object
	PostProcessVolume* PostProcessVolume;//[Offset: 0x10c, Size: 0x4]
	float K2Node_Event_BlurAmount;//[Offset: 0x110, Size: 0x4]
	enum K2Node_Event_Comparison;//[Offset: 0x114, Size: 0x1]
	PostProcessVolume*[] CallFunc_GetAllActorsOfClass_OutActors;//[Offset: 0x118, Size: 0xc]
	bool K2Node_Event_bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	PostProcessVolume* CallFunc_Array_Get_Item;//[Offset: 0x128, Size: 0x4]
	PostProcessVolume*[] CallFunc_GetAllActorsOfClass_OutActors1;//[Offset: 0x12c, Size: 0xc]
	PostProcessVolume* CallFunc_Array_Get_Item1;//[Offset: 0x138, Size: 0x4]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x2b0, Size: 0x4f0]
	float Priority;//[Offset: 0x7a0, Size: 0x4]
	float BlendRadius;//[Offset: 0x7a4, Size: 0x4]
	float BlendWeight;//[Offset: 0x7a8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ac, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ac, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5c688e8

--------------------------------
Class: TeamMemberMarkersComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TeamMemberMarkerData[] SquadMarkers;//[Offset: 0x49c, Size: 0xc]
	TeamMemberMarkerData[] AllyMarkers;//[Offset: 0x4a8, Size: 0xc]
	TeamMemberMarkerData[] EnemyMarkers;//[Offset: 0x4b4, Size: 0xc]
	delegate OnMarkersChanged;//[Offset: 0x500, Size: 0xc]
	TeamMemberMarkerType[] MarkerTypes;//[Offset: 0x50c, Size: 0xc]
	Color SquadMarkerColor;//[Offset: 0x518, Size: 0x4]
	Color AllyMarkerColor;//[Offset: 0x51c, Size: 0x4]
	Color EnemyMarkerColor;//[Offset: 0x520, Size: 0x4]
	Vector2D ScreenBorder;//[Offset: 0x524, Size: 0x8]
	Vector2D MarkerScreenSize;//[Offset: 0x52c, Size: 0x8]
	float MarkerScreenVerticalOffset;//[Offset: 0x534, Size: 0x4]
	float MarkerDepth;//[Offset: 0x538, Size: 0x4]
	float SizePerspectiveScaleDistanceMultiplier;//[Offset: 0x53c, Size: 0x4]
	float SizePerspectiveScaleMinDistance;//[Offset: 0x540, Size: 0x4]
	float SizePerspectiveScaleMaxDistance;//[Offset: 0x544, Size: 0x4]
	float OffsetPerspectiveScaleDistanceMultiplier;//[Offset: 0x548, Size: 0x4]
	float OffsetPerspectiveScaleMinDistance;//[Offset: 0x54c, Size: 0x4]
	float OffsetPerspectiveScaleMaxDistance;//[Offset: 0x550, Size: 0x4]
	FName MarkerAttachComponentTag;//[Offset: 0x558, Size: 0x8]
	FName MarkerTypeTag;//[Offset: 0x560, Size: 0x8]
	enum OwnSquadMarkersMode;//[Offset: 0x568, Size: 0x1]
	enum OwnTeamMarkersMode;//[Offset: 0x569, Size: 0x1]
	enum AlliedTeamMarkersMode;//[Offset: 0x56a, Size: 0x1]
	enum EnemyTeamMarkersMode;//[Offset: 0x56b, Size: 0x1]
	void VisibleEnemiesChanged(interface classNone TeamVisibilityInterface, int TeamIndex);// 0x37563e4
	void ViewTargetAssigned(Actor* NewTarget, Actor* OldTarget);// 0x3756328
	void TeamMemberRemoved(Team* Team, interface classNone MemberScriptIface, int IndexInTeam);// 0x3756214
	void TeamMemberEquipmentChanged(interface classNone Member, int SlotIndex, Object* NewEquipment, Object* OldEquipment);// 0x37560b8
	void TeamMemberAdded(Team* Team, interface classNone MemberScriptIface);// 0x3755fe8
	void SquadMemberRemoved(Squad* Squad, interface classNone MemberScriptIface, int IndexInSquad);// 0x3755ed4
	void SquadMemberAdded(Squad* Squad, interface classNone MemberScriptIface);// 0x3755e04
	void SquadChanged(out const UniqueNetIdRepl NewSquadId, out const UniqueNetIdRepl OldSquadId, interface classNone TeamInfoInterface);// 0x3755b18
	void OwnTeamChanged(int NewTeamIndex, int OldTeamIndex, interface classNone TeamInfoInterface);// 0x3755a04
	void MarkersChangedEvent__DelegateSignature(TeamMemberMarkersComponent* TeamMemberMarkersComponent, int ChangesAffiliationMask);// 0x4528238
	void CheckSpectatorConditions();// 0x37559f0
	void Activated();// 0x37559dc

--------------------------------
Class: TeamMemberMarkerData
	Actor* Actor;//[Offset: 0x0, Size: 0x4]
	SceneComponent* AttachComponent;//[Offset: 0x4, Size: 0x4]
	Vector Offset;//[Offset: 0x8, Size: 0xc]
	int TypeIndex;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TeamMemberMarkerType
	Vector2D MinUV;//[Offset: 0x0, Size: 0x8]
	Vector2D MaxUV;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Squad.Object
	UniqueNetIdRepl SquadId;//[Offset: 0x28, Size: 0x18]
	int MaxNumMembers;//[Offset: 0x40, Size: 0x4]
	int TeamIndex;//[Offset: 0x44, Size: 0x4]
	void StateChangedAndNeedsReplicate();// 0x36fccf0
	void SquadIdChanged();// 0x36fccd4
	void SetTeamIndex(int TeamIndex);// 0x36fcc54
	void RemoveMemberActor(Actor* MemberActor);// 0x36fcae0
	int GetTeamIndex();// 0x36fcac4
	UniqueNetIdRepl GetSquadId();// 0x36fc870
	int GetNumMembers();// 0x36fc854
	Actor* GetMemberActor(int IndexInTeam);// 0x36fc7c8
	int GetMaxNumMembers();// 0x36fc7ac
	void AddMemberActor(Actor* MemberActor);// 0x36fc620

--------------------------------
Class: Widget_HudCanvas_C.UserWidget.Widget.Visual.Object
	CanvasPanel* Canvas;//[Offset: 0x1bc, Size: 0x4]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x51d3448

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int ZOrder;//[Offset: 0x50, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x51d3fa8
	void SetSize(Vector2D InSize);// 0x51d3f38
	void SetPosition(Vector2D InPosition);// 0x51d3ec8
	void SetOffsets(Margin InOffset);// 0x51d3e40
	void SetMinimum(Vector2D InMinimumAnchors);// 0x51d3dd0
	void SetMaximum(Vector2D InMaximumAnchors);// 0x51d3d60
	void SetLayout(out const AnchorData InLayoutData);// 0x51d3cc8
	void SetAutoSize(bool InbAutoSize);// 0x51d3c48
	void SetAnchors(Anchors InAnchors);// 0x51d3bc0
	void SetAlignment(Vector2D InAlignment);// 0x51d3b50
	int GetZOrder();// 0x51d3b28
	Vector2D GetSize();// 0x51d3ae8
	Vector2D GetPosition();// 0x51d3aa8
	Margin GetOffsets();// 0x51d3a64
	AnchorData GetLayout();// 0x51d3a10
	bool GetAutoSize();// 0x51d39e8
	Anchors GetAnchors();// 0x51d39a4
	Vector2D GetAlignment();// 0x51d3964

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: Widget_Reticle_C.Widget_CanvasChild_C.UserWidget.Widget.Visual.Object

--------------------------------
Class: Widget_CanvasChild_C.UserWidget.Widget.Visual.Object
	AnchorData Layout;//[Offset: 0x1bc, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	CanvasPanelSlot* ParentCanvasSlot;//[Offset: 0x1e8, Size: 0x4]
	void RemoveFromParentCanvas();// 0x3719150
	void Destruct();// 0x3719134
	void AddToCanvas(CanvasPanel* bpp__Canvas__pf);// 0x3fc2fa8

--------------------------------
Class: Widget_SelectedTarget_C.Widget_CanvasChild_C.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel;//[Offset: 0x1ec, Size: 0x4]
	TextBlock* DistanceText;//[Offset: 0x1f0, Size: 0x4]
	Image* TargetBottomLeftCorner;//[Offset: 0x1f4, Size: 0x4]
	Image* TargetBottomRightCorner;//[Offset: 0x1f8, Size: 0x4]
	TextBlock* TargetName;//[Offset: 0x1fc, Size: 0x4]
	Image* TargetTopLeftCorner;//[Offset: 0x200, Size: 0x4]
	HorizontalBox* TargetTopRightCorner;//[Offset: 0x204, Size: 0x4]
	float SelectedTargetHalfHeightMin;//[Offset: 0x208, Size: 0x4]
	interface class FloatProperty* TargetProvider;//[Offset: 0x20c, Size: 0x8]
	Actor* SelectedTargetActor;//[Offset: 0x214, Size: 0x4]
	Vector SelectedTargetCenterOffset;//[Offset: 0x218, Size: 0xc]
	Vector SelectedTargetBottomOffset;//[Offset: 0x224, Size: 0xc]
	float SelectedTargetAspect;//[Offset: 0x230, Size: 0x4]
	float SelectedTargetBoxScale;//[Offset: 0x234, Size: 0x4]
	int TmpInt;//[Offset: 0x238, Size: 0x4]
	float ViewportScaleFactor;//[Offset: 0x23c, Size: 0x4]
	CanvasPanelSlot* TargetBottomLeftSlot;//[Offset: 0x240, Size: 0x4]
	CanvasPanelSlot* TargetBottomRightSlot;//[Offset: 0x244, Size: 0x4]
	CanvasPanelSlot* TargetTopLeftSlot;//[Offset: 0x248, Size: 0x4]
	CanvasPanelSlot* TargetTopRightSlot;//[Offset: 0x24c, Size: 0x4]
	LinearColor FriendColor;//[Offset: 0x250, Size: 0x10]
	LinearColor EnemyColor;//[Offset: 0x260, Size: 0x10]
	float TimeToUpdateDistance;//[Offset: 0x270, Size: 0x4]
	float UpdateDistanceInterval;//[Offset: 0x274, Size: 0x4]
	FText DistanceFormat;//[Offset: 0x278, Size: 0xc]
	CanvasPanel* K2Node_Event_Canvas;//[Offset: 0x284, Size: 0x4]
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x288, Size: 0x38]
	float K2Node_Event_InDeltaTime;//[Offset: 0x2c0, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x2c8, Size: 0x10]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x2d8, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	enum CallFunc_GetTeamManagerInpure_Branches;//[Offset: 0x2da, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x2dc, Size: 0x1]
	interface class IntPoint* CallFunc_QueryInterfacePure_OutInterface;//[Offset: 0x2e0, Size: 0x8]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	SlateColor K2Node_MakeStruct_SlateColor;//[Offset: 0x2ec, Size: 0x1c]
	BattleTarget* K2Node_CustomEvent_NewTarget;//[Offset: 0x308, Size: 0x4]
	void UpdateTargetSelection(float bpp__DeltaTime__pf);// 0x3e5ec58
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x3ff0f28
	void SetTargetSelectionVisibility(enum bpp__Visibility__pf);// 0x3ff0ea8
	void OnPrimaryTargetChanged(BattleTarget* bpp__NewTarget__pf);// 0x37005b8
	void InitPrimaryTargetHandling();// 0x3714184
	void Construct();// 0x3e32844
	void CleanupPrimaryTargetHandling();// 0x3714210
	void CalculateSelectedTargetMetrics();// 0x3e32940

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0xe0, Size: 0x80]
	delegate BrushDelegate;//[Offset: 0x160, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x170, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x180, Size: 0x10]
	delegate OnMouseButtonDownEvent;//[Offset: 0x190, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x51dc61c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x51dc5a0
	void SetBrushTintColor(SlateColor TintColor);// 0x51dc3b0
	void SetBrushSize(Vector2D DesiredSize);// 0x51dc338
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x51dc274
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x51dc1b0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x51dc138
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x51dc060
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x51dbfe8
	void SetBrush(out const SlateBrush InBrush);// 0x51dbdb8
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x51dbd90

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0x8c, Size: 0x1]

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x51db4b8

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x34, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x3c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x3d, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x51dba68
	void SetSize(SlateChildSize InSize);// 0x51db9d8
	void SetPadding(Margin InPadding);// 0x51db950
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x51db8d8

--------------------------------
Class: Widget_AimedPlayerName_C.Widget_CanvasChild_C.UserWidget.Widget.Visual.Object
	TextBlock* PlayerNameText;//[Offset: 0x1ec, Size: 0x4]
	interface class FloatProperty* AimInfoProvider;//[Offset: 0x1f0, Size: 0x8]
	TimerHandle UpdateAimedActorTimerHandler;//[Offset: 0x1f8, Size: 0x8]
	int TestActorTeamIndex;//[Offset: 0x200, Size: 0x4]
	LinearColor FriendColor;//[Offset: 0x204, Size: 0x10]
	LinearColor EnemyColor;//[Offset: 0x214, Size: 0x10]
	float ViewportScaleFactor;//[Offset: 0x224, Size: 0x4]
	Vector WorldOffset;//[Offset: 0x228, Size: 0xc]
	Vector WorldOffsetFromActorTop;//[Offset: 0x234, Size: 0xc]
	interface class RotatorProperty* TargetProvider;//[Offset: 0x240, Size: 0x8]
	float SquaredViewportDistanceToHide;//[Offset: 0x248, Size: 0x4]
	Actor* ShowingActor;//[Offset: 0x24c, Size: 0x4]
	Actor* CurrentSelectedTargetActor;//[Offset: 0x250, Size: 0x4]
	float SquaredScaledViewportDistanceToHide;//[Offset: 0x254, Size: 0x4]
	Vector2D ScaledViewportCenter;//[Offset: 0x258, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x260, Size: 0x10]
	Actor* K2Node_CustomEvent_NewActor;//[Offset: 0x270, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x274, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]
	Object* K2Node_CustomEvent_DestructedObject;//[Offset: 0x278, Size: 0x4]
	interface class FloatProperty* K2Node_CustomEvent_DamageableInterface;//[Offset: 0x27c, Size: 0x8]
	Actor* K2Node_CustomEvent_DestroyedActor;//[Offset: 0x284, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x288, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	Actor* K2Node_CustomEvent_ActorToShow;//[Offset: 0x28c, Size: 0x4]
	Actor* CallFunc_FindTopActor_Result;//[Offset: 0x290, Size: 0x4]
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x294, Size: 0x38]
	float K2Node_Event_InDeltaTime;//[Offset: 0x2cc, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x2d0, Size: 0x10]
	enum CallFunc_QueryInterfaceInpure_Branches2;//[Offset: 0x2e0, Size: 0x1]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x2e8, Size: 0x10]
	enum CallFunc_QueryInterfaceInpure_Branches3;//[Offset: 0x2f8, Size: 0x1]
	bool K2Node_SwitchEnum3_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	enum CallFunc_GetTeamManagerInpure_Branches;//[Offset: 0x2fa, Size: 0x1]
	bool K2Node_SwitchEnum4_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb, Size: 0x1]
	Pawn* K2Node_DynamicCast_AsPawn;//[Offset: 0x2fc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches4;//[Offset: 0x301, Size: 0x1]
	bool K2Node_SwitchEnum5_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 0x1]
	Vector CallFunc_GetActorBounds_Origin;//[Offset: 0x304, Size: 0xc]
	Vector CallFunc_GetActorBounds_BoxExtent;//[Offset: 0x310, Size: 0xc]
	SlateColor K2Node_MakeStruct_SlateColor;//[Offset: 0x31c, Size: 0x1c]
	float CallFunc_BreakVector_X;//[Offset: 0x338, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x33c, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x340, Size: 0x4]
	float CallFunc_BreakVector_X1;//[Offset: 0x344, Size: 0x4]
	float CallFunc_BreakVector_Y1;//[Offset: 0x348, Size: 0x4]
	float CallFunc_BreakVector_Z1;//[Offset: 0x34c, Size: 0x4]
	void UpdateWidgetPosition();// 0x3fbe124
	void UpdateAimedActor();// 0x3e32940
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x3fbdff0
	void ShowingActorDestructed(Object* bpp__DestructedObject__pf, out const interface classNone bpp__DamageableInterface__pf);// 0x3fbdf18
	void ShowingActorDestroyed(Actor* bpp__DestroyedActor__pf);// 0x3faa2a0
	void ShowActor(Actor* bpp__ActorToShow__pf);// 0x3fbde98
	void SetupViewportMetrics();// 0x3e5e93c
	void SetShowingActor(Actor* bpp__NewActor__pf);// 0x3e5ec58
	void HideShowingActor();// 0x3714184
	void FindTopActor(Actor* bpp__Actor__pf, out Actor* bpp__Result__pf);// 0x3fbddc4
	void Construct();// 0x3e326f4
	void ActorDestroyedSignature__DelegateSignature(Actor* bpp__DestroyedActor__pf);// 0x4528238

--------------------------------
Class: Widget_HitAndDamageIndicator_C.Widget_CanvasChild_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* FadeOut;//[Offset: 0x1ec, Size: 0x4]
	TextBlock* CollectedDamageText;//[Offset: 0x1f0, Size: 0x4]
	Image* HitIndicator;//[Offset: 0x1f4, Size: 0x4]
	FText Format;//[Offset: 0x1f8, Size: 0xc]
	float CollectedDamage;//[Offset: 0x204, Size: 0x4]
	AnchorData TmpLayout;//[Offset: 0x208, Size: 0x28]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x230, Size: 0x10]
	CanvasPanel* K2Node_Event_Canvas;//[Offset: 0x240, Size: 0x4]
	WidgetAnimation* K2Node_Event_Animation;//[Offset: 0x244, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x248, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x24a, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x250, Size: 0x10]
	void SetWidgetVisibility(enum bpp__InVisibility__pf);// 0x3fc4eb8
	void ReceivedCollectedDamage2(CollectedDamage bpp__CollectedDamage__pf, bool bpp__bDestructedByOwner__pf);// 0x3fd0e44
	void Construct();// 0x3714168

--------------------------------
Class: Widget_AimAssist_C.Widget_CanvasChild_C.UserWidget.Widget.Visual.Object
	AimPointControllerComponent* AimPointController;//[Offset: 0x1ec, Size: 0x4]
	enum AimAssistState;//[Offset: 0x1f0, Size: 0x1]
	float InvViewportScale;//[Offset: 0x1f4, Size: 0x4]
	LocalPlayer* LocalPlayer;//[Offset: 0x1f8, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x200, Size: 0x10]
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x210, Size: 0x38]
	float K2Node_Event_InDeltaTime;//[Offset: 0x248, Size: 0x4]
	Vector CallFunc_GetAimPoint_ReturnValue;//[Offset: 0x24c, Size: 0xc]
	enum K2Node_CustomEvent_NewState;//[Offset: 0x258, Size: 0x1]
	Vector4 CallFunc_ProjectWorldToScreen_ScreenPosition;//[Offset: 0x260, Size: 0x10]
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x3fbafb0
	void Construct();// 0x3714184
	void AimAssistStateChanged(enum bpp__NewState__pf);// 0x3fbaf30
	void AimAssistStateChangedEvent__DelegateSignature(enum bpp__NewState__pf);// 0x4528238

--------------------------------
Class: Widget_TouchCameraControl_C.UserWidget.Widget.Visual.Object
	Widget_TouchInteractionProxy_C* Widget_TouchInteractionProxy;//[Offset: 0x1c4, Size: 0x4]
	Vector2D[] PointersDeltas;//[Offset: 0x1c8, Size: 0xc]
	int PressedPointersMask;//[Offset: 0x1d4, Size: 0x4]
	Vector2D TouchRotationInputScale;//[Offset: 0x1d8, Size: 0x8]
	Vector2D RotationInputTouchAdjustedScale;//[Offset: 0x1e0, Size: 0x8]
	Vector2D RotationInputTouchRiseThreshold;//[Offset: 0x1e8, Size: 0x8]
	Vector2D RotationInputTouchFallThreshold;//[Offset: 0x1f0, Size: 0x8]
	Vector2D RotationInputTouchPrevDeltaLocationRiseSpeed;//[Offset: 0x1f8, Size: 0x8]
	Vector2D RotationInputTouchPrevDeltaLocationFallInterpSpeed;//[Offset: 0x200, Size: 0x8]
	float RotationInputTouchPrevMoveXTime;//[Offset: 0x208, Size: 0x4]
	float RotationInputTouchPrevMoveYTime;//[Offset: 0x20c, Size: 0x4]
	float RotationInputTouchFileredDeltaX;//[Offset: 0x210, Size: 0x4]
	float RotationInputTouchFileredDeltaY;//[Offset: 0x214, Size: 0x4]
	float RotationInputTouchPrevDeltaX;//[Offset: 0x218, Size: 0x4]
	float RotationInputTouchPrevDeltaY;//[Offset: 0x21c, Size: 0x4]
	float RotationInputTouchMomentumX;//[Offset: 0x220, Size: 0x4]
	float RotationInputTouchMomentumY;//[Offset: 0x224, Size: 0x4]
	Vector2D RotationInputTouchMomentumThreshold;//[Offset: 0x228, Size: 0x8]
	Vector2D RotationInputTouchMaxMomentum;//[Offset: 0x230, Size: 0x8]
	Vector2D RotationInputTouchFriction;//[Offset: 0x238, Size: 0x8]
	Vector2D RotationInputTouchMomentumDeceleration;//[Offset: 0x240, Size: 0x8]
	float RotationinputTouchMomentumInterpSpeed;//[Offset: 0x248, Size: 0x4]
	float RotationInputTouchInvInertiaToFrictionMultiplier;//[Offset: 0x24c, Size: 0x4]
	float RotationInputTouchInvInertiaToMomentumDecelerationMultiplier;//[Offset: 0x250, Size: 0x4]
	bool bRotationInputTouchShouldProcessMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]
	bool bRotationInputTouchShouldProcessTouchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1]
	bool bRotationInputTouchShouldProcessMomentum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1]
	interface classNone[] TouchInputProxyDelegates;//[Offset: 0x258, Size: 0xc]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x265, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 0x1]
	interface class RotatorProperty* CallFunc_AddCameraRotationInputDelegate_Delegate_CastInput;//[Offset: 0x268, Size: 0x8]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x270, Size: 0x1]
	interface class DoubleProperty* CallFunc_RemoveCameraRotationInputDelegate_Delegate_CastInput;//[Offset: 0x274, Size: 0x8]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	void StartRotating();// 0x3e326f4
	void SetCameraRotationInputYawInertia(const float bpp__Value__pf__const);// 0x3e456b0
	void SetCameraRotationInputPitchInertia(float bpp__Value__pf);// 0x3fc45c4
	void RemoveTouchInputProxyDelegate(out const interface classNone bpp__Delegate__pf);// 0x3ffe83c
	void ProcessTouchesMove(out Vector2D bpp__InOutRotationInput__pf, float bpp__DeltaTime__pf);// 0x3ffe768
	void ProcessTouchesMomentum(out Vector2D bpp__InOutRotationInput__pf, float bpp__DeltaTime__pf);// 0x3ffe694
	void ProcessTouchesEnd();// 0x371422c
	void PreProcessCameraRotationInput(out const Vector2D bpp__InOutRotationInput__pf__const, float bpp__DeltaTime__pf);// 0x3ffe5c0
	EventReply OnTouchStarted(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x3fe3198
	EventReply OnTouchMoved(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x3fe343c
	EventReply OnTouchEnded(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x3fe36e0
	void OnMouseCaptureLost(out const CaptureLostEvent bpp__InCaptureLostEvent__pf__const);// 0x3ffe52c
	void Destruct();// 0x3719134
	void ConvertInertiaToFrictionAndDeceleration(float bpp__Inertia__pf, out float bpp__Friction__pf, out float bpp__MomentumDeceleration__pf);// 0x3ffe400
	void ControlProxyTouchStarted(int bpp__PointerIndex__pf);// 0x3ff3ca8
	void Construct();// 0x3719018
	void AddTouchInputProxyDelegate(out const interface classNone bpp__Delegate__pf);// 0x3ffe36c

--------------------------------
Class: Widget_TouchInteractionProxy_C.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel;//[Offset: 0x1bc, Size: 0x4]
	WidgetInteractionComponent* WidgetInteraction;//[Offset: 0x1c0, Size: 0x4]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match;//[Offset: 0x1c4, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	EventReply OnTouchStarted(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x3fe3198
	EventReply OnTouchMoved(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x3fe36e0
	EventReply OnTouchEnded(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x3fe343c
	void Destruct();// 0x3719134
	void Construct();// 0x3719018

--------------------------------
Class: HudControlGroupData
	FName ControlName_5_2FF0E1E545270B903787498A20D3EB24;//[Offset: 0x0, Size: 0x8]
	int ControlGroupsMask_8_CA4F2D4B4F181278C53A5193B6BE3DAD;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SpawnZoneUIData
	WidgetComponent_Advanced_C* WidgetComponent_15_970C5ADA4FA28C1DFFCF71ACFD3A05D9;//[Offset: 0x0, Size: 0x4]
	FText Name_5_ECCA3DAA472A1B4664C8D0A68D3F7D1E;//[Offset: 0x4, Size: 0xc]
	Vector Position_8_71CCB96C43AC2C3E9E2A508CA98DC586;//[Offset: 0x10, Size: 0xc]
	int NumSpots_12_B3BEE60549AC26B1DE378AAD90862CB7;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SpawnSpot_Match_C.PlayerStart.NavigationObjectBase.Actor.Object
	int SpawnZoneIndex;//[Offset: 0x298, Size: 0x4]
	void UserConstructionScript();// 0x3e5a370

--------------------------------
Class: WidgetComponent_SpectatingPlayerName_C.WidgetComponent_ProjectedObjective_C.WidgetComponent_AdvancedProjectedPosition_C.WidgetComponent_ProjectedPosition_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoActivateViewTargetObserving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 0x1]
	bool bIsViewTargetObservingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73d, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x73e, Size: 0x1]
	Actor* K2Node_CustomEvent_NewTarget;//[Offset: 0x740, Size: 0x4]
	Actor* K2Node_CustomEvent_OldTarget;//[Offset: 0x744, Size: 0x4]
	Pawn* K2Node_DynamicCast_AsPawn;//[Offset: 0x748, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 0x1]
	void ViewTargetAssigned(Actor* bpp__NewTarget__pf, Actor* bpp__OldTarget__pf);// 0x403b37c
	void DeactivateViewTargetObserving();// 0x3e4cd14
	void ActivateViewTargetObserving();// 0x3eaf338
	void ViewTargetAssignedEvent__DelegateSignature(Actor* bpp__NewTarget__pf, Actor* bpp__OldTarget__pf);// 0x4528238

--------------------------------
Class: WidgetComponent_ProjectedObjective_C.WidgetComponent_AdvancedProjectedPosition_C.WidgetComponent_ProjectedPosition_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* ObjectiveActor;//[Offset: 0x70c, Size: 0x4]
	Vector2D OffsetToBounds;//[Offset: 0x710, Size: 0x8]
	SceneComponent* ObjectiveSceneComponent;//[Offset: 0x718, Size: 0x4]
	bool bForceHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 0x1]
	interface class FloatProperty* ObjectiveTargetPointsProvider;//[Offset: 0x720, Size: 0x8]
	FName ObjectiveSceneComponentTagName;//[Offset: 0x728, Size: 0x8]
	bool CallFunc_UpdateVisibility_bVisibilityChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 0x1]
	interface class DoubleProperty* K2Node_CustomEvent_TargetPointsProvider;//[Offset: 0x734, Size: 0x8]
	void UpdateVisibility(out bool bpp__bVisibilityChanged__pf);// 0x3e479b4
	void SetupTargetWithTargetPointsProvider();// 0x3eaf354
	void SetObjectiveActor(Actor* bpp__Actor__pf);// 0x3e919ac
	void SetForceHidden(bool bpp__bForceHidden__pf);// 0x403e0ec
	void ObjectiveLocalBoundBoxChanged(out const interface classNone bpp__TargetPointsProvider__pf);// 0x403e058

--------------------------------
Class: WidgetComponent_AdvancedProjectedPosition_C.WidgetComponent_ProjectedPosition_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector2D EffectiveWorldOffset;//[Offset: 0x6c8, Size: 0x8]
	Vector2D MarkerScreenOffset;//[Offset: 0x6d0, Size: 0x8]
	Vector2D MarkerWorldOffset;//[Offset: 0x6d8, Size: 0x8]
	float OffsetPerspectiveScaleMinDistance;//[Offset: 0x6e0, Size: 0x4]
	float OffsetPerspectiveScaleMaxDistance;//[Offset: 0x6e4, Size: 0x4]
	float OffsetPerspectiveScaleDistanceMultiplier;//[Offset: 0x6e8, Size: 0x4]
	float SizePerspectiveScaleMinDistance;//[Offset: 0x6ec, Size: 0x4]
	float SizePerspectiveScaleMaxDistance;//[Offset: 0x6f0, Size: 0x4]
	float SizePerspectiveScaleDistanceMultiplier;//[Offset: 0x6f4, Size: 0x4]
	float InvSizePerspectiveScaleMinDistance;//[Offset: 0x6f8, Size: 0x4]
	float InvViewportAspectRatio;//[Offset: 0x6fc, Size: 0x4]
	interface class DoubleProperty* WidgetLayoutInterface;//[Offset: 0x700, Size: 0x8]
	enum DefaultLayoutType;//[Offset: 0x708, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x709, Size: 0x1]
	void UpdateSizeScaleCachedVars();// 0x3eaf878
	void SetupWidget();// 0x3e91758
	void SetupTarget();// 0x3e916bc
	void SetDefaultLayoutType(enum bpp__WidgetLayout__pf);// 0x3e917f4
	void CleanupTarget();// 0x3eaf85c

--------------------------------
Class: WidgetComponent_ProjectedPosition_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PlayerCameraManager* CameraManager;//[Offset: 0x69c, Size: 0x4]
	Vector TargetPosition;//[Offset: 0x6a0, Size: 0xc]
	float DistanceFromCamera;//[Offset: 0x6ac, Size: 0x4]
	Vector2D ViewportSize;//[Offset: 0x6b0, Size: 0x8]
	float ViewportScale;//[Offset: 0x6b8, Size: 0x4]
	float HalfFovTanX2;//[Offset: 0x6bc, Size: 0x4]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x6c0, Size: 0x1]
	bool K2Node_Event_bShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 0x1]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x6c4, Size: 0x4]
	void UpdateViewportMetrics();// 0x3eaf31c
	void SetWorldPosition(Vector bpp__InPosition__pf);// 0x403e9e0
	void SetupScale();// 0x3eb0b20
	void SetupCameraManager();// 0x403e9c4
	void SetDistanceFromCamera(float bpp__NewOffset__pf);// 0x403e944
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x403e8c4
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x403e844
	Vector GetTargetPosition();// 0x403e7f4
	Vector ComputeTargetPosition();// 0x403e7a4
	Vector ComputeProjectedPosition(Vector bpp__TargetPosition__pf);// 0x403e708
	void CleanupCameraManager();// 0x403e6ec

--------------------------------
Class: Component_TeamMembersWidgetComponentsManager_C.ActorComponent.Object
	WidgetComponent_ProjectedObjective_C*[] FreeWidgetComponents;//[Offset: 0xa8, Size: 0xc]
	WidgetComponent_ProjectedObjective_C*[] SquadWidgetComponents;//[Offset: 0xb4, Size: 0xc]
	WidgetComponent_ProjectedObjective_C*[] AllyWidgetComponents;//[Offset: 0xc0, Size: 0xc]
	WidgetComponent_ProjectedObjective_C*[] EnemyWidgetComponents;//[Offset: 0xcc, Size: 0xc]
	class WidgetComponent_ProjectedObjective_C* WidgetComponentClass;//[Offset: 0xd8, Size: 0x28]
	TeamMemberMarkersComponent* K2Node_CustomEvent_TeamMemberMarkersComponent;//[Offset: 0x100, Size: 0x4]
	int K2Node_CustomEvent_ChangesAffiliationMask;//[Offset: 0x104, Size: 0x4]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x108, Size: 0x1]
	void UpdateWidgetComponents(out TeamMemberMarkerData[] bpp__MarkersData__pf, out WidgetComponent_ProjectedObjective_C*[] bpp__WidgetComponents__pf);// 0x3e5bc2c
	void TeamMembersMarkersChanged(TeamMemberMarkersComponent* bpp__TeamMemberMarkersComponent__pf, int bpp__ChangesAffiliationMask__pf);// 0x3e5bb68
	void SetupTeamMemberMarkersHandling();// 0x3719134
	void Setup();// 0x371babc
	void RetainWidgetComponent(out WidgetComponent_ProjectedObjective_C* bpp__Component__pf);// 0x3e5bad8
	void ReleaseWidgetComponent(WidgetComponent_ProjectedObjective_C* bpp__Component__pf);// 0x3e41334
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e5ba58
	void ReceiveBeginPlay();// 0x3e326a0
	void CleanupWidgetComponentArray(out WidgetComponent_ProjectedObjective_C*[] bpp__Components__pf);// 0x3e5b9b0
	void CleanupTeamMemberMarkersHandling();// 0x3718ffc
	void Cleanup();// 0x3718728
	void CeanupWidgetComponents();// 0x37189ec
	void MarkersChangedEvent__DelegateSignature(TeamMemberMarkersComponent* bpp__TeamMemberMarkersComponent__pf, int bpp__ChangesAffiliationMask__pf);// 0x4528238

--------------------------------
Class: WidgetComponent_AzimuthDistanceAimingMarker_C.WidgetComponent_AdvancedProjectedPosition_C.WidgetComponent_ProjectedPosition_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ProjectileSimulation* ProjectileSimulation;//[Offset: 0x70c, Size: 0x4]
	interface class FloatProperty* AimingComputerInterface;//[Offset: 0x710, Size: 0x8]
	float CurrentTargetInterpSpeed;//[Offset: 0x718, Size: 0x4]
	float TargetInterpSpeed;//[Offset: 0x71c, Size: 0x4]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x720, Size: 0x1]
	void GetTravelTimeToTarget(out float bpp__TravelTime__pf, out bool bpp__bShowDistance__pf);// 0x402f424

--------------------------------
Class: ProjectileSimulation.Object
	interface class * ProjectileEmitterInterface;//[Offset: 0x1c, Size: 0x8]
	interface class DoubleProperty* AimPointProviderInterface;//[Offset: 0x24, Size: 0x8]
	World* World;//[Offset: 0x2c, Size: 0x4]
	void StopSimulation();// 0x37a6814
	void StartSimulationLoop(const float Interval);// 0x37a679c
	void StartSimulation();// 0x37a6788
	bool IsSimulating();// 0x37a6764
	bool IsRunningSimulationLoop();// 0x37a6740
	float GetLastSimulationTravelTime();// 0x37a6724
	ProjectileSimulationPoint[] GetLastSimulationPoints();// 0x37a66bc
	float GetLastSimulationCompleteTime();// 0x3511990
	void Configure(interface classNone InProjectileEmitter, interface classNone InAimPointProvider, const float InSimulationDeltaTime, const float InSimulationRecordInterval);// 0x37a654c

--------------------------------
Class: ProjectileSimulationPoint
	Vector Position;//[Offset: 0x0, Size: 0xc]
	float Time;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SimulatedProjectilePathComponent_C.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ProjectileSimulation* ProjectileSimulation;//[Offset: 0x4a0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x4a4, Size: 0x4]
	PlayerCameraManager* CameraManager;//[Offset: 0x4a8, Size: 0x4]
	Vector[] InterpolatedPoints;//[Offset: 0x4ac, Size: 0xc]
	float CurrentPathInterpSpeed;//[Offset: 0x4b8, Size: 0x4]
	float PathInterpSpeed;//[Offset: 0x4bc, Size: 0x4]
	float PathHalfWidth;//[Offset: 0x4c0, Size: 0x4]
	float PathEndHalfSize;//[Offset: 0x4c4, Size: 0x4]
	float PathTexCoordXMin;//[Offset: 0x4c8, Size: 0x4]
	float PathTexCoordXMax;//[Offset: 0x4cc, Size: 0x4]
	float PathEndTexCoordYDelta;//[Offset: 0x4d0, Size: 0x4]
	float HalfFovTanMulPathHalfWidth;//[Offset: 0x4d4, Size: 0x4]
	float HalfFovTanMulPathEndHalfSize;//[Offset: 0x4d8, Size: 0x4]
	float LastPointVertOffset;//[Offset: 0x4dc, Size: 0x4]
	float HalfFovTanMulLastPointVertOffset;//[Offset: 0x4e0, Size: 0x4]
	float FOVScale;//[Offset: 0x4e4, Size: 0x4]
	float MinSegmentCountForTexCoordY;//[Offset: 0x4e8, Size: 0x4]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x4ec, Size: 0x1]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x4f0, Size: 0x4]
	void UpdatePathMeshWithMeshUpdater(RuntimeMeshScopedUpdaterRef bpp__MeshUpdater__pf);// 0x3f0c41c
	void UpdatePathMesh();// 0x3e61e60
	void UpdateFOV();// 0x3e61c4c
	void StopUpdateAndRenderMesh();// 0x3e47004
	void StartUpdateAndRenderMesh();// 0x3e48adc
	void SetProjectileSimulation(ProjectileSimulation* bpp__ProjectileSimulation__pf);// 0x3f0c39c
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e48cb0
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e61e7c
	void ReceiveBeginPlay();// 0x3e46fe8
	void InitCameraManager();// 0x3e61af8
	void CleanupCameraManager();// 0x3eb0a4c

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	RuntimeMesh* RuntimeMeshReference;//[Offset: 0x48c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x490, Size: 0x4]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x494, Size: 0xc]
	void UpdateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x409edd0
	void UpdateMeshSectionFromBuilder(int SectionID, RuntimeBlueprintMeshBuilder* MeshData);// 0x409ed14
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x409e778
	bool ShouldSerializeMeshData();// 0x409e750
	void SetShouldSerializeMeshData(bool bShouldSerialize);// 0x409e6c8
	void SetSectionMaterial(int SectionID, MaterialInterface* Material);// 0x409e604
	void SetRuntimeMeshMobility(enum NewMobility);// 0x409e578
	void SetRuntimeMesh(RuntimeMesh* NewMesh);// 0x409e500
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x409e384
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x409e208
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x409e08c
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x409de80
	void SetConvexCollisionSection(int ConvexSectionIndex, Vector[] ConvexVerts);// 0x409dabc
	void SetCollisionUseComplexAsSimple(bool bNewValue);// 0x409da30
	void SetCollisionUseAsyncCooking(bool bNewValue);// 0x409d9a8
	void SetCollisionSpheres(out const RuntimeMeshCollisionSphere[] NewSpheres);// 0x409d85c
	void SetCollisionMode(enum NewMode);// 0x409d7dc
	void SetCollisionCapsules(out const RuntimeMeshCollisionCapsule[] NewCapsules);// 0x409d690
	void SetCollisionBoxes(out const RuntimeMeshCollisionBox[] NewBoxes);// 0x409d544
	void RemoveCollisionSphere(int Index);// 0x409d414
	void RemoveCollisionCapsule(int Index);// 0x409d2e4
	void RemoveCollisionBox(int Index);// 0x409d1b4
	bool IsMeshSectionVisible(int SectionIndex);// 0x409d06c
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x409cf24
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x409cddc
	bool IsCollisionUsingComplexAsSimple();// 0x409cdb4
	bool IsCollisionUsingAsyncCooking();// 0x409cd8c
	MaterialInterface* GetSectionMaterial(int SectionID);// 0x409ccec
	int GetSectionIdFromCollisionFaceIndex(int FaceIndex);// 0x409cc6c
	Box GetSectionBoundingBox(int SectionIndex);// 0x409cae8
	enum GetRuntimeMeshMobility();// 0x409cab8
	RuntimeMesh* GetRuntimeMesh();// 0x409ca9c
	RuntimeMesh* GetOrCreateRuntimeMesh();// 0x409ca68
	int GetNumSections();// 0x409c980
	int GetAvailableSectionIndex();// 0x409c898
	bool DoesSectionExist(int SectionIndex);// 0x409c750
	void CreateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x409c2c8
	void CreateMeshSectionFromBuilder(int SectionID, RuntimeBlueprintMeshBuilder* MeshData, bool bCreateCollision, enum UpdateFrequency);// 0x409c174
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x409ba4c
	void CookCollisionNow();// 0x409ba1c
	void ClearMeshSection(int SectionIndex);// 0x409b8f4
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x409b7c4
	void ClearConvexCollisionSection(int ConvexSectionIndex);// 0x409b694
	void ClearCollisionSpheres();// 0x409b5bc
	void ClearCollisionCapsules();// 0x409b4e4
	void ClearCollisionBoxes();// 0x409b40c
	void ClearAllMeshSections();// 0x409b338
	void ClearAllMeshCollisionSections();// 0x409b260
	void ClearAllConvexCollisionSections();// 0x409b188
	int AddConvexCollisionSection(Vector[] ConvexVerts);// 0x409ae00
	int AddCollisionSphere(out const RuntimeMeshCollisionSphere NewSphere);// 0x409ac9c
	int AddCollisionCapsule(out const RuntimeMeshCollisionCapsule NewCapsule);// 0x409ab18
	int AddCollisionBox(out const RuntimeMeshCollisionBox NewBox);// 0x409a990

--------------------------------
Class: RuntimeMesh.Object
	MaterialInterface*[] Materials;//[Offset: 0x28, Size: 0xc]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	enum CollisionMode;//[Offset: 0x4b, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x4c, Size: 0x4]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x50, Size: 0xc]
	delegate CollisionUpdated;//[Offset: 0x5c, Size: 0xc]
	void UpdateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x4090f80
	void UpdateMeshSectionFromBuilder(int SectionID, RuntimeBlueprintMeshBuilder* MeshData);// 0x4090d64
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x40907f0
	bool ShouldSerializeMeshData();// 0x40907d4
	void SetShouldSerializeMeshData(bool bShouldSerialize);// 0x4090758
	void SetSectionTessellationTriangles(int SectionID, out const int[] Triangles);// 0x40905d4
	void SetSectionMaterial(int SectionID, MaterialInterface* Material);// 0x4090518
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x40903a8
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x4090238
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x40900c8
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x408fed0
	void SetConvexCollisionSection(int ConvexSectionIndex, Vector[] ConvexVerts);// 0x408fc9c
	void SetCollisionUseComplexAsSimple(bool bNewValue);// 0x408fc18
	void SetCollisionUseAsyncCooking(bool bNewValue);// 0x408fb9c
	void SetCollisionSpheres(out const RuntimeMeshCollisionSphere[] NewSpheres);// 0x408fa5c
	void SetCollisionMode(enum NewMode);// 0x408f9e8
	void SetCollisionCapsules(out const RuntimeMeshCollisionCapsule[] NewCapsules);// 0x408f8a8
	void SetCollisionBoxes(out const RuntimeMeshCollisionBox[] NewBoxes);// 0x408f768
	void RemoveCollisionSphere(int Index);// 0x408f64c
	void RemoveCollisionCapsule(int Index);// 0x408f530
	void RemoveCollisionBox(int Index);// 0x408f414
	bool IsMeshSectionVisible(int SectionIndex);// 0x408f2ec
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x408f1c4
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x408f09c
	bool IsCollisionUsingComplexAsSimple();// 0x408f080
	bool IsCollisionUsingAsyncCooking();// 0x408f064
	MaterialInterface* GetSectionMaterial(int SectionID);// 0x408efd0
	int GetSectionIdFromCollisionFaceIndex(int FaceIndex);// 0x408ef50
	Box GetSectionBoundingBox(int SectionIndex);// 0x408ee10
	int GetNumSections();// 0x408ed34
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x408ec60
	enum GetCollisionMode();// 0x408ec44
	int GetAvailableSectionIndex();// 0x408eb68
	bool DoesSectionExist(int SectionIndex);// 0x408ea40
	void CreateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x408e5c8
	void CreateMeshSectionFromBuilder(int SectionID, RuntimeBlueprintMeshBuilder* MeshData, bool bCreateCollision, enum UpdateFrequency);// 0x408e310
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x408dbfc
	void CookCollisionNow();// 0x408dbe8
	void ClearMeshSection(int SectionIndex);// 0x408dacc
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x408d9b0
	void ClearConvexCollisionSection(int ConvexSectionIndex);// 0x408d894
	void ClearCollisionSpheres();// 0x408d7c8
	void ClearCollisionCapsules();// 0x408d6fc
	void ClearCollisionBoxes();// 0x408d630
	void ClearAllMeshSections();// 0x408d564
	void ClearAllMeshCollisionSections();// 0x408d498
	void ClearAllConvexCollisionSections();// 0x408d3cc
	int AddConvexCollisionSection(Vector[] ConvexVerts);// 0x408d1d4
	int AddCollisionSphere(out const RuntimeMeshCollisionSphere NewSphere);// 0x408d07c
	int AddCollisionCapsule(out const RuntimeMeshCollisionCapsule NewCapsule);// 0x408cf04
	int AddCollisionBox(out const RuntimeMeshCollisionBox NewBox);// 0x408cd88

--------------------------------
Class: RuntimeMeshBlueprintVertexSimple
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	RuntimeMeshTangent Tangent;//[Offset: 0x18, Size: 0x10]
	LinearColor Color;//[Offset: 0x28, Size: 0x10]
	Vector2D UV0;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: RuntimeBlueprintMeshBuilder.RuntimeBlueprintMeshAccessor.Object
	int SetVertex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector InPosition, Vector Normal, RuntimeMeshTangent Tangent, Vector2D UV0, LinearColor Color);// 0x4094998
	int SetUV(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector2D Value, int Channel);// 0x4094830
	int SetTangents(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector TangentX, Vector TangentY, Vector TangentZ);// 0x4094680
	int SetTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, RuntimeMeshTangent Value);// 0x4094540
	int SetPosition(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector Value);// 0x4094420
	bool SetNumVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, const int NewNum, const bool bSkipColorBuffer);// 0x40942fc
	void SetNumIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int NewNum);// 0x4094228
	int SetNormalTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector Normal, RuntimeMeshTangent Tangent);// 0x40940a0
	int SetNormal(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, out const Vector4 Value);// 0x4093f50
	void SetIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, int Value);// 0x4093e2c
	int SetColor(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, LinearColor Value);// 0x4093cf0
	int NumVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x4093c5c
	int NumUVChannels(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x4093bc8
	int NumIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x4093b30
	bool IsUsingHighPrecisionUVs(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x4093a9c
	bool IsUsingHighPrecisionTangents(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x4093a08
	bool IsUsing32BitIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x4093974
	bool IsReadonly(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x40938d4
	Vector2D GetUV(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, int Channel);// 0x40937b0
	Vector GetTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x40936c8
	Vector GetPosition(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x40935e0
	Vector4 GetNormal(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x40934f8
	int GetIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x409341c
	LinearColor GetColor(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x4093330
	void EmptyVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Slack);// 0x4093260
	void EmptyIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Slack);// 0x409318c
	int AddVertex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, Vector InPosition, Vector Normal, RuntimeMeshTangent Tangent, Vector2D UV0, LinearColor Color);// 0x4092f10
	int AddTriangle(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index0, int Index1, int Index2);// 0x4092dac
	int AddIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int NewIndex);// 0x4092cd0

--------------------------------
Class: RuntimeBlueprintMeshAccessor.Object

--------------------------------
Class: RuntimeMeshCollisionSphere
	Vector Center;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RuntimeMeshCollisionCapsule
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float Radius;//[Offset: 0x18, Size: 0x4]
	float Length;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: RuntimeMeshCollisionBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Extents;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: RuntimeMeshScopedUpdaterRef

--------------------------------
Class: DamageAreaDecalComponent_C.CaptureRangeDecalComponent_C.DecalComponent.SceneComponent.ActorComponent.Object
	ProjectileSimulation* ProjectileSimulation;//[Offset: 0x224, Size: 0x4]
	float CurrentPosInterpSpeed;//[Offset: 0x228, Size: 0x4]
	float PosInterpSpeed;//[Offset: 0x22c, Size: 0x4]
	interface class FloatProperty* AimPointProviderInterface;//[Offset: 0x230, Size: 0x8]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x238, Size: 0x4]
	void UpdatePosition(float bpp__DeltaTime__pf);// 0x3e66874
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e667f4

--------------------------------
Class: CaptureRangeDecalComponent_C.DecalComponent.SceneComponent.ActorComponent.Object
	void Destroy();// 0x3e5ad00

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1ec, Size: 0x4]
	int SortOrder;//[Offset: 0x1f0, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x1f4, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x1f8, Size: 0x4]
	float FadeDuration;//[Offset: 0x1fc, Size: 0x4]
	Vector DecalSize;//[Offset: 0x210, Size: 0xc]
	float DecalClipRadiusRange;//[Offset: 0x21c, Size: 0x4]
	byte ChannelsMask;//[Offset: 0x220, Size: 0x1]
	bool bBackFaceCullingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x221, Size: 0x1]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x221, Size: 0x1]
	void SetSortOrder(int Value);// 0x5b785c8
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x5b78550
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x5b78448
	void SetDestroyOwnerAfterFade(bool bValue);// 0x5b783c0
	void SetDecalSize(out const Vector NewSize);// 0x5b7833c
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x5b782c4
	void SetDecalClipRadiusRange(float Value);// 0x5b78248
	void SetChannelsMask(int NewChannelsMask);// 0x5b781c8
	bool IsDestroyOwnerAfterFade();// 0x5b781a8
	float GetFadeStartDelay();// 0x5b78180
	float GetFadeDuration();// 0x5b78158
	Vector GetDecalSize();// 0x5b78134
	MaterialInterface* GetDecalMaterial();// 0x5b7810c
	float GetDecalClipRadiusRange();// 0x5b780f0
	int GetChannelsMask();// 0x5b780d4
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x5b780a4

--------------------------------
Class: SpawnSpot_TeamMatch_C.SpawnSpot_Match_C.PlayerStart.NavigationObjectBase.Actor.Object
	int TeamMask;//[Offset: 0x29c, Size: 0x4]

--------------------------------
Class: WidgetActor_Scoreboard_C.WidgetActor_C.Actor.Object
	LayoutSpacerComponent* BottomLayoutSpacer;//[Offset: 0x2b8, Size: 0x4]
	BoxLayoutComponent* TeamTablesHorizontalLayout;//[Offset: 0x2bc, Size: 0x4]
	BoxLayoutComponent* ButtonsHorizontalLayout;//[Offset: 0x2c0, Size: 0x4]
	BoxLayoutComponent* VerticalLayout;//[Offset: 0x2c4, Size: 0x4]
	LayoutSpacerComponent* TopLayoutSpacer;//[Offset: 0x2c8, Size: 0x4]
	LayoutSpacerComponent* RightLayoutSpacer;//[Offset: 0x2cc, Size: 0x4]
	BoxLayoutComponent* OuterVerticalLayout;//[Offset: 0x2d0, Size: 0x4]
	LayoutSpacerComponent* LeftLayoutSpacer;//[Offset: 0x2d4, Size: 0x4]
	BoxLayoutComponent* OuterHorizontalLayout;//[Offset: 0x2d8, Size: 0x4]
	WidgetComponent_Button_C* SettingsButtonWidgetComponent;//[Offset: 0x2dc, Size: 0x4]
	WidgetComponent_Button_C* ChangeTitanButtonWidgetComponent;//[Offset: 0x2e0, Size: 0x4]
	WidgetComponent_Button_C* LeaveButtonWidgetComponent;//[Offset: 0x2e4, Size: 0x4]
	WidgetComponent_WithEffects_C* EnemyTableWidgetComponent;//[Offset: 0x2e8, Size: 0x4]
	WidgetComponent_WithEffects_C* EnemyTableHeadersWidgetComponent;//[Offset: 0x2ec, Size: 0x4]
	WidgetComponent_WithEffects_C* AllyTableWidgetComponent;//[Offset: 0x2f0, Size: 0x4]
	WidgetComponent_WithEffects_C* AllyTableHeadersWidgetComponent;//[Offset: 0x2f4, Size: 0x4]
	WidgetComponent_Button_C* CloseButtonWidgetComponent;//[Offset: 0x2f8, Size: 0x4]
	BoxLayoutComponent* AllyTableHeadersLayout;//[Offset: 0x2fc, Size: 0x4]
	BoxLayoutComponent* EnemyTeamVerticalLayout;//[Offset: 0x300, Size: 0x4]
	BoxLayoutComponent* AllyTableVerticalLayout;//[Offset: 0x304, Size: 0x4]
	LinearColor AllyHeaderBackgroundColor;//[Offset: 0x308, Size: 0x10]
	LinearColor AllyHeaderForegroundColor;//[Offset: 0x318, Size: 0x10]
	SlateFontInfo AllyHeaderFontInfo;//[Offset: 0x328, Size: 0x40]
	LinearColor AllyTableBackgroundColor;//[Offset: 0x368, Size: 0x10]
	LinearColor AllyTableBorderColor;//[Offset: 0x378, Size: 0x10]
	LinearColor EnemyHeaderBackgroundColor;//[Offset: 0x388, Size: 0x10]
	LinearColor EnemyHeaderForegroundColor;//[Offset: 0x398, Size: 0x10]
	SlateFontInfo EnemyHeaderFontInfo;//[Offset: 0x3a8, Size: 0x40]
	LinearColor EnemyTableBackgroundColor;//[Offset: 0x3e8, Size: 0x10]
	LinearColor EnemyTableBorderColor;//[Offset: 0x3f8, Size: 0x10]
	BoxLayoutSlotAttributes BoxLayoutAttributes;//[Offset: 0x408, Size: 0x24]
	BattleGameState* K2Node_DynamicCast_AsBattle_Game_State;//[Offset: 0x42c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	Widget_TeamTableHeader_C* K2Node_DynamicCast_AsWidget_Team_Table_Header;//[Offset: 0x434, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	Widget_TeamTableHeader_C* K2Node_DynamicCast_AsWidget_Team_Table_Header1;//[Offset: 0x43c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	Widget_TeamTable_C* K2Node_DynamicCast_AsWidget_Team_Table;//[Offset: 0x444, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	Widget_TeamTable_C* K2Node_DynamicCast_AsWidget_Team_Table1;//[Offset: 0x44c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	BattleGameState* K2Node_DynamicCast_AsBattle_Game_State1;//[Offset: 0x454, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent2;//[Offset: 0x45c, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent1;//[Offset: 0x460, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent;//[Offset: 0x464, Size: 0x4]
	HUD_Match_C* K2Node_DynamicCast_AsHUD_Match;//[Offset: 0x468, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 0x1]
	GameState* K2Node_DynamicCast_AsGame_State;//[Offset: 0x470, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x478, Size: 0x4]
	BoxLayoutComponent* K2Node_DynamicCast_AsBox_Layout_Component;//[Offset: 0x47c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	interface class FloatProperty* CallFunc_AddBoxLayoutChild_Child_CastInput;//[Offset: 0x484, Size: 0x8]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match;//[Offset: 0x48c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	interface class FloatProperty* CallFunc_IsControllerBattleworthy_self_CastInput;//[Offset: 0x494, Size: 0x8]
	bool CallFunc_IsControllerBattleworthy_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	WidgetsManagerHUD_C* K2Node_DynamicCast_AsWidgets_Manager_HUD;//[Offset: 0x4a0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess10;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4a8, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent3;//[Offset: 0x4b8, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x4c0, Size: 0x10]
	PlayerController_Match_C* K2Node_DynamicCast_AsPlayer_Controller_Match1;//[Offset: 0x4d0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess11;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	interface class FloatProperty* CallFunc_RequestSpawn_self_CastInput;//[Offset: 0x4d8, Size: 0x8]
	interface class DoubleProperty* CallFunc_IsPawnBattleworthy_self_CastInput;//[Offset: 0x4e0, Size: 0x8]
	bool CallFunc_IsPawnBattleworthy_bResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	WidgetsManagerHUD_C* K2Node_DynamicCast_AsWidgets_Manager_HUD1;//[Offset: 0x4ec, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess12;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	Pawn* K2Node_CustomEvent_NewPawn;//[Offset: 0x4f4, Size: 0x4]
	Pawn* K2Node_CustomEvent_OldPawn;//[Offset: 0x4f8, Size: 0x4]
	Controller* K2Node_CustomEvent_Controller;//[Offset: 0x4fc, Size: 0x4]
	void UpdateScoreboard();// 0x3e98664
	void UnbindFromPlayerStateChanged();// 0x3e723e8
	void SetupPawnChange();// 0x4009614
	void ReceiveBeginPlay();// 0x37ccd4c
	void PlayerStateChanged();// 0x3e723cc
	void PawnChanged(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x40217a0
	void CleanupPawnChange();// 0x3e723b0
	void BndEvt__SettingsButtonWidgetComponent_K2Node_ComponentBoundEvent_3_OnWidgetClicked__DelegateSignatur(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x37cc910
	void BndEvt__LeaveButtonWidgetComponent_K2Node_ComponentBoundEvent_1_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x34d9418
	void BndEvt__CloseButtonWidgetComponent_K2Node_ComponentBoundEvent_0_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4011ccc
	void BndEvt__ChangeTitanButtonWidgetComponent_K2Node_ComponentBoundEvent_2_OnWidgetClicked__DelegateSigna(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e977ec
	void BindToPlayerStateChanged();// 0x4008904
	void PlayerStateChangedEvent__DelegateSignature();// 0x4528238
	void PawnChangedEvent__DelegateSignature(Pawn* bpp__NewPawn__pf, Pawn* bpp__OldPawn__pf, Controller* bpp__Controller__pf);// 0x4528238

--------------------------------
Class: BattleGameState.GameState.GameStateBase.Info.Actor.Object
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2c8, Size: 0xc]
	delegate OnPlayerStateChanged;//[Offset: 0x2dc, Size: 0xc]
	delegate OnMatchStateChanged;//[Offset: 0x2e8, Size: 0xc]
	void PlayerStateChangedEvent__DelegateSignature();// 0x4528238
	void MatchStateChangedEvent__DelegateSignature(FName NewMatchState, FName OldMatchState);// 0x4528238
	void DeferredNotifyPlayerStateChanged();// 0x404d320

--------------------------------
Class: Widget_TeamTableHeader_C.UserWidget.Widget.Visual.Object
	Border* Background;//[Offset: 0x1bc, Size: 0x4]
	TextBlock* DeathCountLabel;//[Offset: 0x1c0, Size: 0x4]
	TextBlock* KillCountLabel;//[Offset: 0x1c4, Size: 0x4]
	TextBlock* NameLabel;//[Offset: 0x1c8, Size: 0x4]
	TextBlock* ScoreLabel;//[Offset: 0x1cc, Size: 0x4]
	void SetupAppearance(out LinearColor bpp__BackgroundColor__pf, out LinearColor bpp__ForegroundColor__pf, out SlateFontInfo bpp__FontInfo__pf);// 0x3ffbf14

--------------------------------
Class: Widget_TeamTable_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Border* Background;//[Offset: 0x1c0, Size: 0x4]
	Border* Border;//[Offset: 0x1c4, Size: 0x4]
	VerticalBox* Rows;//[Offset: 0x1c8, Size: 0x4]
	int CurrentUpdateIndex;//[Offset: 0x1cc, Size: 0x4]
	void SetColors(LinearColor bpp__BackgroundColor__pf, LinearColor bpp__Bordercolor__pf);// 0x3ffb8f8
	void FinishUpdate();// 0x3e32614
	void BeginUpdate();// 0x3e32844
	void AddPlayer(PlayerState_Match_C* bpp__PlayerState__pf, int bpp__Place__pf);// 0x3fa95e4

--------------------------------
Class: PlayerState_Match_C.BattlePlayerState.PlayerState.Info.Actor.Object
	TeamInfoComponent* TeamInfo;//[Offset: 0x310, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 0x4]
	float RewardScore;//[Offset: 0x318, Size: 0x4]
	int KillCount;//[Offset: 0x31c, Size: 0x4]
	int DeathCount;//[Offset: 0x320, Size: 0x4]
	bool bIsBattleworthy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	bool bDisqualified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 0x1]
	void UserConstructionScript();// 0x3e95dd8

--------------------------------
Class: BattlePlayerState.PlayerState.Info.Actor.Object
	void DeferredNotifyStateChanged();// 0x404d670
	void BlueprintOnDeactivated();// 0x4528238

--------------------------------
Class: TeamInfoComponent.ActorComponent.Object
	UniqueNetIdRepl SquadId;//[Offset: 0xc4, Size: 0x18]
	int TeamIndex;//[Offset: 0xdc, Size: 0x4]
	void TeamIndexChanged(int OldTeamIndex);// 0x36fe074
	void SquadIdChanged(out const UniqueNetIdRepl OldSquadId);// 0x36fdf0c

--------------------------------
Class: EquipmentSlotInfo
	enum Layout_30_1A736C484E47DD8FFFB6ECBBAD8B334C;//[Offset: 0x0, Size: 0x1]
	RotationLimits RotationLimits_17_FEC76B1642207F4CF967C6AA4251240E;//[Offset: 0x4, Size: 0x10]
	enum ControlGroup_18_D80673CB42C52B1A25946B9F237B76FD;//[Offset: 0x14, Size: 0x1]
	FName[] DamageStageIndicatorsNames_23_D76263E84290E3439AD03B896D75BBCD;//[Offset: 0x18, Size: 0xc]
	FText Description_26_F5FCB2F048BAF1BCE05ED0B0D9158F68;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: RotationLimits
	float MinYaw_2_E7BEECEC49F53D3D21DB589FCAA25BC7;//[Offset: 0x0, Size: 0x4]
	float MaxYaw_4_ECCCB8C34940081E916F6CA3B722C8BE;//[Offset: 0x4, Size: 0x4]
	float MinPitch_6_DFABF8DD49F49BE6F57313AB424CE362;//[Offset: 0x8, Size: 0x4]
	float MaxPitch_8_8E47CBE04398CFF3462665897D4E0950;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: OnlineSessionPtr.StructPtr

--------------------------------
Class: StructPtr

--------------------------------
Class: OnlineSquadEvent
	enum Type;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: OnlineSquadGameState
	UniqueNetIdRepl MasterId;//[Offset: 0x0, Size: 0x18]
	OnlineSquadState[] Squads;//[Offset: 0x18, Size: 0xc]
	OnlineSquadPermissions Permissions;//[Offset: 0x24, Size: 0x4]
	OnlineServiceAttributes Attributes;//[Offset: 0x28, Size: 0x3c]
	bool bMatchmakingInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: Widget_Options_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	ScrollBox* ScrollBox;//[Offset: 0x1c0, Size: 0x4]
	bool bShouldRequestRedrawNextTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 0x1]
	delegate OptionValueChangedEvent;//[Offset: 0x1c8, Size: 0xc]
	FName K2Node_CustomEvent_Key;//[Offset: 0x1d8, Size: 0x8]
	FString K2Node_CustomEvent_NewValue;//[Offset: 0x1e0, Size: 0xc]
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x1ec, Size: 0x38]
	float K2Node_Event_InDeltaTime;//[Offset: 0x224, Size: 0x4]
	float K2Node_ComponentBoundEvent_CurrentOffset;//[Offset: 0x228, Size: 0x4]
	void ValueChangedEvent__DelegateSignature(FName bpp__Key__pf, FString bpp__NewValue__pf);// 0x4528238
	void OptionValueChangedEvent__DelegateSignature(FName bpp__Key__pf, FString bpp__NewValue__pf);// 0x4528238
	void UpdateOptions(out OnlineServiceAttributes bpp__Attributes__pf);// 0x3fe799c
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x3fe7868
	void OptionValueChanged(FName bpp__Key__pf, FString bpp__NewValue__pf__const);// 0x3fe7784
	void HasOptions(out bool bpp__bResult__pf);// 0x3fe76f4
	void ClearOptions();// 0x3e5e93c
	void BuildOptions(out JsonObjectBlueprintWrapper[] bpp__OptionsJsonObjects__pf, out OnlineServiceAttributes bpp__Attributes__pf, bool bpp__bMasterMode__pf);// 0x3fe749c
	void BndEvt__ScrollBox_K2Node_ComponentBoundEvent_1_OnUserScrolledEvent__DelegateSignature(float bpp__CurrentOffset__pf);// 0x3e5ec58

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0x34d33cc

--------------------------------
Class: Widget_PlayersListElement_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	float AnimationAlpha;//[Offset: 0x1c0, Size: 0x4]
	void SetInGamePresence(enum bpp__Value__pf);// 0x3fccb80
	void IsMe(out bool bpp__bResult__pf);// 0x3fe9d78
	void IsInviteToSquadAllowed(out bool bpp__bAllowed__pf);// 0x3fe76f4
	void GetPlayerId(out UniqueNetIdRepl bpp__PlayerId__pf);// 0x3fe9c10
	void GetNameText(out FText bpp__NameText__pf);// 0x3fe9afc
	void GetInviteStatus(out byte bpp__Status__pf);// 0x3fe9a6c
	void GetInGamePresence(out enum bpp__Presence__pf);// 0x3f12d94

--------------------------------
Class: Widget_RecomendedFriends_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	TextBlock* RecomendationsCaptionText;//[Offset: 0x1c0, Size: 0x4]
	TextBlock* RecomendationsEmptyMessage;//[Offset: 0x1c4, Size: 0x4]
	VerticalBox* RecomendationsListBox;//[Offset: 0x1c8, Size: 0x4]
	ScrollBox* RecomendationsScrollBox;//[Offset: 0x1cc, Size: 0x4]
	bool bShouldRequestRedrawNextTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	float K2Node_ComponentBoundEvent_CurrentOffset;//[Offset: 0x1d4, Size: 0x4]
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x1d8, Size: 0x38]
	float K2Node_Event_InDeltaTime;//[Offset: 0x210, Size: 0x4]
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x3fbd1b8
	void FillRecomendedPlayers(out const OnlineUserWrapper[] bpp__Players__pf__const, WidgetActor_Friends_C* bpp__FriendsWidgetActor__pf, bool bpp__bIsFoundPlayers__pf);// 0x3fec458
	void BndEvt__FoundScrollBox_K2Node_ComponentBoundEvent_104_OnUserScrolledEvent__DelegateSignature(float bpp__CurrentOffset__pf);// 0x3e5ec58

--------------------------------
Class: Widget_TabBar_C.Widget_TabBarBase_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Border* Background;//[Offset: 0x1c0, Size: 0x4]
	Image* Bar;//[Offset: 0x1c4, Size: 0x4]
	Border* Border;//[Offset: 0x1c8, Size: 0x4]
	Button* Button;//[Offset: 0x1cc, Size: 0x4]
	RichTextBlock* ButtonRichText;//[Offset: 0x1d0, Size: 0x4]
	ScaleBox* ButtonTextScale;//[Offset: 0x1d4, Size: 0x4]
	SizeBox* SizeBox;//[Offset: 0x1d8, Size: 0x4]
	delegate OnClicked;//[Offset: 0x1dc, Size: 0xc]
	FName RegularBackgroundColorName;//[Offset: 0x1e8, Size: 0x8]
	LinearColor RegularBackgroundColor;//[Offset: 0x1f0, Size: 0x10]
	SlateBrush RegularBorderBrush;//[Offset: 0x200, Size: 0x80]
	FName SelectedBackgroundColorName;//[Offset: 0x280, Size: 0x8]
	LinearColor SelectedBackgroundColor;//[Offset: 0x288, Size: 0x10]
	SlateBrush SelectedBorderBrush;//[Offset: 0x298, Size: 0x80]
	DataTable* SelectedTextStyleSet;//[Offset: 0x318, Size: 0x4]
	DataTable* RegularTextStyleSet;//[Offset: 0x31c, Size: 0x4]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	float K2Node_Event_Value;//[Offset: 0x324, Size: 0x4]
	DataTable* K2Node_Event_TextStyleSet1;//[Offset: 0x328, Size: 0x4]
	DataTable* K2Node_Event_TextStyleSet;//[Offset: 0x32c, Size: 0x4]
	float K2Node_Event_Scale;//[Offset: 0x330, Size: 0x4]
	WidgetComponent_TabBar_C* K2Node_DynamicCast_AsWidget_Component_Tab_Bar;//[Offset: 0x334, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	LinearColor CallFunc_FindColor_OutColor;//[Offset: 0x33c, Size: 0x10]
	LinearColor CallFunc_FindColor_OutColor1;//[Offset: 0x34c, Size: 0x10]
	FText K2Node_Event_Text;//[Offset: 0x35c, Size: 0xc]
	void OnClicked__DelegateSignature(int bpp__Index__pf);// 0x4528238
	void BndEvt__AcceptedCaptionButton_K2Node_ComponentBoundEvent_27_OnButtonClickedEvent__DelegateSignature();// 0x3fbe124

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0xe9, Size: 0x1]
	byte StretchDirection;//[Offset: 0xea, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0xec, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bSingleLayoutPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x51e7528
	void SetStretchDirection(byte InStretchDirection);// 0x51e74b0
	void SetStretch(byte InStretch);// 0x51e7438
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x51e73b8

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe9, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe9, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe9, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe9, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe9, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe9, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe9, Size: 0x1]
	float WidthOverride;//[Offset: 0xec, Size: 0x4]
	float HeightOverride;//[Offset: 0xf0, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0xf4, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0xf8, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0xfc, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x100, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x104, Size: 0x4]
	void SetWidthOverride(float InWidthOverride);// 0x51e9664
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x51e95ec
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x51e9574
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x51e94fc
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x51e9484
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x51e940c
	void SetHeightOverride(float InHeightOverride);// 0x51e9394
	void ClearWidthOverride();// 0x51e9380
	void ClearMinDesiredWidth();// 0x51e936c
	void ClearMinDesiredHeight();// 0x51e9358
	void ClearMaxDesiredWidth();// 0x51e9344
	void ClearMaxDesiredHeight();// 0x51e9330
	void ClearMaxAspectRatio();// 0x51e931c
	void ClearHeightOverride();// 0x51e9308

--------------------------------
Class: Widget_FriendLists_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	TextBlock* AcceptedEmptyMessage;//[Offset: 0x1c0, Size: 0x4]
	VerticalBox* AcceptedListBox;//[Offset: 0x1c4, Size: 0x4]
	ScrollBox* AcceptedScrollBox;//[Offset: 0x1c8, Size: 0x4]
	TextBlock* InboundEmptyMessage;//[Offset: 0x1cc, Size: 0x4]
	VerticalBox* InboundListBox;//[Offset: 0x1d0, Size: 0x4]
	ScrollBox* InboundScrollBox;//[Offset: 0x1d4, Size: 0x4]
	WidgetSwitcher* ListSwitcher;//[Offset: 0x1d8, Size: 0x4]
	TextBlock* OutboundEmptyMessage;//[Offset: 0x1dc, Size: 0x4]
	VerticalBox* OutboundListBox;//[Offset: 0x1e0, Size: 0x4]
	ScrollBox* OutboundScrollBox;//[Offset: 0x1e4, Size: 0x4]
	ScrollBox* ActiveScrollBox;//[Offset: 0x1e8, Size: 0x4]
	bool bShouldRequestRedrawNextTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x1f0, Size: 0x38]
	float K2Node_Event_InDeltaTime;//[Offset: 0x228, Size: 0x4]
	float K2Node_ComponentBoundEvent_CurrentOffset2;//[Offset: 0x22c, Size: 0x4]
	float K2Node_ComponentBoundEvent_CurrentOffset1;//[Offset: 0x230, Size: 0x4]
	float K2Node_ComponentBoundEvent_CurrentOffset;//[Offset: 0x234, Size: 0x4]
	void UpdateFriendsLists(WidgetActor_Friends_C* bpp__FriendsWidgetActor__pf);// 0x3fc45c4
	void UpdateActiveScrollBox();// 0x3fc1cc8
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x3fcf340
	void SelectList(int bpp__Index__pf);// 0x3e456b0
	void Scrolled();// 0x3e32860
	void BndEvt__OutboundScrollBox_K2Node_ComponentBoundEvent_47_OnUserScrolledEvent__DelegateSignature(float bpp__CurrentOffset__pf);// 0x3e5129c
	void BndEvt__InboundScrollBox_K2Node_ComponentBoundEvent_37_OnUserScrolledEvent__DelegateSignature(float bpp__CurrentOffset__pf);// 0x3e5ec58
	void BndEvt__AcceptedScrollBox_K2Node_ComponentBoundEvent_36_OnUserScrolledEvent__DelegateSignature(float bpp__CurrentOffset__pf);// 0x3f13090

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0xec, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x51cfe9c
	void SetActiveWidget(Widget* Widget);// 0x520b948
	Widget* GetWidgetAtIndex(int Index);// 0x520b8c8
	int GetNumWidgets();// 0x520b8a0
	int GetActiveWidgetIndex();// 0x520b878
	Widget* GetActiveWidget();// 0x520b850

--------------------------------
Class: OnlineUsersWidgetsAndStateMapWrapper

--------------------------------
Class: WidgetActor_FriendActionConfirmation_C.WidgetActor_C.Actor.Object
	WidgetComponent_Button_C* ConfirmButtonWidgetComponent;//[Offset: 0x2b8, Size: 0x4]
	BoxLayoutComponent* BottomHorizontalLayout;//[Offset: 0x2bc, Size: 0x4]
	BoxLayoutComponent* TopHorizontalLayout;//[Offset: 0x2c0, Size: 0x4]
	BoxLayoutComponent* VerticalLayout;//[Offset: 0x2c4, Size: 0x4]
	WidgetComponent_Button_C* DeclineButtonWidgetComponent;//[Offset: 0x2c8, Size: 0x4]
	WidgetComponent_FriendActionConfirmationPlayerInfo_C* PlayerInfoWidgetComponent;//[Offset: 0x2cc, Size: 0x4]
	Widget_PlayersListElement_C* ActionSourceWidget;//[Offset: 0x2d0, Size: 0x4]
	byte ActionCode;//[Offset: 0x2d4, Size: 0x1]
	Vector TargetOffset;//[Offset: 0x2d8, Size: 0xc]
	WidgetActor_Friends_C* FriendsWidgetActor;//[Offset: 0x2e4, Size: 0x4]
	float MaxRightOverhang;//[Offset: 0x2e8, Size: 0x4]
	float OutOfRangeTestOffset;//[Offset: 0x2ec, Size: 0x4]
	Vector2D RelativePositionWithoutOffset;//[Offset: 0x2f0, Size: 0x8]
	float CallFunc_BreakVector2D_X;//[Offset: 0x2f8, Size: 0x4]
	float CallFunc_BreakVector2D_Y;//[Offset: 0x2fc, Size: 0x4]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x300, Size: 0x4]
	Vector CallFunc_GetPivot_ReturnValue;//[Offset: 0x304, Size: 0xc]
	float CallFunc_BreakVector_X;//[Offset: 0x310, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x314, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x318, Size: 0x4]
	Vector CallFunc_GetPivot_ReturnValue1;//[Offset: 0x31c, Size: 0xc]
	float CallFunc_BreakVector_X1;//[Offset: 0x328, Size: 0x4]
	float CallFunc_BreakVector_Y1;//[Offset: 0x32c, Size: 0x4]
	float CallFunc_BreakVector_Z1;//[Offset: 0x330, Size: 0x4]
	float CallFunc_BreakVector_X2;//[Offset: 0x334, Size: 0x4]
	float CallFunc_BreakVector_Y2;//[Offset: 0x338, Size: 0x4]
	float CallFunc_BreakVector_Z2;//[Offset: 0x33c, Size: 0x4]
	int CallFunc_GetLayoutParentAndSlotIndex_OutSlotIndex;//[Offset: 0x340, Size: 0x4]
	float CallFunc_BreakVector_X3;//[Offset: 0x344, Size: 0x4]
	float CallFunc_BreakVector_Y3;//[Offset: 0x348, Size: 0x4]
	float CallFunc_BreakVector_Z3;//[Offset: 0x34c, Size: 0x4]
	int CallFunc_GetLayoutParentAndSlotIndex_OutSlotIndex1;//[Offset: 0x350, Size: 0x4]
	Vector CallFunc_GetComponentSize_ReturnValue;//[Offset: 0x354, Size: 0xc]
	Vector CallFunc_GetComponentSize_ReturnValue1;//[Offset: 0x360, Size: 0xc]
	float CallFunc_BreakVector_X4;//[Offset: 0x36c, Size: 0x4]
	float CallFunc_BreakVector_Y4;//[Offset: 0x370, Size: 0x4]
	float CallFunc_BreakVector_Z4;//[Offset: 0x374, Size: 0x4]
	float CallFunc_BreakVector_X5;//[Offset: 0x378, Size: 0x4]
	float CallFunc_BreakVector_Y5;//[Offset: 0x37c, Size: 0x4]
	float CallFunc_BreakVector_Z5;//[Offset: 0x380, Size: 0x4]
	Vector CallFunc_GetComponentSize_ReturnValue2;//[Offset: 0x384, Size: 0xc]
	float CallFunc_BreakVector_X6;//[Offset: 0x390, Size: 0x4]
	float CallFunc_BreakVector_Y6;//[Offset: 0x394, Size: 0x4]
	float CallFunc_BreakVector_Z6;//[Offset: 0x398, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent1;//[Offset: 0x39c, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent;//[Offset: 0x3a0, Size: 0x4]
	float CallFunc_BreakVector_X7;//[Offset: 0x3a4, Size: 0x4]
	float CallFunc_BreakVector_Y7;//[Offset: 0x3a8, Size: 0x4]
	float CallFunc_BreakVector_Z7;//[Offset: 0x3ac, Size: 0x4]
	float CallFunc_BreakVector2D_X1;//[Offset: 0x3b0, Size: 0x4]
	float CallFunc_BreakVector2D_Y1;//[Offset: 0x3b4, Size: 0x4]
	HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult;//[Offset: 0x3b8, Size: 0x88]
	Geometry CallFunc_GetCachedGeometry_ReturnValue;//[Offset: 0x440, Size: 0x38]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x478, Size: 0x10]
	float CallFunc_BreakVector2D_X2;//[Offset: 0x488, Size: 0x4]
	float CallFunc_BreakVector2D_Y2;//[Offset: 0x48c, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x490, Size: 0x10]
	Vector CallFunc_GetComponentSize_ReturnValue3;//[Offset: 0x4a0, Size: 0xc]
	float CallFunc_BreakVector_X8;//[Offset: 0x4ac, Size: 0x4]
	float CallFunc_BreakVector_Y8;//[Offset: 0x4b0, Size: 0x4]
	float CallFunc_BreakVector_Z8;//[Offset: 0x4b4, Size: 0x4]
	float CallFunc_BreakVector2D_X3;//[Offset: 0x4b8, Size: 0x4]
	float CallFunc_BreakVector2D_Y3;//[Offset: 0x4bc, Size: 0x4]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x4c0, Size: 0x4]
	Vector CallFunc_GetComponentSize_ReturnValue4;//[Offset: 0x4c4, Size: 0xc]
	float CallFunc_BreakVector_X9;//[Offset: 0x4d0, Size: 0x4]
	float CallFunc_BreakVector_Y9;//[Offset: 0x4d4, Size: 0x4]
	float CallFunc_BreakVector_Z9;//[Offset: 0x4d8, Size: 0x4]
	void OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4528238
	void ShowConfirmButtons();// 0x3e723e8
	void ShouldBeVisible(out bool bpp__bShouldBeVisible__pf);// 0x400a4f4
	void SetScale(float bpp__Scale__pf);// 0x400a474
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e977ec
	void ReceiveBeginPlay();// 0x3e721a8
	void OpenActionConfirmation(Widget_PlayersListElement_C* bpp__ActionSourceWidget__pf, byte bpp__ActionCode__pf, out bool bpp__bOpened__pf);// 0x400a35c
	void InitButtons();// 0x4009614
	void DeclineButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e721c4
	void ConfirmButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x40084f8
	void CloseCleanup();// 0x37ccd4c

--------------------------------
Class: WidgetComponent_FriendActionConfirmationPlayerInfo_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Widget_PlayersListElement_C* ActionSourceWidget;//[Offset: 0x860, Size: 0x4]
	WidgetComponent_Advanced_C* ActionSourceWidgetComponent;//[Offset: 0x864, Size: 0x4]
	void Show(Widget_PlayersListElement_C* bpp__ActionSourceWidget__pf, byte bpp__ActionCode__pf);// 0x4038fac
	void Hide();// 0x3eaf338

--------------------------------
Class: UserOnlineStatus
	UniqueNetIdRepl UserId;//[Offset: 0x0, Size: 0x18]
	enum InGamePresence;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WidgetActor_Shop_C.WidgetActor_C.Actor.Object
	WidgetComponent_Button_C* DeclinePurchaseButtonWidgetComponent;//[Offset: 0x2bc, Size: 0x4]
	WidgetComponent_Button_C* ConfirmPurchaseButtonWidgetComponent;//[Offset: 0x2c0, Size: 0x4]
	BoxLayoutComponent* PurchaseConfirmationButtonsLayout;//[Offset: 0x2c4, Size: 0x4]
	WidgetComponent_Panel_C* PurchaseConfirmationMessageWidgetComponent;//[Offset: 0x2c8, Size: 0x4]
	BoxLayoutComponent* PurchaseConfirmationLayout;//[Offset: 0x2cc, Size: 0x4]
	LayoutSpacerComponent* LayoutRowsRoot;//[Offset: 0x2d0, Size: 0x4]
	WidgetComponent_RichText_C* TitleWidgetComponen;//[Offset: 0x2d4, Size: 0x4]
	WidgetComponent_Button_C* CloseButtonWidgetComponent;//[Offset: 0x2d8, Size: 0x4]
	BoxLayoutComponent* HorizontalLayout;//[Offset: 0x2dc, Size: 0x4]
	SnapScrollControllerComponent_C* SnapScrollControllerComponent;//[Offset: 0x2e0, Size: 0x4]
	AnchorsLayoutSlotAttributes TitleLayoutAttributes;//[Offset: 0x2e4, Size: 0x3c]
	AnchorsLayoutSlotAttributes PurchaseConfirmationLayoutAttributes;//[Offset: 0x320, Size: 0x3c]
	BoxLayoutSlotAttributes CurrencyIAPLayoutAttributes;//[Offset: 0x35c, Size: 0x24]
	BoxLayoutSlotAttributes PremiumIAPLayoutAttributes;//[Offset: 0x380, Size: 0x24]
	BoxLayoutSlotAttributes ItemWidgetLayoutAttributes;//[Offset: 0x3a4, Size: 0x24]
	AnchorsLayoutSlotAttributes WaitingWidgetLayoutAttributes;//[Offset: 0x3c8, Size: 0x3c]
	BoxLayoutComponent* CurrencyLayoutParent;//[Offset: 0x404, Size: 0x4]
	BoxLayoutComponent* PremiumLayoutParent;//[Offset: 0x408, Size: 0x4]
	BoxLayoutComponent* EngineeringServiceLayoutParent;//[Offset: 0x40c, Size: 0x4]
	WidgetsLayoutComponent*[] LayoutRows;//[Offset: 0x410, Size: 0xc]
	float UIScale;//[Offset: 0x41c, Size: 0x4]
	float WheelRadius;//[Offset: 0x420, Size: 0x4]
	OnlineServiceRequestPtr GetIAPsRequest;//[Offset: 0x424, Size: 0x4]
	FName PremiumBattleRewardPercentAttributeName;//[Offset: 0x428, Size: 0x8]
	OnlineServiceRequestPtr PurchaseRequest;//[Offset: 0x430, Size: 0x4]
	TimerHandle ArrangeItemsDelayTimerHandle;//[Offset: 0x438, Size: 0x8]
	float BackOffsetFromLayoutParent;//[Offset: 0x440, Size: 0x4]
	float ScaledWheelRadius;//[Offset: 0x444, Size: 0x4]
	float BackgroundOffset;//[Offset: 0x448, Size: 0x4]
	float ForegroundOffset;//[Offset: 0x44c, Size: 0x4]
	LinearColor BackgroundTintColorAndOpacity;//[Offset: 0x450, Size: 0x10]
	LinearColor ForegroundTintColorAndOpacity;//[Offset: 0x460, Size: 0x10]
	WidgetComponent_Panel_C* WaitingWidgetComponent;//[Offset: 0x470, Size: 0x4]
	bool bBoundToGarageOperationComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1]
	enum RequestedCategory;//[Offset: 0x475, Size: 0x1]
	bool bCloseAfterPurchase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x476, Size: 0x1]
	enum LayoutRowsVisibility;//[Offset: 0x477, Size: 0x1]
	PlayerProfileStoreItem* ConfirmingStoreItem;//[Offset: 0x478, Size: 0x4]
	Widget_Shop_Item_C* ConfirmingStoreItemWidget;//[Offset: 0x47c, Size: 0x4]
	int K2Node_Event_NewSnapItemIndex;//[Offset: 0x480, Size: 0x4]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x484, Size: 0x4]
	Vector CallFunc_GetPivot_ReturnValue;//[Offset: 0x488, Size: 0xc]
	Vector CallFunc_GetDesiredLinearSize_ReturnValue;//[Offset: 0x494, Size: 0xc]
	float CallFunc_BreakVector_X;//[Offset: 0x4a0, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x4a4, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x4a8, Size: 0x4]
	float CallFunc_BreakVector_X1;//[Offset: 0x4ac, Size: 0x4]
	float CallFunc_BreakVector_Y1;//[Offset: 0x4b0, Size: 0x4]
	float CallFunc_BreakVector_Z1;//[Offset: 0x4b4, Size: 0x4]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component;//[Offset: 0x4b8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	WidgetsManagerHUD_C* K2Node_DynamicCast_AsWidgets_Manager_HUD;//[Offset: 0x4c0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	PlayerProfileIAP*[] K2Node_CustomEvent_IAPs;//[Offset: 0x4c8, Size: 0xc]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request1;//[Offset: 0x4d4, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0x4d8, Size: 0xc]
	byte K2Node_CustomEvent_Status1;//[Offset: 0x4e4, Size: 0x1]
	WidgetsLayoutComponent* CallFunc_GetDefaultLayoutParent_LayoutParent;//[Offset: 0x4e8, Size: 0x4]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component1;//[Offset: 0x4ec, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x4f4, Size: 0x4]
	int Temp_int_Array_Index_Variable;//[Offset: 0x4f8, Size: 0x4]
	PlayerProfileIAP* CallFunc_Array_Get_Item;//[Offset: 0x4fc, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x500, Size: 0x10]
	float K2Node_InputAxisKeyEvent_AxisValue;//[Offset: 0x510, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x518, Size: 0x10]
	interface class FloatProperty* CallFunc_AddAnchorsLayoutChild_Child_CastInput;//[Offset: 0x528, Size: 0x8]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent2;//[Offset: 0x530, Size: 0x4]
	int K2Node_Event_NewBackgroundDepth;//[Offset: 0x534, Size: 0x4]
	GarageController_C* K2Node_CustomEvent_GarageController2;//[Offset: 0x538, Size: 0x4]
	enum K2Node_CustomEvent_Operation;//[Offset: 0x53c, Size: 0x1]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request;//[Offset: 0x540, Size: 0x4]
	byte K2Node_CustomEvent_Status;//[Offset: 0x544, Size: 0x1]
	FString K2Node_CustomEvent_ErrorStr;//[Offset: 0x548, Size: 0xc]
	GarageController_C* K2Node_CustomEvent_GarageController1;//[Offset: 0x554, Size: 0x4]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x558, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x560, Size: 0x10]
	bool CallFunc_SetScaleAndInitialScrollPosition_bSucceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x578, Size: 0x10]
	TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue1;//[Offset: 0x588, Size: 0x8]
	float CallFunc_BreakVector_X2;//[Offset: 0x590, Size: 0x4]
	float CallFunc_BreakVector_Y2;//[Offset: 0x594, Size: 0x4]
	float CallFunc_BreakVector_Z2;//[Offset: 0x598, Size: 0x4]
	Vector Temp_struct_Variable;//[Offset: 0x59c, Size: 0xc]
	byte Temp_byte_Variable;//[Offset: 0x5a8, Size: 0x1]
	byte K2Node_InputTouchEvent_FingerIndex;//[Offset: 0x5a9, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location;//[Offset: 0x5ac, Size: 0xc]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent1;//[Offset: 0x5b8, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent;//[Offset: 0x5bc, Size: 0x4]
	byte K2Node_InputTouchEvent_FingerIndex1;//[Offset: 0x5c0, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location1;//[Offset: 0x5c4, Size: 0xc]
	interface class RotatorProperty* CallFunc_AddAnchorsLayoutChild_Child1_CastInput;//[Offset: 0x5d0, Size: 0x8]
	byte K2Node_InputTouchEvent_FingerIndex2;//[Offset: 0x5d8, Size: 0x1]
	Vector K2Node_InputTouchEvent_Location2;//[Offset: 0x5dc, Size: 0xc]
	Key Temp_struct_Variable1;//[Offset: 0x5e8, Size: 0x10]
	Key K2Node_InputKeyEvent_Key;//[Offset: 0x5f8, Size: 0x10]
	bool CallFunc_IsOpen_IsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	Key K2Node_InputKeyEvent_Key1;//[Offset: 0x610, Size: 0x10]
	void OnOperationComplete__DelegateSignature(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void UnbindFromGarageOperationComplete(GarageController_C* bpp__GarageController__pf);// 0x3e98680
	void StoreItemPurchaseComplete();// 0x3e57b04
	void SnapItemIndexChanged(int bpp__NewSnapItemIndex__pf);// 0x3f1706c
	void ShowWaitingWidget();// 0x372fbdc
	void ShowError(out const FText bpp__Message__pf__const);// 0x4025ea0
	void SetVisibilityAndTint(enum bpp__LayoutVisibility__pf, LinearColor bpp__WidgetTintColorAndOpacity__pf);// 0x4025dd4
	void SetupSpecialIAPWidget(PlayerProfileIAP* bpp__IAP__pf, PlayerController* bpp__OwningPlayer__pf);// 0x4018014
	void SetupPremiumIAPWidget(PlayerProfileIAP* bpp__IAP__pf, PlayerController* bpp__OwningPlayer__pf);// 0x4025d10
	void SetupItemWidget(PlayerProfileIAP* bpp__IAP__pf, PlayerProfileStoreItem* bpp__StoreItem__pf, PlayerController* bpp__OwningPlayer__pf);// 0x4025c08
	void SetupIAPWidget(PlayerProfileIAP* bpp__IAP__pf, PlayerController* bpp__OwningPlayer__pf);// 0x4025b44
	void SetupEngineeringServiceIAPWidget(PlayerProfileIAP* bpp__IAP__pf, PlayerController* bpp__OwningPlayer__pf);// 0x4025a80
	void SetupCurrencyIAPWidget(PlayerProfileIAP* bpp__IAP__pf, PlayerController* bpp__OwningPlayer__pf);// 0x40259bc
	void SetScaleAndInitialScrollPosition(out bool bpp__bSucceed__pf);// 0x402592c
	void SetBackgroundOffset(float bpp__Offset__pf);// 0x37cd128
	void RowsFilled();// 0x34d93fc
	void ReceiveBeginPlay();// 0x37cd4a8
	void PurchaseItem(PlayerProfileIAP* bpp__IAP__pf, PlayerProfileStoreItem* bpp__StoreItem__pf);// 0x4025868
	void PurchaseIAP(PlayerProfileIAP* bpp__IAP__pf);// 0x3eaf7dc
	void InpTchEvt_Released(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x4018a00
	void InpTchEvt_Pressed(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x4018b88
	void InpTchEvt_Moved(byte bpp__FingerIndex__pf, Vector bpp__Location__pf);// 0x40257a4
	void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent(float bpp__AxisValue__pf);// 0x4025724
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x4025564
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x4018840
	void InitPurchaseConfirmation();// 0x4025548
	void IAPsReceived(out const PlayerProfileIAP*[] bpp__IAPs__pf__const, OnlineServiceRequestPtr bpp__Request__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x402534c
	void HideWaitingWidget();// 0x3eb0d98
	void HidePurchaseConfirmation();// 0x3eb09dc
	void GetPremiumLayoutParent(out BoxLayoutComponent* bpp__LayoutParent__pf);// 0x40252bc
	void GetEngineeringServiceLayoutParent(out BoxLayoutComponent* bpp__LayoutParent__pf);// 0x4017f84
	void GetCurrencyLayoutParent(out BoxLayoutComponent* bpp__LayoutParent__pf);// 0x402522c
	void GarageOperationComplete(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf__const, GarageController_C* bpp__GarageController__pf);// 0x4025014
	void FillRows();// 0x3e72394
	void DeferredRearrange();// 0x3e723b0
	void DeferredArrangeItems();// 0x37ccde8
	void ConfirmStoreItemPurchase(Widget_Shop_Item_C* bpp__ItemWidget__pf);// 0x3ea6cac
	void CleanupRows();// 0x3ef0f2c
	void CleanupPurchaseConfirmation();// 0x3e57a0c
	void BndEvt__DeclinePurchaseButtonWidgetComponent_K2Node_ComponentBoundEvent_2_OnWidgetClicked__DelegateS(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e98700
	void BndEvt__ConfirmPurchaseButtonWidgetComponent_K2Node_ComponentBoundEvent_1_OnWidgetClicked__DelegateS(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x37cc910
	void BndEvt__CloseButtonWidgetComponent_K2Node_ComponentBoundEvent_0_OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4019014
	void BindToGarageOperationComplete(GarageController_C* bpp__GarageController__pf);// 0x401fa0c
	void BeginArrangeItems(out int bpp__NumItems__pf);// 0x4024f84
	void ArrangeItem(int bpp__ItemIndex__pf, float bpp__Pos__pf, out float bpp__NextPos__pf, out float bpp__SnapPos__pf, out bool bpp__bAllowSnap__pf);// 0x4024db8

--------------------------------
Class: SnapScrollControllerComponent_C.ActorComponent.Object
	PlayerController* OwningPlayerController;//[Offset: 0xa8, Size: 0x4]
	float Force;//[Offset: 0xac, Size: 0x4]
	float InputForce;//[Offset: 0xb0, Size: 0x4]
	float SnapPos;//[Offset: 0xb4, Size: 0x4]
	float SnapForceScale;//[Offset: 0xb8, Size: 0x4]
	float SnapForce;//[Offset: 0xbc, Size: 0x4]
	float ScrollPosition;//[Offset: 0xc0, Size: 0x4]
	float LastScrollPosition;//[Offset: 0xc4, Size: 0x4]
	int SnapItemIndex;//[Offset: 0xc8, Size: 0x4]
	Object* Delegate;//[Offset: 0xcc, Size: 0x4]
	Vector LastTouchLocation;//[Offset: 0xd0, Size: 0xc]
	float HitZoneWidth;//[Offset: 0xdc, Size: 0x4]
	bool bScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float HitZoneRight;//[Offset: 0xe4, Size: 0x4]
	float MouseFinalInputScale;//[Offset: 0xe8, Size: 0x4]
	float TouchFinalInputScale;//[Offset: 0xec, Size: 0x4]
	Vector2D ViewportSize;//[Offset: 0xf0, Size: 0x8]
	float MouseInputScale;//[Offset: 0xf8, Size: 0x4]
	float TouchInputScale;//[Offset: 0xfc, Size: 0x4]
	float MaxInputForce;//[Offset: 0x100, Size: 0x4]
	float MinInputForce;//[Offset: 0x104, Size: 0x4]
	float ScrollRange;//[Offset: 0x108, Size: 0x4]
	bool bPointerPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bTouchPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	float SnapForceSquareCoefficient;//[Offset: 0x110, Size: 0x4]
	float SnapForceMin;//[Offset: 0x114, Size: 0x4]
	float SnapForceMax;//[Offset: 0x118, Size: 0x4]
	float SnapForceCompareScale;//[Offset: 0x11c, Size: 0x4]
	float MousePressedSnapForceScale;//[Offset: 0x120, Size: 0x4]
	float MouseReleasedSnapForceScale;//[Offset: 0x124, Size: 0x4]
	float MousePressedForceInterpSpeed;//[Offset: 0x128, Size: 0x4]
	float MouseReleasedForceInterpSpeed;//[Offset: 0x12c, Size: 0x4]
	float ForceInterpSpeed;//[Offset: 0x130, Size: 0x4]
	float K2Node_CustomEvent_Axis_Value;//[Offset: 0x134, Size: 0x4]
	float CallFunc_GetMousePosition_LocationX;//[Offset: 0x138, Size: 0x4]
	float CallFunc_GetMousePosition_LocationY;//[Offset: 0x13c, Size: 0x4]
	Vector K2Node_CustomEvent_Location2;//[Offset: 0x140, Size: 0xc]
	byte K2Node_CustomEvent_FingerIndex2;//[Offset: 0x14c, Size: 0x1]
	Vector K2Node_CustomEvent_Location1;//[Offset: 0x150, Size: 0xc]
	byte K2Node_CustomEvent_FingerIndex1;//[Offset: 0x15c, Size: 0x1]
	Vector K2Node_CustomEvent_Location;//[Offset: 0x160, Size: 0xc]
	byte K2Node_CustomEvent_FingerIndex;//[Offset: 0x16c, Size: 0x1]
	float CallFunc_BreakVector_X;//[Offset: 0x170, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x174, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x178, Size: 0x4]
	float CallFunc_BreakVector_X1;//[Offset: 0x17c, Size: 0x4]
	float CallFunc_BreakVector_Y1;//[Offset: 0x180, Size: 0x4]
	float CallFunc_BreakVector_Z1;//[Offset: 0x184, Size: 0x4]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x188, Size: 0x4]
	float CallFunc_BreakVector2D_X;//[Offset: 0x18c, Size: 0x4]
	float CallFunc_BreakVector2D_Y;//[Offset: 0x190, Size: 0x4]
	float CallFunc_BreakVector2D_X1;//[Offset: 0x194, Size: 0x4]
	float CallFunc_BreakVector2D_Y1;//[Offset: 0x198, Size: 0x4]
	float CallFunc_BreakVector2D_X2;//[Offset: 0x19c, Size: 0x4]
	float CallFunc_BreakVector2D_Y2;//[Offset: 0x1a0, Size: 0x4]
	float CallFunc_BreakVector_X2;//[Offset: 0x1a4, Size: 0x4]
	float CallFunc_BreakVector_Y2;//[Offset: 0x1a8, Size: 0x4]
	float CallFunc_BreakVector_Z2;//[Offset: 0x1ac, Size: 0x4]
	void UpdateViewportMetrics();// 0x3e32828
	void TouchReleased(Vector bpp__Location__pf, byte bpp__FingerIndex__pf);// 0x3f10f20
	void TouchPressed(Vector bpp__Location__pf, byte bpp__FingerIndex__pf);// 0x3f10e5c
	void TouchMoved(Vector bpp__Location__pf, byte bpp__FingerIndex__pf);// 0x3f10d98
	void SetScrollPosition(float bpp__NewScrollPos__pf);// 0x3f10d18
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e4e4d4
	void ReceiveBeginPlay();// 0x3e32630
	void PointerReleased();// 0x37189ec
	void PointerPressed();// 0x3718728
	void Input Axis(float bpp__AxisxValue__pfT);// 0x3e41334
	void DeactivateController();// 0x3719018
	void ArrangeItems();// 0x3e32668
	void ActivateController();// 0x3719134

--------------------------------
Class: Widget_Shop_Item_C.Widget_Shop_Base_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	TextBlock* BatlleBonusPersentText;//[Offset: 0x1c4, Size: 0x4]
	HorizontalBox* BattleBonusBox;//[Offset: 0x1c8, Size: 0x4]
	Button* BuyButton;//[Offset: 0x1cc, Size: 0x4]
	TextBlock* DeliveryNotesText;//[Offset: 0x1d0, Size: 0x4]
	Overlay* DelPriceOverlay;//[Offset: 0x1d4, Size: 0x4]
	RichTextBlock* DelPriceRichText;//[Offset: 0x1d8, Size: 0x4]
	RichTextBlock* DescriptionText;//[Offset: 0x1dc, Size: 0x4]
	Image* Image;//[Offset: 0x1e0, Size: 0x4]
	Widget_ItemTitle_C* ItemTitleWidget;//[Offset: 0x1e4, Size: 0x4]
	TextBlock* NotAvailableText;//[Offset: 0x1e8, Size: 0x4]
	GridPanel* ParamsGrid;//[Offset: 0x1ec, Size: 0x4]
	RichTextBlock* PriceRichText;//[Offset: 0x1f0, Size: 0x4]
	RichTextBlock* PromoPriceRichText;//[Offset: 0x1f4, Size: 0x4]
	RichTextBlock* QuantityRichText;//[Offset: 0x1f8, Size: 0x4]
	Button* VipServiceButton;//[Offset: 0x1fc, Size: 0x4]
	int ItemImageWidth;//[Offset: 0x200, Size: 0x4]
	int ItemImageHeight;//[Offset: 0x204, Size: 0x4]
	LinearColor ItemImageColor;//[Offset: 0x208, Size: 0x10]
	TimerHandle ItemCapturingLoopTimerHandle;//[Offset: 0x218, Size: 0x8]
	TextureRenderTarget2D* ItemRenderTarget;//[Offset: 0x220, Size: 0x4]
	ActorRenderCaptureTask_C* CaptureTask;//[Offset: 0x224, Size: 0x4]
	PlayerProfileItem* Item;//[Offset: 0x228, Size: 0x4]
	FName DiscountAttributeName;//[Offset: 0x230, Size: 0x8]
	PlayerProfileItem* K2Node_CustomEvent_Item;//[Offset: 0x238, Size: 0x4]
	ActorRenderCaptureTask_C* K2Node_CustomEvent_Task;//[Offset: 0x23c, Size: 0x4]
	enum K2Node_CustomEvent_Status;//[Offset: 0x240, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1]
	WidgetActor_Shop_C* K2Node_DynamicCast_AsWidget_Actor_Shop;//[Offset: 0x244, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x24c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD;//[Offset: 0x254, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	Actor* CallFunc_SpawnItemActorForStore_Actor;//[Offset: 0x25c, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x260, Size: 0x10]
	WidgetActor_Shop_C* K2Node_DynamicCast_AsWidget_Actor_Shop1;//[Offset: 0x270, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD1;//[Offset: 0x278, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	WidgetsLayoutComponent* CallFunc_GetCurvedLayoutParent_LayoutParent;//[Offset: 0x280, Size: 0x4]
	void CaptureTaskEvent__DelegateSignature(ActorRenderCaptureTask_C* bpp__Task__pf, enum bpp__Status__pf);// 0x4528238
	void UpdatePriceAndQuantity();// 0x3e51180
	void SetupItem();// 0x3fbe124
	void IsVipServiceValid(out bool bpp__bResult__pf);// 0x3f13110
	void InitImageWithItem(PlayerProfileItem* bpp__Item__pf);// 0x3e456b0
	void HandleCaptureEvent(ActorRenderCaptureTask_C* bpp__Task__pf, enum bpp__Status__pf);// 0x3ff3db8
	void FetchItem(out PlayerProfileItem* bpp__Item__pf);// 0x3ff3d28
	void Destruct();// 0x3e32860
	void CleanupCaptureTask(ActorRenderCaptureTask_C* bpp__CaptureTask__pf);// 0x3ff3ca8
	void BndEvt__VipServiceButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x3e32614
	void BndEvt__Button_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x3e326f4

--------------------------------
Class: Widget_Shop_Base_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	PlayerProfileIAP* IAP;//[Offset: 0x1c0, Size: 0x4]
	void PurchaseIAP();// 0x3e32844

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x51e4178

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x28, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x51e4720
	void SetPadding(Margin InPadding);// 0x51e4698
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x51e4620

--------------------------------
Class: Widget_ItemTitle_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	VerticalBox* ClassBox;//[Offset: 0x1c0, Size: 0x4]
	TextBlock* ClassText;//[Offset: 0x1c4, Size: 0x4]
	TextBlock* ItemTypeLabel;//[Offset: 0x1c8, Size: 0x4]
	TextBlock* NameText;//[Offset: 0x1cc, Size: 0x4]
	VerticalBox* SpaceBox;//[Offset: 0x1d0, Size: 0x4]
	TextBlock* SpaceText;//[Offset: 0x1d4, Size: 0x4]
	Image* TierImage;//[Offset: 0x1d8, Size: 0x4]
	PlayerProfileItem* Item;//[Offset: 0x1dc, Size: 0x4]
	SlateBrush T2IconBrush;//[Offset: 0x1e0, Size: 0x80]
	SlateBrush T3IconBrush;//[Offset: 0x260, Size: 0x80]
	float OccupiedSquadSpace;//[Offset: 0x2e0, Size: 0x4]
	float FreeSquadSpace;//[Offset: 0x2e4, Size: 0x4]
	FName TitleTextColorName;//[Offset: 0x2e8, Size: 0x8]
	LinearColor TitleTextColor;//[Offset: 0x2f0, Size: 0x10]
	bool bIsTitan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	LinearColor CallFunc_FindColor_OutColor;//[Offset: 0x304, Size: 0x10]
	void UpdateSquadSpace(PlayerProfileItem* bpp__Item__pf, out bool bpp__bHasOccupiedSpaceData__pf);// 0x3f12f34
	void UpdateContent(PlayerProfileItem* bpp__Item__pf);// 0x3e5129c
	void MultiplyShadowOffset(Vector2D bpp__OffsetMultipliers__pf);// 0x3fd6a90

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0xec, Size: 0xc]
	float[] RowFill;//[Offset: 0xf8, Size: 0xc]
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x51da834
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x51da778
	GridSlot* AddChildToGrid(Widget* Content);// 0x51da6f8

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	int Row;//[Offset: 0x38, Size: 0x4]
	int RowSpan;//[Offset: 0x3c, Size: 0x4]
	int Column;//[Offset: 0x40, Size: 0x4]
	int ColumnSpan;//[Offset: 0x44, Size: 0x4]
	int Layer;//[Offset: 0x48, Size: 0x4]
	Vector2D Nudge;//[Offset: 0x4c, Size: 0x8]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x51db080
	void SetRowSpan(int InRowSpan);// 0x51db008
	void SetRow(int InRow);// 0x51daf90
	void SetPadding(Margin InPadding);// 0x51daf08
	void SetLayer(int InLayer);// 0x51dae90
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x51dae18
	void SetColumnSpan(int InColumnSpan);// 0x51dada0
	void SetColumn(int InColumn);// 0x51dad28

--------------------------------
Class: ActorRenderCaptureTask_C.ObjectInOuterWorld.Object
	Actor* RootActorToCapture;//[Offset: 0x1c, Size: 0x4]
	Actor*[] AllActorsToCapture;//[Offset: 0x20, Size: 0xc]
	SceneCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x2c, Size: 0x4]
	Actor* LightActor;//[Offset: 0x30, Size: 0x4]
	TextureRenderTarget2D* TargetTexture;//[Offset: 0x34, Size: 0x4]
	TimerHandle FirstCaptureDelayTimerHandle;//[Offset: 0x38, Size: 0x8]
	Texture2D*[] UsedTextures;//[Offset: 0x40, Size: 0xc]
	Texture2D* CurrentTexture;//[Offset: 0x4c, Size: 0x4]
	int[] PrevResidentMips;//[Offset: 0x50, Size: 0xc]
	TimerHandle CheckStreamingStateTimerHandle;//[Offset: 0x60, Size: 0x8]
	bool bShouldCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bShouldWaitMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	delegate CaptureTaskEvent;//[Offset: 0x6c, Size: 0xc]
	Vector RelativePosition;//[Offset: 0x78, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x84, Size: 0xc]
	Rotator SceneCaptureRotation;//[Offset: 0x90, Size: 0xc]
	int DesiredMips;//[Offset: 0x9c, Size: 0x4]
	int CurrentTextureDesiredMips;//[Offset: 0xa0, Size: 0x4]
	float StartCaptureTime;//[Offset: 0xa4, Size: 0x4]
	float CaptureTimeout;//[Offset: 0xa8, Size: 0x4]
	int Temp_int_Array_Index_Variable;//[Offset: 0xac, Size: 0x4]
	int Temp_int_Array_Index_Variable1;//[Offset: 0xb0, Size: 0x4]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xb4, Size: 0x4]
	int Temp_int_Array_Index_Variable2;//[Offset: 0xb8, Size: 0x4]
	Actor* CallFunc_Array_Get_Item;//[Offset: 0xbc, Size: 0x4]
	Texture2D* CallFunc_Array_Get_Item1;//[Offset: 0xc0, Size: 0x4]
	int Temp_int_Loop_Counter_Variable1;//[Offset: 0xc4, Size: 0x4]
	Texture2D* CallFunc_Array_Get_Item2;//[Offset: 0xc8, Size: 0x4]
	int CallFunc_Array_Get_Item3;//[Offset: 0xcc, Size: 0x4]
	int Temp_int_Loop_Counter_Variable2;//[Offset: 0xd0, Size: 0x4]
	int CallFunc_GetNumResidentMips_ReturnValue;//[Offset: 0xd4, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0xd8, Size: 0x10]
	int CallFunc_GetNumResidentMips_ReturnValue1;//[Offset: 0xe8, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0xf0, Size: 0x10]
	void CaptureTaskEvent__DelegateSignature(ActorRenderCaptureTask_C* bpp__Task__pf, enum bpp__Status__pf);// 0x4528238
	void StartCapture();// 0x36fccd4
	void SetupActorAndAttachmentsForCapture();// 0x3e3f120
	void PerformCapture();// 0x3e3f104
	void FirstCapture();// 0x36fd75c
	void Finish();// 0x3e3f0e8
	void Execute(Actor* bpp__RootActorToCapture__pf, SceneCaptureComponent2D* bpp__SceneCaptureComponent__pf, TextureRenderTarget2D* bpp__TargetTexture__pf, Actor* bpp__LightActor__pf);// 0x3e3ef98
	void Cleanup();// 0x3e3ef7c
	void CheckStreamingState();// 0x36fd5d0
	void CalculateSceneCaptureRotation();// 0x3e3ef60
	void CalculateRelativePositionAndRotation();// 0x3e3ef44
	void Abort();// 0x3e3ef28

--------------------------------
Class: ObjectInOuterWorld.Object

--------------------------------
Class: OfflinePlayerProfile.Object
	<FName,PlayerProfileCurrency*> Currencies;//[Offset: 0x24, Size: 0x3c]
	<FName,PlayerProfileItemType*> ItemTypesMap;//[Offset: 0x60, Size: 0x3c]
	<FName,PlayerProfileStoreItem*> StoreItemsMap;//[Offset: 0x9c, Size: 0x3c]
	PlayerProfileStoreItem*[] RootStoreItems;//[Offset: 0xd8, Size: 0xc]

--------------------------------
Class: WidgetActor_Item_C.WidgetActor_C.Actor.Object
	BoxLayoutComponent* ParametersLayout;//[Offset: 0x2b8, Size: 0x4]
	WidgetComponent_Panel_C* WeaponSummaryWidgetComponent;//[Offset: 0x2bc, Size: 0x4]
	WidgetComponent_Panel_C* ItemTitleWidgetComponent;//[Offset: 0x2c0, Size: 0x4]
	WidgetComponent_Button_C* ItemActionDeclineButtonWidgetComponent;//[Offset: 0x2c4, Size: 0x4]
	WidgetComponent_Button_C* ItemActionConfirmButtonWidgetComponent;//[Offset: 0x2c8, Size: 0x4]
	WidgetComponent_Panel_C* ItemActionConfirmationPanelWidgetComponent;//[Offset: 0x2cc, Size: 0x4]
	BoxLayoutComponent* ItemActionConfirmationHorizontalLayout;//[Offset: 0x2d0, Size: 0x4]
	WidgetComponent_Button_C* BackButtonWidgetComponent;//[Offset: 0x2d4, Size: 0x4]
	WidgetComponent_WithEffects_C* UpgradePriceWidgetComponent;//[Offset: 0x2d8, Size: 0x4]
	WidgetComponent_WithEffects_C* UpgradeSummaryWidgetComponent;//[Offset: 0x2dc, Size: 0x4]
	WidgetComponent_WithEffects_C* WaitingWidgetComponent;//[Offset: 0x2e0, Size: 0x4]
	BoxLayoutComponent* VerticalLayout;//[Offset: 0x2e4, Size: 0x4]
	BoxLayoutComponent* OuterVerticalLayout;//[Offset: 0x2e8, Size: 0x4]
	WidgetComponent_ItemSlotFilter_C* WeaponsFilterWidgetComponent;//[Offset: 0x2ec, Size: 0x4]
	WidgetComponent_Button_C* RemoveButtonWidgetComponent;//[Offset: 0x2f0, Size: 0x4]
	WidgetComponent_Button_C* ReplaceButtonWidgetComponent;//[Offset: 0x2f4, Size: 0x4]
	WidgetComponent_Button_C* UpgradeButtonWidgetComponent;//[Offset: 0x2f8, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* EquipButtonWidgetComponent;//[Offset: 0x2fc, Size: 0x4]
	WidgetComponent_WithEffects_C* ItemPriceWidgetComponent;//[Offset: 0x300, Size: 0x4]
	BoxLayoutComponent* ActionButtonsLayout;//[Offset: 0x304, Size: 0x4]
	BoxLayoutComponent* SlotsLayout;//[Offset: 0x308, Size: 0x4]
	BoxLayoutComponent* SlotFiltersLayout;//[Offset: 0x30c, Size: 0x4]
	WidgetComponent_WithEffects_C* DescriptionWidgetComponent;//[Offset: 0x310, Size: 0x4]
	BoxLayoutComponent* HorizontalLayout;//[Offset: 0x314, Size: 0x4]
	BoxLayoutComponent* TopHorizontalLayout;//[Offset: 0x318, Size: 0x4]
	WidgetComponent_ItemSlotFilter_C* ElectronicsFilterWidgetComponent;//[Offset: 0x31c, Size: 0x4]
	WidgetComponent_ItemSlotFilter_C* MobilityFilterWidgetComponent;//[Offset: 0x320, Size: 0x4]
	WidgetComponent_ItemSlotFilter_C* ArmorFilterWidgetComponent;//[Offset: 0x324, Size: 0x4]
	BoxLayoutComponent* RightVerticalLayout;//[Offset: 0x328, Size: 0x4]
	BoxLayoutComponent* LeftVerticalLayout;//[Offset: 0x32c, Size: 0x4]
	AnchorsLayoutComponent* AnchorsLayout;//[Offset: 0x330, Size: 0x4]
	AnchorsLayoutSlotAttributes RegularAnchorsLayoutAttributes;//[Offset: 0x334, Size: 0x3c]
	AnchorsLayoutSlotAttributes EquippingAnchorsLayoutAttributes;//[Offset: 0x370, Size: 0x3c]
	BoxLayoutSlotAttributes ParametersWidgetsSlotAttributes;//[Offset: 0x3ac, Size: 0x24]
	GarageController_C* GarageController;//[Offset: 0x3d0, Size: 0x4]
	PlayerProfileItem* ViewItem;//[Offset: 0x3d4, Size: 0x4]
	PlayerProfileItem* ViewItemParent;//[Offset: 0x3d8, Size: 0x4]
	PlayerProfileItem* SelectedItem;//[Offset: 0x3dc, Size: 0x4]
	PlayerProfileItem* ParentItem;//[Offset: 0x3e0, Size: 0x4]
	int SlotIndex;//[Offset: 0x3e4, Size: 0x4]
	PlayerProfileStoreItem* TierUpgradeItem;//[Offset: 0x3e8, Size: 0x4]
	Actor* TierUpgradeActor;//[Offset: 0x3ec, Size: 0x4]
	WidgetComponent_ItemEquippedSlot_C* SelectedSlotWidgetComponent;//[Offset: 0x3f0, Size: 0x4]
	WidgetComponent_ItemSlotFilter_C* SelectedSlotFilterWidgetComponent;//[Offset: 0x3f4, Size: 0x4]
	OnlineServiceRequestPtr TierUpgradeItemRequest;//[Offset: 0x3f8, Size: 0x4]
	UIParameter[] ItemParams;//[Offset: 0x3fc, Size: 0xc]
	UIParameter[] SlotParams;//[Offset: 0x408, Size: 0xc]
	PlayerProfileSlotCompatibility SlotsFilter;//[Offset: 0x414, Size: 0xc]
	BoxLayoutSlotAttributes SlotWidgetsLayoutAttributes;//[Offset: 0x420, Size: 0x24]
	BoxLayoutSlotAttributes TierLockedSlotWidgetsLayoutAttributes;//[Offset: 0x444, Size: 0x24]
	AnchorsLayoutSlotAttributes ErrorWidgetLayoutAttributes;//[Offset: 0x468, Size: 0x3c]
	BoxLayoutSlotAttributes InsufficientFundsWidgetLayoutAttributes;//[Offset: 0x4a4, Size: 0x24]
	LinearColor RegularTintColorAndOpacity;//[Offset: 0x4c8, Size: 0x10]
	LinearColor BackgroundTintColorAndOpacity;//[Offset: 0x4d8, Size: 0x10]
	Vector BackgroundOffset;//[Offset: 0x4e8, Size: 0xc]
	Vector ForegroundOffset;//[Offset: 0x4f4, Size: 0xc]
	Vector SlotFilterSelectedOffset;//[Offset: 0x500, Size: 0xc]
	float FixedHeightForParameters;//[Offset: 0x50c, Size: 0x4]
	float WeaponSummaryHeight;//[Offset: 0x510, Size: 0x4]
	PlayerProfileSlotCompatibility SelectedItemCompatibility;//[Offset: 0x514, Size: 0xc]
	float OccupiedSquadSpace;//[Offset: 0x520, Size: 0x4]
	float FreeSquadSpace;//[Offset: 0x524, Size: 0x4]
	FName TierUpgradeDiscountAttributeName;//[Offset: 0x528, Size: 0x8]
	int ReplaceButtonContentVariant;//[Offset: 0x530, Size: 0x4]
	bool bIsInBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	WidgetComponent_ButtonDelegate_C* ErrorWidgetComponent;//[Offset: 0x538, Size: 0x4]
	bool bBoundToGarageOperationComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 0x1]
	bool bIsParenItemOrSlotIndexChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 0x1]
	bool bIsUpgradeItemSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 0x1]
	bool bIsDemoItemSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53f, Size: 0x1]
	bool bIsTierUpgradeItemSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	bool bIsItemToEquipSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1]
	bool bItemHasOccupiedSpaceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x542, Size: 0x1]
	bool bTierUpgradeItemReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x543, Size: 0x1]
	delegate OnBackAction;//[Offset: 0x544, Size: 0xc]
	bool bIsWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bCloseCleanupInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	WidgetComponent_WithEffects_C* InsufficientFundsWidgetComponent;//[Offset: 0x554, Size: 0x4]
	float DesiredOuterPadding;//[Offset: 0x558, Size: 0x4]
	float MaxParameterHeight;//[Offset: 0x55c, Size: 0x4]
	float LayoutWidth;//[Offset: 0x560, Size: 0x4]
	float FittingScale;//[Offset: 0x564, Size: 0x4]
	bool bIsRegularLayoutSetted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	bool bIsEquippingLayoutSetted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1]
	WidgetActor_ItemSlotsFootnotes_C* SlotFootnotesActor;//[Offset: 0x56c, Size: 0x4]
	WidgetComponent_ItemEquippedSlot_C*[] EquippedUpgradeSlotWidgets;//[Offset: 0x570, Size: 0xc]
	WidgetComponent_ItemWeaponSlot_C*[] WeaponSlotWidgets;//[Offset: 0x57c, Size: 0xc]
	WidgetComponent_ItemSlot_C*[] EmptyUpgradeSlotWidgets;//[Offset: 0x588, Size: 0xc]
	WidgetComponent_WithEffects_C*[] TierLockedUpgradeSlotWidgets;//[Offset: 0x594, Size: 0xc]
	int NumUsedEquippedUpgradeSlotWidgets;//[Offset: 0x5a0, Size: 0x4]
	int NumUsedWeaponSlotWidgets;//[Offset: 0x5a4, Size: 0x4]
	int NumUsedEmptyUpgradeSlotWidgets;//[Offset: 0x5a8, Size: 0x4]
	int NumUsedTierLockedUpgradeSlotWidgets;//[Offset: 0x5ac, Size: 0x4]
	WidgetComponent_ItemParameter_C*[] ParameterWidgets;//[Offset: 0x5b0, Size: 0xc]
	int NumUsedParameterWidgets;//[Offset: 0x5bc, Size: 0x4]
	int LastNumUpgradeSlotWidgets;//[Offset: 0x5c0, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5c8, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x5d8, Size: 0x10]
	bool CallFunc_IsOpen_IsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x5f0, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent18;//[Offset: 0x600, Size: 0x4]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x604, Size: 0x4]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component;//[Offset: 0x608, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1]
	interface class FloatProperty* CallFunc_AddAnchorsLayoutChild_Child_CastInput;//[Offset: 0x610, Size: 0x8]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x618, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x61d, Size: 0x1]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent17;//[Offset: 0x620, Size: 0x4]
	WidgetComponent_ItemWeaponSlot_C* K2Node_DynamicCast_AsWidget_Component_Item_Weapon_Slot;//[Offset: 0x624, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	WidgetComponent_ItemWeaponSlot_C* K2Node_CustomEvent_WidgetComponent16;//[Offset: 0x62c, Size: 0x4]
	interface class FloatProperty* CallFunc_AddBoxLayoutChild_Child_CastInput;//[Offset: 0x630, Size: 0x8]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent15;//[Offset: 0x638, Size: 0x4]
	WidgetComponent_ItemSlot_C* K2Node_DynamicCast_AsWidget_Component_Item_Slot;//[Offset: 0x63c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]
	WidgetComponent_ItemSlot_C* K2Node_CustomEvent_WidgetComponent14;//[Offset: 0x644, Size: 0x4]
	WidgetComponent_ItemEquippedSlot_C* K2Node_CustomEvent_WidgetComponent13;//[Offset: 0x648, Size: 0x4]
	interface class FloatProperty* CallFunc_AddBoxLayoutChild_Child1_CastInput;//[Offset: 0x64c, Size: 0x8]
	int CallFunc_GetLayoutParentAndSlotIndex_OutSlotIndex;//[Offset: 0x654, Size: 0x4]
	interface class DoubleProperty* CallFunc_AddBoxLayoutChild_Child2_CastInput;//[Offset: 0x658, Size: 0x8]
	int CallFunc_GetLayoutParentAndSlotIndex_OutSlotIndex1;//[Offset: 0x660, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x668, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent12;//[Offset: 0x678, Size: 0x4]
	UserWidget* CallFunc_GetContentWidget_Widget;//[Offset: 0x67c, Size: 0x4]
	Widget_ItemTitle_C* K2Node_DynamicCast_AsWidget_Item_Title;//[Offset: 0x680, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1]
	int Temp_int_EndIndex_Variable;//[Offset: 0x688, Size: 0x4]
	Transform Temp_struct_Variable;//[Offset: 0x690, Size: 0x30]
	Widget_ItemEquipButton_C* K2Node_DynamicCast_AsWidget_Item_Equip_Button;//[Offset: 0x6c0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 0x1]
	Widget_ItemDescription_C* K2Node_DynamicCast_AsWidget_Item_Description;//[Offset: 0x6c8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 0x1]
	UserWidget* CallFunc_GetContentWidget_Widget1;//[Offset: 0x6d0, Size: 0x4]
	Widget_WeaponSummary_C* K2Node_DynamicCast_AsWidget_Weapon_Summary;//[Offset: 0x6d4, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1]
	float CallFunc_UpdateContent_DesiredHeight;//[Offset: 0x6dc, Size: 0x4]
	GarageController_C* K2Node_CustomEvent_GarageController1;//[Offset: 0x6e0, Size: 0x4]
	int CallFunc_GetItemOrTypeAttributeAsInteger_OutValue;//[Offset: 0x6e4, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0x6e8, Size: 0x10]
	Matrix CallFunc_ComputeViewProjectionMatrixForCurrentProjection_ReturnValue;//[Offset: 0x700, Size: 0x40]
	delegate K2Node_CreateDelegate_OutputDelegate5;//[Offset: 0x740, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate6;//[Offset: 0x750, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent11;//[Offset: 0x760, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent10;//[Offset: 0x764, Size: 0x4]
	int CallFunc_GetLayoutParentAndSlotIndex_OutSlotIndex2;//[Offset: 0x768, Size: 0x4]
	PlayerProfilePurchasedItem* K2Node_DynamicCast_AsPlayer_Profile_Purchased_Item;//[Offset: 0x76c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate7;//[Offset: 0x778, Size: 0x10]
	PlayerProfilePurchasedItem* K2Node_DynamicCast_AsPlayer_Profile_Purchased_Item1;//[Offset: 0x788, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 0x1]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility;//[Offset: 0x790, Size: 0xc]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility1;//[Offset: 0x79c, Size: 0xc]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent9;//[Offset: 0x7a8, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate8;//[Offset: 0x7b0, Size: 0x10]
	int Temp_int_Index_Variable;//[Offset: 0x7c0, Size: 0x4]
	interface class FloatProperty* CallFunc_GetChildAt_ReturnValue;//[Offset: 0x7c4, Size: 0x8]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility2;//[Offset: 0x7cc, Size: 0xc]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent8;//[Offset: 0x7d8, Size: 0x4]
	interface class FloatProperty* CallFunc_AddAnchorsLayoutChild_Child1_CastInput;//[Offset: 0x7dc, Size: 0x8]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility3;//[Offset: 0x7e4, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate9;//[Offset: 0x7f0, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate10;//[Offset: 0x800, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate11;//[Offset: 0x810, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate12;//[Offset: 0x820, Size: 0x10]
	enum K2Node_CustomEvent_Operation;//[Offset: 0x830, Size: 0x1]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request1;//[Offset: 0x834, Size: 0x4]
	byte K2Node_CustomEvent_Status1;//[Offset: 0x838, Size: 0x1]
	FString K2Node_CustomEvent_ErrorStr;//[Offset: 0x83c, Size: 0xc]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x848, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent7;//[Offset: 0x84c, Size: 0x4]
	OnlineServiceRequestPtr K2Node_MakeStruct_OnlineServiceRequestPtr;//[Offset: 0x850, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent6;//[Offset: 0x854, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent5;//[Offset: 0x858, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate13;//[Offset: 0x860, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent4;//[Offset: 0x870, Size: 0x4]
	OnlineServiceRequestPtr K2Node_MakeStruct_OnlineServiceRequestPtr1;//[Offset: 0x874, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate14;//[Offset: 0x878, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent3;//[Offset: 0x888, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent2;//[Offset: 0x88c, Size: 0x4]
	PlayerProfilePurchasedItem* K2Node_DynamicCast_AsPlayer_Profile_Purchased_Item2;//[Offset: 0x890, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess10;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 0x1]
	PlayerProfileStoreItem* K2Node_DynamicCast_AsPlayer_Profile_Store_Item;//[Offset: 0x898, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess11;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 0x1]
	int CallFunc_GetTierUpgradePrice_Price;//[Offset: 0x8a0, Size: 0x4]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x8a4, Size: 0x28]
	delegate K2Node_CreateDelegate_OutputDelegate15;//[Offset: 0x8d0, Size: 0x10]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData1;//[Offset: 0x8e0, Size: 0x28]
	int CallFunc_GetItemOrTypeAttributeAsInteger_OutValue1;//[Offset: 0x908, Size: 0x4]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData2;//[Offset: 0x90c, Size: 0x28]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData3;//[Offset: 0x934, Size: 0x28]
	FormatArgumentData[] K2Node_MakeArray_Array;//[Offset: 0x95c, Size: 0xc]
	FormatArgumentData[] K2Node_MakeArray_Array1;//[Offset: 0x968, Size: 0xc]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility4;//[Offset: 0x974, Size: 0xc]
	PlayerProfilePurchasedItem* K2Node_DynamicCast_AsPlayer_Profile_Purchased_Item3;//[Offset: 0x980, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess12;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x984, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate16;//[Offset: 0x988, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate17;//[Offset: 0x998, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent1;//[Offset: 0x9a8, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate18;//[Offset: 0x9b0, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate19;//[Offset: 0x9c0, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate20;//[Offset: 0x9d0, Size: 0x10]
	PlayerProfileStoreItem*[] K2Node_CustomEvent_Items;//[Offset: 0x9e0, Size: 0xc]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request;//[Offset: 0x9ec, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0x9f0, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0x9fc, Size: 0x1]
	PlayerProfileStoreItem* CallFunc_Array_Get_Item;//[Offset: 0xa00, Size: 0x4]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility5;//[Offset: 0xa04, Size: 0xc]
	delegate K2Node_CreateDelegate_OutputDelegate21;//[Offset: 0xa10, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate22;//[Offset: 0xa20, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate23;//[Offset: 0xa30, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate24;//[Offset: 0xa40, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_CustomEvent_WidgetComponent;//[Offset: 0xa50, Size: 0x4]
	Transform CallFunc_GetPostLayoutTransform_ReturnValue;//[Offset: 0xa60, Size: 0x30]
	Vector CallFunc_GetComponentSize_ReturnValue;//[Offset: 0xa90, Size: 0xc]
	float CallFunc_BreakVector_X;//[Offset: 0xa9c, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0xaa0, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0xaa4, Size: 0x4]
	Vector CallFunc_GetLinearSize_ReturnValue;//[Offset: 0xaa8, Size: 0xc]
	float CallFunc_BreakVector_X1;//[Offset: 0xab4, Size: 0x4]
	float CallFunc_BreakVector_Y1;//[Offset: 0xab8, Size: 0x4]
	float CallFunc_BreakVector_Z1;//[Offset: 0xabc, Size: 0x4]
	int CallFunc_GetLayoutParentAndSlotIndex_OutSlotIndex3;//[Offset: 0xac0, Size: 0x4]
	Vector4 CallFunc_ProjectWorldToViewport_ViewportPosition;//[Offset: 0xad0, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate25;//[Offset: 0xae0, Size: 0x10]
	WidgetsLayoutComponent* K2Node_CustomEvent_WidgetsLayoutComponent;//[Offset: 0xaf0, Size: 0x4]
	void OnWidgetClicked__DelegateSignature(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4528238
	void OnStateChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnOperationComplete__DelegateSignature(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf, GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnBackAction__DelegateSignature();// 0x4528238
	void WaitOperationComplete();// 0x3eaf7c0
	void UpdateWidgetsFitting();// 0x3e7f44c
	void UpdateWeaponSlotFootnotesVisibility();// 0x3e46fcc
	void UpdateTierUpgradeWidgets();// 0x3e47020
	void UpdateSquadSpaceInfo();// 0x3e61c30
	void UpdateSlotWidgetSelectedState(Object* bpp__WidgetComponentObject__pf, bool bpp__bIsWidgetClicked__pf);// 0x4012104
	void UpdateSlotFilters();// 0x3ea5c10
	void UpdateRootDesiredSize();// 0x3e470f4
	void UpdateReplaceButton();// 0x3e47f9c
	void UpdatePriceWidget();// 0x3eaf300
	void UpdateParentAndSlotIndex();// 0x3e47998
	void UpdateParametersWidgets(out UIParameter[] bpp__NewParam__pf);// 0x4011f48
	void UpdateItemParameters();// 0x3e7f0e4
	void UnbindFromOperationComplete();// 0x400c47c
	void UnbindFromGarageStateChanged();// 0x3e57b04
	void TierUpgradeItemsReceived(out const PlayerProfileStoreItem*[] bpp__Items__pf__const, OnlineServiceRequestPtr bpp__Request__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x4011d4c
	void TierUpgradeDeclined();// 0x37cd4a8
	void TierUpgradeDeclineButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3f16e20
	void TierUpgradeConfirmed();// 0x37cd4c4
	void TierUpgradeConfirmButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3eb03a8
	void TierUpgradeButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4011ccc
	void SpawnTierUpgradeActor(PlayerProfileItem* bpp__InTierUpgradeItem__pf, PlayerProfileItem* bpp__InSrcItem__pf);// 0x3eb087c
	void SlotTierUpgradeItemChanged(WidgetComponent_ItemEquippedSlot_C* bpp__SlotWidgetComponent__pf);// 0x4011c4c
	void ShowWeaponsFootnotes();// 0x3e48c94
	void ShowTierUpgradeConfirmation();// 0x3e98664
	void ShowParametersDiff(Object* bpp__DiffObject__pf);// 0x4011bcc
	void ShowInsufficientFundsWidget();// 0x3e7eb1c
	void ShowError();// 0x3ea6308
	void SetupEquipConfirmation();// 0x3e47110
	void SetSlotWidgetsCanBeDimmed(bool bpp__bCanBeDimmed__pf);// 0x4011b44
	void SetSlotFilterWidgetsCanBeDimmed(bool bpp__bCanBeDimmed__pf);// 0x4011abc
	void SetSlotFilterSelectedState(WidgetComponent_ItemSlotFilter_C* bpp__WidgetComponent__pf, bool bpp__bIsSelected__pf);// 0x40119f0
	void SetSlotFilter(PlayerProfileSlotCompatibility bpp__NewSlotFilter__pf);// 0x4011968
	void SetRootLayoutAttributes(out AnchorsLayoutSlotAttributes bpp__LayoutAttributes__pf);// 0x40118b8
	void SetConfirmationText(out const FText bpp__InText__pf__const);// 0x40117a4
	void SelectSlotFilterWithCompatibilityMask(int bpp__CompatibilityMask__pf);// 0x4011724
	void SelectedSlotChanged();// 0x3e61e60
	void RetainWeaponSlotWidget(int bpp__SlotIndex__pf, out WidgetComponent_ItemWeaponSlot_C* bpp__Result__pf);// 0x4011650
	void RetainTierLockedUpgradeSlotWidget(int bpp__UnlockTier__pf, out WidgetComponent_WithEffects_C* bpp__Result__pf);// 0x401157c
	void RetainParameterWidget(FName bpp__Tag__pf, out WidgetComponent_ItemParameter_C* bpp__Result__pf);// 0x40114a0
	void RetainEquippedUpgradeSlotWidget(PlayerProfileItem* bpp__SlotItem__pf, int bpp__SlotIndex__pf, out WidgetComponent_ItemEquippedSlot_C* bpp__Result__pf);// 0x4011388
	void RetainEmptyUpgradeSlotWidget(int bpp__SlotIndex__pf, out WidgetComponent_ItemSlot_C* bpp__Result__pf);// 0x40112b4
	void RestoreToForeground();// 0x3e48720
	void ResetWidgetsFitting();// 0x3eb0b3c
	void ResetToRegularBackAction();// 0x3e72394
	void ResetTierUpgradeItemRequest();// 0x37ccd4c
	void ResetParametersHighlights();// 0x3e48adc
	void ReplaceButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6ad8
	void RemoveDeclined();// 0x3ef0f2c
	void RemoveDeclineButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea5a30
	void RemoveConfirmed();// 0x3ea6d2c
	void RemoveConfirmButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6cac
	void RemoveButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x37ccbbc
	void RegularBackAction();// 0x3e723e8
	void ReceiveTierUpgradeItem();// 0x4008904
	void ReceiveBeginPlay();// 0x3eaf370
	void OpenSetup();// 0x3ea6584
	void MoveToBackground();// 0x3e46e94
	void IsEngineeringPremiumValid(out bool bpp__bIsValid__pf);// 0x4011224
	void InitWidgets();// 0x4011208
	void InitTierUpgrade();// 0x3e95df4
	void InitSlotFilters();// 0x3ea6844
	void InitReplaceAction();// 0x3eaf3a8
	void InitRemoveAction();// 0x3ea6c10
	void InitLayoutEvents();// 0x34dae90
	void InitEquipAction();// 0x3ea5bf4
	void InitBackAction();// 0x3e721a8
	void HighlightParameters(out UIParameter[] bpp__HighlightedParams__pf);// 0x401104c
	void HideWeaponFootnotes();// 0x3e470bc
	void HideUnusedSlotsWidgets();// 0x3e9115c
	void HideUnusedParameterWidgets();// 0x3e910b0
	void HandleWeaponSlotClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4010fcc
	void HandleSlotFilterWidgetClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4010f4c
	void HandlePostLayout(WidgetsLayoutComponent* bpp__WidgetsLayoutComponent__pf);// 0x40084f8
	void HandleEquippedSlotWidgetClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x37cd3a8
	void HandleEmptySlotClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x4010ecc
	void GetTierUpgradePrice(out int bpp__Price__pf);// 0x4010e3c
	void GetStoreItemPrice(PlayerProfileStoreItem* bpp__StoreItem__pf, out int bpp__Price__pf);// 0x4010d68
	void GarageStateChanged(GarageController_C* bpp__GarageController__pf);// 0x4010ce8
	void GarageOperationComplete(enum bpp__Operation__pf, OnlineServiceRequestPtr bpp__Request__pf, byte bpp__Status__pf, FString bpp__ErrorStr__pf__const, GarageController_C* bpp__GarageController__pf);// 0x4010ad0
	void ErrorWidgetCloseButtonCkicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6c2c
	void EquipSlot(int bpp__InSlotIndex__pf);// 0x3f0c39c
	void EquipButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea5b74
	void EquipActionDeclined();// 0x3eb02d4
	void EquipActionDeclineButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6b90
	void EquipActionConfirmed();// 0x3ea6324
	void EquipActionConfirmButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3ea6340
	void CloseInsufficientFundsWidget();// 0x3e7eb00
	void CloseErrorWidget();// 0x372fbdc
	void CloseErrorAction();// 0x37ccc50
	void CloseConfirmationWidget();// 0x3e61c68
	void CloseCleanup();// 0x3ea6b58
	void ClearTierUpgradeItem();// 0x3e61f7c
	void ClearTierUpgradeActor();// 0x3e61b14
	void ClearSlotsWidgets();// 0x3ee915c
	void ClearSlotSelection();// 0x3eaf38c
	void ClearParametersWidgets();// 0x3ea6440
	void CleanupSlotWidgets();// 0x3e4797c
	void CleanupLayoutEvents();// 0x4009614
	void CancelWaitingOperationComplete();// 0x3ea6b74
	void BindToGarageStateChanged();// 0x3e57a0c
	void BindToGarageOperationComplete();// 0x3eaff64
	void BindBackActionToClearSlotSelection();// 0x3ea64cc
	void BackButtonClicked(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e977ec
	void AddWeaponSlotWidget(WidgetComponent_ItemWeaponSlot_C* bpp__WidgetComponent__pf);// 0x4010a50
	void AddTierLockedUpgradeSlotWidget(int bpp__UnlockTier__pf);// 0x40109d0
	void AddSlotsWidgets();// 0x3ea6d48
	void AddParameterWidget(out UIParameter bpp__Parameter__pf);// 0x4010840
	void AddParametersWidgets(out UIParameter[] bpp__Parameters__pf);// 0x4010684
	void AddEquippedSlotWidget(WidgetComponent_ItemEquippedSlot_C* bpp__WidgetComponent__pf);// 0x3e57750
	void AddEmptySlotWidget(WidgetComponent_ItemSlot_C* bpp__WidgetComponent__pf);// 0x4010604
	void WidgetsPostLayoutEvent__DelegateSignature(WidgetsLayoutComponent* bpp__WidgetsLayoutComponent__pf);// 0x4528238

--------------------------------
Class: WidgetComponent_ItemSlotFilter_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Icon;//[Offset: 0x8b8, Size: 0x4]
	PlayerProfileSlotCompatibility SlotCompatibilityFilter;//[Offset: 0x8bc, Size: 0xc]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1]
	Widget_ItemSlotFilter_C* K2Node_DynamicCast_AsWidget_Item_Slot_Filter;//[Offset: 0x8cc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 0x1]
	void SetSelectedState(bool bpp__bInIsSelected__pf);// 0x403aef4

--------------------------------
Class: Widget_ItemSlotFilter_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Button* Button;//[Offset: 0x1c0, Size: 0x4]
	FName SelectedColorName;//[Offset: 0x1c8, Size: 0x8]
	LinearColor SelectedColor;//[Offset: 0x1d0, Size: 0x10]
	FName RegularColorName;//[Offset: 0x1e0, Size: 0x8]
	LinearColor RegularColor;//[Offset: 0x1e8, Size: 0x10]
	LinearColor CallFunc_FindColor_OutColor;//[Offset: 0x1f8, Size: 0x10]
	LinearColor CallFunc_FindColor_OutColor1;//[Offset: 0x208, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_DynamicCast_AsWidget_Component_Button_Delegate;//[Offset: 0x218, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	void SetSelectedState(bool bpp__bIsSelected__pf);// 0x3fd1758

--------------------------------
Class: WidgetComponent_ItemEquippedSlot_C.WidgetComponent_ItemSlot_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PlayerProfileItem* SlotItem;//[Offset: 0x8c0, Size: 0x4]
	PlayerProfileItemType* SlotItemType;//[Offset: 0x8c4, Size: 0x4]
	PlayerProfileItemType* ParentItemType;//[Offset: 0x8c8, Size: 0x4]
	Vector SelectedOffset;//[Offset: 0x8cc, Size: 0xc]
	PlayerProfileStoreItem* TierUpgradeItem;//[Offset: 0x8d8, Size: 0x4]
	OnlineServiceRequestPtr TierUpgradeItemRequest;//[Offset: 0x8dc, Size: 0x4]
	bool bTierUpgradeItemReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e1, Size: 0x1]
	PlayerProfileStoreItem*[] K2Node_CustomEvent_Items;//[Offset: 0x8e4, Size: 0xc]
	OnlineServiceRequestPtr K2Node_CustomEvent_Request;//[Offset: 0x8f0, Size: 0x4]
	FString K2Node_CustomEvent_ErrorMsg;//[Offset: 0x8f4, Size: 0xc]
	byte K2Node_CustomEvent_Status;//[Offset: 0x900, Size: 0x1]
	PlayerProfileStoreItem* CallFunc_Array_Get_Item;//[Offset: 0x904, Size: 0x4]
	PlayerProfileSlotCompatibility K2Node_MakeStruct_PlayerProfileSlotCompatibility;//[Offset: 0x908, Size: 0xc]
	WidgetActor_Item_C* K2Node_DynamicCast_AsWidget_Actor_Item;//[Offset: 0x914, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]
	PlayerProfilePurchasedItem* K2Node_DynamicCast_AsPlayer_Profile_Purchased_Item;//[Offset: 0x91c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 0x1]
	Widget_ItemEquippedSlot_C* K2Node_DynamicCast_AsWidget_Item_Equipped_Slot;//[Offset: 0x924, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]
	PlayerProfileItem* K2Node_Event_NewParentItem;//[Offset: 0x92c, Size: 0x4]
	int K2Node_Event_NewSlotIndex;//[Offset: 0x930, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x938, Size: 0x10]
	void UpdateTierUpgradeWidget();// 0x3eb0844
	void UpdatePriceWidget();// 0x3e94afc
	void TierUpgradeItemsReceived(out const PlayerProfileStoreItem*[] bpp__Items__pf__const, OnlineServiceRequestPtr bpp__Request__pf, FString bpp__ErrorMsg__pf__const, byte bpp__Status__pf);// 0x4039c38
	void SetSlotItem(PlayerProfileItem* bpp__NewSlotItem__pf);// 0x4039bb8
	void SetSelectedState(bool bpp__bInIsSelected__pf);// 0x4039b30
	void ResetTierUpgradeItemRequest();// 0x3e94888
	void ReceiveTierUpgradeItem();// 0x3eaf2e4
	void ClearTierUpgradeItem();// 0x3eaf7a4

--------------------------------
Class: WidgetComponent_ItemSlot_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PlayerProfileItem* ParentItem;//[Offset: 0x8b8, Size: 0x4]
	int SlotIndex;//[Offset: 0x8bc, Size: 0x4]
	void UpdateContent();// 0x3e4cd4c
	void SetParentAndSlotIndex(PlayerProfileItem* bpp__NewParentItem__pf, int bpp__NewSlotIndex__pf);// 0x403aa6c
	void Cleanup();// 0x40334c4

--------------------------------
Class: Widget_ItemEquippedSlot_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Border* Background;//[Offset: 0x1c0, Size: 0x4]
	Image* Bar;//[Offset: 0x1c4, Size: 0x4]
	Border* Border;//[Offset: 0x1c8, Size: 0x4]
	Button* Button;//[Offset: 0x1cc, Size: 0x4]
	Border* ContentBorder;//[Offset: 0x1d0, Size: 0x4]
	Image* Icon;//[Offset: 0x1d4, Size: 0x4]
	TextBlock* SlotDescription;//[Offset: 0x1d8, Size: 0x4]
	TextBlock* SlotText;//[Offset: 0x1dc, Size: 0x4]
	VerticalBox* VerticalBox;//[Offset: 0x1e0, Size: 0x4]
	SlateBrush RegularItemBrush;//[Offset: 0x1e8, Size: 0x80]
	SlateBrush RareItemBrush;//[Offset: 0x268, Size: 0x80]
	SlateBrush LegendaryItemBrush;//[Offset: 0x2e8, Size: 0x80]
	WidgetAppearanceSettings RegularAppearance;//[Offset: 0x368, Size: 0x88]
	FName SelectedBackgroundColorName;//[Offset: 0x3f0, Size: 0x8]
	WidgetAppearanceSettings SelectedAppearance;//[Offset: 0x3f8, Size: 0x88]
	Widget_ItemUpgradePrice_C* TierUpgradeWidget;//[Offset: 0x480, Size: 0x4]
	Widget_ItemPrice_C* PriceWidget;//[Offset: 0x484, Size: 0x4]
	PlayerProfileItem* Item;//[Offset: 0x488, Size: 0x4]
	PlayerProfileItemType* ItemType;//[Offset: 0x48c, Size: 0x4]
	bool bDescriptionInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool bHasDescription;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 0x1]
	float BarCompensationPadding;//[Offset: 0x494, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_DynamicCast_AsWidget_Component_Button_Delegate;//[Offset: 0x498, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	LinearColor CallFunc_FindColor_OutColor;//[Offset: 0x4a0, Size: 0x10]
	void UpdateMaxHeight();// 0x3fc1cc8
	void UpdateContent(WidgetComponent_ItemEquippedSlot_C* bpp__SlotWidgetComponent__pf);// 0x3e5129c
	void ShowTierUpgradeWidget(PlayerProfileStoreItem* bpp__TierUpgradeItem__pf);// 0x3e7d8d4
	void ShowPriceWidget();// 0x3e5e93c
	void ShowDescription();// 0x3fc6210
	void ShowBar();// 0x3e51180
	void SetSelectedState(bool bpp__bIsSelected__pf);// 0x3fd3588
	void SetAppearance(out WidgetAppearanceSettings bpp__Appearance__pf);// 0x3fd3474
	void HideTierUpgradeWidget();// 0x3e326f4
	void HidePriceWidget();// 0x3e32860
	void HideBar();// 0x3fc61f4

--------------------------------
Class: WidgetAppearanceSettings
	LinearColor BackgroundColor_2_2894012DE84F015B841BEFB03C93F501;//[Offset: 0x0, Size: 0x10]
	LinearColor BorderColor_4_C2E8AFACD04A37A4946E68A93BF040F2;//[Offset: 0x10, Size: 0x10]
	LinearColor ContentColor_9_95A27D41A742FD2ADFDF4B8740F0B262;//[Offset: 0x20, Size: 0x10]
	LinearColor ShadowColor_8_4CE72BFFE548831AB24309B7CE527E03;//[Offset: 0x30, Size: 0x10]
	Vector2D ShadowOffset_12_F4126A34F44FF1A50A53D9B957C46EA8;//[Offset: 0x40, Size: 0x8]
	SlateFontInfo FontInfo_15_2865070B438A24A37CFE9293FB84F6CD;//[Offset: 0x48, Size: 0x40]

--------------------------------
Class: Widget_ItemUpgradePrice_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Overlay* DelPriceOverlay;//[Offset: 0x1c0, Size: 0x4]
	TextBlock* DelPriceText;//[Offset: 0x1c4, Size: 0x4]
	Button* EngineeringPremiumButton;//[Offset: 0x1c8, Size: 0x4]
	Border* EngineeringPremiumButtonShadowBorder;//[Offset: 0x1cc, Size: 0x4]
	Overlay* EngineeringServicePriceButtonOverlay;//[Offset: 0x1d0, Size: 0x4]
	VerticalBox* LabelAndPriceBox;//[Offset: 0x1d4, Size: 0x4]
	TextBlock* PriceLabel;//[Offset: 0x1d8, Size: 0x4]
	RichTextBlock* PriceWithDiscountRichText;//[Offset: 0x1dc, Size: 0x4]
	Image* UpgradeIcon;//[Offset: 0x1e0, Size: 0x4]
	RichTextBlock* UpgradePriceRichText;//[Offset: 0x1e4, Size: 0x4]
	FName TierUpgradeDiscountAttributeName;//[Offset: 0x1e8, Size: 0x8]
	LinearColor SelectedTextColor;//[Offset: 0x1f0, Size: 0x10]
	LinearColor SelectedShadowColor;//[Offset: 0x200, Size: 0x10]
	Vector2D SelectedShadowOffset;//[Offset: 0x210, Size: 0x8]
	LinearColor RegularTextColor;//[Offset: 0x218, Size: 0x10]
	LinearColor RegularShadowColor;//[Offset: 0x228, Size: 0x10]
	Vector2D RegularShadowOffset;//[Offset: 0x238, Size: 0x8]
	int Tier;//[Offset: 0x240, Size: 0x4]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD;//[Offset: 0x244, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	void UpdateContent(PlayerProfileStoreItem* bpp__TierUpgradeItem__pf);// 0x3e5ec58
	void SetSelectedState(bool bpp__bSelected__pf);// 0x3e5ecd8
	bool IsVipServiceValid();// 0x3fd7428
	void BndEvt__EngineeringServicePriceButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSig();// 0x3e32844

--------------------------------
Class: Widget_ItemPrice_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Border* ColorContainer;//[Offset: 0x1c0, Size: 0x4]
	Image* Icon;//[Offset: 0x1c4, Size: 0x4]
	TextBlock* PriceLabel;//[Offset: 0x1c8, Size: 0x4]
	RichTextBlock* PriceRichText;//[Offset: 0x1cc, Size: 0x4]
	LinearColor InAppColor;//[Offset: 0x1d0, Size: 0x10]
	LinearColor RegularColor;//[Offset: 0x1e0, Size: 0x10]
	LinearColor SelectedTextColor;//[Offset: 0x1f0, Size: 0x10]
	LinearColor SelectedShadowColor;//[Offset: 0x200, Size: 0x10]
	Vector2D SelectedShadowOffset;//[Offset: 0x210, Size: 0x8]
	LinearColor RegularTextColor;//[Offset: 0x218, Size: 0x10]
	LinearColor RegularShadowColor;//[Offset: 0x228, Size: 0x10]
	Vector2D RegularShadowOffset;//[Offset: 0x238, Size: 0x8]
	void UpdateContent(WidgetActor_Item_C* bpp__WidgetActor__pf);// 0x3e5129c
	void SetSelectedState(bool bpp__bSelected__pf);// 0x3fd3588

--------------------------------
Class: UIParameter
	FName Tag_19_667B933B254153A28274E7A53224F52C;//[Offset: 0x0, Size: 0x8]
	FText LocalizedName_3_0D68953A4FA3C9C13BAFEB82504275CA;//[Offset: 0x8, Size: 0xc]
	FText LocalizedUnitName_5_6B3FFE4F42B63F2B0378D7BAEA20CACD;//[Offset: 0x14, Size: 0xc]
	float BaseValue_15_ADA603E747F19A04604EAB8451091C15;//[Offset: 0x20, Size: 0x4]
	float CurrentValue_16_E1C462FE4AB14E86EBA8ED9F17E901D4;//[Offset: 0x24, Size: 0x4]
	float MinValue_13_4FAF277C430DA110106996909C45A244;//[Offset: 0x28, Size: 0x4]
	float MaxValue_12_331499F54FF6D7D33EE9B6AF69D9BB86;//[Offset: 0x2c, Size: 0x4]
	float PositiveMultiplier_22_429ACBB6483C66426139D5BFE65F1DB3;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: WidgetActor_ItemSlotsFootnotes_C.WidgetActor_C.Actor.Object
	ParticleSystemComponent* LinesParticleSystem;//[Offset: 0x2b8, Size: 0x4]
	PlayerProfileItem* Item;//[Offset: 0x2bc, Size: 0x4]
	float DefaultWidgetsInnerRadius;//[Offset: 0x2c0, Size: 0x4]
	WidgetComponent_ItemSlotFootnote_C*[] SlotWidgets;//[Offset: 0x2c4, Size: 0xc]
	Vector HorizScoreWeights;//[Offset: 0x2d0, Size: 0xc]
	Vector VertScoreWeights;//[Offset: 0x2dc, Size: 0xc]
	float WidgetsInnerRadius;//[Offset: 0x2e8, Size: 0x4]
	float VerticalRadiusScale;//[Offset: 0x2ec, Size: 0x4]
	float TopWidgetAngle;//[Offset: 0x2f0, Size: 0x4]
	float BottomWidgetAngle;//[Offset: 0x2f4, Size: 0x4]
	float WidgetScale;//[Offset: 0x2f8, Size: 0x4]
	SceneComponent* SocketsComponent;//[Offset: 0x2fc, Size: 0x4]
	Vector2D PreserveOrderWeights;//[Offset: 0x300, Size: 0x8]
	Transform CachedCameraTransform;//[Offset: 0x310, Size: 0x30]
	HitResult TraceHit;//[Offset: 0x340, Size: 0x88]
	float Alpha;//[Offset: 0x3c8, Size: 0x4]
	float TargetAlpha;//[Offset: 0x3cc, Size: 0x4]
	float MaxInterpSpeedToTargetPosition;//[Offset: 0x3d0, Size: 0x4]
	bool bNeedsUpdateWidgetTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	LocalPlayer* LocalPlayer;//[Offset: 0x3d8, Size: 0x4]
	GarageCamera_C* GarageCamera;//[Offset: 0x3dc, Size: 0x4]
	Vector4 ViewTargetBounds;//[Offset: 0x3e0, Size: 0x10]
	Vector ViewTargetPivot;//[Offset: 0x3f0, Size: 0xc]
	float ViewSidePerespectiveMultiplier;//[Offset: 0x3fc, Size: 0x4]
	bool bBoundToGarageStateChangedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	bool bPendingRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	float WidgetDrawScale;//[Offset: 0x404, Size: 0x4]
	Vector SlotsLocalSuperposition;//[Offset: 0x408, Size: 0xc]
	Vector CenterLocalOffset;//[Offset: 0x414, Size: 0xc]
	float MinLineLength;//[Offset: 0x420, Size: 0x4]
	float LineLengthRelativeDepthMultiplier;//[Offset: 0x424, Size: 0x4]
	Vector CachedCameraPosition;//[Offset: 0x428, Size: 0xc]
	Vector CachedCameraForward;//[Offset: 0x434, Size: 0xc]
	Vector CachedCameraRight;//[Offset: 0x440, Size: 0xc]
	GarageController_C* K2Node_CustomEvent_GarageController1;//[Offset: 0x44c, Size: 0x4]
	Actor* K2Node_DynamicCast_AsActor;//[Offset: 0x450, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x458, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x45d, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x45e, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45f, Size: 0x1]
	SceneComponent* CallFunc_GetSlotWidgetsLayout_SocketsComponent;//[Offset: 0x460, Size: 0x4]
	FName CallFunc_GetSlotWidgetsLayout_AttachSocketName;//[Offset: 0x468, Size: 0x8]
	Vector CallFunc_GetSlotWidgetsLayout_AttachLocalPosition;//[Offset: 0x470, Size: 0xc]
	Vector CallFunc_GetSlotWidgetsLayout_CenterLocalOffset;//[Offset: 0x47c, Size: 0xc]
	float CallFunc_GetSlotWidgetsLayout_InnerRadius;//[Offset: 0x488, Size: 0x4]
	float CallFunc_GetSlotWidgetsLayout_RadiusVerticalScale;//[Offset: 0x48c, Size: 0x4]
	float CallFunc_GetSlotWidgetsLayout_TopAngle;//[Offset: 0x490, Size: 0x4]
	float CallFunc_GetSlotWidgetsLayout_BottomAngle;//[Offset: 0x494, Size: 0x4]
	float CallFunc_GetSlotWidgetsLayout_AdditionalScale;//[Offset: 0x498, Size: 0x4]
	float CallFunc_GetSlotWidgetsLayout_MinLineLength;//[Offset: 0x49c, Size: 0x4]
	float CallFunc_GetSlotWidgetsLayout_LineLengthRelativeDepthMultiplier;//[Offset: 0x4a0, Size: 0x4]
	Vector2D[] CallFunc_GetSlotWidgetsLayout_SlotsAngleLimits;//[Offset: 0x4a4, Size: 0xc]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x4b0, Size: 0x4]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x4b4, Size: 0x4]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller1;//[Offset: 0x4b8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller2;//[Offset: 0x4c0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult;//[Offset: 0x4c8, Size: 0x88]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x550, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x560, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x570, Size: 0x10]
	float CallFunc_BreakVector2D_X;//[Offset: 0x580, Size: 0x4]
	float CallFunc_BreakVector2D_Y;//[Offset: 0x584, Size: 0x4]
	void OnStateChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void OnSlotFilterChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void UpdateWidgetsTransforms(float bpp__DeltaTime__pf);// 0x3eaef88
	void UpdateLinesTransform();// 0x37cd4c4
	void UnbindFromGarageStateChangedEvent();// 0x34d93fc
	void SortWidgets(int bpp__FirstIndex__pf, int bpp__LastIndex__pf, Vector2D bpp__ScoreMask__pf);// 0x4016a98
	void SlotFilterChanged(GarageController_C* bpp__GarageController__pf);// 0x37cc910
	void SetupCamera();// 0x3e95df4
	void ResetViewAdjustment();// 0x400bd70
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x3e98680
	void ReceiveBeginPlay();// 0x3e723cc
	void Rebuild();// 0x3e723b0
	void RearrangeWidgets();// 0x37ccd4c
	void PrepareViewAdjustment();// 0x3ea5bf4
	void GarageControllerStateChanged(GarageController_C* bpp__GarageController__pf);// 0x34d9418
	void FixWidgetOrderDueAngleLimits(int bpp__StartIndex__pf, int bpp__LastIndex__pf);// 0x40169d4
	void DeferredRebuild();// 0x4009614
	void CloseCleanup();// 0x3eb02d4
	void ClearItemAndFootnotes();// 0x3eb0b04
	void CleanupCamera();// 0x3ea6324
	void BuildWidgetList(out Vector2D[] bpp__SlotsAngleLimits__pf);// 0x401692c
	void BindToGarageStateChangedEvent();// 0x34dae90
	void ArrangeWidgets(int bpp__FirstIndex__pf, int bpp__LastIndex__pf, Vector bpp__CenterPosition__pf, Vector bpp__SideDirection__pf);// 0x40167dc
	void AdjustView();// 0x3e95dd8

--------------------------------
Class: WidgetComponent_ItemSlotFootnote_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FName SlotSocketName;//[Offset: 0x860, Size: 0x8]
	PrimitiveComponent* EquipmentVisualComponent;//[Offset: 0x868, Size: 0x4]
	Vector EquipmentLocalPosition;//[Offset: 0x86c, Size: 0xc]
	Vector SlotRelativePosition;//[Offset: 0x878, Size: 0xc]
	Vector SlotWorldPosition;//[Offset: 0x884, Size: 0xc]
	Vector TargetRelativePosition;//[Offset: 0x890, Size: 0xc]
	Vector InterpolatedRelativePosition;//[Offset: 0x89c, Size: 0xc]
	Vector ViewportSpaceVecFromCenterToSlot;//[Offset: 0x8a8, Size: 0xc]
	Vector RelativeLineEndPosition;//[Offset: 0x8b4, Size: 0xc]
	Vector InterpolatedRelativeLineEndPosition;//[Offset: 0x8c0, Size: 0xc]
	Vector2D Score;//[Offset: 0x8cc, Size: 0x8]
	Vector2D Order;//[Offset: 0x8d4, Size: 0x8]
	Vector2D MinMaxVerticalAngle;//[Offset: 0x8dc, Size: 0x8]
	PlayerProfileItem* K2Node_CustomEvent_ParentItem;//[Offset: 0x8e4, Size: 0x4]
	int K2Node_CustomEvent_SlotIndex;//[Offset: 0x8e8, Size: 0x4]
	Widget_SlotFootnote_C* K2Node_DynamicCast_AsWidget_Slot_Footnote;//[Offset: 0x8ec, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1]
	void SetGarageItemAndSlotIndex(PlayerProfileItem* bpp__ParentItem__pf, int bpp__SlotIndex__pf);// 0x403b37c

--------------------------------
Class: Widget_SlotFootnote_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Button* ActionButton;//[Offset: 0x1c0, Size: 0x4]
	HorizontalBox* ContentBox;//[Offset: 0x1c4, Size: 0x4]
	Image* LegendaryBadgeImage;//[Offset: 0x1c8, Size: 0x4]
	Image* RareBadgeImage;//[Offset: 0x1cc, Size: 0x4]
	TextBlock* SlotLabel;//[Offset: 0x1d0, Size: 0x4]
	TextBlock* SlotText;//[Offset: 0x1d4, Size: 0x4]
	ScaleBox* SlotTextBox;//[Offset: 0x1d8, Size: 0x4]
	VerticalBox* UniquenessMarkerBox;//[Offset: 0x1dc, Size: 0x4]
	PlayerProfileItem* ParentItem;//[Offset: 0x1e0, Size: 0x4]
	int SlotIndex;//[Offset: 0x1e4, Size: 0x4]
	PlayerProfileItem* SlotItem;//[Offset: 0x1e8, Size: 0x4]
	LinearColor EquipActionColor;//[Offset: 0x1ec, Size: 0x10]
	LinearColor NoEqupActionColor;//[Offset: 0x1fc, Size: 0x10]
	bool bContentUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 0x1]
	FText Temp_text_Variable;//[Offset: 0x210, Size: 0xc]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x21c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	FString CallFunc_GetPlayerProfileItemName_Name;//[Offset: 0x224, Size: 0xc]
	int CallFunc_GetItemOrTypeAttributeAsInteger_OutValue;//[Offset: 0x230, Size: 0x4]
	FText Temp_text_Variable1;//[Offset: 0x234, Size: 0xc]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller1;//[Offset: 0x240, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 0x1]
	FString CallFunc_GetSlotAttributeAsString_OutValue;//[Offset: 0x248, Size: 0xc]
	FText K2Node_Select_Default;//[Offset: 0x254, Size: 0xc]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x260, Size: 0x28]
	FormatArgumentData[] K2Node_MakeArray_Array;//[Offset: 0x288, Size: 0xc]
	void UpdateContent();// 0x3e32614
	void SetColor(LinearColor bpp__NewColor__pf);// 0x3ff60d0
	void PivotChanged();// 0x3e32940
	void BndEvt__ActionButton_K2Node_ComponentBoundEvent_56_OnButtonClickedEvent__DelegateSignature();// 0x3e32844

--------------------------------
Class: WidgetComponent_ItemWeaponSlot_C.WidgetComponent_ItemSlot_C.WidgetComponent_ButtonDelegate_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Widget_ItemWeaponSlot_C* K2Node_DynamicCast_AsWidget_Item_Weapon_Slot;//[Offset: 0x8c0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 0x1]

--------------------------------
Class: Widget_ItemWeaponSlot_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Button* Button;//[Offset: 0x1c0, Size: 0x4]
	Image* Icon;//[Offset: 0x1c4, Size: 0x4]
	TextBlock* SlotLabel;//[Offset: 0x1c8, Size: 0x4]
	TextBlock* SlotText;//[Offset: 0x1cc, Size: 0x4]
	LinearColor EquippedBackgroundColor;//[Offset: 0x1d0, Size: 0x10]
	LinearColor EmptyEquipActionBackgroundColor;//[Offset: 0x1e0, Size: 0x10]
	LinearColor EmptyNoActionBackgroundColor;//[Offset: 0x1f0, Size: 0x10]
	SlateBrush RegularItemBrush;//[Offset: 0x200, Size: 0x80]
	SlateBrush RareItemBrush;//[Offset: 0x280, Size: 0x80]
	SlateBrush LegendaryItemBrush;//[Offset: 0x300, Size: 0x80]
	SlateBrush EmptyNoActionSlotBrush;//[Offset: 0x380, Size: 0x80]
	SlateBrush EmptyEquipActionSlotBrush;//[Offset: 0x400, Size: 0x80]
	LinearColor EquippedSlotTextColor;//[Offset: 0x480, Size: 0x10]
	LinearColor EmptyNoActionSlotTextColor;//[Offset: 0x490, Size: 0x10]
	LinearColor EmptyEquipActionSlotTextColor;//[Offset: 0x4a0, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_DynamicCast_AsWidget_Component_Button_Delegate;//[Offset: 0x4b0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 0x1]
	void UpdateContent(WidgetComponent_ItemWeaponSlot_C* bpp__SlotWidgetComponent__pf);// 0x3e5129c

--------------------------------
Class: WidgetComponent_ItemParameter_C.WidgetComponent_WithEffects_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FName ParameterTag;//[Offset: 0x860, Size: 0x8]

--------------------------------
Class: Widget_ItemEquipButton_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	Button* BankButton;//[Offset: 0x1c0, Size: 0x4]
	Button* Button;//[Offset: 0x1c4, Size: 0x4]
	TextBlock* ButtonText;//[Offset: 0x1c8, Size: 0x4]
	TextBlock* ErrorText;//[Offset: 0x1cc, Size: 0x4]
	Image* Icon;//[Offset: 0x1d0, Size: 0x4]
	Image* IconShadow;//[Offset: 0x1d4, Size: 0x4]
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x1d8, Size: 0x4]
	FName ButtonBackgroundColorName;//[Offset: 0x1e0, Size: 0x8]
	int ContentVariant;//[Offset: 0x1e8, Size: 0x4]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD;//[Offset: 0x1ec, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	LinearColor CallFunc_FindColor_OutColor;//[Offset: 0x1f4, Size: 0x10]
	WidgetComponent_ButtonDelegate_C* K2Node_DynamicCast_AsWidget_Component_Button_Delegate;//[Offset: 0x204, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	void UpdateContent(WidgetActor_Item_C* bpp__WidgetActor__pf);// 0x3e5ec58
	void BndEvt__BankButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x3e32844

--------------------------------
Class: Widget_ItemDescription_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	TextBlock* BatlleBonusPersentText;//[Offset: 0x1c0, Size: 0x4]
	HorizontalBox* BattleBonusBox;//[Offset: 0x1c4, Size: 0x4]
	RichTextBlock* DescriptionText;//[Offset: 0x1c8, Size: 0x4]
	PlayerProfileItem* Item;//[Offset: 0x1cc, Size: 0x4]
	void UpdateContent();// 0x3e32614
	void SetItem(PlayerProfileItem* bpp__NewItem__pf);// 0x3e5129c

--------------------------------
Class: Widget_WeaponSummary_C.Widget_ComponentWidget_C.UserWidget.Widget.Visual.Object
	TextBlock* AmmoTypeText;//[Offset: 0x1c0, Size: 0x4]
	VerticalBox* ProjectileSpeedBox;//[Offset: 0x1c4, Size: 0x4]
	TextBlock* ProjectileSpeedText;//[Offset: 0x1c8, Size: 0x4]
	PlayerProfileItem* Item;//[Offset: 0x1cc, Size: 0x4]
	float DesiredHeight;//[Offset: 0x1d0, Size: 0x4]
	bool bManageWidgetComponentVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	void UpdateContentInternal();// 0x3e32614
	void UpdateContent(PlayerProfileItem* bpp__Item__pf, out float bpp__DesiredHeight__pf);// 0x40055d4
	void MultiplyShadowOffset(Vector2D bpp__OffsetMultipliers__pf);// 0x3fd6a90

--------------------------------
Class: OnlinePlayerProfileBattleMechs.OnlinePlayerProfileBattleDrive.Object

--------------------------------
Class: OnlinePlayerProfileBattleDrive.Object
	<FName,PlayerProfileCurrency*> Currencies;//[Offset: 0x24, Size: 0x3c]
	<FName,PlayerProfileItemType*> ItemTypesMap;//[Offset: 0x60, Size: 0x3c]
	PlayerProfileItem*[] ProcessingItems;//[Offset: 0x10c, Size: 0xc]

--------------------------------
Class: CameraManager_Garage_C.PlayerCameraManager.Actor.Object

--------------------------------
Class: WidgetActor_HangarSquad_C.WidgetActor_C.Actor.Object
	WidgetComponent_WithEffects_C* AddButtonWidgetComponent;//[Offset: 0x2b8, Size: 0x4]
	WidgetComponent_WithEffects_C* TitleWidgetComponent;//[Offset: 0x2bc, Size: 0x4]
	BoxLayoutComponent* VerticalLayout;//[Offset: 0x2c0, Size: 0x4]
	AnchorsLayoutSlotAttributes AnchorsLayoutAttributes;//[Offset: 0x2c4, Size: 0x3c]
	bool bWaitingGarageSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	AnchorsLayoutComponent* AnchorsLayoutParent;//[Offset: 0x304, Size: 0x4]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x308, Size: 0x4]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x30c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x318, Size: 0x10]
	interface class FloatProperty* CallFunc_AddAnchorsLayoutChild_Child_CastInput;//[Offset: 0x328, Size: 0x8]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller1;//[Offset: 0x330, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x338, Size: 0x4]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component;//[Offset: 0x33c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	WidgetsManagerHUD_C* K2Node_DynamicCast_AsWidgets_Manager_HUD;//[Offset: 0x344, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component1;//[Offset: 0x34c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	void OnStateChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void UpdateWidgetsContent(GarageController_C* bpp__GarageController__pf);// 0x3e98700
	void ReceiveBeginPlay();// 0x34dae90
	void GarageStateChanged(GarageController_C* bpp__GarageController__pf);// 0x40084f8

--------------------------------
Class: WidgetActor_BlackMarketInfo_C.WidgetActor_C.Actor.Object
	WidgetComponent_Button_C* RequestDeliveryButtonWidgetComponent;//[Offset: 0x2b8, Size: 0x4]
	WidgetComponent_RichText_C* RenewCountdownWidgetComponent;//[Offset: 0x2bc, Size: 0x4]
	WidgetComponent_Button_C* OpenBlackMarketButtonWidgetComponent;//[Offset: 0x2c0, Size: 0x4]
	BoxLayoutComponent* HorizontalLayout;//[Offset: 0x2c4, Size: 0x4]
	AnchorsLayoutSlotAttributes AnchorsLayoutAttributes;//[Offset: 0x2c8, Size: 0x3c]
	AnchorsLayoutComponent* AnchorsLayoutParent;//[Offset: 0x304, Size: 0x4]
	WidgetsLayoutComponent* K2Node_Event_LayoutParent;//[Offset: 0x308, Size: 0x4]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component;//[Offset: 0x30c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	WidgetsManagerHUD_C* K2Node_DynamicCast_AsWidgets_Manager_HUD;//[Offset: 0x314, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	interface class FloatProperty* CallFunc_AddAnchorsLayoutChild_Child_CastInput;//[Offset: 0x31c, Size: 0x8]
	AnchorsLayoutComponent* K2Node_DynamicCast_AsAnchors_Layout_Component1;//[Offset: 0x324, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent1;//[Offset: 0x32c, Size: 0x4]
	WidgetComponent_ButtonDelegate_C* K2Node_ComponentBoundEvent_WidgetComponent;//[Offset: 0x330, Size: 0x4]
	GarageHUD_C* K2Node_DynamicCast_AsGarage_HUD;//[Offset: 0x334, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	WidgetsManagerHUD_C* K2Node_DynamicCast_AsWidgets_Manager_HUD1;//[Offset: 0x33c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x344, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x350, Size: 0x10]
	float CallFunc_FMod_Remainder;//[Offset: 0x360, Size: 0x4]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x364, Size: 0x28]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData1;//[Offset: 0x38c, Size: 0x28]
	FormatArgumentData[] K2Node_MakeArray_Array;//[Offset: 0x3b4, Size: 0xc]
	void UpdateRenewCountdown();// 0x34dae90
	void SetupRenewTimer();// 0x3e723b0
	void ReceiveBeginPlay();// 0x34d93fc
	void BndEvt__RequestDeliveryWidgetComponent_K2Node_ComponentBoundEvent_1_OnWidgetClicked__DelegateSignatu(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x3e98700
	void BndEvt__OpenBlackMarketButtonWidgetComponent_K2Node_ComponentBoundEvent_0_OnWidgetClicked__DelegateS(WidgetComponent_ButtonDelegate_C* bpp__WidgetComponent__pf);// 0x37cc910

--------------------------------
Class: R2M3_C.Robot_C.BattlePawn.Pawn.Actor.Object
	CritExecutableDamageController_C* TowerRightDamageController;//[Offset: 0x5a8, Size: 0x4]
	CritExecutableDamageController_C* TowerLeftDamageController;//[Offset: 0x5ac, Size: 0x4]
	CritExecutableDamageController_C* TowerBackDamageController;//[Offset: 0x5b0, Size: 0x4]
	CritExecutableDamageController_C* TowerCenterDamageController;//[Offset: 0x5b4, Size: 0x4]
	CritExecutableDamageController_C* TowerFrontDamageController;//[Offset: 0x5b8, Size: 0x4]
	CritExecutableDamageController_C* BaseBackDamageController;//[Offset: 0x5bc, Size: 0x4]
	CritExecutableDamageController_C* BaseFrontDamageController;//[Offset: 0x5c0, Size: 0x4]
	ShapeDamageDispatcherComponent* ShapeDamageDispatcher;//[Offset: 0x5c4, Size: 0x4]
	SceneComponent* TargetPoint_Base;//[Offset: 0x5c8, Size: 0x4]
	WalkMovementControllerComponent_C* MovementController;//[Offset: 0x5cc, Size: 0x4]
	WalkMovementComponent* Movement;//[Offset: 0x5d0, Size: 0x4]
	AnimSyncAudioComponent* RunSound;//[Offset: 0x5d4, Size: 0x4]
	AnimSyncAudioComponent* WalkingSound;//[Offset: 0x5d8, Size: 0x4]
	SceneComponent* TargetPoint_Tower;//[Offset: 0x5dc, Size: 0x4]
	SceneComponent* TargetPoint_RightLeg;//[Offset: 0x5e0, Size: 0x4]
	SceneComponent* TargetPoint_LeftLeg;//[Offset: 0x5e4, Size: 0x4]
	CritExecutableDamageController_C* Leg1DamageController;//[Offset: 0x5e8, Size: 0x4]
	CritExecutableDamageController_C* Leg0DamageController;//[Offset: 0x5ec, Size: 0x4]
	CritExecutableDamageController_C* TowerDamageController;//[Offset: 0x5f0, Size: 0x4]
	AimBoneRotatorComponent* AimTowerRotation;//[Offset: 0x5f4, Size: 0x4]

--------------------------------
Class: Robot_C.BattlePawn.Pawn.Actor.Object
	PawnDeploymentComponent_C* PawnDeploymentComponent;//[Offset: 0x2f8, Size: 0x4]
	ActorRenderCaptureHelperComponent_C* ActorCaptureHelperComponent;//[Offset: 0x2fc, Size: 0x4]
	HpBasedEquipperComponent_C* ArmorEquipper;//[Offset: 0x300, Size: 0x4]
	FriendlyDamageConfiguratorComponent* FriendlyFireConfigurator;//[Offset: 0x304, Size: 0x4]
	RobotEmpDamageControllerComponent_C* RobotEMPDamageController;//[Offset: 0x308, Size: 0x4]
	CritExecutableDamageController_C* MainDamageController;//[Offset: 0x30c, Size: 0x4]
	ExtendedEquipmentControllerComponent_C* EquipmentController;//[Offset: 0x310, Size: 0x4]
	PhysicalAnimHitReactionComponent* PhysicalAnimHitReaction;//[Offset: 0x314, Size: 0x4]
	PhysicalAnimationComponent* PhysicalAnimation;//[Offset: 0x318, Size: 0x4]
	CollisionParamsComponent* CollisionParams;//[Offset: 0x31c, Size: 0x4]
	TargetPointsProviderComponent* TargetPointsProvider;//[Offset: 0x320, Size: 0x4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x324, Size: 0x4]
	AggregateCollisionComponent* RootAndCollision;//[Offset: 0x328, Size: 0x4]
	TargetProviderComponent* TargetProvider;//[Offset: 0x32c, Size: 0x4]
	TeamMemberComponent* TeamMember;//[Offset: 0x330, Size: 0x4]
	SlotDamageDispatcherComponent* SlotDamageDispatcher;//[Offset: 0x334, Size: 0x4]
	PawnAimComponent* Aiming;//[Offset: 0x338, Size: 0x4]
	int LocalPlayerTeamIndex;//[Offset: 0x33c, Size: 0x4]
	int TmpInt;//[Offset: 0x340, Size: 0x4]
	SlotViewSettings ViewSettings;//[Offset: 0x344, Size: 0x5c]
	SlotViewSettings[] SlotsViewSettings;//[Offset: 0x3a0, Size: 0xc]
	ChildSlotWidgetsLayoutCorrection[] ChildSlotWidgetLayoutCorrections;//[Offset: 0x3ac, Size: 0xc]
	float DelayAfterDestruction;//[Offset: 0x3b8, Size: 0x4]
	bool bFreezeAfterDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	float CurrentTime;//[Offset: 0x3c0, Size: 0x4]
	float TmpTimeLeft;//[Offset: 0x3c4, Size: 0x4]
	Vector GarageFootnotesCenterLocalOffset;//[Offset: 0x3c8, Size: 0xc]
	float GarageFootnotesInnerRadiusAddition;//[Offset: 0x3d4, Size: 0x4]
	ActorCameraParams[] CameraParamsArray;//[Offset: 0x3d8, Size: 0xc]
	ActorCameraParams DefaultCameraParams;//[Offset: 0x3e4, Size: 0x18]
	PlayerProfileItem* PlayerProfileItem;//[Offset: 0x3fc, Size: 0x4]
	float PlayerScoreFactor;//[Offset: 0x400, Size: 0x4]
	float TeamScoreFactor;//[Offset: 0x404, Size: 0x4]
	float RewardScoreBonusPercent;//[Offset: 0x408, Size: 0x4]
	FName ItemPlayerScoreFactorAttributeName;//[Offset: 0x410, Size: 0x8]
	FName ItemTeamScoreFactorAttributeName;//[Offset: 0x418, Size: 0x8]
	float GarageFootnotesInnerRadiusVertBoundsScale;//[Offset: 0x420, Size: 0x4]
	float GarageFootnotesInnerRadiusHorizBoundsScale;//[Offset: 0x424, Size: 0x4]
	float GarageFootnotesTopAngle;//[Offset: 0x428, Size: 0x4]
	WalkMovementComponent* WalkMovement;//[Offset: 0x42c, Size: 0x4]
	float GarageFootnotesBottomAngle;//[Offset: 0x430, Size: 0x4]
	float GarageFootnotesRadiusVerticalScale;//[Offset: 0x434, Size: 0x4]
	float GarageFootnotesAdditionalScale;//[Offset: 0x438, Size: 0x4]
	float GarageFootnotesLineLengthMin;//[Offset: 0x43c, Size: 0x4]
	float GarageFootnotesLineLengthRelativeDepthMultiplier;//[Offset: 0x440, Size: 0x4]
	Vector2D[] GarageFootnotesSlotsAngleLimits;//[Offset: 0x444, Size: 0xc]
	Vector ScrollWheelLayoutScaleSizeMultiplier;//[Offset: 0x450, Size: 0xc]
	Vector ScrollWheelLayoutBadgeOffsetBoundsExtentsMultipliers;//[Offset: 0x45c, Size: 0xc]
	class Object* ShopItemComponentClass;//[Offset: 0x468, Size: 0x4]
	FName CameraSocketName;//[Offset: 0x470, Size: 0x8]
	class ActorComponent* ItemUIComponentClass;//[Offset: 0x478, Size: 0x28]
	FName ItemRewardScoreBonusPercentAttributeName;//[Offset: 0x4a0, Size: 0x8]
	FName ModelMaterialAttributeName;//[Offset: 0x4a8, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4b0, Size: 0x10]
	ActorComponent*[] CallFunc_GetComponentsByClass_ReturnValue;//[Offset: 0x4c0, Size: 0xc]
	int K2Node_Event_AffilatedTeamIndex;//[Offset: 0x4cc, Size: 0x4]
	int K2Node_Event_LocalPlayerTeamIndex;//[Offset: 0x4d0, Size: 0x4]
	int Temp_int_EndIndex_Variable;//[Offset: 0x4d4, Size: 0x4]
	interface class RotatorProperty* CallFunc_GetTeamIndex_self_CastInput;//[Offset: 0x4d8, Size: 0x8]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x4e0, Size: 0x10]
	int Temp_int_Index_Variable;//[Offset: 0x4f0, Size: 0x4]
	int K2Node_CustomEvent_SlotIndex;//[Offset: 0x4f4, Size: 0x4]
	Object* K2Node_CustomEvent_NewEquipment;//[Offset: 0x4f8, Size: 0x4]
	Object* K2Node_CustomEvent_OldEquipment;//[Offset: 0x4fc, Size: 0x4]
	int Temp_int_EndIndex_Variable1;//[Offset: 0x500, Size: 0x4]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x504, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x505, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x507, Size: 0x1]
	float CallFunc_GetPlayerScoreFactor_ScoreFactor;//[Offset: 0x508, Size: 0x4]
	interface class FloatProperty* K2Node_DynamicCast_AsAffilation_to_Team_Interface;//[Offset: 0x50c, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches2;//[Offset: 0x515, Size: 0x1]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x516, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor;//[Offset: 0x518, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1]
	interface class FloatProperty* CallFunc_BindToEquipmentChangedEvent_self_CastInput;//[Offset: 0x520, Size: 0x8]
	PlayerProfileItem* K2Node_Event_Item;//[Offset: 0x528, Size: 0x4]
	float CallFunc_GetItemOrTypeAttributeAsFloat_OutValue;//[Offset: 0x52c, Size: 0x4]
	float CallFunc_GetItemOrTypeAttributeAsFloat_OutValue1;//[Offset: 0x530, Size: 0x4]
	int Temp_int_Index_Variable1;//[Offset: 0x534, Size: 0x4]
	interface class FloatProperty* K2Node_DynamicCast_AsAffilation_to_Team_Interface1;//[Offset: 0x538, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x544, Size: 0x4]
	ActorComponent* CallFunc_Array_Get_Item;//[Offset: 0x548, Size: 0x4]
	MeshComponent* K2Node_DynamicCast_AsMesh_Component;//[Offset: 0x54c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	Controller* K2Node_CustomEvent_NewController;//[Offset: 0x554, Size: 0x4]
	Controller* K2Node_CustomEvent_OldController;//[Offset: 0x558, Size: 0x4]
	Pawn* K2Node_CustomEvent_Pawn;//[Offset: 0x55c, Size: 0x4]
	PlayerController* K2Node_DynamicCast_AsPlayer_Controller;//[Offset: 0x560, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x568, Size: 0x4]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x56c, Size: 0x1]
	GarageGameMode_C* K2Node_DynamicCast_AsGarage_Game_Mode;//[Offset: 0x570, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1]
	class Object* K2Node_ClassDynamicCast_AsActor_Component;//[Offset: 0x578, Size: 0x4]
	bool K2Node_ClassDynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x580, Size: 0x10]
	float CallFunc_GetItemOrTypeAttributeAsFloat_OutValue2;//[Offset: 0x590, Size: 0x4]
	FString CallFunc_GetItemOrTypeAttributeAsString_OutValue;//[Offset: 0x594, Size: 0xc]
	MaterialInterface* K2Node_DynamicCast_AsMaterial_Interface;//[Offset: 0x5a0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	void UserConstructionScript();// 0x3ea6494
	void ResetControllerHandling();// 0x3eb0370
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3ef0f48
	void ReceiveBeginPlay();// 0x3ea64cc
	void InitInput();// 0x3e57958
	void InitEquipmentHandling();// 0x3eb09dc
	void InitControllerHandling();// 0x3ef0f2c
	void HandleFreeze();// 0x3eaf38c
	void HandleEquipmentChanged(int bpp__SlotIndex__pf, Object* bpp__NewEquipment__pf, Object* bpp__OldEquipment__pf);// 0x3eb0088
	void HandleControllerChanged(Controller* bpp__NewController__pf, Controller* bpp__OldController__pf, Pawn* bpp__Pawn__pf);// 0x3ef0e24
	void GetVisualComponent(out PrimitiveComponent* bpp__VisualComponent__pf);// 0x3ef0d94
	void GetView(int bpp__SlotIndex__pf, out SceneComponent* bpp__RotationPivotComponent__pf, out Vector bpp__LocalRotationPivot__pf, out Vector2D bpp__ViewTargetSize__pf, out Vector bpp__ViewOffset__pf, out Rotator bpp__ViewRotation__pf, out float bpp__MinYaw__pf, out float bpp__MaxYaw__pf, out float bpp__MinPitch__pf, out float bpp__MaxPitch__pf);// 0x3ef0a18
	void GetTeamScoreFactor(out float bpp__ScoreFactor__pf);// 0x3ef0988
	void GetSlotWidgetsLayout(int bpp__SlotIndex__pf, out SceneComponent* bpp__SocketsComponent__pf, out FName bpp__AttachSocketName__pf, out Vector bpp__AttachLocalPosition__pf, out Vector bpp__CenterLocalOffset__pf, out float bpp__InnerRadius__pf, out float bpp__RadiusVerticalScale__pf, out float bpp__TopAngle__pf, out float bpp__BottomAngle__pf, out float bpp__AdditionalScale__pf, out float bpp__MinLineLength__pf, out float bpp__LineLengthRelativeDepthMultiplier__pf, out Vector2D[] bpp__SlotsAngleLimits__pf);// 0x3ef04bc
	void GetScrollWheelItemLayout(out Vector bpp__Offset__pf, out float bpp__Scale__pf, out Vector bpp__BadgeLocalPosition__pf);// 0x3ef0384
	float GetRewardScoreBonusPercent();// 0x3ef0354
	void GetPlayerScoreFactor(out float bpp__ScoreFactor__pf);// 0x3ea5ee0
	void GetChildSlotWidgetLayoutCorrection(int bpp__SlotIndex__pf, out ChildSlotWidgetsLayoutCorrection bpp__Correction__pf);// 0x3ef0278
	void GetCameraParams(int bpp__FiringWeaponMask__pf, out ActorCameraParams bpp__CameraParams__pf);// 0x3ef019c
	void GetCameraAttachPoint(out SceneComponent* bpp__AttachParentComponent__pf, out FName bpp__SocketName__pf);// 0x3ef00b0
	void Freeze();// 0x3e57b04
	void CalculateCameraRotation(Vector bpp__Pivot__pf, Vector bpp__ArmEndOffset__pf, out Rotator bpp__ResultRotation__pf);// 0x3eeff94
	void BlueprintDestructed();// 0x3ea64b0
	void AffilationToTeamChanged(int bpp__AffilatedTeamIndex__pf, int bpp__LocalPlayerTeamIndex__pf);// 0x3eefed0
	void ControllerChangedEvent__DelegateSignature(Controller* bpp__NewController__pf, Controller* bpp__OldController__pf, Pawn* bpp__Pawn__pf);// 0x4528238

--------------------------------
Class: BattlePawn.Pawn.Actor.Object
	interface class * DamageableInterface;//[Offset: 0x2d0, Size: 0x8]
	ActorComponentReference DamageControllerReference;//[Offset: 0x2d8, Size: 0x8]
	void ServerDie();// 0x372fbf8
	void Die();// 0x372fbdc
	void Destructed(Object* DestructedObject, interface classNone SourceDamageableInterface);// 0x372fb04
	void BlueprintDestructed();// 0x4528238

--------------------------------
Class: CritExecutableDamageController_C.DamageControllerComponent.DamageableBaseComponent.ActorComponent.Object
	class Object[] CritExecutors;//[Offset: 0x228, Size: 0xc]
	class Object* DestructExecutor;//[Offset: 0x234, Size: 0x4]
	FName[] DamageStageIndicatorsNames;//[Offset: 0x238, Size: 0xc]
	<enum,DamageApplyAndPass> UnclampedDamageApplyMultipliers;//[Offset: 0x244, Size: 0x3c]
	float MinDamageApplyMultipler;//[Offset: 0x280, Size: 0x4]
	float MinDamagePassMultipler;//[Offset: 0x284, Size: 0x4]
	int K2Node_Event_InDamageStage;//[Offset: 0x288, Size: 0x4]
	int K2Node_Event_InLastTriggeredDamageStage;//[Offset: 0x28c, Size: 0x4]
	int Temp_int_Variable;//[Offset: 0x290, Size: 0x4]
	class Object* CallFunc_Array_Get_Item;//[Offset: 0x294, Size: 0x4]
	void ModifyDamageApplyAndPass(const DamageKindWithApplyAndPass bpp__DamageKindApplyAndPass__pf__const);// 0x3e65c7c
	void BlueprintDestructed();// 0x3e65c60
	void BlueprintCriticallyDamaged(int bpp__InDamageStage__pf, int bpp__InLastTriggeredDamageStage__pf);// 0x3e65b9c

--------------------------------
Class: DamageControllerComponent.DamageableBaseComponent.ActorComponent.Object
	ActorComponentReference ControlledObjectReference;//[Offset: 0x128, Size: 0x8]
	Object* ControlledObject;//[Offset: 0x130, Size: 0x4]
	DamageApplyAndPass[] DamageApplyAndPassArray;//[Offset: 0x138, Size: 0xc]
	DamageApplyAndPass DefaultDamageApplyAndPass;//[Offset: 0x144, Size: 0x8]
	DamageControllerModifierData[] HeatModifiers;//[Offset: 0x14c, Size: 0xc]
	float HealthPoints;//[Offset: 0x158, Size: 0x4]
	float MaxHP;//[Offset: 0x15c, Size: 0x4]
	int DamageStage;//[Offset: 0x168, Size: 0x4]
	float[] DamageStagesHPs;//[Offset: 0x16c, Size: 0xc]
	float HeatProcessingInterval;//[Offset: 0x180, Size: 0x4]
	float DamageOverTimeAndHeat;//[Offset: 0x188, Size: 0x4]
	float CoolingSpeed;//[Offset: 0x18c, Size: 0x4]
	float Heat;//[Offset: 0x190, Size: 0x4]
	float MaxHeat;//[Offset: 0x194, Size: 0x4]
	int HeatStage;//[Offset: 0x1a4, Size: 0x4]
	float[] HeatStagesHeatValues;//[Offset: 0x1a8, Size: 0xc]
	delegate OnMaxHpChanged;//[Offset: 0x1f4, Size: 0xc]
	delegate OnMaxHeatChanged;//[Offset: 0x200, Size: 0xc]
	interface class RotatorProperty* NextDamageableInterface;//[Offset: 0x20c, Size: 0x8]
	ActorComponentReference NextDamageControllerReference;//[Offset: 0x218, Size: 0x8]
	enum HeatingDamageKind;//[Offset: 0x220, Size: 0x1]
	enum ThermalDamageKind;//[Offset: 0x221, Size: 0x1]
	enum DamageCollectedDamageType;//[Offset: 0x222, Size: 0x1]
	enum HeatCollectedDamageType;//[Offset: 0x223, Size: 0x1]
	bool bPassDamageToPrimitiveComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	bool bExecuteBlueprintCriticallyDamagedOnServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1]
	bool bExecuteBlueprintCriticallyDamaged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1]
	bool bExecuteBlueprintCriticalHeatStageChangedOnServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 0x1]
	bool bExecuteBlueprintCriticalHeatStageChanged;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 0x1]
	bool bExecuteBlueprintPreDestructedOnServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 0x1]
	bool bExecuteBlueprintDestructedOnServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 0x1]
	bool bExecuteBlueprintPreDestructed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 0x1]
	bool bExecuteBlueprintDestructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x225, Size: 0x1]
	bool bDestructed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x225, Size: 0x1]
	bool ShouldPassDamageToPrimitiveComponent();// 0x3536e28
	void SetUnmodifiedDamageApplyAndPass(const enum DamageKind, DamageApplyAndPass NewDamageApplyAndPass);// 0x3536d64
	void SetPassDamageToPrimitiveComponent(bool bShouldPassDamageToPrimitiveComponent);// 0x3536cd4
	void SetNextDamageableInterface(out const interface classNone NewDamageableInterface);// 0x3536c40
	void SetMaxHP(float NewMaxHP, bool bScaleHP);// 0x3536b7c
	void SetMaxHeat(float NewMaxHeat, bool bScaleHeat);// 0x3536ab8
	void SetHP(float NewHP);// 0x3536a44
	void SetHeat(float NewHeat);// 0x35369d0
	void SetDefaultDamageApplyAndPass(const DamageApplyAndPass DamageApplyAndPass);// 0x3536950
	void SetControlledObject(Object* NewControlledObject);// 0x35368dc
	void OnRep_HeatStage();// 0x35368c8
	void OnRep_DamageStage();// 0x35368b4
	void MaxHpChangedEvent__DelegateSignature(float NewMaxValue, float OldMaxValue, DamageControllerComponent* DamageController);// 0x4528238
	DamageApplyAndPass GetUnmodifiedDamageApplyAndPass(const enum DamageKind);// 0x353682c
	interface classNone GetNextDamageableInterface();// 0x3536808
	float GetMaxHP();// 0x35367ec
	float GetMaxHeat();// 0x35367d0
	float GetHP();// 0x35367b4
	float GetHeat();// 0x3536798
	DamageApplyAndPass GetDefaultDamageApplyAndPass();// 0x3536774
	DamageApplyAndPass GetDamageApplyAndPass(const enum DamageKind);// 0x35366dc
	ActorComponentReference GetControlledObjectReference();// 0x35366b8
	Object* GetControlledObject();// 0x353669c
	void DestructOnServer(Controller* EventInstigator, Object* DestructionCauser);// 0x35365d8
	void Destructed();// 0x35365bc
	void CriticalHeatStageChangedOnServer(int NewHeatStage, Controller* EventInstigator, Object* DamageCauser);// 0x35364b4
	void CriticalDamageOnServer(int DamageStage, Controller* EventInstigator, Object* DestructionCauser);// 0x35363ac
	int CalculatePrevHeatStage(int CurrentStage, float CurrentHeat, out float OutCurrentStageHeat, out float OutNextStageHeat);// 0x3536238
	int CalculateNextHeatStage(int CurrentStage, float CurrentHeat, out float OutCurrentStageHeat, out float OutNextStageHeat);// 0x35360c4
	int CalculateNewDamageStage(int CurrentStage, float CurrentHP, out float OutNextStageHP);// 0x3535fa4
	void BlueprintPreDestructedOnServer(Controller* EventInstigator, Object* DestructionCauser);// 0x4528238
	void BlueprintPreDestructed();// 0x4528238
	void BlueprintDestructedOnServer(Controller* EventInstigator, Object* DestructionCauser);// 0x4528238
	void BlueprintDestructed();// 0x4528238
	void BlueprintCriticallyDamagedOnServer(int InDamageStage, int InLastTriggeredDamageStage, Controller* EventInstigator, Object* DamageCauser);// 0x4528238
	void BlueprintCriticallyDamaged(int InDamageStage, int InLastTriggeredDamageStage);// 0x4528238
	void BlueprintCriticalHeatStageChangedOnServer(int InNewHeatStage, int InLastTriggeredHeatStage, Controller* EventInstigator, Object* DamageCauser);// 0x4528238
	void BlueprintCriticalHeatStageChanged(int InNewHeatStage, int InLastTriggeredHeatStage);// 0x4528238

--------------------------------
Class: DamageableBaseComponent.ActorComponent.Object
	delegate InputDamageOnServerEvent;//[Offset: 0xac, Size: 0xc]
	delegate DamagedOnServerEvent;//[Offset: 0xb8, Size: 0xc]
	delegate CriticallyDamagedOnServerEvent;//[Offset: 0xc4, Size: 0xc]
	delegate CriticallyDamagedEvent;//[Offset: 0xd0, Size: 0xc]
	delegate CriticalHeatStageChangedOnServerEvent;//[Offset: 0xdc, Size: 0xc]
	delegate CriticalHeatStageChangedEvent;//[Offset: 0xe8, Size: 0xc]
	delegate PreDestructedOnServerEvent;//[Offset: 0xf4, Size: 0xc]
	delegate DestructedOnServerEvent;//[Offset: 0x100, Size: 0xc]
	delegate PreDestructedEvent;//[Offset: 0x10c, Size: 0xc]
	delegate DestructedEvent;//[Offset: 0x118, Size: 0xc]

--------------------------------
Class: DamageApplyAndPass
	float ApplyMultiplier;//[Offset: 0x0, Size: 0x4]
	float PassMultiplier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DamageKindWithApplyAndPass
	DamageApplyAndPass DamageApplyAndPass;//[Offset: 0x0, Size: 0x8]
	enum DamageKind;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: DamageControllerModifierData
	DamageApplyAndPass ModifiedApplyAndPassDelta;//[Offset: 0x0, Size: 0x8]
	DamageApplyAndPass ApplyAndPassModificationRate;//[Offset: 0x8, Size: 0x8]
	DamageApplyAndPass ApplyAndPassModificationLimit;//[Offset: 0x10, Size: 0x8]
	enum DamageKind;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ShapeDamageDispatcherComponent.BoneDamageDispatcherComponent.DamageDispatcherComponent.DamageableBaseComponent.ActorComponent.Object
	ShapeToDamageControllerRelation[] ShapeToDamageControllersMap;//[Offset: 0x1a0, Size: 0xc]

--------------------------------
Class: BoneDamageDispatcherComponent.DamageDispatcherComponent.DamageableBaseComponent.ActorComponent.Object
	ActorComponentReference SkeletalMeshComponentReference;//[Offset: 0x180, Size: 0x8]
	BoneDamageControllerNamesPair[] BonesToDamageControllersMap;//[Offset: 0x188, Size: 0xc]

--------------------------------
Class: DamageDispatcherComponent.DamageableBaseComponent.ActorComponent.Object
	interface class * DefaultDamageableInterface;//[Offset: 0x124, Size: 0x8]
	interface class DoubleProperty* NextDamageableInterface;//[Offset: 0x12c, Size: 0x8]
	interface class DoubleProperty* MainDamageableInterface;//[Offset: 0x134, Size: 0x8]
	ActorComponentReference DefaultDamageControllerReference;//[Offset: 0x140, Size: 0x8]
	ActorComponentReference NextDamageControllerReference;//[Offset: 0x148, Size: 0x8]
	ActorComponentReference MainDamageControllerReference;//[Offset: 0x150, Size: 0x8]
	void SetNextDamageableInterface(out const interface classNone NewDamageableInterface);// 0x3538134
	void SetMainDamageableInterface(out const interface classNone NewDamageableInterface);// 0x35380a0
	void SetDefaultDamageableInterface(out const interface classNone NewDamageableInterface);// 0x353800c
	interface classNone GetNextDamageableInterface();// 0x3537fe8
	interface classNone GetMainDamageableInterface();// 0x3537fc4
	interface classNone GetDefaultDamageableInterface();// 0x3537fa0

--------------------------------
Class: ShapeToDamageControllerRelation
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	FName ShapeName;//[Offset: 0x8, Size: 0x8]
	ActorComponentReference DamageControllerReference;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BoneDamageControllerNamesPair
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	ActorComponentReference DamageControllerReference;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PawnDeploymentComponent_C.ActorComponent.Object
	byte DeploymentState;//[Offset: 0xa8, Size: 0x1]
	float SavedMaxSmoothPositionExtrapolationTime;//[Offset: 0xac, Size: 0x4]
	float DroppingMaxSmoothPositionExtrapolationTime;//[Offset: 0xb0, Size: 0x4]
	bool bDestroyWhenDeployed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	delegate DeploymentStateChangedEvent;//[Offset: 0xb8, Size: 0xc]
	byte K2Node_Event_EndPlayReason;//[Offset: 0xc4, Size: 0x1]
	void DeploymentStateChangedEvent__DelegateSignature(byte bpp__NewDeploymentState__pf);// 0x4528238
	void SetDeploymentState(byte bpp__NewDeploymentState__pf);// 0x3ec913c
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e50510
	void ProcessDeploymentStateChange();// 0x3e32748
	void OnRep_DeploymentState();// 0x3e32780
	void GetDeploymentState(out byte bpp__DeploymentState__pf);// 0x3ec90ac

--------------------------------
Class: ActorRenderCaptureHelperComponent_C.ActorComponent.Object
	Vector XOffsetSizeMultiplier;//[Offset: 0xac, Size: 0xc]
	Vector YOffsetSizeMultiplier;//[Offset: 0xb8, Size: 0xc]
	Vector ZOffsetSizeMultiplier;//[Offset: 0xc4, Size: 0xc]
	Vector AdditionalRelativeOffset;//[Offset: 0xd0, Size: 0xc]
	Rotator BestViewRelativeRotation;//[Offset: 0xdc, Size: 0xc]
	Rotator CameraRotationRelativeLight;//[Offset: 0xe8, Size: 0xc]
	void CalculateSceneCaptureRotation(Actor* bpp__LightActor__pf, out Rotator bpp__Rotation__pf);// 0x3e3e294
	void CalculateRelativePositionAndRotation(out Vector bpp__RelPosition__pf, out Rotator bpp__RelRotation__pf);// 0x3e3e1b4

--------------------------------
Class: HpBasedEquipperComponent_C.ActorComponent.Object
	FName DamageControllerTag;//[Offset: 0xa8, Size: 0x8]
	float TotalMaxHP;//[Offset: 0xb0, Size: 0x4]
	bool bEquippingScheduled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	HpSlotEquipment[] HpEquipmentMap;//[Offset: 0xb8, Size: 0xc]
	interface class RotatorProperty* EquipmentController;//[Offset: 0xc4, Size: 0x8]
	int Temp_int_Array_Index_Variable;//[Offset: 0xcc, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0xd0, Size: 0x10]
	int Temp_int_Index_Variable;//[Offset: 0xe0, Size: 0x4]
	int Temp_int_EndIndex_Variable;//[Offset: 0xe4, Size: 0x4]
	bool Temp_bool_Break_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xec, Size: 0x4]
	float K2Node_CustomEvent_NewMaxValue;//[Offset: 0xf0, Size: 0x4]
	float K2Node_CustomEvent_OldMaxValue;//[Offset: 0xf4, Size: 0x4]
	DamageControllerComponent* K2Node_CustomEvent_DamageController;//[Offset: 0xf8, Size: 0x4]
	DamageControllerComponent*[] CallFunc_GetComponentsByTag_ReturnValue;//[Offset: 0xfc, Size: 0xc]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x108, Size: 0x1]
	int Temp_int_Loop_Counter_Variable1;//[Offset: 0x10c, Size: 0x4]
	DamageControllerComponent*[] CallFunc_GetComponentsByTag_ReturnValue1;//[Offset: 0x110, Size: 0xc]
	DamageControllerComponent* CallFunc_Array_Get_Item;//[Offset: 0x11c, Size: 0x4]
	int Temp_int_Array_Index_Variable1;//[Offset: 0x120, Size: 0x4]
	DamageControllerComponent* CallFunc_Array_Get_Item1;//[Offset: 0x124, Size: 0x4]
	HpSlotEquipment CallFunc_Array_Get_Item2;//[Offset: 0x128, Size: 0x30]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x158, Size: 0x10]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x168, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	class Object* K2Node_ClassDynamicCast_AsActor;//[Offset: 0x16c, Size: 0x4]
	bool K2Node_ClassDynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor;//[Offset: 0x174, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	Actor* K2Node_DynamicCast_AsActor1;//[Offset: 0x17c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e5ba58
	void ReceiveBeginPlay();// 0x3e32780
	void MaxHpChanged(float bpp__NewMaxValue__pf, float bpp__OldMaxValue__pf, DamageControllerComponent* bpp__DamageController__pf);// 0x3e60b74
	void CheckEquipment();// 0x3e32828
	void MaxHpChangedEvent__DelegateSignature(float bpp__NewMaxValue__pf, float bpp__OldMaxValue__pf, DamageControllerComponent* bpp__DamageController__pf);// 0x4528238

--------------------------------
Class: HpSlotEquipment
	float HP_2_CF8002734D9ADA3715CA0F9356516652;//[Offset: 0x0, Size: 0x4]
	int SlotIndex_10_05C580B345468E7F6107358571B84618;//[Offset: 0x4, Size: 0x4]
	class Object* EquipmentClass_6_81660A064283DC4411DD31B89C30FACF;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: FriendlyDamageConfiguratorComponent.ActorComponent.Object
	interface class * OwnerEquipmentInterface;//[Offset: 0xa8, Size: 0x8]
	enum FriendlyDamageSettings;//[Offset: 0xb0, Size: 0x1]
	void TeamMemberAdded(Team* Team, interface classNone Member);// 0x374c374
	void OwnerEquipped(Actor* NewOwner, int NewSlotIndex, Actor* OldOwner, int OldSlotIndex);// 0x374c224

--------------------------------
Class: RobotEmpDamageControllerComponent_C.EmpDamageControllerComponent_C.ActorComponent.Object
	float EMPDamageMobilityMultiplier;//[Offset: 0x114, Size: 0x4]
	float EMPDamageRobotRotationMultiplier;//[Offset: 0x118, Size: 0x4]
	float SavedMinFlyHeight;//[Offset: 0x11c, Size: 0x4]
	float SavedMaxFlyHeight;//[Offset: 0x120, Size: 0x4]
	WalkFlyMovementComponent* K2Node_DynamicCast_AsWalk_Fly_Movement_Component;//[Offset: 0x124, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	WalkFlyMovementComponent* K2Node_DynamicCast_AsWalk_Fly_Movement_Component1;//[Offset: 0x12c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]

--------------------------------
Class: EmpDamageControllerComponent_C.ActorComponent.Object
	ParticleSystemComponent* EmpDamageParticleComponent;//[Offset: 0xac, Size: 0x4]
	float EmpDamageMultiplier;//[Offset: 0xb0, Size: 0x4]
	float EmpDamageTowerRotationSpeedMultiplier;//[Offset: 0xb4, Size: 0x4]
	FName TowerRotatorTag;//[Offset: 0xb8, Size: 0x8]
	ParticleSystem* EmpDamageEffectParticleEmitter;//[Offset: 0xc0, Size: 0x4]
	FName EmpDamageEffctSocketName;//[Offset: 0xc8, Size: 0x8]
	Vector EmpDamageEffectRelativePosition;//[Offset: 0xd0, Size: 0xc]
	Rotator EmpDamageEffectRelativeRotation;//[Offset: 0xdc, Size: 0xc]
	delegate OnEmpDamageEnded;//[Offset: 0xe8, Size: 0xc]
	delegate OnEmpDamageStarted;//[Offset: 0xf4, Size: 0xc]
	delegate OnEmpDamagedOnServer;//[Offset: 0x100, Size: 0xc]
	float CurrentEmpDamageEndTime;//[Offset: 0x10c, Size: 0x4]
	bool bEmpDamageActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bOldEmpDamageActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	void OnEmpDamageStarted__DelegateSignature(EmpDamageControllerComponent_C* bpp__EmpDamageControllerComponent__pf);// 0x4528238
	void OnEmpDamageEnded__DelegateSignature(EmpDamageControllerComponent_C* bpp__EmpDamageControllerComponent__pf);// 0x4528238
	void OnEmpDamagedOnServer__DelegateSignature(Object* bpp__DamagedObject__pf, float bpp__DamageAmount__pf, Controller* bpp__Instigator__pf, Object* bpp__DamageCauser__pf);// 0x4528238
	void StopEmpDamage();// 0x371babc
	void OnRep_bEmpDamageActive();// 0x3718728
	bool IsEmpDamageActive();// 0x3e6f1fc
	void EmpDamageStarted();// 0x3e325f8
	void EmpDamageEnded();// 0x3e326a0
	void DeactivateEmpDamageEffects();// 0x3e32748
	void DeactivateEmpDamage();// 0x37189ec
	void ApplyEmpDamage(float bpp__DamageAmount__pf, Controller* bpp__Instigator__pf, Object* bpp__DamageCauser__pf);// 0x3e6f0f4
	void ActivateEmpDamageEffects();// 0x3e32780
	void ActivateEmpDamage();// 0x3e32828

--------------------------------
Class: WalkFlyMovementComponent.WalkMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	delegate FlyEnabledStateChangedEvent;//[Offset: 0x90c, Size: 0xc]
	bool bFlyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x918, Size: 0x1]
	bool bShouldInterpolateFlyInput;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x918, Size: 0x1]
	bool bResolvePenetrationAfterFlyRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x919, Size: 0x1]
	float FlyHorizInputAccelerationCorrectionCoefficient;//[Offset: 0x934, Size: 0x4]
	float FlyUpInputAccelerationCorrectionCoefficient;//[Offset: 0x938, Size: 0x4]
	float FlyDownInputAccelerationCorrectionCoefficient;//[Offset: 0x93c, Size: 0x4]
	float FlyInputOrtogonalInterpSpeed;//[Offset: 0x94c, Size: 0x4]
	float FlyInputPositiveLongitudinalInterpSpeed;//[Offset: 0x950, Size: 0x4]
	float MaxFlyHorizSpeed;//[Offset: 0x95c, Size: 0x4]
	float MaxFlyUpSpeed;//[Offset: 0x960, Size: 0x4]
	float MaxFlyDownSpeed;//[Offset: 0x964, Size: 0x4]
	float MaxFlyHorizAcceleration;//[Offset: 0x968, Size: 0x4]
	float MaxFlyUpAcceleration;//[Offset: 0x96c, Size: 0x4]
	float MaxFlyDownAcceleration;//[Offset: 0x970, Size: 0x4]
	float MaxFlyHeightCorrectionUpAcceleration;//[Offset: 0x974, Size: 0x4]
	float MaxFlyHeightCorrectionDownAcceleration;//[Offset: 0x978, Size: 0x4]
	float FlyHorizDeceleration;//[Offset: 0x97c, Size: 0x4]
	float FlyHorizDecelerationSpeedFactor;//[Offset: 0x980, Size: 0x4]
	float FlyUpDeceleration;//[Offset: 0x988, Size: 0x4]
	float FlyDownDeceleration;//[Offset: 0x98c, Size: 0x4]
	float FlyHorizAccelerationSpeedFactor;//[Offset: 0x990, Size: 0x4]
	float FlyBounceVelocityScale;//[Offset: 0x998, Size: 0x4]
	float MinFlyHeightStartCorrectionOffset;//[Offset: 0x99c, Size: 0x4]
	float MinFlyHeight;//[Offset: 0x9a4, Size: 0x4]
	float MaxFlyHeight;//[Offset: 0x9ac, Size: 0x4]
	float HeightCorrectionDownSpeedLimitFactor;//[Offset: 0x9b4, Size: 0x4]
	float LowHeightMinVertVelocityFactor;//[Offset: 0x9b8, Size: 0x4]
	float VertVelocityCorrectionAccelerationFactor;//[Offset: 0x9bc, Size: 0x4]
	float MaxFlyHeightAccelerationCorrectionFactor;//[Offset: 0x9c0, Size: 0x4]
	float CheckGroundAndFlyHeightInterval;//[Offset: 0x9c4, Size: 0x4]
	float TraceGroundPredictionTime;//[Offset: 0x9cc, Size: 0x4]
	float TraceGroundDistance;//[Offset: 0x9d0, Size: 0x4]
	float TraceGroundRadius;//[Offset: 0x9d4, Size: 0x4]
	float FlyRotationToInputStrength;//[Offset: 0x9e8, Size: 0x4]
	float FlyRotationToMovementStrength;//[Offset: 0x9ec, Size: 0x4]
	float FlyRotationToControllerDesiredRotationStrength;//[Offset: 0x9f0, Size: 0x4]
	float FlyYawSpeed;//[Offset: 0x9f4, Size: 0x4]
	float FlyPitchRollSpeed;//[Offset: 0x9f8, Size: 0x4]
	float TiltAccelerationFactor;//[Offset: 0xa18, Size: 0x4]
	float TiltForwardAccelerationFactor;//[Offset: 0xa1c, Size: 0x4]
	float TiltInputVelocityFactor;//[Offset: 0xa20, Size: 0x4]
	float TiltForwardInputVelocityFactor;//[Offset: 0xa24, Size: 0x4]
	float TiltRotationPower;//[Offset: 0xa28, Size: 0x4]
	byte TraceGroundChannel;//[Offset: 0xae8, Size: 0x1]
	void SetResolvePenetrationAfterFlyRotation(bool bValue);// 0x3781a10
	void SetMaxFlyUpSpeed(float Value);// 0x3781868
	void SetMaxFlyUpAcceleration(float Value);// 0x37816c0
	void SetMaxFlyHorizSpeed(float Value);// 0x3781518
	void SetMaxFlyHorizAcceleration(float Value);// 0x3781488
	void SetMaxFlyDownSpeed(float Value);// 0x37812e0
	void SetMaxFlyDownAcceleration(float Value);// 0x3781138
	void SetFlyYawSpeed(float Value);// 0x3781058
	void SetFlyUpDeceleration(float Value);// 0x3780fe4
	void SetFlyRotationToMovementStrength(float Value);// 0x3780f04
	void SetFlyRotationToInputStrength(float Value);// 0x3780e24
	void SetFlyRotationToControllerDesiredRotationStrength(float Value);// 0x3780d48
	void SetFlyPitchRollSpeed(float Value);// 0x3780bd4
	void SetFlyHorizDeceleration(float Value);// 0x3780b60
	void SetFlyHeightRange(float MinHeight, float MaxHeight);// 0x3780aa4
	void SetFlyEnabled(bool Value);// 0x37809e8
	void SetFlyDownDeceleration(float Value);// 0x3780974
	bool IsResolvePenetrationAfterFlyRotation();// 0x3780954
	float GetMinFlyHeight();// 0x3780938
	float GetMaxFlyUpSpeed();// 0x378091c
	float GetMaxFlyUpAcceleration();// 0x3780900
	float GetMaxFlyHorizSpeed();// 0x37808e4
	float GetMaxFlyHorizAcceleration();// 0x37808c8
	float GetMaxFlyHeight();// 0x37808ac
	float GetMaxFlyDownSpeed();// 0x3780890
	float GetMaxFlyDownAcceleration();// 0x3780874
	Vector GetInputVelocityVector();// 0x378084c
	float GetInputVelocityForwardAmount();// 0x3780830
	Vector2D GetHorizForwardVector();// 0x378080c
	float GetForwardAcceleration();// 0x37807f0
	float GetFlyYawSpeed();// 0x37807d4
	float GetFlyUpDeceleration();// 0x37807b8
	float GetFlyRotationToMovementStrength();// 0x378079c
	float GetFlyRotationToInputStrength();// 0x3780780
	float GetFlyRotationToControllerDesiredRotationStrength();// 0x3780764
	float GetFlyPitchRollSpeed();// 0x3780748
	float GetFlyHorizDeceleration();// 0x378072c
	bool GetFlyEnabled();// 0x378070c
	float GetFlyDownDeceleration();// 0x37806f0
	Vector GetAdjustedInputVector();// 0x37806c4
	void FlyEnabledStateChangedEvent__DelegateSignature(bool bNewFlyEnabled, bool bOldFlyEnabled);// 0x4528238
	void FlyEnabledStateChanged(bool bOldFlyEnabled);// 0x378063c

--------------------------------
Class: WalkMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	delegate MovementModeChangedEvent;//[Offset: 0x128, Size: 0xc]
	delegate JumpEnabledStateChangedEvent;//[Offset: 0x134, Size: 0xc]
	float FeetAdditionalVerticalOffset;//[Offset: 0x178, Size: 0x4]
	byte MoveSweepChannel;//[Offset: 0x238, Size: 0x1]
	byte ReplicatedMovementMode;//[Offset: 0x23a, Size: 0x1]
	float MaxWalkSpeed;//[Offset: 0x278, Size: 0x4]
	float MaxWalkUpSpeed;//[Offset: 0x27c, Size: 0x4]
	float MaxWalkDownSpeed;//[Offset: 0x280, Size: 0x4]
	float MaxPossibleWalkSpeed;//[Offset: 0x284, Size: 0x4]
	float MaxWalkAcceleration;//[Offset: 0x288, Size: 0x4]
	float WalkHorizDeceleration;//[Offset: 0x28c, Size: 0x4]
	float WalkUpDeceleration;//[Offset: 0x290, Size: 0x4]
	float WalkDownDeceleration;//[Offset: 0x294, Size: 0x4]
	float MaxWalkableSlope;//[Offset: 0x298, Size: 0x4]
	float MaxWalkableImpactPointHeight;//[Offset: 0x2a0, Size: 0x4]
	float WalkFriction;//[Offset: 0x2a4, Size: 0x4]
	float WalkSlideDownGravityScale;//[Offset: 0x2a8, Size: 0x4]
	float SlideAlongSurfaceOffset;//[Offset: 0x2ac, Size: 0x4]
	float WalkVelocityToMoveInterpolation;//[Offset: 0x2b0, Size: 0x4]
	float WalkGravityEffect;//[Offset: 0x2b4, Size: 0x4]
	float StepOverSlope;//[Offset: 0x2b8, Size: 0x4]
	float MaxWalkStepHeight;//[Offset: 0x2c0, Size: 0x4]
	float TestWalkStepLength;//[Offset: 0x2c4, Size: 0x4]
	float TestWalkStepMinLength;//[Offset: 0x2c8, Size: 0x4]
	float MinStepOverSpeed;//[Offset: 0x2d0, Size: 0x4]
	float BackStepDistance;//[Offset: 0x2f0, Size: 0x4]
	float BackStepVertOffset;//[Offset: 0x2f4, Size: 0x4]
	float MinBackStepOverPercent;//[Offset: 0x2f8, Size: 0x4]
	float MaxJumpInputDirAcceleration;//[Offset: 0x2fc, Size: 0x4]
	float MaxJumpInputDirMinHorizSpeed;//[Offset: 0x300, Size: 0x4]
	float MinInputToVertJump;//[Offset: 0x30c, Size: 0x4]
	float MaxVertAngleToVertJumpAlways;//[Offset: 0x310, Size: 0x4]
	float MaxVertAngleToVertJumpWithInput;//[Offset: 0x314, Size: 0x4]
	float MaxJumpPawnUpAcceleration;//[Offset: 0x318, Size: 0x4]
	float MaxJumpVertAcceleration;//[Offset: 0x31c, Size: 0x4]
	float MaxJumpHorizSpeed;//[Offset: 0x320, Size: 0x4]
	float MaxJumpVertSpeed;//[Offset: 0x324, Size: 0x4]
	float MaxJumpTime;//[Offset: 0x32c, Size: 0x4]
	float TimeAfterJumpToUseEarlyFindSupportConditions;//[Offset: 0x330, Size: 0x4]
	float MinFallingVertSpeedToKeepMinHorizSpeed;//[Offset: 0x334, Size: 0x4]
	float MaxFallHorizSpeed;//[Offset: 0x344, Size: 0x4]
	float MaxFallUpSpeed;//[Offset: 0x348, Size: 0x4]
	float MaxFallDownSpeed;//[Offset: 0x34c, Size: 0x4]
	float FallingSideSlideSpeed;//[Offset: 0x350, Size: 0x4]
	float FallingCollisionHorizVelocityMultiplier;//[Offset: 0x354, Size: 0x4]
	float MinVertAccelrationToFindSupport;//[Offset: 0x358, Size: 0x4]
	float EarlyMinFallingVertSpeedToFindSupport;//[Offset: 0x360, Size: 0x4]
	float MinFallingVertSpeedToFindSupport;//[Offset: 0x364, Size: 0x4]
	float MaxVertAngleToFindSupport;//[Offset: 0x36c, Size: 0x4]
	float GravityScale;//[Offset: 0x370, Size: 0x4]
	float GravityAdditive;//[Offset: 0x374, Size: 0x4]
	float WalkRotationToInputStrength;//[Offset: 0x380, Size: 0x4]
	float WalkRotationToMovementStrength;//[Offset: 0x384, Size: 0x4]
	float WalkRotationToControllerDesiredRotationStrength;//[Offset: 0x388, Size: 0x4]
	float WalkYawSpeed;//[Offset: 0x38c, Size: 0x4]
	float WalkPitchRollSpeed;//[Offset: 0x390, Size: 0x4]
	float PitchRollPower;//[Offset: 0x394, Size: 0x4]
	float MinInputForRotateToInput;//[Offset: 0x398, Size: 0x4]
	float MinSpeedForRotateToMovement;//[Offset: 0x39c, Size: 0x4]
	float YawPitchRollVectorDamping;//[Offset: 0x3b4, Size: 0x4]
	float RotationToMovementLimitsVelocityDivergenceScale;//[Offset: 0x3d8, Size: 0x4]
	float RotationToMovementLimitsFadeOutSpeed;//[Offset: 0x3dc, Size: 0x4]
	AlignTraceInfo[] Supports;//[Offset: 0x470, Size: 0xc]
	byte TraceSupportChannel;//[Offset: 0x47c, Size: 0x1]
	float AlignmentTargetDamping;//[Offset: 0x548, Size: 0x4]
	float MaxSupportDistance;//[Offset: 0x54c, Size: 0x4]
	float TargetSupportDistance;//[Offset: 0x550, Size: 0x4]
	float TraceSupportRadius;//[Offset: 0x554, Size: 0x4]
	float SupportsDistanceDamping;//[Offset: 0x558, Size: 0x4]
	float MoveHitAlignmentForceX;//[Offset: 0x55c, Size: 0x4]
	float MoveHitAlignmentForceY;//[Offset: 0x560, Size: 0x4]
	float DeltaMoveInterpSpeed;//[Offset: 0x570, Size: 0x4]
	float AlignmentCosAngleThreshold;//[Offset: 0x580, Size: 0x4]
	float RotationDamping;//[Offset: 0x58c, Size: 0x4]
	float FallingRotationPower;//[Offset: 0x590, Size: 0x4]
	float FallingRotationDamping;//[Offset: 0x598, Size: 0x4]
	float AlignmentRotationPower;//[Offset: 0x59c, Size: 0x4]
	float AlignmentMoveSpeed;//[Offset: 0x5a0, Size: 0x4]
	float MaxAligmentMoveSpeedChange;//[Offset: 0x5a4, Size: 0x4]
	float ConstrainOrientationPower;//[Offset: 0x5b8, Size: 0x4]
	float PitchConstraint;//[Offset: 0x5bc, Size: 0x4]
	float RollConstraint;//[Offset: 0x5c0, Size: 0x4]
	float ForceCheckBaseInterval;//[Offset: 0x5c8, Size: 0x4]
	float SendToServerInterval;//[Offset: 0x810, Size: 0x4]
	float MinForceReplicationInterval;//[Offset: 0x814, Size: 0x4]
	float CombineMoveInputDeltaSquaredThreshold;//[Offset: 0x81c, Size: 0x4]
	float CombineMoveControllerRightVectorDotThreshold;//[Offset: 0x820, Size: 0x4]
	float MaxSingleIterationRepMoveDeltaTime;//[Offset: 0x824, Size: 0x4]
	float ServerMoveStartTimeRewind;//[Offset: 0x828, Size: 0x4]
	float ForceServerMoveDelay;//[Offset: 0x830, Size: 0x4]
	float MaxAllowablePositionZErrorSquared;//[Offset: 0x838, Size: 0x4]
	float MaxAllowablePositionXYErrorSquared;//[Offset: 0x83c, Size: 0x4]
	PrimitiveComponent* VisualComponent;//[Offset: 0x880, Size: 0x4]
	SkinnedMeshComponent* VisualSkinnedMeshComponent;//[Offset: 0x884, Size: 0x4]
	float UncompletedSmoothPositionOvertimeMultiplier;//[Offset: 0x8ac, Size: 0x4]
	float MaxSmoothPositionExtrapolationTime;//[Offset: 0x8b4, Size: 0x4]
	float SmoothClientAdjustmentCorrectionDuration;//[Offset: 0x8bc, Size: 0x4]
	float SmoothPositionCorrectionDuration;//[Offset: 0x8c0, Size: 0x4]
	float SmoothResolvePenetrationDuration;//[Offset: 0x8c4, Size: 0x4]
	float SmoothMoveVisualPositionDuration;//[Offset: 0x8c8, Size: 0x4]
	float SmoothPositionScreenSizeThreshold;//[Offset: 0x8cc, Size: 0x4]
	float SmoothPositionSpeedSquaredThreshold;//[Offset: 0x8d4, Size: 0x4]
	float MaxSmoothPositionTime;//[Offset: 0x8e8, Size: 0x4]
	float SmoothCorrectionDeltaTimeInterpUpAlpha;//[Offset: 0x8f0, Size: 0x4]
	float SmoothCorrectionDeltaTimeInterpDownAlpha;//[Offset: 0x8f4, Size: 0x4]
	float SmoothCorrectionDeltaTimeMultiplier;//[Offset: 0x8f8, Size: 0x4]
	float SmoothPositionCorrectionSquaredThreshold;//[Offset: 0x8fc, Size: 0x4]
	ActorComponentReference VisualComponentReference;//[Offset: 0x900, Size: 0x8]
	bool bJumpEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x908, Size: 0x1]
	bool bAlignOrientationToBase;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x909, Size: 0x1]
	bool bAlwaysSmoothPosition;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90a, Size: 0x1]
	bool bAlwaysSmoothPositionOnServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90a, Size: 0x1]
	void UpdateGravity();// 0x373e790
	bool SweepResolvePenetrationAndMove(out const Vector Delta, bool bSmoothPosition);// 0x373e6b4
	void SetWalkYawSpeed(float Value);// 0x373e5fc
	void SetWalkUpDeceleration(float Value);// 0x373e588
	void SetWalkRotationToMovementStrength(float Value);// 0x373e4d0
	void SetWalkRotationToInputStrength(float Value);// 0x373e418
	void SetWalkRotationToControllerDesiredRotationStrength(float Value);// 0x373e360
	void SetWalkPitchRollSpeed(float Value);// 0x373e294
	void SetWalkHorizDeceleration(float Value);// 0x373e220
	void SetWalkDownDeceleration(float Value);// 0x373e1ac
	void SetStepOverSlope(float Value);// 0x373e110
	bool SetMovementMode(byte NewMovementMode);// 0x373e088
	void SetMinFallingVertSpeedToFindSupport(float Value);// 0x373e014
	void SetMaxWalkVertSpeed(float NewMaxWalkUpSpeed, float NewMaxWalkDownSpeed);// 0x373df34
	void SetMaxWalkSpeed(float Value);// 0x373de94
	void SetMaxWalkAcceleration(float Value);// 0x373ddf4
	void SetMaxWalkableSlope(float Value);// 0x373dd68
	void SetMaxWalkableImpactPointHeight(float Value);// 0x373dcf4
	void SetMaxVertAngleToVertJumpWithInput(float Value);// 0x373dc68
	void SetMaxVertAngleToVertJumpAlways(float Value);// 0x373dbdc
	void SetMaxVertAngleToFindSupport(float Value);// 0x373db50
	void SetMaxSmoothPositionTime(float Value);// 0x373dadc
	void SetMaxSmoothPositionExtrapolationTime(float Value);// 0x373da68
	void SetMaxJumpVertSpeed(float Value);// 0x373d9f4
	void SetMaxJumpVertAcceleration(float Value);// 0x373d980
	void SetMaxJumpTime(float Value);// 0x373d90c
	void SetMaxJumpPawnUpAcceleration(float Value);// 0x373d898
	void SetMaxJumpInputDirAcceleration(float Value);// 0x373d824
	void SetMaxJumpHorizSpeed(float Value);// 0x373d7b0
	void SetJumpEnabled(bool Value);// 0x373d70c
	void SetGravityModifier(float NewGravityScale, float NewGravityAdditive);// 0x373d644
	void SetFeetAdditionalVerticalOffset(float Value);// 0x373d5cc
	void SetAlwaysSmoothPosition(bool bValue);// 0x373d544
	void SetAlignOrientationToBase(bool bValue);// 0x373d4bc
	void SetAlignmentRotationPower(float Value);// 0x373d448
	void ServerMove(const ReplicatedWalkMove Move);// 0x373d39c
	bool ResolvePenetration(bool bSmoothPosition, out bool bOutStillPenetrated);// 0x373d2bc
	void ResetCollisionIgnoredActors();// 0x373d2a8
	void OnRep_MovementMode();// 0x373d294
	void MovementModeChangedEvent__DelegateSignature(byte NewMovementMode, byte OldMovementMode);// 0x4528238
	void ModifyInputModifier(float NewValue);// 0x373d214
	void JumpEnabledStateChangedEvent__DelegateSignature(bool bNewJumpEnabled, bool bOldJumpEnabled);// 0x4528238
	void JumpEnabledStateChanged(bool bOldJimpEnabled);// 0x373d18c
	bool IsAlwaysSmoothPosition();// 0x373d16c
	bool IsAlignOrientationToBase();// 0x373d14c
	float GetWalkYawSpeed();// 0x373d130
	float GetWalkUpDeceleration();// 0x373d114
	float GetWalkRotationToMovementStrength();// 0x373d0f8
	float GetWalkRotationToInputStrength();// 0x373d0dc
	float GetWalkRotationToControllerDesiredRotationStrength();// 0x373d0c0
	float GetWalkPitchRollSpeed();// 0x373d0a4
	float GetWalkHorizDeceleration();// 0x36ff1a4
	float GetWalkDownDeceleration();// 0x373d088
	byte GetMovementMode();// 0x373d06c
	float GetMinFallingVertSpeedToFindSupport();// 0x373d050
	void GetMaxWalkVertSpeed(out float OutMaxWalkUpSpeed, out float OutMaxWalkDownSpeed);// 0x373cf6c
	float GetMaxWalkSpeed();// 0x373cf50
	float GetMaxWalkAcceleration();// 0x36ff16c
	float GetMaxWalkableSlope();// 0x373cf34
	float GetMaxWalkableImpactPointHeight();// 0x373cf18
	float GetMaxSmoothPositionTime();// 0x373cefc
	float GetMaxSmoothPositionExtrapolationTime();// 0x373cee0
	float GetMaxJumpVertSpeed();// 0x373cec4
	float GetMaxJumpVertAcceleration();// 0x373cea8
	float GetMaxJumpTime();// 0x373ce8c
	float GetMaxJumpPawnUpAcceleration();// 0x373ce70
	float GetMaxJumpInputDirAcceleration();// 0x373ce54
	float GetMaxJumpHorizSpeed();// 0x373ce38
	bool GetJumpEnabled();// 0x373ce18
	Vector GetInputVector();// 0x373cdf4
	float GetInputModifier();// 0x373cdd8
	Vector GetInputAcceleration();// 0x373cdb4
	void GetGravityModifier(out float OutGravityScale, out float OutGravityAdditive);// 0x373ccd0
	float GetFeetAdditionalVerticalOffset();// 0x373ccb4
	float GetAlignmentRotationPower();// 0x373cc98
	Vector GetAcceleration();// 0x373cc74
	void ClientAdjustPosition(const WalkMovementAdjustment Adjustment);// 0x373cbd0
	void AddCollisionIgnoredActor(Actor* IgnoreActor);// 0x373cb58

--------------------------------
Class: AlignTraceInfo
	Vector PrimaryStart;//[Offset: 0x0, Size: 0xc]
	Vector PrimaryVector;//[Offset: 0xc, Size: 0xc]
	bool bUseSecondaryTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	Vector SecondaryStart;//[Offset: 0x1c, Size: 0xc]
	Vector SecondaryVector;//[Offset: 0x28, Size: 0xc]
	float PrimaryTargetDistance;//[Offset: 0x34, Size: 0x4]
	Vector2D PrimaryAlignmentForce;//[Offset: 0x38, Size: 0x8]
	float PrimaryAlignmentForceDistanceFactor;//[Offset: 0x40, Size: 0x4]
	float SecondaryTargetDistance;//[Offset: 0x44, Size: 0x4]
	Vector2D SecondaryAlignmentForce;//[Offset: 0x48, Size: 0x8]
	float SecondaryAlignmentForceDistanceFactor;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: ReplicatedWalkMove
	Vector_NetQuantizeNormal InputVector;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantizeNormal ControllerRightVector;//[Offset: 0xc, Size: 0xc]
	float DeltaTime;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantize EndPosition;//[Offset: 0x1c, Size: 0xc]
	byte StartMovementMode;//[Offset: 0x28, Size: 0x1]
	byte EndMovementMode;//[Offset: 0x29, Size: 0x1]
	byte NumIterations;//[Offset: 0x2a, Size: 0x1]
	bool bForceCheckBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bBaseRecursionDetected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: WalkMovementAdjustment
	Vector_NetQuantize Position;//[Offset: 0x0, Size: 0xc]
	float JumpTime;//[Offset: 0xc, Size: 0x4]
	Quat Rotation;//[Offset: 0x10, Size: 0x10]
	Vector_NetQuantize Velocity;//[Offset: 0x20, Size: 0xc]
	float RotationToMovementStrengthMultiplier;//[Offset: 0x2c, Size: 0x4]
	uint32 MoveId;//[Offset: 0x30, Size: 0x4]
	byte MovementMode;//[Offset: 0x34, Size: 0x1]
	bool bBaseRecursionDetected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: ExtendedEquipmentControllerComponent_C.EquipmentControllerComponent.ActorComponent.Object
	EquipmentSlotInfo[] SlotsInfos;//[Offset: 0xd4, Size: 0xc]
	void GetEquipmentSlotInfo(int bpp__SlotIndex__pf, out EquipmentSlotInfo bpp__SlotInfo__pf);// 0x3e82fbc

--------------------------------
Class: PhysicalAnimHitReactionComponent.ActorComponent.Object
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xa8, Size: 0x4]
	MovementComponent* MovementComponent;//[Offset: 0xac, Size: 0x4]
	interface class FloatProperty* DamageableInterface;//[Offset: 0xb0, Size: 0x8]
	FName TopBoneName;//[Offset: 0x100, Size: 0x8]
	bool bIncludeTopBone;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 0x1]
	float MaxTargetPhysicsBlendWeight;//[Offset: 0x110, Size: 0x4]
	float TargetPhysicsBlendWeightDecreaseSpeed;//[Offset: 0x118, Size: 0x4]
	float PhysicsBlendWeightInterpSpeed;//[Offset: 0x120, Size: 0x4]
	float ApplyPhysicsScreenSizeThreshold;//[Offset: 0x124, Size: 0x4]
	float ReplicateToSimulatedInterval;//[Offset: 0x12c, Size: 0x4]
	float PointImpulseDegradationSpeed;//[Offset: 0x130, Size: 0x4]
	float CombinePointImpulsePositionSquaredThreshold;//[Offset: 0x14c, Size: 0x4]
	float CombinePointImpulseDirectionCosThreshold;//[Offset: 0x150, Size: 0x4]
	float PointImpulseScale;//[Offset: 0x154, Size: 0x4]
	float MaxPointImpulse;//[Offset: 0x158, Size: 0x4]
	float RadialImpulseRadiusScale;//[Offset: 0x15c, Size: 0x4]
	float MinRadialImpulseRadius;//[Offset: 0x160, Size: 0x4]
	float RadialImpulseScale;//[Offset: 0x164, Size: 0x4]
	float MaxRadialImpulse;//[Offset: 0x168, Size: 0x4]
	float PointImpulseToMoveConstScale;//[Offset: 0x16c, Size: 0x4]
	float PointImpulseToMoveDirScale;//[Offset: 0x170, Size: 0x4]
	float RadialImpulseToMoveScale;//[Offset: 0x174, Size: 0x4]
	float CurrentSpeedAndChangeThreshold;//[Offset: 0x180, Size: 0x4]
	float MaxSpeedChange;//[Offset: 0x184, Size: 0x4]
	float VelocityChangeMemoryDegradationSpeed;//[Offset: 0x198, Size: 0x4]
	ActorComponentReference DamageControllerReference;//[Offset: 0x1a0, Size: 0x8]
	ActorComponentReference SkeletalMeshReference;//[Offset: 0x1a8, Size: 0x8]
	void SetSkeletalMeshComponent(SkeletalMeshComponent* NewComp);// 0x353af5c
	void SetDamageableInterface(interface classNone NewDamageableInterface);// 0x353aed0
	void ServerHitsAppliedByClient();// 0x353ae74
	void NetMulticastApplyHits(const PointHit[] PointHits, const RadialHit[] RadialHits, const Vector_NetQuantize VelocityChange);// 0x353ad44
	void HandleDamage(Object* DamagedObject, float DamageAmount, DamageEventPtr DamageEvent, Controller* EventInstigator, Object* DamageCauser, interface classNone SourceDamageableInterface);// 0x353ab50
	SkeletalMeshComponent* GetSkeletalMeshComponent();// 0x353ab34
	interface classNone GetDamageableInterface();// 0x353ab10
	void ClientApplyHits(const PointHit[] PointHits, const RadialHit[] RadialHits, const Vector_NetQuantize VelocityChange);// 0x353a9e0
	void AddImpulseAtPosition(out const Vector ImpulseDir, float ImpulseMag, out const Vector Position, int BodyIndex, bool bForceApplyPhysics);// 0x353a82c

--------------------------------
Class: PointHit
	Vector LocalPosition;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize LocalImpulseVector;//[Offset: 0xc, Size: 0xc]
	int BodyIndex;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: RadialHit
	Vector_NetQuantize LocalPosition;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	float Strength;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DamageEventPtr.StructPtr

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xa8, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xac, Size: 0x4]
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0x5c4ddf0
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0x5c4dd78
	Transform GetBodyTargetTransform(FName BodyName);// 0x5c4dca4
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0x5c4db54
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0x5c4da54
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0x5c4d8ec

--------------------------------
Class: CollisionParamsComponent.ActorComponent.Object
	void EquipmentChanged(int SlotIndex, Object* NewEquipment, Object* OldEquipment);// 0x372ae0c

--------------------------------
Class: TargetPointsProviderComponent.ActorComponent.Object
	SceneComponent* LocalBoundBoxRootComponent;//[Offset: 0x30c, Size: 0x4]
	FName TargetPointScoreTag;//[Offset: 0x330, Size: 0x8]
	FName TargetPointKeyTag;//[Offset: 0x338, Size: 0x8]
	ActorComponentReference LocalBoundBoxRootComponentReference;//[Offset: 0x340, Size: 0x8]
	FName LocalBoundBoxRootComponentTag;//[Offset: 0x348, Size: 0x8]
	float DetectionCoefficient;//[Offset: 0x350, Size: 0x4]
	void TargetPointsOwnerDestructed(Object* Owner, interface classNone SourceDamageableInterface);// 0x371a704
	void EquipmentChanged(int SlotIndex, Object* NewEquipment, Object* OldEquipment);// 0x371a5fc

--------------------------------
Class: AggregateCollisionComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	USphere[] Spheres;//[Offset: 0x478, Size: 0xc]
	UOrientedBox[] Boxes;//[Offset: 0x484, Size: 0xc]
	UCapsule[] Capsules;//[Offset: 0x490, Size: 0xc]
	void ReplaceRuntimeAggregateCollision(out const USphere[] NewSpheres, out const UOrientedBox[] NewBoxes, out const UCapsule[] NewCapsules);// 0x372a490

--------------------------------
Class: USphere
	Vector Center;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UOrientedBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Quat Orientation;//[Offset: 0x10, Size: 0x10]
	float X;//[Offset: 0x20, Size: 0x4]
	float Y;//[Offset: 0x24, Size: 0x4]
	float Z;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: UCapsule
	Vector Center;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	Quat Orientation;//[Offset: 0x10, Size: 0x10]
	float Length;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TargetProviderComponent.ActorComponent.Object
	enum State;//[Offset: 0xac, Size: 0x1]
	Actor* PrimaryTargetActor;//[Offset: 0xb0, Size: 0x4]
	BattleTargetsManager* TargetsManager;//[Offset: 0xb8, Size: 0x4]
	interface class FloatProperty* ControllerProviderInterface;//[Offset: 0xbc, Size: 0x8]
	void StateChanged();// 0x371babc
	void OnRep_PrimaryTargetActor();// 0x371baa8
	void OnPawnControllerChanged(Controller* NewController, Controller* OldController, Pawn* Pawn);// 0x371b9a8
	void ControllerPrimaryTargetChanged(BattleTarget* NewTarget);// 0x371b930

--------------------------------
Class: TeamMemberComponent.ActorComponent.Object
	UniqueNetIdRepl SquadId;//[Offset: 0xac, Size: 0x18]
	int TeamIndex;//[Offset: 0xd4, Size: 0x4]
	void OwnerDestructed(Object* DestructedObject, interface classNone SourceDamageableInterface);// 0x3700638
	void OwnerDestroyed(Actor* DestroyedActor);// 0x37005b8
	void OnRep_TeamIndex();// 0x37005a4
	void OnRep_SquadId();// 0x3700590

--------------------------------
Class: SlotDamageDispatcherComponent.DamageDispatcherComponent.DamageableBaseComponent.ActorComponent.Object
	SlotDamageControllerDesc[] SlotsDamageControllers;//[Offset: 0x15c, Size: 0xc]

--------------------------------
Class: SlotDamageControllerDesc
	ActorComponentReference DamageControllerReference;//[Offset: 0x0, Size: 0x8]
	ActorComponentReference PrimitiveComponentReference;//[Offset: 0x8, Size: 0x8]
	interface class DoubleProperty* DamageableInterface;//[Offset: 0x10, Size: 0x8]
	FName BoneName;//[Offset: 0x20, Size: 0x8]
	FName ExtraName;//[Offset: 0x28, Size: 0x8]
	bool bPatchDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: SlotViewSettings
	Vector LocalRotationPivotMultiplier_27_9AEC8FF64567B92B6F70AE884F1E43C4;//[Offset: 0x0, Size: 0xc]
	Vector ViewLocalRotationPivotOffset_30_D4FB4935436156966FEF82AE88BBDC8F;//[Offset: 0xc, Size: 0xc]
	Vector2D ViewSizeScale_33_8C566B424AF07DF63449E4861D8AA7A4;//[Offset: 0x18, Size: 0x8]
	Vector2D ViewSizeExtension_35_91C60C0142550F58ACECC6B43B881F90;//[Offset: 0x20, Size: 0x8]
	Vector ViewOffsetBoundsExtentMultiplier_36_949C342742A612FC5B6EBAACA637FC2E;//[Offset: 0x28, Size: 0xc]
	Vector AdditionalViewOffset_37_A72E018542287EBA93680CA59F1B99FD;//[Offset: 0x34, Size: 0xc]
	Rotator BestViewRotation_15_A3968B3D4103F128C3BAFA8DB119E434;//[Offset: 0x40, Size: 0xc]
	float MinYaw_16_6CBC2B374923D93A9C8702848C6A505A;//[Offset: 0x4c, Size: 0x4]
	float MaxYaw_17_F7E77E734A09B8A02A7B7EB315F555BE;//[Offset: 0x50, Size: 0x4]
	float MinPitch_19_0B97ECE2487D0D51D1EE67827603E79B;//[Offset: 0x54, Size: 0x4]
	float MaxPitch_20_49923FCF4AE0BCB7267959B6BD8C01BA;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: ChildSlotWidgetsLayoutCorrection
	float InnerRadiusMin_5_84A12E404A2389DBDBB79CAA16A0A336;//[Offset: 0x0, Size: 0x4]
	float TopAngleMin_6_44C1CE034FAA370EC06F3BA124264E87;//[Offset: 0x4, Size: 0x4]
	float TopAngleMax_8_9445CDCC4B65A4E721937FAA4EA7C867;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WalkMovementControllerComponent_C.ActorComponent.Object
	WalkMovementComponent* WalkMovement;//[Offset: 0xb8, Size: 0x4]
	Pawn* Pawn;//[Offset: 0xbc, Size: 0x4]
	Vector PawnUpVector;//[Offset: 0xc0, Size: 0xc]
	Vector ControllerUpVector;//[Offset: 0xcc, Size: 0xc]
	Vector ControllerRightVector;//[Offset: 0xd8, Size: 0xc]
	Vector InputProjectionUpVector;//[Offset: 0xe4, Size: 0xc]
	Vector Dir;//[Offset: 0xf0, Size: 0xc]
	float MaxJumpCooldown;//[Offset: 0xfc, Size: 0x4]
	float LastJumpTime;//[Offset: 0x100, Size: 0x4]
	float PerformJumpDelay;//[Offset: 0x104, Size: 0x4]
	bool bIsJumpAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	enum JumpState;//[Offset: 0x109, Size: 0x1]
	interface classNone[] SprintDelegates;//[Offset: 0x10c, Size: 0xc]
	float MinTimeLeftForStartSprint;//[Offset: 0x118, Size: 0x4]
	float SprintTimeLeftAtStartOrStop;//[Offset: 0x11c, Size: 0x4]
	float TimeAtSprintStartOrStop;//[Offset: 0x120, Size: 0x4]
	float SprintTimeLeftIncerementSpeedWhenIdle;//[Offset: 0x124, Size: 0x4]
	float MaxSprintDuration;//[Offset: 0x128, Size: 0x4]
	float CurrentTime;//[Offset: 0x12c, Size: 0x4]
	float TmpTimeLeft;//[Offset: 0x130, Size: 0x4]
	TimerHandle SprintTimerHandle;//[Offset: 0x138, Size: 0x8]
	float MinSprintDuration;//[Offset: 0x140, Size: 0x4]
	float CurrentSprintSpeedMultiplier;//[Offset: 0x144, Size: 0x4]
	float SprintSpeedMultiplier;//[Offset: 0x148, Size: 0x4]
	interface classNone[] AbilityAvailabilityListeners;//[Offset: 0x14c, Size: 0xc]
	bool bIsSprintAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	enum SprintState;//[Offset: 0x159, Size: 0x1]
	enum OldSprintState;//[Offset: 0x15a, Size: 0x1]
	bool bIsPawnFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 0x1]
	float CallFunc_GetSprintCooldown_Cooldown;//[Offset: 0x15c, Size: 0x4]
	float CallFunc_GetSprintCooldown_Cooldown1;//[Offset: 0x160, Size: 0x4]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x164, Size: 0x4]
	int Temp_int_Array_Index_Variable;//[Offset: 0x168, Size: 0x4]
	interface class RotatorProperty* CallFunc_Array_Get_Item;//[Offset: 0x16c, Size: 0x8]
	enum Temp_byte_Variable;//[Offset: 0x174, Size: 0x1]
	bool K2Node_Event_bAllowed1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x178, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x188, Size: 0x10]
	enum K2Node_CustomEvent_NewState;//[Offset: 0x198, Size: 0x1]
	float K2Node_CustomEvent_TimeElapsedFromStartOrStop;//[Offset: 0x19c, Size: 0x4]
	float K2Node_CustomEvent_TimeLeftAtStartOrStop;//[Offset: 0x1a0, Size: 0x4]
	enum K2Node_CustomEvent_SprintState;//[Offset: 0x1a4, Size: 0x1]
	enum Temp_byte_Variable1;//[Offset: 0x1a5, Size: 0x1]
	float K2Node_Event_Scale2;//[Offset: 0x1a8, Size: 0x4]
	Controller* K2Node_Event_Controller2;//[Offset: 0x1ac, Size: 0x4]
	float K2Node_Event_Scale1;//[Offset: 0x1b0, Size: 0x4]
	Controller* K2Node_Event_Controller1;//[Offset: 0x1b4, Size: 0x4]
	float K2Node_Event_Scale;//[Offset: 0x1b8, Size: 0x4]
	Controller* K2Node_Event_Controller;//[Offset: 0x1bc, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate2;//[Offset: 0x1c0, Size: 0x10]
	Vector CallFunc_ProjectInputVectorToPlane_ProjectedVector;//[Offset: 0x1d0, Size: 0xc]
	Vector CallFunc_ProjectInputVectorToPlane_ProjectedVector1;//[Offset: 0x1dc, Size: 0xc]
	Vector K2Node_Event_WorldDirection;//[Offset: 0x1e8, Size: 0xc]
	float K2Node_Event_InputScale;//[Offset: 0x1f4, Size: 0x4]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	enum K2Node_Select_Default;//[Offset: 0x1f9, Size: 0x1]
	float CallFunc_GetCurrentJumpCooldown_Cooldown;//[Offset: 0x1fc, Size: 0x4]
	bool CallFunc_GetCurrentJumpCooldown_JumpEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	float K2Node_Event_Cooldown;//[Offset: 0x204, Size: 0x4]
	Pawn* K2Node_DynamicCast_AsPawn;//[Offset: 0x208, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 0x1]
	bool K2Node_Event_bAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate3;//[Offset: 0x210, Size: 0x10]
	float CallFunc_GetCurrentJumpCooldown_Cooldown1;//[Offset: 0x220, Size: 0x4]
	bool CallFunc_GetCurrentJumpCooldown_JumpEnabled1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	float K2Node_CustomEvent_Cooldown;//[Offset: 0x228, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate4;//[Offset: 0x230, Size: 0x10]
	interface class FloatProperty* K2Node_Event_Listener1;//[Offset: 0x240, Size: 0x8]
	interface class DoubleProperty* K2Node_Event_Listener;//[Offset: 0x248, Size: 0x8]
	enum Temp_byte_Variable2;//[Offset: 0x250, Size: 0x1]
	byte K2Node_CustomEvent_NewMovementMode;//[Offset: 0x251, Size: 0x1]
	byte K2Node_CustomEvent_OldMovementMode;//[Offset: 0x252, Size: 0x1]
	bool Temp_bool_Variable1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1]
	enum K2Node_Select1_Default;//[Offset: 0x254, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x255, Size: 0x1]
	Pawn* K2Node_DynamicCast_AsPawn1;//[Offset: 0x258, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	void TryStartSprint();// 0x3e32860
	void StopSprint();// 0x3e5e93c
	void StartSprint(out enum bpp__NewState__pf);// 0x3faa4a8
	void SetWalkMovementComponent(WalkMovementComponent* bpp__WalkMovement__pf);// 0x3faa428
	void SetSprintState(enum bpp__NewState__pf);// 0x3faa3a8
	void SetSprintAllowed(bool bpp__bAllowed__pf);// 0x3faa320
	void SetMaxJumpCooldown(float bpp__Cooldown__pf);// 0x3faa2a0
	void SetJumpCooldownTimerOnServer(float bpp__Cooldown__pf);// 0x37005b8
	void SetJumpAlowed(bool bpp__bAllowed__pf);// 0x3faa218
	void ServerStopSprint();// 0x3e32828
	void ServerStartSprint();// 0x3e326a0
	void RemoveSprintDelegate(out const interface classNone bpp__Delegate__pf);// 0x3faa184
	void RemoveAbilityAvailabilityListener(out const interface classNone bpp__Listener__pf);// 0x3faa0f0
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e60c7c
	void ReceiveBeginPlay();// 0x3e32780
	void ProjectInputVectorToPlane(Vector bpp__Vector__pf, Vector bpp__Normal__pf, Vector bpp__UpVec__pf, out Vector bpp__ProjectedVector__pf);// 0x3fa9f88
	void PerformJump();// 0x3719134
	void OnRep_bIsSprintAllowed();// 0x3e65c60
	void MovementModeChanged(byte bpp__NewMovementMode__pf, byte bpp__OldMovementMode__pf);// 0x3fa9ec4
	void MakeJump(out enum bpp__State__pf);// 0x3fa9e34
	void Jumped();// 0x3719018
	void JumpCooldownTickOnServer();// 0x3719150
	void IsJumpAllowed(out bool bpp__bAllowed__pf);// 0x3fa9da4
	void InitSprint();// 0x35365bc
	void InitMovementModeHandling();// 0x3718728
	void InitJumping();// 0x3714210
	void GetSprintTimeLeft(out float bpp__TimeLeft__pf);// 0x3fa9d14
	void GetSprintState(out enum bpp__State__pf);// 0x3fa9c84
	void GetSprintCooldown(out float bpp__Cooldown__pf);// 0x3fa9bf4
	void GetMaxSprintSpeed(out float bpp__Value__pf);// 0x3fa9b64
	void GetMaxJumpCooldown(out float bpp__Cooldown__pf);// 0x3fa9ad4
	void GetJumpState(out enum bpp__State__pf);// 0x3fa9a44
	void GetCurrentJumpCooldown(out float bpp__Cooldown__pf, out bool bpp__JumpEnabled__pf);// 0x3fa995c
	void ClientSetSprintState(float bpp__TimeElapsedFromStartOrStop__pf, float bpp__TimeLeftAtStartOrStop__pf, enum bpp__SprintState__pf);// 0x3fa9854
	void CleanupSprint();// 0x3fa9838
	void CleanupMovementModeHandling();// 0x371babc
	void CheckSprintStop();// 0x3fa981c
	void CheckSprintCooldown();// 0x3fa9800
	void BeginJump();// 0x3718ffc
	void AddUpInput(float bpp__Scale__pf, Controller* bpp__Controller__pf);// 0x3fa973c
	void AddSprintDelegate(out const interface classNone bpp__Delegate__pf);// 0x3fa96a8
	void AddRightInput(float bpp__Scale__pf, Controller* bpp__Controller__pf);// 0x3fa95e4
	void AddMovementInput(Vector bpp__WorldDirection__pf, float bpp__InputScale__pf);// 0x3fa9520
	void AddForwardInput(float bpp__Scale__pf, Controller* bpp__Controller__pf);// 0x3fa945c
	void AddAbilityAvailabilityListener(out const interface classNone bpp__Listener__pf);// 0x3fa93c8
	void AbilityAvailablityChanged();// 0x3fa93ac
	void MovementModeChangedEvent__DelegateSignature(byte bpp__NewMovementMode__pf, byte bpp__OldMovementMode__pf);// 0x4528238

--------------------------------
Class: AnimSyncAudioComponent.AudioComponent.SceneComponent.ActorComponent.Object
	float AudibilityCheckInterval;//[Offset: 0x53c, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x540, Size: 0x4]
	FName SyncCurveName;//[Offset: 0x548, Size: 0x8]
	FName WeightCurveName;//[Offset: 0x550, Size: 0x8]
	float MaxTimingDeltaForAdjustment;//[Offset: 0x568, Size: 0x4]
	float WeightDeltaToAdjustVolumeThreshold;//[Offset: 0x56c, Size: 0x4]
	float PitchDeltaThreshold;//[Offset: 0x570, Size: 0x4]
	float AnimSyncPitchCorrectionFactor;//[Offset: 0x574, Size: 0x4]
	float FadeOutDuration;//[Offset: 0x578, Size: 0x4]
	float OverrideDuration;//[Offset: 0x57c, Size: 0x4]
	ActorComponentReference MeshReference;//[Offset: 0x580, Size: 0x8]

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1ec, Size: 0x4]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x1f0, Size: 0xc]
	SoundClass* SoundClassOverride;//[Offset: 0x1fc, Size: 0x4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1]
	FName AudioComponentUserID;//[Offset: 0x208, Size: 0x8]
	float PitchModulationMin;//[Offset: 0x210, Size: 0x4]
	float PitchModulationMax;//[Offset: 0x214, Size: 0x4]
	float VolumeModulationMin;//[Offset: 0x218, Size: 0x4]
	float VolumeModulationMax;//[Offset: 0x21c, Size: 0x4]
	float VolumeMultiplier;//[Offset: 0x220, Size: 0x4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x224, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x228, Size: 0x4]
	float Priority;//[Offset: 0x22c, Size: 0x4]
	float SubtitlePriority;//[Offset: 0x230, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x234, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x238, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x240, Size: 0x4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x244, Size: 0x214]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x458, Size: 0x4]
	enum AutoAttachLocationRule;//[Offset: 0x460, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x461, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x462, Size: 0x1]
	delegate OnAudioFinished;//[Offset: 0x464, Size: 0xc]
	delegate OnAudioPlaybackPercent;//[Offset: 0x484, Size: 0xc]
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x4a4, Size: 0xc]
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x4c4, Size: 0xc]
	delegate OnQueueSubtitles;//[Offset: 0x4e8, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x4f8, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x500, Size: 0x8]
	void Stop();// 0x3fc35f8
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x5b4de1c
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x5b4dda4
	void SetUISound(bool bInUISound);// 0x5b4dd24
	void SetSubmixSend(SoundSubmix* Submix, float SendLevel);// 0x5b4dc68
	void SetSound(SoundBase* NewSound);// 0x5b4dbf0
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x5b4db78
	void SetPaused(bool bPause);// 0x5b4daf8
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x5b4da80
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x5b4da00
	void SetIntParameter(FName InName, int inInt);// 0x5b4d944
	void SetFloatParameter(FName InName, float InFloat);// 0x5b4d880
	void SetBoolParameter(FName InName, bool InBool);// 0x5b4d7b4
	void Play(float StartTime);// 0x3e56bc0
	bool IsPlaying();// 0x5b4d784
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0x5b4d6c0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);// 0x5b4d5b8
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x5b4d390
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0x5b4d2c8
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x5b4d0a0

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float FloatParam;//[Offset: 0x8, Size: 0x4]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int IntParam;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWaveParam;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AimBoneRotatorComponent.BoneRotatorComponent.ActorComponent.Object
	float MaxHorizAccelerationPredictionTime;//[Offset: 0x180, Size: 0x4]
	float MaxUpAccelerationPredictionTime;//[Offset: 0x184, Size: 0x4]
	float MaxDownAccelerationPredictionTime;//[Offset: 0x188, Size: 0x4]
	float AimPredictionAccuracy;//[Offset: 0x18c, Size: 0x4]

--------------------------------
Class: BoneRotatorComponent.ActorComponent.Object
	LookAtRotator LookAtRotator;//[Offset: 0xd0, Size: 0x54]
	FName BoneName;//[Offset: 0x130, Size: 0x8]
	LookAtRotatorPtr GetLookAtRotator();// 0x3724b34

--------------------------------
Class: LookAtRotator
	float YawSpeed;//[Offset: 0x0, Size: 0x4]
	float MinYawSpeed;//[Offset: 0x4, Size: 0x4]
	float YawThreshold;//[Offset: 0x8, Size: 0x4]
	float YawInterpSpeed;//[Offset: 0x10, Size: 0x4]
	float MinYaw;//[Offset: 0x14, Size: 0x4]
	float MaxYaw;//[Offset: 0x1c, Size: 0x4]
	float PitchSpeed;//[Offset: 0x24, Size: 0x4]
	float MinPitchSpeed;//[Offset: 0x28, Size: 0x4]
	float PitchThreshold;//[Offset: 0x2c, Size: 0x4]
	float PitchInterpSpeed;//[Offset: 0x34, Size: 0x4]
	float MinPitch;//[Offset: 0x38, Size: 0x4]
	float MaxPitch;//[Offset: 0x40, Size: 0x4]
	Vector RelativeLookAtOffset;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: LookAtRotatorPtr.StructPtr

--------------------------------
Class: WGCM2_C.Weapon_C.ShootingWeapon.Equipment.Actor.Object
	BallisticAimRotatorComponent* BallisticAimRotator;//[Offset: 0x5dc, Size: 0x4]
	SceneComponent* AimRotatorRoot;//[Offset: 0x5e0, Size: 0x4]
	ProjectilesControllerComponent* ProjectilesController;//[Offset: 0x5e4, Size: 0x4]
	WeaponWidgetAmmoAndReloadArcProgressComponent_C* Widget;//[Offset: 0x5e8, Size: 0x4]
	BallisticAimBoneRotatorComponent* BallisticAimBoneRotator;//[Offset: 0x5ec, Size: 0x4]
	CritExecutableDamageController_C* MainDamageController;//[Offset: 0x5f0, Size: 0x4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x5f4, Size: 0x4]
	SceneComponent* TargetPoint;//[Offset: 0x5f8, Size: 0x4]
	ShootingEffectsComponent* ShootingEffects;//[Offset: 0x5fc, Size: 0x4]

--------------------------------
Class: Weapon_C.ShootingWeapon.Equipment.Actor.Object
	ActorRenderCaptureHelperComponent_C* ActorCaptureHelperComponent;//[Offset: 0x40c, Size: 0x4]
	FriendlyDamageConfiguratorComponent* FriendlyFireConfigurator;//[Offset: 0x410, Size: 0x4]
	EquipmentControllerComponent* EquipmentController;//[Offset: 0x414, Size: 0x4]
	SceneComponent* Root;//[Offset: 0x418, Size: 0x4]
	class Object[] LayoutAnimInstanceClasses;//[Offset: 0x41c, Size: 0xc]
	Transform[] LayoutMeshRelativeTransforms;//[Offset: 0x428, Size: 0xc]
	float DelayAfterDestruction;//[Offset: 0x434, Size: 0x4]
	PlayerProfileItem* PlayerProfileItem;//[Offset: 0x438, Size: 0x4]
	FName ItemScoreFactorAttributeName;//[Offset: 0x440, Size: 0x8]
	FName ItemRewardScoreBonusPercentAttributeName;//[Offset: 0x448, Size: 0x8]
	float ScoreFactor;//[Offset: 0x450, Size: 0x4]
	float OptimalRange;//[Offset: 0x454, Size: 0x4]
	float ProjectileSpeed;//[Offset: 0x458, Size: 0x4]
	float GarageFootnotesInnerRadiusHorizBoundsScale;//[Offset: 0x45c, Size: 0x4]
	float GarageFootnotesInnerRadiusVertBoundsScale;//[Offset: 0x460, Size: 0x4]
	float GarageFootnotesInnerRadiusAddition;//[Offset: 0x464, Size: 0x4]
	float GarageFootnotesTopAngle;//[Offset: 0x468, Size: 0x4]
	bool bDisableAnimUpdateRateOptimizationOnDedicateServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 0x1]
	float AIStartFireThrottlingFactor;//[Offset: 0x470, Size: 0x4]
	float AIStopFireThrottlingFactor;//[Offset: 0x474, Size: 0x4]
	Vector ViewLocalRotationPivotMultiplier;//[Offset: 0x478, Size: 0xc]
	Vector ViewLocalRotationPivotOffset;//[Offset: 0x484, Size: 0xc]
	Vector2D ViewSizeBoundsExtentMultiplier;//[Offset: 0x490, Size: 0x8]
	Vector2D ViewSizeExtension;//[Offset: 0x498, Size: 0x8]
	Vector ViewOffsetBoundsExtentMultiplier;//[Offset: 0x4a0, Size: 0xc]
	Vector AdditionalViewOffset;//[Offset: 0x4ac, Size: 0xc]
	bool bFreezeAfterDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	class Object* ShopItemComponentClass;//[Offset: 0x4bc, Size: 0x4]
	bool bShootingRequiresTargetInRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	ArrayOfComponentAndTransform[] LayoutComponentsTransforms;//[Offset: 0x4c4, Size: 0xc]
	class ActorComponent* ItemUIComponentClass;//[Offset: 0x4d0, Size: 0x28]
	float RewardScoreBonusPercent;//[Offset: 0x4f8, Size: 0x4]
	float SelfRewardScoreBonusPercent;//[Offset: 0x4fc, Size: 0x4]
	MeshComponent*[] CallFunc_GetComponentsByClass_ReturnValue;//[Offset: 0x500, Size: 0xc]
	Actor* K2Node_Event_NewOwner;//[Offset: 0x50c, Size: 0x4]
	int K2Node_Event_NewSlotIndex;//[Offset: 0x510, Size: 0x4]
	Actor* K2Node_Event_OldOwner;//[Offset: 0x514, Size: 0x4]
	int K2Node_Event_OldSlotIndex;//[Offset: 0x518, Size: 0x4]
	ActorComponent*[] CallFunc_GetComponentsByClass_ReturnValue1;//[Offset: 0x51c, Size: 0xc]
	PlayerProfileItem* K2Node_Event_Item;//[Offset: 0x528, Size: 0x4]
	float CallFunc_GetItemOrTypeAttributeAsFloat_OutValue;//[Offset: 0x52c, Size: 0x4]
	float K2Node_Event_Value;//[Offset: 0x530, Size: 0x4]
	int Temp_int_Array_Index_Variable;//[Offset: 0x534, Size: 0x4]
	MeshComponent* CallFunc_Array_Get_Item;//[Offset: 0x538, Size: 0x4]
	SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component;//[Offset: 0x53c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	WidgetComponent* K2Node_DynamicCast_AsWidget_Component;//[Offset: 0x544, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	Actor* K2Node_CustomEvent_Owner1;//[Offset: 0x54c, Size: 0x4]
	Controller* K2Node_CustomEvent_NewController;//[Offset: 0x550, Size: 0x4]
	Controller* K2Node_CustomEvent_OldController;//[Offset: 0x554, Size: 0x4]
	Pawn* K2Node_CustomEvent_Pawn;//[Offset: 0x558, Size: 0x4]
	Pawn* K2Node_DynamicCast_AsPawn;//[Offset: 0x55c, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	PlayerController* K2Node_DynamicCast_AsPlayer_Controller;//[Offset: 0x564, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	Actor* K2Node_CustomEvent_Owner;//[Offset: 0x56c, Size: 0x4]
	Pawn* K2Node_DynamicCast_AsPawn1;//[Offset: 0x570, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x578, Size: 0x4]
	PrimitiveComponent* CallFunc_GetVisualComponent_VisualComponent;//[Offset: 0x57c, Size: 0x4]
	int Temp_int_Loop_Counter_Variable1;//[Offset: 0x580, Size: 0x4]
	SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component1;//[Offset: 0x584, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	int Temp_int_Array_Index_Variable1;//[Offset: 0x58c, Size: 0x4]
	ActorComponent* CallFunc_Array_Get_Item1;//[Offset: 0x590, Size: 0x4]
	interface class FloatProperty* K2Node_DynamicCast_AsDamageable_Interface;//[Offset: 0x594, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 0x1]
	MeshComponent* K2Node_DynamicCast_AsMesh_Component;//[Offset: 0x5a0, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	GarageGameMode_C* K2Node_DynamicCast_AsGarage_Game_Mode;//[Offset: 0x5a8, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	class Object* K2Node_ClassDynamicCast_AsActor_Component;//[Offset: 0x5b0, Size: 0x4]
	bool K2Node_ClassDynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5b8, Size: 0x10]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x5c8, Size: 0x10]
	float CallFunc_GetItemOrTypeAttributeAsFloat_OutValue1;//[Offset: 0x5d8, Size: 0x4]
	void UserConstructionScript();// 0x3e7f44c
	void UpdateEquipmentOwnerRewardScoreBonus();// 0x3e46fcc
	void SetupVisualComponent();// 0x3e46e5c
	void SetupTickPrerequisites(Actor* bpp__EquipmentOwner__pf);// 0x3e48b14
	void SetupProjectilesAndPrediction();// 0x3e90170
	void SetupControllerHandling(Actor* bpp__Owner__pf);// 0x3e9192c
	void SetOptimalRange(float bpp__Value__pf);// 0x3fae1c4
	void SetEquipmentUIDisabledState(bool bpp__bDisabled__pf);// 0x3fae13c
	void SetEquipmentRotatorsDisabledState(bool bpp__bDisabled__pf);// 0x3fae0b4
	void ResetTickPrerequisites(Actor* bpp__EquipmentOwner__pf);// 0x3e48b94
	void ResetControllerHandling(Actor* bpp__Owner__pf);// 0x3fae034
	void ReceiveBeginPlay();// 0x3e7eb1c
	void LimitRotatorRotation(ActorComponent* bpp__Rotator__pf, RotationLimits bpp__RotationLimits__pf);// 0x3fadf60
	void LimitRotation(RotationLimits bpp__RotationLimits__pf);// 0x3faded8
	void IsShootingRequiresTargetInRange(out bool bpp__bResult__pf);// 0x3fade48
	void IsIndirectShootingWeapon(out bool bpp__bIndirect__pf);// 0x3e90bb0
	void HandleFreeze();// 0x3e47110
	void HandleControllerChanged(Controller* bpp__NewController__pf, Controller* bpp__OldController__pf, Pawn* bpp__Pawn__pf);// 0x3fadd40
	void GetVisualComponent(out PrimitiveComponent* bpp__VisualComponent__pf);// 0x3fadcb0
	void GetView(int bpp__SlotIndex__pf, out SceneComponent* bpp__RotationPivotComponent__pf, out Vector bpp__LocalRotationPivot__pf, out Vector2D bpp__ViewTargetSize__pf, out Vector bpp__ViewOffset__pf, out Rotator bpp__ViewRotation__pf, out float bpp__MinYaw__pf, out float bpp__MaxYaw__pf, out float bpp__MinPitch__pf, out float bpp__MaxPitch__pf);// 0x3fad934
	void GetTeamScoreFactor(out float bpp__ScoreFactor__pf);// 0x3fad8a4
	void GetSlotWidgetsLayout(int bpp__SlotIndex__pf, out SceneComponent* bpp__SocketsComponent__pf, out FName bpp__AttachSocketName__pf, out Vector bpp__AttachLocalPosition__pf, out Vector bpp__CenterLocalOffset__pf, out float bpp__InnerRadius__pf, out float bpp__RadiusVerticalScale__pf, out float bpp__TopAngle__pf, out float bpp__BottomAngle__pf, out float bpp__AdditionalScale__pf, out float bpp__MinLineLength__pf, out float bpp__LineLengthRelativeDepthMultiplier__pf, out Vector2D[] bpp__SlotsAngleLimits__pf);// 0x3fad3d8
	void GetScrollWheelItemLayout(out Vector bpp__Offset__pf, out float bpp__Scale__pf, out Vector bpp__BadgeLocalPosition__pf);// 0x3fad2a0
	float GetRewardScoreBonusPercent();// 0x3fad270
	void GetPlayerScoreFactor(out float bpp__ScoreFactor__pf);// 0x3fad1e0
	void GetOptimalRange(out float bpp__Value__pf);// 0x3fad150
	void GetMaxRange(out float bpp__MaxRange__pf);// 0x3fad0c0
	void GetChildSlotWidgetLayoutCorrection(int bpp__SlotIndex__pf, out ChildSlotWidgetsLayoutCorrection bpp__Correction__pf);// 0x3facfe4
	void GetAIFireThrottlingFactors(out float bpp__StartFireThrottlingFactor__pf, out float bpp__StopFireThrottlingFactor__pf);// 0x3facefc
	void FinishDestruction();// 0x3e7eb00
	void ConfigureWeaponLayout(int bpp__LayoutIndex__pf);// 0x3face7c
	void ConfigureWeaponInSlot(Object* bpp__EquipmentOwner__pf, int bpp__SlotIndex__pf);// 0x3facdb8
	void BlueprintEquipped(Actor* bpp__NewOwner__pf, int bpp__NewSlotIndex__pf, Actor* bpp__OldOwner__pf, int bpp__OldSlotIndex__pf);// 0x3facc68
	void BlueprintEnableEquipment();// 0x3e4797c
	void BlueprintDisableEquipment();// 0x3e9115c
	void BlueprintDestructed();// 0x3eaf2c8
	void ControllerChangedEvent__DelegateSignature(Controller* bpp__NewController__pf, Controller* bpp__OldController__pf, Pawn* bpp__Pawn__pf);// 0x4528238

--------------------------------
Class: ShootingWeapon.Equipment.Actor.Object
	uint32 ReplicatedBurstEnd;//[Offset: 0x2e4, Size: 0x4]
	float StartBurstDuration;//[Offset: 0x2f8, Size: 0x4]
	float ContinueBurstDuration;//[Offset: 0x2fc, Size: 0x4]
	float FireInterval;//[Offset: 0x304, Size: 0x4]
	float ReplicatedFireInterval;//[Offset: 0x308, Size: 0x4]
	int ConsumedAmmo;//[Offset: 0x31c, Size: 0x4]
	int AmmoConsumption;//[Offset: 0x324, Size: 0x4]
	int ReplicatedAmmoConsumption;//[Offset: 0x328, Size: 0x4]
	int AmmoToEnableFire;//[Offset: 0x330, Size: 0x4]
	int AmmoCapacity;//[Offset: 0x338, Size: 0x4]
	uint32 ReplicatedReloadState;//[Offset: 0x34c, Size: 0x4]
	int AutoReloadAmmoThreshold;//[Offset: 0x354, Size: 0x4]
	float ReloadInterval;//[Offset: 0x358, Size: 0x4]
	int ReloadAmmoPerInterval;//[Offset: 0x35c, Size: 0x4]
	float DelayOfEnableFireWhileEnablingEquipment;//[Offset: 0x3f0, Size: 0x4]
	bool bActivationRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 0x1]
	bool bAutoActivation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f4, Size: 0x1]
	bool bInitiallyReloaded;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f4, Size: 0x1]
	bool bReloadDisableFire;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f5, Size: 0x1]
	bool bFireDisableReload;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f5, Size: 0x1]
	void StopFire();// 0x37cd4c4
	void StartFire();// 0x37cd4a8
	void SetReloadInterval(float Value);// 0x37cd428
	void SetReloadAmmoPerInterval(int Value);// 0x37cd3a8
	void SetFireInterval(float Value);// 0x37cd328
	void SetAutoReloadAmmoThreshold(int Value);// 0x37cd2a8
	void SetAmmoToEnableFire(int Value);// 0x37cd228
	void SetAmmoConsumption(int Value);// 0x37cd1a8
	void SetAmmoCapacity(int Value);// 0x37cd128
	void Server_Reload(int NewAmmo);// 0x37cd074
	void Server_FireBurst(uint32 InBurstEnd);// 0x37ccfc0
	void Server_ConsumeAmmo(int AmmoToConsume);// 0x37ccf0c
	bool RequestDisableFire(int DisableReasonMask);// 0x37cce84
	bool RequestDisableEquipment(FName Reason);// 0x37cce04
	void RequestDeactivation();// 0x37ccde8
	void RequestConsumeAmmo(int AmmoToConsume);// 0x37ccd68
	void RequestActivation();// 0x37ccd4c
	float ReloadToEnableStateTime();// 0x37ccd1c
	float ReloadingEndTime();// 0x37cccec
	void ReloadImmediate(int NewAmmo);// 0x37ccc6c
	void ReloadFull();// 0x37ccc50
	void ReloadAmmoPerIntervalChanged();// 0x37ccc3c
	void Reload(int NewAmmo);// 0x37ccbbc
	void OnRep_ReplicatedReloadState();// 0x37ccba8
	void OnRep_ReplicatedFireInterval();// 0x37ccb94
	void OnRep_ReplicatedBurstEnd();// 0x37ccb80
	void OnRep_ReplicatedAmmoConsumption();// 0x37ccb6c
	void OnRep_ConsumedAmmo();// 0x37ccb58
	void OnRep_AmmoToEnableFire();// 0x37ccb44
	void OnRep_ActivationRequested();// 0x37ccb28
	void NetMulticast_ReplicateProperties(int InAmmoToEnableFire, int InAmmoCapacity, float InReloadInterval, int InReloadAmmoPerInterval, byte Mask);// 0x37cc990
	void NetMulticast_ConsumeAmmo(int AmmoToConsume);// 0x37cc910
	bool IsReloading();// 0x37cc8ec
	bool IsFireRequested();// 0x37cc8c8
	bool IsEquipmentDisabled();// 0x37cc8a4
	bool IsActive();// 0x37cc880
	int GetShotCount();// 0x379d98c
	float GetReloadInterval();// 0x37cc864
	int GetReloadAmmoPerInterval();// 0x37cc848
	int GetMinBurstLength();// 0x37cc818
	float GetLastReloadEventTime();// 0x37cc7fc
	float GetFireInterval();// 0x37cc7e0
	int GetDisableFireState();// 0x37cc7c4
	int GetConsumedAmmo();// 0x373cea8
	int GetAutoReloadAmmoThreshold();// 0x37cc7a8
	int GetAmmoToEnableFire();// 0x37cc78c
	int GetAmmoConsumption();// 0x373cec4
	int GetAmmoCapacity();// 0x37cc770
	int GetAmmoAfterReloadComplete();// 0x373d050
	int GetAmmo();// 0x373ce70
	bool CancelDisableFireRequest(int DisableReasonMask);// 0x37cc6e8
	bool CancelDisableEquipmentRequest(FName Reason);// 0x37cc668
	float CalculateReloadDuration(int DeltaAmmo);// 0x37cc5c8
	void BlueprintEnableEquipment();// 0x4528238
	void BlueprintDisableEquipment();// 0x4528238
	void BlueprintDidShot(int ShotNum);// 0x4528238

--------------------------------
Class: Equipment.Actor.Object
	Actor* EquipmentOwner;//[Offset: 0x280, Size: 0x4]
	int EquipmentSlotIndex;//[Offset: 0x284, Size: 0x4]
	EquipmentOwnerAndSlot RepEquipmentOwnerAndSlot;//[Offset: 0x288, Size: 0x8]
	interface class DoubleProperty* DamageableInterface;//[Offset: 0x2b0, Size: 0x8]
	interface class DoubleProperty* SlotDamageableInterface;//[Offset: 0x2b8, Size: 0x8]
	ActorComponentReference DamageControllerReference;//[Offset: 0x2c0, Size: 0x8]
	bool bSetCompatibleMasterPoseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	bool bDestroyWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8, Size: 0x1]
	void OwnerEndedPlay(Actor* EndedPlayActor, byte EndPlayReason);// 0x3524eb0
	void OwnerDestructed(Object* DestructedObject, interface classNone SourceDamageableInterface);// 0x3524dd8
	void OwnerDestroyed(Actor* DestroyedActor);// 0x3524d58
	void OnRepEquipmentOwnerAndSlot();// 0x3524d3c
	void Destructed(Object* DestructedObject, interface classNone SourceDamageableInterface);// 0x3524c64
	void BlueprintOwnerDestructed();// 0x4528238
	void BlueprintOwnerDestroyed();// 0x4528238
	void BlueprintEquipped(Actor* NewOwner, int NewSlotIndex, Actor* OldOwner, int OldSlotIndex);// 0x4528238
	void BlueprintDestructed();// 0x4528238

--------------------------------
Class: BallisticAimRotatorComponent.AimRotatorComponent.RotatorComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: AimRotatorComponent.RotatorComponent.SceneComponent.ActorComponent.Object
	float MaxHorizAccelerationPredictionTime;//[Offset: 0x2a8, Size: 0x4]
	float MaxUpAccelerationPredictionTime;//[Offset: 0x2ac, Size: 0x4]
	float MaxDownAccelerationPredictionTime;//[Offset: 0x2b0, Size: 0x4]
	float AimPredictionAccuracy;//[Offset: 0x2b4, Size: 0x4]

--------------------------------
Class: RotatorComponent.SceneComponent.ActorComponent.Object
	LookAtRotator LookAtRotator;//[Offset: 0x1f4, Size: 0x54]
	LookAtRotatorPtr GetLookAtRotator();// 0x37269e0

--------------------------------
Class: ProjectilesControllerComponent.SceneComponent.ActorComponent.Object
	class WeaponData* WeaponDataClass;//[Offset: 0x1f4, Size: 0x4]
	ActorComponentReference WeaponTransformComponentReference;//[Offset: 0x1f8, Size: 0x8]
	class ProjectileType* ProjectileTypeClass;//[Offset: 0x208, Size: 0x4]
	Vector2D SpreadScale;//[Offset: 0x20c, Size: 0x8]
	Vector2D AdditionalSpread;//[Offset: 0x214, Size: 0x8]
	Vector2D DynamicAccuracyDegradationToSpreadScaleMultipliers;//[Offset: 0x21c, Size: 0x8]
	Vector2D DynamicAccuracyDegradationToAdditionalSpreadMultipliers;//[Offset: 0x224, Size: 0x8]
	int SpreadSequenceModulation;//[Offset: 0x230, Size: 0x4]
	float DamageScale;//[Offset: 0x234, Size: 0x4]
	float AdditionalDamage;//[Offset: 0x238, Size: 0x4]
	void WeaponActiveStateChanged(bool bWeaponActive, interface classNone Weapon);// 0x37c9608
	void TeamMemberAdded(Team* Team, interface classNone Member);// 0x37c9530

--------------------------------
Class: WeaponData.Object
	Actor* Weapon;//[Offset: 0x14c, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x150, Size: 0x4]
	Controller* InstigatorController;//[Offset: 0x154, Size: 0x4]
	interface class FloatProperty* DamageCollector;//[Offset: 0x158, Size: 0x8]
	interface class DoubleProperty* CollisionParams;//[Offset: 0x160, Size: 0x8]
	void OnInstigatorControllerChanged(Controller* NewController, Controller* OldController, Pawn* Pawn);// 0x37d0ccc
	void HandleInstigatorControllerEndPlay(Actor* EndedPlayController, byte EndPlayReason);// 0x37d0c10
	void HandleInstigatorControllerDestroyed(Actor* EndedPlayController);// 0x37d0b98
	Actor* GetWeapon();// 0x37d0b7c
	int GetTeamIndex();// 0x37d0b60
	byte GetNetRole();// 0x37d0b44
	Controller* GetInstigatorController();// 0x3719bf0
	Pawn* GetInstigator();// 0x3719c0c
	void BlueprintWeaponActiveStateChanged(bool bActive);// 0x4528238

--------------------------------
Class: ProjectileType.Object
	bool bExecuteBlueprintUpdateProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bExecuteBlueprintProjectileSpawned;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bExecuteBlueprintProjectileWillRemoved;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bExecuteBlueprintProcessHitProjectiles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bExecuteBlueprintProcessMissProjectiles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool bUpdateProjectileFrequently;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bSpawnClientProjectileWithoutEffect;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	int Capabilities;//[Offset: 0x20, Size: 0x4]
	byte StaticTraceChannel;//[Offset: 0x24, Size: 0x1]
	byte DynamicTraceChannel;//[Offset: 0x25, Size: 0x1]
	float StartSpeed;//[Offset: 0x28, Size: 0x4]
	float MaxSpeed;//[Offset: 0x30, Size: 0x4]
	float MaxRange;//[Offset: 0x34, Size: 0x4]
	float MaxProjectileLifeTime;//[Offset: 0x38, Size: 0x4]
	float HorizontalSpread;//[Offset: 0x3c, Size: 0x4]
	float VerticalSpread;//[Offset: 0x40, Size: 0x4]
	class ProjectileEffect* ProjectileEffectClass1;//[Offset: 0x44, Size: 0x4]
	uint32 MinShotDeltaForProjectileEffect1;//[Offset: 0x48, Size: 0x4]
	float MinIntervalForProjectileEffect1;//[Offset: 0x4c, Size: 0x4]
	class ProjectileEffect* ProjectileEffectClass2;//[Offset: 0x50, Size: 0x4]
	uint32 MinShotDeltaForProjectileEffect2;//[Offset: 0x54, Size: 0x4]
	float MinIntervalForProjectileEffect2;//[Offset: 0x58, Size: 0x4]
	class Effect* HitEffectClass;//[Offset: 0x60, Size: 0x28]
	class ProjectileDamageType* HitDamageTypeClass;//[Offset: 0x88, Size: 0x28]
	float GetStartSpeed();// 0x36fd5b4
	Vector2D GetSpread();// 0x37cb4dc
	float GetMaxSpeed();// 0x37cb4c0
	float GetMaxRange();// 0x37cb4a4
	float GetMaxLifetime();// 0x37cb488
	int GetCapabilities();// 0x36fc854
	void BlueprintUpdateProjectile(ProjectilePtr Projectile, float DeltaTime);// 0x4528238
	void BlueprintProjectileWillRemoved(ProjectilePtr Projectile);// 0x4528238
	void BlueprintProjectileSpawned(ProjectilePtr Projectile);// 0x4528238
	bool BlueprintProcessMissProjectiles(out const ProjectilePtr[] Projectiles);// 0x4528238
	bool BlueprintProcessHitProjectiles(out const ProjectilePtr[] Projectiles);// 0x4528238

--------------------------------
Class: ProjectileEffect.Object
	ProjectileSubEffect*[] SubEffects;//[Offset: 0x60, Size: 0xc]
	ProjectileSubEffect*[] FrequentlyUpdatedSubEffects;//[Offset: 0x6c, Size: 0xc]
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x7c, Size: 0x4]
	ParticleSystemComponentPool* PSCPool;//[Offset: 0x80, Size: 0x4]
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: ProjectileSubEffect.Object
	float Radius;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ParticleSystemComponentPool.ObjectPool.Object

--------------------------------
Class: ObjectPool.Object
	Object*[] Objects;//[Offset: 0x1c, Size: 0xc]
	Object* KeyObject;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: Effect.Object
	float AudioEffectSkipTime;//[Offset: 0x1c, Size: 0x4]
	float VisualEffectSkipTimeQualityLevel0;//[Offset: 0x24, Size: 0x4]
	float VisualEffectSkipTimeQualityLevel1;//[Offset: 0x28, Size: 0x4]
	float VisualEffectSkipTimeQualityLevel2;//[Offset: 0x2c, Size: 0x4]
	float VisualEffectSkipTimeQualityLevel3;//[Offset: 0x30, Size: 0x4]
	SurfaceEffectSettings[] SurfaceEffectTypes;//[Offset: 0x34, Size: 0xc]
	VisualEffectLOD[] VisualLODs;//[Offset: 0x64, Size: 0xc]
	class EffectType* AudioEffectTypeClass;//[Offset: 0x70, Size: 0x4]
	int AudioEffectSkipTimeIndex;//[Offset: 0x78, Size: 0x4]
	SoundBase* Sound;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: SurfaceEffectSettings
	byte Surface;//[Offset: 0x0, Size: 0x1]
	class Effect* EffectClass;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VisualEffectLOD
	float MaxDistance;//[Offset: 0x0, Size: 0x4]
	SubEffectEntry[] SubEffects;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: SubEffectEntry
	SubEffect* SubEffect;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubEffect.Object
	class EffectType* EffectTypeClass;//[Offset: 0x1c, Size: 0x4]
	int SkipTimeIndex;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: EffectType.Object
	float SkipSize;//[Offset: 0x1c, Size: 0x4]
	float SkipTime0;//[Offset: 0x20, Size: 0x4]
	float SkipTime1;//[Offset: 0x24, Size: 0x4]
	float SkipTime2;//[Offset: 0x28, Size: 0x4]
	float SkipTime3;//[Offset: 0x2c, Size: 0x4]
	float SkipTime4;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ProjectileDamageType.DamageType.Object
	bool bExecuteBlueprintProcessProjectilesDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float Damage;//[Offset: 0x34, Size: 0x4]
	enum DamageKind;//[Offset: 0x38, Size: 0x1]
	bool BlueprintProcessProjectilesDamage(out const ProjectilePtr[] Projectiles, float ActualDamage);// 0x4528238

--------------------------------
Class: ProjectilePtr.StructPtr

--------------------------------
Class: EquipmentOwnerAndSlot
	Actor* Owner;//[Offset: 0x0, Size: 0x4]
	int SlotIndex;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ArrayOfComponentAndTransform
	ActorComponentReference ComponentReference_2_748596744F1DDA21FEE69890FFB0549C;//[Offset: 0x0, Size: 0x8]
	Transform[] Transforms_6_DCA01EDE4A3E0D57FBB531B5FD766DD5;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: WeaponWidgetAmmoAndReloadArcProgressComponent_C.WeaponWidgetAmmoAndReloadComponent_C.WeaponWidgetComponent_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CWDirectionMultiplier;//[Offset: 0x7e4, Size: 0x4]
	float ProgressAngleMin;//[Offset: 0x7e8, Size: 0x4]
	LinearColor ProgressCenterOffsetAndDoubleScale;//[Offset: 0x7ec, Size: 0x10]
	Vector2D TimerToEnableFireOffset;//[Offset: 0x7fc, Size: 0x8]
	Margin TimerToEnableFirePadding;//[Offset: 0x804, Size: 0x10]
	int TimerToEnableFireFontSize;//[Offset: 0x814, Size: 0x4]
	float TimerToEnableFireDesiredWidth;//[Offset: 0x818, Size: 0x4]
	float[] LayoutCWDirectionMultipliers;//[Offset: 0x81c, Size: 0xc]
	Vector2D[] LayoutTimerToEnableFireOffsets;//[Offset: 0x828, Size: 0xc]
	Margin[] LayoutTimerToEnableFirePaddings;//[Offset: 0x834, Size: 0xc]
	float[] LayoutTimerToEnableFireDesiredWidths;//[Offset: 0x840, Size: 0xc]
	MaterialInterface* ProgressMaterial;//[Offset: 0x84c, Size: 0x4]
	float ProgressTotalAngleRange;//[Offset: 0x850, Size: 0x4]
	bool bVisibleTimerToFireEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]
	int K2Node_Event_LayoutIndex;//[Offset: 0x858, Size: 0x4]
	float CallFunc_Array_Get_Item;//[Offset: 0x85c, Size: 0x4]
	Vector2D CallFunc_Array_Get_Item1;//[Offset: 0x860, Size: 0x8]
	float CallFunc_Array_Get_Item2;//[Offset: 0x868, Size: 0x4]
	Margin CallFunc_Array_Get_Item3;//[Offset: 0x86c, Size: 0x10]

--------------------------------
Class: WeaponWidgetAmmoAndReloadComponent_C.WeaponWidgetComponent_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector2D AmmoAndReloadProgressSize;//[Offset: 0x760, Size: 0x8]
	Vector2D AmmoAndReloadProgressScale;//[Offset: 0x768, Size: 0x8]
	Anchors AmmoAndReloadProgressAnchors;//[Offset: 0x770, Size: 0x10]
	Vector2D AmmoAndReloadProgressAlignment;//[Offset: 0x780, Size: 0x8]
	Vector2D[] LayoutAmmoAndReloadProgressScale;//[Offset: 0x788, Size: 0xc]
	Anchors[] LayoutAmmoAndReloadProgressAnchors;//[Offset: 0x794, Size: 0xc]
	Vector2D[] LayoutAmmoAndReloadProgressAlignments;//[Offset: 0x7a0, Size: 0xc]
	float ProgressWidth;//[Offset: 0x7ac, Size: 0x4]
	float ProgressAngleRange;//[Offset: 0x7b0, Size: 0x4]
	int MaxProgressTile;//[Offset: 0x7b4, Size: 0x4]
	float MaxReloadingTickInterval;//[Offset: 0x7b8, Size: 0x4]
	bool bUsePawnOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 0x1]
	int K2Node_Event_LayoutIndex;//[Offset: 0x7c0, Size: 0x4]
	Vector2D CallFunc_Array_Get_Item;//[Offset: 0x7c4, Size: 0x8]
	Vector2D CallFunc_Array_Get_Item1;//[Offset: 0x7cc, Size: 0x8]
	Anchors CallFunc_Array_Get_Item2;//[Offset: 0x7d4, Size: 0x10]

--------------------------------
Class: WeaponWidgetComponent_C.WidgetComponent_Advanced_C.LayoutableWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* WeaponWidgetClass;//[Offset: 0x69c, Size: 0x4]
	PlayerController* PlayerController;//[Offset: 0x6a0, Size: 0x4]
	float BaseAdditionalCameraDistance;//[Offset: 0x6a4, Size: 0x4]
	float DeltaAdditionalCameraDistanceMultiplier;//[Offset: 0x6a8, Size: 0x4]
	Transform[] LayoutTransforms;//[Offset: 0x6ac, Size: 0xc]
	Vector2D[] LayoutPivot;//[Offset: 0x6b8, Size: 0xc]
	Actor* WeaponOwner;//[Offset: 0x6c4, Size: 0x4]
	Transform InitialTransform;//[Offset: 0x6d0, Size: 0x30]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x701, Size: 0x1]
	bool K2Node_CustomEvent_IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x702, Size: 0x1]
	interface class * K2Node_CustomEvent_Weapon;//[Offset: 0x704, Size: 0x8]
	enum CallFunc_QueryInterfaceInpure_Branches;//[Offset: 0x70c, Size: 0x1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 0x1]
	enum CallFunc_QueryInterfaceInpure_Branches1;//[Offset: 0x70e, Size: 0x1]
	bool K2Node_SwitchEnum1_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70f, Size: 0x1]
	int CallFunc_GetEquipmentOwnerAndSlot_SlotIndex;//[Offset: 0x710, Size: 0x4]
	Pawn* K2Node_DynamicCast_AsPawn;//[Offset: 0x714, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 0x1]
	Controller* K2Node_CustomEvent_NewController;//[Offset: 0x71c, Size: 0x4]
	Controller* K2Node_CustomEvent_OldController;//[Offset: 0x720, Size: 0x4]
	Pawn* K2Node_CustomEvent_Pawn;//[Offset: 0x724, Size: 0x4]
	PlayerController* K2Node_DynamicCast_AsPlayer_Controller;//[Offset: 0x728, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 0x1]
	Pawn* K2Node_DynamicCast_AsPawn1;//[Offset: 0x730, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x738, Size: 0x10]
	enum CallFunc_QueryInterfaceInpure_Branches2;//[Offset: 0x748, Size: 0x1]
	bool K2Node_SwitchEnum2_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x750, Size: 0x10]
	void WeaponActiveStateChanged(bool bpp__IsActive__pf, out const interface classNone bpp__Weapon__pf);// 0x3fb2dc0
	void Show();// 0x3e91bb0
	void SetupScale();// 0x3eb09f8
	void SetupLayoutWithIndex(int bpp__LayoutIndex__pf);// 0x3fb2d40
	void SetupLayout();// 0x3e46eb0
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3fb2cc0
	void InitLayout();// 0x3eb0a14
	void Hide();// 0x3eaf31c
	void Enable();// 0x3e480d4
	void Disable();// 0x3e491a8
	void ControllerChanged(Controller* bpp__NewController__pf, Controller* bpp__OldController__pf, Pawn* bpp__Pawn__pf);// 0x3fb2bb8
	void ControllerChangedEvent__DelegateSignature(Controller* bpp__NewController__pf, Controller* bpp__OldController__pf, Pawn* bpp__Pawn__pf);// 0x4528238

--------------------------------
Class: BallisticAimBoneRotatorComponent.AimBoneRotatorComponent.BoneRotatorComponent.ActorComponent.Object

--------------------------------
Class: ShootingEffectsComponent.SceneComponent.ActorComponent.Object
	class Effect* EffectClass;//[Offset: 0x1f0, Size: 0x28]
	float PlaySoundMinInterval;//[Offset: 0x240, Size: 0x4]
	int MaxNumSimultaneouslySounds;//[Offset: 0x244, Size: 0x4]
	int MinRecoilImpulseShotDelta;//[Offset: 0x280, Size: 0x4]
	float MinRecoilImpulseInterval;//[Offset: 0x284, Size: 0x4]
	PhysicalAnimHitReactionComponent* PhysicalReactionComponent;//[Offset: 0x28c, Size: 0x4]
	Vector LocalRecoilImpulseDirection;//[Offset: 0x290, Size: 0xc]
	float RecoilImpulseMagnitude;//[Offset: 0x29c, Size: 0x4]
	void WeaponActiveStateChanged(bool bWeaponActive, interface classNone WeaponInterface);// 0x37cbfbc
	void OwnerEquipped(Actor* NewEquipmentOwner, int NewSlotIndex, Actor* OldEquipmentOwner, int OldSlotIndex);// 0x37cbe6c

--------------------------------
Class: WGMMS2_C.Weapon_C.ShootingWeapon.Equipment.Actor.Object
	WeaponWidgetComponent_C* Widget;//[Offset: 0x5dc, Size: 0x4]
	ProjectilesControllerComponent* ProjectilesController;//[Offset: 0x5e0, Size: 0x4]
	SceneComponent* TargetPoint;//[Offset: 0x5e4, Size: 0x4]
	CritExecutableDamageController_C* MainDamageController;//[Offset: 0x5e8, Size: 0x4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x5ec, Size: 0x4]
	ShootingEffectsComponent* ShootingEffects;//[Offset: 0x5f0, Size: 0x4]

--------------------------------
Class: GarageAIController_C.AIController.Controller.Actor.Object
	float MaxDistanceToProjectPosition;//[Offset: 0x350, Size: 0x4]
	Vector[] PendingMovePositions;//[Offset: 0x354, Size: 0xc]
	PlayerProfileItem* ProfileItem;//[Offset: 0x360, Size: 0x4]
	Vector PositionInSquad;//[Offset: 0x364, Size: 0xc]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	bool PositionInSquadInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x378, Size: 0x10]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller;//[Offset: 0x388, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	AIRequestID K2Node_CustomEvent_RequestID;//[Offset: 0x390, Size: 0x4]
	byte K2Node_CustomEvent_Result;//[Offset: 0x394, Size: 0x1]
	GarageController_C* K2Node_CustomEvent_GarageController;//[Offset: 0x398, Size: 0x4]
	Vector CallFunc_Array_Get_Item;//[Offset: 0x39c, Size: 0xc]
	bool CallFunc_IsControlledPawnSelected_IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x3a9, Size: 0x1]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller1;//[Offset: 0x3ac, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	bool CallFunc_ProjectPositionAndMove_bMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 0x1]
	Pawn* K2Node_Event_PossessedPawn;//[Offset: 0x3b4, Size: 0x4]
	bool CallFunc_ProjectPositionAndMove_bMoving1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	WalkMovementComponent* K2Node_DynamicCast_AsWalk_Movement_Component;//[Offset: 0x3bc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate1;//[Offset: 0x3c8, Size: 0x10]
	PlayerController* CallFunc_GetPlayerController_ReturnValue2;//[Offset: 0x3d8, Size: 0x4]
	GarageController_C* K2Node_DynamicCast_AsGarage_Controller2;//[Offset: 0x3dc, Size: 0x4]
	bool K2Node_DynamicCast_bSuccess3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	void OnStateChanged__DelegateSignature(GarageController_C* bpp__GarageController__pf);// 0x4528238
	void UserConstructionScript();// 0x3e61b14
	void SetPositionInSquad(Vector bpp__Position__pf);// 0x3e96c64
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x3e96be4
	void ReceiveBeginPlay();// 0x3e61c68
	void ProjectPositionAndMove(Vector bpp__Position__pf, bool bpp__bCancelCurrentMove__pf, out bool bpp__bMoving__pf);// 0x3e96ac0
	void OnPossess(Pawn* bpp__PossessedPawn__pf);// 0x3e96a40
	void MoveCompleted(AIRequestID bpp__RequestID__pf, byte bpp__Result__pf);// 0x3e9697c
	void IsControlledPawnSelected(GarageController_C* bpp__GarageController__pf, out bool bpp__IsSelected__pf);// 0x3e968a8
	void GarageControllerStateChanged(GarageController_C* bpp__GarageController__pf);// 0x3e96828
	void AIMoveCompletedSignature__DelegateSignature(AIRequestID bpp__RequestID__pf, byte bpp__Result__pf);// 0x4528238

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x320, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x324, Size: 0x4]
	BrainComponent* BrainComponent;//[Offset: 0x328, Size: 0x4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x32c, Size: 0x4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x330, Size: 0x4]
	BlackboardComponent* Blackboard;//[Offset: 0x334, Size: 0x4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x338, Size: 0x4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x33c, Size: 0x4]
	delegate ReceiveMoveCompleted;//[Offset: 0x340, Size: 0xc]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x5f410f8
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x5f41080
	void SetMoveBlockDetection(bool bEnable);// 0x5f41000
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x5f40f78
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x4528238
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x4528238
	void OnPossess(Pawn* PossessedPawn);// 0x4528238
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x5f40eb4
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bIncludesAgentRadius, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x5f40c0c
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bIncludesAgentRadius, bool bIncludesGoalRadius, bool bIncludesGoalHeight, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x5f40928
	void K2_SetFocus(Actor* NewFocus);// 0x5f408b0
	void K2_SetFocalPoint(Vector FP);// 0x5f40840
	void K2_ClearFocus();// 0x5f4082c
	bool HasPartialPath();// 0x5f40804
	PathFollowingComponent* GetPathFollowingComponent();// 0x373cec4
	byte GetMoveStatus();// 0x5f407dc
	Vector GetImmediateMoveDestination();// 0x5f40794
	Actor* GetFocusActor();// 0x5f4076c
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x5f406d4
	Vector GetFocalPoint();// 0x5f4068c
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x373ce8c
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x5f40614

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	delegate StatusChangedEvent;//[Offset: 0xcc, Size: 0xc]
	NavMovementComponent* MovementComp;//[Offset: 0xec, Size: 0x4]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x4]
	float MinAgentRadiusPct;//[Offset: 0x114, Size: 0x4]
	float MinAgentHalfHeightPct;//[Offset: 0x118, Size: 0x4]
	bool bUseBlockDetection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19c, Size: 0x1]
	float BlockDetectionSampleDistance;//[Offset: 0x1a4, Size: 0x4]
	float BlockDetectionAllSamplesDistance;//[Offset: 0x1a8, Size: 0x4]
	float BlockDetectionInterval;//[Offset: 0x1ac, Size: 0x4]
	int BlockDetectionSampleCount;//[Offset: 0x1b0, Size: 0x4]
	float ConstBrakingDistanceScale;//[Offset: 0x258, Size: 0x4]
	float SquareSpeedBrakingDistanceScale;//[Offset: 0x25c, Size: 0x4]
	MovementAccelerationData AccelerationDataScale;//[Offset: 0x264, Size: 0x10]
	float BrakeDistanceDecelerationFactor;//[Offset: 0x284, Size: 0x4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x5f62b18
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x5f629a8
	Vector GetPathDestination();// 0x5f62960
	byte GetPathActionType();// 0x5f62938

--------------------------------
Class: MovementAccelerationData
	float BrakeAcceleration;//[Offset: 0x0, Size: 0x4]
	float SideAcceleration;//[Offset: 0x4, Size: 0x4]
	float UpAcceleration;//[Offset: 0x8, Size: 0x4]
	float DownAcceleration;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xac, Size: 0x4]
	AIController* AIOwner;//[Offset: 0xb0, Size: 0x4]
	void StopLogic(FString Reason);// 0x5f4e174
	void RestartLogic();// 0x3e325f8
	bool IsRunning();// 0x5f4e144
	bool IsPaused();// 0x5f4e114

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xa8, Size: 0x4]
	BlackboardData* BlackboardAsset;//[Offset: 0xac, Size: 0x4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xc8, Size: 0xc]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x5f4be98
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x5f4bd58
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x5f4bc84
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x5f4bbb0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x5f4badc
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x5f4ba08
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x5f4b934
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x5f4b860
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x5f4b78c
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x5f4b6b0
	bool IsVectorValueSet(out const FName KeyName);// 0x5f4b61c
	Vector GetValueAsVector(out const FName KeyName);// 0x5f4b578
	FString GetValueAsString(out const FName KeyName);// 0x5f4b488
	Rotator GetValueAsRotator(out const FName KeyName);// 0x5f4b3e4
	Object* GetValueAsObject(out const FName KeyName);// 0x5f4b350
	FName GetValueAsName(out const FName KeyName);// 0x5f4b2b4
	int GetValueAsInt(out const FName KeyName);// 0x5f4b220
	float GetValueAsFloat(out const FName KeyName);// 0x5f4b18c
	byte GetValueAsEnum(out const FName KeyName);// 0x5f4b0f8
	class Object GetValueAsClass(out const FName KeyName);// 0x5f4b064
	bool GetValueAsBool(out const FName KeyName);// 0x5f4afd0
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x5f4aee8
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x5f4ae00
	void ClearValue(out const FName KeyName);// 0x5f4ad74

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 0x4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 0xc]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xa8, Size: 0xc]
	class AISense* DominantSense;//[Offset: 0xb4, Size: 0x4]
	AIController* AIOwner;//[Offset: 0xc8, Size: 0x4]
	delegate OnPerceptionUpdated;//[Offset: 0x128, Size: 0xc]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x134, Size: 0xc]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x5f43028
	void RequestStimuliListenerUpdate();// 0x5f43014
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x5f42f58
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x5f42eb8
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5f42dd4
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5f42cf0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5f42c0c
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x5f42b10

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 0x4]
	float MaxAge;//[Offset: 0x20, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 0x4]
	enum NotifyType;//[Offset: 0x20, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 0xc]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x5f43f14
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x5f43e9c
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x5f43d9c
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x5f43ce0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x5f43b28

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x28, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 0xc]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xa8, Size: 0x4]
	PawnActionStack[] ActionStacks;//[Offset: 0xac, Size: 0xc]
	PawnActionEvent[] ActionEvents;//[Offset: 0xb8, Size: 0xc]
	PawnAction* CurrentAction;//[Offset: 0xc4, Size: 0x4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x5f645a8
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x5f644a0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x5f64420
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x5f643a0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 0x4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 0x4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 0x4]
	Object* Instigator;//[Offset: 0x28, Size: 0x4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 0x4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1]
	byte GetActionPriority();// 0x5f6328c
	void Finish(byte WithResult);// 0x5f63204
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x5f63148

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xb0, Size: 0xc]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xbc, Size: 0xc]
	GameplayTask*[] TickingTasks;//[Offset: 0xd4, Size: 0xc]
	GameplayTask*[] KnownTasks;//[Offset: 0xe0, Size: 0xc]
	delegate OnClaimedResourcesChange;//[Offset: 0xf0, Size: 0xc]
	void OnRep_SimulatedTasks();// 0x5e1acac
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x5e1aa2c

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 0x4]
	void ReadyForActivation();// 0x5e18f54
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x4528238
	void EndTask();// 0x5e18f40

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 0xc]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x4]
	float TravelCostOverride;//[Offset: 0x4, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x20, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x24, Size: 0x4]
	Color DrawColor;//[Offset: 0x28, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x2c, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 0x4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 0x4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 0xc]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 0xc]
	BTService*[] Services;//[Offset: 0x48, Size: 0xc]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 0xc]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 0x4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 0x4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 0xc]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 0xc]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x3c, Size: 0x4]
	float RandomDeviation;//[Offset: 0x40, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: R2M1_C.Robot_C.BattlePawn.Pawn.Actor.Object
	CritExecutableDamageController_C* TowerRightDamageController;//[Offset: 0x5a8, Size: 0x4]
	CritExecutableDamageController_C* TowerLeftDamageController;//[Offset: 0x5ac, Size: 0x4]
	CritExecutableDamageController_C* TowerBackDamageController;//[Offset: 0x5b0, Size: 0x4]
	CritExecutableDamageController_C* TowerFrontDamageController;//[Offset: 0x5b4, Size: 0x4]
	CritExecutableDamageController_C* BaseBackDamageController;//[Offset: 0x5b8, Size: 0x4]
	CritExecutableDamageController_C* BaseFrontDamageController;//[Offset: 0x5bc, Size: 0x4]
	ShapeDamageDispatcherComponent* ShapeDamageDispatcher;//[Offset: 0x5c0, Size: 0x4]
	WalkMovementControllerComponent_C* MovementController;//[Offset: 0x5c4, Size: 0x4]
	WalkMovementComponent* Movement;//[Offset: 0x5c8, Size: 0x4]
	AnimSyncAudioComponent* RunSound;//[Offset: 0x5cc, Size: 0x4]
	AnimSyncAudioComponent* WalkSound;//[Offset: 0x5d0, Size: 0x4]
	SceneComponent* TargetPoint_Tower;//[Offset: 0x5d4, Size: 0x4]
	SceneComponent* TargetPoint_RightLeg;//[Offset: 0x5d8, Size: 0x4]
	SceneComponent* TargetPoint_LeftLeg;//[Offset: 0x5dc, Size: 0x4]
	CritExecutableDamageController_C* Leg1DamageController;//[Offset: 0x5e0, Size: 0x4]
	CritExecutableDamageController_C* Leg0DamageController;//[Offset: 0x5e4, Size: 0x4]
	CritExecutableDamageController_C* TowerDamageController;//[Offset: 0x5e8, Size: 0x4]
	AimBoneRotatorComponent* AimTowerRotation;//[Offset: 0x5ec, Size: 0x4]

--------------------------------
Class: WACL1_C.Weapon_C.ShootingWeapon.Equipment.Actor.Object
	WeaponWidgetAmmoAndReloadArcProgressComponent_C* Widget;//[Offset: 0x5dc, Size: 0x4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x5e0, Size: 0x4]
	BallisticAimRotatorComponent* BallisticAimRotator;//[Offset: 0x5e4, Size: 0x4]
	ShootingEffectsComponent* ShellsEffects;//[Offset: 0x5e8, Size: 0x4]
	SceneComponent* TargetPoint;//[Offset: 0x5ec, Size: 0x4]
	CritExecutableDamageController_C* MainDamageController;//[Offset: 0x5f0, Size: 0x4]
	ProjectilesControllerComponent* ProjectilesController;//[Offset: 0x5f4, Size: 0x4]
	ShootingEffectsComponent* ShootingEffects;//[Offset: 0x5f8, Size: 0x4]
	Object* K2Node_Event_EquipmentOwner;//[Offset: 0x5fc, Size: 0x4]
	int K2Node_Event_SlotIndex;//[Offset: 0x600, Size: 0x4]
	float CallFunc_BreakVector_X;//[Offset: 0x604, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x608, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x60c, Size: 0x4]

--------------------------------
