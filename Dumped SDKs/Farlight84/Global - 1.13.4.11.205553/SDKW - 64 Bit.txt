Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1e0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x650, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6e0, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x69d0e48
	void HandleTimelineScrubbed();// 0x69d0e7c

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x4c8f29c

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x238, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x23c, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23d, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23d, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23d, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23d, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23d, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23d, Size: 0x1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x240, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0x250, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x260, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0x270, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x280, Size: 0x10]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x290, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x290, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x290, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x290, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x291, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x298, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x2a0, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2a8, Size: 0x4]
	float KillZ;//[Offset: 0x2ac, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2b0, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2b8, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2bc, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2c0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c8, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2d0, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2d8, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2e0, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2e4, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2f0, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2f4, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2f8, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x300, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x320, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x344, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x348, Size: 0x8]
	float TimeDilation;//[Offset: 0x350, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x354, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x358, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x35c, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x360, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x364, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x368, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x36c, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3b0, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3b8, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c8, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3d8, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3e0, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3e8, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3f0, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x400, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x69d2158

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x38]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x61, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x62, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x62, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x63, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x63, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x63, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x6a, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x6b, Size: 0x1]
	byte RemoteRole;//[Offset: 0x6c, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x70, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xa4, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa8, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xb0, Size: 0x40]
	Actor* Owner;//[Offset: 0xf0, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf8, Size: 0x8]
	byte Role;//[Offset: 0x100, Size: 0x1]
	byte NetDormancy;//[Offset: 0x101, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x102, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x103, Size: 0x1]
	int InputPriority;//[Offset: 0x104, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x108, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x110, Size: 0x4]
	int NetTag;//[Offset: 0x114, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x118, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x11c, Size: 0x4]
	float NetPriority;//[Offset: 0x120, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x128, Size: 0x8]
	Actor*[] Children;//[Offset: 0x130, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x140, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x148, Size: 0x10]
	FName[] Layers;//[Offset: 0x160, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x170, Size: 0x8]
	FName[] Tags;//[Offset: 0x180, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x190, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x191, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x192, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x193, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x194, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x195, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x196, Size: 0x1]
	delegate OnClicked;//[Offset: 0x197, Size: 0x1]
	delegate OnReleased;//[Offset: 0x198, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x199, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x19a, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x19b, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x19c, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x19d, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x19e, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x19f, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x200, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x210, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x675717c
	void UserConstructionScript();// 0x4c8f29c
	void TearOff();// 0x675b994
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x67584d8
	void SetTickGroup(byte NewTickGroup);// 0x675722c
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x6757e88
	void SetReplicates(bool bInReplicates);// 0x675b820
	void SetReplicateMovement(bool bInReplicateMovement);// 0x675b76c
	void SetOwner(Actor* NewOwner);// 0x675785c
	void SetNetDormancy(byte NewDormancy);// 0x67576ec
	void SetLifeSpan(float InLifespan);// 0x6757b1c
	void SetAutoDestroyWhenFinished(bool bVal);// 0x675b8e8
	void SetActorTickInterval(float TickInterval);// 0x6757958
	void SetActorTickEnabled(bool bEnabled);// 0x6757a34
	void SetActorScale3D(Vector NewScale3D);// 0x675a79c
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x67590ec
	void SetActorHiddenInGame(bool bNewHidden);// 0x6759000
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x6758f54
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6757f6c
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6758018
	void ReceiveTick(float DeltaSeconds);// 0x4c8f29c
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x4c8f29c
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x4c8f29c
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x4c8f29c
	void ReceiveEndPlay(byte EndPlayReason);// 0x4c8f29c
	void ReceiveDestroyed();// 0x4c8f29c
	void ReceiveBeginPlay();// 0x4c8f29c
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4c8f29c
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x4c8f29c
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x4c8f29c
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x4c8f29c
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x4c8f29c
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x4c8f29c
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x4c8f29c
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x4c8f29c
	void ReceiveActorEndCursorOver();// 0x4c8f29c
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x4c8f29c
	void ReceiveActorBeginCursorOver();// 0x4c8f29c
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x6757020
	void OnRep_ReplicateMovement();// 0x675b9b0
	void OnRep_ReplicatedMovement();// 0x6757908
	void OnRep_Owner();// 0x675b8cc
	void OnRep_Instigator();// 0x675b6fc
	void OnRep_AttachmentReplication();// 0x675b718
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x6756998
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x6757ddc
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x6757440
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6759c20
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x675aa44
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6759190
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6759378
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6759528
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x675a840
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x675af2c
	void K2_OnReset();// 0x4c8f29c
	void K2_OnEndViewTarget(PlayerController* PC);// 0x4c8f29c
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x4c8f29c
	SceneComponent* K2_GetRootComponent();// 0x675ab80
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x6756d78
	Rotator K2_GetActorRotation();// 0x675ae34
	Vector K2_GetActorLocation();// 0x675b0e8
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x6758300
	void K2_DestroyComponent(ActorComponent* Component);// 0x6758c9c
	void K2_DestroyActor();// 0x6758f18
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x675892c
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x67585bc
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x67587b8
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x6758b28
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6759e14
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6759ffc
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x675a1ac
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67596d8
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x67598c0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6759a70
	bool IsOverlappingActor(const Actor* Other);// 0x6757790
	bool IsChildActor();// 0x67576a0
	bool IsActorTickEnabled();// 0x67579fc
	bool IsActorBeingDestroyed();// 0x6757d88
	bool HasAuthority();// 0x6758ef4
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x675a4b4
	Vector GetVelocity();// 0x675ab40
	Transform GetTransform();// 0x675b140
	bool GetTickableWhenPaused();// 0x6757f34
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x675a60c
	byte GetRemoteRole();// 0x675b734
	ChildActorComponent* GetParentComponent();// 0x6757564
	Actor* GetParentActor();// 0x6757530
	Actor* GetOwner();// 0x6757840
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x6757bc8
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x6757c88
	byte GetLocalRole();// 0x675b750
	float GetLifeSpan();// 0x6757ae0
	Controller* GetInstigatorController();// 0x675b17c
	Pawn* GetInstigator();// 0x675b1b0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x675b1e4
	float GetInputAxisValue(const FName InputAxisName);// 0x675b4f8
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x675b370
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x675a35c
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x675a560
	float GetGameTimeSinceCreation();// 0x6757da8
	float GetDotProductTo(const Actor* OtherActor);// 0x675a408
	float GetDistanceTo(const Actor* OtherActor);// 0x675a6b8
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x6756c40
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x6756b48
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x6756e70
	FName GetAttachParentSocketName();// 0x67573d8
	Actor* GetAttachParentActor();// 0x675740c
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x67572d0
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x6757598
	Vector GetActorUpVector();// 0x675ad8c
	float GetActorTimeDilation();// 0x675821c
	float GetActorTickInterval();// 0x6757924
	Vector GetActorScale3D();// 0x675a764
	Vector GetActorRightVector();// 0x675ad38
	Vector GetActorRelativeScale3D();// 0x67590b4
	Vector GetActorForwardVector();// 0x675ade0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x6756f1c
	bool GetActorEnableCollision();// 0x6758f34
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x675ab9c
	void ForceNetUpdate();// 0x6757160
	void FlushNetDormancy();// 0x67576d8
	void EnableInput(PlayerController* PlayerController);// 0x675b650
	void DisableInput(PlayerController* PlayerController);// 0x675b5a4
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x675842c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x67580c4
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6758170
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x6758d40
	bool ActorHasTag(FName Tag);// 0x6758250

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xd0, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe8, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x124, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x130, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x13c, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x148, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x154, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x154, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x154, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x154, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x155, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x155, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x155, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x155, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x155, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x155, Size: 0x1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x155, Size: 0x1]
	byte Mobility;//[Offset: 0x157, Size: 0x1]
	byte DetailMode;//[Offset: 0x158, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x159, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x696d460
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x696df4c
	void SetWorldScale3D(Vector NewScale);// 0x696f084
	void SetVisibilityByFlag(bool bNewVisibility, int Flag, bool bPropagateToChildren);// 0x696d528
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x696d668
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x6970498
	void SetRelativeScale3D(Vector NewScale3D);// 0x696fd30
	void SetMobility(byte NewMobility);// 0x696cd4c
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x696d360
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x696cfe8
	void ResetRelativeTransform();// 0x696fdd4
	void OnRep_Visibility(bool OldValue);// 0x697039c
	void OnRep_Transform();// 0x6970484
	void OnRep_AttachSocketName();// 0x6970448
	void OnRep_AttachParent();// 0x6970470
	void OnRep_AttachChildren();// 0x697045c
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696ee9c
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696f128
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696cdf8
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696f2d8
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696fe54
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x697003c
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696d13c
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x69701ec
	Transform K2_GetComponentToWorld();// 0x696e840
	Vector K2_GetComponentScale();// 0x696e8ac
	Rotator K2_GetComponentRotation();// 0x696e8e4
	Vector K2_GetComponentLocation();// 0x696e91c
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x696dcd0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x696e03c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x696e244
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696e954
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696eb3c
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696ecec
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696f9d0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696fb80
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696f488
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696f670
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x696f820
	bool IsVisible();// 0x696d76c
	bool IsSimulatingPhysics(FName BoneName);// 0x696e6e0
	bool IsAnySimulatingPhysics();// 0x696e6a0
	Vector GetUpVector();// 0x696e7d0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x696dacc
	Rotator GetSocketRotation(FName InSocketName);// 0x696d95c
	Quat GetSocketQuaternion(FName InSocketName);// 0x696d8a4
	Vector GetSocketLocation(FName InSocketName);// 0x696da14
	bool GetShouldUpdatePhysicsVolume();// 0x6970544
	Vector GetRightVector();// 0x696e798
	Transform GetRelativeTransform();// 0x696fde8
	PhysicsVolume* GetPhysicsVolume();// 0x696d32c
	void GetParentComponents(out SceneComponent*[] Parents);// 0x696e5a8
	int GetNumChildrenComponents();// 0x696e574
	Vector GetForwardVector();// 0x696e808
	Vector GetComponentVelocity();// 0x696d7ac
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x696e3c4
	SceneComponent* GetChildComponent(int ChildIndex);// 0x696e4c8
	FName GetAttachSocketName();// 0x696e668
	SceneComponent* GetAttachParent();// 0x696e684
	FName[] GetAllSocketNames();// 0x696dc20
	bool DoesSocketExist(FName InSocketName);// 0x696d7ec
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x696de48

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x38]
	FName[] ComponentTags;//[Offset: 0x68, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x8c, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x91, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x92, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x92, Size: 0x1]
	enum CreationMethod;//[Offset: 0x94, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x95, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x96, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x98, Size: 0x10]
	void ToggleActive();// 0x67608d4
	void SetTickGroup(byte NewTickGroup);// 0x6760394
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x6760754
	void SetIsReplicated(bool ShouldReplicate);// 0x67606a8
	void SetComponentTickInterval(float TickInterval);// 0x6760510
	void SetComponentTickEnabled(bool bEnabled);// 0x67605f4
	void SetAutoActivate(bool bNewAutoActivate);// 0x6760800
	void SetActive(bool bNewActive, bool bReset);// 0x67608f0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x67600e4
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6760190
	void ReceiveTick(float DeltaSeconds);// 0x4c8f29c
	void ReceiveEndPlay(byte EndPlayReason);// 0x4c8f29c
	void ReceiveBeginPlay();// 0x4c8f29c
	void OnRep_IsActive();// 0x6760b90
	void K2_DestroyComponent(Object* Object);// 0x6760438
	bool IsComponentTickEnabled();// 0x67605b4
	bool IsBeingDestroyed();// 0x6760bac
	bool IsActive();// 0x67608b4
	Actor* GetOwner();// 0x6760b74
	float GetComponentTickInterval();// 0x67604dc
	void Deactivate();// 0x67609f4
	bool ComponentHasTag(FName Tag);// 0x6760ac4
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x676023c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x67602e8
	void Activate(bool bReset);// 0x6760a10

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x268, Size: 0x4]
	int Priority;//[Offset: 0x26c, Size: 0x4]
	float FluidFriction;//[Offset: 0x270, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x230, Size: 0x1]
	Color BrushColor;//[Offset: 0x234, Size: 0x4]
	int PolyFlags;//[Offset: 0x238, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1]
	Model* Brush;//[Offset: 0x240, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x248, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x258, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x4b8, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x4c0, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x2a0, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x2a4, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x2a8, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x2ac, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2ad, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x2ae, Size: 0x1]
	enum LightmapType;//[Offset: 0x2af, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b0, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b1, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b1, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b1, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b1, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b1, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b1, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b1, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b1, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b2, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b2, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b2, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b2, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b2, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b2, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b2, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b2, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b3, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b3, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b3, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b3, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b3, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b3, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b3, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b3, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b4, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b4, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b4, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b4, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b4, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b4, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b5, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b5, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b5, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b5, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b5, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b5, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b5, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b5, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b6, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b6, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b6, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b6, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b6, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b6, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b6, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2b8, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x2ba, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2bb, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2bc, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x2c0, Size: 0x4]
	int MainPassDepthStencilValue;//[Offset: 0x2c4, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x2c8, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x2d8, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x2e8, Size: 0x4]
	int VisibilityId;//[Offset: 0x2ec, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2f0, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x300, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x301, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x302, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x303, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x308, Size: 0x4]
	float BoundsScale;//[Offset: 0x314, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x328, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x338, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x358, Size: 0x130]
	delegate OnComponentHit;//[Offset: 0x488, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x489, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x48a, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x48b, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x48c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x48e, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x48f, Size: 0x1]
	delegate OnClicked;//[Offset: 0x490, Size: 0x1]
	delegate OnReleased;//[Offset: 0x491, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x492, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x493, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x494, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x495, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x4b0, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x69529e0
	void WakeRigidBody(FName BoneName);// 0x694f4ec
	void WakeAllRigidBodies();// 0x694d3b0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x6951784
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x694ca74
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x694ee3c
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x694eee0
	void SetSimulatePhysics(bool bSimulate);// 0x69516d0
	void SetRenderMainPassStencil(bool bValue);// 0x694da28
	void SetRenderInMainPass(bool bValue);// 0x694d97c
	void SetRenderCustomDepth(bool bValue);// 0x694dcc0
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x694ed90
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x694c738
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x694f970
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x694faa8
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x694fbf0
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x69503c4
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x694fe90
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x694fd38
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x694ffd0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x694f2e8
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x694f23c
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x694f394
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x6951c74
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x6951d60
	void SetMassScale(FName BoneName, float InMassScale);// 0x694cffc
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x694cd60
	void SetMainPassStencilValue(int Value);// 0x694dad4
	void SetLinearDamping(float InDamping);// 0x694d210
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x6952a90
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x694f038
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x6952be4
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x694ef8c
	void SetEnableGravity(bool bGravityEnabled);// 0x694d2fc
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x69522c8
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x69523b4
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x6952498
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x6952578
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x694db78
	void SetCustomDepthStencilValue(int Value);// 0x694dc1c
	void SetCullDistance(float NewCullDistance);// 0x694c694
	void SetConstraintMode(byte ConstraintMode);// 0x6951624
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x694c890
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x694c7e4
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x694ebec
	void SetCollisionObjectType(byte Channel);// 0x694eb0c
	void SetCollisionEnabled(byte NewType);// 0x694ece4
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x694f598
	void SetCastShadow(bool NewCastShadow);// 0x694f190
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x694f0e4
	void SetBoundsScale(float NewBoundsScale);// 0x6951f04
	void SetAngularDamping(float InDamping);// 0x694d128
	void SetAllUseCCD(bool InUseCCD);// 0x694c9c0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x6950128
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x694d3cc
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x694d4cc
	void SetAllMassScale(float InMassScale);// 0x694ce9c
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x694cb70
	void PutRigidBodyToSleep(FName BoneName);// 0x694f448
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x694e428
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x694dd6c
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x694e7bc
	bool K2_IsQueryCollisionEnabled();// 0x694d72c
	bool K2_IsPhysicsCollisionEnabled();// 0x694d6e4
	bool K2_IsCollisionEnabled();// 0x694d774
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x694e0c0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x6952218
	bool IsOverlappingActor(const Actor* Other);// 0x6952168
	bool IsGravityEnabled();// 0x694d2bc
	bool IsAnyRigidBodyAwake();// 0x694c980
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x695273c
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x69528f0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x695184c
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x6950220
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x6950314
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x694f730
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x694f7e0
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x694f8a8
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x6951fa8
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x6952068
	int GetNumMaterials();// 0x694d940
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x6951884
	MaterialInterface* GetMaterial(int ElementIndex);// 0x6951e50
	float GetMassScale(FName BoneName);// 0x694cf48
	float GetMass();// 0x694cd24
	float GetLinearDamping();// 0x694d1d4
	Vector GetInertiaTensor(FName BoneName);// 0x694cc6c
	bool GetGenerateOverlapEvents();// 0x6952c90
	byte GetCollisionResponseToChannel(byte Channel);// 0x694d630
	FName GetCollisionProfileName();// 0x694ebb8
	byte GetCollisionObjectType();// 0x694d5f4
	byte GetCollisionEnabled();// 0x694d7b8
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x694d7f4
	Vector GetCenterOfMass(FName BoneName);// 0x694f680
	float GetAngularDamping();// 0x694d0ec
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x6951990
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x6951ac8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x6951bc0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x695268c
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x6952840
	void ClearMoveIgnoreComponents();// 0x6952660
	void ClearMoveIgnoreActors();// 0x695282c
	bool CanCharacterStepUp(Pawn* Pawn);// 0x694c5dc
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x6950658
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x6950504
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x6950794
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x6950e2c
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x69508d0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x6950fec
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x69514e8
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x6950a90
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x6950bc0
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x6950cf0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x6951270
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x695111c
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x69513ac

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130]
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x68eba04
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x68ebdc8
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x68ebd14
	PhysicalMaterial* GetPhysicalMaterial();// 0x68ebe04
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x68ebbe4
	Material* GetBaseMaterial();// 0x68ebe40

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 0x1]
	byte DepthCompare;//[Offset: 0x200, Size: 0x1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	byte MainPassStencilCompare;//[Offset: 0x202, Size: 0x1]
	byte MainPassStencilRefValue;//[Offset: 0x203, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x204, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x205, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	byte StencilCompare;//[Offset: 0x207, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x208, Size: 0x1]
	byte RefractionMode;//[Offset: 0x209, Size: 0x1]
	int BlendablePriority;//[Offset: 0x20c, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x218, Size: 0x4]
	Guid StateId;//[Offset: 0x21c, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x22c, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10]
	int LODBias;//[Offset: 0x58, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1]
	byte Filter;//[Offset: 0x5d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1]
	byte LODGroup;//[Offset: 0x5f, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte AddressX;//[Offset: 0xc1, Size: 0x1]
	byte AddressY;//[Offset: 0xc2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x69bbb80
	int Blueprint_GetSizeX();// 0x69bbbb4

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileCount;//[Offset: 0x34, Size: 0x4]
	int TileSize;//[Offset: 0x38, Size: 0x4]
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4]
	int StreamLowMips;//[Offset: 0x40, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4]
	int GetTileSize();// 0x6961f6c
	int GetTileCount();// 0x6961fa0
	int GetTileBorderSize();// 0x6961f3c
	int GetSize();// 0x6961fd4

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 0xc]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	uint32 BuildHash;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 0x1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 0x10]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x9c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 0x8]
	int LODForCollision;//[Offset: 0xa8, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd0, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xfc, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x108, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x124, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x128, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x140, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x69ad82c
	int GetNumSections(int InLOD);// 0x69adc24
	int GetNumLODs();// 0x69adda8
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x69ae02c
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x69adf88
	int GetMaterialIndex(FName MaterialSlotName);// 0x69ada20
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x69adb78
	BoxSphereBounds GetBounds();// 0x69add3c
	Box GetBoundingBox();// 0x69adcd0
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x69ad8d0
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x69adee4
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x69adddc
	void AddSocket(StaticMeshSocket* Socket);// 0x69ad97c
	FName AddMaterial(MaterialInterface* Material);// 0x69adacc

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x5e06e0c
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x5e069d4
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x5e06f3c
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x5e06adc

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x5df7718
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x5df562c
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x5df5530
	void ReversePolygonFacing(PolygonID PolygonID);// 0x5df5480
	void ReserveNewVertices(int NumberOfNewVertices);// 0x5df9df4
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x5df9b00
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x5df9210
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x5df8ba0
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x5df8530
	void ReserveNewEdges(int NumberOfNewEdges);// 0x5df96d8
	bool IsVertexValid(VertexID VertexID);// 0x5df9ba4
	bool IsVertexOrphaned(VertexID VertexID);// 0x5df8224
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x5df977c
	bool IsTriangleValid(const TriangleID TriangleID);// 0x5df8c44
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x5df6820
	bool IsPolygonValid(PolygonID PolygonID);// 0x5df85d4
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x5df82e0
	bool IsEmpty();// 0x5df9e98
	bool IsEdgeValid(EdgeID EdgeID);// 0x5df92b4
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x5df6ff0
	bool IsEdgeInternal(EdgeID EdgeID);// 0x5df7100
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5df7e38
	Vector GetVertexPosition(VertexID VertexID);// 0x5df7818
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x5df8118
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x5df7660
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x5df7554
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x5df61cc
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x5df5768
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x5df7440
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x5df7274
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x5df7c6c
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x5df7aa0
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x5df8004
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x5df78d4
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x5df6500
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5df670c
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x5df6614
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x5df68dc
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x5df6994
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x5df63ec
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x5df62d8
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x5df5d20
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5df5eec
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x5df60b8
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x5df5874
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x5df5c0c
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x5df5af8
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x5df52bc
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x5df592c
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x5df7d80
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x5df7388
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x5df71bc
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x5df7bb4
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x5df79e8
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x5df7f4c
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x5df5e34
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x5df6000
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x5df5a40
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x5df5204
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x5df6e24
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x5df6c58
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x5df6a4c
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x5df6b60
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x5df6edc
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x5df6d10
	void Empty();// 0x5df9ed0
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x5df9838
	void DeleteVertex(VertexID VertexID);// 0x5df9c60
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x5df8d00
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x5df839c
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x5df8690
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x5df9370
	void CreateVertexWithID(VertexID VertexID);// 0x5df9d10
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x5df994c
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x5df9a48
	VertexID CreateVertex();// 0x5df9dc0
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5df8ed4
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5df9090
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5df8864
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x5df844c
	PolygonGroupID CreatePolygonGroup();// 0x5df84fc
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5df8a20
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x5df9484
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x5df95cc
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x5df53d0

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x68ea6a4
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x68ea7a8
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x68eaa04
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x68eab08
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x68ead64
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x68eae68
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x68ea3fc
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x68ea524
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x68ea5f4
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x68ea88c
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x68ea958
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x68eabec
	float K2_GetScalarParameterValue(FName ParameterName);// 0x68eacb8
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x68ea30c
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x68ea1c4
	void CopyInterpParameters(MaterialInstance* Source);// 0x68ea268

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x238, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x23c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x240, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x241, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x242, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x248, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x250, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x260, Size: 0x8]
	Controller* Controller;//[Offset: 0x268, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x274, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x280, Size: 0xc]
	void SpawnDefaultController();// 0x69250c8
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x6925240
	void ReceiveUnpossessed(Controller* OldController);// 0x4c8f29c
	void ReceivePossessed(Controller* NewController);// 0x4c8f29c
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x69254dc
	void OnRep_PlayerState();// 0x692533c
	void OnRep_Controller();// 0x6925358
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6924b58
	Vector K2_GetMovementInputVector();// 0x6924b20
	bool IsPlayerControlled();// 0x6925180
	bool IsPawnControlled();// 0x69253c8
	bool IsMoveInputIgnored();// 0x6924c98
	bool IsLocallyControlled();// 0x69251c0
	bool IsControlled();// 0x6925400
	bool IsBotControlled();// 0x6925140
	Vector GetPendingMovementInputVector();// 0x6924f54
	Vector GetNavAgentLocation();// 0x6925200
	PawnMovementComponent* GetMovementComponent();// 0x6925650
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x6925438
	Vector GetLastMovementInputVector();// 0x6924f1c
	Rotator GetControlRotation();// 0x6925374
	Controller* GetController();// 0x69253ac
	Rotator GetBaseAimRotation();// 0x6925100
	void DetachFromControllerPendingDestroy();// 0x69250e4
	Vector ConsumeMovementInputVector();// 0x6924edc
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x6924f8c
	void AddControllerYawInput(float Val);// 0x6924d84
	void AddControllerRollInput(float Val);// 0x6924cd8
	void AddControllerPitchInput(float Val);// 0x6924e30

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x238, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x248, Size: 0x10]
	FName StateName;//[Offset: 0x258, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x260, Size: 0x8]
	Character* Character;//[Offset: 0x270, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x278, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2b0, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	void UnPossess();// 0x67d650c
	void StopMovement();// 0x67d64f0
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x67d6ac4
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x67d643c
	void SetIgnoreLookInput(bool bNewLookInput);// 0x67d632c
	void SetControlRotation(out const Rotator NewRotation);// 0x67d6bc8
	void ResetIgnoreMoveInput();// 0x67d6420
	void ResetIgnoreLookInput();// 0x67d6310
	void ResetIgnoreInputFlags();// 0x67d62b4
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x4c8f29c
	void ReceivePossess(Pawn* PossessedPawn);// 0x4c8f29c
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x4c8f29c
	void Possess(Pawn* InPawn);// 0x67d6520
	void OnRep_PlayerState();// 0x67d6948
	void OnRep_Pawn();// 0x67d6964
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x67d6980
	Pawn* K2_GetPawn();// 0x67d66fc
	bool IsPlayerController();// 0x67d6660
	bool IsMoveInputIgnored();// 0x67d63e0
	bool IsLookInputIgnored();// 0x67d62d0
	bool IsLocalPlayerController();// 0x67d6604
	bool IsLocalController();// 0x67d65c4
	Actor* GetViewTarget();// 0x67d66c0
	Rotator GetDesiredRotation();// 0x67d6680
	Rotator GetControlRotation();// 0x67d6c80
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x67d6730
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x67d6828
	PlayerController* CastToPlayerController();// 0x67d6914

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x230, Size: 0x4]
	int PlayerId;//[Offset: 0x234, Size: 0x4]
	byte Ping;//[Offset: 0x238, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23a, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23a, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23a, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23a, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23a, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23a, Size: 0x1]
	int StartTime;//[Offset: 0x23c, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x240, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x250, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x260, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x290, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x308, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x4c8f29c
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x4c8f29c
	void OnRep_UniqueId();// 0x6947cf8
	void OnRep_Score();// 0x6947d68
	void OnRep_PlayerName();// 0x6947d4c
	void OnRep_PlayerId();// 0x6947d14
	void OnRep_bIsInactive();// 0x6947d30
	FString GetPlayerName();// 0x6947c48

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x290, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x298, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2a0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a8, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d8, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x308, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x30c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x320, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x330, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x334, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x338, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x33c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x340, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x340, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x340, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x340, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x340, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x341, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x341, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x341, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x344, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x348, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x34c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x350, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x354, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x358, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x360, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x380, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x390, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3a0, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3e0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x420, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x430, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x67c3650
	void StopJumping();// 0x67c3d88
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x67c3ae8
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x67c4d0c
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x67c5a84
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x67c52a4
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x67c4e68
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x67c5648
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x67c5d08
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x67c3504
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x67c3b94
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x67c37b8
	void OnRep_RootMotion();// 0x67c34f0
	void OnRep_ReplicatedBasedMovement();// 0x67c3e90
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x67c3e7c
	void OnRep_IsCrouched();// 0x67c3dc0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4c8f29c
	void OnLanded(out const HitResult Hit);// 0x4c8f29c
	void OnJumped();// 0x67c3950
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x67c396c
	void K2_UpdateCustomMovement(float DeltaTime);// 0x4c8f29c
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x4c8f29c
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x4c8f29c
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x4c8f29c
	void Jump();// 0x67c3da4
	bool IsPlayingRootMotion();// 0x67c34b8
	bool IsPlayingNetworkedRootMotionMontage();// 0x67c3448
	bool IsJumpProvidingForce();// 0x67c3cd0
	bool HasAnyRootMotion();// 0x67c3480
	AnimMontage* GetCurrentMontage();// 0x67c3ab4
	Vector GetBaseTranslationOffset();// 0x67c3e54
	Rotator GetBaseRotationOffsetRotator();// 0x67c3ddc
	float GetAnimRootMotionTranslationScale();// 0x67c3414
	void Crouch(bool bClientSimulation);// 0x67c3704
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x67c4784
	void ClientCheatWalk();// 0x67c35f4
	void ClientCheatGhost();// 0x67c35bc
	void ClientCheatFly();// 0x67c35d8
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x67c3f98
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x67c4468
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x67c49d4
	void ClientAckGoodMove(float Timestamp);// 0x67c4c68
	bool CanJumpInternal();// 0x67c3d10
	bool CanJump();// 0x67c3d50
	bool CanCrouch();// 0x67c3610
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x67c3eac

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x6777c78

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x6783acc

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x67d896c

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x67d8254
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x67d8358

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	int TrackIndex;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x4c8f29c
	FString GetNotifyName();// 0x6781800

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6f0, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x6f8, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x700, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x708, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x710, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x738, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x744, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x770, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x780, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x790, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x7c0, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x7c4, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x7c5, Size: 0x1]
	byte AnimationMode;//[Offset: 0x7c7, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c9, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c9, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c9, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c9, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c9, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ca, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ca, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ca, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ca, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ca, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cb, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cb, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cb, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cb, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cb, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cb, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cb, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x7d0, Size: 0x2]
	enum MassMode;//[Offset: 0x7d2, Size: 0x1]
	float UniformMass;//[Offset: 0x7d4, Size: 0x4]
	float TotalMass;//[Offset: 0x7d8, Size: 0x4]
	float Density;//[Offset: 0x7dc, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x7e0, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x7e4, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x7e8, Size: 0x4]
	float BendingStiffness;//[Offset: 0x7ec, Size: 0x4]
	float AreaStiffness;//[Offset: 0x7f0, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x7f4, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x7f8, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x7fc, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x800, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x810, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x820, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x830, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x910, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x914, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x920, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x980, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xa50, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x697e740
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x697d8dc
	void ToggleDisablePostProcessBlueprint();// 0x697ed4c
	void TermBodiesBelow(FName ParentBoneName);// 0x697c560
	void SuspendClothingSimulation();// 0x697d9fc
	void Stop();// 0x697e1e0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x697db10
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x697d70c
	void SetTeleportRotationThreshold(float Threshold);// 0x697d284
	void SetTeleportDistanceThreshold(float Threshold);// 0x697d1ac
	void SetPosition(float InPos, bool bFireNotifies);// 0x697e0b8
	void SetPlayRate(float Rate);// 0x697dfe0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x697c410
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x697cf34
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x697dca8
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x697c364
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x697cc50
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x697ce40
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x697ec68
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x697d660
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x697b7f8
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x697b8e8
	void SetClothMaxDistanceScale(float Scale);// 0x697da38
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x697d07c
	void SetAnimClass(class Object NewClass);// 0x697ebbc
	void SetAnimationMode(byte InAnimationMode);// 0x697e468
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x697e2a0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x697b4b8
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x697d7e0
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x697d35c
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x697d58c
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x697bb8c
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x697bce0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x697ba18
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x697c4b4
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x697c10c
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x697c210
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x697bf74
	void ResumeClothingSimulation();// 0x697d9e8
	void ResetClothTeleportMode();// 0x697d99c
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x697e50c
	void ResetAllowedAnimCurveEvaluation();// 0x697d464
	void ResetAllBodiesSimulatePhysics();// 0x697c1fc
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x697e344
	void Play(bool bLooping);// 0x697e1f4
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x697dddc
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x697e888
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x697e7e4
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x697ca4c
	bool IsPlaying();// 0x697e1a8
	bool IsClothingSimulationSuspended();// 0x697d9b0
	bool IsBodyGravityEnabled(FName BoneName);// 0x697cd90
	bool HasValidAnimationInstance();// 0x697e5b0
	float GetTeleportRotationThreshold();// 0x697d328
	float GetTeleportDistanceThreshold();// 0x697d250
	Vector GetSkeletalCenterOfMass();// 0x697c91c
	AnimInstance* GetPostProcessInstance();// 0x697eb20
	float GetPosition();// 0x697e084
	float GetPlayRate();// 0x697dfac
	float GetMorphTarget(FName MorphTargetName);// 0x697dbe8
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x697e694
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x697e5e8
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x697e96c
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x697ea74
	bool GetDisablePostProcessBlueprint();// 0x697ed14
	bool GetDisableAnimCurves();// 0x697d638
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x697b314
	float GetClothMaxDistanceScale();// 0x697dadc
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x697d178
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x697c954
	AnimInstance* GetAnimInstance();// 0x697eb54
	class Object GetAnimClass();// 0x697eb88
	byte GetAnimationMode();// 0x697e434
	bool GetAllowRigidBodyAnimNode();// 0x697d7b8
	bool GetAllowedAnimCurveEvaluate();// 0x697d568
	void ForceClothNextUpdateTeleportAndReset();// 0x697da10
	void ForceClothNextUpdateTeleport();// 0x697da24
	FName FindConstraintBoneName(int ConstraintIndex);// 0x697b74c
	void ClearMorphTargets();// 0x697dc94
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x697b624
	void BindClothToMasterPoseComponent();// 0x697d988
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x697d478
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x697c604
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x697c790
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x697be34

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x4e0, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x4e8, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x4f0, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5f8, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x600, Size: 0x4]
	int MinLodModel;//[Offset: 0x604, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x614, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x620, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x654, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x656, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x656, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x656, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x656, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x656, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x656, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x657, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x657, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x657, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x657, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x657, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x657, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x657, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x657, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x658, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x658, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x658, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x658, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x658, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x658, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x659, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x65c, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x670, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x690, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x6984c44
	void UnHideBoneByName(FName BoneName);// 0x69842dc
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x69847b8
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x69845f8
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x69840b4
	void ShowAllMaterialSections(int LODIndex);// 0x6984010
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x6984ffc
	bool SetSkinWeightProfile(FName InProfileName);// 0x6984cfc
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x6984e50
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x698540c
	void SetRenderStatic(bool bNewValue);// 0x6983e74
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x6985b38
	void SetMinLOD(int InNewMinLOD);// 0x6985a60
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x6984b18
	void SetForcedLOD(int InNewForcedLOD);// 0x69859bc
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x6985830
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x69858dc
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x698578c
	bool IsUsingSkinWeightProfile();// 0x6984c08
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x6983f20
	bool IsBoneHiddenByName(FName BoneName);// 0x698422c
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x6984380
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x6985104
	FName GetSocketBoneName(FName InSocketName);// 0x6985554
	Vector GetRefPosePosition(int BoneIndex);// 0x6984978
	FName GetParentBone(FName BoneName);// 0x6985360
	int GetNumLODs();// 0x6985b04
	int GetNumBones();// 0x6985758
	int GetForcedLOD();// 0x6985988
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x6985264
	FName GetCurrentSkinWeightProfileName();// 0x6984c28
	FName GetBoneName(int BoneIndex);// 0x6985600
	int GetBoneIndex(FName BoneName);// 0x69856ac
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x6984468
	void ClearVertexColorOverride(int LODIndex);// 0x6984f58
	void ClearSkinWeightProfile();// 0x6984ce8
	void ClearSkinWeightOverride(int LODIndex);// 0x6984dac
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x6984a28

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x4b8, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d8, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x68f19a4
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x68f1a88
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x68f1b70
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x68f1cb0
	FName[] GetMaterialSlotNames();// 0x68f1d68
	MaterialInterface*[] GetMaterials();// 0x68f1ed4
	int GetMaterialIndex(FName MaterialSlotName);// 0x68f1e20

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4]
	byte LODGroup;//[Offset: 0x13c, Size: 0x1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x13d, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x13e, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x13f, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x697716c
	int NumSockets();// 0x6976bfc
	FString[] K2_GetAllMorphTargetNames();// 0x6976fa8
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x6976a58
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x6976b50
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x69770c0
	BoxSphereBounds GetImportedBounds();// 0x6977210
	BoxSphereBounds GetBounds();// 0x697727c
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x6976c30
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x6976df8
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x6976efc

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x6982c24
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x6982d48

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x676c530
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x676db4c
	Pawn* TryGetPawnOwner();// 0x676f7dc
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x676eee4
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x676f650
	void SetRootMotionMode(byte Value);// 0x676d950
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x676f57c
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x676f4a8
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x676c848
	void SavePoseSnapshot(FName SnapshotName);// 0x676f730
	void ResetDynamics(enum InTeleportType);// 0x676c018
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x676efcc
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x676f248
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x676ea60
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x676eb48
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x676e1a0
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x676e540
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x676e628
	void Montage_Resume(const AnimMontage* Montage);// 0x676e918
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x676ec30
	void Montage_Pause(const AnimMontage* Montage);// 0x676e9bc
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x676e750
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x676e834
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x676e3e0
	bool Montage_IsActive(const AnimMontage* Montage);// 0x676e490
	float Montage_GetPosition(const AnimMontage* Montage);// 0x676e288
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x676df98
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x676e0f0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x676e334
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x676e044
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x676c62c
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x676dc94
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x676dbf0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x676c178
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x676edf4
	bool IsAnyMontagePlaying();// 0x676df60
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x676c2f8
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x676c3e8
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x676c0bc
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x676cf14
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x676d000
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x676cc50
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x676cd3c
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x676ce28
	bool GetReceiveNotifiesFromLinkedInstances();// 0x676f630
	bool GetPropagateNotifiesToLinkedInstances();// 0x676f55c
	SkeletalMeshComponent* GetOwningComponent();// 0x676f440
	Actor* GetOwningActor();// 0x676f474
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x676daa0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x676d9f4
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x676dd78
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x676de80
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x676d0ec
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x676d1d8
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x676d2c4
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x676d45c
	float GetInstanceMachineWeight(int MachineIndex);// 0x676d548
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x676d3b0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x676d5f4
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x676d6a0
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x676d74c
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x676d7f8
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x676d8a4
	float GetCurveValue(FName CurveName);// 0x676cba4
	FName GetCurrentStateName(int MachineIndex);// 0x676c930
	AnimMontage* GetCurrentActiveMontage();// 0x676df2c
	void GetAllCurveNames(out FName[] OutNames);// 0x676c9dc
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x676ca9c
	void ClearMorphTargets();// 0x676c834
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x676c728
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x4c8f29c
	void BlueprintPostEvaluateAnimation();// 0x4c8f29c
	void BlueprintLinkedAnimationLayersInitialized();// 0x4c8f29c
	void BlueprintInitializeAnimation();// 0x4c8f29c
	void BlueprintBeginPlay();// 0x4c8f29c

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x67da3b8

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x67d8f4c
	LinearColor GetClampedLinearColorValue(float InTime);// 0x67d8e94

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x5e7c5e4
	void PhysicsAssetUpdated();// 0x5e7c6ac
	void EnableGravityOverride(out const Vector InVector);// 0x5e7c52c
	void DisableGravityOverride();// 0x5e7c510
	void ClothConfigUpdated();// 0x5e7c690

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x4c8f29c
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x4c8f29c
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x4c8f29c
	FString GetNotifyName();// 0x6782670

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x150, Size: 0x8]
	float GravityScale;//[Offset: 0x158, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x15c, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x160, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x164, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x168, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x16c, Size: 0x4]
	byte MovementMode;//[Offset: 0x170, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x171, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x172, Size: 0x1]
	float GroundFriction;//[Offset: 0x174, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1a0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1a4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x1a8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x1ac, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1b0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1b4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1b8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1bc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1c0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1c4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1c8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1cc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1d0, Size: 0x4]
	float AirControl;//[Offset: 0x1d4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1d8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1dc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1e0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1e4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1e8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1ec, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1f0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1f4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x201, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x202, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x202, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x202, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x202, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x208, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x210, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x214, Size: 0x4]
	float Mass;//[Offset: 0x218, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x21c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x220, Size: 0x4]
	float PushForceFactor;//[Offset: 0x224, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x228, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x22c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x230, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x234, Size: 0x4]
	float RepulsionForce;//[Offset: 0x238, Size: 0x4]
	Vector Acceleration;//[Offset: 0x23c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x260, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x26c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x278, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x27c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x280, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x284, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x290, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x29c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x2ac, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2b0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2b4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2b8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2bc, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2c0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2c4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2c8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2cc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2d0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2d4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2d8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2e0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2e4, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2e8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2ec, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2f0, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2f4, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2f8, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2fc, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x300, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x394, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x395, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x396, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x397, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x397, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x397, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x397, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x398, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x398, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x398, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x398, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x398, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x398, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x398, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x399, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x399, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x399, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x399, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x399, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x399, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x399, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39a, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39a, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39a, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39a, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39a, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39a, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3ac, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3b0, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3bc, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3c0, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3c4, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3c8, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3cc, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3d0, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x480, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x484, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x488, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x48c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x490, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x494, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x498, Size: 0x38]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4e8, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4f0, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5c0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x600, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x67caa24
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x67caafc
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x67cb304
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x67cb4bc
	void SetGroupsToIgnore(int GroupFlags);// 0x67cb56c
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x67cb610
	void SetGroupsToAvoid(int GroupFlags);// 0x67cb6c0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x67cb764
	void SetAvoidanceGroup(int GroupFlags);// 0x67cb814
	void SetAvoidanceEnabled(bool bEnable);// 0x67cb410
	float K2_GetWalkableFloorZ();// 0x67caac8
	float K2_GetWalkableFloorAngle();// 0x67caba0
	float K2_GetModifiedMaxAcceleration();// 0x67cafc4
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x67ca8f8
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x67ca704
	bool IsWalking();// 0x67cb2c4
	bool IsWalkable(out const HitResult Hit);// 0x67cabd4
	float GetValidPerchRadius();// 0x67cacb8
	float GetPerchRadiusThreshold();// 0x67cacec
	PrimitiveComponent* GetMovementBase();// 0x67cb274
	float GetMinAnalogSpeed();// 0x67cb000
	float GetMaxJumpHeightWithJumpTime();// 0x67cb03c
	float GetMaxJumpHeight();// 0x67cb078
	float GetMaxBrakingDeceleration();// 0x67caf4c
	float GetMaxAcceleration();// 0x67caf88
	Vector GetLastUpdateVelocity();// 0x67cb8b8
	Rotator GetLastUpdateRotation();// 0x67cb8e0
	Vector GetLastUpdateLocation();// 0x67cb91c
	Vector GetImpartedMovementBaseVelocity();// 0x67cb234
	Vector GetCurrentAcceleration();// 0x67caf14
	Character* GetCharacterOwner();// 0x67cb3f4
	float GetAnalogInputModifier();// 0x67caee0
	void DisableMovement();// 0x67cb2a8
	void ClearAccumulatedForces();// 0x67caec4
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x67ca4dc
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x67cb0b4
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x67cadcc
	void AddForce(Vector Force);// 0x67cad20

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x138, Size: 0x8]
	Vector K2_GetInputVector();// 0x6927ad0
	bool IsMoveInputIgnored();// 0x6927b3c
	Vector GetPendingInputVector();// 0x6927bf4
	Pawn* GetPawnOwner();// 0x6927b08
	Vector GetLastInputVector();// 0x6927bbc
	Vector ConsumeInputVector();// 0x6927b7c
	void AddInputVector(Vector WorldVector, bool bForce);// 0x6927c2c

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf8, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x128, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12c, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x12d, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x130, Size: 0x8]
	void StopMovementKeepPathing();// 0x68fe950
	void StopActiveMovement();// 0x68fe9a0
	bool IsSwimming();// 0x68fe850
	bool IsMovingOnGround();// 0x68fe890
	bool IsFlying();// 0x68fe810
	bool IsFalling();// 0x68fe8d0
	bool IsCrouching();// 0x68fe910

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb8, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 0x8]
	Vector Velocity;//[Offset: 0xcc, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xf3, Size: 0x1]
	void StopMovementImmediately();// 0x68f76e0
	void SnapUpdatedComponentToPlane();// 0x68f6cd0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x68f754c
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x68f7048
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x68f71e0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x68f70f4
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x68f6f94
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x68f72a8
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x68f75f8
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x68f7354
	float K2_GetModifiedMaxSpeed();// 0x68f77b4
	float K2_GetMaxSpeedModifier();// 0x68f77f0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x68f76fc
	Vector GetPlaneConstraintOrigin();// 0x68f6f14
	Vector GetPlaneConstraintNormal();// 0x68f6f54
	enum GetPlaneConstraintAxisSetting();// 0x68f728c
	PhysicsVolume* GetPhysicsVolume();// 0x68f76a4
	float GetMaxSpeed();// 0x68f782c
	float GetGravityZ();// 0x68f7868
	Vector ConstrainNormalToPlane(Vector Normal);// 0x68f6cec
	Vector ConstrainLocationToPlane(Vector Location);// 0x68f6da4
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x68f6e5c

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x4d0, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x4d4, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x67c2344
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x67c2250
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x67c215c
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x67c1bf0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x67c1d00
	float GetUnscaledCapsuleRadius();// 0x67c1e48
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x67c1e08
	float GetUnscaledCapsuleHalfHeight();// 0x67c1e2c
	float GetShapeScale();// 0x67c1bb0
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x67c1e64
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x67c1fa4
	float GetScaledCapsuleRadius();// 0x67c212c
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x67c20c8
	float GetScaledCapsuleHalfHeight();// 0x67c2108

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x4b8, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x4c0, Size: 0x8]
	Color ShapeColor;//[Offset: 0x4c8, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4cc, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4cc, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4cc, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2c0, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c8, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2d0, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d8, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2e0, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e8, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2f4, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x30c, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x318, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x328, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x33c, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x340, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x34c, Size: 0xc]
	int ClientCap;//[Offset: 0x358, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x360, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x368, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x370, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x378, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f8, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f9, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x438, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x440, Size: 0x8]
	float InputYawScale;//[Offset: 0x454, Size: 0x4]
	float InputPitchScale;//[Offset: 0x458, Size: 0x4]
	float InputRollScale;//[Offset: 0x45c, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x460, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x460, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x460, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x460, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x460, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x464, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x468, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x478, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x479, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x47a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x47b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x47c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x480, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x482, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x510, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x518, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x530, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x588, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x598, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x6939910
	bool WasInputKeyJustPressed(Key Key);// 0x6939a9c
	void ToggleSpeaking(bool bInSpeaking);// 0x693ec60
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x693bb0c
	void SwitchLevel(FString URL);// 0x693fcd4
	void StopHapticEffect(enum Hand);// 0x693b8f0
	void StartFire(byte FireModeNum);// 0x693edc8
	void SetVirtualJoystickVisibility(bool bVisible);// 0x6938c6c
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x69389fc
	void SetName(FString S);// 0x693fd8c
	void SetMouseLocation(const int X, const int Y);// 0x693ee74
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x693c6e0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x693b7c8
	void SetDisableHaptics(bool bNewDisabled);// 0x693b714
	void SetControllerLightColor(Color Color);// 0x693b674
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6938588
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x69388d8
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x69387e0
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x693a198
	void ServerViewPrevPlayer();// 0x693a290
	void ServerViewNextPlayer();// 0x693a2ec
	void ServerVerifyViewTarget();// 0x693a348
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x693a3a4
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x693a47c
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x693a554
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x693e6f4
	void ServerToggleAILogging();// 0x6939fb8
	void ServerShortTimeout();// 0x693a684
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x69404b4
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x693a798
	void ServerRestartPlayer();// 0x693a8c8
	void ServerPause();// 0x693a924
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x693a980
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x693e99c
	void ServerExecRPC(FString Msg);// 0x694017c
	void ServerExec(FString Msg);// 0x69400cc
	void ServerCheckClientPossessionReliable();// 0x693a6e0
	void ServerCheckClientPossession();// 0x693a73c
	void ServerChangeName(FString S);// 0x693aa54
	void ServerCamera(FName NewMode);// 0x693ab3c
	void ServerAcknowledgePossession(Pawn* P);// 0x693ac20
	void SendToConsole(FString Command);// 0x693e114
	void RestartLevel();// 0x694031c
	void ResetControllerLightColor();// 0x693b660
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x693ef58
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x693b994
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x693bbf0
	void Pause();// 0x693fe44
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x69384d4
	void LocalTravel(FString URL);// 0x6940264
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x693c0a8
	bool IsInputKeyDown(Key Key);// 0x6939c28
	void GetViewportSize(out int SizeX, out int SizeY);// 0x693c7fc
	SpectatorPawn* GetSpectatorPawn();// 0x69384b8
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x69391a4
	Vector GetInputVectorKeyState(Key Key);// 0x69395fc
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6939458
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x6938f18
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x69392bc
	float GetInputKeyTimeDown(Key Key);// 0x693901c
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6938dcc
	float GetInputAnalogKeyState(Key Key);// 0x6939788
	HUD* GetHUD();// 0x693c7c8
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x693f34c
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x693f518
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x693f6c8
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x693f878
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x693f9fc
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x693fb68
	Vector GetFocalLocation();// 0x6938478
	void FOV(float NewFOV);// 0x6940338
	void EnableCheats();// 0x69403e4
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x693f0a8
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x693f23c
	void ConsoleKey(Key Key);// 0x693e1cc
	void ClientWasKicked(const FText KickReason);// 0x693afa0
	void ClientVoiceHandshakeComplete();// 0x693ec44
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x693b0a8
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x693b160
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x693e354
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x693b348
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x693b4d8
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x693a014
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x693bec0
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x693c280
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x693c370
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x693c468
	void ClientStartOnlineSession();// 0x693af84
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x693c530
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x693c5dc
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x6940400
	void ClientSetHUD(class HUD NewHUDClass);// 0x693c900
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x693c9ac
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x693cae0
	void ClientSetCameraMode(FName NewCamMode);// 0x693cc8c
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x693cd38
	void ClientSetBlockOnAsyncLoading();// 0x693cef8
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x693ff0c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x6940014
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x693aebc
	void ClientRestart(Pawn* NewPawn);// 0x693cf14
	void ClientReset();// 0x693cfc0
	void ClientRepObjRef(Object* Object);// 0x693fe60
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x693ad04
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x693cfdc
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x693d160
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x693d2a8
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x693d418
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x693bfac
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x693d548
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x693d62c
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x693d7a0
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x693e524
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x693da80
	void ClientIgnoreMoveInput(bool bIgnore);// 0x693dbc0
	void ClientIgnoreLookInput(bool bIgnore);// 0x693dc74
	void ClientGotoState(FName NewState);// 0x693dd28
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x693ddd4
	void ClientForceGarbageCollection();// 0x693decc
	void ClientFlushLevelStreaming();// 0x693dee8
	void ClientEndOnlineSession();// 0x693af68
	void ClientEnableNetworkVoice(bool bEnable);// 0x693ed14
	void ClientCommitMapChange();// 0x693defc
	void ClientClearCameraLensEffects();// 0x693c514
	void ClientCapBandwidth(int Cap);// 0x693df18
	void ClientCancelPendingMapChange();// 0x693dfc4
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x693dfe0
	void ClearAudioListenerOverride();// 0x69388c4
	void ClearAudioListenerAttenuationOverride();// 0x69387cc
	bool CanRestartPlayer();// 0x693878c
	void Camera(FName NewMode);// 0x6938bc0
	void AddYawInput(float Val);// 0x6939e60
	void AddRollInput(float Val);// 0x6939db4
	void AddPitchInput(float Val);// 0x6939f0c
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x6938d20

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x130, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x140, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x150, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x178, Size: 0x10]
	Margin Padding;//[Offset: 0x188, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x198, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1a8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1b8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1c8, Size: 0x8]
	int Priority;//[Offset: 0x1d0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d4, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1e0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1e8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1f0, Size: 0x10]
	void UnregisterInputComponent();// 0x5cb9fd8
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x5cbb9ac
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x5cbb728
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x5cbb908
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x5cbb684
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x4c8f29c
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x5cba014
	void StopListeningForAllInputActions();// 0x5cba000
	void StopAnimationsAndLatentActions();// 0x5cbbb8c
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x5cba8bc
	void StopAllAnimations();// 0x5cba8a8
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x5cbbf50
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x5cba498
	void SetPadding(Margin InPadding);// 0x5cbb028
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x5cbbbe8
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x5cba580
	void SetInputActionPriority(int NewPriority);// 0x5cb9e84
	void SetInputActionBlocking(bool bShouldBlock);// 0x5cb9dd8
	void SetForegroundColor(SlateColor InForegroundColor);// 0x5cbb0d0
	void SetDesiredSizeInViewport(Vector2D Size);// 0x5cbbeb0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x5cbb264
	void SetAnchorsInViewport(Anchors Anchors);// 0x5cbbe08
	void SetAlignmentInViewport(Vector2D Alignment);// 0x5cbbd68
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x5cba3f4
	void RemoveFromViewport();// 0x5cbc03c
	void RegisterInputComponent();// 0x5cb9fec
	void PreConstruct(bool IsDesignTime);// 0x4c8f29c
	void PlaySound(SoundBase* SoundToPlay);// 0x5cba2a0
	void PlayEnterAnim();// 0x4c8f29c
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x5cbabd8
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x5cba960
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x5cbaa9c
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x5cbae20
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x5cba7fc
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4c8f29c
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4c8f29c
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x4c8f29c
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4c8f29c
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4c8f29c
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x4c8f29c
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4c8f29c
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4c8f29c
	void OnPaint(out PaintContext Context);// 0x4c8f29c
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4c8f29c
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4c8f29c
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x4c8f29c
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4c8f29c
	void OnMouseCaptureLost();// 0x4c8f29c
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4c8f29c
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4c8f29c
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x4c8f29c
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x4c8f29c
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4c8f29c
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4c8f29c
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x4c8f29c
	void OnInitialized();// 0x4c8f29c
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x4c8f29c
	void OnFocusLost(FocusEvent InFocusEvent);// 0x4c8f29c
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4c8f29c
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4c8f29c
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4c8f29c
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4c8f29c
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x4c8f29c
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4c8f29c
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x5cbb3b4
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x5cbb308
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x4c8f29c
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x4c8f29c
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x5cba0fc
	bool IsPlayingAnimation();// 0x5cba27c
	bool IsListeningForInputAction(FName ActionName);// 0x5cb9f28
	bool IsInViewport();// 0x5cbbc8c
	bool IsInteractable();// 0x4c8f29c
	bool IsAnyAnimationPlaying();// 0x5cba668
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x5cba344
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x5cba6a0
	Pawn* GetOwningPlayerPawn();// 0x5cbbbb4
	HUD* GetOwningHUD();// 0x5cb9da4
	bool GetIsVisible();// 0x5cbbcc4
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x5cba750
	Anchors GetAnchorsInViewport();// 0x5cbbd30
	Vector2D GetAlignmentInViewport();// 0x5cbbcfc
	void DoPlayEnterAnim(bool InPlayFlag);// 0x5cbb460
	void Destruct();// 0x4c8f29c
	void Construct();// 0x4c8f29c
	void CancelLatentActions();// 0x5cbbba0
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x5cbba9c
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x5cbb818
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x5cbb50c
	void AddToViewport(int ZOrder);// 0x5cbc100
	bool AddToPlayerScreen(int ZOrder);// 0x5cbc050

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x118, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x5cc6634
	void SetUserFocus(PlayerController* PlayerController);// 0x5cc5f9c
	void SetToolTipText(out const FText InToolTipText);// 0x5cc68a8
	void SetToolTip(Widget* Widget);// 0x5cc6804
	void SetRenderTranslation(Vector2D Translation);// 0x5cc6b44
	void SetRenderTransformPivot(Vector2D Pivot);// 0x5cc6aa4
	void SetRenderTransformAngle(float Angle);// 0x5cc6c18
	void SetRenderTransform(WidgetTransform InTransform);// 0x5cc6dfc
	void SetRenderShear(Vector2D Shear);// 0x5cc6cbc
	void SetRenderScale(Vector2D Scale);// 0x5cc6d5c
	void SetRenderOpacity(float InOpacity);// 0x5cc655c
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x5cc5b5c
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x5cc597c
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x5cc5a6c
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x5cc5c44
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x5cc5d2c
	void SetKeyboardFocus();// 0x5cc6224
	void SetIsEnabled(bool bInIsEnabled);// 0x5cc69b8
	void SetFocus();// 0x5cc6040
	void SetCursor(byte InCursor);// 0x5cc6760
	void SetClipping(enum InClipping);// 0x5cc6484
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x5cc5e58
	void ResetCursor();// 0x5cc674c
	void RemoveFromParent();// 0x5cc592c
	EventReply OnReply__DelegateSignature();// 0x4c8f29c
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4c8f29c
	bool IsVisible();// 0x5cc6714
	bool IsHovered();// 0x5cc6398
	void InvalidateLayoutAndVolatility();// 0x5cc5f74
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x5cc6054
	bool HasUserFocus(PlayerController* PlayerController);// 0x5cc6174
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x5cc6238
	bool HasMouseCapture();// 0x5cc6328
	bool HasKeyboardFocus();// 0x5cc6360
	bool HasFocusedDescendants();// 0x5cc6104
	bool HasAnyUserFocus();// 0x5cc613c
	Widget* GetWidget__DelegateSignature();// 0x4c8f29c
	enum GetVisibility();// 0x5cc66e0
	Geometry GetTickSpaceGeometry();// 0x5cc58bc
	FText GetText__DelegateSignature();// 0x4c8f29c
	enum GetSlateVisibility__DelegateSignature();// 0x4c8f29c
	SlateColor GetSlateColor__DelegateSignature();// 0x4c8f29c
	SlateBrush GetSlateBrush__DelegateSignature();// 0x4c8f29c
	float GetRenderTransformAngle();// 0x5cc6be4
	float GetRenderOpacity();// 0x5cc6600
	PanelWidget* GetParent();// 0x5cc5948
	Geometry GetPaintSpaceGeometry();// 0x5cc5884
	PlayerController* GetOwningPlayer();// 0x5cc5814
	LocalPlayer* GetOwningLocalPlayer();// 0x5cc57d8
	byte GetMouseCursor__DelegateSignature();// 0x4c8f29c
	LinearColor GetLinearColor__DelegateSignature();// 0x4c8f29c
	bool GetIsEnabled();// 0x5cc6a6c
	int GetInt32__DelegateSignature();// 0x4c8f29c
	GameInstance* GetGameInstance();// 0x5cc5850
	float GetFloat__DelegateSignature();// 0x4c8f29c
	Vector2D GetDesiredSize();// 0x5cc5f40
	enum GetClipping();// 0x5cc6528
	enum GetCheckBoxState__DelegateSignature();// 0x4c8f29c
	Geometry GetCachedGeometry();// 0x5cc58f4
	bool GetBool__DelegateSignature();// 0x4c8f29c
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x4c8f29c
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x4c8f29c
	void ForceVolatile(bool bForce);// 0x5cc63d8
	void ForceLayoutPrepass();// 0x5cc5f88

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x5cb86c0
	FName GetUserTag();// 0x5cb8764

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x5cc83d8
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x5cc8154
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x5cc8334
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x5cc80b0
	float GetStartTime();// 0x5cc85ec
	float GetEndTime();// 0x5cc85b8
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x5cc84c8
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x5cc8244

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x5a81b64
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x5a81c60

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: Geometry

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c]
	float Duration;//[Offset: 0xf4, Size: 0x4]
	float MaxDistance;//[Offset: 0xf8, Size: 0x4]
	float TotalSamples;//[Offset: 0xfc, Size: 0x4]
	float Priority;//[Offset: 0x100, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x699b74c
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x699b604
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x699b970
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x699b6a8
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x699b410
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x699b4f8

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 0x8]
	Margin Margin;//[Offset: 0x1c, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x30, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x58, Size: 0x8]
	FName ResourceName;//[Offset: 0x60, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x68, Size: 0x14]
	byte DrawAs;//[Offset: 0x7c, Size: 0x1]
	byte Tiling;//[Offset: 0x7d, Size: 0x1]
	byte Mirroring;//[Offset: 0x7e, Size: 0x1]
	byte ImageType;//[Offset: 0x7f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x128, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x5ca3bc4
	bool RemoveChild(Widget* Content);// 0x5ca3a68
	bool HasChild(Widget* Content);// 0x5ca3c74
	bool HasAnyChildren();// 0x5ca3a30
	int GetChildrenCount();// 0x5ca3f2c
	int GetChildIndex(const Widget* Content);// 0x5ca3d24
	Widget* GetChildAt(int Index);// 0x5ca3e80
	Widget*[] GetAllChildren();// 0x5ca3dd0
	void ClearChildren();// 0x5ca3a14
	PanelSlot* AddChild(Widget* Content);// 0x5ca3b18

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x68256ac
	void ShowTitleSafeArea();// 0x6825690
	void SetConsoleTarget(int PlayerIndex);// 0x68255e4

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x4c8f29c
	void ReceiveInit();// 0x4c8f29c
	void HandleTravelError(byte FailureType);// 0x4c8f29c
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x4c8f29c
	void DebugRemovePlayer(int ControllerId);// 0x680d73c
	void DebugCreatePlayer(int ControllerId);// 0x680d7e8

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x5c91e18
	void Dragged(out const PointerEvent PointerEvent);// 0x5c91b50
	void DragCancelled(out const PointerEvent PointerEvent);// 0x5c91cb4

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x128, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x68308f0
	bool WasControllerKeyJustPressed(Key Key);// 0x6830a7c
	bool IsControllerKeyDown(Key Key);// 0x6830c08
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6830438
	Vector GetControllerVectorKeyState(Key Key);// 0x68305dc
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x68301ac
	float GetControllerKeyTimeDown(Key Key);// 0x68302b0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6830060
	float GetControllerAnalogKeyState(Key Key);// 0x6830768

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x69472e0
	void SetBind(FName BindName, FString Command);// 0x69471ec
	void InvertAxisKey(const Key AxisKey);// 0x694706c
	void InvertAxis(const FName AxisName);// 0x6946fc8
	void ClearSmoothing();// 0x6946fb4

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x230, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x23c, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x240, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x240, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x248, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x260, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x270, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x280, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x288, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x290, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2a0, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2a8, Size: 0x8]
	void ShowHUD();// 0x682a618
	void ShowDebugToggleSubCategory(FName Category);// 0x682a4c8
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x682a424
	void ShowDebug(FName DebugType);// 0x682a56c
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x6829f60
	void RemoveAllDebugStrings();// 0x682a050
	void ReceiveHitBoxRelease(const FName BoxName);// 0x4c8f29c
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x4c8f29c
	void ReceiveHitBoxClick(const FName BoxName);// 0x4c8f29c
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x4c8f29c
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x4c8f29c
	Vector Project(Vector Location);// 0x68287c4
	void PreviousDebugTarget();// 0x68281ac
	void NextDebugTarget();// 0x68281c8
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x6829d7c
	PlayerController* GetOwningPlayerController();// 0x6828218
	Pawn* GetOwningPawn();// 0x68281e4
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x6828400
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x6829178
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6829330
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x6829b34
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x6829794
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x6828874
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x6828b68
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6828da4
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x6829940
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x6828644
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x682824c
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x682a064

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x67bf28c
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x67bf3c4
	Vector K2_Project(Vector WorldLocation);// 0x67bf5fc
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x67bf998
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x67c06a4
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x67c00c0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x67bf6ac
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x67bf84c
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x67c0488
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x67c0950
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x67bfae4
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x67bfc54
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x67bf4c0

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x230, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x238, Size: 0x8]
	float DefaultFOV;//[Offset: 0x248, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x250, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x258, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x610]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8b0, Size: 0x610]
	TViewTarget ViewTarget;//[Offset: 0xec0, Size: 0x620]
	TViewTarget PendingViewTarget;//[Offset: 0x14e0, Size: 0x620]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1b30, Size: 0x610]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2140, Size: 0x610]
	CameraModifier*[] ModifierList;//[Offset: 0x2750, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2760, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2770, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2774, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2780, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x27a0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x27b0, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x27b8, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x27f8, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2818, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2828, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2838, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2840, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2840, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2840, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2840, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2841, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2844, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2848, Size: 0x4]
	float ViewYawMin;//[Offset: 0x284c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2850, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2854, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2858, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2860, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x6936a88
	void StopCameraFade();// 0x69365bc
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x6935f68
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x6936898
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x6936990
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x6936060
	void StopAllCameraShakes(bool bImmediately);// 0x69367e4
	void StopAllCameraAnims(bool bImmediate);// 0x6935eb4
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x69365d8
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x6936484
	void SetGameCameraCutThisFrame();// 0x6935e90
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x6937028
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x6936e0c
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x6936b80
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6936c74
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6936158
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x69372f4
	void OnPhotographySessionStart();// 0x69372d8
	void OnPhotographySessionEnd();// 0x69372bc
	void OnPhotographyMultiPartCaptureStart();// 0x69372a0
	void OnPhotographyMultiPartCaptureEnd();// 0x6937284
	PlayerController* GetOwningPlayerController();// 0x6937248
	float GetFOVAngle();// 0x6936fec
	Rotator GetCameraRotation();// 0x6936fac
	Vector GetCameraLocation();// 0x6936f6c
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x69370e0
	void ClearCameraLensEffects();// 0x6936df0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x4c8f29c
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x6937194
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x6936eb8

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x4c8f29c
	void ReceivePlayShake(float Scale);// 0x4c8f29c
	bool ReceiveIsFinished();// 0x67ba8bc
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x4c8f29c

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x570]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5b0, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	byte BloomMethod;//[Offset: 0x17, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x18, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorSaturation;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x190, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1a0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1a4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1a8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1ac, Size: 0x4]
	float FilmSlope;//[Offset: 0x1b0, Size: 0x4]
	float FilmToe;//[Offset: 0x1b4, Size: 0x4]
	float FilmShoulder;//[Offset: 0x1b8, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x1bc, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x1c0, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1d4, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1e4, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1e8, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1ec, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1f0, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x200, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x210, Size: 0x10]
	float FilmContrast;//[Offset: 0x220, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x224, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x228, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x22c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x230, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x240, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x244, Size: 0x4]
	float BloomIntensity;//[Offset: 0x248, Size: 0x4]
	float BloomThreshold;//[Offset: 0x24c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x250, Size: 0x4]
	float Bloom1Size;//[Offset: 0x254, Size: 0x4]
	float Bloom2Size;//[Offset: 0x258, Size: 0x4]
	float Bloom3Size;//[Offset: 0x25c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x260, Size: 0x4]
	float Bloom5Size;//[Offset: 0x264, Size: 0x4]
	float Bloom6Size;//[Offset: 0x268, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x26c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x27c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x28c, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2bc, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2cc, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2d0, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2d8, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2e0, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2e4, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2e8, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2ec, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2f0, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2f8, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2fc, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x30c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x31c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x320, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x328, Size: 0x4]
	float CameraISO;//[Offset: 0x32c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x330, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x334, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x338, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x33c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x340, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x348, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x350, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x358, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x35c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x360, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x364, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x368, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x36c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x370, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x374, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x378, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x37c, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x380, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x390, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x394, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x398, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3a0, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x420, Size: 0x4]
	float GrainJitter;//[Offset: 0x424, Size: 0x4]
	float GrainIntensity;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x434, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x440, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x444, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x448, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x44c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x450, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x454, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x45c, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x464, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x468, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x478, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x47c, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x480, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x484, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x488, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x490, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x498, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x49c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4a0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4a4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4a8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4ac, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4b0, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x4b4, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4b8, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4bc, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4c0, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4c4, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4c8, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4cc, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4d0, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x4d4, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4d8, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4dc, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4e0, Size: 0x4]
	float LPVSize;//[Offset: 0x4e4, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4ec, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4f0, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4f4, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4f8, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4fc, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x500, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x504, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x508, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x50c, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x510, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x514, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x518, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x51c, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x520, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x524, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x528, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x52c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x52e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x530, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x534, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x538, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x53c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x540, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x544, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x548, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x54c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x550, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x558, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x570]
	float BasePostProcessBlendWeight;//[Offset: 0x5d0, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x67b8124
	void SetScale(float NewDuration);// 0x67b7fdc
	void SetDuration(float NewDuration);// 0x67b8080

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x294, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x298, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x29c, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x2a0, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x67be8cc
	void PlayCameraShake(class CameraShake InCameraShake);// 0x67be978
	void Play();// 0x67bea1c
	float GetAttenuationFactor(out const Vector Location);// 0x67be814

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x67b982c
	Actor* GetViewTarget();// 0x67b97f0
	void EnableModifier();// 0x67b9720
	void DisableModifier(bool bImmediate);// 0x67b973c
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x4c8f29c
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x4c8f29c

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x280, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x288, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x290, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x2a0, Size: 0x30]
	float BaseFOV;//[Offset: 0x2d0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2d8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2e8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x230, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x240, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x250, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x260, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x270, Size: 0x10]
	void ToggleActive();// 0x67f0ba4
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x67f08f4
	void SetTemplate(ParticleSystem* NewTemplate);// 0x67f0ac0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x67f0648
	void SetFloatParameter(FName ParameterName, float Param);// 0x67f09d8
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x67f0810
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x67f072c
	void OnRep_bCurrentlyActive();// 0x67f0be0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x67f0bfc
	bool IsActive();// 0x67f0b6c
	void Deactivate();// 0x67f0bb8
	void Activate();// 0x67f0bcc

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x691d638

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x4b8, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x4c0, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x4d0, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e1, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e1, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e1, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e1, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4e1, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e2, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e2, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e2, Size: 0x1]
	byte LODMethod;//[Offset: 0x4ed, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x4ee, Size: 0x1]
	float SignificanceValue;//[Offset: 0x4f0, Size: 0x4]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x4f8, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x508, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x518, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x528, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x538, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	Vector OldPosition;//[Offset: 0x54c, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x558, Size: 0xc]
	float WarmupTime;//[Offset: 0x564, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x568, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x570, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x578, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x598, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x5b0, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x608, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x610, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x618, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x619, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x61a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x648, Size: 0x10]
	float LastFrameTickTime;//[Offset: 0x718, Size: 0x4]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x69221a8
	void SetTemplate(ParticleSystem* NewTemplate);// 0x69224c8
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x692256c
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x692304c
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x6922f18
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x692317c
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x69233e0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x69232ac
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x6923510
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x6923640
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x692372c
	int GetNumActiveParticles();// 0x6922494
	MaterialInterface* GetNamedMaterial(FName InName);// 0x6922000
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x69227a0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x6922650
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x69228e8
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x6922b80
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x6922a30
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x6922cc8
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x6922e10
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x6921e50
	void EndTrails();// 0x6922314
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x69220b4
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6922328

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6921684
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x692110c
	void SetFloatParameter(FName ParameterName, float Param);// 0x6921770
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x6921378
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6921598
	void SetBoolParameter(FName ParameterName, bool Param);// 0x6921860
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x69211c0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x69214ac
	void ReleaseToPool();// 0x69210f0
	FXSystemAsset* GetFXSystemAsset();// 0x6921470

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x600]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x600]
	PlayerState* PlayerState;//[Offset: 0x610, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x230, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x238, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x240, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	float AspectRatio;//[Offset: 0x254, Size: 0x4]
	float FOVAngle;//[Offset: 0x258, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x25c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x570]
	int GetAutoActivatePlayerIndex();// 0x67b79f8

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x294, Size: 0x4]
	float OrthoWidth;//[Offset: 0x298, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x29c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x2a0, Size: 0x4]
	float AspectRatio;//[Offset: 0x2a4, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x2a9, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2e0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x310, Size: 0x570]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x67b8c7c
	void SetProjectionMode(byte InProjectionMode);// 0x67b8bdc
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x67b8b3c
	void SetOrthoWidth(float InOrthoWidth);// 0x67b8fc4
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x67b8f24
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x67b8e84
	void SetFieldOfView(float InFieldOfView);// 0x67b9064
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x67b8d30
	void SetAspectRatio(float InAspectRatio);// 0x67b8de4
	void RemoveBlendable(interface classNone InBlendableObject);// 0x67b8734
	void OnCameraMeshHiddenChanged();// 0x67b8720
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x67b89d0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x67b8860

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x28c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x290, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x298, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x2a0, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	void TurnAtRate(float Rate);// 0x67e1ab8
	void MoveUp_World(float Val);// 0x67e1b64
	void MoveRight(float Val);// 0x67e1c10
	void MoveForward(float Val);// 0x67e1cbc
	void LookUpAtRate(float Rate);// 0x67e1a0c

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x4d0, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x699d630
	float GetUnscaledSphereRadius();// 0x699d5cc
	float GetShapeScale();// 0x699d58c
	float GetScaledSphereRadius();// 0x699d5e8

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x4dc, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x4e0, Size: 0x4]
	int MinLOD;//[Offset: 0x4e4, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x4e8, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x4f0, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x4f8, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fc, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4fc, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4fc, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4fc, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fd, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4fd, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4fd, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fd, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4fd, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x500, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x504, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x508, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x50c, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x510, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x520, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x530, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x69b1764
	void SetReverseCulling(bool ReverseCulling);// 0x69b1474
	void SetForcedLodModel(int NewForcedLodModel);// 0x69b16c0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x69b161c
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x69b181c
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x69b1520

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x67ce64c
	void ViewSelf();// 0x67ce23c
	void ViewPlayer(FString S);// 0x67ce184
	void ViewClass(class Actor DesiredClass);// 0x67ce02c
	void ViewActor(FName ActorName);// 0x67ce0d8
	void UpdateSafeArea();// 0x67cd414
	void ToggleServerStatReplicatorUpdateStatNet();// 0x67cd428
	void ToggleServerStatReplicatorClientOverwrite();// 0x67cd43c
	void ToggleDebugCamera();// 0x67cde0c
	void ToggleAILogging();// 0x67cddf0
	void TestCollisionDistance();// 0x67cdabc
	void Teleport();// 0x67ce730
	void Summon(FString ClassName);// 0x67ce274
	void StreamLevelOut(FName PackageName);// 0x67cde28
	void StreamLevelIn(FName PackageName);// 0x67cdf80
	void SpawnServerStatReplicator();// 0x67cd464
	void Slomo(float NewTimeDilation);// 0x67ce568
	void SetWorldOrigin();// 0x67cd5a8
	void SetMouseSensitivityToDefault();// 0x67cd58c
	void ServerToggleAILogging();// 0x67cdd94
	void ReceiveInitCheatManager();// 0x4c8f29c
	void ReceiveEndPlay();// 0x4c8f29c
	void PlayersOnly();// 0x67ce258
	void OnlyLoadLevel(FName PackageName);// 0x67cded4
	void LogLoc();// 0x67cd5bc
	void InvertMouse();// 0x67cd570
	void God();// 0x67ce614
	void Ghost();// 0x67ce630
	void FreezeFrame(float Delay);// 0x67ce74c
	void Fly();// 0x67ce668
	void FlushLog();// 0x67cd5d8
	void EnableDebugCamera();// 0x67cd3f8
	void DumpVoiceMutingState();// 0x67cda4c
	void DumpPartyState();// 0x67cda84
	void DumpOnlineSessionState();// 0x67cdaa0
	void DumpChatState();// 0x67cda68
	void DisableDebugCamera();// 0x67cd3dc
	void DestroyTarget();// 0x67ce4a0
	void DestroyServerStatReplicator();// 0x67cd450
	void DestroyPawns(class Pawn aClass);// 0x67ce32c
	void DestroyAllPawnsExceptTarget();// 0x67ce3d8
	void DestroyAll(class Actor aClass);// 0x67ce3f4
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x67cdc8c
	void DebugCapsuleSweepPawn();// 0x67cdaf4
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x67cdb2c
	void DebugCapsuleSweepClear();// 0x67cdad8
	void DebugCapsuleSweepChannel(byte Channel);// 0x67cdbe0
	void DebugCapsuleSweepCapture();// 0x67cdb10
	void DebugCapsuleSweep();// 0x67cdd78
	void DamageTarget(float DamageAmount);// 0x67ce4bc
	void CheatScript(FString ScriptName);// 0x67cd478
	void ChangeSize(float F);// 0x67ce684
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x67cd5f4
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x67cd858
	void BugIt(FString ScreenShotDescription);// 0x67cd7a0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ad, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ad, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5ad, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5ad, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5ad, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5ad, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5ad, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5ad, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5b0, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5b8, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5c0, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5c8, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x650, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x658, Size: 0x8]
	float SpeedScale;//[Offset: 0x660, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x664, Size: 0x4]
	float InitialAccel;//[Offset: 0x668, Size: 0x4]
	float InitialDecel;//[Offset: 0x66c, Size: 0x4]
	void ToggleDisplay();// 0x67dfb40
	void ShowDebugSelectedInfo();// 0x67dfb54
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x67dfa68
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x4c8f29c
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x4c8f29c
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x4c8f29c
	Actor* GetSelectedActor();// 0x67dfb0c

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x4b8, Size: 0x4]
	float FrustumAngle;//[Offset: 0x4bc, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x4c0, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x4c4, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x4c8, Size: 0x4]
	Texture* Texture;//[Offset: 0x4d0, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x168, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1528, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1a48, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f0, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x230, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x240, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x248, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x250, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x258, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x260, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x268, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x270, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x278, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x280, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x288, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x290, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x298, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x2a0, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	void StartPlay();// 0x680f938
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x680ed4c
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x680ec24
	bool ShouldReset(Actor* ActorToReset);// 0x680f840
	void ReturnToMainMenuHost();// 0x680f808
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x680ee40
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x680ef60
	void RestartPlayer(Controller* NewPlayer);// 0x680f04c
	void ResetLevel();// 0x680f824
	bool PlayerCanRestart(PlayerController* Player);// 0x680f0f8
	bool MustSpectate(PlayerController* NewPlayerController);// 0x680f6a4
	void K2_PostLogin(PlayerController* NewPlayer);// 0x4c8f29c
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x4c8f29c
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x4c8f29c
	void K2_OnLogout(Controller* ExitingController);// 0x4c8f29c
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x4c8f29c
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x680f1b0
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x680eb38
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x680ea8c
	bool HasMatchStarted();// 0x680f8f8
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x680f75c
	int GetNumSpectators();// 0x680f954
	int GetNumPlayers();// 0x680f990
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x680f9cc
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x680f2ac
	Actor* ChoosePlayerStart(Controller* Player);// 0x680f3b0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x680f464
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x680f5ac

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x230, Size: 0x4]
	int MaxPlayers;//[Offset: 0x234, Size: 0x4]
	int MaxPartySize;//[Offset: 0x238, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x23c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1]
	FName SessionName;//[Offset: 0x240, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x230, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x238, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x240, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x248, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x25c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x260, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x264, Size: 0x4]
	void OnRep_SpectatorClass();// 0x6821788
	void OnRep_ReplicatedWorldTimeSeconds();// 0x6821750
	void OnRep_ReplicatedHasBegunPlay();// 0x682176c
	void OnRep_GameModeClass();// 0x68217a4
	bool HasMatchStarted();// 0x6821928
	bool HasBegunPlay();// 0x6821968
	float GetServerWorldTimeSeconds();// 0x68219a8
	float GetPlayerStartTime(Controller* Controller);// 0x6821874
	float GetPlayerRespawnDelay(Controller* Controller);// 0x68217c0

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	uint32 Channels;//[Offset: 0x234, Size: 0x4]
	uint32 InRate;//[Offset: 0x238, Size: 0x4]
	uint32 OutRate;//[Offset: 0x23c, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x244, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x248, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x24c, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x250, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x254, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x258, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x25c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x260, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x264, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x268, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x26c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x270, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x274, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x278, Size: 0x4]
	uint32 InPackets;//[Offset: 0x27c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x280, Size: 0x4]
	uint32 InBunches;//[Offset: 0x284, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x288, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x28c, Size: 0x4]
	uint32 InLoss;//[Offset: 0x290, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x294, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x298, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x29c, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x2a0, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2a4, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2a8, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d8, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2dc, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2e0, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2e4, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2e8, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2ec, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x230, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x234, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x238, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x23c, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x240, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x244, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x248, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x24c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x250, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x258, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x25c, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x260, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x264, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x268, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x26c, Size: 0x4]
	float MoveRepSize;//[Offset: 0x270, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x274, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x278, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x27c, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x280, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x284, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x288, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x28c, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x298, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x29c, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2a0, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2a4, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a8, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2b0, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2b4, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2c4, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c8, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2cc, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x230, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x238, Size: 0x8]
	float PlayRate;//[Offset: 0x240, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x248, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x24c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x250, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x258, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x270, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x280, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	float InterpPosition;//[Offset: 0x294, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x29c, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2a0, Size: 0x10]
	delegate OnStop;//[Offset: 0x2b0, Size: 0x10]
	delegate OnPause;//[Offset: 0x2c0, Size: 0x10]
	void Stop();// 0x68f078c
	void SetPosition(float NewPosition, bool bJump);// 0x68f0664
	void SetLoopingState(bool bNewLooping);// 0x68f0594
	void Reverse();// 0x68f0770
	void Play();// 0x68f07a8
	void Pause();// 0x68f0754
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x68f0448
	void ChangePlaybackDirection();// 0x68f0648

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x298, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x2a0, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x2a8, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x67cfe64

--------------------------------
Class: Interface.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x4d0, Size: 0x8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x4c8f29c
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x68bb458
	bool RemoteEvent(FName EventName);// 0x68bb65c
	void LevelReset();// 0x4c8f29c

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x240, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x248, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x4b8, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c0, Size: 0x1]
	float ScreenSize;//[Offset: 0x4c4, Size: 0x4]
	float U;//[Offset: 0x4c8, Size: 0x4]
	float UL;//[Offset: 0x4cc, Size: 0x4]
	float V;//[Offset: 0x4d0, Size: 0x4]
	float VL;//[Offset: 0x4d4, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x679b8dc
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x679b728
	void SetSprite(Texture2D* NewSprite);// 0x679ba4c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x120, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x130, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 0x8]
	bool ShouldBeLoaded();// 0x68bc0c8
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x68bc338
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x68bc284
	void SetPriority(int NewPriority);// 0x68bc13c
	void SetLevelLODIndex(int LODIndex);// 0x68bc1e0
	bool IsStreamingStatePending();// 0x68bc018
	bool IsLevelVisible();// 0x68bc074
	bool IsLevelLoaded();// 0x68bc050
	FName GetWorldAssetPackageFName();// 0x68bc108
	Level* GetLoadedLevel();// 0x68bc0ac
	LevelScriptActor* GetLevelScriptActor();// 0x68bbf2c
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x68bbf60

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x268, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x279, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x848, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc5c, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xc90, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xcf8, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x679ad60
	int GetObjectCount();// 0x679ae88
	int GetNewAvoidanceUID();// 0x679ae54
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x679acb0

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 0x4]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 0x10]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x69d1384

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapID;//[Offset: 0x408, Size: 0x4]
	FName PreloadAssets;//[Offset: 0x40c, Size: 0x8]
	class SolarPostProcessSettingItem* PostProcessItemClass;//[Offset: 0x418, Size: 0x8]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x420, Size: 0x8]
	int CurrentActiveColorThemeIndex;//[Offset: 0x428, Size: 0x4]
	int SolarMapTypeValue;//[Offset: 0x42c, Size: 0x4]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]

--------------------------------
Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 0x580]

--------------------------------
Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 0x1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 0x570]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x268, Size: 0x4]

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x270, Size: 0x8]
	void SetAreaClass(class NavArea NewAreaClass);// 0x6c0ed68

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: SolarPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x268, Size: 0x4]
	FString Side;//[Offset: 0x270, Size: 0x10]
	FString Job;//[Offset: 0x280, Size: 0x10]
	FString ElementID;//[Offset: 0x290, Size: 0x10]
	enum Type;//[Offset: 0x2a0, Size: 0x1]
	enum State;//[Offset: 0x2a1, Size: 0x1]
	enum Visibility;//[Offset: 0x2a2, Size: 0x1]
	FName ElementTypeName;//[Offset: 0x2a4, Size: 0x8]
	FString GroupKey;//[Offset: 0x2b0, Size: 0x10]
	Vector[] PlayerLocations;//[Offset: 0x2c0, Size: 0x10]
	void SetElementVisibility(const enum NewType);// 0x474911c
	enum SetElementState(const enum NewState);// 0x47491c8
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4c8f29c
	void OnElementStateChanged(const enum CurrentState);// 0x4c8f29c

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x254, Size: 0x8]

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 0x1]
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40c, Size: 0x1]
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40c, Size: 0x1]
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40c, Size: 0x1]
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40c, Size: 0x1]
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40c, Size: 0x1]
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40c, Size: 0x1]
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40c, Size: 0x1]
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40d, Size: 0x1]
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40d, Size: 0x1]
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40d, Size: 0x1]
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40d, Size: 0x1]
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40d, Size: 0x1]
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40d, Size: 0x1]
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40d, Size: 0x1]
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40d, Size: 0x1]
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40e, Size: 0x1]
	bool bDrawNavMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40e, Size: 0x1]
	float DrawOffset;//[Offset: 0x410, Size: 0x4]
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x414, Size: 0x1]
	int TilePoolSize;//[Offset: 0x418, Size: 0x4]
	float TileSizeUU;//[Offset: 0x41c, Size: 0x4]
	float CellSize;//[Offset: 0x420, Size: 0x4]
	float CellHeight;//[Offset: 0x424, Size: 0x4]
	float AgentRadius;//[Offset: 0x428, Size: 0x4]
	float AgentHeight;//[Offset: 0x42c, Size: 0x4]
	float AgentMaxHeight;//[Offset: 0x430, Size: 0x4]
	float AgentMaxSlope;//[Offset: 0x434, Size: 0x4]
	float AgentMaxStepHeight;//[Offset: 0x438, Size: 0x4]
	float MinRegionArea;//[Offset: 0x43c, Size: 0x4]
	float MergeRegionSize;//[Offset: 0x440, Size: 0x4]
	float MaxSimplificationError;//[Offset: 0x444, Size: 0x4]
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x448, Size: 0x4]
	int TileNumberHardLimit;//[Offset: 0x44c, Size: 0x4]
	int PolyRefTileBits;//[Offset: 0x450, Size: 0x4]
	int PolyRefNavPolyBits;//[Offset: 0x454, Size: 0x4]
	int PolyRefSaltBits;//[Offset: 0x458, Size: 0x4]
	Vector NavMeshOriginOffset;//[Offset: 0x45c, Size: 0xc]
	float DefaultDrawDistance;//[Offset: 0x468, Size: 0x4]
	float DefaultMaxSearchNodes;//[Offset: 0x46c, Size: 0x4]
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x470, Size: 0x4]
	byte RegionPartitioning;//[Offset: 0x474, Size: 0x1]
	byte LayerPartitioning;//[Offset: 0x475, Size: 0x1]
	int RegionChunkSplits;//[Offset: 0x478, Size: 0x4]
	int LayerChunkSplits;//[Offset: 0x47c, Size: 0x4]
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 0x1]
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x480, Size: 0x1]
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x480, Size: 0x1]
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x480, Size: 0x1]
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x480, Size: 0x1]
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x480, Size: 0x1]
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x480, Size: 0x1]
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x480, Size: 0x1]
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x481, Size: 0x1]
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x481, Size: 0x1]
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x481, Size: 0x1]
	float TileSetUpdateInterval;//[Offset: 0x484, Size: 0x4]
	float HeuristicScale;//[Offset: 0x488, Size: 0x4]
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x48c, Size: 0x4]
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0x6c0f984

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x238, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x240, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2b9, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2bc, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2c0, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x230, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x239, Size: 0x1]
	void SetMobility(byte InMobility);// 0x69b0cb0

--------------------------------
Class: SolarNavLinkManager.NavLinkProxy.Actor.Object
	SolarNavLinkRegisterComponent* SolarSmartLinkComp;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x240, Size: 0x10]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x250, Size: 0x10]
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x260, Size: 0x8]
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	delegate OnSmartLinkReached;//[Offset: 0x270, Size: 0x10]
	void SetSmartLinkEnabled(bool bEnabled);// 0x6cef024
	void ResumePathFollowing(Actor* Agent);// 0x6cef108
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x4c8f29c
	bool IsSmartLinkEnabled();// 0x6cef0d0
	bool HasMovingAgents();// 0x6ceefec

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0xc]
	Vector Right;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4]
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4]
	float SnapRadius;//[Offset: 0xc, Size: 0x4]
	float SnapHeight;//[Offset: 0x10, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	byte Direction;//[Offset: 0x1c, Size: 0x1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0xc]
	Vector LeftEnd;//[Offset: 0x3c, Size: 0xc]
	Vector RightStart;//[Offset: 0x48, Size: 0xc]
	Vector RightEnd;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: SolarNavLinkRegisterComponent.NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	<uint32,SmartLinkInstance> SmartLinkMap;//[Offset: 0x190, Size: 0x50]
	byte LinkType;//[Offset: 0x230, Size: 0x1]
	Vector VaultPoint;//[Offset: 0x234, Size: 0xc]
	Vector VaultDirect;//[Offset: 0x240, Size: 0xc]
	enum VaultAnimate;//[Offset: 0x24c, Size: 0x1]
	Vector VaultLandPoint;//[Offset: 0x250, Size: 0xc]

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xf0, Size: 0x4]
	class NavArea* EnabledAreaClass;//[Offset: 0xf8, Size: 0x8]
	class NavArea* DisabledAreaClass;//[Offset: 0x100, Size: 0x8]
	NavAgentSelector SupportedAgents;//[Offset: 0x108, Size: 0x4]
	Vector LinkRelativeStart;//[Offset: 0x10c, Size: 0xc]
	Vector LinkRelativeEnd;//[Offset: 0x118, Size: 0xc]
	byte LinkDirection;//[Offset: 0x124, Size: 0x1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x125, Size: 0x1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x125, Size: 0x1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x125, Size: 0x1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x125, Size: 0x1]
	Vector ObstacleOffset;//[Offset: 0x128, Size: 0xc]
	Vector ObstacleExtent;//[Offset: 0x134, Size: 0xc]
	class NavArea* ObstacleAreaClass;//[Offset: 0x140, Size: 0x8]
	float BroadcastRadius;//[Offset: 0x148, Size: 0x4]
	float BroadcastInterval;//[Offset: 0x14c, Size: 0x4]
	byte BroadcastChannel;//[Offset: 0x150, Size: 0x1]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0xe0, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x6c0f158

--------------------------------
Class: SmartLinkInstance
	byte LinkType;//[Offset: 0x0, Size: 0x1]
	uint32 NavLinkUserId;//[Offset: 0x4, Size: 0x4]
	class NavArea* EnabledAreaClass;//[Offset: 0x8, Size: 0x8]
	class NavArea* DisabledAreaClass;//[Offset: 0x10, Size: 0x8]
	NavAgentSelector SupportedAgents;//[Offset: 0x18, Size: 0x4]
	Vector LinkRelativeStart;//[Offset: 0x1c, Size: 0xc]
	Vector LinkRelativeEnd;//[Offset: 0x28, Size: 0xc]
	byte LinkDirection;//[Offset: 0x34, Size: 0x1]
	Vector VaultPoint;//[Offset: 0x38, Size: 0xc]
	Vector VaultDirect;//[Offset: 0x44, Size: 0xc]
	enum VaultAnimate;//[Offset: 0x50, Size: 0x1]
	Vector VaultLandPoint;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: SolarNavLink_Jet.NavLinkProxy.Actor.Object
	float JetTimeout;//[Offset: 0x280, Size: 0x4]
	bool bNoFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool bMarkInValidAfterFailedUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]

--------------------------------
Class: SolarNavLink_Vault.NavLinkProxy.Actor.Object
	float VaultTimeOut;//[Offset: 0x280, Size: 0x4]
	bool bNoFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool bMarkInValidAfterFailedUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	float VaultTriggerSpeed;//[Offset: 0x288, Size: 0x4]
	float MaxDistancePrecision;//[Offset: 0x28c, Size: 0x4]

--------------------------------
Class: BP_TutorialLevelGameMode_C.STutorialLevelGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SolarGameModeAIComponent* SolarGameModeAI;//[Offset: 0x4e0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4e8, Size: 0x8]
	FString GetModuleName();// 0x4c8f29c

--------------------------------
Class: STutorialLevelGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	class SolarChargingPile[] ChargingZoneClass;//[Offset: 0x468, Size: 0x10]
	ChargingZone[] ChargingZones;//[Offset: 0x478, Size: 0x10]
	float TimeToEnd;//[Offset: 0x488, Size: 0x4]
	delegate OnPlayerDisconnectedGame;//[Offset: 0x498, Size: 0x10]
	delegate OnPlayerReconnectedGame;//[Offset: 0x4a8, Size: 0x10]
	int SettlementStageConfigID;//[Offset: 0x4d8, Size: 0x4]
	void SettlePlayerBattleData(SolarPlayerState* Player);// 0x45a6414
	void ReceiveBattleOver();// 0x4c8f29c
	void OnPlayerLeaveDSTimeOut(SolarPlayerState* PlayerState);// 0x45a627c
	bool IsAutoSettlementWhenKilled();// 0x45a6328
	void CalculatePlayerReward(SolarPlayerState* Player);// 0x45a6368

--------------------------------
Class: SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate PreStartPlay;//[Offset: 0x318, Size: 0x10]
	delegate CalledStartPlay;//[Offset: 0x328, Size: 0x10]
	delegate PostStartPlay;//[Offset: 0x338, Size: 0x10]
	delegate PreHandleMatchHasStarted;//[Offset: 0x348, Size: 0x10]
	delegate CalledHandleMatchHasStarted;//[Offset: 0x358, Size: 0x10]
	delegate PostHandleMatchHasStarted;//[Offset: 0x368, Size: 0x10]
	delegate PreRestartPlayer;//[Offset: 0x378, Size: 0x10]
	delegate CalledRestartPlayer;//[Offset: 0x388, Size: 0x10]
	delegate PostRestartPlayer;//[Offset: 0x398, Size: 0x10]
	delegate PreEndPlay;//[Offset: 0x3a8, Size: 0x10]
	delegate CalledEndPlay;//[Offset: 0x3b8, Size: 0x10]
	delegate PostEndPlay;//[Offset: 0x3c8, Size: 0x10]
	GameModeCompBase*[] GameModeComponents;//[Offset: 0x3d8, Size: 0x10]
	int GamePlayMode;//[Offset: 0x3ec, Size: 0x4]
	class Actor[] ManagerClasses;//[Offset: 0x3f0, Size: 0x10]
	FString CharacterClassPath;//[Offset: 0x400, Size: 0x10]
	int CharacterIdInTrainningCourse;//[Offset: 0x410, Size: 0x4]
	int SkinIdInTrainningCourse;//[Offset: 0x414, Size: 0x4]
	int BagIdInTrainingCourse;//[Offset: 0x418, Size: 0x4]
	bool bManuallyModifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int SpecifiedCharacterSkinID;//[Offset: 0x420, Size: 0x4]
	bool bManuallyModifyCharacterBagId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int SpecifiedCharacterBagID;//[Offset: 0x428, Size: 0x4]
	bool bManuallyModifyCharacterBagTrailId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	int SpecifiedCharacterBagTrailID;//[Offset: 0x430, Size: 0x4]
	delegate OnPostSpawnDefaultSolarCharacterAtTransform;//[Offset: 0x438, Size: 0x10]
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x448, Size: 0x8]
	SolarGameModeStatisticsComponent* StatComponent;//[Offset: 0x450, Size: 0x8]
	float[] RadarBrokenRadios;//[Offset: 0x458, Size: 0x10]
	void UpdatePlayerState(FString PlayerId, int CharacterId, int SkinId, int CharacterLevel);// 0x467eb00
	void UpdatePlayerDataForBotAI(int AIConfigID, SolarPlayerState* PlayerState);// 0x4c8f29c
	void UpdatePlayerData(int CharacterSkinID, int CharacterBagID, int CharacterBagTrailID, SolarPlayerState* PlayerState);// 0x4c8f29c
	void UpdateBackpackData(FString PlayerId, int Grade, int NewUnLockNum);// 0x467e9c4
	FString TryKickOutOnlinePlayer(FString PlayerId);// 0x467f26c
	void StartFillUpBotAI();// 0x467e9b0
	void SetGamePlayMode(int InGamePlayMode);// 0x467ecbc
	void SendHitMsgWithBool(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, bool bo);// 0x467ee0c
	void SendHitMsg(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, FString Params);// 0x467efd8
	void RestartPlayerTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x4c8f29c
	void RestartPlayerEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x4c8f29c
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(Controller* NewPlayer, SolarCharacter* NewCharacter);// 0x4c8f29c
	void NotifyItemStateChanged(const Actor* Item, const int State);// 0x4c8f29c
	void KickOutPlayerToLobby(FString InPlayerId);// 0x467f1bc
	void KickOutAllPlayerToLobby();// 0x467f1a8
	void InitCharacterClassPath(int CharacterId);// 0x4c8f29c
	FString GetMonsterClassPath(int AICharacterID);// 0x4c8f29c
	void GetMonsterAISpawnSettings(int inPlayerTeamSize, out MonsterAISpawnSettings outMonsterAISpawnSettings);// 0x4c8f29c
	int GetGamePlayMode();// 0x467ec80
	static GameModeGlobalSetting* GetGameModeSetting(const Object* WorldContextObject);// 0x467ed68
	int GetBotAINumber();// 0x4c8f29c
	void GameModeComponentTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x4c8f29c
	void GameModeComponentEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection);// 0x4c8f29c
	void EndPlayTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x4c8f29c
	void EndPlayEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x4c8f29c

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2d0, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]
	int NumSpectators;//[Offset: 0x2dc, Size: 0x4]
	int NumPlayers;//[Offset: 0x2e0, Size: 0x4]
	int NumBots;//[Offset: 0x2e4, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2e8, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2ec, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f0, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f8, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x308, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x30c, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	void StartMatch();// 0x680e1b0
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x680df78
	void Say(FString Msg);// 0x680e024
	void RestartGame();// 0x680e178
	bool ReadyToStartMatch();// 0x680e11c
	bool ReadyToEndMatch();// 0x680e0dc
	void K2_OnSetMatchState(FName NewState);// 0x4c8f29c
	bool IsMatchInProgress();// 0x680e20c
	bool HasMatchEnded();// 0x680e1cc
	FName GetMatchState();// 0x680e24c
	void EndMatch();// 0x680e194
	void AbortMatch();// 0x680e15c

--------------------------------
Class: GameModeCompBase.ActorComponent.Object
	bool bPreStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bTakeChargeStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bPostStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bPreHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool bTakeChargeHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]
	bool bPostHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bPreRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	bool bTakeChargeRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 0x1]
	bool bPostRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool bPreEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 0x1]
	bool bTakeChargeEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bPostEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	void PreStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x455f230
	void PreRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x455e9a0
	void PreHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x455ee08
	void PreGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x455f168
	void PreGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x455e898
	void PreGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x455ed40
	void PreGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x455e328
	void PreEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x455e430
	void PostStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x455ef90
	void PostRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x455e638
	void PostHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x455eb68
	void PostGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x455eec8
	void PostGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x455e530
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x455eaa0
	void PostGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x455dfc0
	void PostEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x455e0c8
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x455f050
	void OnGameModeRestartPlayer(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x455e738
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x455ec28
	void OnGameModeEndPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x455e1c8
	SolarGameMode* GetGameModeOwner();// 0x455f2f0

--------------------------------
Class: SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	class SolarBotAIController* BotAIControllerClass;//[Offset: 0xd8, Size: 0x8]
	class SolarAIControllerBase* OfflinePlayerAIControllerClass;//[Offset: 0xe0, Size: 0x8]
	SolarGameMode* GameModeOwner;//[Offset: 0xe8, Size: 0x8]
	MonsterAISpawnSettings VolumeMonsterSpawnSettings;//[Offset: 0x108, Size: 0x68]
	bool EnableMonsterSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]

--------------------------------
Class: SolarBotAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	SolarBotLootComponent* BotLootComponent;//[Offset: 0x388, Size: 0x8]
	SolarPerceptionComponent* BotPerceptionComponent;//[Offset: 0x390, Size: 0x8]
	NavAgentProperties VehicleAgentProperties;//[Offset: 0x398, Size: 0x30]
	int UniqueSpawnerID;//[Offset: 0x3c8, Size: 0x4]
	BehaviorTree* BattleSubTree;//[Offset: 0x3d0, Size: 0x8]
	GameplayTag BattleSubTreeTag;//[Offset: 0x3d8, Size: 0x8]
	int DefaultDifficultyLevel;//[Offset: 0x3e0, Size: 0x4]
	float CharacterLookAtInterpSpeed;//[Offset: 0x3e4, Size: 0x4]
	float SimulatedCameraInterpSpeed;//[Offset: 0x3e8, Size: 0x4]
	bool bInitDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 0x1]
	int BotDefaultWeaponId;//[Offset: 0x3f0, Size: 0x4]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	BotFireConfig DefaultFireConfig;//[Offset: 0x3f8, Size: 0x10]
	BotFireConfig FireConfigToBot;//[Offset: 0x408, Size: 0x10]
	BotFireConfig VehicleFireConfig;//[Offset: 0x418, Size: 0x10]
	BotFireConfig VehicleFireConfigToBot;//[Offset: 0x428, Size: 0x10]
	float DamageFactorToVehicle;//[Offset: 0x438, Size: 0x4]
	float DamageFactorToBotVehicle;//[Offset: 0x43c, Size: 0x4]
	float BotAIAttackRange;//[Offset: 0x440, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0x444, Size: 0x4]
	bool bSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	BotBonusDropConfig BonusDropConfig;//[Offset: 0x44c, Size: 0x18]
	float MinimumDistanceForRepeatedBoarding;//[Offset: 0x464, Size: 0x4]
	enum BotAIType;//[Offset: 0x468, Size: 0x1]
	int BotFeature;//[Offset: 0x46c, Size: 0x4]
	Vector2D MovementVector;//[Offset: 0x470, Size: 0x8]
	Actor* AITarget;//[Offset: 0x4e8, Size: 0x8]
	SolarWarmTargetComponent* WarmTargetComponent;//[Offset: 0x518, Size: 0x8]
	delegate OnBotAIDeath;//[Offset: 0x520, Size: 0x10]
	SolarCharacter* PossessedCharacer;//[Offset: 0x548, Size: 0x8]
	SolarFollowingComponent* PathFollowingComp;//[Offset: 0x550, Size: 0x8]
	NgaiAIControllerComponent* NgaiComponent;//[Offset: 0x560, Size: 0x8]
	void UpdateDynamicSubtree();// 0x4613760
	void UpdateCharacterRotate(float DeltaTime);// 0x46136bc
	void StopBehaviorTree();// 0x46135d8
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4613368
	bool SetupBotAIDifficulty(int DifficultyLevel);// 0x4c8f29c
	void OnReset();// 0x4c8f29c
	void OnEnterLanding();// 0x4613664
	void InitBotAIConfig();// 0x4c8f29c
	Actor* GetTargetEnemy();// 0x46135ec
	SolarCharacter* GetSolarCharacter();// 0x4613680
	byte GetMyTeamID();// 0x4613628
	bool CanActivateVehicleAbility(int SeatIndex, int AbilityIndex);// 0x4613774
	float CalculateScoreForAITarget(const Actor* AITargetActor);// 0x461352c

--------------------------------
Class: SolarAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x358, Size: 0x8]
	AISenseConfig_Sight* SightConfig;//[Offset: 0x360, Size: 0x8]
	AISenseConfig_Damage* DamageSenseConfig;//[Offset: 0x368, Size: 0x8]
	int AICharacterID;//[Offset: 0x370, Size: 0x4]
	void DestroyCharacterCorpse();// 0x45eb160

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f8, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f8, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f8, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f8, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x300, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x308, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x310, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x318, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x320, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x328, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x330, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x338, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x6cbc3a4
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x6cbc25c
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x6cbbe10
	void SetMoveBlockDetection(bool bEnable);// 0x6cbc564
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x6cbc4ac
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x4c8f29c
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x6cbbeec
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x6cbc6b4
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x6cbc994
	void K2_SetFocus(Actor* NewFocus);// 0x6cbc024
	void K2_SetFocalPoint(Vector FP);// 0x6cbc0c8
	void K2_ClearFocus();// 0x6cbbfdc
	bool HasPartialPath();// 0x6cbc648
	PathFollowingComponent* GetPathFollowingComponent();// 0x6cbbed0
	byte GetMoveStatus();// 0x6cbc680
	Vector GetImmediateMoveDestination();// 0x6cbc610
	Actor* GetFocusActor();// 0x6cbbff0
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x6cbc16c
	Vector GetFocalPoint();// 0x6cbc224
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x6cbbeb4
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x6cbc300

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc8, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xf0, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x6cce478
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x6cce660
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x6cce384
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x6ccec7c
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x6cce56c
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x6cce9a0
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x6cce8ac
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x6ccea94
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x6cceb88
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x6cce7b0
	bool IsVectorValueSet(out const FName KeyName);// 0x6cce2c4
	Vector GetValueAsVector(out const FName KeyName);// 0x6ccee30
	FString GetValueAsString(out const FName KeyName);// 0x6ccefac
	Rotator GetValueAsRotator(out const FName KeyName);// 0x6cced70
	Object* GetValueAsObject(out const FName KeyName);// 0x6ccf464
	FName GetValueAsName(out const FName KeyName);// 0x6cceef0
	int GetValueAsInt(out const FName KeyName);// 0x6ccf230
	float GetValueAsFloat(out const FName KeyName);// 0x6ccf174
	byte GetValueAsEnum(out const FName KeyName);// 0x6ccf2ec
	class Object GetValueAsClass(out const FName KeyName);// 0x6ccf3a8
	bool GetValueAsBool(out const FName KeyName);// 0x6ccf0b4
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x6cce09c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x6cce1b0
	void ClearValue(out const FName KeyName);// 0x6ccdfe8

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc8, Size: 0x8]
	void StopLogic(FString Reason);// 0x6cd1b5c
	void StartLogic();// 0x6cd1c30
	void RestartLogic();// 0x6cd1c14
	bool IsRunning();// 0x6cd1b1c
	bool IsPaused();// 0x6cd1adc

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x6cbfc4c
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x6cbfd20
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x6cbfb20
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x6cbf890
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x6cbf978

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x6cc6f48
	void AIIgnorePlayers();// 0x6cc6f64

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x138, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x270, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x6cc8c50
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x6cc8e70
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CoolDownDuration, bool bAddToExistingDuration);// 0x6cc8d3c

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x6ce7c88

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x6ce6540
	Vector[] GetResultsAsLocations();// 0x6ce6628
	Actor*[] GetResultsAsActors();// 0x6ce66d8
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x6ce6788
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x6ce6854
	float GetItemScore(int ItemIndex);// 0x6ce6920
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x4c8f29c

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x6cba4d4

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x6cf00a4
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x6cef758
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x6cef5b0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6cefd08
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6cefee0
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6cef878
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6cefac0

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x6cc3b9c

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector HitLocation;//[Offset: 0x10, Size: 0xc]
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8]
	Actor* Instigator;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SolarBotLootComponent.ActorComponent.Object
	BehaviorTree* LootSubTree;//[Offset: 0xb8, Size: 0x8]
	GameplayTag LootSubTreeTag;//[Offset: 0xc0, Size: 0x8]
	float MoveCostFactor;//[Offset: 0xc8, Size: 0x4]
	float AssualtRifleBaseValue;//[Offset: 0xcc, Size: 0x4]
	float ShotgunBaseValue;//[Offset: 0xd0, Size: 0x4]
	float SubmachinegunBaseValue;//[Offset: 0xd4, Size: 0x4]
	float SniperBaseValue;//[Offset: 0xd8, Size: 0x4]
	float WeaponQualityValue;//[Offset: 0xdc, Size: 0x4]
	float AmmoBaseValue;//[Offset: 0xe0, Size: 0x4]
	float AmmoMatchFactor;//[Offset: 0xe4, Size: 0x4]
	float ShieldBaseValue;//[Offset: 0xe8, Size: 0x4]
	float ShieldQualityValue;//[Offset: 0xec, Size: 0x4]
	float JetpackModuleBaseValue;//[Offset: 0xf0, Size: 0x4]
	float JetpackModuleQualityValue;//[Offset: 0xf4, Size: 0x4]
	float MedkitBaseValue;//[Offset: 0xf8, Size: 0x4]
	float MedkitHPRatioFactor;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: SolarPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	float ThreatUpdateInterval;//[Offset: 0x188, Size: 0x4]
	float AttackTriggerThreshold;//[Offset: 0x18c, Size: 0x4]
	float CancelAttackTriggerThreshold;//[Offset: 0x190, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x194, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x198, Size: 0x4]
	float SwitchTargetDifferenceValue;//[Offset: 0x19c, Size: 0x4]
	float SightIncreaseBase;//[Offset: 0x1a0, Size: 0x4]
	float SightIncreaseDistanceFactor;//[Offset: 0x1a4, Size: 0x4]
	float SightDecreaseBase;//[Offset: 0x1a8, Size: 0x4]
	float SightDecreaseDistanceFactor;//[Offset: 0x1ac, Size: 0x4]
	float SightDecreaseMax;//[Offset: 0x1b0, Size: 0x4]
	float SightMaxValue;//[Offset: 0x1b4, Size: 0x4]
	float HearingAddBase;//[Offset: 0x1b8, Size: 0x4]
	float HearingAddDistanceFactor;//[Offset: 0x1bc, Size: 0x4]
	float HearingDecreasePerTick;//[Offset: 0x1c0, Size: 0x4]
	float HearingMaxValue;//[Offset: 0x1c4, Size: 0x4]
	float BotThreatFactor;//[Offset: 0x1c8, Size: 0x4]
	float PlayerThreatFactor;//[Offset: 0x1cc, Size: 0x4]
	float DeathVergeFactor;//[Offset: 0x1d0, Size: 0x4]
	bool bTargetSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	FName[] ForbiddenTags;//[Offset: 0x1d8, Size: 0x10]
	void UpdateSenseConfig();// 0x4722914
	void SetTargetSelectEnabled(bool bInEnable);// 0x4722adc
	void SetForbiddenTags(out const FName[] Tags, bool bCleanExists);// 0x47229d4
	void OnBotPercaptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x4722750
	void ClearCurrentThreat(bool bCleanBestTarget);// 0x4722928

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb8, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xe0, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x168, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x178, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x6cbe5d0
	void RequestStimuliListenerUpdate();// 0x6cbebc4
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x6cbebd8
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x6cbeaf0
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x6cbe7d8
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x6cbe8e0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x6cbe9e8
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x6cbe6c0
	void ForgetAll();// 0x6cbebb0

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: BotFireConfig
	float ShootDisperse;//[Offset: 0x0, Size: 0x4]
	float HitRate;//[Offset: 0x4, Size: 0x4]
	float ActiveDamageRate;//[Offset: 0x8, Size: 0x4]
	float ActiveDamageFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BotBonusDropConfig
	float ActiveTime;//[Offset: 0x0, Size: 0x4]
	float DeactiveTime;//[Offset: 0x4, Size: 0x4]
	int NumOfAmmo;//[Offset: 0x8, Size: 0x4]
	int KitId;//[Offset: 0xc, Size: 0x4]
	int NumOfKit;//[Offset: 0x10, Size: 0x4]
	int NumOfElectricity;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x108, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x6cf0930
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x6cf0a40
	Vector GetPathDestination();// 0x6cf09d4
	byte GetPathActionType();// 0x6cf0a0c

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb8, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xd0, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xe0, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x6cf2698
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x6cf27d0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x6cf2540
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x6cf25ec

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x6cf1334
	void Finish(byte WithResult);// 0x6cf11a4
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x6cf1250

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SolarWarmTargetComponent.ActorComponent.Object
	SolarPlayerController* WarmPlayerController;//[Offset: 0xb8, Size: 0x8]
	bool bEnableWarmClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bEnableWarmDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bExcludeHasEnemyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bExcludeHasEnemyBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bExcludeHasSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: SolarPlayerController.PlayerController.Controller.Actor.Object
	delegate OnPawnReplicated;//[Offset: 0x5e0, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x5f0, Size: 0x10]
	delegate OnCatchInputActionDelegate;//[Offset: 0x600, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0x610, Size: 0x10]
	delegate OnNotifiedMarkedItemWasPickedUpDelegate;//[Offset: 0x620, Size: 0x10]
	SolarInputManager* InputManager;//[Offset: 0x630, Size: 0x8]
	delegate OnHUDSpawnedDelegate;//[Offset: 0x638, Size: 0x10]
	Vector2D InputMovementVector;//[Offset: 0x6bc, Size: 0x8]
	float InputRotatePitch;//[Offset: 0x6c4, Size: 0x4]
	float InteractHoldTimer;//[Offset: 0x6dc, Size: 0x4]
	class SolarCharacterSpringArmComponent* FollowArmClass;//[Offset: 0x720, Size: 0x8]
	class SolarCharacterCameraComponent* FollowCameraClass;//[Offset: 0x728, Size: 0x8]
	float FreeLookSmoothSpeed;//[Offset: 0x730, Size: 0x4]
	SolarCharacterSpringArmComponent* FollowArm;//[Offset: 0x740, Size: 0x8]
	SolarCharacterCameraComponent* FollowCamera;//[Offset: 0x748, Size: 0x8]
	FString PlayerId;//[Offset: 0x758, Size: 0x10]
	float VehicleInteractionDistance;//[Offset: 0x790, Size: 0x4]
	int PeekInput;//[Offset: 0x7b8, Size: 0x4]
	delegate OnTeammateHUDDodgeSet;//[Offset: 0x810, Size: 0x10]
	<SolarCharacter*,int> TeammateCandidates;//[Offset: 0x820, Size: 0x50]
	bool bIsAlreadyParachuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	Actor*[] UniqueActorArray;//[Offset: 0x8d0, Size: 0x10]
	float HangUpTime;//[Offset: 0x8e0, Size: 0x4]
	UserWidget* DamageTextWidget;//[Offset: 0x920, Size: 0x8]
	SolarDamageText[] SameFrameDamageTextDataCache;//[Offset: 0x928, Size: 0x10]
	TimerHandle SameFrameDamageTextDataHandle;//[Offset: 0x938, Size: 0x8]
	SolarWarmClockComponent* WarmClockComp;//[Offset: 0x9e0, Size: 0x8]
	delegate OnSpectateInfoRep;//[Offset: 0x9e8, Size: 0x10]
	void WorldMarkDelayExecFunction();// 0x47397e8
	void UseMedicine();// 0x473111c
	void UnMarkWorldInLevel(int64 instanceID);// 0x4733cdc
	void Turn(float Value);// 0x4739e30
	void TryRechargeShield();// 0x4731100
	void TryPickupFirstItem();// 0x47310e4
	void TriggerVoiceByType(enum VoiceType);// 0x4733b8c
	void SwtichVehicleSeatNotification();// 0x473438c
	void SwitchWeaponByReverseOrder();// 0x472ecfc
	void SwitchWeaponByOrder();// 0x472ed10
	void SwitchSpectatedCharacterInTeam(int PosInTeam);// 0x472f2c0
	void SwitchInputBinding(out const FName InputName, enum SwitchTpye);// 0x47308ac
	void StopRecordingAtDS();// 0x4735e04
	void StartRecordingAtDS(FString Filename);// 0x4735e34
	void SolarSlot(int ID);// 0x4734234
	void SolarServerNetProfileStop();// 0x473297c
	void SolarServerNetProfileStart();// 0x4732990
	void SolarOpenUI(FString UIID, int RootID);// 0x4738620
	void SolarModule(int ID);// 0x47342e0
	void SolarISPC(FString _str);// 0x4737a70
	void SolarGM_Weapon(FString Type, FString paramOne, FString paramTwo);// 0x47388dc
	void SolarGM_TutorialTipsUI(int ID);// 0x4736680
	void SolarGM_TeleportToBotAIServer(uint32 CtrlIndex);// 0x47370f8
	void SolarGM_StopRecordingAtDS();// 0x4735e20
	void SolarGM_StartShrinkSafeArea();// 0x4737d80
	void SolarGM_StartRecordingAtDS(FString Filename);// 0x4735eec
	void SolarGM_SpawnMonsterGroupAtCrosshairServer(int inPlayerTeamSize, int NumberToSpawn, int StrengthGrade);// 0x473749c
	void SolarGM_SpawnMonsterGroupAtCrosshair(int inPlayerTeamSize, int NumberToSpawn, int StrengthGrade);// 0x47375cc
	void SolarGM_SpawnMonsterAIAtCrosshair(int MonsterAICharacterID, int StrengthGrade);// 0x47373b8
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int Num);// 0x47376f4
	void SolarGM_SpawnBotAIAtCrosshair(int AICharacterID);// 0x47378e0
	void SolarGM_SpawnAIAtCrosshairServer(int AICharacterID, bool bIsBotAI, int StrengthGrade);// 0x47377a0
	void SolarGM_ShowRedZoneDamage(bool IsShow);// 0x4736dac
	void SolarGM_ShowNotice(int NoticeId);// 0x4736ab4
	void SolarGM_ShowDrone(bool IsShow);// 0x4737cb8
	void SolarGM_ShowAllSafeArea(bool IsShow);// 0x4737e48
	void SolarGM_SetTeamID(int InTeamID);// 0x4736880
	void SolarGM_SetStatDataForDebug();// 0x4736940
	void SolarGM_SetSolarPlayerID(FString InSolarPlayer);// 0x4736054
	void SolarGM_SetReconnection(bool IsReconnection);// 0x4736a08
	void SolarGM_SetPlayerData(FString InPlayerId);// 0x4736724
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(FString bSwitch);// 0x4736340
	void SolarGM_SetGyroscopeTiltZThreshold(float Value);// 0x47363f0
	void SolarGM_SetGyroscopeTiltYThreshold(float Value);// 0x4736494
	void SolarGM_SetGyroscopeTiltFrameCount(float Value);// 0x473629c
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);// 0x47365dc
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);// 0x4736538
	void SolarGM_ServerStartShrinkSafeArea();// 0x4737d64
	void SolarGM_ServerShowRedZoneDamage(bool IsShow);// 0x4736cf8
	void SolarGM_ServerShowAllSafeArea(bool IsShow);// 0x4737d94
	void SolarGM_ServerSetTeamID(int InTeamID);// 0x47367d4
	void SolarGM_ServerSetStatDataForDebug();// 0x4736924
	void SolarGM_ServerSetSolarPlayerID(FString InSolarPlayer);// 0x4735f9c
	void SolarGM_ServerSetReconnection(bool IsReconnection);// 0x4736954
	void SolarGM_ServerSetPlayerData(FString InPlayerId);// 0x4736134
	void SolarGM_ServerDebugOffline();// 0x4736104
	void SolarGM_ServerConsoleCommand(FString InConsoleCommand);// 0x47343bc
	void SolarGM_ServerClosePoisonDamage(bool isClose);// 0x4737ef4
	void SolarGM_ServerChangeDayLight(int ID);// 0x4737b68
	void SolarGM_ResetZoneBombsFire();// 0x4736b74
	void SolarGM_RefreshSafeArea();// 0x473840c
	void SolarGM_RedZoneServer(const int ZoneId);// 0x4738054
	void SolarGM_RedZone(const int ZoneId);// 0x4738100
	void SolarGM_PoisonServer(FString GMType);// 0x47381a4
	void SolarGM_Poison(FString GMType);// 0x473835c
	void SolarGM_PlayerUndetectableByAIServer(int debugValue);// 0x4736e58
	void SolarGM_PlayerUndetectableByAI(int debugValue);// 0x4736f04
	void SolarGM_PickHomeitems(int ID, int InCount);// 0x4738714
	void SolarGM_PauseMonsterSpawnVolumesServer(bool pauseSpawn);// 0x47371a4
	void SolarGM_PauseMonsterSpawnVolumes(bool pauseSpawn);// 0x4737258
	void SolarGM_NoviceTestGetWidget(FString PanelName, FString ChildWidgetName);// 0x473825c
	void SolarGM_NoviceGuidance(int ActionID, bool bOn);// 0x4737984
	void SolarGM_KillAllAIServer(bool KillBot);// 0x4737304
	void SolarGM_KickMeOut();// 0x4735df0
	void SolarGM_GoPreviousHomeCameraMode();// 0x4730884
	void SolarGM_GoNextHomeCameraMode();// 0x4730898
	void SolarGM_GoHomeCameraModeByIndex(int Index);// 0x47307e0
	void SolarGM_GMGoSpectatePreviousPlayer();// 0x472fb34
	void SolarGM_GMGoSpectatePlayerByIndex(uint32 Index);// 0x472fa90
	void SolarGM_Freelook(bool Open);// 0x4738a2c
	void SolarGM_DebugOffline();// 0x4736120
	void SolarGM_DebugAllAIServer(int debugValue);// 0x4736fa8
	void SolarGM_DebugAllAI(int debugValue);// 0x4737054
	void SolarGM_ClosePoisonDamage(bool isClose);// 0x4737fa8
	void SolarGM_ClientShowRedZoneDamage(Vector bombLocation, Vector CharacterLocation, float Distance, float Damage);// 0x4736b88
	void SolarGM_ClientSetPlayerData(FString InPlayerId);// 0x47361ec
	void SolarGM_ClientGotoLogin();// 0x4c8f29c
	void SolarGM_Character(FString GMType, FString Param1, FString Param2);// 0x4738420
	void SolarGM_ChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x473523c
	void SolarGM_ChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x4734dcc
	void SolarGM_ChangeVehicleIntProperty(FString InPropertyName, int inInt);// 0x47355a4
	void SolarGM_ChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x4734570
	void SolarGM_ChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x4735888
	void SolarGM_ChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x473495c
	void SolarGM_ChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x4735b7c
	void SolarGM_ChangeDayLight(int ID);// 0x4737c14
	void SolarGM(FString _str);// 0x4738ad8
	void SolarEnergy(int InMode, int ID);// 0x47387f8
	void SolarCloseUI(FString UIID);// 0x4738570
	void SolarClientNetProfileStop();// 0x47329a4
	void SolarClientNetProfileStart();// 0x47329b8
	void ShowBackpackUI();// 0x4c8f29c
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x4c8f29c
	void SetAllTeammateHUDDodge(bool bDodge);// 0x47329e8
	void ServerTeleportTo(const Vector DestLocation);// 0x4731204
	void ServerSyncPlayerSelfReport();// 0x473a094
	void ServerSwitchSpectatedCharacterInTeam(int PosInTeam);// 0x472f214
	void ServerSpawnVehicleWithVehicleID(const int VehicleID);// 0x4732554
	void ServerSpawnVehicle(const int SpawnID);// 0x4732600
	void ServerSpawnTreasureBox(const int TreasureBoxID);// 0x47324a8
	void ServerSpawnSolarRadar(FString BpPath);// 0x4732758
	void ServerSpawnOutcomeContent(const int OutcomeID);// 0x47326ac
	void ServerSpawnChargingPile(FString BpPath);// 0x4732810
	void ServerSpawnAirdrop(const int AirdropID);// 0x47323fc
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float SpreadStatuSpeed);// 0x4731714
	void ServerSolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x473142c
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x47312ac
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x4731518
	void ServerSolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x47318c8
	void ServerSolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x4731f04
	void ServerSolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x4731c8c
	void ServerSolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x4731ac0
	void ServerSolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float Lifetime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x47321c0
	void ServerSetPlayerLevel(int InLevel);// 0x472ef14
	void ServerSetHangUpBehavior();// 0x4730db8
	void ServerSetFreeLook(bool bInFreeLook);// 0x4738f7c
	void ServerSetActorOwner(Actor* TargetActor);// 0x473a238
	void ServerRPCResetZoneBombsFire();// 0x4736b58
	void ServerRespondSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState, bool bAgreed);// 0x472fd40
	void ServerRespondSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState, bool bAgreed);// 0x47300a4
	void ServerRequestSkydivingLeaderTransfer(SolarPlayerState* DesiredLeaderPlayerState);// 0x472fee4
	void ServerRequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x47302f4
	void ServerPlayerUpgrade(int InLevel);// 0x472ee68
	void ServerPlayerResumeSettlement();// 0x473a224
	void ServerPlayerRequestLogout(bool IsGiveUp);// 0x473a318
	void ServerPlayerGoToSettlement();// 0x473a3cc
	void ServerNetProfile(bool startOrStop);// 0x47328c8
	void ServerInviteSkydivingFollow(SolarPlayerState* FollowerPlayerState);// 0x4730248
	void ServerGoSpectatePreviousPlayer();// 0x472fa60
	void ServerGoSpectatePlayerByPlayerIdInternal(FString SolarPlayerId);// 0x472f0b0
	void ServerGoSpectatePlayerByPlayerId(FString SolarPlayerId);// 0x472f8f8
	void ServerGoSpectatePlayerByIndex_Internal(int Index);// 0x472f168
	void ServerGoSpectatePlayerByIndex(int Index);// 0x472f9a8
	void ServerGoSpectateNextPlayer();// 0x472fa4c
	void ServerGainExperience(int InExp);// 0x472efc0
	void ServerEnableCheats();// 0x47311e8
	void ServerCmd(FString Cmd);// 0x4731130
	void ServerChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x47350bc
	void ServerChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x4734c4c
	void ServerChangeVehicleIntProperty(FString InPropertyName, int InFloat);// 0x47354a8
	void ServerChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x4734474
	void ServerChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x473578c
	void ServerChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x47347dc
	void ServerChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x4735a78
	void ServerCancelSkydivingFollow();// 0x472ff90
	void ServerCallMonsterAICmd(int InType, float Param);// 0x4730dd4
	void SendRepliableMessageServer(const int Message);// 0x473358c
	void SendRepliableMessageInMsgBucket(out const int[] MessageIDs);// 0x47336ec
	void SendRepliableMessageByMessageID(out const int ID);// 0x4733638
	void SendQuickMessageServer(FString Message, bool bSound);// 0x47337ac
	void SendQuickMessageClient(FString NickName, FString Message, bool IsLocalPlayer, bool bSound, int PosInTeam);// 0x4733398
	void SendLocalizationTeamMessageServer(int TextID, const LocTextParam[] TextParams, FString SoundEvent);// 0x4733088
	void SendLocalizationTeamMessageClient(const SolarPlayerState* SenderPS, int TextID, const LocTextParam[] TextParams, FString SoundEvent, int PosInTeam);// 0x4732e80
	void SendLocalizationTeamMessage(int TextID, out const <FString,int> TextParamsId, FString SoundEvent);// 0x4733208
	void SendDamageTextDataNextTick(out const SolarDamageText InSolarDamageText);// 0x4730b1c
	void RespondSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState, bool bAgreed);// 0x4730400
	void RespondSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState, bool bAgreed);// 0x47305a8
	void ResetPeekInput();// 0x4732c20
	void ResetJoyStickSprintState();// 0x4c8f29c
	void ResetJoyStickControlInput();// 0x4c8f29c
	void ResetAllInput();// 0x473998c
	void RequestSkydivingLeaderTransfer(SolarPlayerState* DesiredLeaderPlayerState);// 0x47304f0
	void RequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x473073c
	void QuickMessageLuaCall(FString Message, bool bSound);// 0x4733954
	int QueryStage();// 0x4c8f29c
	void PostInputAction(FName ActionName, byte KeyEvent);// 0x4739304
	void PlayerGoToSettleMent();// 0x4739f78
	void PlayerGotoLobbyWithLogout();// 0x4739f64
	void PassiveTriggeredVoice(enum VoiceType);// 0x47338b0
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);// 0x4c8f29c
	void OnTeamNumChangeFun(enum ChangeType, int OldValue, int NewValue);// 0x4733a50
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);// 0x4c8f29c
	void OnSpectateTargetChangedHandler(SolarPlayerState* OldTarget, SolarSpectateInfo* MySpecInfo);// 0x472f598
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnSkydivingStatusUpdated(SolarPlayerState* SelfPlayerState, bool bInIsSkydiving);// 0x4c8f29c
	void OnShowGameNotice(const int InNoticeID, out const <FString,FString> InNoticeParams);// 0x472ed24
	RotationBarMarkWidget*[] OnShowActorMarkDelegate__DelegateSignature(Actor*[] MarkActors);// 0x4c8f29c
	void OnSeamlessTravelEnd();// 0x4739f0c
	void OnReceivedSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState);// 0x4c8f29c
	void OnReceivedSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState);// 0x4c8f29c
	void OnReceiveBattleEnd();// 0x4c8f29c
	void OnPutAwayWeaponPressed();// 0x472ece8
	void OnPlayerStateRepHandlerForSpectate(enum RepType, PlayerState* InPlayerState);// 0x472f728
	void OnPawnReplicated__DelegateSignature();// 0x4c8f29c
	void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(out const int64 InItemInstanceId);// 0x4c8f29c
	void OnEnterVoyageDelegate__DelegateSignature();// 0x4c8f29c
	void OnEnterLanding();// 0x47329cc
	void OnEndSpectateMode(SolarSpectateInfo* MySpecInfo);// 0x472f364
	void OnCustomizeLevelLoaded();// 0x472fb48
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(RotationBarMarkWidget*[] MarkWidgets);// 0x4c8f29c
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(Actor*[] MarkActors);// 0x4c8f29c
	void OnCharacterRebirthLua();// 0x4c8f29c
	void OnCharacterDeathLua();// 0x4c8f29c
	void OnCatchInputActionDelegate__DelegateSignature(FName ActionName, byte InputEventType);// 0x4c8f29c
	void OnBeginSpectateMode(SolarSpectateInfo* MySpecInfo);// 0x472f408
	void OnBeforeSpectateTargetChanged(SolarPlayerState* NewTarget, SolarSpectateInfo* MySpecInfo);// 0x472f4ac
	void OnAppHasReactivated();// 0x4732e28
	void OnAppHasDeactiveated();// 0x4732e3c
	void NotifyMonsterSpawn();// 0x4c8f29c
	void NotifyCrouchIsLocked();// 0x4c8f29c
	void NotifyAppReactivate();// 0x4c8f29c
	void NotifyAppHasDeactivate();// 0x4c8f29c
	void NofityCustomizeLevelLoaded();// 0x4c8f29c
	void MarkWorldInLevelLuaCall(out const WorldMarkData InWorldMarkedData);// 0x4733e60
	void MarkWorldInLevel(const WorldMarkData InWorldMarkedData);// 0x4733d88
	void MarkPointInNavMapLuaCall(out const Vector2D InMarkedPoint);// 0x4733fe8
	void MarkPointInNavMap(const Vector2D InMarkedPoint);// 0x4733f40
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x4734098
	void MarkedAsAppHasReactivated();// 0x4732df0
	void MarkedAsAppHasDeactivated();// 0x4732e0c
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x4c8f29c
	void LuaCallInputTouch(uint32 Handle, byte Type, out const Vector2D TouchLocation);// 0x4730fac
	void LookUp(float Value);// 0x4739c30
	void KickMeOutAtDS(FString InPlayerId);// 0x4735d38
	bool IsSpectatingOtherPlayer();// 0x472f8c0
	bool IsHasSkydiveAndEnd();// 0x47303c8
	void InviteSkydivingFollow(SolarPlayerState* FollowerPlayerState);// 0x4730698
	void InputWorldMarkReleased();// 0x47397c0
	void InputWorldMarkPressed();// 0x47397d4
	void InputVerticalJetReleased();// 0x4739914
	void InputVerticalJetPressed();// 0x4739928
	void InputUseMedicineReleased();// 0x47395a4
	void InputUseMedicinePressed();// 0x47395b8
	void InputToggleTertiaryWeapon_Checkbox();// 0x47396f8
	void InputToggleSecondaryWeaponReleased();// 0x4739734
	void InputToggleSecondaryWeaponPressed();// 0x4739748
	void InputToggleSecondaryWeapon_Checkbox();// 0x473970c
	void InputTogglePrimaryWeaponReleased();// 0x473975c
	void InputTogglePrimaryWeaponPressed();// 0x4739770
	void InputTogglePrimaryWeapon_Checkbox();// 0x4739720
	void InputSwitchToSeatTwoPressed();// 0x4739504
	void InputSwitchToSeatThreePressed();// 0x47394f0
	void InputSwitchToSeatOnePressed();// 0x4739518
	void InputSwitchToSeatFourPressed();// 0x47394dc
	void InputSwitchFireModeReleased();// 0x473952c
	void InputSwitchFireModePressed();// 0x4739540
	void InputStartRepairVehicleReleased();// 0x4739450
	void InputSprintLockStart();// 0x4739694
	void InputSprintFreeTerminate();// 0x47396a8
	void InputSprintFreeStart();// 0x47396bc
	void InputSprintFreeReleasedOnPC();// 0x47396d0
	void InputSprintFreePressedOnPC();// 0x47396e4
	void InputReloadReleased();// 0x4739798
	void InputReloadPressed();// 0x47397ac
	void InputRechargeShieldReleased();// 0x473957c
	void InputRechargeShieldPressed();// 0x4739590
	void InputPickupReleased();// 0x4739554
	void InputPickupPressed();// 0x4739568
	void InputOpenSettingPressed();// 0x4739784
	void InputMoveRight(float InValueY);// 0x4739ae8
	void InputMovementYReceived(float InValueY);// 0x47399a0
	void InputMovementXReceived(float InValueX);// 0x4739a44
	void InputMoveForward(float InValueX);// 0x4739b8c
	void InputMapPressed();// 0x47397fc
	void InputLeftFireReleased();// 0x4739874
	void InputLeftFirePressed();// 0x4739888
	void InputJumpReleased();// 0x4739964
	void InputJumpPressed();// 0x4739978
	void InputInteractReleased();// 0x4739824
	void InputInteractPressed();// 0x4739838
	void InputHorizontalJetReleased();// 0x47398ec
	void InputHorizontalJetPressed();// 0x4739900
	void InputGunsightReleased();// 0x473966c
	void InputGunsightPressed();// 0x4739680
	void InputGetOnVehicleReleased();// 0x4739478
	void InputGetOffVehicleReleased();// 0x4739464
	void InputFreeLookReleased();// 0x473984c
	void InputFreeLookPressed();// 0x4739860
	void InputFireReleased();// 0x473989c
	void InputFirePressed();// 0x47398b0
	void InputEscapeUIPressed();// 0x4739810
	void InputEquip2Released();// 0x473961c
	void InputEquip2Pressed();// 0x4739630
	void InputEquip1Released();// 0x4739644
	void InputEquip1Pressed();// 0x4739658
	void InputEjectReleased();// 0x47395f4
	void InputEjectPressed();// 0x4739608
	void InputDriveVehicleReleased();// 0x473948c
	void InputCrouchReleased();// 0x473993c
	void InputCrouchPressed();// 0x4739950
	void InputCancelVehicleAbilityReleased();// 0x47394a0
	void InputBuilding();// 0x47393ec
	void InputBackpackReleased();// 0x47395cc
	void InputBackpackPressed();// 0x47395e0
	void InputAltFireReleased();// 0x47398c4
	void InputAltFirePressed();// 0x47398d8
	void InputActiveVehicleSecondAbilityReleased();// 0x47394b4
	void InputActiveVehicleFirstAbilityReleased();// 0x47394c8
	void InputActionSecondaryReleased();// 0x4739400
	void InputActionSecondaryPressed();// 0x4739414
	void InputActionPrimaryReleased();// 0x4739428
	void InputActionPrimaryPressed();// 0x473943c
	bool IfSolarCharacterIsDriver();// 0x4732c5c
	static void HandleDamageText(Actor* InDamageSource, Controller* InAutonomousController, out SolarPointDamageEvent InPointDamageEvent);// 0x47309d8
	void HandleBeginSpectateRequest();// 0x472f8ac
	void GyroscopeTilt(Vector Tilt);// 0x4739d8c
	void GyroscopeRotationRate(Vector RotationRate);// 0x4739ce8
	SolarCharacter* GetViewportFocusedCharacter();// 0x473917c
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x472f810
	SolarSpectateInfo* GetSpectateInfo();// 0x472f878
	SolarCharacter* GetSpectatedCharacter();// 0x472f844
	SolarPlayerState* GetSolarViewPlayerState();// 0x4739250
	SolarPlayerState* GetSolarPlayerState();// 0x4738b88
	SolarCharacter* GetSolarCharacter();// 0x4739f28
	enum GetPlayNetStateInGame();// 0x473a2e4
	PlayerStatisticsData* GetPlayerStatData();// 0x4738f48
	FString GetPlayerID();// 0x4732cfc
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x4c8f29c
	byte GetMyTeamID();// 0x4732db4
	byte GetMyPosInTeam();// 0x4732cc8
	Vector2D GetMyMarkedPointInNavMap();// 0x4732c94
	int GetMultiKillNum();// 0x4738ee0
	int GetKillNum();// 0x4738f14
	int GetKillingSpreesNum();// 0x4738eac
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();// 0x47309a0
	SolarCameraComponent* GetCurrentCameraComponent();// 0x473921c
	void GetControlledVehiclePropertyContainer(out Object*[] OutObjects);// 0x4735c78
	Rotator GetCharacterViewRotation();// 0x47391b0
	Rotator GetCameraRotation();// 0x47392c4
	Vector GetCameraLocation();// 0x4739284
	SolarCameraComponent* GetActiveCamera();// 0x47391e8
	FString GenLocalizationMessage(int TextID, out const <FString,int> TextParamsId);// 0x4c8f29c
	void ExcludeDifferentTeam(int TeamID);// 0x4732a94
	void EndOBCurrentBattle();// 0x472f088
	void DropPassengerNotification();// 0x47343a0
	void DestroyCharacterCorpse();// 0x4739ef0
	void DebugSetPlayerData();// 0x4c8f29c
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x4c8f29c
	void ClientSyncPlayerSelfReport(const SolarPlayerReport SelfReport, const SolarGameModeInfo GameInfo);// 0x4739f8c
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x4738d2c
	void ClientShowDiePage();// 0x4738e34
	void ClientRespondSkydivingLeaderTransferRequest(SolarPlayerState* DesiredLeaderPlayerState, bool bAgreed);// 0x472fc48
	void ClientRespondSkydivingFollowInvitation(SolarPlayerState* FollowerPlayerState, bool bAgreed);// 0x472ffac
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(SolarPlayerState* NewLeaderPlayerState, SolarPlayerState* OldLeaderPlayerState);// 0x472fb5c
	void ClientResetSpectatedView();// 0x472fa74
	void ClientRequestSkydivingLeaderTransfer(SolarPlayerState* RequesterPlayerState);// 0x472fe38
	void ClientReplacePlayerKillEffect(Actor* InSource, Actor* InTarget);// 0x4730ccc
	void ClientReceviceDamageText(const SolarDamageText[] InSolarDamageTextDatas);// 0x4730c14
	void ClientPlayerGoViewInstigatorCustomTime(float ReachTime, float ViewTime, float ViewSelfBoyTime);// 0x473904c
	void ClientPlayerGoToSettlement(const SolarPlayerReport[] Reports, const SolarGameModeInfo GameInfo, const int[] InSettlementPageIndexs);// 0x473a0a8
	void ClientInviteSkydivingFollow(SolarPlayerState* InviterPlayerState);// 0x473019c
	void ClientGoViewInstigator();// 0x4739030
	void ClientDoCharacterOperation(const CharacterOperationEvent ChOperationEvt);// 0x4738bc4
	void ClientCloseUI(FString UIName);// 0x4738c74
	void ClientClearAudioListenerOverride();// 0x4739ed4
	void ClientCharacterIsDead();// 0x4738e50
	void ClientBeginOBCurrentBattleInternal();// 0x472f06c
	void ClearMarkedPointInNavMapLuaCall();// 0x4732e6c
	void ClearMarkedPointInNavMap();// 0x4732e50
	void ChangeVehicleVectorPropertyInternal(FString InPropertyName, float InX, float InY, float InZ);// 0x4734f44
	void ChangeVehicleRotatorPropertyInternal(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x4734ad4
	void ChangeVehicleIntPropertyInternal(FString InPropertyName, int InFloat);// 0x47353b4
	void ChangeVehicleFloatPropertyInternal(FString InPropertyName, float InFloat);// 0x4735698
	void ChangeVehicleCurvePropertyInternal(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x4734664
	void ChangeVehicleBoolPropertyInternal(FString InPropertyName, bool InBool);// 0x473597c
	bool CanSolarCharacterLaunchJetPack();// 0x47341c4
	bool CanSolarCharacterInput();// 0x47341fc
	bool CanSolarCharacterCrouch();// 0x473418c
	void CancelSkydivingFollow();// 0x4730594
	void CallMonsterAICmd(int InType, float Param);// 0x4730ec4
	void BuyRescurrectionEnded();// 0x4733b78
	void BuildSkydivingFollowOnLeavingTeam();// 0x47303a0
	void BuildSkydivingFollowOnEnteringTeam();// 0x47303b4
	void BindSpectateDelegates(SolarSpectateInfo* SpecInfo);// 0x472f684
	void BindDelegatesDependGameState();// 0x4739cd4
	void BeNotifiedMarkedItemWasPickedUp(const int64 InItemInstanceId);// 0x4733c30
	void BeginOBCurrentBattle();// 0x472f09c
	void BackToLobby();// 0x473a428
	void AddTeammateCandidate(SolarCharacter* Candidate, int TeamID);// 0x4732b38
	void AddRightPeekInput();// 0x4732c34
	void AddLeftPeekInput();// 0x4732c48

--------------------------------
Class: SolarInputManager.ActorComponent.Object
	SolarPlayerSensitivitys* SenSetting;//[Offset: 0xb8, Size: 0x8]
	enum CurSenType;//[Offset: 0xc0, Size: 0x1]
	TouchHandler TouchHandler;//[Offset: 0xe8, Size: 0xd8]
	void SetTouchScaler(float InVal);// 0x46e74c0
	void SetNoiseThresholdFactor(float InVal);// 0x46e75a0
	void SetMouseScaler(Vector2D InVal);// 0x46e7224
	void SetCurveVerticalFix(Vector2D InVec);// 0x46e775c
	void SetCurveVerticalFactor(Vector2D InVec);// 0x46e7914
	void SetCurveHorizonFix(Vector2D InVec);// 0x46e7680
	void SetCurveHorizonFactor(Vector2D InVec);// 0x46e7838
	float GetTouchScaler();// 0x46e7568
	float GetNoiseThresholdFactor();// 0x46e7648
	Vector2D GetMouseScaler();// 0x46e72c8
	float GetFixedOutputY();// 0x46e73e0
	float GetFixedOutputX();// 0x46e7418
	float GetDeltaMoveY();// 0x46e7450
	float GetDeltaMoveX();// 0x46e7488
	Vector2D GetCurveVerticalFix();// 0x46e7800
	Vector2D GetCurveVerticalFactor();// 0x46e79b8
	Vector2D GetCurveHorizonFix();// 0x46e7724
	Vector2D GetCurveHorizonFactor();// 0x46e78dc
	float GetAverageDeltaMoveY();// 0x46e7370
	float GetAverageDeltaMoveX();// 0x46e73a8
	float GetAccelerateAdditionY();// 0x46e7300
	float GetAccelerateAdditionX();// 0x46e7338

--------------------------------
Class: SolarPlayerSensitivitys.Object
	int CurScopeType;//[Offset: 0x68, Size: 0x4]
	void UpdateSensitivity();// 0x4748920
	void SetSensitivity(enum InType, Vector2D InSensitivity);// 0x4748b4c
	void InitPlayerSensitivity();// 0x4748a8c
	Vector2D GetSensitivity(enum InType);// 0x4748aa0
	Vector2D GetScopeSensitivity(int InType);// 0x47489e0
	Vector2D GetScopeFireSensitivity(int InType);// 0x4748934

--------------------------------
Class: TouchHandler
	CurveFloat* AccelerateCurveX;//[Offset: 0x60, Size: 0x8]
	CurveFloat* AccelerateCurveY;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: SolarCharacterSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarCharacterCameraComponent* Camera;//[Offset: 0x378, Size: 0x8]
	SolarCharacter* OwnerCharacter;//[Offset: 0x380, Size: 0x8]

--------------------------------
Class: SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraLocationLagTime;//[Offset: 0x330, Size: 0x4]
	bool HandleTargetOffsetAsRelativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	static SolarSpringArmComponent* GetSpringArmComponentFromActor(const Actor* InActor);// 0x47802f8

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x294, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x298, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x2a4, Size: 0xc]
	float ProbeSize;//[Offset: 0x2b0, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x2b4, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b5, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b5, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b5, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b5, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b5, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b5, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b5, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b5, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b6, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x2b8, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x2bc, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x2c0, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x2c4, Size: 0x4]
	bool IsCollisionFixApplied();// 0x69aca88
	Vector GetUnfixedCameraPosition();// 0x69acac0
	Rotator GetTargetRotation();// 0x69acaf8

--------------------------------
Class: SolarCharacterCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* Character;//[Offset: 0x908, Size: 0x8]
	float ThirdPersonVerticalOffset;//[Offset: 0x914, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouched;//[Offset: 0x918, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouchMoving;//[Offset: 0x91c, Size: 0x4]
	float ThirdPersonHorizontalOffset;//[Offset: 0x920, Size: 0x4]
	CurveFloat* FollowForwardOffsetCurve;//[Offset: 0x928, Size: 0x8]
	float FollowForwardOffsetMultiplier;//[Offset: 0x930, Size: 0x4]
	float CrouchCameraLagTime;//[Offset: 0x934, Size: 0x4]
	float UnCrouchCameraLagTime;//[Offset: 0x938, Size: 0x4]
	float ShoulderShotVerticalOffset;//[Offset: 0x93c, Size: 0x4]
	float ShoulderShotVerticalOffsetWhenCrouched;//[Offset: 0x940, Size: 0x4]
	float ShoulderShotHorizontalOffset;//[Offset: 0x944, Size: 0x4]
	float ShoulderShotDistanceToTarget;//[Offset: 0x948, Size: 0x4]
	CurveFloat* ShoulderShotFollowDistanceCurve;//[Offset: 0x950, Size: 0x8]
	float ShoulderShotCameraFOV;//[Offset: 0x958, Size: 0x4]
	float ShoulderShotCameraZoomInOutTime;//[Offset: 0x95c, Size: 0x4]
	float ScopeShotVerticalOffsetWithStanding;//[Offset: 0x960, Size: 0x4]
	float ScopeShotVerticalOffsetWhenCrouch;//[Offset: 0x964, Size: 0x4]
	float DistanceToScopePivot;//[Offset: 0x968, Size: 0x4]
	float ArmDistanceToCamera;//[Offset: 0x96c, Size: 0x4]
	float ScopeHorizontalOffset;//[Offset: 0x970, Size: 0x4]
	float ThirdPeekVerticalOffset;//[Offset: 0x974, Size: 0x4]
	float ThirdPeekHorizontalOffset;//[Offset: 0x978, Size: 0x4]
	float FirstPeekAngle;//[Offset: 0x97c, Size: 0x4]
	float SwimDistanceToTarget;//[Offset: 0x980, Size: 0x4]
	float SwimDistSwitchSpeed;//[Offset: 0x984, Size: 0x4]
	Vector CuriseCameraOffset;//[Offset: 0x988, Size: 0xc]
	Vector CuriseTargetOffset;//[Offset: 0x994, Size: 0xc]
	float CuriseDistanceToTarget;//[Offset: 0x9a0, Size: 0x4]
	Vector SkydiveCameraOffset;//[Offset: 0x9a4, Size: 0xc]
	Vector SkydiveTargetOffset;//[Offset: 0x9b0, Size: 0xc]
	float SkydiveDistanceToTarget;//[Offset: 0x9bc, Size: 0x4]
	float SkydiveDistanceToTargetOnBoosting;//[Offset: 0x9c0, Size: 0x4]
	float SkydiveViewPitchMax;//[Offset: 0x9c4, Size: 0x4]
	float SkydiveViewPitchMin;//[Offset: 0x9c8, Size: 0x4]
	CameraSettings JetFlySettingsVertical;//[Offset: 0x9cc, Size: 0x20]
	CameraSettings JetFlySettingsFront;//[Offset: 0x9ec, Size: 0x20]
	CameraSettings JetFlySettingsBack;//[Offset: 0xa0c, Size: 0x20]
	CameraSettings JetFlySettingsLeft;//[Offset: 0xa2c, Size: 0x20]
	CameraSettings JetFlySettingsRight;//[Offset: 0xa4c, Size: 0x20]
	RuntimeFloatCurve JetFlyFadeInCurve;//[Offset: 0xa70, Size: 0x88]
	RuntimeFloatCurve JetFlyFadeOutCurve;//[Offset: 0xaf8, Size: 0x88]
	float InstigatorReachTime;//[Offset: 0xb80, Size: 0x4]
	float InstigatorSpectateTime;//[Offset: 0xb84, Size: 0x4]
	class CameraShake* CameraShakeSkydiveFlying;//[Offset: 0xb88, Size: 0x8]
	float CameraShakeSkydiveFlyingSpeedMin;//[Offset: 0xb90, Size: 0x4]
	float CameraShakeSkydiveFlyingSpeedMax;//[Offset: 0xb94, Size: 0x4]
	class CameraShake* CameraShakeJetPackLaunch;//[Offset: 0xb98, Size: 0x8]
	class CameraShake* CameraShakeLand;//[Offset: 0xba0, Size: 0x8]
	class CameraShake* CameraShakeVehicleEjectLaunch;//[Offset: 0xba8, Size: 0x8]
	float CameraShakeLandDistanceMin;//[Offset: 0xbb0, Size: 0x4]
	float CameraShakeLandDistanceMax;//[Offset: 0xbb4, Size: 0x4]
	float TakeOffCamPitchMin;//[Offset: 0xbb8, Size: 0x4]
	float TakeOffCamPitchMax;//[Offset: 0xbbc, Size: 0x4]
	float LandingSpeedThreshold;//[Offset: 0xbc0, Size: 0x4]
	JumpCamSettings TakeOffCamSettings;//[Offset: 0xbc8, Size: 0x20]
	JumpCamSettings LightLandCamSettings;//[Offset: 0xbe8, Size: 0x20]
	JumpCamSettings HeavyLandCamSettings;//[Offset: 0xc08, Size: 0x20]

--------------------------------
Class: SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float ConfigDistanceToTarget;//[Offset: 0x8d0, Size: 0x4]
	Vector ConfigCameraOffset;//[Offset: 0x8d4, Size: 0xc]
	Vector ConfigTargetOffset;//[Offset: 0x8e0, Size: 0xc]
	float ConfigFOV;//[Offset: 0x8ec, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x8f0, Size: 0x4]
	float ViewPitchMin;//[Offset: 0x8f4, Size: 0x4]
	float ViewYawMax;//[Offset: 0x8f8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x8fc, Size: 0x4]
	float CameraOccupiedRoom;//[Offset: 0x900, Size: 0x4]
	bool EnableDistanceSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	bool EnableFOVSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x905, Size: 0x1]
	static SolarCameraComponent* GetCameraComponentFromActor(const Actor* InActor);// 0x4623fb8

--------------------------------
Class: SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	delegate PendingBeginPlay;//[Offset: 0x600, Size: 0x10]
	delegate OnPlayerStatePossessDelegate;//[Offset: 0x638, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x648, Size: 0x10]
	enum SolarCharacterType;//[Offset: 0x658, Size: 0x1]
	SolarCharacter* ClientControlledCharacter;//[Offset: 0x660, Size: 0x8]
	Vector2D CharacterCapsuleSizeOverride;//[Offset: 0x668, Size: 0x8]
	bool bInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]
	float CheckInRoomInterval;//[Offset: 0x674, Size: 0x4]
	ReconnectionParams ReconnectionParams;//[Offset: 0x67d, Size: 0x1]
	SolarAnimInstance* SolarAnimInstance;//[Offset: 0x690, Size: 0x8]
	SolarSpecABP_Vehicle* SolarSpecAnim_Vehicle;//[Offset: 0x698, Size: 0x8]
	int BodyHitSoundCount;//[Offset: 0x6a4, Size: 0x4]
	SolarChargingPile*[] ChargingPileQueue;//[Offset: 0x6a8, Size: 0x10]
	int64 ChargingDoneSoundCD;//[Offset: 0x6b8, Size: 0x8]
	class CameraShake* HitCameraShake;//[Offset: 0x6d0, Size: 0x8]
	float CameraShakeCD;//[Offset: 0x6d8, Size: 0x4]
	delegate OnCharacterIDSet;//[Offset: 0x6e8, Size: 0x10]
	delegate OnSkinIDSet;//[Offset: 0x6f8, Size: 0x10]
	delegate OnCharacterSkinReset;//[Offset: 0x708, Size: 0x10]
	enum BodyScaleType;//[Offset: 0x718, Size: 0x1]
	int AssignedCharacterID;//[Offset: 0x71c, Size: 0x4]
	int AssignedSkinID;//[Offset: 0x720, Size: 0x4]
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0x870, Size: 0x8]
	SolarBackpackActor* SolarBackpackActor;//[Offset: 0x878, Size: 0x8]
	SolarBackpackComponent* SolarBackpackComponent;//[Offset: 0x880, Size: 0x8]
	BackpackJetPrepelInfo JetPropellingInfo;//[Offset: 0x890, Size: 0xc]
	Vector2D InputVector;//[Offset: 0x89c, Size: 0x8]
	GyroscopeConfig* GyroscopeConfig;//[Offset: 0x8a8, Size: 0x8]
	byte IdleTurnType;//[Offset: 0x8b0, Size: 0x1]
	Rotator CharacterLookAt;//[Offset: 0x8b4, Size: 0xc]
	float TurnSpeed;//[Offset: 0x8d8, Size: 0x4]
	float TurnChangeSpeedThreshold;//[Offset: 0x8dc, Size: 0x4]
	CharacterOperationEvent CharacterOperationEvt;//[Offset: 0x8e0, Size: 0x10]
	delegate OnHealthUpdateDelegate;//[Offset: 0x908, Size: 0x10]
	bool bIsDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x918, Size: 0x1]
	class ActorEffect* DissolvedDeathActorEffectClass;//[Offset: 0x928, Size: 0x8]
	ParticleSystem* DissolvedDeathFX;//[Offset: 0x930, Size: 0x28]
	FName DissolvedDeathFXBindingSocketName;//[Offset: 0x958, Size: 0x8]
	SolarTeamRescueComponent* SolarTeamRescueComponent;//[Offset: 0x968, Size: 0x8]
	byte CurrentRescueState;//[Offset: 0x970, Size: 0x1]
	byte LastRescueState;//[Offset: 0x971, Size: 0x1]
	InjectorMeshPreset RescueInjectorPreset;//[Offset: 0x980, Size: 0x50]
	StaticMeshComponent* RescueInjector;//[Offset: 0x9d0, Size: 0x8]
	SolarCharacter* RescuedCharater;//[Offset: 0x9fc, Size: 0x8]
	SolarPlayerWeapon*[] DeathBoxWeaponArray;//[Offset: 0xa08, Size: 0x10]
	SolarItemData[] DeathBoxArray;//[Offset: 0xa18, Size: 0x10]
	float DeathBoxEnergy;//[Offset: 0xa28, Size: 0x4]
	int DeathBoxId;//[Offset: 0xa2c, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0xa30, Size: 0x8]
	float KneeWaterInfluencesCharacterSpeed;//[Offset: 0xa38, Size: 0x4]
	float WaterDraftDepthWhenDeathVerge;//[Offset: 0xa3c, Size: 0x4]
	float ShoalWaterMaxDepth;//[Offset: 0xa40, Size: 0x4]
	float HeavyJumpWaterMinAxisVelocity;//[Offset: 0xa44, Size: 0x4]
	WaterEffectPreset SwimmingWaterEffectPreset;//[Offset: 0xa48, Size: 0x50]
	ParticleSystemComponent* SwimmingWaterEffect;//[Offset: 0xa98, Size: 0x8]
	WaterEffectPreset HeavyJumpWaterEffectPreset;//[Offset: 0xaa0, Size: 0x50]
	WaterEffectPreset[] SoftJumpWaterEffectPresets;//[Offset: 0xaf0, Size: 0x10]
	ParticleSystemComponent*[] HorizontalFlyWaterEffects;//[Offset: 0xb00, Size: 0x10]
	FName PickupCollisionProfileName;//[Offset: 0xb2c, Size: 0x8]
	SolarItemComponent* SolarItemComponent;//[Offset: 0xb38, Size: 0x8]
	SolarPickupComponent* SolarPickupComponent;//[Offset: 0xb40, Size: 0x8]
	bool bIsElectricStoreOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 0x1]
	ParticleSystem* TreatFX;//[Offset: 0xb50, Size: 0x28]
	float MinHealthRatioToShowMedicineFX;//[Offset: 0xb78, Size: 0x4]
	SolarTreatmentComponent* SolarTreatmentComponent;//[Offset: 0xb80, Size: 0x8]
	int TreatmentTextID;//[Offset: 0xb88, Size: 0x4]
	enum CurrentTreatState;//[Offset: 0xb8c, Size: 0x1]
	delegate OnShieldRecharge;//[Offset: 0xb90, Size: 0x10]
	delegate OnShieldBreak;//[Offset: 0xba0, Size: 0x10]
	delegate OnShowShieldHUD;//[Offset: 0xbb0, Size: 0x10]
	delegate OnShowShieldHUDItem;//[Offset: 0xbc0, Size: 0x10]
	delegate OnShieldUpFX;//[Offset: 0xbd0, Size: 0x10]
	delegate OnCurShieldValueChanged;//[Offset: 0xbe0, Size: 0x10]
	delegate OnShieldIDChanged;//[Offset: 0xbf0, Size: 0x10]
	delegate OnShieldValueLow;//[Offset: 0xc00, Size: 0x10]
	int CurrShieldId;//[Offset: 0xc14, Size: 0x4]
	int CurUniqueShieldId;//[Offset: 0xc18, Size: 0x4]
	float MaxShieldValue;//[Offset: 0xc1c, Size: 0x4]
	float CurrShieldValue;//[Offset: 0xc20, Size: 0x4]
	enum CurrShieldState;//[Offset: 0xc24, Size: 0x1]
	OperatorMeshPreset ShieldOperatorPreset;//[Offset: 0xc70, Size: 0x80]
	StaticMeshComponent* ShieldRepairOperator;//[Offset: 0xcf0, Size: 0x8]
	ParticleSystemComponent* ShieldRepairFX;//[Offset: 0xcf8, Size: 0x8]
	CurveFloat* ShieldOperatorExpandCurve;//[Offset: 0xd00, Size: 0x8]
	CurveFloat* ShieldOperatorNarrowCurve;//[Offset: 0xd08, Size: 0x8]
	Timeline ShieldOperatorExpandTimeline;//[Offset: 0xd10, Size: 0x98]
	Timeline ShieldOperatorNarrowTimeline;//[Offset: 0xda8, Size: 0x98]
	FName EffectAttachBone;//[Offset: 0xe40, Size: 0x8]
	ShieldEffect ShieldRechargeEffect;//[Offset: 0xe48, Size: 0x38]
	ShieldEffect ShieldBrokenEffect;//[Offset: 0xe80, Size: 0x38]
	float HitEffectOffset;//[Offset: 0xeb8, Size: 0x4]
	<enum,ShieldSoundData> ShieldSounds;//[Offset: 0xec0, Size: 0x50]
	int ShieldRechargeTextID;//[Offset: 0xf14, Size: 0x4]
	TreasureBoxOperatorMeshPreset TreasureBoxOperatorMeshPreset;//[Offset: 0xf20, Size: 0x50]
	StaticMeshComponent* TreasureBoxOperator;//[Offset: 0xf70, Size: 0x8]
	DeathTreasureBox* CurChargingDeathBox;//[Offset: 0xf78, Size: 0x8]
	DeathTreasureBox*[] DeathBoxes;//[Offset: 0xf80, Size: 0x10]
	ParticleSystem* RevivePickupFX;//[Offset: 0xf98, Size: 0x28]
	ParticleSystem* ReviveClearFX;//[Offset: 0xfc0, Size: 0x28]
	delegate OnHUDNickNameSet;//[Offset: 0xfe8, Size: 0x10]
	delegate OnHUDTeamPosSet;//[Offset: 0xff8, Size: 0x10]
	delegate OnHUDDistanceSet;//[Offset: 0x1008, Size: 0x10]
	delegate OnHUDDistanceDisplaySet;//[Offset: 0x1018, Size: 0x10]
	delegate OnHUDRescueBtnActivitySet;//[Offset: 0x1028, Size: 0x10]
	WidgetComponent* TeammateHUDComp;//[Offset: 0x1038, Size: 0x8]
	TeammateHUDPreset TeammateHUDPreset;//[Offset: 0x1040, Size: 0x20]
	float HUDZNomral;//[Offset: 0x1068, Size: 0x4]
	float HUDZSwim;//[Offset: 0x106c, Size: 0x4]
	float HUDZCrouch;//[Offset: 0x1070, Size: 0x4]
	float HUDZCrawl;//[Offset: 0x1074, Size: 0x4]
	float HUDChangeTime;//[Offset: 0x1078, Size: 0x4]
	float HUDChangeSpeed;//[Offset: 0x107c, Size: 0x4]
	float CheckHUDDistanceToCenter;//[Offset: 0x1080, Size: 0x4]
	float HUDTranslucentValue;//[Offset: 0x1084, Size: 0x4]
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0x1098, Size: 0x8]
	class UserWidget* RadarScannedScreenUIClass;//[Offset: 0x10a0, Size: 0x8]
	float RadarScreenUIDisplayTime;//[Offset: 0x10a8, Size: 0x4]
	SolarRadarComponent* SolarRadarComponent;//[Offset: 0x10b0, Size: 0x8]
	RadarDataSpecContainer ActivatedRadars;//[Offset: 0x10b8, Size: 0x120]
	SolarRadarStation* TargetRadarStation;//[Offset: 0x11d8, Size: 0x8]
	SolarElectricShop* TargetElectricShop;//[Offset: 0x11e0, Size: 0x8]
	TimerHandle StatisticsTimerHandle;//[Offset: 0x11f0, Size: 0x8]
	SolarCharacter* CachedInstigatorCharacter;//[Offset: 0x1268, Size: 0x8]
	delegate OnPlayerHitAtDirection;//[Offset: 0x1280, Size: 0x10]
	float DamageLimitTime;//[Offset: 0x1290, Size: 0x4]
	float MinHitTurnBackDistance;//[Offset: 0x1294, Size: 0x4]
	float MaxHitTurnBackDistance;//[Offset: 0x1298, Size: 0x4]
	float HitTurnBackDuration;//[Offset: 0x129c, Size: 0x4]
	float HitTurnBackCD;//[Offset: 0x12a0, Size: 0x4]
	float BaseHitTurnSpeed;//[Offset: 0x12a4, Size: 0x4]
	float MinHitTurnSpeedRate;//[Offset: 0x12a8, Size: 0x4]
	float ArmorReduceValue;//[Offset: 0x12ac, Size: 0x4]
	float HeadHitValue;//[Offset: 0x12b0, Size: 0x4]
	int InstigatorCharacterWeaponItemID;//[Offset: 0x12b4, Size: 0x4]
	float MinDistSquared;//[Offset: 0x12b8, Size: 0x4]
	float MaxDistSquared;//[Offset: 0x12bc, Size: 0x4]
	float HitTurnBackTimeStamp;//[Offset: 0x12c0, Size: 0x4]
	CriticalHitInfo[] CriticalHits;//[Offset: 0x12c8, Size: 0x10]
	float DefaultHitTraceLifetime;//[Offset: 0x131c, Size: 0x4]
	CurveFloat* DefaultHitTraceWidgetScaleCurve;//[Offset: 0x1320, Size: 0x8]
	float SniperHitTraceLifetime;//[Offset: 0x1328, Size: 0x4]
	CurveFloat* SniperHitTraceWidgetScaleCurve;//[Offset: 0x1330, Size: 0x8]
	float MeleeHitTraceLifetime;//[Offset: 0x1338, Size: 0x4]
	float VehicleHitTraceLifetime;//[Offset: 0x133c, Size: 0x4]
	CurveFloat* VehicleHitTraceWidgetScaleCurve;//[Offset: 0x1340, Size: 0x8]
	WorldMarkComponent* WorldMarkComponent;//[Offset: 0x1380, Size: 0x8]
	float PeekSpeed;//[Offset: 0x1388, Size: 0x4]
	int DesirePeekValue;//[Offset: 0x138c, Size: 0x4]
	IMChatObject* IMChatObj;//[Offset: 0x1390, Size: 0x8]
	int AIActorCapacity;//[Offset: 0x1398, Size: 0x4]
	SolarCharacterAbility* CharacterAbility;//[Offset: 0x13c0, Size: 0x8]
	SolarGameplayAbilitySet* DefaultAbilitiesWithCharacterData;//[Offset: 0x13c8, Size: 0x8]
	CharacterGameplayTagsConfig* GameplayTagsConfig;//[Offset: 0x13d0, Size: 0x8]
	float StandJogSpeed;//[Offset: 0x13f8, Size: 0x4]
	float StandRunSpeed;//[Offset: 0x13fc, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x1400, Size: 0x4]
	float CrouchJogSpeed;//[Offset: 0x1404, Size: 0x4]
	float CrouchRunSpeed;//[Offset: 0x1408, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x140c, Size: 0x4]
	float JetLandingTriggerMinVelocity;//[Offset: 0x1410, Size: 0x4]
	float JetLandingHeightThreshold;//[Offset: 0x1414, Size: 0x4]
	float JetLandingVelocity;//[Offset: 0x1418, Size: 0x4]
	delegate OnJogSetClient;//[Offset: 0x1420, Size: 0x10]
	SolarCharacterMovementComponent* CachedSolarCharacterMovement;//[Offset: 0x1430, Size: 0x8]
	bool bIsJog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x143c, Size: 0x1]
	bool bEnableCustomJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1448, Size: 0x1]
	enum CurrentCustomJumpType;//[Offset: 0x1449, Size: 0x1]
	enum CurrentJetFlyType;//[Offset: 0x144c, Size: 0x1]
	bool bNewJetFlyCheckFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144d, Size: 0x1]
	CruiseAssetSet* CruiseAssetSet;//[Offset: 0x1468, Size: 0x8]
	FString AirborneStartSound;//[Offset: 0x1470, Size: 0x10]
	FString AirborneJumpSound;//[Offset: 0x1480, Size: 0x10]
	AnimSequence* CruiseStartAnim;//[Offset: 0x1490, Size: 0x8]
	AnimSequence* CruiseLoopAnim;//[Offset: 0x1498, Size: 0x8]
	AnimSequence* CruiseEndAnim;//[Offset: 0x14a0, Size: 0x8]
	int CapsuleID;//[Offset: 0x14c0, Size: 0x4]
	bool bEnableCruising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c4, Size: 0x1]
	SolarCapsuleRoot* BoardedRoot;//[Offset: 0x14c8, Size: 0x8]
	enum CruiseState;//[Offset: 0x14d0, Size: 0x1]
	int ForceParachuteCountDown;//[Offset: 0x14d4, Size: 0x4]
	CharacterCruiseComponent* CruiseComponentPrivate;//[Offset: 0x14d8, Size: 0x8]
	SkydivingEffectPreset[] SkydivingEffectClassList;//[Offset: 0x14e8, Size: 0x10]
	float LowerLimitOfSpeedForSkydivingSoundEffect;//[Offset: 0x14f8, Size: 0x4]
	float MinPitchToPlaySkydivingLandingEffect;//[Offset: 0x14fc, Size: 0x4]
	delegate OnSkydiveTraced;//[Offset: 0x1500, Size: 0x10]
	ExponentialHeightFog* HeightFogActor;//[Offset: 0x1510, Size: 0x8]
	ParticleSystemComponent*[] SkydiveFlyingEffects;//[Offset: 0x1518, Size: 0x10]
	ParticleSystemComponent*[] SkydiveLandingEffects;//[Offset: 0x1528, Size: 0x10]
	ParticleSystemComponent*[] SkydiveWholeLifetimeEffects;//[Offset: 0x1538, Size: 0x10]
	enum CurrentSkydiveStage;//[Offset: 0x1548, Size: 0x1]
	ActorComponent* FollowedLeaderMovementComponent;//[Offset: 0x1570, Size: 0x8]
	WeaponSystemPlayerBase* WeaponSystemComponent;//[Offset: 0x1590, Size: 0x8]
	float WeaponInfluencesCharacterSpeed;//[Offset: 0x1598, Size: 0x4]
	float WeaponBlotAnimLength;//[Offset: 0x159c, Size: 0x4]
	float WeaponSwitchAnimLength;//[Offset: 0x15a0, Size: 0x4]
	float WeaponReloadAnimLength;//[Offset: 0x15a4, Size: 0x4]
	MaterialInstance* MarkMaterial;//[Offset: 0x15e0, Size: 0x8]
	SkeletalMeshComponentConfig* FirstPersonMeshConfig;//[Offset: 0x15f0, Size: 0x8]
	SkeletalMeshComponent* FirstPersonMesh;//[Offset: 0x15f8, Size: 0x8]
	float BaseGunCollisionTraceDis;//[Offset: 0x1600, Size: 0x4]
	float CurrentGunCollisionTraceDis;//[Offset: 0x1604, Size: 0x4]
	<enum,float> GunCollisionTraceStartHighIdle;//[Offset: 0x1608, Size: 0x50]
	<enum,float> GunCollisionTraceStartHighCrouch;//[Offset: 0x1658, Size: 0x50]
	float MinDistanceGun2Wall;//[Offset: 0x16a8, Size: 0x4]
	float GunCollisionXYAdjustDownSide;//[Offset: 0x16ac, Size: 0x4]
	float GunCollisionCheckZLimit;//[Offset: 0x16b0, Size: 0x4]
	class WeaponSystemPlayer* WeaponSystemPlayerClass;//[Offset: 0x16b8, Size: 0x8]
	class WeaponSystemPlayerAI* WeaponSystemAIClass;//[Offset: 0x16c0, Size: 0x8]
	class MapMarkBase* TrackingMarkWidgetClass;//[Offset: 0x16c8, Size: 0x8]
	SolarPlayerWeapon* TempSwitchWeapon;//[Offset: 0x16d8, Size: 0x8]
	WeaponSystemVehicleComponent* WeaponSystemVehicle;//[Offset: 0x1770, Size: 0x8]
	BoardedVehicleInfo BoardedVehicleInfo;//[Offset: 0x1790, Size: 0x10]
	bool bOutVehicleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a0, Size: 0x1]
	SolarVehicleWeapon* CurrentVehicleWeapon;//[Offset: 0x1850, Size: 0x8]
	VehicleRepairToolMeshPreset VehicleRepairToolMeshPreset;//[Offset: 0x1860, Size: 0x50]
	int RepairWeakPointTextID;//[Offset: 0x18b0, Size: 0x4]
	StaticMeshComponent* VehicleRepairToolMesh;//[Offset: 0x18b8, Size: 0x8]
	class ActorEffect* VehicleStealthEffectClass;//[Offset: 0x18c0, Size: 0x8]
	delegate OnCharacterActivateEMP;//[Offset: 0x18e0, Size: 0x10]
	bool bActiveEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f0, Size: 0x1]
	enum CurrentSkillType;//[Offset: 0x18f1, Size: 0x1]
	WidgetComponent* ReplayInfoHUDComponent;//[Offset: 0x1968, Size: 0x8]
	class UserWidget* ReplayInfoHUDWidgetClass;//[Offset: 0x1970, Size: 0x8]
	float VaultDegree;//[Offset: 0x1984, Size: 0x4]
	float VaultHalfHeight;//[Offset: 0x1988, Size: 0x4]
	float VaultCameraDistance;//[Offset: 0x198c, Size: 0x4]
	float VaultCheckDistanceInSprint;//[Offset: 0x1990, Size: 0x4]
	FName DetectorProfile;//[Offset: 0x1994, Size: 0x8]
	MotionWarpingComponent* SolarMotionWarpingComponent;//[Offset: 0x19a0, Size: 0x8]
	DebugReplicator* DebugReplicator;//[Offset: 0x1a30, Size: 0x8]
	FString DebugStringToDrawGASServer;//[Offset: 0x1a38, Size: 0x10]
	GameplayAbilitySpecHandle[] RoleAbilitySpecHandles;//[Offset: 0x1a50, Size: 0x10]
	bool WorldToScreen(out const Vector Location, out Vector2D Screen);// 0x462a104
	void UpdateWeaponCrosshair(float InDeltaTime);// 0x462bd94
	void UpdateVehicleStealthProgress(float StealthMaterialPercent);// 0x462a4a8
	void UpdateTeammateHUDData(byte InNewPosInTeam);// 0x462fec8
	void UpdateShieldPropertyByAblility();// 0x46314d8
	void UpdateDyingAttr(float DeltaTime);// 0x4632ff0
	float UpdateCurrentHealth(const float UpdateValue, const byte ChangeType, SolarCharacter* InInstigatorCharacter, Actor* InDamageCauserActor, out SolarPointDamageEvent DamageEvent, SolarMapElementBase* ElementObj);// 0x46332cc
	void UnbindActorToSelfTeam(Actor* Actor);// 0x462d510
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);// 0x46339f0
	void TurnCharacterToDirection(out const Vector Dir);// 0x4633ae0
	void TryStopShieldRecharge();// 0x46313dc
	void TryStatisticsRechargedTimes();// 0x463115c
	void TryStartShieldRecharge();// 0x46313f0
	void TrySetTeammateHUDShow();// 0x462fe54
	void TrySetTeammateHUDHide();// 0x462fe40
	void TrySetTeamateHUDVisiblity();// 0x462fea0
	void TryRechargeShield();// 0x463188c
	void TryHideShieldOperator();// 0x46313c8
	bool TryGotoDyingState();// 0x4633094
	void TryCreatingOwnTeammate();// 0x462fb5c
	void TryBreakShieldRecharge();// 0x4630678
	void TryBreakScopeStatus();// 0x462c284
	void TryBindPowerBarDelegates();// 0x4632628
	void TryBindPickupDelegates();// 0x4632664
	void TryBindItemPanelDelegates();// 0x4632650
	void TryBindHPPanelDelegates();// 0x463263c
	void TryAutoMarkItemForTeammateServer(const SolarItemData[] ItemData);// 0x462da3c
	void ToggleDebugInfo();// 0x4629b3c
	void ToggleDebugGASInfo();// 0x4629b28
	void TickShieldOperatorTimeline(float InDeltaTime);// 0x463168c
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x462de0c
	void StopTreatmentProgressBar();// 0x46318a0
	void StopTreatment();// 0x4631990
	void StopShieldRechargeProgressBar();// 0x4631528
	void StopShieldRechargeProgress();// 0x4631404
	void StopRescueProgressBar(const int TextID);// 0x4632d28
	void StopRepairWeakPointProgressBar();// 0x462a574
	void StopClimbSound();// 0x46348d0
	void StatisticElectricShopOnActivated(out const Vector InLocation);// 0x462f344
	void StartTurnToHitDirection(out const Vector HitDir);// 0x462e400
	void StartTreatmentProgressBar(const float Duration);// 0x46318b4
	void StartTreatment();// 0x46319a4
	void StartShieldRechargeProgressBar(const float InRechargeDuration);// 0x463153c
	void StartShieldRechargeProgress();// 0x4631418
	void StartRescueProgressBar(const float Duration, const int TextID, const bool bShowBtn);// 0x4632dcc
	void StartRepairWeakPointProgressBar(const float Duration);// 0x462a588
	void StartCheckShieldTutorials();// 0x46305ac
	void SpecAnimInstStopMontage(enum SpecAnimType, AnimMontage* AnimMontage);// 0x4634990
	float SpecAnimInstPlayMontage(enum SpecAnimType, AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x4634a80
	AnimMontage* SpecAnimInstGetCurrentMontage(enum SpecAnimType);// 0x46348e4
	void SpawnDeathBoxActor();// 0x4632c04
	void SolarLaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x462cf88
	void SolarGM_ServerEnableCustomJump(bool bEnabled);// 0x462ccd0
	void SolarGM_EnableCustomJump(int Enabled);// 0x462cd84
	void ShowShieldUIFX(const int ShiledID);// 0x4c8f29c
	void ShowShieldUI(const bool IsShow);// 0x4c8f29c
	void ShowRevivePickupEffect();// 0x4630308
	void ShowReviveClearEffect();// 0x46302f4
	void ShowRescueInjector();// 0x4632f38
	void ShieldOperatorInterpFunc(float InValue);// 0x4631744
	void SetSpectateTargetCharacter(SolarCharacter* InSpectateTargetCharacter);// 0x463013c
	void SetSelfEnergyCostEnable(bool bEnable);// 0x4632aa4
	void SetRequirementBySetting();// 0x4634090
	void SetRenderMode(byte Mode);// 0x462be54
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x462c18c
	void SetNewCharacterSkin(SkeletalMesh* NewMesh, MaterialInterface* NewMaterial, class Object NewAnimClass);// 0x4634520
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x462d2b0
	void SetActiveRescueBtn(bool bIsActive);// 0x462fb70
	void ServerUseItemRequest(int ItemID, int Num);// 0x463253c
	void ServerTryRechargeShield(const float InRecoverySpeed);// 0x46310b8
	void ServerTriggerRadarStation(SolarRadarStation* InRadarStation);// 0x462f4fc
	void ServerSyncVaultInfo(enum InVaultMontage, Actor* InContactActor, Vector InContactLocation, Rotator InContactRotation, Vector InLandLocation);// 0x4629ce8
	void ServerSwitchVehicleSeat(float LocalTime, SolarVehiclePawn* InVehicle, int TargetSeatIndex, const Vector_NetQuantize VehicleLocation, const Vector_NetQuantizeNormal VehicleEuler);// 0x462b0d0
	void ServerSwitchShield(const SolarItemData NewShieldData);// 0x4630f94
	void ServerStatisticsRechargedTimes(const int RechargedTimes);// 0x4631184
	void ServerStatisticElectricShopOnActivated(const Vector InLocation);// 0x462f29c
	void ServerStartRescue(SolarCharacter* TargetCharacter);// 0x46331f8
	void ServerSpawnProjectile(class Object ProjClass, const Vector StartLocation, const Vector Velocity);// 0x462bc5c
	void ServerSetTreasureBoxState(SolarTreasureBoxActor* TreasureBox, const enum NewState, SolarCharacter* RequestCharacter);// 0x46321a8
	void ServerSetInputVector(uint16 AxisX, uint16 AxisY);// 0x4633f7c
	void ServerSetIdleTurnType(byte TurnType);// 0x4633ed0
	void ServerSetDesirePeek(int NewValue);// 0x462d658
	void ServerSetCurChargingDeathBox(DeathTreasureBox* DeathBox);// 0x46303c0
	void ServerSetCharacterOperation(enum InType, Object* Target);// 0x4633900
	void ServerSetCanBeDamaged(bool bInCanBeDamaged);// 0x462e318
	void ServerSendAntiLogFromClientToDS(FString AntiData);// 0x462998c
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable);// 0x4632b50
	void ServerRPCDisplayAllElectricShops();// 0x462f280
	void ServerRecieveHitDataFromClient(SolarWeapon* Weapon, const BulletHitData HitData, const bool IsNotDelay);// 0x462bac4
	void ServerPickUpWeapon(Actor* Actor, bool bIsAutoPickup, Vector ClientCharPos, Vector ClientItemPos);// 0x4631e58
	void ServerPickUpTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x4631c58
	void ServerPickUpItem(SolarItemActor* ItemActor, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x4631fd4
	void ServerPickUpHomeItemByDrag(SolarItemActor* ItemActor, int Grade, int GridIndex);// 0x4631b28
	void ServerPickUpBoxHomeItemByDrag(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, int Grade, int GridIndex);// 0x46319b8
	void ServerOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x4632490
	void ServerOnDestructActor(SolarDestructibleActor* DestructibleActor, SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x4633d24
	void ServerKillMe(enum DamageType);// 0x46334f0
	void ServerInitSheildComp(const int InShiledID);// 0x4631230
	void ServerHideShieldOperator();// 0x46312f8
	void ServerGMVehicleSubHealth(int SubHealth);// 0x462a924
	void ServerGetOnVehicle(float LocalTime, SolarVehiclePawn* InVehicle, int SeatIndex);// 0x462b5c8
	void ServerGetOffVehicleEjected(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection, float EjectForce);// 0x462b27c
	void ServerGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x462b3b4
	void ServerDetectBlock();// 0x4629970
	void ServerCompleteRescue();// 0x46331dc
	void ServerChangeRechargeState(const bool bRecharge);// 0x4631314
	void ServerCancleVault(float InAnimPosition, Vector InLandLocation);// 0x4629c00
	void ServerCancelVehicleAbility(byte AbilityIndex);// 0x462abe0
	void ServerCancelRescue();// 0x46331c0
	void ServerCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x46323e4
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected();// 0x462d440
	void ServerApplyVehicleAbility(byte AbilityIndex);// 0x462ac8c
	void SendMultipleMsgsToWeapon(const PlayerWeaponMsg[] MsgArray);// 0x462bf2c
	void SendMsgToWeapon(const PlayerWeaponMsg Msg);// 0x462c020
	void SendMsgToVehicleWeapon(const PlayerWeaponMsg Msg);// 0x462a750
	void ReturnMostValuableItemIDServer(const byte TeammatePosInTeam, const int64 ItemThisID);// 0x462d854
	void ResponseChosenMark();// 0x462dc6c
	void RequestToStopVehicleRepairing();// 0x462a62c
	void RequestToStartVehicleRepairing(SolarVehiclePawn* InVehicle);// 0x462a640
	void RequestPlayShieldSound(out ShieldSoundData ShieldSound, bool bIsOnly1P);// 0x4630860
	void RequestDisplayAllElectricShops();// 0x462f3f4
	void RequestCompleteRescue();// 0x4632efc
	void RequestCancelRescue();// 0x4632f10
	void RemoveTreasureBoxOperator();// 0x463046c
	void RemoveTempComponent(PrimitiveComponent* TargetComp);// 0x4629ea0
	void RemoveTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag);// 0x46340e0
	void RemoveShieldRepairEffectItem();// 0x4631614
	void RemoveShieldOperator();// 0x4631650
	void RefreshTeammateHUDUI(SolarPlayerState* SelfData);// 0x462f8c4
	void ReceiveVehicleAbilityInputForTutorial(byte AbilityIndex);// 0x462ae24
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x4c8f29c
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x4c8f29c
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x4c8f29c
	void ReceiveLocalPlayerCameraFOVChange(float NewCameraFOV, float LastCameraFOV);// 0x4c8f29c
	void ReceivedOnShieldIdChanged(int LastShieldId);// 0x46305c0
	void ReceiveAfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x4c8f29c
	void QuitVehicleWholeShield();// 0x462a3d0
	void QuitVehicleStealth();// 0x462a54c
	void PostNotEnoughEnergyNotice();// 0x462b0bc
	void PlaySquatSound();// 0x4634880
	void PlaySpeedUpEffect(bool bIsUp);// 0x4633b90
	void PlayShieldSoundByType(enum ShieldSoundType);// 0x4630984
	void PlayParachuteStartSound();// 0x462c714
	void PlayerStateReplicatedForHUD();// 0x462ffa0
	void PlayDissolvedDeathEffect();// 0x46332b8
	void PlayActionSpringboardSound();// 0x46348bc
	void OnUpdateShieldId();// 0x4630b70
	void OnTeamIDChange();// 0x462feb4
	void OnSkydiveTraced__DelegateSignature(out const HitResult HitResult);// 0x4c8f29c
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);// 0x4c8f29c
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x462e154
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);// 0x4c8f29c
	void OnShieldRechargeStart();// 0x46317fc
	void OnShieldRechargeProgressBarComplete();// 0x4631514
	void OnShieldRechargeProgressBarCancel();// 0x4631500
	void OnShieldRechargeEnd();// 0x46317e8
	void OnShieldIDChangedDelegate__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bIsAdvancedShield);// 0x4c8f29c
	void OnSheildUpFXDelegate__DelegateSignature();// 0x4c8f29c
	void OnSheildRechargeDelegate__DelegateSignature();// 0x4c8f29c
	void OnSheildBreakDelegate__DelegateSignature();// 0x4c8f29c
	void OnRepCurrentSkydiveStage();// 0x462c4c4
	void OnRep_WeaponSystemVehicle();// 0x462a810
	void OnRep_WeaponSystemComponentChanged();// 0x462bd80
	void OnRep_RoleAbilitySpecHandles();// 0x46298a4
	void OnRep_RescueState();// 0x46330cc
	void OnRep_PlayBodyHitSound();// 0x4634894
	void OnRep_OutVehicleShotState();// 0x462a824
	void OnRep_IsDeathVerge();// 0x463363c
	void OnRep_ForceParachuteCountDown();// 0x462c68c
	void OnRep_EnableCruising();// 0x462c6c8
	void OnRep_CurUniqueShieldId();// 0x4630b84
	void OnRep_CurrShieldValue(float PreviousValue);// 0x4630acc
	void OnRep_CurrShieldState(enum LastState);// 0x4630a28
	void OnRep_CurrShieldId(int InLastShieldId);// 0x4630b98
	void OnRep_CurChargingDeathBoxChanged(DeathTreasureBox* PreBox);// 0x463031c
	void OnRep_CruiseState();// 0x462c6a0
	void OnRep_CharacterCapsuleSizeOverride();// 0x4634d54
	void OnRep_CapsuleID();// 0x462c6b4
	void OnRep_ActiveEMP();// 0x462a39c
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x4c8f29c
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x4c8f29c
	void OnPlayerDataRepAsPlayer(byte TeamID);// 0x462fab8
	void OnPlayerBackpackEnergyUpdate();// 0x46348a8
	void OnPickupSettingChanged();// 0x4632194
	void OnOwnTeammateHUDCreated(SolarPlayerState* SelfData);// 0x462f968
	void OnOutVehicleStateChanged();// 0x462b7f0
	void OnNotInBattle();// 0x46340b8
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* LocalPlayerSpectateInfo);// 0x462ffb4
	void OnLevelSequence_PlayAirborneJumpSound();// 0x462c728
	void OnLandedCallback(out const HitResult Hit);// 0x462ce48
	void OnJogSetClient__DelegateSignature(bool bSet);// 0x4c8f29c
	void OnInBattle();// 0x46340cc
	void OnHUDTeamPosSet__DelegateSignature(byte PosInTeam);// 0x4c8f29c
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);// 0x4c8f29c
	void OnHUDNickNameSet__DelegateSignature(FString NickName);// 0x4c8f29c
	void OnHUDDistanceSet__DelegateSignature(float Distance);// 0x4c8f29c
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);// 0x4c8f29c
	void OnHitAtDirection__DelegateSignature(out const Vector Direction, float Duration);// 0x4c8f29c
	void OnHealthUpdated__DelegateSignature();// 0x4c8f29c
	bool OnExitOpenTreasureBox();// 0x46304cc
	bool OnEnterOpenTreasureBox();// 0x4630504
	void OnDetectRadarStation(bool bEnter, SolarRadarStation* InRadarStation);// 0x462f5bc
	void OnDetectElectricShop(bool bEnter, SolarElectricShop* InElectricShop);// 0x462f408
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum WidgetState, float InCurValue, float InChangeValue, FString InSolarPlayerID);// 0x4c8f29c
	void OnClientMovementComponentEnabled();// 0x4634f7c
	void OnCharacterSpawnDeathBox(bool bCheat);// 0x4632c40
	void OnCharacterSkinReset__DelegateSignature();// 0x4c8f29c
	void OnCharacterDaraSet__DelegateSignature(int DataID);// 0x4c8f29c
	void OnApplyDyingDamage(float DeltaTime);// 0x4632f4c
	void NotifyLeaveSafeArea();// 0x463268c
	void NotifyEnterSafeArea();// 0x4632678
	void NetTriggerRadarStation();// 0x462f5a8
	bool NetGetOnVehicle(SolarVehiclePawn* InVehicle, int SeatIndex);// 0x462b6fc
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x462b4b8
	void MultiSetGetOffVehicleLocationAndRotation(const Vector DropLocation, float TeleportRotYaw);// 0x462a838
	void MultiOnRebirth();// 0x46338ac
	void MarkWarningOnWorld();// 0x462dd30
	void MarkQuickChatOnWorld(FString IconImg);// 0x462dc80
	void MarkPointOnWorld();// 0x462dd44
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x462daf0
	void KillMe();// 0x463359c
	bool K2_IsSwimming();// 0x462cf18
	bool K2_IsInAir();// 0x462cf50
	WidgetComponent* K2_GetTeamHUDComp();// 0x462f890
	HUD* K2_GetControlledHUD();// 0x463511c
	bool IsWeaponsAvailable();// 0x462c118
	bool IsWeaponCauseTeamDamage();// 0x462c0e0
	bool IsViewportFocused();// 0x462a214
	bool IsTeammateWith(const SolarCharacter* Other);// 0x462fd90
	bool IsTeamHUDValid();// 0x462fd24
	bool IsSprinting();// 0x462d180
	bool IsSpectatingOtherPlayer();// 0x46302bc
	bool IsSkyCharging();// 0x4632780
	bool IsShieldValueLow();// 0x4630574
	bool IsShieldFullyCharged();// 0x46306c4
	bool IsScopeOpening();// 0x462c308
	bool IsRescuing();// 0x4633118
	bool IsReplayPlaying();// 0x4630214
	bool IsReloading();// 0x462c340
	bool IsRechargerEnough();// 0x463068c
	bool IsPlayerLocallyControlled();// 0x46352a0
	bool IsPileCharging();// 0x4632748
	bool IsOwnerOffline();// 0x463053c
	bool IsOpeningTreasureBox();// 0x4630494
	bool IsNoCharging();// 0x46326a0
	bool IsMovingOnGround(enum VelocityStatus);// 0x462d200
	bool IsMeleeAttacking();// 0x462c420
	bool IsLocalPlayerSpectatingMe();// 0x463024c
	bool IsLaunching();// 0x462d0d8
	bool IsJumping();// 0x462d110
	bool IsInVehicleStealth();// 0x462a488
	bool IsInVehicle();// 0x462b868
	bool IsInsideVehicle();// 0x462b804
	bool IsInShoulderOrScopeView();// 0x462c2d0
	bool IsInScopeView();// 0x462c298
	bool IsInRescueState();// 0x4633188
	bool IsInDeathVerge();// 0x4633604
	bool IsHumanCharacter();// 0x4635000
	bool IsHoldingWeapon();// 0x462c150
	bool IsFiring();// 0x462c3e8
	bool IsExistWeaponSeatedVehicleSeat();// 0x462a6e4
	bool IsEnergyCostAndChargeDisabled();// 0x4632a6c
	bool IsE2M();// 0x46326d8
	bool IsDying();// 0x4633150
	bool IsDoingAnyAttack();// 0x462c3b0
	bool IsCruising();// 0x462c6dc
	bool IsClimbing();// 0x462d148
	bool IsCharacterDebugBlockDetectionEnabled();// 0x4629af0
	bool IsCanShowTeammateHUD();// 0x462fe68
	bool IsBoxCharging();// 0x4632710
	bool IsBolting();// 0x462c378
	bool IsBeingSpectated();// 0x4630284
	bool IsBeingRescue();// 0x46330e0
	bool IsAllEnergyFull();// 0x4632964
	bool IsAiming();// 0x462c458
	bool IsAbleToContinueRecharge();// 0x46306fc
	void InitShieldPropertyByConfig();// 0x46314ec
	void InitShieldOperatorTimeline();// 0x4631730
	void InitializeCharacterData(const int InCharacterID, const int InSkinID);// 0x46346f4
	void InitGameStatisticEquipment();// 0x462ed30
	void InitDefaultDayNight();// 0x46340a4
	void InitCharacterDefaultShield(out const SolarItemData InShiledID);// 0x4630734
	void IncreaseRechargedTimes();// 0x4631170
	void HideShieldRepairEffectItem();// 0x4631628
	void HideShieldOperator();// 0x4631664
	void HideRescueInjector();// 0x4632f24
	bool HasBlockBetweenUs(const Actor* A, const Actor* B, bool BIsVehicle);// 0x462af80
	bool HandleDying(byte ChangeType, Controller* InstigatorController);// 0x46337b8
	int GetVerticalJetFlyTotalTimes();// 0x462c7d8
	int GetVerticalJetFlyRestTimes();// 0x462c770
	void GetVerticalJetFlyCharging(out float OutValue, out float OutPercent);// 0x462cb18
	void GetVerticalJetFlyCD(out float OutValue, out float OutPercent);// 0x462c910
	SolarVehicleWeapon* GetVehicleWeapon();// 0x462a71c
	byte GetVehicleAbilityCounter();// 0x462ad38
	void GetTeamHUDTranslucentData(out float CheckDistance, out float TranslucentValue);// 0x462fc1c
	UserWidget* GetTeamHUD();// 0x462fd5c
	SolarSpectateInfo* GetSpectateInfo();// 0x46301e0
	AnimInstance* GetSpecAnimInstance(enum SpecAnimType);// 0x4634c00
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x46351b8
	SolarPlayerState* GetSolarPlayerState();// 0x46350e8
	FString GetSolarPlayerID();// 0x4635038
	SolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);// 0x46351ec
	SolarCharacterMovementComponent* GetSolarCharacterMovementComponent();// 0x462d354
	SolarBotAIController* GetSolarAIController();// 0x4635150
	float GetSkydiveLandingHeight();// 0x462c658
	CharacterSkinConfig* GetSkinConfig(const int InSkinID);// 0x4634648
	int GetShieldWorthByID(const int InShieldID);// 0x463142c
	float GetShieldRechargeRemainningTime();// 0x46315e0
	float GetRecoveryDuartionModify();// 0x4c8f29c
	float GetRecoveryAmountModify();// 0x4c8f29c
	Rotator GetNormalizeCameraRotation();// 0x46347d8
	byte GetMyTeamID();// 0x46344ec
	float GetMaxShieldValue();// 0x4631810
	float GetMaxExtraEnergy();// 0x463299c
	float GetMaxEnergy();// 0x4632a04
	SolarPlayerState* GetLastDownBy();// 0x46335b0
	int GetJetPackModuleLevel(const bool bVertical);// 0x462cc1c
	bool GetIsActiveEMP();// 0x462a3b0
	Vector GetInputVector();// 0x463406c
	int GetHorizontalJetFlyTotalTimes();// 0x462c7a4
	int GetHorizontalJetFlyRestTimes();// 0x462c73c
	void GetHorizontalJetFlyCharging(out float OutValue, out float OutPercent);// 0x462ca14
	void GetHorizontalJetFlyCD(out float OutValue, out float OutPercent);// 0x462c80c
	float GetFactorialAttributeModifies(int AttributeID);// 0x4634394
	float GetEnergyConsumptionModify();// 0x4c8f29c
	byte GetDriveState();// 0x462b8c4
	float GetDesirePeekValue();// 0x462d774
	Actor* GetDamagerCauserActor();// 0x462e3cc
	float GetCurrShieldValue();// 0x4631844
	float GetCurrExtraEnergy();// 0x46329d0
	SolarPlayerWeapon* GetCurrentWeapon();// 0x462c490
	enum GetCurrentWalkMode();// 0x462d1cc
	float GetCurrentVehicleAbilityCooldownRemaining(byte AbilityIndex);// 0x462aa88
	float GetCurrentVehicleAbilityCooldownDuration(byte AbilityIndex);// 0x462ab34
	byte GetCurrentRenderMode();// 0x462be38
	enum GetCurrentCustomJumpType();// 0x462ce28
	float GetCurrEnergy();// 0x4632a38
	float GetCumulativeAttributeModifies(int AttributeID);// 0x4634440
	PlayerController* GetControllingOrReplayController();// 0x4635184
	StaticMesh* GetClipMeshOfHoldingWeapon();// 0x462bef8
	SolarCharacter* GetClientViewedCharacter();// 0x4634f98
	SolarCharacter* GetClientControlledCharacter();// 0x4634fcc
	void GetChargingStateForUI(out bool IsSky, out bool IsPile, out bool IsBox, out bool IsE2M);// 0x46327b8
	Rotator GetCameraRotation();// 0x4634810
	Vector GetCameraLocation();// 0x4634848
	void GetAllSkydiveLandingEffects(out ParticleSystemComponent*[] OutEffects);// 0x462c4d8
	void GetAllSkydiveFlyingEffects(out ParticleSystemComponent*[] OutEffects);// 0x462c598
	void GatheringDeathBoxItem();// 0x4632c18
	void GameStatisticsWeaponHit(SolarCharacterBase* DamageCauserCharacter, out const SolarWeaponDamageEvent DamageInfo, const float ActualDamage);// 0x462f05c
	void GameStatisticsVehicleHit(Actor* DamageCauser, float HitDamage);// 0x462ed58
	void GameStatisticsItemChange(const int ItemID, const enum PickType, const int OldNum, const int NewNum);// 0x462ee40
	void GameStatisticsGetOnVehicleReason(int Type, FString Type_Parameter);// 0x462e8a4
	void GameStatisticsGetOffVehicleReason(const SolarWeapon* CurrentWeapon, FString Param);// 0x462e7b0
	void GameStatisticsEquipment();// 0x462ed44
	void GameStatisticsElectricShopActivated(out const Vector InLocation);// 0x462e9ec
	void GameStatisticsDeathReason(const bool InIsDown, SolarPlayerState* InKiller, out const SolarPointDamageEvent InDamageEvent);// 0x462ebb8
	void GameStatisticsDamageReason(out const SolarPointDamageEvent InDamageEvent, const float ActualDamage);// 0x462ea9c
	void GameStatisticsBackpackFly(out const BackpackStatisticsInfo InBackpackStatisticsInfo);// 0x462efac
	void ForceBreakSprintState();// 0x462d1b8
	void FindMostValuableItemClient(const SolarItemData[] ItemData, const byte FromWhichTeammate);// 0x462d944
	void ExitDyingMovement();// 0x4632d00
	void ExitDeathVerge(bool bClientSimulation);// 0x4633650
	void ExecuteGM(FString GMType, FString Param1, FString Param2);// 0x462a24c
	void EnterVehicleWholeShield(MaterialInterface* ShieldMaterialSource);// 0x462a3e4
	void EnterVehicleStealth();// 0x462a560
	void EnterDyingMovement();// 0x4632d14
	void EnterDeathVerge(bool bClientSimulation);// 0x4633704
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);// 0x4629a44
	void DoOperation(enum OperationType, Object* Target);// 0x4633c3c
	void DisCardShield();// 0x4630664
	float DealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x462dfb0
	void CreateTreatEffect();// 0x4631958
	void CreateTreasureBoxOperator();// 0x4630480
	void CreateShieldRepairEffectItem();// 0x463163c
	void CreateShieldOperator();// 0x4631678
	WidgetComponent* CreateOwnTeammateHUDInternal(SolarPlayerState* SelfData);// 0x462fa0c
	WidgetComponent* CreateOwnTeammateHUD();// 0x462ff6c
	void CoolDownGETagCallback(const GameplayTag Tag, int NewCount, int AbilityIndex);// 0x4629774
	void ClientUpdateTracking(int Mode, int Index, const Vector Location);// 0x462b8f8
	void ClientStartRecharge(const float InCurrentValue, const float InRecoveryDuration, const float InRecoveryAmount);// 0x4630e64
	void ClientSomeOneIsOpening();// 0x46323c8
	void ClientSetServerBlockDetectionResult(FString Info);// 0x46298b8
	void ClientRPCDisplayAllElectricShops(const Vector[] AllPositions);// 0x462f1c8
	void ClientRestoreActiveAbilitiesOnReconnected(const RestoreAbilityInfo[] SpecHandles);// 0x462d388
	void ClientResetCharacter(const Vector Location, const Rotator Rotation, const bool bClearWeapon);// 0x4634e4c
	void ClientReceiveScanResult(const ScannedInfo_NetQuantize[] ScannedDatas, const float SpanTimer);// 0x462f794
	void ClientReceivePlayerHitAtDirection(const Vector Direction);// 0x462e4b0
	void ClientRadarOnceScanned(int ScannedNum);// 0x462f6cc
	void ClientPlayHitEffect(const HitResult HitResult, class SolarBullet BulletClass, const enum HitType, const PlayerController* Attacker, const Vector RelativeVector, const float VFXScale, const int AttackerSkin);// 0x462e558
	void ClientOnReconnecting(const ReconnectionParams Params);// 0x4634cac
	void ClientOnContinuousTreatmentStarted();// 0x4631974
	void ClientNotifyMarkedByOnceScan();// 0x462f6b0
	void ClientNotifyGameProgressCondition(out const GameplayTag InProgressTag);// 0x462d45c
	void ClientNotifyCharacterExposed();// 0x462f778
	void ClientNoticePickup(const int ItemID, const int ItemQuality);// 0x46322dc
	void ClientHideShieldOperator();// 0x46312dc
	void ClientCompleteRecharge(const float InCurrentValue, const float InChangeValue);// 0x4630d78
	void ClientCancelRecharge(const bool BreakAnimOnly, const float InCurrentValue, const float InChangeValue);// 0x4630c3c
	void ClientAddHitTrace(const HitTraceInfo Info);// 0x462dd58
	void CliendKilledCharacter();// 0x462e2fc
	void ClearGameStatisticEquipment();// 0x462ed1c
	void ClearDeathBoxData();// 0x4632c2c
	float CheckSelfAltitudeInstantlyByTrace(out HitResult HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);// 0x4629f44
	void ChangeSeatByIndex(int TargetSeatIndex);// 0x462aec8
	void ChangeSeatByDefault();// 0x462af6c
	void CGM_SpawnDeathBox();// 0x4632cec
	void CGM_EnterDeath();// 0x46335e8
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);// 0x462a9d0
	bool CanRebirth();// 0x46338c8
	bool CanPeek();// 0x462d73c
	void CancelVehicleAbility();// 0x462ad6c
	void BroadCastCharacterReset(const Vector Location, const Rotator Rotation);// 0x4634d68
	void BreakRechargeShield();// 0x4631878
	void BindUpdateHUDToOnHealthUpdateDelegateProc();// 0x46332a4
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* LocalSpecInfo);// 0x4630098
	void BindActorToSelfTeam(Actor* Actor);// 0x462d5b4
	void BeginplayPending__DelegateSignature();// 0x4c8f29c
	void BeginPlayBlueprint();// 0x4c8f29c
	void AutoMarkItemForTeammateClient(const int64 ItemThisID);// 0x462d7a8
	void ApplyVehicleAbility(byte AbilityIndex);// 0x462ad80
	void AfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x4c8f29c
	void AfterDealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x4c8f29c
	void AddTrackingTarget(SolarCharacterBase* Tracked);// 0x462ba20
	void AddTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag, float Value);// 0x4634218
	void AddDebugString(FString DebugString);// 0x4629b50

--------------------------------
Class: SolarCharacterBase.Character.Pawn.Actor.Object
	SolarAbilityComponent* SolarAbilityComponent;//[Offset: 0x4f8, Size: 0x8]
	bool PendingEnterWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	SolarCharacterBase* InstigatorCharacter;//[Offset: 0x508, Size: 0x8]
	ParticleSystem* DedicatedDeathEffect;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* DeathEffect;//[Offset: 0x518, Size: 0x8]
	ParticleSystem* DeathEffectSoft;//[Offset: 0x520, Size: 0x28]
	float VehicleCollisionProtectionTimeOnJumpingOff;//[Offset: 0x57c, Size: 0x4]
	SolarAbilitySystemComponent* SolarAbilitySystemComponent;//[Offset: 0x580, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x588, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x5b0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5b8, Size: 0x8]
	CharacterSoundConfig* CharacterSoundConfig;//[Offset: 0x5c0, Size: 0x8]
	float DefaultRefreshBonesCountDown;//[Offset: 0x5c8, Size: 0x4]
	void SetAttributeWithGAS(const GameplayAttribute InAttribute, byte ModifyType, float InValue);// 0x4644308
	void ResetAudioComponentTransform();// 0x4643cc0
	void MulticastAddHitTrace(const HitTraceInfo Info);// 0x4643d84
	void LazyRefreshBones(float DelayTime);// 0x4643a34
	bool K2_IsInWater();// 0x4643d4c
	bool K2_IsAlive();// 0x4644128
	bool IsInWater();// 0x4643ef0
	bool IsInSight(out const Vector InTargetPos, const float InMaxAngle, const bool bHorizontalOnly);// 0x4643fd8
	bool IsInRoom();// 0x4643e38
	bool IsBlocked(const Actor* InOtherActor);// 0x4643f28
	bool InSameTeamWithFirstPlayerController();// 0x4644160
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4643ad8
	FString GetSoundEventString(enum SoundOpt);// 0x4643bc8
	SolarAkGameObject* GetSolarAkGameObject();// 0x4643cd4
	float GetMaxHealth();// 0x46442cc
	float GetCurrentHealth();// 0x4644290
	enum GetCharacterType();// 0x4643e78
	Vector GetCharacterDirection();// 0x4643d0c
	SolarBackpackComponent* GetBackpack();// 0x4643eb4
	void ClientOnPushedByVehicle();// 0x4643cf0
	bool CheckOpenParticleOptimization(int Bias);// 0x4643984
	void ChangeCurrentHealthWithGAS(byte ModifyType, float InValue);// 0x46441a0

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: HitTraceInfo
	Vector_NetQuantizeNormal TraceDirection;//[Offset: 0x0, Size: 0xc]
	float Damage;//[Offset: 0xc, Size: 0x4]
	enum WeaponType;//[Offset: 0x10, Size: 0x1]
	bool bIsVehicleHitTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ReconnectionParams
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SolarAbilityComponent.ActorComponent.Object
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectMap;//[Offset: 0xc0, Size: 0x50]
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectsThisTick;//[Offset: 0x110, Size: 0x50]
	ReplicateEffectData[] ReplicateEffectDatas;//[Offset: 0x160, Size: 0x10]
	<class SolarAbilityEffectAccessory,SolarAbilityEffectAccessory*> EffectAccessoryMap;//[Offset: 0x170, Size: 0x50]
	bool CharacterWeaponDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool CharacterMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	float MoveSpeedCoeffient;//[Offset: 0x1cc, Size: 0x4]
	MaterialInterface* OriginalMaterial;//[Offset: 0x1d0, Size: 0x8]
	float ShieldRechargeCostCoefficient;//[Offset: 0x1d8, Size: 0x4]
	void OnRep_SpeedCoeffient();// 0x45dd440
	void OnRep_ReplicateEffectData();// 0x45dd454
	int GetCharacterLevel();// 0x45dd468

--------------------------------
Class: SolarAbilityEffect.Object
	SoftObjectPath EffectIconPath;//[Offset: 0x28, Size: 0x18]
	SolarAttributeModifier[] AttributeModifiers;//[Offset: 0x40, Size: 0x10]
	class SolarAbilityEffectAccessory[] AbilityEffectAccessoryClass;//[Offset: 0x50, Size: 0x10]
	bool bAllowMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	SolarCharacterBase* AbilityEffectAffectingCharacter;//[Offset: 0x120, Size: 0x8]
	SolarAbilityComponent* AbilityEffectAffectingAbilityComponent;//[Offset: 0x128, Size: 0x8]
	SolarAbility* AffectingAbility;//[Offset: 0x130, Size: 0x8]
	FString ExtraInfo;//[Offset: 0x138, Size: 0x10]
	<FString,float> AttributeParamMap;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: SolarAttributeModifier
	byte SolarAttributeType;//[Offset: 0x0, Size: 0x1]
	enum AttributeDurationType;//[Offset: 0x1, Size: 0x1]
	enum AttributeDurationSourceType;//[Offset: 0x2, Size: 0x1]
	float AttributeModifyDuration;//[Offset: 0x4, Size: 0x4]
	FString AttributeModifyDurationSourceKey;//[Offset: 0x8, Size: 0x10]
	float AttributeModifyMinDistance;//[Offset: 0x18, Size: 0x4]
	float AttributeModifyMaxDistance;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* AttributeDistanceScaleCurve;//[Offset: 0x20, Size: 0x8]
	bool AttributeUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float AttributeTargetValue;//[Offset: 0x2c, Size: 0x4]
	enum AttributeChangeValueSourceType;//[Offset: 0x30, Size: 0x1]
	float AttributeChangeValue;//[Offset: 0x34, Size: 0x4]
	float AttributeChangeValueForVehicle;//[Offset: 0x38, Size: 0x4]
	FString AttributeChangeValueSourceKey;//[Offset: 0x40, Size: 0x10]
	bool AttributeChangeValueIsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum AttributeChangeSpeedSourceType;//[Offset: 0x58, Size: 0x1]
	FString AttributeChangeSpeedSourceKey;//[Offset: 0x60, Size: 0x10]
	float AttributeChangeSpeed;//[Offset: 0x70, Size: 0x4]
	bool AttributeApplyChargingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int[] AttributeExtraIntParam;//[Offset: 0x78, Size: 0x10]
	float[] AttributeExtraFloatParam;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: SolarAbilityEffectAccessory.Actor.Object
	SolarCharacterBase* EffectAffectingCharacter;//[Offset: 0x230, Size: 0x8]
	byte EffectAccessoryInstanceType;//[Offset: 0x238, Size: 0x1]
	bool SpawnAtHitLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]

--------------------------------
Class: SolarAbility.Actor.Object
	class SolarAbility* MyAbilityClass;//[Offset: 0x230, Size: 0x8]
	class SolarAbilityEffect[] AbilityEffectClasses;//[Offset: 0x238, Size: 0x10]
	SolarCharacter* AbilitySourceCharacter;//[Offset: 0x248, Size: 0x8]
	Transform SpawnTransform;//[Offset: 0x250, Size: 0x30]
	bool InstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool DoNotAutoApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	bool ApplyToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	bool RadialAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	float RadialAbilityRadius;//[Offset: 0x284, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool CheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	bool EnableAbilityDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	FString ExtraInfo;//[Offset: 0x290, Size: 0x10]
	Actor* InitiatorActor;//[Offset: 0x2a0, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 0x8]
	<FString,float> EffectParams;//[Offset: 0x2b8, Size: 0x50]
	static void WeaponApplyAbility(const Object* WorldContextObject, class SolarAbility SolarAbilityClass, Actor* SourceActor, Actor* TargetActor, out const Vector HitLocation, out const FName HitBoneName, float Scale, out const Rotator ProjRotator, FString InExtarInfo, PrimitiveComponent* HitComponent);// 0x45da88c
	void StopSound();// 0x4c8f29c
	static void StaticRemoveSolarAbilityFrom(class SolarAbility AbilityClass, Actor* AffectingActor);// 0x45da03c
	static void StaticApplySolarAbilityToWithHitResult(class SolarAbility AbilityClass, Actor* AffectingActor, out const HitResult HitResult, const float Scale, FString InExtarInfo, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation);// 0x45da580
	static void StaticApplySolarAbilityTo(class SolarAbility AbilityClass, Actor* AffectingActor, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation, out const Vector HitLocation, out const FName HitBoneName, float Scale, FString InExtraInfo, PrimitiveComponent* HitComponent);// 0x45da110
	void RestoreSound();// 0x4c8f29c
	void RemoveSolarAbilityFrom(Actor* ApplyToActor);// 0x45d9eb4
	void PlaySound();// 0x4c8f29c
	void PauseSound();// 0x4c8f29c
	bool IsLocalControl();// 0x45d9e7c
	bool InSameTeam();// 0x45d9e44
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x45da490
	bool CheckActor(Actor* SourceActor, Actor* TargetActor);// 0x45d9d4c
	void ApplySolarAbilityTo(Actor* ApplyToActor, Actor* SourceActor);// 0x45d9f58

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x2b8, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b9, Size: 0x1]
	float OuterRadius;//[Offset: 0x2bc, Size: 0x4]
	float InnerRadius;//[Offset: 0x2c0, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2c8, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2d0, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x2e0, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2e4, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2e8, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x2ec, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x2f0, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x2f4, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x2f8, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2fc, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2fc, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x300, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x304, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x39bedf4
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x39bebe8
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x39bf00c
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x39bef60
	void SetOutputBusVolume(float BusVolume);// 0x39be9f0
	void SetListeners(out const AkComponent*[] Listeners);// 0x39beea0
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x39bfafc
	void SetEarlyReflectionsVolume(float SendVolume);// 0x39bea94
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x39beb38
	void SetAttenuationScalingFactor(float Value);// 0x39be94c
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x39bf1ec
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x39bf7e4
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x39bf994
	int PostAkEventByName(FString in_EventName);// 0x39bf334
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x39bf3ec
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x39bf5e4
	float GetAttenuationRadius();// 0x39be918

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x298, Size: 0x8]
	FString EventName;//[Offset: 0x2a0, Size: 0x10]
	void Stop();// 0x39c5028
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x39c4e48
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x39c556c
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x39c5814
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x39c503c
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x39c5320
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x39c4bc8

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x39bd238
	float GetMaximumDuration();// 0x39bd204
	float GetMaxAttenuationRadius();// 0x39bd2a4
	bool GetIsInfinite();// 0x39bd26c

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: SolarAkGameObject.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	static void Wakeup();// 0x45f0a48
	static void UnloadBank(FString InBankName);// 0x45f10bc
	static void UnLoadAllBanks();// 0x45f1094
	static void Suspend(bool in_bRenderAnyway);// 0x45f0a5c
	int StopSoundByEvent(FString in_EventName);// 0x45f0e58
	static int StaticStopSoundByEvent(FString in_EventName);// 0x45f0638
	static int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString in_EventName, LatentActionInfo LatentInfo);// 0x45f04f0
	static int StaticPostAkEventByName(FString in_EventName);// 0x45f088c
	static int StaticPlaySoundByEvent(FString in_EventName);// 0x45f06e8
	static int StaticComponentPostAkEventByName(AkComponent* AkComponent, FString in_EventName);// 0x45f0798
	void SolarLoadAllBanks();// 0x45f1080
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x45f0d58
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x45f0c20
	static void SetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x45f0af8
	void ReceiveTick(float DeltaTime);// 0x4c8f29c
	void ReceiveEndPlay(const byte EndPlayReason);// 0x4c8f29c
	void ReceiveBeginPlay();// 0x4c8f29c
	int PostAkEventByNameAndWaitForEnd(FString in_EventName, LatentActionInfo LatentInfo);// 0x45f093c
	int PostAkEventByName(FString in_EventName);// 0x45f0fc8
	int PlaySoundByEvent(FString in_EventName);// 0x45f0f10
	static void LoadBank(FString InBankName);// 0x45f115c
	static void LoadAllBanks();// 0x45f10a8

--------------------------------
Class: ReplicateEffectData
	SoftObjectPath IconPath;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: SolarAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1308, Size: 0x20]
	GameplayTag[] RepNotifiedTags;//[Offset: 0x1328, Size: 0x10]
	GameplayTag[] NotifiedPreviousTags;//[Offset: 0x1338, Size: 0x10]
	SolarGameplayAbilitySet* DefaultAbilitySet;//[Offset: 0x1350, Size: 0x8]
	SkeletalMeshComponent* OptionMeshForRepMontage;//[Offset: 0x1358, Size: 0x8]
	bool bPendingMontageRepForMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 0x1]
	GameplayAbilityLocalAnimMontageForMesh[] LocalAnimMontageInfoForMeshes;//[Offset: 0x1368, Size: 0x10]
	GameplayAbilityRepAnimMontageForMesh[] RepAnimMontageInfoForMeshes;//[Offset: 0x1378, Size: 0x10]
	void ServerCurrentMontageSetPlayRateForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float InPlayRate);// 0x45deea0
	void ServerCurrentMontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x45df158
	void ServerCurrentMontageJumpToSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, FName SectionName);// 0x45deffc
	void RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x45df74c
	void PostDefaultAbilitiesGranted();// 0x4c8f29c
	void OnRep_RepNotifiedTags();// 0x45e00a0
	void OnRep_ReplicatedAnimMontageForMesh();// 0x45df33c
	void OnInternalMetaAttributeUpdate(SolarMetaAttributeSet* MetaAttributeSet, out GameplayModifierEvaluatedData EvaluatedData, out const GameplayEffectSpec EffectSpec, out MetaAttributeUpdateEvent UpdateEvent);// 0x45df358
	void NotifySourceMetaAttributeExecution(out const MetaAttributeUpdateEvent UpdateEvent);// 0x45df5f4
	GameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(class GameplayAbility AbilityClass, int Level);// 0x45dfd68
	GameplayAbilitySpecHandle K2_GiveAbility(class GameplayAbility AbilityClass, int Level);// 0x45dfe58
	AttributeSet* K2_FindOwnedAttributeSetByClass(class AttributeSet Class);// 0x45dfff4
	void K2_ClearAbility(out const GameplayAbilitySpecHandle Handle);// 0x45dfcb0
	GameplayAbilitySpecHandle GiveDefaultAbility(class GameplayAbility AbilityClass);// 0x45dff48
	void ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x45dfae4
	void ClientReceiveTagChangeNotify(out const FName TagName, bool bAdded);// 0x4c8f29c
	void AddGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x45df918

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x138, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x148, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x158, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x300, Size: 0x4]
	float IncomingDuration;//[Offset: 0x304, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x328, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x338, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3b0, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3e8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3f0, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x408, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x558, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x738, Size: 0x38]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x778, Size: 0x30]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x848, Size: 0x480]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc8, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xdf0, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1040, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1178, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e8, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x324a014
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x324a110
	void TargetConfirm();// 0x32497b8
	void TargetCancel();// 0x324979c
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x32497d4
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x324c940
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x324ca50
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x3248554
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x324899c
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x3248d2c
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x3248ee8
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x324932c
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x3249580
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x3248b5c
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x3248c44
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x3249e9c
	void ServerPrintDebug_Request();// 0x3249fb8
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x32482e0
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x32476c0
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x3247910
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x32477ec
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x3248078
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x32498c0
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x324d0d4
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x324d204
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x324c034
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x324bf40
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x324bd58
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x324be4c
	void OnRep_ServerDebugString();// 0x3249d34
	void OnRep_ReplicatedAnimMontage();// 0x3247ac4
	void OnRep_OwningActor();// 0x3249788
	void OnRep_ClientDebugString();// 0x3249d50
	void OnRep_ActivateAbilities();// 0x3248b40
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x324b020
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x324b6f0
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x324a2f4
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x324b3c4
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x324bb80
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x324b95c
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x324a698
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x324a9c4
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x324aad0
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x324adfc
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x324cdd4
	GameplayEffectContextHandle MakeEffectContext();// 0x324cc80
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x324d590
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x324a23c
	bool GetUserAbilityActivationInhibited();// 0x3249888
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x324c7f4
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x324cb48
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x324c128
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x324c260
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x32484a4
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x32491e0
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x3249d6c
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x32481d0
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x3247f68
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x3247ae0
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x3247d70
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x3247e74
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x324c590
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x324c36c
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x324d428
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x324d308
	void AbilityConfirmOrCancel__DelegateSignature();// 0x4c8f29c
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x4c8f29c

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc8, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd8, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf8, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x108, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x118, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x6b553d0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x6b55144

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: SolarGameplayAbilitySet.DataAsset.Object
	class GameplayAbility[] Abilities;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x20]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 0x8]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 0x48]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x326c360
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x326c298
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x326bd00
	void RemoveGrantedByEffect();// 0x326bf34
	void MontageStop(float OverrideBlendOutTime);// 0x326a1ac
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x326a250
	void MontageJumpToSection(FName SectionName);// 0x326a334
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x326a054
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x326a128
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x326c448
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x4c8f29c
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x326a6b4
	void K2_OnEndAbility(bool bWasCancelled);// 0x4c8f29c
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x326aba0
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x326ad74
	void K2_EndAbility();// 0x326bce4
	void K2_CommitExecute();// 0x4c8f29c
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x326c080
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x326c140
	bool K2_CommitAbility();// 0x326c258
	bool K2_CheckAbilityCost();// 0x326c000
	bool K2_CheckAbilityCooldown();// 0x326c040
	void K2_CancelAbility();// 0x326c34c
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x4c8f29c
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x326b294
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x326ba24
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x326a760
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x326a984
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x4c8f29c
	void K2_ActivateAbility();// 0x4c8f29c
	void InvalidateClientPredictionKey();// 0x326bf50
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x326cb18
	Actor* GetOwningActorFromActorInfo();// 0x326cb80
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x326c998
	Object* GetCurrentSourceObject();// 0x326bf64
	AnimMontage* GetCurrentMontage();// 0x326bfcc
	float GetCooldownTimeRemaining();// 0x326c414
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x326c614
	Actor* GetAvatarActorFromActorInfo();// 0x326cb4c
	GameplayAbilityActorInfo GetActorInfo();// 0x326cbb4
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x326cae4
	int GetAbilityLevel();// 0x326bf98
	void EndTaskByInstanceName(FName InstanceName);// 0x326a520
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x326a3d8
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x326a5c4
	void CancelTaskByInstanceName(FName InstanceName);// 0x326a47c
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x326af44
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x326b034
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x326b164
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x326b680
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x326bbac

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 0x2]
	int16 Base;//[Offset: 0x2, Size: 0x2]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x40]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3d0, Size: 0x40]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x410, Size: 0x40]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x450, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x4b0, Size: 0x40]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x4f0, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x648, Size: 0x150]
	enum StackingType;//[Offset: 0x799, Size: 0x1]
	int StackLimitCount;//[Offset: 0x79c, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x7a0, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x7a1, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x7a2, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x7a8, Size: 0x10]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x328de30

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x40]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: GameplayTagRequirements
	GameplayTagContainer RequireTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer IgnoreTags;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x328c3d0

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x240, Size: 0x40]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x328bbec

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x6b531e4
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x4c8f29c
	void EndTask();// 0x6b531d0

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x240, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x2d0, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x2d8, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x2e8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x2f0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x300, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x308, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x330, Size: 0x8]
	void ConfirmTargeting();// 0x3271120
	void CancelTargeting();// 0x3271104

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x230, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x240, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x248, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x4c8f29c
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x4c8f29c
	void OnValidTargetChanged(bool bNewValue);// 0x4c8f29c
	void OnTargetingAnActor(bool bNewValue);// 0x4c8f29c
	void OnParametersInitialized();// 0x4c8f29c
	void FaceTowardSource(bool bFaceIn2D);// 0x3273380

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameplayAbilityLocalAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityLocalAnimMontage LocalMontageInfo;//[Offset: 0x8, Size: 0x30]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GameplayAbilityRepAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityRepAnimMontage RepMontageInfo;//[Offset: 0x8, Size: 0x38]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	byte SectionIdToPlay;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SolarMetaAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData Damage;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData ShieldDamage;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarAttributeSet.AttributeSet.Object
	void K2_SetAttributeValue(FName AttributeName, float NewVal);// 0x45f91c4
	void K2_OnReplicationAttribute(out const GameplayAttributeData OldValue, out const GameplayAttributeData ReplicatedAttribute, FName AttributeName);// 0x45f943c
	void K2_InitAttributeValue(out GameplayAttributeData OriginAttribute, float NewVal);// 0x45f90c4
	static float K2_GetAttributeValue(out const GameplayAttributeData OriginAttribute);// 0x45f92ac
	GameplayAttribute K2_GetAttribute(FName AttributeName);// 0x45f936c

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MetaAttributeUpdateEvent
	int TypeID;//[Offset: 0x8, Size: 0x4]
	SolarAbilitySystemComponent* TargetASC;//[Offset: 0x10, Size: 0x8]
	SolarMetaAttributeSet* MetaAttributeSet;//[Offset: 0x18, Size: 0x8]
	GameplayAttribute MetaAttribute;//[Offset: 0x20, Size: 0x38]
	float MetaAttributeValue;//[Offset: 0x58, Size: 0x4]
	MetaAttributeProduceEffect[] Effects;//[Offset: 0x60, Size: 0x10]
	MetaAttributeUpdateEvent_Character CharacterEventData;//[Offset: 0x70, Size: 0x3]

--------------------------------
Class: MetaAttributeProduceEffect
	SolarAttributeSet* EffectAttributeSet;//[Offset: 0x0, Size: 0x8]
	GameplayAttribute EffectAttribute;//[Offset: 0x8, Size: 0x38]
	float EffectValue;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MetaAttributeUpdateEvent_Character
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xb8]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: SpawnedActorHandle
	uint32 Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SolarAnimInstance.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	<enum,AnimMontage*> CharacterMontageMap;//[Offset: 0x270, Size: 0x50]
	byte OwnerRole;//[Offset: 0x2c0, Size: 0x1]
	FName LeftHandIKSocketName;//[Offset: 0x2cc, Size: 0x8]
	FName RightHandWeaponSocketName;//[Offset: 0x2d4, Size: 0x8]
	Transform LeftHandIKSocket2BoneTrans;//[Offset: 0x2e0, Size: 0x30]
	Vector LeftHandEffectorLocation;//[Offset: 0x310, Size: 0xc]
	Rotator LeftHandEffectorRotation;//[Offset: 0x31c, Size: 0xc]
	Vector CurrentLeftHandJointLocation;//[Offset: 0x34c, Size: 0xc]
	Vector RightHandEffectorLocation;//[Offset: 0x358, Size: 0xc]
	Vector RightHandJointLocation;//[Offset: 0x364, Size: 0xc]
	float LeftIKHandWeight;//[Offset: 0x370, Size: 0x4]
	float CurrentReloadTimeRate;//[Offset: 0x374, Size: 0x4]
	float CurrentSwitchWeaponTimeRate;//[Offset: 0x378, Size: 0x4]
	float CurrentBoltTimeRate;//[Offset: 0x37c, Size: 0x4]
	bool IsJog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	float ViewPitch;//[Offset: 0x384, Size: 0x4]
	float ViewYaw;//[Offset: 0x388, Size: 0x4]
	float SimulatedProxyViewSmoothSpeed;//[Offset: 0x38c, Size: 0x4]
	float MinSwimSpeed;//[Offset: 0x398, Size: 0x4]
	float Direction;//[Offset: 0x39c, Size: 0x4]
	float Speed;//[Offset: 0x3a0, Size: 0x4]
	float InputDirection;//[Offset: 0x3a4, Size: 0x4]
	byte IdleTurnType;//[Offset: 0x3a8, Size: 0x1]
	float TurnExplicitTime;//[Offset: 0x3ac, Size: 0x4]
	int turnDirection;//[Offset: 0x3b0, Size: 0x4]
	float DamageDirection;//[Offset: 0x3b4, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x3b8, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x3bc, Size: 0x4]
	LeftHandGripConfig CurrentGripData;//[Offset: 0x4c8, Size: 0x84]
	float Fire2PlayRateStand;//[Offset: 0x5d0, Size: 0x4]
	float Fire2PlayRateCrouch;//[Offset: 0x5d4, Size: 0x4]
	bool bHoldingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	bool ShieldRechargeIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	float FallingInputScale;//[Offset: 0x614, Size: 0x4]
	Vector IKOffsetLeftFootVector;//[Offset: 0x618, Size: 0xc]
	Vector IKOffsetRightFootVector;//[Offset: 0x624, Size: 0xc]
	Vector JointTargetLeftFootVector;//[Offset: 0x630, Size: 0xc]
	Vector JointTargetRightFootVector;//[Offset: 0x63c, Size: 0xc]
	Rotator LeftFootRotation;//[Offset: 0x648, Size: 0xc]
	Rotator RightFootRotation;//[Offset: 0x654, Size: 0xc]
	Vector HipOffsetVector;//[Offset: 0x660, Size: 0xc]
	float FootIKTraceDistanceRate;//[Offset: 0x66c, Size: 0x4]
	float CrouchFootIKTraceDistanceRate;//[Offset: 0x670, Size: 0x4]
	float FootIKInterpSpeed;//[Offset: 0x674, Size: 0x4]
	FName LeftFootSocket;//[Offset: 0x678, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x680, Size: 0x8]
	bool AnimParam_LeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool bNeedJetLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1]
	float LandingBlendWeight;//[Offset: 0x68c, Size: 0x4]
	float FootIKEnableDelayTime;//[Offset: 0x6b4, Size: 0x4]
	bool bActiveFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	float FlailRate;//[Offset: 0x6cc, Size: 0x4]
	float ConfigPitchToZeroTime;//[Offset: 0x6d0, Size: 0x4]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeX;//[Offset: 0x6d4, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeY;//[Offset: 0x6dc, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeZ;//[Offset: 0x6e4, Size: 0x8]
	float JetPack2PoseRestoreSmoothSpeed;//[Offset: 0x6ec, Size: 0x4]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX;//[Offset: 0x6f0, Size: 0x8]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY;//[Offset: 0x6f8, Size: 0x8]
	bool bNewJet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70e, Size: 0x1]
	bool bIsJetFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70f, Size: 0x1]
	int DesirePeekDir;//[Offset: 0x710, Size: 0x4]
	float PeekSpeed;//[Offset: 0x714, Size: 0x4]
	float PeekDirection;//[Offset: 0x718, Size: 0x4]
	bool bEnableDamageReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 0x1]
	bool bEnableWeaponAdditiveA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 0x1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71c, Size: 0x1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71c, Size: 0x1]
	bool bEnableWeaponAdditiveB;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71c, Size: 0x1]
	bool bEnableWeaponJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71c, Size: 0x1]
	byte MaxLODDamageReact;//[Offset: 0x71d, Size: 0x1]
	byte MaxLODWeaponAdditiveA;//[Offset: 0x71e, Size: 0x1]
	byte MaxLODHandIK;//[Offset: 0x71f, Size: 0x1]
	byte MaxLODFootIK;//[Offset: 0x720, Size: 0x1]
	byte MaxLODWeaponAdditiveB;//[Offset: 0x721, Size: 0x1]
	byte MaxLODWeaponJitter;//[Offset: 0x722, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x723, Size: 0x1]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x723, Size: 0x1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x723, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x723, Size: 0x1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x723, Size: 0x1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x723, Size: 0x1]
	enum CurrentWalkMode;//[Offset: 0x724, Size: 0x1]
	enum LastWalkMode;//[Offset: 0x725, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x726, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x727, Size: 0x1]
	enum CurrentCruiseState;//[Offset: 0x728, Size: 0x1]
	AnimSequence* CruiseStartSequence;//[Offset: 0x730, Size: 0x8]
	AnimSequence* CruiseLoopSequence;//[Offset: 0x738, Size: 0x8]
	AnimSequence* CruiseEndSequence;//[Offset: 0x740, Size: 0x8]
	float MinSpeedForSkydiveFlyingInputBonus;//[Offset: 0x748, Size: 0x4]
	float MaxSpeedForSkydiveFlyingInputBonus;//[Offset: 0x74c, Size: 0x4]
	float InputYThresholdToCalcInputYByCamera;//[Offset: 0x750, Size: 0x4]
	float MinDeltaYawFromCameraToGetMaxInputY;//[Offset: 0x754, Size: 0x4]
	enum CurrentSkydiveStage;//[Offset: 0x758, Size: 0x1]
	enum WeaponStatus;//[Offset: 0x759, Size: 0x1]
	bool bIsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75a, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75a, Size: 0x1]
	bool bIsLeftHandDetaching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x75a, Size: 0x1]
	class AnimInstance* VehicleSpecClass;//[Offset: 0x760, Size: 0x8]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x768, Size: 0x1]
	enum CurrentSkillType;//[Offset: 0x769, Size: 0x1]
	void OnMontagePlayStarted(AnimMontage* Montage);// 0x45f4978
	void OnMontagePlayEnded(AnimMontage* Montage, bool bInterrupted);// 0x45f4798
	void OnMontagePlayBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x45f4888
	bool NeedResolveWeaponJitter();// 0x45f4760
	bool JetPack2IsDashingCompletelyOver();// 0x45f4680
	bool IsHoldingWeapon();// 0x45f4464
	bool IsAiming();// 0x45f4440
	Vector2D GetSkydiveFlyingInput();// 0x45f4488
	int GetOwnerGroupID();// 0x45f4614
	Vector GetJetPackDashAnimationBlend();// 0x45f46b8
	Vector GetInputVector();// 0x45f4728
	Vector GetFallingInputVector();// 0x45f46f0
	float GenJumpDirection(float InInputDirection);// 0x45f44bc
	float GenBackwordDirection(float InInputDirection);// 0x45f4568
	bool CheckNewJetAndReset();// 0x45f4648

--------------------------------
Class: LeftHandGripConfig
	Rotator HandL;//[Offset: 0x0, Size: 0xc]
	Rotator Thumbl01;//[Offset: 0xc, Size: 0xc]
	Rotator Thumbl02;//[Offset: 0x18, Size: 0xc]
	Rotator Index01;//[Offset: 0x24, Size: 0xc]
	Rotator Index02;//[Offset: 0x30, Size: 0xc]
	Rotator Middle01;//[Offset: 0x3c, Size: 0xc]
	Rotator Middle02;//[Offset: 0x48, Size: 0xc]
	Rotator Ring01;//[Offset: 0x54, Size: 0xc]
	Rotator Ring02;//[Offset: 0x60, Size: 0xc]
	Rotator Pinky01;//[Offset: 0x6c, Size: 0xc]
	Rotator Pinky02;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: JetPackPoseSpeedRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarSpecABP_Vehicle.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	float ViewPitch;//[Offset: 0x270, Size: 0x4]
	float ViewYaw;//[Offset: 0x274, Size: 0x4]
	enum InVehicleState;//[Offset: 0x278, Size: 0x1]
	enum CurrentVehicleAnimationType;//[Offset: 0x279, Size: 0x1]
	float CurrentVehicleRotationValue;//[Offset: 0x27c, Size: 0x4]
	Vector2D CurrentInputOnVehicle;//[Offset: 0x280, Size: 0x8]
	float LeanTowardRightValue;//[Offset: 0x288, Size: 0x4]
	bool bVehicleInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	Rotator OutVehicleShotRotation;//[Offset: 0x290, Size: 0xc]
	float VehicleDirection;//[Offset: 0x29c, Size: 0x4]
	bool bIronManCanFlyFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bHasPassenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	float VehicleSpeed;//[Offset: 0x2a4, Size: 0x4]
	byte DriveIdleTurnType;//[Offset: 0x2a8, Size: 0x1]
	float SteeringRoatingratio;//[Offset: 0x2ac, Size: 0x4]
	Vector LeftHandOnRudderLocation;//[Offset: 0x2b0, Size: 0xc]
	Vector RightHandOnRudderLocation;//[Offset: 0x2bc, Size: 0xc]
	enum WeaponStatus;//[Offset: 0x2c8, Size: 0x1]

--------------------------------
Class: CharacterSoundConfig.DataAsset.Object
	<enum,FString> SoundEventTable;//[Offset: 0x30, Size: 0x50]
	Transform DefaultTransform;//[Offset: 0x80, Size: 0x30]

--------------------------------
Class: SolarChargingPile.SolarMapElementBase.Actor.Object
	StaticMeshComponent* NormalMesh;//[Offset: 0x2c0, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x2c8, Size: 0x8]
	ActorComponent*[] ExtraChargingVFXComps;//[Offset: 0x2d0, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2e0, Size: 0x4]
	enum Channel;//[Offset: 0x2fc, Size: 0x1]
	int Zone;//[Offset: 0x300, Size: 0x4]
	float MaxEnergy;//[Offset: 0x304, Size: 0x4]
	float PowerRecoveryCD;//[Offset: 0x308, Size: 0x4]
	float PowerRecoveryFrequency;//[Offset: 0x30c, Size: 0x4]
	float PowerRecoveryQuantity;//[Offset: 0x310, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	bool bCanRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 0x1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 0x1]
	bool bIsLosingEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	int OwnerTeam;//[Offset: 0x31c, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0x320, Size: 0x8]
	ChargingInfo[] ChargingInfoList;//[Offset: 0x328, Size: 0x10]
	float CurrentEnergy;//[Offset: 0x338, Size: 0x4]
	float SphereRadius;//[Offset: 0x340, Size: 0x4]
	TimerHandle RecoveryHandle;//[Offset: 0x348, Size: 0x8]
	TimerHandle ServerChargingTimerHandle;//[Offset: 0x358, Size: 0x8]
	TimerHandle ClientChargingTimerHandle;//[Offset: 0x360, Size: 0x8]
	ParticleSystemComponent*[] ChargeParticleEffects;//[Offset: 0x368, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x378, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x380, Size: 0x8]
	bool bEnableHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 0x1]
	float MaxHealth;//[Offset: 0x38c, Size: 0x4]
	float ReducedHealth;//[Offset: 0x390, Size: 0x4]
	float CurrentHealth;//[Offset: 0x394, Size: 0x4]
	float TweenTimeSpeed;//[Offset: 0x398, Size: 0x4]
	float RestTweenTime;//[Offset: 0x39c, Size: 0x4]
	float TargetOpacity;//[Offset: 0x3a0, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x3a4, Size: 0x4]
	float OpacityTweenTime;//[Offset: 0x3a8, Size: 0x4]
	MaterialInstanceDynamic* DynamicMatChargingCircle;//[Offset: 0x3b0, Size: 0x8]
	ChargingPilePreset ChargingPilePreset;//[Offset: 0x3c0, Size: 0x120]
	StaticMeshComponent* RangeRingMeshComp;//[Offset: 0x4e0, Size: 0x8]
	StaticMeshComponent* ChargeCircleMeshComp;//[Offset: 0x4e8, Size: 0x8]
	bool bCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	void ToggleExtraChargingVFX(bool Toggle);// 0x46570a4
	void SetIsActivated(bool bActivated);// 0x4c8f29c
	void ServerOnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x465719c
	void ServerOnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4657474
	void RemoveChargeParticle(SolarCharacter* InCharacter);// 0x4656d84
	void RemoveAllEffects();// 0x4656d70
	void ReceivePileExpired();// 0x4c8f29c
	void ReceiveEnergyChanged();// 0x4c8f29c
	void ReceiveChargingPileInitialize();// 0x4c8f29c
	void ReceiveCharacterShowEffect(const Actor* Other);// 0x4c8f29c
	void ReceiveCharacterHideEffect(const Actor* Other);// 0x4c8f29c
	void PlaySkillStartSound();// 0x4656d5c
	void PlaySkillEndSound();// 0x4656d48
	void PlayRecoveryAnim(bool bStart);// 0x4c8f29c
	void PlayChargingAnimation(bool Reverse);// 0x4c8f29c
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4657308
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4657694
	void OnRep_IsLosingEnergyChanged();// 0x4656cd0
	void OnRep_Energy();// 0x4656d0c
	void OnRep_Enable();// 0x4656d20
	void OnRep_CurrentHealth();// 0x4656ce4
	void OnRep_ChargingInfoListChanged();// 0x4656cf8
	void OnRep_CanRecover();// 0x4656cbc
	void OnRep_Broken();// 0x4656d34
	void OnRefreshRangeRing();// 0x4656bfc
	void OnRefreshChargeCircle(const bool InCharging);// 0x4656c10
	void OnCharacterBatteryIdChanged(SolarCharacter* InCharacter, float Frequency, float Quantity);// 0x4656ecc
	bool IsCharacterInRange(SolarCharacter* InCharacter);// 0x4656ff4
	bool IsAnyCharacterInRange();// 0x4657178
	void CreateChargeParticle(SolarCharacter* InCharacter);// 0x4656e28
	bool CanWork();// 0x4657150

--------------------------------
Class: SolarMapElementBase.Actor.Object
	FString Side;//[Offset: 0x240, Size: 0x10]
	FString Job;//[Offset: 0x250, Size: 0x10]
	FString ElementID;//[Offset: 0x260, Size: 0x10]
	enum Type;//[Offset: 0x270, Size: 0x1]
	enum State;//[Offset: 0x271, Size: 0x1]
	enum Visibility;//[Offset: 0x272, Size: 0x1]
	class SolarGameMode_HandleElementRPC* BP_HandleActorRPC;//[Offset: 0x278, Size: 0x8]
	FName ElementTypeName;//[Offset: 0x280, Size: 0x8]
	FString GroupKey;//[Offset: 0x288, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0x298, Size: 0x1]
	void SetElementVisibility(const enum NewType);// 0x470f898
	enum SetElementState(const enum NewState);// 0x470f944
	void OnRep_ElementVisibility();// 0x470f870
	void OnRep_ElementState();// 0x470f884
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4c8f29c
	void OnElementStateChanged(const enum CurrentState);// 0x4c8f29c

--------------------------------
Class: SolarGameMode_HandleElementRPC.ActorComponent.Object
	FName ComponentTagName;//[Offset: 0xb8, Size: 0x8]
	void OnRep_ComponentName();// 0x4682c78

--------------------------------
Class: ChargingInfo
	SolarCharacter* Ch;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float LastChargeTime;//[Offset: 0xc, Size: 0x4]
	bool bShowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Quantity;//[Offset: 0x14, Size: 0x4]
	float Frequency;//[Offset: 0x18, Size: 0x4]
	SolarBackpackComponent* BackpackComponent;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SolarBackpackComponent.ActorComponent.Object
	float ReduceChargeFactor;//[Offset: 0xd8, Size: 0x4]
	int DeathBoxId;//[Offset: 0xdc, Size: 0x4]
	int MonsterDeathBoxId;//[Offset: 0xe0, Size: 0x4]
	float DeathBoxEnergyRate;//[Offset: 0xe4, Size: 0x4]
	float RebirthEnergyRate;//[Offset: 0xe8, Size: 0x4]
	delegate OnBackpackItemUpdate;//[Offset: 0xf8, Size: 0x10]
	delegate OnBackpackEnergyUpdate;//[Offset: 0x108, Size: 0x10]
	delegate OnBackpackEquipUpdate;//[Offset: 0x118, Size: 0x10]
	delegate OnBatteryIdUpdate;//[Offset: 0x128, Size: 0x10]
	delegate OnEnergyStateUpdate;//[Offset: 0x138, Size: 0x10]
	delegate OnChargeInfoUpdate;//[Offset: 0x148, Size: 0x10]
	delegate OnConsumableNumUpdated;//[Offset: 0x158, Size: 0x10]
	delegate OnMaxEnergyUpdate;//[Offset: 0x168, Size: 0x10]
	delegate OnCurEnergyUpdate;//[Offset: 0x178, Size: 0x10]
	<int,int> MaxPileMap;//[Offset: 0x188, Size: 0x50]
	ReplicateMaxPileData[] MaxPileArray;//[Offset: 0x1d8, Size: 0x10]
	ReplicateBagGradeData[] GradeKeyBagGradeArray;//[Offset: 0x1e8, Size: 0x10]
	BagRequirementData[] BagRequirementArr;//[Offset: 0x1f8, Size: 0x10]
	<int,SolarItemData> IdKeyItemMap;//[Offset: 0x208, Size: 0x50]
	ReplicateItemData[] IdKeyItemArray;//[Offset: 0x258, Size: 0x10]
	<enum,SolarItemData> TypeKeyItemMap;//[Offset: 0x268, Size: 0x50]
	ReplicateItemData[] TypeKeyItemArray;//[Offset: 0x2b8, Size: 0x10]
	ReplicateItemData[] WeaponDataArray;//[Offset: 0x2c8, Size: 0x10]
	<int,SolarItemData> WeaponDataMap;//[Offset: 0x2d8, Size: 0x50]
	int BeReplacedWeaponItemID;//[Offset: 0x328, Size: 0x4]
	bool bGenerateDefaultWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	int PackPrimaryWeaponId;//[Offset: 0x330, Size: 0x4]
	int PackSecondaryWeaponId;//[Offset: 0x334, Size: 0x4]
	byte EnergyState;//[Offset: 0x340, Size: 0x1]
	bool bSettingEnergyCostEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	int DayLightID;//[Offset: 0x344, Size: 0x4]
	float SolarChargeRatio;//[Offset: 0x348, Size: 0x4]
	float InitialSolarCharge;//[Offset: 0x3c0, Size: 0x4]
	float SolarChargeInterval;//[Offset: 0x3c4, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0x3c8, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x3cc, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x3d0, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x3d4, Size: 0x4]
	float MaxEnergyValue;//[Offset: 0x3d8, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x3dc, Size: 0x4]
	float MaxExtraEnergyValue;//[Offset: 0x3e0, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x3e4, Size: 0x4]
	int EnergyModuleID;//[Offset: 0x3ec, Size: 0x4]
	float AddedEnergyMax;//[Offset: 0x3f0, Size: 0x4]
	int ExtraEnergyModuleID;//[Offset: 0x3f8, Size: 0x4]
	float AddedExtraEnergyMax;//[Offset: 0x3fc, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x408, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x40c, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x410, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x414, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x418, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x41c, Size: 0x4]
	int VJetPackModuleID;//[Offset: 0x490, Size: 0x4]
	int HJetPackModuleID;//[Offset: 0x494, Size: 0x4]
	float JetPackVerticalDashSpeedScale;//[Offset: 0x4a8, Size: 0x4]
	float JetPackHorizontalDashSpeedScale;//[Offset: 0x4ac, Size: 0x4]
	<int,class GameplayAbility> ItemAbilities;//[Offset: 0x4b0, Size: 0x50]
	<int,GameplayAbilitySpecHandle> GivenAbilityHandles;//[Offset: 0x500, Size: 0x50]
	delegate OnBackpackWeaponPartUpdate;//[Offset: 0x550, Size: 0x10]
	int[] WeaponPartsArray;//[Offset: 0x5b0, Size: 0x10]
	byte[] IgnoreScopeSlots;//[Offset: 0x5c0, Size: 0x10]
	bool bWeaponPartPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	<int,DateTime> DroppedItemIDMap;//[Offset: 0x630, Size: 0x50]
	float DiscardItemDelayNoticeTime;//[Offset: 0x680, Size: 0x4]
	bool bReviveItemCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1]
	float[] GradeRankProportion;//[Offset: 0x688, Size: 0x10]
	int[] InitialGridNum;//[Offset: 0x698, Size: 0x10]
	int[] CustomMode_Hunt_InitialGridNum;//[Offset: 0x6a8, Size: 0x10]
	AttributeDefaults ItemAttributeData;//[Offset: 0x6b8, Size: 0x10]
	SolarGameplayAbilitySet* ComponentGrantedAbilities;//[Offset: 0x6c8, Size: 0x8]
	void UseItemServer(int ItemID, int Num);// 0x4601f0c
	void UpdateItemUI();// 0x45ff51c
	void UpdateCurrentExtraEnergy(float UpdateValue, enum Usage);// 0x46018ec
	void UpdateCurrentEnergy(float UpdateValue, enum Usage);// 0x46019d4
	void UpdateConsumeSlotUI();// 0x460653c
	bool TryTriggerAbility(const int InItemID);// 0x45ff16c
	void TrySendDropItemTips(const int InDroppedItemID);// 0x45fd748
	float TakeDeathBoxEnergy();// 0x45fd800
	int SupportWeaponSlotNum();// 0x4604ce0
	void StartCheckTutorials();// 0x45fd7ec
	void SmoothEnergy(const float Amount);// 0x46008a8
	void SetSettlementsOnServer();// 0x4604e44
	void SetRequirementBySetting();// 0x4604d8c
	void SetMaxPileMap(int ItemID, int MaxNum);// 0x4606458
	void SetBoxCharging(bool bSet);// 0x4601468
	void SetBackPackGM(enum gmtypy, int ID, int Num, int Slot);// 0x4605404
	bool ServerUseItem(int ItemID, int Num);// 0x4602298
	void ServerUnLockBagGrid(int Grade, int NewUnLockNum);// 0x4601e28
	void ServerSwapBagGrid(int fromGrade, int fromGridIndex, int targetGrade, int TargetIndex);// 0x4602478
	void ServerSetJetPackModule(int NewJetPackModuleID, bool bForVertical);// 0x45ff3e8
	void ServerSetEnergyState(enum State);// 0x4600a20
	void ServerSetChargingPile(bool bEnter, SolarChargingPile* InChargingPile);// 0x4600acc
	bool ServerSendOutItem(int ItemID, int Num);// 0x4602388
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x45fe744
	void ServerRPCUnLockBagGridArr(const BagRequirementData[] InArr);// 0x4603550
	void ServerRPCUnLockBagGrid(int Grade, int NewUnLockNum);// 0x4603608
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x45fe07c
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x45fdf90
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x45fdea4
	void ServerRPCSwapBagGridLuaCall(int fromGrade, int fromGridIndex, int targetGrade, int TargetIndex);// 0x460493c
	void ServerRPCSwapBagGrid(int fromGrade, int fromGridIndex, int targetGrade, int TargetIndex);// 0x4604350
	void ServerRPCSetSettlements();// 0x460422c
	void ServerRPCSetBagRequirementArr(const BagRequirementData[] BagRequirements);// 0x4604174
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x45fe9a8
	void ServerRPCInitSettlementNeedRankArr();// 0x4604b88
	void ServerRPCInitBagGradeData();// 0x4604ba4
	void ServerRPCFixBagGrid(int Grade, int GridIndex);// 0x4604248
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x45fe168
	void ServerRPCDisCardWeaponLuaCall(int Slot);// 0x46047b4
	void ServerRPCDisCardWeapon(int Slot);// 0x46045ac
	void ServerRPCDisCardItemLuaCall(int ID, int Num);// 0x4604858
	void ServerRPCDisCardItem(int ID, int Num);// 0x4604690
	void ServerRPCDisCardHomeItemLuaCall(int Grade, int GridIndex);// 0x4604aa4
	void ServerRPCDisCardHomeItem(int Grade, int GridIndex);// 0x46044c0
	void ServerRPCArrangeBag();// 0x4604334
	void ServerPickUpHomeitemsGM(int ID, int Num);// 0x4601ff8
	bool ServerPickUpHomeItems(int ItemID, bool isAutoPick);// 0x460321c
	int ServerGetDefaultGridNum(int Grade);// 0x46033c0
	void ServerFixBagGrid(int Grade, int GridIndex);// 0x460346c
	bool ServerDiscardWeapon(int Slot);// 0x46026d0
	bool ServerDiscardHomeItem(int Grade, int GridIndex);// 0x46025e0
	bool ServerDiscardFromBackpackByType(enum ItemType, bool InDropItem);// 0x4602780
	bool ServerDiscardFromBackpack(int ItemID, int Num, bool InDropItem);// 0x4602878
	void ServerConsumeExtraEnergy(float Amount, enum Usage);// 0x46011a0
	void ServerConsumeEnergy(float Amount, enum Usage);// 0x4601290
	void ServerClearJetModule();// 0x45ff38c
	void ServerClearEnergyState(enum State);// 0x4600974
	void ServerClearAllItems();// 0x4602d58
	void ServerBackpackGM(enum gmtypy, int ID, int Num, int Slot);// 0x46020e4
	void ServerArrangeBag();// 0x4603024
	bool ServerAddWeaponToWeaponSysByDataCache(const byte SlotType, out const SolarItemData WeaponData, const bool bDestroyPrev, const bool IsAutoPickup);// 0x46029b4
	bool ServerAddWeaponToWeaponSysByData(out const SolarItemData WeaponData, const bool IsAutoPickup);// 0x4602bcc
	int ServerAddToItemMapByIdAndNumForced(const int ItemID, const int Num);// 0x4602f38
	int ServerAddToItemMap(SolarItemData ItemData);// 0x46036f4
	void ServerAddToEquipMap(out const SolarItemData ItemData, bool Bydefault, bool InDropItem);// 0x4602d6c
	int ServerAddToBackpackByIdAndNum(int ItemID, int Num, bool Bydefault, const float CurValue, bool IsGM);// 0x46039f4
	int ServerAddToBackpack(out const SolarItemData ItemData, bool Bydefault);// 0x460386c
	bool ServerAddHomeItemToBagGrid(int ItemID, int Grade, int GridIndex);// 0x46030e8
	void ReqUseEnergy(float Amount, enum Usage);// 0x4601380
	void RequestWeaponReplaceNotice(int OldWeaponItemId, int CurWeaponItemId, int OldWeaponLevel, int CurWeaponLevel);// 0x4600150
	void RequestWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x45fff80
	void RequestUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x45feb2c
	void RequestEquipReplaceNotice(int OldEquipItemId, int CurEquipItemId, int EquipType);// 0x46002b8
	void ReqesutPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x45fec10
	void RefreshWeaponPartsInBackPackUI();// 0x4606564
	void RefreshWeaponInBackPackUIInternal();// 0x46065c8
	void RefreshWeaponInBackPackUI();// 0x460658c
	void RefreshWeaponDataMapAndArray();// 0x4605020
	void RefreshTypeItemMapAndArray();// 0x4604d3c
	void RefreshMaxPileMapAndArray();// 0x4604f24
	void RefreshItemInBackPackUI();// 0x46065b4
	void RefreshIdItemMapAndArray();// 0x4604d64
	void RefreshHomeItemBackPackUI();// 0x4606578
	void RefreshEquipInBackPackUI();// 0x46065a0
	void RefreshBackPackUIState();// 0x4606550
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x45fe868
	int PredictEnergy(const float Amount);// 0x46007fc
	void OnUnLockGrid(int Grade);// 0x4604da0
	void OnRepItemWeaponParts();// 0x45fde90
	void OnRepIgnoreScopeSlots();// 0x45fde7c
	void OnRep_WeaponDataMap();// 0x4604d14
	void OnRep_VJetPackModuleID();// 0x45ff378
	void OnRep_TypeKeyItemArrayChange();// 0x4604d28
	void OnRep_SettingEnergyCostChanged();// 0x460094c
	void OnRep_ReviveItemCleared();// 0x45fd614
	void OnRep_MaxPileArrayChange();// 0x4604f10
	void OnRep_MaxExtraEnergyChanged();// 0x4600510
	void OnRep_IdKeyItemArrayChange();// 0x4604d50
	void OnRep_HJetPackModuleID();// 0x45ff364
	void OnRep_GradeKeyBagGradeArrayChange();// 0x4604d78
	void OnRep_ExtraEnergyModuleIDChanged();// 0x46005c8
	void OnRep_EnergyStateChanged();// 0x4600960
	void OnRep_CurrentEnergyChanged(float LastEnergyValue);// 0x4600524
	void OnRep_BagRequirementArrChange();// 0x4604efc
	void OnReceiveItemAbilityCoolDown(out const GameplayTag Tags, const bool bAdd);// 0x45fee74
	void OnGameModeGlobalSettingChanged(GameModeGlobalSetting* InNewSettings);// 0x4600610
	void OnDayNightChange(const int ID);// 0x45ffedc
	bool NetUseEnergy(float InCostEnergy, enum Usage);// 0x4601abc
	void NetTakeWeaponPartToBagLuaCall(const int Slot, const int WeaponPartType);// 0x45fe41c
	void NetTakeBagPartToWeaponLuaCall(const int Slot, const int WeaponPartType);// 0x45fe338
	void NetSwitchWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x45fe254
	void NetDiscardWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x45fe500
	bool ModuleOverflow2(int ModuleMax);// 0x4601040
	bool ModuleOverflow(int ModuleMax);// 0x46010f0
	ReplicateBagGridData[] MergeAllGrade();// 0x4605ce0
	void LogBackPackItem();// 0x46053f0
	bool IsReviveItemRecommend();// 0x45fd660
	bool IsReviveItemPickable();// 0x45fd628
	bool IsReviveItem(const int InItemID);// 0x45fd698
	bool IsExtraEnergyID(int ID);// 0x4601c18
	bool IsEquippedWeapon(const int InThisID);// 0x46057b4
	bool IsEquippedOrHasBetterPart(const int PartType, const int Level);// 0x45fdac4
	bool IsEnergyID(int ID);// 0x4601cc8
	bool IsBetterWeaponForBag(out const SolarItemData InItemData, int InWeaponLevel);// 0x45ff568
	bool IsBetterScopeForBag(const int PartType, const int Level);// 0x45fd924
	bool IsBetterPartForBag(const int PartType, const int Level);// 0x45fd834
	void InitSettlementNeedRankArrOnServer();// 0x4604f4c
	void InitializeOwnerAbility(int InCharacterID);// 0x45fd570
	void InitEquipItemUI();// 0x4604be8
	void InitDefaultItem(int ItemID, int Num);// 0x4604bfc
	void InitDefaultDayNight(const int GameModeId);// 0x45ffe38
	void InitDeathBoxEnergyRate();// 0x4604bd4
	void InitBagGradeDataOnServer();// 0x4604f38
	bool HasPickEnoughItem(int ItemID, out int requirementIndex);// 0x4605e18
	bool HasMaxExtraEnergy();// 0x46018b4
	bool HasEmptyWeaponSlot();// 0x45ff94c
	bool GetWeaponSlotEmpty(int Slot);// 0x45ff6ec
	bool GetWeaponPartInBagClient(int TargetPartType, out int OutPartLevel, out int OutItemID);// 0x45fdbb4
	SolarItemData GetWeaponItemDataBySlot(int Slot);// 0x45ff984
	<int,SolarItemData> GetWeaponDataMap();// 0x460514c
	bool GetWeaponDataBySolt(int Slot, out SolarItemData ItemData);// 0x4605864
	<enum,SolarItemData> GetTypeKeyItemMap();// 0x46052c4
	float GetTotalEnergy();// 0x46005dc
	float GetQuantityFrom(enum Usage);// 0x46017a0
	int GetPlayerRank();// 0x4605ba8
	SolarItemData GetNewItemData(int ItemID, int Num);// 0x4605570
	int GetNeedRankNumOnServer(int Grade);// 0x4603314
	int GetMonsterDeathBoxID();// 0x4605114
	float GetMaxExtraEnergy();// 0x460184c
	float GetMaxEnergy();// 0x4601bb0
	bool GetLastNormalGrid(out int outGrade, out int outGridIndex);// 0x46059e4
	int GetItemNumById(int ItemID);// 0x4606300
	int GetItemMaxPile(int ItemID);// 0x46063ac
	bool GetItemDataByType(enum ItemType, out SolarItemData ItemData);// 0x4606000
	bool GetItemDataById(int ItemID, out SolarItemData ItemData);// 0x4606180
	<int,SolarItemData> GetIdKeyItemMap();// 0x4605354
	int GetHasUnLockGridNum(int Grade);// 0x4605afc
	float GetFrequencyFrom(enum Usage);// 0x46016f4
	int GetExtraEnergyModuleID();// 0x4600bc8
	SolarItemData GetEquipItemDataByType(enum ItemType);// 0x45ffb88
	int GetEquipIdByType(enum ItemType);// 0x45ffd8c
	int GetDefaultAddGrade();// 0x4605fcc
	int GetDeathBoxId();// 0x4605130
	int GetDafalutAddGrid(int Grade);// 0x4605f20
	float GetCurrExtraEnergyValue();// 0x46050dc
	float GetCurrExtraEnergy();// 0x4601880
	SolarItemData GetCurrentWeaponItemData();// 0x45ff79c
	bool GetCurrentWeaponIsOverloading();// 0x45ff530
	void GetCurrentEquipItems(out int[] OutArray);// 0x4604f60
	float GetCurrEnergyValue();// 0x46050f8
	float GetCurrEnergy();// 0x4601be4
	SolarCharacter* GetCharacterOwner();// 0x46065dc
	void GetBagGridDatasByGrade(int Grade, out ReplicateBagGridData[] OutBagGridDataArray);// 0x4605bdc
	bool GetAnyScopeInBagClient(out int OutPartType, out int OutPartLevel, out int OutItemID);// 0x45fdd14
	float GetAbilityRemainingCD(const int InItemID);// 0x45fef70
	float GetAbilityDuration(const int InItemID);// 0x45ff01c
	void GameStatistics_ItemUseCount(out const SolarItemData InItemData);// 0x45fed48
	void FixBagGrid(int Grade, int GridIndex);// 0x4603db0
	void ExecuteGM(FString InStrGM);// 0x4601d78
	void EquipModuleByID(int ModuleID);// 0x4600c88
	int EquipModule(const int ID, const float ModuleMax);// 0x4600f50
	void EquipBatteryByID(int BatteryID);// 0x4600be4
	int EquipBattery(const int ID, const float BatteryMax, const float Charge, const float cd);// 0x4600d2c
	void DiscardItemAndResetCharacterData(out const SolarItemData DiscardItem, const bool DiscardDataOnly);// 0x4603e94
	void DiscardItem(SolarItemData DiscardItem);// 0x460400c
	void DelayCheckClearAbility(const int InItemID);// 0x45ff0c8
	void CompleteWholeRowOnServer(int Grade);// 0x4604e58
	void CommitEnergy(const int ID);// 0x4600758
	void ClientWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x4600064
	void ClientEquipReplaceNotice(int OldEquipItemId, int CurEquipItemId, int EquipType);// 0x46003e0
	bool ClearBackpackItemByID(const int InItemID);// 0x4603bc8
	void CheckToGiveAbility(const int InItemID);// 0x45ff2c0
	void CheckToClearAbility(const int InItemID);// 0x45ff21c
	bool CheckIsRecWeaponParts(const int ItemID);// 0x45fe5e4
	bool CheckIsEquippedDifferentScope(const int PartId);// 0x45fda14
	bool CheckCanAutoPickupWeaponPart(const int ItemID);// 0x45fe694
	float ChargeMain(const float Amount, enum Usage);// 0x4601604
	float ChargeExtra(const float Amount, enum Usage);// 0x4601514
	void CancelEnergy(const int ID);// 0x46006b4
	bool CanAutoPickupHomeItem(const int InItemID);// 0x4603038
	bool BatteryOverflow(int BatteryMax);// 0x4600ea0
	void ArrangeBag();// 0x4604bc0
	void AddCurrExtraEnergyValue(float DeltaEnergy);// 0x4605034
	enum AddBackpackItemByID(const int InItemID, const int InItemNum, const bool InDropItem);// 0x4603c78

--------------------------------
Class: ReplicateMaxPileData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxPile;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicateBagGradeData
	int BagGrade;//[Offset: 0x0, Size: 0x4]
	ReplicateBagGridData[] BagGridDataArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ReplicateBagGridData
	SolarItemData ItemData;//[Offset: 0x0, Size: 0xa8]
	enum GridType;//[Offset: 0xa8, Size: 0x1]
	int BagGrade;//[Offset: 0xac, Size: 0x4]
	int Index;//[Offset: 0xb0, Size: 0x4]
	bool IsRequirementTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: SolarItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int64 ThisID;//[Offset: 0x8, Size: 0x8]
	FString Name;//[Offset: 0x10, Size: 0x10]
	FString Icon;//[Offset: 0x20, Size: 0x10]
	FString Info;//[Offset: 0x30, Size: 0x10]
	int Count;//[Offset: 0x40, Size: 0x4]
	enum ItemType;//[Offset: 0x44, Size: 0x4]
	int Quality;//[Offset: 0x48, Size: 0x4]
	int MaxPile;//[Offset: 0x4c, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	FString AbilityBP;//[Offset: 0x58, Size: 0x10]
	FString ItemBP;//[Offset: 0x68, Size: 0x10]
	int DropTime;//[Offset: 0x78, Size: 0x4]
	int UnPickupTime;//[Offset: 0x7c, Size: 0x4]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool IsPickupLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	int64 UserId;//[Offset: 0x88, Size: 0x8]
	int Level;//[Offset: 0x90, Size: 0x4]
	int Prize;//[Offset: 0x94, Size: 0x4]
	float CurValue;//[Offset: 0x98, Size: 0x4]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]

--------------------------------
Class: BagRequirementData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicateItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	int Slot;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarElectricShop.SolarInteractableActor.Actor.Object
	int MaxWeaponLevel;//[Offset: 0x248, Size: 0x4]
	float[] UpgradeEnergyCosts;//[Offset: 0x250, Size: 0x10]
	StaticMeshComponent* ShopMesh;//[Offset: 0x260, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x268, Size: 0x8]
	int SpawnID;//[Offset: 0x270, Size: 0x4]
	bool bSpecificShopID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	DataTable* ShopMeshPathTable;//[Offset: 0x278, Size: 0x28]
	bool bIfShowInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	class MapMarkBase* MapIcon;//[Offset: 0x2a8, Size: 0x28]
	int MapIconID;//[Offset: 0x2d0, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x2d4, Size: 0x4]
	int ShopID;//[Offset: 0x2d8, Size: 0x4]
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	float TirggerDistance;//[Offset: 0x2e0, Size: 0x4]
	enum CurrentModeAnimType;//[Offset: 0x2e4, Size: 0x1]
	enum WantedModeAnimType;//[Offset: 0x2e5, Size: 0x1]
	SolarCharacter*[] InstigateCharacters;//[Offset: 0x2e8, Size: 0x10]
	DataTable* ShopMeshDataTable;//[Offset: 0x2f8, Size: 0x8]
	ElectricShopSection[] ItemSections;//[Offset: 0x300, Size: 0x10]
	ElectricShopCDRecord[] ItemCDRecords;//[Offset: 0x310, Size: 0x10]
	float[] PoolRefreshTimeList;//[Offset: 0x320, Size: 0x10]
	PoolRefreshInfo[] PoolRefreshInfoList;//[Offset: 0x330, Size: 0x10]
	int CurPoolGroupID;//[Offset: 0x340, Size: 0x4]
	MapMarkBase*[] MapMarkArray;//[Offset: 0x358, Size: 0x10]
	TimerHandle[] CachedHandles;//[Offset: 0x368, Size: 0x10]
	float DemoRotationSpeed;//[Offset: 0x378, Size: 0x4]
	float DemoSwtichTime;//[Offset: 0x37c, Size: 0x4]
	float DemoOffsetFromZ;//[Offset: 0x380, Size: 0x4]
	DataTable* ItemDemoBPTable;//[Offset: 0x388, Size: 0x28]
	DataTable* ItemDemoBPDataTable;//[Offset: 0x3b0, Size: 0x8]
	<SoftObjectPath,ElectricShopItemDemo*> DemoActorMap;//[Offset: 0x3b8, Size: 0x50]
	ElectricShopItemDemo* CurDemo;//[Offset: 0x408, Size: 0x8]
	TimerHandle DemoLoopPlaybackHandle;//[Offset: 0x410, Size: 0x8]
	Object*[] CachedDemoItemsClass;//[Offset: 0x448, Size: 0x10]
	void UpgradeWeaponResponse(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x466f05c
	bool ServerUpgradeWeapon(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x466f148
	void ServerStatisticElectricShop(const SolarCharacter* ActivateCharacter, enum StatisticType, const int InValueA, const int InValueB);// 0x466ec40
	bool ServerPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarCharacter* InCharacter);// 0x466f43c
	bool RemoveInstigator(SolarCharacter* InCharacter);// 0x466fdf4
	bool RefreshSellingItem(const int InProductID);// 0x466e9b4
	void RefreshItemCDRecords(out const ElectricShopItem InItem, FString InPlayerId);// 0x466ea64
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarCharacter* InCharacter);// 0x466f2fc
	void OnShopIDReplicatedBP();// 0x4c8f29c
	void OnRep_ShopID();// 0x466f9a4
	void OnRep_ItemSections();// 0x466f990
	void OnRep_ItemCDRecords();// 0x466f97c
	void OnRep_CurPoolGroupID(int PrePoolGroupID);// 0x466eb9c
	void OnPlayWeaponUpgradeAnim();// 0x4c8f29c
	void OnPlayPurchaseAnim();// 0x4c8f29c
	void OnPlayIdleAnim();// 0x4c8f29c
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x466f9b8
	void OnCurrentAnimFinish();// 0x466f588
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x466fb24
	bool IsProductRecommendEquipType(const enum ProductType);// 0x466f24c
	bool IsInteractable(SolarCharacter* InCharacter);// 0x466fd44
	void InitWeaponUpgradeEnergyCost();// 0x466f238
	void InitializeElectricShop();// 0x466ff48
	float GetServerWorldTime();// 0x466eb68
	float GetRemainingCD(const int ProductID);// 0x466efb0
	bool GetCurrentItem(const int InProductID, out ElectricShopItem OutItem);// 0x466edb8
	FString GetBuyerID(const int ProductID);// 0x466eeb8
	ElectricShopItem GenerateNewItem(const int InProductID);// 0x466e8f8
	void ClientUpgradeWeaponSuccess();// 0x466f680
	void ClientUpdateModelAnim();// 0x4c8f29c
	void ClientPurchaseSuccess();// 0x466f968
	void ClientHUDUpgradeWeaponSuccess(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x466f59c
	void ClientHUDPurchaseSuccess(const int InProductID, SolarCharacter* InCharacter);// 0x466f880
	void ClientHUDPoolRefresh(SolarCharacter* InCharacter);// 0x466f694
	void ClientHUDItemRefresh(SolarCharacter* InCharacter);// 0x466f738
	void ClientHUDCDRefresh(SolarCharacter* InCharacter);// 0x466f7dc
	void AddInstigator(SolarCharacter* InCharacter);// 0x466fea4

--------------------------------
Class: SolarInteractableActor.Actor.Object
	enum InteractType;//[Offset: 0x230, Size: 0x1]
	byte bUseSceneActorOptimization;//[Offset: 0x23c, Size: 0x1]
	void SetUserActor(Actor* InUser);// 0x46e8df8
	void InteractWithActor(Actor* InActor);// 0x4c8f29c
	Actor* GetUserActor();// 0x46e8dc4

--------------------------------
Class: SolarPlayerWeapon.SolarWeapon.Actor.Object
	float SpawnOffset;//[Offset: 0x9c8, Size: 0x4]
	bool bIsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc, Size: 0x1]
	SolarItemData ItemData;//[Offset: 0x9f0, Size: 0xa8]
	byte[] MarkedTeamIdList;//[Offset: 0xa98, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0xaa8, Size: 0x1]
	SphereComponent* SphereComponent;//[Offset: 0xab0, Size: 0x8]
	Vector DroppedLocation;//[Offset: 0xab8, Size: 0xc]
	SolarCharacterBase* WeaponOwner;//[Offset: 0xac8, Size: 0x8]
	WeaponAnimationComponent* WeaponAnimationComponent;//[Offset: 0xad0, Size: 0x8]
	WeaponUpgradeComponent* WeaponUpgradeComponent;//[Offset: 0xad8, Size: 0x8]
	SkeletalMeshComponent*[] WeaponOutlineComponents;//[Offset: 0xae0, Size: 0x10]
	byte CurrentRenderMode;//[Offset: 0xaf0, Size: 0x1]
	byte WeaponCurrentState;//[Offset: 0xaf2, Size: 0x1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0xaf8, Size: 0x10]
	SoftObjectPath HoldMeshMaterialPath;//[Offset: 0xb08, Size: 0x18]
	bool bNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 0x1]
	ParticleSystemComponent*[] SkinExtraPSCArray;//[Offset: 0xb28, Size: 0x10]
	ParticleSystemComponent* SkinSpecialEffect;//[Offset: 0xb38, Size: 0x8]
	<enum,SoftObjectPath> CharacterMontagePathMap;//[Offset: 0xb50, Size: 0x50]
	int AutoFireAnimCountFPP;//[Offset: 0xba0, Size: 0x4]
	int StandardLoopShotSectionFPP;//[Offset: 0xba4, Size: 0x4]
	int AutoFireAnimCountTPP;//[Offset: 0xba8, Size: 0x4]
	int StandardLoopShotSectionTPP;//[Offset: 0xbac, Size: 0x4]
	<enum,AnimMontage*> CharacterMontageMap;//[Offset: 0xbb0, Size: 0x50]
	<enum,AnimMontage*> OverrideCharacterMontageMap;//[Offset: 0xc00, Size: 0x50]
	ParticleSystem* SkinDedicatedKillEffect;//[Offset: 0xc50, Size: 0x8]
	ParticleSystem* SkinDedicatedSpecialEffect;//[Offset: 0xc58, Size: 0x8]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 0x1]
	void YieldCmdExec();// 0x4755840
	void WeaponUpgradeToNextLevel();// 0x47553f8
	void UpdateCharacterState(enum CharacterState, bool bIsOnGround, bool bResetState);// 0x4756c5c
	void UpdateCharacterPosture(bool IsCrouch);// 0x4756bb0
	void UpdateAppearanceCmdExec();// 0x4755854
	void SwitchPossessMaterial();// 0x47566e4
	void SwitchDiscardMaterial();// 0x47566f8
	void SetWeaponSkin(const WeaponSkinData* SkinData);// 0x4756728
	void SetWeaponOutlineVisibility(const bool InVisibile);// 0x47562a4
	void SetSkin(int SkinId);// 0x4755c78
	void SetRenderMode(byte Mode);// 0x4756db8
	void SetOpenScopeOnVehicle(const bool InbOpenScope);// 0x47567e8
	void SetDedicatedSkinEffect(const WeaponSkinData* InSkinData);// 0x47555e0
	void ResumeCmdExec();// 0x475582c
	void ResetSkin();// 0x4755c5c
	void ResetMaterial();// 0x475595c
	void RequestUnlimitedAmmo(const bool InEnable);// 0x4755684
	void RefreshSkin();// 0x4755c48
	void PostUpdateAppearance();// 0x4c8f29c
	void OnWeaponSkinRefresh(bool bValid, int SkinId);// 0x4755970
	void OnWeaponAppreanceChanged(const bool bPart, const enum PartType);// 0x4755730
	void OnSetWeaponSkinMesh(SkeletalMesh* InMesh, class Object InAnimClass);// 0x4755b64
	void OnRep_WeaponCurrentStateChanged();// 0x475670c
	void OnClientMeshLodChanged(int LOD);// 0x4756624
	void NotifyThisItemWasPickedUp();// 0x47566d0
	void MarkDirty();// 0x4756890
	void K2_SwitchDrawDistance(bool Hold);// 0x4756350
	void K2_OnHold(bool bLocal);// 0x4756534
	void K2_OnDrop();// 0x4756518
	bool IsOpenedScopeOnVehicle();// 0x47567cc
	bool IsItemWeapon();// 0x4756e5c
	bool IsExistPart(out const enum PartType);// 0x4756960
	void Hold(bool bo);// 0x4756afc
	bool HasScope();// 0x4756aa0
	float GetWeaponSilencerMagnitude();// 0x475540c
	WeaponUpgradeComponent* GetUpgradeComponent();// 0x4756e9c
	PlayerWeaponSpreadComponent* GetSpreadComp();// 0x4756404
	SoftObjectPath[] GetSkinNeedLoadAssets(WeaponSkinData* SkinData);// 0x4755454
	PlayerWeaponRecoilComponent* GetRecoilComp();// 0x4756438
	int GetQualityByLevel(int Level);// 0x475646c
	int GetQuality();// 0x47565e8
	byte GetItemCurrentState();// 0x47568a4
	bool GetIsHolded();// 0x4756ae0
	Vector GetFPPLocation();// 0x47568e0
	float GetFire2AnimPlayRate();// 0x4755d24
	float GetDistanceToEyeWhenScope();// 0x4756a64
	Vector GetCurrentScopeAimCenterPoint();// 0x4756920
	byte GetCurrentRenderMode();// 0x4756d9c
	WeaponPartClipComp* GetCurrentClip();// 0x4756a28
	AnimMontage* GetCharacterAnimMontage(enum InMontageType);// 0x4756104
	enum FindMontageKey(AnimMontage* Montage);// 0x4755d58
	void EnqueueUpdateAppearanceCmd(const byte Cmd, FString Params);// 0x4755868
	void CRecieveProto_RefreshSkinAction(bool bAutonomous, FString paramters);// 0x4755a64
	void ClearSkinExtraPSC();// 0x4755440
	void ClearDedicatedSkinEffect();// 0x47555cc
	void AddWeaponEXP(int InExp);// 0x4755354

--------------------------------
Class: SolarWeapon.Actor.Object
	delegate OnWeaponUnhold;//[Offset: 0x3b8, Size: 0x10]
	class SolarWeaponFireStateMachine* WeaponFireStateMachineClass;//[Offset: 0x3c8, Size: 0x8]
	SolarWeaponFireStateMachine* WeaponFireStateMachine;//[Offset: 0x3d0, Size: 0x8]
	class SolarWeaponSkillStateMachine* WeaponSkillStateMachineClass;//[Offset: 0x3d8, Size: 0x8]
	SolarWeaponSkillStateMachine* WeaponSkillStateMachine;//[Offset: 0x3e0, Size: 0x8]
	float HitHeadValue;//[Offset: 0x3e8, Size: 0x4]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 0x1]
	bool bBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 0x1]
	bool bAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 0x1]
	bool bNeedBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	enum PrimaryShootingOption;//[Offset: 0x3f2, Size: 0x1]
	ImpactDisplayInfo ImpactInfo;//[Offset: 0x3f4, Size: 0x10]
	bool bSkillCostSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	int ExtraPoints;//[Offset: 0x414, Size: 0x4]
	int ExtraPointsForInit;//[Offset: 0x418, Size: 0x4]
	int ExtraPointsLimit;//[Offset: 0x41c, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x420, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x424, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x428, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x42c, Size: 0x4]
	float RestoreProgressAccumulation;//[Offset: 0x430, Size: 0x4]
	float RestoreProgressAccumulationForInit;//[Offset: 0x434, Size: 0x4]
	byte FireModeIndex;//[Offset: 0x441, Size: 0x1]
	int BurstMaxCount;//[Offset: 0x450, Size: 0x4]
	enum OverloadState;//[Offset: 0x468, Size: 0x1]
	float OverloadAccum;//[Offset: 0x46c, Size: 0x4]
	WeaponDebugFlag DebugFlag;//[Offset: 0x48c, Size: 0x6]
	float GatlingRollSpeed;//[Offset: 0x494, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x498, Size: 0x4]
	float GatlingRollSpeedInterp;//[Offset: 0x49c, Size: 0x4]
	int GatlingRepState;//[Offset: 0x4a0, Size: 0x4]
	bool bUseBlendSpaceForFPPRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	bool bResetMuzzleIndexWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 0x1]
	SolarVirtualBulletCollector* VirtualBulletCollector;//[Offset: 0x4c0, Size: 0x8]
	float FireChargingTime;//[Offset: 0x4e0, Size: 0x4]
	int FireChargingPhase;//[Offset: 0x4e4, Size: 0x4]
	float ChargeAnimationRate;//[Offset: 0x4ec, Size: 0x4]
	AbilitySystemComponent* OwnerGAS;//[Offset: 0x4f0, Size: 0x8]
	int CurrentMode;//[Offset: 0x508, Size: 0x4]
	FireMode[] FireModes;//[Offset: 0x518, Size: 0x10]
	Actor* WeaponHolder;//[Offset: 0x528, Size: 0x8]
	SolarCharacterBase* ControllWeaponCharacter;//[Offset: 0x530, Size: 0x8]
	GameplayAbilitySpecHandle[] EquipedAbilityHandles;//[Offset: 0x538, Size: 0x10]
	bool bControllWeaponCharacterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	Actor* AimTarget;//[Offset: 0x550, Size: 0x8]
	class SolarWeaponProjectileSpline* ProjSplineClass;//[Offset: 0x558, Size: 0x8]
	SolarWeaponProjectileSpline* ProjSpline;//[Offset: 0x560, Size: 0x8]
	enum[] ShootingOptArray;//[Offset: 0x568, Size: 0x10]
	bool bShowSpecialEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	int SecondaryModeBurstMaxCount;//[Offset: 0x57c, Size: 0x4]
	SingleWeaponConfig* Config;//[Offset: 0x580, Size: 0x8]
	Texture2D* WeaponIcon;//[Offset: 0x588, Size: 0x8]
	SlateWidgetStyleAsset* PrimaryFireBtnStyle;//[Offset: 0x590, Size: 0x8]
	SlateWidgetStyleAsset* SecondaryFireBtnStyle;//[Offset: 0x598, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfig;//[Offset: 0x5a0, Size: 0x8]
	WeaponSpreadComponent* SpreadComponent;//[Offset: 0x5a8, Size: 0x8]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0x5b0, Size: 0x8]
	int weaponid;//[Offset: 0x5b8, Size: 0x4]
	bool bInitCfgFromTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bf, Size: 0x1]
	bool bTeamDamageEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1]
	bool bInfinitePackageAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c2, Size: 0x1]
	int ExtraAmmo;//[Offset: 0x5c4, Size: 0x4]
	int CurrentClipAmmo;//[Offset: 0x5f8, Size: 0x4]
	CameraShakeData[] WeaponFireCameraShakes;//[Offset: 0x600, Size: 0x10]
	CameraShakeData[] UsingSkillCameraShakes;//[Offset: 0x610, Size: 0x10]
	CameraShakeData[] WeaponChargingCameraShakes;//[Offset: 0x620, Size: 0x10]
	enum WeaponChargePhase;//[Offset: 0x630, Size: 0x1]
	bool bUseEmptyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 0x1]
	SoftObjectPath FightMeshPath;//[Offset: 0x638, Size: 0x18]
	SkeletalMeshComponent* Mesh;//[Offset: 0x650, Size: 0x8]
	SkeletalMesh* OriginalMesh;//[Offset: 0x658, Size: 0x8]
	class WeaponAnimInstance* OriginalAnimBP;//[Offset: 0x660, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x668, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x670, Size: 0x8]
	int SoundFireAutoCount;//[Offset: 0x678, Size: 0x4]
	bool bTriggerSoundFireAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 0x1]
	int OldSoundFireAutoCount;//[Offset: 0x680, Size: 0x4]
	bool bTriggerSoundB9A04Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x685, Size: 0x1]
	int SkillFireCount;//[Offset: 0x688, Size: 0x4]
	int SingleFireCount;//[Offset: 0x68c, Size: 0x4]
	int FireOverloadCount;//[Offset: 0x690, Size: 0x4]
	int FireLastCount;//[Offset: 0x694, Size: 0x4]
	FName SkillReleaseResult;//[Offset: 0x6e8, Size: 0x8]
	OverrideBulletStruct OverrideBullet;//[Offset: 0x718, Size: 0x10]
	bool bInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]
	bool bClientInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 0x1]
	bool bLoadInitAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 0x1]
	bool bLoadAllCfgAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 0x1]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x730, Size: 0x8]
	<FireUniqueID,float> FireHitVerifyMap;//[Offset: 0x738, Size: 0x50]
	bool bDetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	ParticleSystemComponent* MuzzlePSC;//[Offset: 0x798, Size: 0x8]
	ParticleSystemComponent*[] GatlingOverHeatPSCs;//[Offset: 0x7a0, Size: 0x10]
	int RandomSkillIndex;//[Offset: 0x7b0, Size: 0x4]
	SolarEnergyShield*[] IgnoreEnergyShieldArray;//[Offset: 0x8f8, Size: 0x10]
	bool bEnterReloadState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90a, Size: 0x1]
	float WeaponSpreadValue;//[Offset: 0x90c, Size: 0x4]
	bool bDisplayPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	bool VerifyLastClipAmmo(int InFireModeType, int InLastClipAmmo);// 0x48603cc
	bool UseEnergy(int Mode);// 0x4863f58
	bool UseBagResource(int Mode);// 0x4864008
	bool TryHitOperation(out const FireUniqueID FireUniqueID, out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const float DamageScale, out const BulletHitDetailData HitDetailData, const bool IsNotDelay);// 0x4860670
	void StopSoundDelay(const float DelayTime);// 0x4862328
	void StopSound(enum Opt, int idx);// 0x48620e0
	void StopLastValidFire();// 0x48678d8
	void StartSound(enum Opt, int idx);// 0x48621c8
	void StartAsyncLoading();// 0x48615dc
	SolarProjBullet* SpawnProjWithFireID(out const SpawnBulletParam Param, out const FireUniqueID FireID, bool Local);// 0x4861078
	bool SkillCost();// 0x4866e48
	void ShowSpecialEffect(bool bShow);// 0x4862f24
	void SetWeaponSkill(const int InWeaponID, out SingleWeaponConfig* InWeaponConfig);// 0x485fcf8
	void SetWeaponAnimState(enum InWeaponAnimState);// 0x4861538
	void SetPrimaryShootingOption(enum Opt);// 0x4864a6c
	void SetLastFireTime(int InFireModeType, float InFireTime);// 0x4863af0
	void SetHolder(Actor* holder);// 0x4865484
	void ServerWeaponSound(enum Opt, bool TriggerSound);// 0x48623e0
	void ServerVirtualBulletShotHit(const SolarVirtualBulletHitParameter[] AllHitParams);// 0x4866254
	void ServerVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, bool bMuzzleBlocked);// 0x4866488
	void ServerUpdateGatlingRepState(int InState);// 0x486578c
	void ServerSpawnProjWithVelocity(const SpawnProjParam Param);// 0x4867024
	void ServerSpawnProjWithFireID(const SpawnBulletParam Param, const FireUniqueID FireID);// 0x4861218
	void ServerSkillCost();// 0x4866e2c
	void ServerSetWeaponSpreadValue(float InSpreadValue);// 0x485fae8
	void ServerSetTarget(Actor* Target);// 0x4866e94
	void ServerSetPrimaryOption(const enum Opt);// 0x486730c
	void ServerSetImpactInfo(const Vector Postion, const float Scale);// 0x48673c0
	void ServerSetHipFire(const bool InbHipFire);// 0x4865258
	void ServerSetDisplayPreview(bool InbDisplay);// 0x485fa34
	void ServerResetFireCount();// 0x48660b0
	void ServerRequestSummonItem(const int fireModeType, const bool InIsQuickSummon, const SolarSummonData InSummonData);// 0x4861cb0
	void ServerRequestDropWeapon();// 0x4861c94
	void ServerRecieveHitDataFromClient(const BulletHitData HitData, const bool IsNotDelay);// 0x4861348
	void ServerPostReloadState(bool InbEnterReload);// 0x485fb94
	void ServerModeState(int Mode);// 0x4866f78
	void ServerInstantLineShot(const int ModeIndex, const Vector Start, const Vector End, const float DamageScale, const MutiBulletHitData HitData, bool bMuzzleBlocked);// 0x4866be0
	void ServerHit(const HitResult Impact, int Mode, FString AntiData, bool TriggerAnim, float Scale);// 0x486711c
	void ServerFireChargeShoot(const AmmoConfig* InAmmo, int InFireChargingPhase, int InFireChargingTime);// 0x4865cd8
	void ServerFireChargePhaseChange(int InFireChargingPhase);// 0x4865e08
	void ServerFire_JustAbilitiesAmmo(const int idx);// 0x48605c4
	void ServerChangeWeaponChargePhase(const enum InChargeState);// 0x4862a9c
	void ServerChangeOverloadState(enum InState);// 0x4865f58
	void ServerCanisterShot(const int ModeIndex, const Vector Start, const Vector End, float RandomA, float RandomB, const MutiBulletHitData HitData, bool bMuzzleBlocked);// 0x486678c
	void ServerAddOrRemoveGameplayTagsToCharacter(bool bInAddTag, const GameplayTagContainer InTags);// 0x48659f8
	void RuntimeUpdateData(int Cmd, FString Params);// 0x48624d8
	void ResetRecoilComponent();// 0x4863688
	AmmoConfig* ReLoadAmmoData(const AmmoConfig* BaseConfig, int AmmoID);// 0x48674ac
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x4c8f29c
	void ReceiveChargingState(const int Index, const enum State);// 0x486569c
	void PrimaryCost();// 0x4866e80
	void PlayBulletHitEffect(out const HitResult HitResult, SolarBullet* Bullet, bool bForce, Pawn* HitCauser);// 0x48628f0
	void PlayAutoSingleSound();// 0x48620cc
	void OverrideFireMode(int InFireModeType, const AmmoConfig* InNewAmmoConfig);// 0x4865530
	void OnShow(const bool Toggle);// 0x4865374
	void OnRep_WeaponChargePhase();// 0x4862b48
	void OnRep_SoundFireSkillCast();// 0x48622ec
	void OnRep_SoundFireSingle();// 0x48622d8
	void OnRep_SoundFireOverload();// 0x48622c4
	void OnRep_SoundFireLast();// 0x48622b0
	void OnRep_SoundFireBurst();// 0x4862300
	void OnRep_SoundFireAutoCount();// 0x48623cc
	void OnRep_SoundB9A04Skill();// 0x4862314
	void OnRep_OverloadStateChange(enum PreviousState);// 0x4865eb4
	void OnRep_ImpactPosition();// 0x4866240
	void OnRep_FireModes();// 0x4865674
	void OnRep_FireChargingPhase(int InOldFireChargingPhase);// 0x4865b04
	void OnRep_ExtraAmmo();// 0x4865158
	void OnRep_EnterReloadState();// 0x485fa20
	void OnRep_DisplayPreview();// 0x485fa0c
	void OnRep_CurrentMode();// 0x4865688
	void OnRep_ControllWeaponCharacterChanged();// 0x4865660
	void OnRep_bInitFinishChanged();// 0x4861aa0
	void OnPlayMuzzleEffect(int ModeIdx, bool bMuzzleBlocked);// 0x48631c0
	void OnOverrideWeaponConfigByTable(int PrimaryAmmoSoundID, int SecondaryAmmoSoundID);// 0x486759c
	void OnLoadInitAssetComplete();// 0x48618c8
	void OnLoadCfgAssetsComplete();// 0x486179c
	void OnInternalUnControlled();// 0x486516c
	void OnInternalControlled(SolarCharacterBase* OwnerChar);// 0x4865188
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x4c8f29c
	void OnInitFlowComplete(SolarWeaponState* Last);// 0x48619f4
	void OnGatlingRollChange(bool bIncrease);// 0x4c8f29c
	void OnFireChargeBurstCountChange(int BurstSum);// 0x4866004
	void OnBeamFinished(ParticleSystemComponent* PS);// 0x486619c
	enum NextShootingPrimaryOption();// 0x4867798
	void LuaStopSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x4861e5c
	void LuaStartSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x4861f94
	void LoadInitAsset();// 0x4861750
	void LoadAllCfgAssets();// 0x48616c4
	AmmoConfig* K2_GetOverrideAmmoConfigBase(int ModeIndex);// 0x48637a8
	bool IsVisiable();// 0x4863334
	bool IsSummonWeapon();// 0x4863c84
	bool IsShowCoolDownWidget();// 0x4863d68
	bool IsShotAimEnemy();// 0x485fe3c
	bool IsShootingOptionSupport(int idx);// 0x4864988
	bool IsScopeOpen();// 0x48632b4
	bool IsOpenedScope();// 0x4865428
	bool IsMultipleShootingPrimaryShooting();// 0x4864858
	bool IsHipFire();// 0x4864b10
	bool IsFireStreakBreak(int InFireModeType);// 0x4863a40
	bool IsEnergyID(const int BulletItemID);// 0x4863ea8
	bool IsControlled();// 0x4865234
	bool IsCanFire();// 0x4860394
	ParticleSystemComponent* InternalPlayEffectAttached(ParticleSystem* PS, SceneComponent* AttachToComponent, FName AttachPointName, AttachedEffectParam Param);// 0x4862d70
	ParticleSystemComponent* InternalPlayEffectAtLocation(const Object* WorldContext, ParticleSystem* PS, out const Vector Location, LocationEffectParam Param, bool bUseDistScale);// 0x4862b5c
	void InternalClientPlayFiringEffects(const int ModeIdx, bool bMuzzleBlocked);// 0x4862fd8
	bool InSameTeam();// 0x4861de8
	void InitSkin();// 0x4861630
	void InitLevel();// 0x486168c
	void InitConfigs();// 0x4861718
	bool ImmediatelyFire(int idx, const bool bEnable);// 0x48677cc
	bool HasLoadInitAsset();// 0x4861734
	bool HasLoadAllCfgAssets();// 0x48616a8
	bool HasInitSkin();// 0x48615f0
	bool HasInitLevel();// 0x486164c
	bool HasInitFinish();// 0x4861764
	bool HasInitConfigs();// 0x48616d8
	void HandFireModeInput(byte WeaponFireModeType, bool Press);// 0x48678ec
	enum GetWeaponType();// 0x4860270
	FString GetWeaponTextType();// 0x48635a4
	uint32 GetWeaponNoticeID(out const FName InNoticeType);// 0x48602d8
	WeaponNetComponent* GetWeaponNetComp();// 0x486151c
	int GetWeaponLevel();// 0x4865448
	int GetWeaponID();// 0x48634ac
	Texture2D* GetWeaponIcon();// 0x4863654
	enum GetWeaponBrand();// 0x48602a4
	SlateBrush GetTriggerIcon(const int InFireModeType);// 0x48600f0
	WeaponSpreadComponent* GetSpreadComponent();// 0x48636d0
	int GetSpareAmmo(int InFireModeType);// 0x4864b48
	float GetSoundRTPCValue();// 0x4861e28
	int GetSkinID();// 0x48614a4
	float GetShotGunSpreadSeed();// 0x4864e34
	Vector GetShotDir(bool NeedSpread);// 0x4865098
	Vector GetShootingTraceStartLocation(int FireModeIdx);// 0x48640b8
	FString GetShootingPrimaryShootingOptionName(const enum Opt);// 0x4864890
	float GetSecondModeValue();// 0x4863d8c
	int GetReservedAmmo(int idx);// 0x4864778
	float GetReloadPreogress();// 0x4863538
	WeaponRecoilComponent* GetRecoilComponent();// 0x486369c
	int GetPrimaryShootingOptionIndex();// 0x4864a38
	WeaponPartsComponent* GetPartsComponent();// 0x48600b4
	float GetOverloadPercent();// 0x4864690
	float GetOverloadMaxValue();// 0x4863854
	SolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();// 0x486562c
	float GetNpcDamageFactor();// 0x4865340
	int GetMaxAmmo(int idx);// 0x48646c4
	float GetLastFireTime(int InFireModeType);// 0x4863bd8
	bool GetIsVehicleMounted();// 0x4863374
	bool GetIsSupportSecondaryFire();// 0x486356c
	bool GetIsSupportAutoFire();// 0x4863500
	bool GetIsSupportAssistAim();// 0x48634c8
	bool GetIsReloading();// 0x48645ec
	bool GetIsQuickScope();// 0x48632f4
	bool GetIsOverloading();// 0x4864624
	bool GetIsIntialized();// 0x4863490
	bool GetIsIdle();// 0x48645b4
	bool GetIsGatlingRoll();// 0x48644d4
	bool GetIsFiring();// 0x486457c
	bool GetIsCoolDown(int Mode);// 0x4863df8
	bool GetIsBurst();// 0x4864544
	bool GetIsBolt();// 0x486450c
	float GetGunHandPoseAimOffset();// 0x485fdf4
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x4863774
	void GetFPPFireBlendParam(out float OutHorizontal, out float OutVertical);// 0x486393c
	int GetFireModeNameLocalizationID(int InFireModeType);// 0x485fe74
	float GetFireIntervalProgress(int idx);// 0x48642c8
	float GetFireInterval(int idx);// 0x4864374
	float GetFireCD(int idx);// 0x48633e4
	float GetExtraPointsPercent();// 0x4863ddc
	int GetExtraPoints();// 0x4863dc0
	ParticleSystem* GetDedicatedKillEffect();// 0x48614e0
	int GetCurScopeType();// 0x4863704
	enum GetCurrentShootingPrimaryOption();// 0x4864824
	SingleWeaponConfig* GetCurrentConfig();// 0x4863740
	int GetCurrentClipAmmo(int InFireModeType);// 0x4864bf4
	bool GetCurrentChargeModePercent(int InFireModeType, out int OutChargeMode, out float OutChargePercent);// 0x485ff20
	int GetCostPreAttack(int idx);// 0x4863890
	float GetCoolDownPercent();// 0x486465c
	SolarCharacterBase* GetControlWeaponCharacter();// 0x4860080
	float GetChargingPercent(int idx);// 0x4864428
	float GetBurstInterval(int idx);// 0x486421c
	float GetBurstInternalInterval(int idx);// 0x4864170
	void GetBulletHitEffectRot(out const HitResult HitResult, const SolarBullet* Bullet, out Rotator TargetPos, const bool bIsHittedShield);// 0x4862738
	void GetBulletHitEffectPos(out const HitResult HitResult, out Vector TargetRot, float Offset);// 0x48625cc
	SolarBullet* GetBulletDefaultObject(const int idx, const AmmoConfig* AmmoCfg);// 0x4861ab4
	class SolarBullet GetBulletClass(const int idx, const AmmoConfig* AmmoCfg);// 0x4861ba4
	float GetBotAIDamageFactor();// 0x486530c
	enum GetAmmoTriggerType(const int fireModeType);// 0x4863cbc
	int GetAmmoItemID(int idx);// 0x4864d88
	bool GetAllInitAssetPath(out SoftObjectPath[] PathArray);// 0x48618e4
	bool GetAllCfgAssetsPath(out SoftObjectPath[] PathArray);// 0x48617b8
	bool FireVerify_Location(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x4860be4
	bool FireVerify_EffectRange(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x4860e24
	bool FireVerify_Block(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x48609a4
	bool FireValidate(out const int idx, float InLastShootTime);// 0x48604bc
	void ExitBoltState();// 0x48678c4
	void EnterOverloadState();// 0x4c8f29c
	void DestroyWeaponProjectileSpline();// 0x4865618
	void ClientVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, bool bMuzzleBlocked);// 0x4866348
	void ClientSkillRelease(bool InbSuccess, uint32 InResultID);// 0x4867680
	void ClientPlayHitEffect(const MultiHitResult InMultiHitResult);// 0x48660cc
	void ClientPlayFiringEffects(const int ModeIdx, bool bMuzzleBlocked);// 0x48630cc
	void ClientInstantLineShot(const int ModeIndex, const HitResult[] HitResults, const Vector End, const float DamageScale, bool bMuzzleBlocked);// 0x4866a18
	void ClientFireChargeShoot(const AmmoConfig* InAmmo, int InFireChargingPhase, int InFireChargingTime);// 0x4865ba8
	void ClientCanisterShot(const int ModeIndex, const Vector Start, const HitResult[] ValidHits, bool bMuzzleBlocked, const Vector Target);// 0x48665c8
	void ClearFireHitVerify();// 0x4861064
	bool CheckOpenParticleOptimization(int Bias);// 0x485fc48
	bool CanOverload();// 0x486777c
	bool CanCauseTeamDamage();// 0x48633ac
	float CalcScale(out const FireMode Mode);// 0x4864e70
	int CalcCost(out const FireMode Mode);// 0x4864f84
	void AsyncCheckShotAimHitResult();// 0x485fe28
	void AddOrRemoveGameplayTagsToCharacter(bool InbAdd, out const GameplayTagContainer InTags);// 0x48658e4
	void AddOrRemoveBlockChracterSprintTag(bool InbAdd);// 0x4865838
	void AddExtraPoints(const enum InHitType, const int InDamage);// 0x4864ca0

--------------------------------
Class: FireUniqueID
	int Data;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BulletHitDetailData
	Actor* HitActor;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x8, Size: 0x8]
	Vector HitActorLocation;//[Offset: 0x10, Size: 0xc]
	Vector HitLocation;//[Offset: 0x1c, Size: 0xc]
	Vector HitNormal;//[Offset: 0x28, Size: 0xc]
	FName HitBone;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: SpawnBulletParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	int Mode;//[Offset: 0x1c, Size: 0x4]
	bool TriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float Scale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	FString AntiData;//[Offset: 0x30, Size: 0x10]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SolarProjBullet.SolarBullet.Actor.Object
	Vector SpawnedLocation;//[Offset: 0x358, Size: 0xc]
	float EffRange;//[Offset: 0x364, Size: 0x4]
	float MaxRange;//[Offset: 0x368, Size: 0x4]
	int RocketNum;//[Offset: 0x36c, Size: 0x4]
	Vector SecondVelocity;//[Offset: 0x370, Size: 0xc]
	Vector FirstBulletSpeed;//[Offset: 0x384, Size: 0xc]
	bool bNoRTImpactEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	HitResult RocketHitResult;//[Offset: 0x3a4, Size: 0x88]
	AmmoConfig* AmmoConfig;//[Offset: 0x430, Size: 0x8]
	bool bScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool bHiddenWhenExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	SolarPlayerController* BulletOwnerController;//[Offset: 0x440, Size: 0x8]
	int ModeIdx;//[Offset: 0x44c, Size: 0x4]
	ShapeComponent* CollisionComp;//[Offset: 0x450, Size: 0x8]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x458, Size: 0x8]
	SolarSplineMovementComponent* SplineMovementComp;//[Offset: 0x460, Size: 0x8]
	float GravityScaleRate;//[Offset: 0x468, Size: 0x4]
	CurveFloat* BounceCurve;//[Offset: 0x470, Size: 0x8]
	bool bHitSpecificActorsExplodeWithBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bForcePenetrateEnergyShiled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	Vector InitialVelocity;//[Offset: 0x47c, Size: 0xc]
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bTriggerEffRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	bool bTriggerMaxRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 0x1]
	bool bWaitToBeDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48b, Size: 0x1]
	bool bDontAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x490, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x4a0, Size: 0x8]
	ParticleSystemComponent* ParticleComp;//[Offset: 0x4b0, Size: 0x8]
	ParticleSystemComponent* TrajPSC;//[Offset: 0x4b8, Size: 0x8]
	int PoolLimit;//[Offset: 0x4d0, Size: 0x4]
	bool bVerifyFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	bool bSpecialVerifyFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x662, Size: 0x1]
	FireUniqueID FireUniqueID;//[Offset: 0x664, Size: 0x4]
	bool bBulletActiveAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	void StopSound(enum Opt);// 0x475adb4
	void StartSound(enum Opt);// 0x475ae58
	void SpawnSoundPlayerAndPlayFlySound();// 0x475ada0
	void SetLocationByEnergyShield();// 0x475b370
	void OnStop(out const HitResult HitResult);// 0x475b4a0
	void OnSplineMovementCompStop(out const HitResult HitResult, bool bBlocking);// 0x475b384
	void OnRep_RocketHitResult();// 0x475b570
	void OnRep_InitialVelocity();// 0x475b0e4
	void OnRep_bExploded();// 0x475b0f8
	void OnOutRange();// 0x4c8f29c
	void OnBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x475b254
	void OnAttachedActorDestroyed(Actor* Other);// 0x475acfc
	void OnActorDestroyed(Actor* DestroyedActor);// 0x475b1b0
	bool IsAllowPlayEffect();// 0x475afec
	void InitSplineMovementComp(SolarSplineMovementComponent* Comp);// 0x475b024
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x475aefc
	void ExplodeBegin();// 0x475b0c8
	void DelayDestroy(float DelayTime);// 0x475b10c
	SolarSplineMovementComponent* BlueprintGetSplineMovementComp();// 0x4c8f29c

--------------------------------
Class: SolarBullet.Actor.Object
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bShowHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	bool bShowHitWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1]
	ParticleSystem* BulletEffect;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* TrajectoryEffect;//[Offset: 0x240, Size: 0x8]
	ParticleSystem* TrajectoryEffectOther;//[Offset: 0x248, Size: 0x8]
	SoftObjectPath SimpleCanisterShotEffectPath;//[Offset: 0x250, Size: 0x18]
	ParticleSystem* TrajectoryBeamEffect;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* TrajectoryBeamEffectOther;//[Offset: 0x270, Size: 0x8]
	ParticleSystem* HitEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* MuzzleEffect;//[Offset: 0x280, Size: 0x8]
	ParticleSystem* MuzzleEffectScope;//[Offset: 0x288, Size: 0x8]
	ParticleSystem* MuzzleEffectOther;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffect;//[Offset: 0x298, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectScope;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectOther;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* SpecialEffect;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* DecalEffect;//[Offset: 0x2b8, Size: 0x8]
	ParticleSystem* DecalEffect2;//[Offset: 0x2c0, Size: 0x8]
	SoftObjectPath ShieldEffect;//[Offset: 0x2c8, Size: 0x18]
	<byte,SoftObjectPath> PhysicsHitEffects;//[Offset: 0x2e0, Size: 0x50]
	float DecalLifeSpan;//[Offset: 0x330, Size: 0x4]
	ParticleSystem* ShellCaseEffect;//[Offset: 0x338, Size: 0x8]
	ParticleSystem* ShellCaseEffectOnScope;//[Offset: 0x340, Size: 0x8]
	float ProjectTileSummonDistance;//[Offset: 0x348, Size: 0x4]
	bool CanExplodeWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	byte BulletCollisionType;//[Offset: 0x34d, Size: 0x1]
	SoftObjectPath GetHitPhysicEffectPath(out const byte HitSurface);// 0x4621aa4

--------------------------------
Class: AmmoConfig.DataAsset.Object
	enum HoldAction;//[Offset: 0x30, Size: 0x1]
	FireChargeData[] FireChargeDatas;//[Offset: 0x38, Size: 0x10]
	FString FireChargeStopSoundName;//[Offset: 0x48, Size: 0x10]
	float ChargingToleranceEndTime;//[Offset: 0x58, Size: 0x4]
	float ChargingWorkingEndTime;//[Offset: 0x5c, Size: 0x4]
	float ChargingHoldingEndTime;//[Offset: 0x60, Size: 0x4]
	float ChargingTrajectoryTime;//[Offset: 0x64, Size: 0x4]
	bool bCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x6c, Size: 0x4]
	bool bForceFullShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxChargingDamageScale;//[Offset: 0x74, Size: 0x4]
	bool bIsTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	TracerBulletData TracerData;//[Offset: 0x7c, Size: 0xc]
	float DeltaAngle;//[Offset: 0x88, Size: 0x4]
	FString Name;//[Offset: 0x90, Size: 0x10]
	FString Des;//[Offset: 0xa0, Size: 0x10]
	int PropID;//[Offset: 0xb0, Size: 0x4]
	float Lifetime;//[Offset: 0xb4, Size: 0x4]
	enum FireMethodType;//[Offset: 0xb8, Size: 0x1]
	enum TrajectoryType;//[Offset: 0xb9, Size: 0x1]
	float CustomValue;//[Offset: 0xbc, Size: 0x4]
	class SolarBullet* BulletClass;//[Offset: 0xc0, Size: 0x8]
	enum BulletBounce;//[Offset: 0xc8, Size: 0x1]
	int BounceTimes;//[Offset: 0xcc, Size: 0x4]
	enum TriggerType;//[Offset: 0xd0, Size: 0x1]
	float MaxRange;//[Offset: 0xd4, Size: 0x4]
	float EffRange;//[Offset: 0xd8, Size: 0x4]
	float Radius;//[Offset: 0xdc, Size: 0x4]
	float InitSpeed;//[Offset: 0xe0, Size: 0x4]
	enum FireCostType;//[Offset: 0xe4, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0xe8, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0xec, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0xf0, Size: 0x4]
	float FastestFireInterval;//[Offset: 0xf4, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0xf8, Size: 0x4]
	float BaseFireInterval;//[Offset: 0xfc, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x100, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x104, Size: 0x4]
	float BoltActionTime;//[Offset: 0x108, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x10c, Size: 0x4]
	float AutoFireBreakTime;//[Offset: 0x110, Size: 0x4]
	bool bUseBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float FireStreakBreakTime;//[Offset: 0x118, Size: 0x4]
	int FireIdx;//[Offset: 0x11c, Size: 0x4]
	bool bTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	float BaseReloadTime;//[Offset: 0x124, Size: 0x4]
	float PostFireOverload;//[Offset: 0x128, Size: 0x4]
	bool bPlayHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bPlayExplodeSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	int SingleSoundCount;//[Offset: 0x130, Size: 0x4]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x138, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x148, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x158, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x168, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x178, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x188, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x198, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1a8, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1b8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x1c8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1d8, Size: 0x10]
	CurveFloat* PostFireSpreadCurveStruct;//[Offset: 0x1e8, Size: 0x8]
	float ADSSpreadCOP;//[Offset: 0x1f0, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0x1f4, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0x1f8, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0x1fc, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0x200, Size: 0x4]
	AmmonVerticalRecoilStruct PitchRecoilStruct;//[Offset: 0x208, Size: 0x30]
	AmmonHorizontalRecoilStruct YawRecoilStruct;//[Offset: 0x238, Size: 0x30]
	AmmonRecoilRollStruct RollRecoilStruct;//[Offset: 0x268, Size: 0x40]
	AmmonRecoilScope ScopeRecoil;//[Offset: 0x2a8, Size: 0xb8]
	float ADSRecoilCOP;//[Offset: 0x360, Size: 0x4]
	<FString,float> RecoilCOPMap;//[Offset: 0x368, Size: 0x50]
	byte[] IgnoreEPhysicalSurface;//[Offset: 0x3b8, Size: 0x10]
	SoftObjectPath SummonConfigPath;//[Offset: 0x3c8, Size: 0x18]
	float BurstFireInterval;//[Offset: 0x3e0, Size: 0x4]
	float BurstFireInternalInterval;//[Offset: 0x3e4, Size: 0x4]
	float FireAnimationPlayRate;//[Offset: 0x3e8, Size: 0x4]
	int AmmoSoundType;//[Offset: 0x3ec, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x3f0, Size: 0x4]
	float ParticleStartDistance;//[Offset: 0x3f4, Size: 0x4]
	float TrajectoryStartDistance;//[Offset: 0x3f8, Size: 0x4]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	float PenetrationRadius;//[Offset: 0x400, Size: 0x4]
	CurveFloat* PenetrationDamageMultiplierCurve;//[Offset: 0x408, Size: 0x8]
	CurveFloat* CylinderDamageMultiplierCurve;//[Offset: 0x410, Size: 0x8]
	SlateBrush TriggerIcon;//[Offset: 0x418, Size: 0x98]
	CurveFloat* BulletDamageCurve;//[Offset: 0x4b0, Size: 0x8]
	CurveFloat* BulletScaleCurve;//[Offset: 0x4b8, Size: 0x8]
	CurveFloat* BulletSpeedCurve;//[Offset: 0x4c0, Size: 0x8]
	bool bForceApplyAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	class SolarAbility[] AmmoAbilityClasses;//[Offset: 0x4d0, Size: 0x10]
	class SolarAbility[] AmmoAbilityClassesOnDestroyed;//[Offset: 0x4e0, Size: 0x10]
	class SolarAbility* AmmoAbilityClassesOnSelf;//[Offset: 0x4f0, Size: 0x8]
	class GameplayAbility* GASAbilityClass;//[Offset: 0x4f8, Size: 0x8]
	int NameLocalTextIDNumber;//[Offset: 0x500, Size: 0x4]
	int DescriptionLocalTextIDNumber;//[Offset: 0x504, Size: 0x4]
	void InitVerticalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x451a044
	void InitSpreadData(float adscop, float firepre, float changespeed, float restorepre, float restorespeed);// 0x451a328
	void InitScopeRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x4519920
	void InitScopeAndCrossHairVibration(const float ScopeVMaxDistanceOffSet, const float ScopeVVibrationDuration, const float ScopeHMaxDistanceOffSet, const float ScopeHVibrationDuration, const float ScopeVContinuousFallingDuration, const float ScopeVContinuousFallingPointIndex, const float VMaxDistanceOffSetScale, const float VVibrationDurationScale, const float VSingleOffSetScale, const float VContinuousOffSetScale, const float HMaxDistanceOffSetScale, const float HVibrationDurationScale, const float HSingleOffSetScale, const float HContinuousOffSetScale, const float HOffSetProbabilityScale);// 0x45194c4
	void InitRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x4519b98
	void InitRecoilCOPMap(out const FString[] Keys, out const float[] Values);// 0x451a4d4
	void InitPostFireSpreadCurveStruct(FString Path);// 0x451a278
	void InitHorizontalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x4519e10
	void InitBaseData(int Trigger);// 0x451a624

--------------------------------
Class: FireChargeData
	bool IfContinuousCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ChargeTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ChargeDamageRadiusCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* ChargeDamageMagnificationCurve;//[Offset: 0x10, Size: 0x8]
	bool IfPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	AmmoConfig* OverrideAmmo;//[Offset: 0x20, Size: 0x8]
	int OverrideAmmoID;//[Offset: 0x28, Size: 0x4]
	FString ChargeSoundName;//[Offset: 0x30, Size: 0x10]
	FString ChargeSoundEnemyName;//[Offset: 0x40, Size: 0x10]
	FString FireSoundName;//[Offset: 0x50, Size: 0x10]
	FString FireSoundEnemyName;//[Offset: 0x60, Size: 0x10]
	bool IfBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* BulletBurstCountCurve;//[Offset: 0x78, Size: 0x8]
	bool IfCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x84, Size: 0x4]
	bool IfForceFullShotCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bNeedPlayCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	CurveFloat* AmmoSpeedScaleCurve;//[Offset: 0x90, Size: 0x8]
	CurveFloat* AmmoEffectScaleCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* OverloadCurve;//[Offset: 0xa0, Size: 0x8]
	float ChargeAnimationRate;//[Offset: 0xa8, Size: 0x4]
	CurveFloat* DeflectionAngleCurve;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: TracerBulletData
	float DeflectionAnglePerSec;//[Offset: 0x0, Size: 0x4]
	float MaximumDetectionAngle;//[Offset: 0x4, Size: 0x4]
	float HomingRange;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AmmonVerticalRecoilStruct.AmmonRecoilStruct
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AmmonRecoilStruct
	float CostTime;//[Offset: 0x0, Size: 0x4]
	CurveFloat* RecoilRangeCurve;//[Offset: 0x8, Size: 0x8]
	int APointCurveKeyIndex;//[Offset: 0x10, Size: 0x4]
	float APointMin;//[Offset: 0x14, Size: 0x4]
	float APointMax;//[Offset: 0x18, Size: 0x4]
	int BPointCurveKeyIndex;//[Offset: 0x1c, Size: 0x4]
	float BPointMin;//[Offset: 0x20, Size: 0x4]
	float BPointMax;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AmmonHorizontalRecoilStruct.AmmonRecoilStruct
	CurveVector* ContinuousFireInfoCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AmmonRecoilRollStruct.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	float ADSRollCOP;//[Offset: 0x30, Size: 0x4]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AmmonRecoilScope
	bool EnableScopeVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool EnableCrossHairVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool EnableScopeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x4, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x8, Size: 0x4]
	CurveFloat* ScopeVSingleOffSetCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ScopeVContinuousOffSetCurve;//[Offset: 0x18, Size: 0x8]
	float ScopeVContinuousFallingDuration;//[Offset: 0x20, Size: 0x4]
	CurveFloat* ScopeVContinuousFallingCurve;//[Offset: 0x28, Size: 0x8]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x30, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x34, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x38, Size: 0x4]
	CurveFloat* ScopeHSingleOffSetCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* ScopeHContinuousOffSetCurve;//[Offset: 0x48, Size: 0x8]
	CurveFloat* ScopeHOffSetProbabilityCurve;//[Offset: 0x50, Size: 0x8]
	AmmonRecoilCrossHair CrossHairScaleSettings;//[Offset: 0x58, Size: 0x24]
	AmmonRecoilScopeRoll ScopeRollSettings;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: AmmonRecoilCrossHair
	float VMaxDistanceOffSetScale;//[Offset: 0x0, Size: 0x4]
	float VVibrationDurationScale;//[Offset: 0x4, Size: 0x4]
	float VSingleOffSetScale;//[Offset: 0x8, Size: 0x4]
	float VContinuousOffSetScale;//[Offset: 0xc, Size: 0x4]
	float HMaxDistanceOffSetScale;//[Offset: 0x10, Size: 0x4]
	float HVibrationDurationScale;//[Offset: 0x14, Size: 0x4]
	float HSingleOffSetScale;//[Offset: 0x18, Size: 0x4]
	float HContinuousOffSetScale;//[Offset: 0x1c, Size: 0x4]
	float HOffSetProbabilityScale;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AmmonRecoilScopeRoll.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf8, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfc, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfd, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfd, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x100, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x110, Size: 0x4]
	float Buoyancy;//[Offset: 0x114, Size: 0x4]
	float Bounciness;//[Offset: 0x118, Size: 0x4]
	float Friction;//[Offset: 0x11c, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x124, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x128, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x138, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x158, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x160, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x164, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x168, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x16c, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x695b538
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x695b610
	void SetInterpolatedComponent(SceneComponent* Component);// 0x695b48c
	void ResetInterpolation();// 0x695b36c
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x4c8f29c
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x4c8f29c
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x695b388
	Vector LimitVelocity(Vector NewVelocity);// 0x695b290
	bool IsVelocityUnderSimulationThreshold();// 0x695b6bc
	bool IsInterpolationComplete();// 0x695b340

--------------------------------
Class: SolarSplineMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnSolarSplineMovementComponentStop;//[Offset: 0xf8, Size: 0x10]
	SplineComponent* SplineComponent;//[Offset: 0x108, Size: 0x8]
	float SplineDistance;//[Offset: 0x110, Size: 0x4]
	SolarProjBullet* SolarProjBullet;//[Offset: 0x114, Size: 0x8]
	Vector LastLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator VelocityRotator;//[Offset: 0x128, Size: 0xc]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x4b8, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x520, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x538, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x550, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x568, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x584, Size: 0x4]
	float Duration;//[Offset: 0x588, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58e, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58f, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x592, Size: 0x1]
	float LoopPosition;//[Offset: 0x594, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x598, Size: 0xc]
	void UpdateSpline();// 0x69a3f8c
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x69a2340
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x69a1e6c
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x69a3454
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x69a1fec
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x69a21c0
	void SetSplineWorldPoints(out const Vector[] Points);// 0x69a2684
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x69a1c8c
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x69a274c
	void SetSplineLocalPoints(out const Vector[] Points);// 0x69a25bc
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x69a33a4
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x69a243c
	void SetDrawDebug(bool bShow);// 0x69a32f8
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x69a0a64
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x69a30bc
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x69a31fc
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x69a2a08
	bool IsClosedLoop();// 0x69a3084
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x69a0410
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x699f594
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x69a0268
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x699fb54
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x69a1a7c
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x69a0760
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x699f914
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x69a05b8
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x69a0b88
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x69a3504
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x699f454
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a14c4
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x69a3ac8
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x69a0174
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x699f170
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x69a10e4
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x69a3888
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x699fd94
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x699f7d4
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a1894
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x69a3da4
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x69a04c4
	byte GetSplinePointType(int PointIndex);// 0x69a1dc0
	float GetSplineLength();// 0x69a0b54
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x699ef38
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x69a1230
	Vector GetScaleAtSplineInputKey(float InKey);// 0x69a36e8
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x699fee0
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x699f694
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a15b8
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x69a3bbc
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x69a031c
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x699f034
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a12e0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x69a3798
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x699ff90
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x699f314
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a13d0
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x69a39d4
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x69a0080
	int GetNumberOfSplineSegments();// 0x69a1c24
	int GetNumberOfSplinePoints();// 0x69a1c58
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x699fc54
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a1b30
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x69a3e98
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x69a0814
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x69a0f5c
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x69a0e18
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a16ac
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x69a0908
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x69a0c7c
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x69a35f8
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x69a0d6c
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x699fa14
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a1988
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x69a3cb0
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x69a066c
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x69a09b4
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x69a17a0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x699e96c
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x699e550
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x699eb74
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x699e6ac
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x699ea70
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x699e768
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x699e868
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x699ed7c
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x699ee80
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x699ec78
	void ClearSplinePoints(bool bUpdateSpline);// 0x69a2fd8
	void AddSplineWorldPoint(out const Vector Position);// 0x69a2950
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x69a2af4
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x69a2c74
	void AddSplineLocalPoint(out const Vector Position);// 0x69a2898
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x69a2db0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x69a2eb8

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SolarWeaponFireStateMachine.SolarWeaponStateMachine.Object
	bool bTryGotoOverloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bTryGotoIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	bool bTryGotoBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool bTryGotoFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	bool bTryGotoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]
	bool bTryGotoBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 0x1]
	bool bTryGotoGatlingRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool ToReload(SolarWeaponState* CurState);// 0x487b174
	bool ToOverloading(SolarWeaponState* CurState);// 0x487b454
	bool ToIdle(SolarWeaponState* CurState);// 0x487b39c
	bool ToGatlingRoll(SolarWeaponState* CurState);// 0x487b004
	bool ToFiring(SolarWeaponState* CurState);// 0x487b22c
	bool ToBurst(SolarWeaponState* CurState);// 0x487b2e4
	bool ToBolt(SolarWeaponState* CurState);// 0x487b0bc

--------------------------------
Class: SolarWeaponStateMachine.Object
	SolarWeaponState* CurrentState;//[Offset: 0x60, Size: 0x8]
	class SolarWeaponState* StartStateSubClass;//[Offset: 0x68, Size: 0x8]
	class SolarWeaponState* CurStateSubClass;//[Offset: 0x70, Size: 0x8]
	WeaponStateFlowItem[] FlowData;//[Offset: 0x78, Size: 0x10]
	<class SolarWeaponState,SolarWeaponState*> StateMap;//[Offset: 0x88, Size: 0x50]
	WeaponStateMapItem[] StateFlowMap;//[Offset: 0xd8, Size: 0x10]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	void Update(float DeltaTime);// 0x4888694
	void Start();// 0x4888740
	void Resume();// 0x48884b0
	void Reset(bool bAutoStart);// 0x48885c4
	void Pause();// 0x48884c4
	void LogStartMsg(SolarWeaponState* State);// 0x48880f8
	void LogEndMsg(SolarWeaponState* Last);// 0x4887f70
	void LogChangeMsg(SolarWeaponState* From, SolarWeaponState* To);// 0x4888014
	bool IsRunning();// 0x48884d8
	bool IsPause();// 0x4888494
	void GotoState(out const class SolarWeaponState InWeaponState);// 0x48883e0
	void GotoNext();// 0x4888678
	SolarWeaponState* GetStateInstance(out const class SolarWeaponState StateSubClass);// 0x4888264
	bool GetNextState(out class SolarWeaponState Next);// 0x4888320
	bool CheckCurStateToNextState(out const WeaponStateFlowItem StateFlowItem);// 0x4888500
	bool CheckConditionNative(out const FName ConditionFunc);// 0x488819c

--------------------------------
Class: SolarWeaponState.Object
	SolarWeaponState* NextState;//[Offset: 0x28, Size: 0x8]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SolarWeaponStateMachine* OwnerStateMachine;//[Offset: 0x38, Size: 0x8]
	void UpdateState(float DeltaTime);// 0x4886f50
	bool IsRunning();// 0x48870a8
	void GotoNext();// 0x4886e88
	void EnterState(SolarWeaponState* InPrevState);// 0x4886ffc
	void EndState(SolarWeaponState* InNextState);// 0x4886ea4

--------------------------------
Class: WeaponStateFlowItem
	class SolarWeaponState* Current;//[Offset: 0x0, Size: 0x8]
	class SolarWeaponState* Next;//[Offset: 0x8, Size: 0x8]
	byte Weight;//[Offset: 0x10, Size: 0x1]
	bool bBpFuncCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	FName ConditonFunc;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: WeaponStateMapItem
	class SolarWeaponState* Current;//[Offset: 0x0, Size: 0x8]
	WeaponStateFlowItem[] NextList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarWeaponSkillStateMachine.SolarWeaponStateMachine.Object
	bool IsTriggerSkillSuccessed(SolarWeaponState* CurState);// 0x48834b8
	bool IsTriggerSkillFailed(SolarWeaponState* CurState);// 0x4883400

--------------------------------
Class: ImpactDisplayInfo
	Vector Pos;//[Offset: 0x0, Size: 0xc]
	float Scale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WeaponDebugFlag
	bool bIgnoreOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStateMachineDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShotGunDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bInstantShotDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bDisplayShootDirectionDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bRecoilDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: SolarVirtualBulletCollector.ActorComponent.Object
	SolarWeapon* CacheWeapon;//[Offset: 0xb8, Size: 0x8]
	World* CacheWorld;//[Offset: 0xc0, Size: 0x8]
	SolarVirtualBullet[] Bullets;//[Offset: 0xc8, Size: 0x10]
	SolarVirtualBullet[] BulletsInSimulated;//[Offset: 0xd8, Size: 0x10]
	SolarBullet* EffectBulletCDO;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: SolarVirtualBullet
	ParticleSystemComponent* BulletEffect;//[Offset: 0x8, Size: 0x8]
	ParticleSystemComponent* TrajectoryEffect;//[Offset: 0x10, Size: 0x8]
	ParticleSystemComponent* TrajectoryBeamEffect;//[Offset: 0x18, Size: 0x8]
	SolarVirtualBulletAKComponent* AkComponent;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SolarVirtualBulletAKComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponSkinData.DataAsset.Object
	enum WeaponSkinType;//[Offset: 0x30, Size: 0x1]
	WeaponBodyData WeaponData;//[Offset: 0x38, Size: 0xf0]
	WeaponSkinPartData[] WeaponBarMap;//[Offset: 0x128, Size: 0x10]
	WeaponSkinPartData[] WeaponClipMap;//[Offset: 0x138, Size: 0x10]
	WeaponSkinPartData[] WeaponGripMap;//[Offset: 0x148, Size: 0x10]
	bool bUseGripIkSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	WeaponSkinPartData[] WeaponScopeMap;//[Offset: 0x160, Size: 0x10]
	<int,Transform> ScopeOffsetMap;//[Offset: 0x170, Size: 0x50]
	WeaponSkinPartData[] WeaponStockMap;//[Offset: 0x1c0, Size: 0x10]
	class SolarBullet* DedicatedBulletEffect;//[Offset: 0x1d0, Size: 0x8]
	class SolarBullet* DedicatedSkillEffect;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath DedicatedBulletEffectPath;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath DedicatedSkillEffectPath;//[Offset: 0x1f8, Size: 0x18]
	ParticleSystem* DedicatedKillEffect;//[Offset: 0x210, Size: 0x8]
	SoftObjectPath DedicatedKillEffectPath;//[Offset: 0x218, Size: 0x18]
	SoftObjectPath DedicatedSpecialEffectPath;//[Offset: 0x230, Size: 0x18]
	void ModifyResPath();// 0x48c41e8
	bool IsMeshReplace();// 0x48c430c
	bool GetPartDataArrayByType(enum PartType, out WeaponSkinPartData[] PartDataMap);// 0x48c41fc

--------------------------------
Class: WeaponBodyData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	FString WeaponDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath WeaponMesh;//[Offset: 0x18, Size: 0x18]
	class WeaponAnimInstance* WeaponAnimBP;//[Offset: 0x30, Size: 0x8]
	<enum,SoftObjectPath> OverrideCharacterMontagePathMap;//[Offset: 0x38, Size: 0x50]
	SoftObjectPath LodpMesh;//[Offset: 0x88, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0xa0, Size: 0x10]
	Vector MeshExtraFPPLocation;//[Offset: 0xb0, Size: 0xc]
	Vector NoMeshExtraFPPLocation;//[Offset: 0xbc, Size: 0xc]
	Rotator MeshExtraFPPRotation;//[Offset: 0xc8, Size: 0xc]
	Rotator NoMeshExtraFPPRotation;//[Offset: 0xd4, Size: 0xc]
	WeaponSkinExtraPS[] SkinPSArray;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: WeaponAnimInstance.AnimInstance.Object
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool bBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	AnimMsgData[] MsgArray;//[Offset: 0x270, Size: 0x10]
	AnimMsgData CurrentMsg;//[Offset: 0x280, Size: 0x8]
	bool bCurrentMsgUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	AnimSequence* IdleAnim;//[Offset: 0x290, Size: 0x8]
	AnimSequence* FireAnim;//[Offset: 0x298, Size: 0x8]
	AnimSequence* AltFireAnim;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* ReloadAnim;//[Offset: 0x2a8, Size: 0x8]
	AnimSequence* OverloadAnim;//[Offset: 0x2b0, Size: 0x8]
	AnimSequence* OpenScopeAnim;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* CloseScopeAnim;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* BoltAnim;//[Offset: 0x2c8, Size: 0x8]
	bool SwitchStateCheck(enum CheckState);// 0x48c27ec
	void SetInterruptIsTrue();// 0x48c24e0
	bool RouterNodeJudge();// 0x48c2744
	void OnQuitState(enum State);// 0x48c2508
	void OnEnterState(enum State);// 0x48c25ac
	void Interrupt();// 0x48c24f4
	bool HasMsg();// 0x48c277c
	bool ConsumMsg();// 0x48c27b4
	bool AddMsg(enum State, float Speed);// 0x48c2650

--------------------------------
Class: AnimMsgData
	enum State;//[Offset: 0x0, Size: 0x1]
	float Speed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponSkinExtraPS
	bool bStimulatedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName Socket;//[Offset: 0x4, Size: 0x8]
	ParticleSystem* PS;//[Offset: 0x10, Size: 0x8]
	SoftObjectPath PSPath;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: WeaponSkinPartData
	int WeaponPartId;//[Offset: 0x0, Size: 0x4]
	FString WeaponPartDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath PartDataAsset;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WeaponAnimationComponent.ActorComponent.Object
	WeaponAnimInstance* WeaponAnimInstance;//[Offset: 0xb8, Size: 0x8]
	SolarWeapon* MyWeapon;//[Offset: 0xc0, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0xc8, Size: 0x8]
	<enum,AnimSequence*> AnimSequenceMap;//[Offset: 0xd0, Size: 0x50]
	void SRecieveProto_SwitchStateAction(FString paramters);// 0x48bf66c
	void SetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x48bf81c
	void PostWeaponAnimStateToSimulation(enum InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);// 0x48bf538
	void InternalSetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x48bf450
	void InitSkeletaMesh(SkeletalMeshComponent* Mesh);// 0x48bf904
	void GotoState(enum State, float Interval);// 0x48bf9b0
	void CRecieveProto_SwitchStateAction(bool bAutonomous, FString paramters);// 0x48bf71c

--------------------------------
Class: WeaponNetComponent.BaseWeaponComponent.ActorComponent.Object
	WeaponSkinNetData SkinData;//[Offset: 0x238, Size: 0x4]
	WeaponUpgradeNetData UpgradeData;//[Offset: 0x240, Size: 0x20]
	WeaponPartsNetData PartsData;//[Offset: 0x260, Size: 0x58]
	bool bSkinModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	bool bUpgradeModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	bool bPartsModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1]
	WeaponLevelUpInfo LevelData;//[Offset: 0x2bc, Size: 0x8]
	int PartsInitCount;//[Offset: 0x2c4, Size: 0x4]
	void OnRep_UpgradeData();// 0x48c4960
	void OnRep_SkinData();// 0x48c4974
	void OnRep_PartsInitCount();// 0x48c4924
	void OnRep_PartsData();// 0x48c494c
	void OnRep_Level();// 0x48c4938

--------------------------------
Class: BaseWeaponComponent.ActorComponent.Object
	Guid SpawnedGuid;//[Offset: 0xf8, Size: 0x10]
	ProtoBody[] ServerToClientReqArray;//[Offset: 0x208, Size: 0x10]
	uint32 ServerToClientReqArrayMinSize;//[Offset: 0x218, Size: 0x4]
	int TempProto;//[Offset: 0x21c, Size: 0x4]
	FString[] ParamsArray;//[Offset: 0x220, Size: 0x10]
	bool bLastFrameClientLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	void TryRecordClientID();// 0x452750c
	void StartSendServerProto(byte proto);// 0x4527864
	void StartSendClientProto(byte proto);// 0x45277ac
	void SendServerProto(byte proto, FString Param);// 0x4527a8c
	void SendClientProto(byte Type, byte proto, FString Parameter, bool bVerify);// 0x4527908
	FString ParseArrayParamsToString();// 0x4527440
	void OnClientRoleChanged(bool LocalPlayer);// 0x4527520
	void OnClientIDHasRegisted();// 0x45274f0
	void EndSendServerProto();// 0x4527850
	void EndSendClientProto(byte Type, bool bVerify);// 0x45276bc
	void BindServerEvents();// 0x45275f0
	void BindClientEvents();// 0x45275d4
	void AppendProtoParam(FString strValue);// 0x452760c

--------------------------------
Class: ProtoBody
	byte ProtoID;//[Offset: 0x0, Size: 0x1]
	uint32 ReplicationIndex;//[Offset: 0x4, Size: 0x4]
	FString Params;//[Offset: 0x8, Size: 0x10]
	bool bVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	byte ClientType;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: WeaponSkinNetData
	int SkinId;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeaponUpgradeNetData
	float TotalScore;//[Offset: 0x0, Size: 0x4]
	float LevelScore;//[Offset: 0x4, Size: 0x4]
	UpgradeSlotStruct[] UpgradeSlots;//[Offset: 0x8, Size: 0x10]
	int UpgradeCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: UpgradeSlotStruct
	int SlotID;//[Offset: 0x0, Size: 0x4]
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AccessoryType;//[Offset: 0x5, Size: 0x1]
	int AccessoryID;//[Offset: 0x8, Size: 0x4]
	SlateBrush IconOverride;//[Offset: 0x10, Size: 0x98]
	LinearColor IconColorOverride;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: WeaponPartsNetData
	WeaponPartsData Data;//[Offset: 0x0, Size: 0x28]
	float[] EffectDataHipValues;//[Offset: 0x28, Size: 0x10]
	float[] EffectDataShoulderValues;//[Offset: 0x38, Size: 0x10]
	int ChangedPartType;//[Offset: 0x48, Size: 0x4]
	int ChangedPartID;//[Offset: 0x4c, Size: 0x4]
	int OriginalPartID;//[Offset: 0x50, Size: 0x4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: WeaponPartsData
	int ScopeID;//[Offset: 0x0, Size: 0x4]
	int GripID;//[Offset: 0x4, Size: 0x4]
	int GunStockID;//[Offset: 0x8, Size: 0x4]
	int MuzzleID;//[Offset: 0xc, Size: 0x4]
	int ClipID;//[Offset: 0x10, Size: 0x4]
	int[] Runes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WeaponLevelUpInfo
	int Level;//[Offset: 0x0, Size: 0x4]
	int LastLevel;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponUpgradeComponent.ActorComponent.Object
	bool bUpgradeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	float UpgradeCD;//[Offset: 0xec, Size: 0x4]
	float LastUpgradeRealtime;//[Offset: 0xf0, Size: 0x4]
	SolarWeapon* MyWeapon;//[Offset: 0xf8, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x100, Size: 0x8]
	int CurrentLevel;//[Offset: 0x108, Size: 0x4]
	int LastLevel;//[Offset: 0x10c, Size: 0x4]
	int LastUnlockSlotID;//[Offset: 0x110, Size: 0x4]
	void SetWeaponLevel(int InWeaponLevel);// 0x48e58bc
	void SetUpgradeSwitch(const bool Enable);// 0x48e5810
	void ServerReceiveAddScoreAction(FString Param);// 0x48e67b8
	void ReplaceUpgradeRoute(out const UpgradeSlotStruct[] replaceSlots);// 0x48e5960
	bool IsOwnUpgradeRoute(UpgradeSlotStruct[] Slots);// 0x48e5b14
	void InitUpgradeData(out const UpgradeSlotStruct[] upgradeDatas);// 0x48e6518
	WeaponUpgradeNetData GetUpgradeNetData();// 0x48e5714
	bool GetUpgradeDataByLevel(int Level, out UpgradeSlotStruct UpgradeData);// 0x48e6024
	UpgradeSlotStruct[] GetSlotArray();// 0x48e6280
	float GetScoreByLevel(int Level);// 0x48e5764
	int GetNextLevelNeedScore();// 0x48e66cc
	int GetLastUnlockSlot();// 0x48e5f48
	int GetLastLevel();// 0x48e6768
	void GetDefaultAccessoriesID(out int[] DefaultAccessories);// 0x48e5f64
	int GetCurrentScore();// 0x48e6734
	int GetCurrentLevelScore();// 0x48e6700
	int GetCurrentLevel();// 0x48e6784
	void ClientReceiveReplaceUpgradeRouteAction(bool bAutonomous, FString Param);// 0x48e6868
	void ClientReceiveLevelUpAction(bool bAutonomous, FString Param);// 0x48e6a68
	void ClientReceiveExpRefreshAction(bool bAutonomous, FString Param);// 0x48e6968
	int CalculateLevelByTotalExp(const int TotalExp);// 0x48e5e9c
	void AddExp(bool bClient, float Exp, int Reason);// 0x48e6b68

--------------------------------
Class: SingleWeaponConfig.DataAsset.Object
	enum WeaponBrand;//[Offset: 0x30, Size: 0x1]
	enum WeaponType;//[Offset: 0x31, Size: 0x1]
	bool bSupportSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	<FString,float> CharacterStateWeightMap;//[Offset: 0x38, Size: 0x50]
	float Weight;//[Offset: 0x88, Size: 0x4]
	FName[] MultiMuzzleSocketNames;//[Offset: 0x90, Size: 0x10]
	FName[] MultiBulletSocketNames;//[Offset: 0xa0, Size: 0x10]
	FName[] MultiCastShellSocketNames;//[Offset: 0xb0, Size: 0x10]
	FName[] MultiCastShellOnScopeSocketNames;//[Offset: 0xc0, Size: 0x10]
	float MaxSpread;//[Offset: 0xd0, Size: 0x4]
	float MinSpread;//[Offset: 0xd4, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0xd8, Size: 0x4]
	float ShoulderFireBaseSpread;//[Offset: 0xdc, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0xe0, Size: 0x4]
	<FString,float> SpreadCOPMap;//[Offset: 0xe8, Size: 0x50]
	float SpreadStatuSpeed;//[Offset: 0x138, Size: 0x4]
	<FString,float> SpreadStatuIncreaseCoefficient;//[Offset: 0x140, Size: 0x50]
	<FString,float> SpreadStatuReduceCoefficient;//[Offset: 0x190, Size: 0x50]
	AmmoConfig* PrimaryAmmo;//[Offset: 0x1e0, Size: 0x8]
	int PrimaryAmmoIndex;//[Offset: 0x1e8, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x1ec, Size: 0x4]
	AmmoConfig* SecondaryAmmo;//[Offset: 0x1f0, Size: 0x8]
	int SecondaryAmmoIndex;//[Offset: 0x1f8, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x1fc, Size: 0x4]
	AmmoConfig* UpgradedSecAmmo;//[Offset: 0x200, Size: 0x8]
	LinearColor UpgradedSecAmmoColor;//[Offset: 0x208, Size: 0x10]
	bool bNeedOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x21c, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x220, Size: 0x4]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x228, Size: 0x8]
	float OverloadCoolingPeriod;//[Offset: 0x230, Size: 0x4]
	CurveFloat* OverloadReduceRateCurve;//[Offset: 0x238, Size: 0x8]
	float OverloadWarningRate;//[Offset: 0x240, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x244, Size: 0x4]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0x24c, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0x250, Size: 0x4]
	float AutoFireCompensationRate;//[Offset: 0x254, Size: 0x4]
	bool bCanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bCanAimAssistOpenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	SolarAssistAimDesc HipAutoAimConfig;//[Offset: 0x260, Size: 0x28]
	SolarAssistAimDesc ShoulderAutoAimConfig;//[Offset: 0x288, Size: 0x28]
	SolarAssistAimDesc OpenScopeAssitAimConfig;//[Offset: 0x2b0, Size: 0x28]
	float AssistAimApproachVehicleRate;//[Offset: 0x2d8, Size: 0x4]
	bool bOneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	float ScopeOpenTime;//[Offset: 0x2e0, Size: 0x4]
	float ScopeOpenFOVTimeScale;//[Offset: 0x2e4, Size: 0x4]
	enum[] SupportChangeTypeArray;//[Offset: 0x2e8, Size: 0x10]
	int[] DefaultPartsArray;//[Offset: 0x2f8, Size: 0x10]
	float RecoilFireTimeWithScope;//[Offset: 0x308, Size: 0x4]
	float RecoilRecoverTimeWithScope;//[Offset: 0x30c, Size: 0x4]
	float RecoilMagnitudeWithScope;//[Offset: 0x310, Size: 0x4]
	CurveFloat* RecoilCurveWithScope;//[Offset: 0x318, Size: 0x8]
	int RecoilSkipSequenceSumWithScope;//[Offset: 0x320, Size: 0x4]
	Vector2D[] RecoilCurveSequenceWithScope;//[Offset: 0x328, Size: 0x10]
	float RecoilFireTimeNoScope;//[Offset: 0x338, Size: 0x4]
	float RecoilRecoverTimeNoScope;//[Offset: 0x33c, Size: 0x4]
	float RecoilMagnitudeNoScope;//[Offset: 0x340, Size: 0x4]
	CurveFloat* RecoilCurveNoScope;//[Offset: 0x348, Size: 0x8]
	int RecoilSkipSequenceSumNoScope;//[Offset: 0x350, Size: 0x4]
	Vector2D[] RecoilCurveSequenceNoScope;//[Offset: 0x358, Size: 0x10]
	bool bIsGatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float GatlingRotaryAcceleration;//[Offset: 0x36c, Size: 0x4]
	float GatlingFireRotarySpeed;//[Offset: 0x370, Size: 0x4]
	float GatlingMaxRotarySpeed;//[Offset: 0x374, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x378, Size: 0x4]
	float GatlingRotaryAttenuation;//[Offset: 0x37c, Size: 0x4]
	float GatlingScatteringMagnification;//[Offset: 0x380, Size: 0x4]
	ParticleSystem* GatlingOverHeatSmokeEffect;//[Offset: 0x388, Size: 0x8]
	class GameplayAbility[] GasAbilities;//[Offset: 0x390, Size: 0x10]
	FName Socket;//[Offset: 0x3a0, Size: 0x8]
	FName LeftHandIKTargetSocket;//[Offset: 0x3a8, Size: 0x8]
	Vector LeftHandIkEffectLocation;//[Offset: 0x3b0, Size: 0xc]
	Vector LeftHandIkJointLocation;//[Offset: 0x3bc, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdle;//[Offset: 0x3c8, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdleWhenCrouch;//[Offset: 0x3d4, Size: 0xc]
	Vector RightHandIkEffectLocation;//[Offset: 0x3e0, Size: 0xc]
	Vector RightHandIkJointLocation;//[Offset: 0x3ec, Size: 0xc]
	LeftHandGripConfig LeftHandGripRotationConfig;//[Offset: 0x3f8, Size: 0x84]
	LeftHandGripConfig LeftHandGripRotationConfigForGunIdle;//[Offset: 0x47c, Size: 0x84]
	bool bShowCoolDownWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	class CrossHairWidget* CrossHair;//[Offset: 0x508, Size: 0x8]
	class FeedbackWidget* FeedbackWidget;//[Offset: 0x510, Size: 0x8]
	SoftObjectPath WeaponIcon;//[Offset: 0x518, Size: 0x18]
	SlateBrush PrimaryFireBrush;//[Offset: 0x530, Size: 0x98]
	SlateBrush SecondaryFireBrush;//[Offset: 0x5c8, Size: 0x98]
	FString WeaponTextType;//[Offset: 0x660, Size: 0x10]
	SoftObjectPath ItemIcon;//[Offset: 0x670, Size: 0x18]
	SoftObjectPath UpgradeParticleSystem;//[Offset: 0x688, Size: 0x18]
	void InitSupportChangeTypeArray(int[] Data);// 0x45d880c
	void InitStatuSpreadCoefficient(out const FString[] Increasekeys, out const float[] Increasevalues, out const FString[] Reducekeys, out const float[] Reducevalues);// 0x45d8478
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float statuspeed);// 0x45d82cc
	void InitSpreadCOPMap(out const FString[] Keys, out const float[] Values);// 0x45d86bc
	void InitScopeData(bool onekey, float scopetime);// 0x45d81d8
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);// 0x45d8ad0
	void InitBase(int WPType);// 0x45d8c88
	void InitAutoAimConfig(int InAssistAimMode, out const float[] InApproachCheckRange, float InApproachRatio, float InApproachRatioMin, float InApproachSpeed);// 0x45d8904
	bool GetIsSupportPart(enum Type);// 0x45d8128

--------------------------------
Class: SolarAssistAimDesc
	Vector2D AimAssistApproachRange;//[Offset: 0x0, Size: 0x8]
	float AimAssistStepRatio;//[Offset: 0x8, Size: 0x4]
	float MinAssistStepRatio;//[Offset: 0xc, Size: 0x4]
	float AimAssistStepSpeed;//[Offset: 0x10, Size: 0x4]
	CurveFloat* AimAssistAdsorbEnterRate;//[Offset: 0x18, Size: 0x8]
	CurveFloat* AimAssistAdsorbExitRate;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CrossHairWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum CurrentCrosshairState;//[Offset: 0x31c, Size: 0x1]
	enum LastCrosshairState;//[Offset: 0x31d, Size: 0x1]
	CrosshairCanvasPanel* RootPanel;//[Offset: 0x320, Size: 0x8]
	int MinSpread;//[Offset: 0x328, Size: 0x4]
	void OnWeaponFired();// 0x4c8f29c
	void OnUpdateReloadProgress(float InReloadProgress, int InMaxAmmo);// 0x4c8f29c
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire);// 0x4c8f29c
	void OnUpdateCoolDownProgress(float InCoolDownProgress);// 0x4c8f29c
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress, int InChargeBurstCount);// 0x4c8f29c
	void OnUpdateAimState(bool InbLockEnemy);// 0x4c8f29c
	void OnReloadStarted(float InReloadTime);// 0x4c8f29c
	void OnReloadFinished(bool InbReloadSuccess, int InReloadAmmo, int InReservedAmmo, int InMaxAmmo);// 0x4c8f29c
	void OnOverloadStateChanged(bool bEnter);// 0x4c8f29c
	void OnAmmoChanged(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x4c8f29c
	void HandleCrosshairState(enum InCrosshairState, bool InbQuitState);// 0x454d2b0
	Widget* GetSpreadCanvasWidget();// 0x4c8f29c
	UserWidget* GetReloadWidget();// 0x4c8f29c
	UserWidget* GetOverloadWidget();// 0x4c8f29c
	UserWidget* GetCoolDownWidget();// 0x4c8f29c
	UserWidget* GetChargeWidget();// 0x4c8f29c
	UserWidget* GetAmmoWidget();// 0x4c8f29c
	Vector2D CalcDeltaScaleBySpread(const float Spread);// 0x454d454
	Vector2D CalcDeltaPosBySpread(const float Spread);// 0x454d508
	float CalcDeltaAngleBySpread(const float Spread);// 0x454d3a0

--------------------------------
Class: SolarUserWidget.UserWidget.Widget.Visual.Object
	enum WidgetLayerLevel;//[Offset: 0x250, Size: 0x1]
	enum CaptureInput;//[Offset: 0x251, Size: 0x1]
	int MyRoot;//[Offset: 0x254, Size: 0x4]
	FString widgetkey;//[Offset: 0x258, Size: 0x10]
	bool bIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bReceiveReturnKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	class WidgetInputManager* InputManagerClass;//[Offset: 0x270, Size: 0x8]
	WidgetInputManager* InputManager;//[Offset: 0x278, Size: 0x8]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x280, Size: 0x50]
	WidgetAnimation* PlayingAnimation;//[Offset: 0x2d0, Size: 0x8]
	PlayAnimationParams[] PendingPlayAnimations;//[Offset: 0x2f0, Size: 0x10]
	bool WidgetLuaTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	SolarUserWidget*[] AllSolarUserWidgetChilds;//[Offset: 0x308, Size: 0x10]
	void UnbindControlDefine();// 0x4c8f29c
	void SetZOrder(int ZOrder);// 0x483ee90
	void SetWidgetLuaTickEnabled(bool bEnabled);// 0x483ef50
	void SetNeedDestroyLuaObject(bool bInNeedDestroyLuaObject);// 0x483ede4
	void RemoveUObjectNode(SolarUserWidget* Widget);// 0x483e8cc
	void ReceiveTick(out const Geometry MyGeometry, float InDeltaTime);// 0x4c8f29c
	void ReceiveShow();// 0x4c8f29c
	void ReceiveHide();// 0x4c8f29c
	bool PlayAnimationByName(out const FName AnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x483f260
	void PlayAnimationByExclusively(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x483f060
	void OnTouchManagerInitialized();// 0x4c8f29c
	void OnSynchronizeProperties();// 0x4c8f29c
	void OnSolarUIOpened();// 0x483ec54
	void OnSolarUIClosed();// 0x483ec38
	void OnShow();// 0x483ec1c
	void OnHide();// 0x483ec00
	void OnExclusivelyAnimationFinished();// 0x483edd0
	void OnDeinitialize();// 0x4c8f29c
	void OnBackKey();// 0x483ebe4
	bool IsWidgetLuaTickEnabled();// 0x483ef34
	bool IsSolarUserWidgetAndBindLua(Widget* InWidget);// 0x483ea14
	Vector2D[] GetTouchedLocation();// 0x483ed20
	Vector2D[] GetPointerLocation();// 0x483ec70
	SolarPlayerState* GetOwningSolarPlayerState();// 0x483eff8
	SolarCharacter* GetOwningSolarPlayerCharacter();// 0x483f02c
	WidgetAnimation* GetAnimationByName(out const FName AnimationName);// 0x483f434
	Widget* FindWidgetFromName(out const FName Name);// 0x483eac4
	void ExecuteSolarUIShow();// 0x483ebbc
	void ExecuteSolarUIOpened();// 0x483ebd0
	void ExecuteSolarUIHide();// 0x483eba8
	void ExecuteSolarUIClosed();// 0x483eb94
	void ExecuteSolarUIClean();// 0x483eb80
	void BindControlDefine(FString FullPath);// 0x4c8f29c
	void AddUObjectNode(SolarUserWidget* Widget);// 0x483e970

--------------------------------
Class: WidgetInputManager.Object
	delegate OnTouchStartDetected;//[Offset: 0x28, Size: 0x10]
	delegate OnTouchUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnTouchEndDetected;//[Offset: 0x48, Size: 0x10]
	delegate OnPointerStartDetected;//[Offset: 0x58, Size: 0x10]
	delegate OnPointerUpdate;//[Offset: 0x68, Size: 0x10]
	delegate OnPointerEndDetected;//[Offset: 0x78, Size: 0x10]
	<int,Vector2D> TouchedList;//[Offset: 0x90, Size: 0x50]
	<int,Vector2D> PointerList;//[Offset: 0xe0, Size: 0x50]
	Widget* K2_GetManagedWidget();// 0x48f2f78
	static bool GetWidgetTouchedList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x48f30c8
	static bool GetWidgetPointerList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x48f2fac

--------------------------------
Class: PlayAnimationParams

--------------------------------
Class: CrosshairCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<enum,StateMapItemStruct> CrosshairStateConfigList;//[Offset: 0x150, Size: 0x50]
	Widget*[] IgonreWidgetToStateMap;//[Offset: 0x1a0, Size: 0x10]
	UICrossHairSpreadStruct[] SpreadItemList;//[Offset: 0x1b0, Size: 0x10]
	UICrossHairAimColorStruct[] AimColorItemList;//[Offset: 0x1c0, Size: 0x10]
	TweenImage* ReloadingTween;//[Offset: 0x1d0, Size: 0x8]
	GaugeImage* BulletGauge;//[Offset: 0x1d8, Size: 0x8]
	TweenImage* OverloadingTween;//[Offset: 0x1e0, Size: 0x8]
	ProgressBar* OverloadBar_Normal;//[Offset: 0x1e8, Size: 0x8]
	ProgressBar* OverloadBar_Warn;//[Offset: 0x1f0, Size: 0x8]
	TweenWidget* OverloadNormalPanelTween;//[Offset: 0x1f8, Size: 0x8]
	ProgressBar*[] CoolDownBars;//[Offset: 0x200, Size: 0x10]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	int ReservedLayerSpace;//[Offset: 0x13c, Size: 0x4]
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x5c8c55c

--------------------------------
Class: StateMapItemStruct
	StateItemStruct[] ChildWidgetConfigList;//[Offset: 0x0, Size: 0x10]
	bool bLoadChildWidgetTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: StateItemStruct
	Widget* CrosshairChildWidget;//[Offset: 0x0, Size: 0x8]
	enum VisibilityType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: UICrossHairSpreadStruct
	Widget* TargetWidget;//[Offset: 0x0, Size: 0x8]
	enum SpreadType;//[Offset: 0x8, Size: 0x1]
	float Weight;//[Offset: 0xc, Size: 0x4]
	bool bPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Angle;//[Offset: 0x14, Size: 0x4]
	bool Pos_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	Vector2D ScaleFactor;//[Offset: 0x1c, Size: 0x8]
	bool Scale_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bRenderAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	float RenderAngleFactor;//[Offset: 0x28, Size: 0x4]
	bool Angle_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Vector2D OrginalVector;//[Offset: 0x30, Size: 0x8]
	Vector2D OrginalScale;//[Offset: 0x38, Size: 0x8]
	float OrginalAngle;//[Offset: 0x40, Size: 0x4]
	Vector2D Dir;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: UICrossHairAimColorStruct
	Image* TargetImg;//[Offset: 0x0, Size: 0x8]
	LinearColor TargetColor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x128, Size: 0x98]
	delegate BrushDelegate;//[Offset: 0x1c0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1d0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1e0, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1f4, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x5c99004
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x5c990a8
	void SetBrushTintColor(SlateColor TintColor);// 0x5c98dd0
	void SetBrushSize(Vector2D DesiredSize);// 0x5c98f64
	void SetBrushResourceObject(Object* ResourceObject);// 0x5c98d2c
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x5c9879c
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x5c989ac
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x5c98574
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x5c9844c
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x5c986f0
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x5c98894
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x5c98aa4
	void SetBrush(out const SlateBrush InBrush);// 0x5c98b50
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x5c98418

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x98]

--------------------------------
Class: TweenImage.TweenBase.UserWidget.Widget.Visual.Object
	Image* TargetImg;//[Offset: 0x2c8, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2d0, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x310, Size: 0x40]
	ImageColorTween ColorTween;//[Offset: 0x350, Size: 0x48]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x398, Size: 0x28]
	void InitImageTween();// 0x48a4ff0

--------------------------------
Class: TweenBase.UserWidget.Widget.Visual.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	float Interval;//[Offset: 0x254, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bEndHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	delegate OnTweenStart;//[Offset: 0x280, Size: 0x10]
	delegate OnTweenStop;//[Offset: 0x290, Size: 0x10]
	Widget* LinkWidget;//[Offset: 0x2b0, Size: 0x8]
	float Progress;//[Offset: 0x2bc, Size: 0x4]
	void Stop();// 0x48a4b78
	void Reset();// 0x48a4b64
	void Play();// 0x48a4b8c
	void InitAndPlay();// 0x48a4b50
	void Init();// 0x48a4ba0

--------------------------------
Class: UIScaleTween.UITweenBaseStruct
	Vector2D OriginalScale;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetScale;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: UITweenBaseStruct
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum InterpolationType;//[Offset: 0x9, Size: 0x1]
	byte EaseType;//[Offset: 0xa, Size: 0x1]
	CurveFloat* InterpolationCurve;//[Offset: 0x10, Size: 0x8]
	Widget* Widget;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: UIPositionTween.UITweenBaseStruct
	Vector2D OriginalPosition;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetPosition;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsRelativeChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ImageColorTween.UITweenBaseStruct
	LinearColor Original;//[Offset: 0x20, Size: 0x10]
	LinearColor TargetColor;//[Offset: 0x30, Size: 0x10]
	Image* Image;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: UIRenderOpacityTween.UITweenBaseStruct
	float OriginalOpacity;//[Offset: 0x20, Size: 0x4]
	float TargetOpacity;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x2c]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int ZOrder;//[Offset: 0x68, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x5c8cbfc
	void SetSize(Vector2D InSize);// 0x5c8d04c
	void SetPosition(Vector2D InPosition);// 0x5c8d120
	void SetOffsets(Margin InOffset);// 0x5c8cf70
	void SetMinimum(Vector2D InMinimumAnchors);// 0x5c8cb28
	void SetMaximum(Vector2D InMaximumAnchors);// 0x5c8ca88
	void SetLayout(out const AnchorData InLayoutData);// 0x5c8d230
	void SetAutoSize(bool InbAutoSize);// 0x5c8ccd8
	void SetAnchors(Anchors InAnchors);// 0x5c8ce90
	void SetAlignment(Vector2D InAlignment);// 0x5c8cdb8
	int GetZOrder();// 0x5c8cbc8
	Vector2D GetSize();// 0x5c8d018
	Vector2D GetPosition();// 0x5c8d0ec
	Margin GetOffsets();// 0x5c8cf38
	AnchorData GetLayout();// 0x5c8d1c0
	bool GetAutoSize();// 0x5c8cca0
	Anchors GetAnchors();// 0x5c8ce58
	Vector2D GetAlignment();// 0x5c8cd84

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Vector2D Alignment;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: GaugeImage.UserWidget.Widget.Visual.Object
	enum GaugeType;//[Offset: 0x250, Size: 0x1]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	Vector2D ImageSize;//[Offset: 0x254, Size: 0x8]
	float InitialDegree;//[Offset: 0x25c, Size: 0x4]
	bool bSymmetric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	Vector2D CenterOffset;//[Offset: 0x264, Size: 0x8]
	Object* ResourceObject;//[Offset: 0x270, Size: 0x8]
	float Progress;//[Offset: 0x278, Size: 0x4]
	MaterialInterface* MaterialDegree360;//[Offset: 0x280, Size: 0x8]
	MaterialInterface* MaterialDegree180;//[Offset: 0x288, Size: 0x8]
	MaterialInterface* MaterialDegree90;//[Offset: 0x290, Size: 0x8]
	MaterialInterface* MaterialDegreeLR;//[Offset: 0x298, Size: 0x8]
	MaterialInterface* MaterialDegreeUD;//[Offset: 0x2a0, Size: 0x8]
	Image* TargetImage;//[Offset: 0x2a8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x2b0, Size: 0x8]
	void UpdateProgress(float InProgress);// 0x45665f4
	void SetProgress(float InProgress);// 0x4566698
	void SetImage(Object* RO);// 0x4566550
	Image* GetInternalImage();// 0x4566534

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x128, Size: 0x1d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2f8, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x300, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x308, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x310, Size: 0x8]
	float Percent;//[Offset: 0x318, Size: 0x4]
	byte BarFillType;//[Offset: 0x31c, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x320, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x328, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x338, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x348, Size: 0x10]
	void SetPercent(float InPercent);// 0x5ca4568
	void SetIsMarquee(bool InbIsMarquee);// 0x5ca4418
	void SetFillColorAndOpacity(LinearColor InColor);// 0x5ca44c4

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush FillImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush MarqueeImage;//[Offset: 0x138, Size: 0x98]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: TweenWidget.TweenBase.UserWidget.Widget.Visual.Object
	Widget* TargetWidget;//[Offset: 0x2c8, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2d0, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x310, Size: 0x40]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x350, Size: 0x28]

--------------------------------
Class: SolarPlayerState.PlayerState.Info.Actor.Object
	delegate OnTeammatePlayerStateRepDelegate;//[Offset: 0x328, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;//[Offset: 0x338, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate;//[Offset: 0x348, Size: 0x10]
	delegate OnPlayerChangedGoldsDelegate;//[Offset: 0x358, Size: 0x10]
	int CharacterId;//[Offset: 0x368, Size: 0x4]
	int SkinId;//[Offset: 0x36c, Size: 0x4]
	int BagId;//[Offset: 0x370, Size: 0x4]
	int CapsuleID;//[Offset: 0x374, Size: 0x4]
	int TailFlameID;//[Offset: 0x378, Size: 0x4]
	FString SolarPlayerId;//[Offset: 0x380, Size: 0x10]
	FString NickName;//[Offset: 0x390, Size: 0x10]
	uint32 BattleVoiceId;//[Offset: 0x3a0, Size: 0x4]
	byte TeamID;//[Offset: 0x3a4, Size: 0x1]
	uint64 UserId;//[Offset: 0x3a8, Size: 0x8]
	byte PosInTeam;//[Offset: 0x3b0, Size: 0x1]
	FString Side;//[Offset: 0x3b8, Size: 0x10]
	FString Job;//[Offset: 0x3c8, Size: 0x10]
	int CharacterLevel;//[Offset: 0x3d8, Size: 0x4]
	int AvatarID;//[Offset: 0x3dc, Size: 0x4]
	int Gender;//[Offset: 0x3e0, Size: 0x4]
	int FriendNum;//[Offset: 0x3e4, Size: 0x4]
	int RoleID;//[Offset: 0x3e8, Size: 0x4]
	int RoleUltimateSkillCDState;//[Offset: 0x3ec, Size: 0x4]
	int[] SettlementItems;//[Offset: 0x3f0, Size: 0x10]
	SettlementParam_ExtraRewardInfo[] ExtraRewards;//[Offset: 0x400, Size: 0x10]
	uint32 PlayerNumber;//[Offset: 0x410, Size: 0x4]
	int[] BackpackUnLockGridNumArr;//[Offset: 0x418, Size: 0x10]
	int[] StrategyConditionIDs;//[Offset: 0x428, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x438, Size: 0x4]
	<int,int> VehicleSkinData;//[Offset: 0x440, Size: 0x50]
	float CurrentHealth;//[Offset: 0x490, Size: 0x4]
	float MaxHealth;//[Offset: 0x494, Size: 0x4]
	ShieldInfo CurShieldInfo;//[Offset: 0x498, Size: 0x8]
	byte ReviveItemNum;//[Offset: 0x4a0, Size: 0x1]
	int TalentID;//[Offset: 0x4a4, Size: 0x4]
	enum TalentState;//[Offset: 0x4a8, Size: 0x1]
	bool HasBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1]
	bool HasGroupBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 0x1]
	Vector2D MarkedPointInNavMap;//[Offset: 0x4ac, Size: 0x8]
	Vector SelfLastVehicleLocation;//[Offset: 0x4b4, Size: 0xc]
	Vector TeamLastVehicleLocation;//[Offset: 0x4c0, Size: 0xc]
	byte CurrentPlayerStateInGame;//[Offset: 0x4cc, Size: 0x1]
	byte CurrentCharacterStateInGame;//[Offset: 0x4cd, Size: 0x1]
	WorldMarkData MarkedWorldData;//[Offset: 0x4d0, Size: 0x40]
	int AccountFlag;//[Offset: 0x510, Size: 0x4]
	FString OS;//[Offset: 0x518, Size: 0x10]
	bool bIsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	bool HasReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	float HangUpTime;//[Offset: 0x534, Size: 0x4]
	uint32 Elo;//[Offset: 0x538, Size: 0x4]
	uint32 RankLevel;//[Offset: 0x53c, Size: 0x4]
	uint32 RankLevel2;//[Offset: 0x540, Size: 0x4]
	byte LobbyTeamMemberNum;//[Offset: 0x544, Size: 0x1]
	bool bTeamIDHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	int RepliableMessageID;//[Offset: 0x56c, Size: 0x4]
	float RepliableMessageStartTime;//[Offset: 0x570, Size: 0x4]
	bool bIsOBPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1]
	delegate OnSpectateInfoRep;//[Offset: 0x578, Size: 0x10]
	SolarPlayerState* KillerPlayerState;//[Offset: 0x588, Size: 0x8]
	SolarSpectateInfo* SpectateInfo;//[Offset: 0x590, Size: 0x8]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	bool isPlayerBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 0x1]
	enum NetStateInGame;//[Offset: 0x59a, Size: 0x1]
	int KillNum;//[Offset: 0x59c, Size: 0x4]
	int AssistNum;//[Offset: 0x5a0, Size: 0x4]
	Vector DeathPos;//[Offset: 0x5a4, Size: 0xc]
	int ReconnectNum;//[Offset: 0x5b0, Size: 0x4]
	float MultiKillDurationTime;//[Offset: 0x5c4, Size: 0x4]
	SettlementTempData SettleSyncData;//[Offset: 0x5d0, Size: 0x88]
	SolarPlayerState*[] TeammatesState;//[Offset: 0x658, Size: 0x10]
	int PlayerRank;//[Offset: 0x668, Size: 0x4]
	int TeamRank;//[Offset: 0x66c, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]
	float MvpScore;//[Offset: 0x674, Size: 0x4]
	float KDA;//[Offset: 0x678, Size: 0x4]
	int CharacterExp;//[Offset: 0x680, Size: 0x4]
	int AccountExp;//[Offset: 0x684, Size: 0x4]
	Vector CharacterLocation;//[Offset: 0x688, Size: 0xc]
	int Gold;//[Offset: 0x694, Size: 0x4]
	int Zomborg;//[Offset: 0x698, Size: 0x4]
	int ZomborgExtra;//[Offset: 0x69c, Size: 0x4]
	int WarmId;//[Offset: 0x6a0, Size: 0x4]
	int WarmType;//[Offset: 0x6a4, Size: 0x4]
	int[] CostedGolds;//[Offset: 0x6a8, Size: 0x10]
	int[] ReceivedGolds;//[Offset: 0x6b8, Size: 0x10]
	int InteractValue;//[Offset: 0x6c8, Size: 0x4]
	float LastInteractTime;//[Offset: 0x6cc, Size: 0x4]
	float DamageFactor;//[Offset: 0x6d0, Size: 0x4]
	float VehicleProbability;//[Offset: 0x6d4, Size: 0x4]
	ExposeLocationMap ExposeLocationMap;//[Offset: 0x6f0, Size: 0x58]
	SolarPlayerState*[] ExposeLocationArray;//[Offset: 0x748, Size: 0x10]
	Vector PlayerLocation;//[Offset: 0x758, Size: 0xc]
	SolarPlayerState* ExposeTo;//[Offset: 0x768, Size: 0x8]
	enum SkydivingState;//[Offset: 0x770, Size: 0x1]
	byte SkydivingLeaderPosInTeam;//[Offset: 0x771, Size: 0x1]
	byte SkydivingFollowFormationPos;//[Offset: 0x772, Size: 0x1]
	SolarAchievementComponent* AchievementComponent;//[Offset: 0x778, Size: 0x8]
	int[] PreCompletedAchievementIDs;//[Offset: 0x788, Size: 0x10]
	int PlayerLevel;//[Offset: 0x798, Size: 0x4]
	int PlayerExperience;//[Offset: 0x79c, Size: 0x4]
	bool WillFollowMovementOfSkydivingLeader();// 0x474a534
	void SynchronizePlayerStateInGame(enum InEPlayerStateInGame, bool InIfOrNot);// 0x474cd70
	void SynchronizeCharacterStateInGame(enum InECharacterStateInGame, bool InIfOrNot);// 0x474ce60
	void StatVehicleDriveTypeLuaCall(int DriveType);// 0x474b374
	void StatVehicleDriveType(int DriveType);// 0x474b2c8
	void ShowTeammatesHUD(out const SolarPlayerState*[] TeammateStates, SolarPlayerState* InSpectateTargetPlayerState);// 0x474c5e0
	void SetRoleUltimateSkillCDState(const int NewState);// 0x474b818
	void SetRoleID(const int InRoleID);// 0x474b968
	void SetPlayerNetStateInGame(enum InPlayerNetStateInGame);// 0x474c208
	void SetIsSameTeamWithLocalPlayer(bool bIsSameTeam);// 0x474c8c8
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);// 0x474ba0c
	void ServerUnexposeLocationToOtherOnce(SolarPlayerState* OtherPS);// 0x474a9e4
	void ServerUnexposeLocationToOther(SolarPlayerState* OtherPS);// 0x474a940
	void ServerExposeLocationToOther(SolarPlayerState* OtherPS);// 0x474aa88
	void ServerChangeRoleID(const int InRoleID);// 0x474b8bc
	void ReviseWeaponExp(int weaponid, int WeaponExp, int CurLevel, int CurExp);// 0x474b418
	void ReceiveTeamIdReplicated();// 0x4c8f29c
	void ReceiveTalentStateSet(enum InState);// 0x4c8f29c
	void ReceiveTalentIDReplication(enum RepType, PlayerState* ClientOwnerPS);// 0x474ab98
	void ReceivePostInitializeComponents();// 0x4c8f29c
	bool ReceiveGold(const int InReceivedGold, const bool NeedSyncToServer);// 0x474bc5c
	void ReceiveClientInitialize(Controller* C);// 0x4c8f29c
	bool PlayerCanRebirthByReviveItem();// 0x474bfd0
	bool PlayerCanRebirthBlueprint();// 0x474bc1c
	bool PlayerCanRebirth();// 0x474c008
	void OnUpdatedPlayerStateLoginData();// 0x474c314
	void OnTeammatePlayerStateRepDelegate__DelegateSignature();// 0x4c8f29c
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(out const byte InPosInTeam, bool InIsLastOne);// 0x4c8f29c
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x4c8f29c
	void OnSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x474b580
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnRep_UserId();// 0x4c8f29c
	void OnRep_TeammatesState();// 0x4c8f29c
	void OnRep_TeamLastVehicleLocation();// 0x474aee8
	void OnRep_TeamId();// 0x474b160
	void OnRep_TalentID();// 0x474af50
	void OnRep_SpectateInfo();// 0x474b748
	void OnRep_SkydivingState();// 0x474a4e8
	void OnRep_SkydivingLeaderPosInTeam();// 0x474a4d4
	void OnRep_SkinId();// 0x474b174
	void OnRep_Side();// 0x474acfc
	void OnRep_SelfLastVehicleLocation();// 0x474af04
	void OnRep_RoleUltimateSkillCDState();// 0x4c8f29c
	void OnRep_RoleID();// 0x4c8f29c
	void OnRep_ReviveItemNum();// 0x474b034
	void OnRep_RepliableMsg();// 0x474af3c
	void OnRep_PosInTeam(out const byte InLastPosInTeam);// 0x474af64
	void OnRep_PlayerLocation();// 0x474a908
	void OnRep_PlayerLevel();// 0x474a4b8
	void OnRep_NetStateInGame();// 0x474ad24
	void OnRep_MaxHealth();// 0x474b10c
	void OnRep_MarkedWorldData();// 0x474ad54
	void OnRep_MarkedPointInNavMap();// 0x474af20
	void OnRep_KillNum();// 0x474ad10
	void OnRep_Job();// 0x474ace8
	void OnRep_Gold();// 0x474b1ac
	void OnRep_ExposeLocationArray();// 0x474a924
	void OnRep_CurShieldInfo(out const ShieldInfo InLastShieldInfo);// 0x474b050
	void OnRep_CurrentPlayerStateInGame(out const byte InLastPlayerStateInGame);// 0x474ae2c
	void OnRep_CurrentHealth();// 0x474b128
	void OnRep_CurrentCharacterStateInGame(out const byte InLastCharacterStateInGame);// 0x474ad70
	void OnRep_CharacterId();// 0x474b190
	void OnRep_BattleVoiceId();// 0x4c8f29c
	void OnRep_BackpackUnLockGridNumArr();// 0x474b144
	void OnRep_AccountFlag();// 0x474ad40
	void OnRefreshReviveInfo();// 0x474b020
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x4c8f29c
	FString OnPlayerUpgrade(int NewLevel, bool bFromServer);// 0x4c8f29c
	void OnPlayerUpdateStatData(enum InType);// 0x474c328
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp);// 0x4c8f29c
	void OnOtherPlayerBeginSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x474b664
	void NotifyUpdateTeamMateLevelUI();// 0x4c8f29c
	bool NeedPerformSpectateInfoOnSimulate();// 0x474bbe4
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x4c8f29c
	bool IsUnfollowShortcutEnabled();// 0x474a4fc
	bool IsTeammateWith(const SolarPlayerState* Other);// 0x474c9e4
	bool IsSpectatingOtherPlayer();// 0x474bbc0
	bool IsSkydivingLeader();// 0x474a6c0
	bool IsSkydivingCompleted();// 0x474a56c
	bool IsSkydiving();// 0x474a590
	bool IsSameTeamWithReferToPlayer();// 0x474c974
	bool IsSameTeamWithLocalPlayer();// 0x474c9ac
	bool IsPreStartSkydiving();// 0x474a5b4
	bool IsPlayerTeam();// 0x474c78c
	bool IsPlayerOnline();// 0x474c144
	bool IsPlayerOffline();// 0x474c17c
	bool IsPlayer();// 0x474c064
	bool IsOfflinePlayer();// 0x474c09c
	bool IsOBPlayer();// 0x474c048
	bool IsMySkydivingLeader(int LeaderPosInTeam);// 0x474a5d8
	bool IsMonster();// 0x474c0d4
	bool IsLocalPlayerSpectatingMe();// 0x474bb58
	bool IsForeverPlayerLogout();// 0x474c1b4
	bool IsBeingSpectated();// 0x474bb90
	bool IsAIPlayer();// 0x474c10c
	void HideTeammatesHUD(out const SolarPlayerState*[] TeammateStates);// 0x474c520
	bool HasSkydivingLeader();// 0x474a688
	int GetVehicleSkinID(int VehicleID);// 0x474bf24
	FString GetUserID();// 0x474b75c
	void GetTeammatePlayers(bool bIncludingSelf, out SolarPlayerState*[] OutTeammates);// 0x474c7c4
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x474c6e0
	SolarGameModeStatisticsComponent* GetStatComponent();// 0x474c2ac
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x474bb10
	SolarCharacter* GetSpectateTargetCharacter();// 0x474bb34
	SolarSpectateInfo* GetSpectateInfo();// 0x474baf4
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x474c3cc
	SolarPlayerController* GetSolarPlayerController();// 0x474c400
	SolarCharacter* GetSolarCharacter();// 0x474c434
	SolarCharacter* GetPossessedCharacter();// 0x474ab2c
	PlayerStatisticsData* GetPlayerStatData();// 0x474c2e0
	enum GetPlayerNetState();// 0x474c1ec
	FString GetPlayerNameWithoutUID();// 0x474c468
	void GetNotSettlementItems(out SolarItemData[] Items);// 0x474ca94
	bool GetIsPlayerBattleEnd();// 0x474bab4
	float GetExpSettleModePunishRatio();// 0x4c8f29c
	float GetCurrentTalentCDDuration();// 0x474ac80
	float GetCurrentTalentActiveDuration();// 0x474acb4
	Vector GetCharacterLocation();// 0x474ab60
	void GetCanSettlementItems(out int[] Items);// 0x474cb50
	FString[] GetBuyResurrectionSavedTeammateNameArr();// 0x4c8f29c
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x4c8f29c
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x4c8f29c
	bool CostGold(const int InCostedGold, const bool NeedSyncToServer);// 0x474bd54
	void ClientNotifyKillNumChanged(const int KillNumber, const int SpreesNum);// 0x474b1dc
	void ClearTeammatesMark();// 0x474b1c0
	bool CheckIfTeamLastVehicleLocationValid();// 0x474cf88
	bool CheckIfTeamIdValid();// 0x474d068
	bool CheckIfSelfLastVehicleLocationValid();// 0x474cfc0
	bool CheckIfPosInTeamValid();// 0x474d030
	bool CheckIfMarkedPointInNavMapValid();// 0x474cff8
	bool CheckIfInactive();// 0x474cf50
	bool CheckIfBeInSpecifiedPlayerState(enum InEPlayerStateInGame);// 0x474cc10
	bool CheckIfBeInSpecifiedCharacterState(enum InECharacterStateInGame);// 0x474ccc0
	bool CheckIfBattleVoiceIdValid();// 0x474d0a0
	bool CheckGoldIsEnough(const int InCostedGold);// 0x474be4c
	bool CanAcceptSkydivingLeaderTransferRequest(const SolarPlayerState* RequesterPlayerState);// 0x474a6f8
	bool CanAcceptSkydivingFollowRequest(const SolarPlayerState* RequesterPlayerState);// 0x474a858
	bool CanAcceptSkydivingFollowInvitation(const SolarPlayerState* InviterPlayerState);// 0x474a7a8
	int CalculateZomborg();// 0x4c8f29c
	void CalculateKDA();// 0x474befc
	void CalculateItemRewards();// 0x474bf10
	float CalculateCharacterExp();// 0x4c8f29c
	float CalculateAccountExp();// 0x4c8f29c
	void AssignReplaceTeamPosBySide(FString InSide);// 0x474d0ec
	void AssignPosInTeamBySide();// 0x474d0d8
	void AssignPosInTeam();// 0x474d19c

--------------------------------
Class: SettlementParam_ExtraRewardInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	FString LocVariable;//[Offset: 0x8, Size: 0x10]
	FString Content;//[Offset: 0x18, Size: 0x10]
	FString ItemList;//[Offset: 0x28, Size: 0x10]
	int Order;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ShieldInfo
	int ShieldID;//[Offset: 0x0, Size: 0x4]
	float CurValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WorldMarkData
	Vector WorldPos;//[Offset: 0x0, Size: 0xc]
	Vector2D ScreenCoordinate;//[Offset: 0xc, Size: 0x8]
	enum Type;//[Offset: 0x14, Size: 0x1]
	int ItemID;//[Offset: 0x18, Size: 0x4]
	int64 ItemInstanceId;//[Offset: 0x20, Size: 0x8]
	int NameLocID;//[Offset: 0x28, Size: 0x4]
	FString IconImg;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SolarSpectateInfo.Actor.Object
	delegate OnBeginUpdateSpectateInfo;//[Offset: 0x230, Size: 0x10]
	delegate OnStopUpdateSpectateInfo;//[Offset: 0x240, Size: 0x10]
	delegate OnOtherPlayerBeginSpectateMe;//[Offset: 0x250, Size: 0x10]
	delegate OnOtherPlayerStopSpectateMe;//[Offset: 0x260, Size: 0x10]
	delegate OnBeforeSpectateTargetChanged;//[Offset: 0x270, Size: 0x10]
	delegate OnSpectateTargetChanged;//[Offset: 0x280, Size: 0x10]
	delegate OnBeginSpectateMode;//[Offset: 0x290, Size: 0x10]
	delegate OnEndSpectateMode;//[Offset: 0x2a0, Size: 0x10]
	delegate OnSwitchSpectateTargetFailed;//[Offset: 0x2b0, Size: 0x10]
	delegate OnSpectatorOfMyTargetChanged;//[Offset: 0x2c0, Size: 0x10]
	delegate OnSpectateInfoOfMyTargetReadied;//[Offset: 0x2d0, Size: 0x10]
	SpectatingOthersInfo SpectatingOthersInfo;//[Offset: 0x2e0, Size: 0x60]
	<SolarPlayerState*> SpectatingMePlayerStates;//[Offset: 0x340, Size: 0x50]
	SolarReplayManager* ReplayManager;//[Offset: 0x390, Size: 0x8]
	int LikeValue;//[Offset: 0x3a0, Size: 0x4]
	<FString,int> SendGiftPlayerMap;//[Offset: 0x3a8, Size: 0x50]
	GiftSenderInfo[] SendGiftPlayerInfo;//[Offset: 0x3f8, Size: 0x10]
	Rotator PlayerCameraRotation;//[Offset: 0x408, Size: 0xc]
	ReplicateItemData[] CharacterBackpackItems;//[Offset: 0x418, Size: 0x10]
	void SetSpectateTargetForPlayingReplay(SolarPlayerState* TargetPlayerState);// 0x4778b24
	void ServerStopSpectateOtherPlayer_Internal();// 0x4779998
	void ServerStopSpectateOtherPlayer();// 0x4779b70
	void ServerSpectatePreviousPlayer();// 0x4779b38
	void ServerSpectateNextPlayer();// 0x4779b54
	void ServerSetSpectateConditions_Internal(const SpectateConditions InSpectateConditions);// 0x4779a60
	void ServerSetSpectateConditions(out const SpectateConditions InSpectateConditions);// 0x4779c28
	void ServerSetPlayerCameraRotation(const Rotator Rotation);// 0x4778a7c
	void ServerSendGiftAction(const int GiftID, const int Num);// 0x4778cc0
	void ServerChangeLikeValue(const int Value, const int AddInteractValue, enum ActionType);// 0x4779280
	void ServerBeginSpectateOtherPlayer_Internal(SolarPlayerState* SpecTargetPlayerState);// 0x47799b4
	void ServerBeginSpectateOtherPlayer(SolarPlayerState* SpecTargetPlayerState);// 0x4779b84
	void SendGift(const int GiftID, const int Num);// 0x4778bdc
	void OnTargetSpecInfoSetToItsPlayerState(SolarSpectateInfo* TargetSpecInfo);// 0x47794d8
	void OnSwitchSpectateTargetFailed__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnStopUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnStopRecordingReplay();// 0x4779b10
	void OnStartRecordingReplay();// 0x4779b24
	void OnSpectatorOfMyTargetChanged__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnSpectateTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnSpectateInfoOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnRep_LikeValue();// 0x4778bc8
	void OnRep_CharacterBackpackItems();// 0x4778a68
	void OnOtherPlayerStopSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnLikeActionCalled(const int Value, const int AddInteractValue, enum ActionType);// 0x47793b0
	void OnGiftActionCalled(const int GiftID, const int Num);// 0x4778dac
	void OnEndSpectateMode__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnBeginUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnBeginSpectateMode__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	void OnBeforeSpectateTargetChanged__DelegateSignature(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x4c8f29c
	bool NeedUpdateSpectateInfo();// 0x4779ebc
	bool IsSpectatingOtherPlayer();// 0x4779f70
	bool IsRecordingReplay();// 0x4779ef4
	bool IsLocalPlayerSpectatingMe();// 0x4779f10
	bool IsBeingSpectated();// 0x4779f48
	<SolarPlayerState*> GetSpectatorsOfMyTarget();// 0x4779d4c
	<SolarPlayerState*> GetSpectatingMePlayerStates();// 0x4779e2c
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x4779e10
	SolarCharacter* GetSpectateTargetCharacter();// 0x4779d30
	SolarSpectateInfo* GetSpectateInfoOfMyTarget();// 0x4779ddc
	SpectateConditions GetSpectateConditions();// 0x4779d14
	SolarPlayerState* GetSolarPlayerState();// 0x4779ce0
	void ClientSetSpectatorsOfMyTarget(const SolarPlayerState*[] SpectatorsOfMyTarget);// 0x47797a4
	void ClientSetSpectatingOthersInfo(SolarPlayerState* TargetPS, SolarCharacter* TargetCharacter, const SolarPlayerState*[] SpectatorsOfMyTarget);// 0x477985c
	void ClientSetServerRecording(bool bInServerRecording);// 0x4779598
	void ClientSendSwitchSpectateTargetFailed();// 0x477957c
	void ClientRemoveSpectatingMePlayer(SolarPlayerState* Player);// 0x477964c
	void ClientNotifySelfLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x4778e90
	void ClientNotifyLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x4779088
	void ClientAddSpectatingMePlayer(SolarPlayerState* Player);// 0x47796f8
	bool CanISpectate(const SolarPlayerState* Target);// 0x4779f8c

--------------------------------
Class: SpectatingOthersInfo
	SolarPlayerState* SpectateTargetPlayerState;//[Offset: 0x0, Size: 0x8]
	SolarCharacter* SpectateTargetCharacter;//[Offset: 0x8, Size: 0x8]
	<SolarPlayerState*> SpectatorsOfMyTarget;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: SolarReplayManager.Object
	bool bMeshWidgetOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	class UserWidget* WaitingReplayStartUIClass;//[Offset: 0x40, Size: 0x8]
	SoftObjectPath WaitingOBMap;//[Offset: 0x48, Size: 0x18]
	class Actor* SpectatorPawnStartPointClass;//[Offset: 0x60, Size: 0x8]
	delegate FOnPlayingTryToStartDelegate;//[Offset: 0x70, Size: 0x10]
	delegate OnPlayingStartedDelegate;//[Offset: 0x80, Size: 0x10]
	delegate OnPlayingLoadLevelsStartedDelegate;//[Offset: 0x90, Size: 0x10]
	delegate OnPlayingLevelLoadedDelegate;//[Offset: 0xa0, Size: 0x10]
	delegate OnPlayingStartFailedDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate OnPlayingAtEndDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate OnPlayingFinishedDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate OnRecordingStartedDelegate;//[Offset: 0xe0, Size: 0x10]
	delegate OnRecordingStartFailedDelegate;//[Offset: 0xf0, Size: 0x10]
	delegate OnRecordingFinishedDelegate;//[Offset: 0x100, Size: 0x10]
	UserWidget* WaitingReplayStartUI;//[Offset: 0x150, Size: 0x8]
	void StopRecording();// 0x47633ec
	void StopPlayReplayAndNotifyBackEnd();// 0x4c8f29c
	void StopPlayReplay();// 0x47631e0
	void StartRecording(FString SessionName, FString UploadUrl, bool bIsToLocal);// 0x4763400
	void SetTimeDilation(float Dilation);// 0x4762dfc
	void SetRequestTryStrategy(float Interval, int Times);// 0x4c8f29c
	void SetReadyToRecord(bool bIsReady, out const FString[] OBPlayerIDs);// 0x4c8f29c
	void RequestPlayReplayOfCurrentBattle();// 0x4c8f29c
	void RequestPlayReplay(FString BattleID);// 0x4c8f29c
	void RequestBattleList(int PageIndex, int PageSize);// 0x4c8f29c
	void PlayReplayFromServer(FString SessionName, FString DownloadUrl);// 0x47632ec
	void PlayReplayFromLocal(FString ReplayFileName);// 0x47631f4
	void PausePlayReplay();// 0x47631cc
	void OnTryToGetDownloadAddrFailed();// 0x4762d90
	void OnRecordingStartFailedDelegate__DelegateSignature();// 0x4c8f29c
	void OnRecordingStartedDelegate__DelegateSignature();// 0x4c8f29c
	void OnRecordingFinishedDelegate__DelegateSignature();// 0x4c8f29c
	void OnPlayingTryToStartDelegate__DelegateSignature();// 0x4c8f29c
	void OnPlayingStartFailedDelegate__DelegateSignature();// 0x4c8f29c
	void OnPlayingStartedDelegate__DelegateSignature();// 0x4c8f29c
	void OnPlayingLoadLevelsStartedDelegate__DelegateSignature();// 0x4c8f29c
	void OnPlayingLevelLoadedDelegate__DelegateSignature();// 0x4c8f29c
	void OnPlayingFinishedDelegate__DelegateSignature();// 0x4c8f29c
	void OnPlayingFinished();// 0x4762da4
	void OnPlayingAtEndDelegate__DelegateSignature();// 0x4c8f29c
	void OnPlayingAtEnd();// 0x4762db8
	void LuaOnStartFailed();// 0x4c8f29c
	void LuaOnPostLoadMapWithWorld(FString LevelName);// 0x4c8f29c
	void LuaBindDelegates();// 0x4c8f29c
	bool IsVersion135();// 0x4762dcc
	bool IsRecording();// 0x4763148
	bool IsReady();// 0x4c8f29c
	bool IsPlaying();// 0x4763180
	bool IsInState(enum CheckState);// 0x4763098
	void GotoTimeInSecond(float Second);// 0x4762ea0
	float GetTotalSessionTimeInSecond();// 0x4762f78
	float GetCurrentSessonTimeInSecond();// 0x4762f44
	FString GetCurrentSessionName();// 0x4762fac
	FString GetBattleIDByIndex(int Index);// 0x4c8f29c
	void EnterSettlementStage();// 0x4762de8
	void DestroyWaitingOBStartUI();// 0x4762d54
	void CreateWaitingOBStartUI();// 0x4762d68
	void ContinuePlayReplay();// 0x47631b8
	void BindPostLoadMapWithWorldDelegate();// 0x4762d7c

--------------------------------
Class: GiftSenderInfo
	int Gold;//[Offset: 0x0, Size: 0x4]
	int Diamond;//[Offset: 0x4, Size: 0x4]
	FString playerName;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SpectateConditions
	bool bCanBeSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanBeSpectateByHostilePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanBeSpectateByFriendlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanISpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: SettlementTempData
	int TotalAccountExp;//[Offset: 0x0, Size: 0x4]
	int AccountLevel;//[Offset: 0x4, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x58, Size: 0x4]
	int CurCharacterExp;//[Offset: 0x5c, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x64, Size: 0x4]
	int RankAfterScore;//[Offset: 0x68, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x6c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x70, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x74, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x78, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x7c, Size: 0x4]
	int RankLegend;//[Offset: 0x80, Size: 0x4]
	byte RankProtectType;//[Offset: 0x84, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]

--------------------------------
Class: ExposeLocationMap
	<SolarPlayerState*,int> InnerMap;//[Offset: 0x0, Size: 0x50]
	SolarPlayerState* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SolarAchievementComponent.ActorComponent.Object
	DataTable* AchievementConfig;//[Offset: 0xb8, Size: 0x8]
	AchievementFormula* AchievementFormula;//[Offset: 0xc0, Size: 0x8]
	class AchievementFormula* AchievementFormulaClass;//[Offset: 0xc8, Size: 0x8]
	<int,AchievementResult> AllStatisticAchievement;//[Offset: 0x1c8, Size: 0x50]
	void UnlockAchievement(int InAchievementID);// 0x45e8a14
	void SetAchievementValue(int InAchievementID, int InUpdateValue);// 0x45e884c
	void NotifyAchievementUpdatedByID(int InAchievementID);// 0x45e8ab8
	bool IsAchievementCompleted(int InAchievementID);// 0x45e86f0
	void IncreaseAchievementValue(int InAchievementID, int InUpdateValue);// 0x45e8930
	int GetAchievementValue(int InAchievementID);// 0x45e87a0

--------------------------------
Class: AchievementFormula.Actor.Object
	SolarAchievementComponent* GetAchievementComponent();// 0x45e8258

--------------------------------
Class: AchievementResult
	int AchievementID;//[Offset: 0x0, Size: 0x4]
	int ProgressValue;//[Offset: 0x4, Size: 0x4]
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum AchievementReportType;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SolarGameModeStatisticsComponent.GameModeCompBase.ActorComponent.Object
	<FString,PlayerStatisticsData*> AllPlayerStatData;//[Offset: 0xe0, Size: 0x50]
	enum[] SpecialFuncTag;//[Offset: 0x130, Size: 0x10]
	int GetWeaponSettlmentExp(int weaponid, PlayerStatisticsData* InPSD, SolarPlayerState* InPS);// 0x37b7888
	PlayerStatisticsData* GetPlayerStatData(FString InPlayerId);// 0x46b0278

--------------------------------
Class: PlayerStatisticsData.Object
	delegate OnPlayerStatDataUpdate;//[Offset: 0x28, Size: 0x10]
	Vector GetValue_Vector(enum InType);// 0x46af548
	void GetValue_MapKeyWithValueInt(enum InType, out int[] OutValue);// 0x46af440
	void GetValue_MapKeyWithValueFloat(enum InType, out int[] OutValue);// 0x46af338
	int GetValue_IntFromMap(enum InType, int IntKey);// 0x46af8f8
	void GetValue_IntArray(enum InType, out int[] OutResult);// 0x46af700
	int GetValue_Int(enum InType);// 0x46af9e8
	float GetValue_FloatFromMap(enum InType, int IntKey);// 0x46af808
	void GetValue_FloatArray(enum InType, out float[] OutResult);// 0x46af5f8
	float GetValue_Float(enum InType);// 0x46afa94

--------------------------------
Class: SolarReplayPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	class SolarSpectatorPawn* OBModeSpectatorPawnClass;//[Offset: 0x9f8, Size: 0x8]
	class HUD* OBModeHUDClass;//[Offset: 0xa00, Size: 0x8]
	float WaitFirstTeamNumberInputTime;//[Offset: 0xa08, Size: 0x4]
	float WaitTeamNumberInputTime;//[Offset: 0xa0c, Size: 0x4]
	SolarInReplaySpectatorWidget* InReplayWidget;//[Offset: 0xa10, Size: 0x8]
	MaterialInterface* PerspectiveMaterial;//[Offset: 0xa18, Size: 0x8]
	class SolarSpectatorPawn* DirectorModeSpectatorPawnClass;//[Offset: 0xa20, Size: 0x8]
	SolarReplayCameraControlComp* SolarReplayCameraControlComp;//[Offset: 0xa28, Size: 0x8]
	<Actor*,MaterialChangeHandle> CharacterMaterialInfo;//[Offset: 0xa30, Size: 0x50]
	<Actor*,MaterialInterface*> VehicleOriginMaterial;//[Offset: 0xa80, Size: 0x50]
	SolarGameState* SolarGameState;//[Offset: 0xad0, Size: 0x8]
	SolarReplayManager* ReplayManager;//[Offset: 0xad8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xae0, Size: 0x8]
	void StopSpectatePlayer();// 0x476af64
	void StopPlayReplay();// 0x476aea0
	void SpectatePlayerByPlayerID(FString SolarPlayerId);// 0x476af78
	bool ShowDamageText(out SolarDamageText InDamageText);// 0x476ac44
	void SetPlayerInfoHUDVisible(bool bIsVisible);// 0x476adf4
	void SetDamageTextVisible(bool bIsVisible);// 0x476ad48
	void SetBattleOBHUDType(out const enum Type);// 0x476ab24
	void PauseReplay();// 0x476ab10
	void OnReplayPlayingLevelLoaded();// 0x476aa20
	void OnPlayingFinished();// 0x476aa34
	void OnBattleOBHUDTypeChanged(out const enum CurrentType);// 0x476aa48
	bool IsSpectatingPlayer();// 0x476ac0c
	FString GetCurrentSpectatePlayerID();// 0x476aeb4
	enum GetBattleOBHUDType();// 0x476abd8
	void ContinueReplay();// 0x476aafc

--------------------------------
Class: SolarDamageText
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bBrokenShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int Damage;//[Offset: 0x4, Size: 0x4]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	Actor* Source;//[Offset: 0x10, Size: 0x8]
	Vector HitLocation;//[Offset: 0x18, Size: 0xc]
	uint32 TargetUniqueID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SolarSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: SolarInReplaySpectatorWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	UserWidget* DamageTextWidget;//[Offset: 0x318, Size: 0x8]
	delegate OnStopPlayReplayEvent;//[Offset: 0x320, Size: 0x10]
	delegate OnSetPlayerInfoHUDVisibleDelegate;//[Offset: 0x330, Size: 0x10]
	delegate OnSetDamageTextVisibleDelegate;//[Offset: 0x340, Size: 0x10]
	void ShowFinishPanel();// 0x4c8f29c
	void SetSpectatePlayerName(FString Name);// 0x4c8f29c
	void SetElapsedTimeString(FString TimeString);// 0x4c8f29c
	void SetAlivePlayerAndTeamNumber(int AlivePlayer, int AliveTeam);// 0x4c8f29c
	void OnStopPlayReplayDelegate__DelegateSignature();// 0x4c8f29c
	void OnSetPlayerInfoHUDVisibleDelegate__DelegateSignature(bool bIsVisible);// 0x4c8f29c
	void OnSetDamageTextVisibleDelegate__DelegateSignature(bool bIsVisible);// 0x4c8f29c

--------------------------------
Class: SolarReplayCameraControlComp.ActorComponent.Object
	float DefaultSpeed;//[Offset: 0xc8, Size: 0x4]
	float MoveSpeedChangeStep;//[Offset: 0xcc, Size: 0x4]
	float MoveSpeedMin;//[Offset: 0xd0, Size: 0x4]
	float MoveSpeedMax;//[Offset: 0xd4, Size: 0x4]
	float SpeedUpScale;//[Offset: 0xd8, Size: 0x4]
	float DefaultTurnRate;//[Offset: 0xdc, Size: 0x4]
	float TurnRateChangeStep;//[Offset: 0xe0, Size: 0x4]
	float TurnSpeedMin;//[Offset: 0xe4, Size: 0x4]
	float TurnSpeedMax;//[Offset: 0xe8, Size: 0x4]
	float DistanceChangeStep;//[Offset: 0xec, Size: 0x4]
	SolarPlayerState* CurrentTarget;//[Offset: 0xf0, Size: 0x8]
	SolarGameState* SolarGameState;//[Offset: 0xf8, Size: 0x8]
	SolarSpectateInfo* ReplayPCSpectateInfo;//[Offset: 0x100, Size: 0x8]
	void OnSpectateInfoRep(SolarSpectateInfo* InSpecInfo);// 0x4762574
	void OnReplaySpectateTargetChanged__DelegateSignature(SolarPlayerState* CurTarget);// 0x4c8f29c

--------------------------------
Class: SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SolarPlayerState*[] SolarPlayerStateArray;//[Offset: 0x2a0, Size: 0x10]
	bool IsBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	PlayerState*[] PlayerArray_SameTeam;//[Offset: 0x2b8, Size: 0x10]
	PrePooledBundle[] PrePooledBundles;//[Offset: 0x2e8, Size: 0x10]
	int RemainingPlayersCount;//[Offset: 0x2f8, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x2fc, Size: 0x4]
	int PlayersCount;//[Offset: 0x300, Size: 0x4]
	int TeamCount;//[Offset: 0x304, Size: 0x4]
	int TotalBoardingNum;//[Offset: 0x308, Size: 0x4]
	int CapsulePlayerNum;//[Offset: 0x30c, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x310, Size: 0x4]
	<class Object> LimitMaxReplicatedNumClasses;//[Offset: 0x318, Size: 0x50]
	float BattleTime;//[Offset: 0x36c, Size: 0x4]
	int GameWarmID;//[Offset: 0x3c0, Size: 0x4]
	bool bLuaReportBattleEndServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	GameStartConditionList GameStartConditions;//[Offset: 0x3e0, Size: 0x58]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x438, Size: 0x8]
	void UpdateTeammateRelationship();// 0x46b82d0
	void SetTeamLastVehicleLocation(byte InTeamID, out const Vector InVehiclePosition);// 0x46b7d60
	void SetSettlementStageConfigID(const int InConfigID);// 0x46b7fb8
	void OnRep_SettlementStageConfigID();// 0x46b7f74
	void OnRep_CapsulePlayerNum();// 0x46b7f88
	void OnPlayersNumberChange();// 0x46b7f60
	void NotifyBombingEnd(int BombId);// 0x46b877c
	void NotifyBombingBegin(int BombId, const Vector Location, float Radius);// 0x46b8828
	bool IsSupportCharacterRole();// 0x46b9070
	bool IsSameTeamWithReferToPlayer(const SolarPlayerState* Other);// 0x46b805c
	float GetWorldStartTimeSeconds();// 0x46b89e0
	int GetWatchingPlayerCount(bool IgnoreOffline);// 0x46b8e18
	SolarPlayerState* GetTeamPlayerState(const byte InTeamID, const byte InPosInTeam);// 0x46b868c
	int GetTeamNumCount();// 0x46b8ff8
	byte GetTeammateNum(const byte InTeamID);// 0x46b85d8
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x46b829c
	SolarSafeArea* GetSolarSafeArea();// 0x46b8954
	int GetSettlementStageConfigID();// 0x46b7f9c
	int GetRemainingTeamCount();// 0x46b8f80
	int GetRemainingPlayersCount();// 0x46b8fbc
	SolarPlayerState* GetReferToPlayerTeamEntry(byte InPosInTeam);// 0x46b810c
	SolarPlayerState*[] GetReferToPlayerTeamArray();// 0x46b81b8
	SolarPlayerState* GetReferToPlayerState();// 0x46b8268
	SolarPlayerState*[] GetPlayerStatesInTeam(out const byte InTeamID);// 0x46b83d8
	int GetPlayersCount();// 0x46b9034
	SolarPlayerState* GetOfflinePlayerState(FString OfflinePlayerId);// 0x46b8320
	SolarPlayerState* GetLocalSolarPlayerState();// 0x46b84f0
	float GetBattleTime();// 0x46b8988
	float GetBattleStartTimeSeconds();// 0x46b89a4
	void GetAllCharactersExceptTeammate(out SolarCharacter*[] CharacterArray);// 0x46b90a8
	int GetAliveSolarPlayersCount(bool IgnoreOffline);// 0x46b8ecc
	byte GetAlivePlayerNumInTeamExceptDying(const byte InTeamID);// 0x46b8524
	void ClientNotifyShowVictory(byte WinTeamID, float TargetEndTime);// 0x46b7e54
	void ClientNotifyMonsterSpawn();// 0x46b7f44
	byte CalculateTeamNum();// 0x46b82ec
	void BroadcastDeath(FString KillerPlayerID, FString KillerName, FString WeaponType, FString KilledPlayerID, FString KilledName, bool bDie, bool bHeadHit, byte KillerTeamId, byte KilledTeamId, int InWeaponSkinID, int KillerFlag, int KilledFlag);// 0x46b8a14

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x27c, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x284, Size: 0x8]
	int ElapsedTime;//[Offset: 0x28c, Size: 0x4]
	void OnRep_MatchState();// 0x68213bc
	void OnRep_ElapsedTime();// 0x68213a0

--------------------------------
Class: PrePooledBundle
	FName ClassPath;//[Offset: 0x0, Size: 0x8]
	int Number;//[Offset: 0x8, Size: 0x4]
	bool bNeedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNeedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: SolarSafeArea.SolarMapElementBase.Actor.Object
	SolarSafeAreaConfig* Config;//[Offset: 0x2a0, Size: 0x8]
	int CurrentIndex;//[Offset: 0x2a8, Size: 0x4]
	float TargetTime;//[Offset: 0x2ac, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x2b0, Size: 0x4]
	Vector TargetLocation;//[Offset: 0x2b4, Size: 0xc]
	Vector BeginLocation;//[Offset: 0x2c0, Size: 0xc]
	enum AreaStatus;//[Offset: 0x2cc, Size: 0x1]
	Vector[] AreaPosArray;//[Offset: 0x310, Size: 0x10]
	bool GMShowAllArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	SafeAreaDrone*[] DroneArray;//[Offset: 0x350, Size: 0x10]
	void updateNextSafeArea();// 0x4c8f29c
	void StartShrink();// 0x476eb00
	void ShowEffectInside(bool bInside);// 0x4c8f29c
	void ShowAllSafeArea(bool IsShow);// 0x476e7bc
	void ShowAllDrone(bool IsShow);// 0x476e710
	void SetAreaStatus(enum InStatus);// 0x476ea5c
	void Resume();// 0x476ea2c
	void RefreshSafeArea();// 0x476e868
	void Pause();// 0x476ea40
	void NotifySafeAreaStartShrink();// 0x4c8f29c
	bool IsInSafeArea(Actor* Actor);// 0x476e87c
	void GMStartShrinkArea();// 0x476e6fc
	SafeAreaConfig GetSafeAreaConfig();// 0x476e9ac
	float GetNextSafeAreaRadius();// 0x476e970
	Vector GetNextAreaLocation();// 0x476e9ec
	float GetCurrentSafeAreaRadius();// 0x476e934

--------------------------------
Class: SolarSafeAreaConfig.DataAsset.Object
	int StableTime;//[Offset: 0x30, Size: 0x4]
	Vector StartLocation;//[Offset: 0x34, Size: 0xc]
	Vector2D SafeAreaLimitSize;//[Offset: 0x40, Size: 0x8]
	Texture2D* AreaMask;//[Offset: 0x48, Size: 0x8]
	class SafeAreaDrone* DroneClass;//[Offset: 0x50, Size: 0x8]
	float MinSpace;//[Offset: 0x58, Size: 0x4]
	float MaxSpace;//[Offset: 0x5c, Size: 0x4]
	float DroneHeight;//[Offset: 0x60, Size: 0x4]
	float DroneDistance;//[Offset: 0x64, Size: 0x4]
	SafeAreaConfig[] SafeAreaArray;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SafeAreaDrone.Actor.Object
	SolarSafeArea* SafeArea;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* DroneMeshComponent;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: SafeAreaConfig
	float Radius;//[Offset: 0x0, Size: 0x4]
	float PreShrinkTime;//[Offset: 0x4, Size: 0x4]
	float ShrinkTime;//[Offset: 0x8, Size: 0x4]
	float DamageValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 0x20]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 0x20]
	GameStateBase* Owner;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarGameplayConfigComponent.ActorComponent.Object
	GameplayConfigBase* GameplayConfig;//[Offset: 0xb8, Size: 0x8]
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	GameplayConfigBase* TestGameplayConfig;//[Offset: 0xc8, Size: 0x8]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xd0, Size: 0x8]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd8, Size: 0x8]
	GameplayConfigBase* GetConfigs();// 0x46b21ec

--------------------------------
Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: GameModeGlobalSetting.Object
	delegate OnGlobalSettingChanged;//[Offset: 0x28, Size: 0x10]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 0x4]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 0x4]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 0x1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	float MinHPToLock;//[Offset: 0x50, Size: 0x4]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x57, Size: 0x1]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x45604b4
	void SetTeamDamageEnabled(bool bNewValue);// 0x45608e0
	void SetShowVehicleOnMap(bool bNewValue);// 0x45605c8
	void SetMinHPToLock(float NewValue);// 0x4560758
	void SetMinHPLockEnabled(bool bNewValue);// 0x4560818
	void SetKillPlayerWhenOut(bool bNewValue);// 0x4560cc0
	void SetJetCostEnabled(bool bNewValue);// 0x4560bf8
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x4560b38
	void SetGameCanRebirth(bool bNewValue);// 0x4560e48
	void SetEnergyCostEnabled(bool bNewValue);// 0x4560a70
	void SetDamageEnabled(bool bNewValue);// 0x45609a8
	void SetCanVJetInWater(bool bNewValue);// 0x4561044
	void SetCanLoginBattle(bool bNewValue);// 0x4560d84
	void SetCanHJetInWater(bool bNewValue);// 0x4560f7c
	void SetBigMapEnabled(bool bNewValue);// 0x4560690
	void ReceiveSettingChanged();// 0x4560484
	bool IsVJetCDOverriden();// 0x4560f44
	bool IsTeamDamageEnabled();// 0x45608c4
	bool IsSkydiveFollowMovementEnabled();// 0x4560590
	bool IsShowVehicleOnMap();// 0x45605ac
	bool IsMinHPLockEnabled();// 0x45607fc
	bool IsKillPlayerWhenOut();// 0x4560ca4
	bool IsJetCostEnabledEnabled();// 0x4560bdc
	bool IsHJetCDOverriden();// 0x4560f0c
	bool IsGameCanRebirth();// 0x4560e2c
	bool IsGameCanLoginBattle();// 0x4560d68
	bool IsEnergyCostEnabled();// 0x4560a54
	bool IsDestroyWeaponOnDiscard();// 0x4560558
	bool IsDestroyItemOnDiscard();// 0x4560574
	bool IsDamageEnabled();// 0x456098c
	bool IsBigMapEnabled();// 0x4560674
	enum GetWeaponInfiniteAmmoMode();// 0x4560498
	float GetOverridenVJetCD();// 0x4560f28
	float GetOverridenHJetCD();// 0x4560ef0
	float GetMinHPToLock();// 0x456073c
	enum GetJetAltitudeLimitationMode();// 0x4560b1c
	bool CanVJetInWater();// 0x4561028
	bool CanHJetInWater();// 0x4560f60

--------------------------------
Class: MaterialChangeHandle

--------------------------------
Class: FeedbackWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	FeedbackCanvasPanel* RootPanel;//[Offset: 0x318, Size: 0x8]

--------------------------------
Class: FeedbackCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<FString,FeedbackSingleData> FeedbackMap;//[Offset: 0x150, Size: 0x50]
	<int,FString> FeedbackValueNameMap;//[Offset: 0x1a0, Size: 0x50]

--------------------------------
Class: FeedbackSingleData
	FString NameString;//[Offset: 0x0, Size: 0x10]
	bool bUseAmination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	TweenImage* Tween;//[Offset: 0x18, Size: 0x8]
	SolarUserWidget* AnimationWidget;//[Offset: 0x20, Size: 0x8]
	FName AnimationName;//[Offset: 0x28, Size: 0x8]
	float AnimationPlaySpeed;//[Offset: 0x30, Size: 0x4]
	float AnimationStartTime;//[Offset: 0x34, Size: 0x4]
	float AnimationAgainStartTime;//[Offset: 0x38, Size: 0x4]
	int AnimationLoopNumber;//[Offset: 0x3c, Size: 0x4]
	FName AudioName;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: PlayerWeaponSpreadComponent.WeaponSpreadComponent.ActorComponent.Object

--------------------------------
Class: WeaponSpreadComponent.ActorComponent.Object
	SolarWeapon* MyWeaponActor;//[Offset: 0xb8, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xc0, Size: 0x8]
	GlobalWeaponConfig* GlobalWeaponConfig;//[Offset: 0xc8, Size: 0x8]
	float CurrentSpread;//[Offset: 0xd0, Size: 0x4]
	float SpreadRatio;//[Offset: 0xd4, Size: 0x4]
	SolarGameInstanceBase* GameInstance;//[Offset: 0x120, Size: 0x8]
	bool IsSpreadInitialized();// 0x48d6bb8
	float GetSpread();// 0x48d6bd4
	void Fire(bool hipfire, bool primary);// 0x48d6c08

--------------------------------
Class: GlobalWeaponConfig.SolarDataAsset.DataAsset.Object
	Vector2D StandardViewportSize;//[Offset: 0x38, Size: 0x8]
	float StandardDPIScale;//[Offset: 0x40, Size: 0x4]
	DataTable* WeaponNoticeTable;//[Offset: 0x48, Size: 0x8]
	DataTable* WeaponSkillTable;//[Offset: 0x50, Size: 0x8]
	DataTable* WeaponScopeSensitivityTable;//[Offset: 0x58, Size: 0x8]
	bool bSecondLimitFullForGameDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float QuitBattleUpgradeTriggerTime;//[Offset: 0x64, Size: 0x4]
	float BattleUpgradeCD;//[Offset: 0x68, Size: 0x4]
	float OpenScopeWaitTimeForPC;//[Offset: 0x6c, Size: 0x4]
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* WeaponCrosshairSpreadSpeedCurve;//[Offset: 0x78, Size: 0x8]
	CurveFloat* WeaponCrosshairBackSpeedCurve;//[Offset: 0x80, Size: 0x8]
	float WeaponSkillDataUIDisplayDistance;//[Offset: 0x88, Size: 0x4]
	float PriamayFireIgnoreInterval;//[Offset: 0x8c, Size: 0x4]
	float AssistAimAutoFireRadius;//[Offset: 0x90, Size: 0x4]
	Vector2D AssistAimRangeMaxRate;//[Offset: 0x94, Size: 0x8]
	Vector2D AssistAimRangeMinRate;//[Offset: 0x9c, Size: 0x8]
	float EnableAssistAimDistanceMin;//[Offset: 0xa4, Size: 0x4]
	FName[] AssistAimApproachSockets;//[Offset: 0xa8, Size: 0x10]
	float AssistAimApproachSpeedRate;//[Offset: 0xb8, Size: 0x4]
	Vector2D AssistAimAdsorbRange;//[Offset: 0xbc, Size: 0x8]
	CurveFloat* AssistAimAdsorbEnterRate;//[Offset: 0xc8, Size: 0x8]
	CurveFloat* AssistAimAdsorbExitRate;//[Offset: 0xd0, Size: 0x8]
	FName[] AssistAimAdsorbSockets;//[Offset: 0xd8, Size: 0x10]
	bool bEnableAssistAimAdsorbSlowDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	SoftObjectPath PartUpgradeMaterial;//[Offset: 0xf0, Size: 0x18]
	float PartUpgradeFadeInterval;//[Offset: 0x108, Size: 0x4]
	<enum,FString> CharaterPostureMap;//[Offset: 0x110, Size: 0x50]
	CurveFloat* HitEffectScaleCurve;//[Offset: 0x160, Size: 0x8]
	GameplayTagContainer BlockCharacterSprintTags;//[Offset: 0x168, Size: 0x20]
	FString GetStateByPosture(enum posture);// 0x456725c
	FString GetStateByAnimState(enum CharacterState);// 0x4567404
	bool GetIsGroundByAnimState(enum CharacterState);// 0x4567354

--------------------------------
Class: SolarDataAsset.DataAsset.Object
	void InitFromAsset();// 0x4c8f29c

--------------------------------
Class: SolarGameInstanceBase.GameInstance.Object
	SoftObjectPath LoginMap;//[Offset: 0x1a0, Size: 0x18]
	SoftObjectPath LobbyMap;//[Offset: 0x1b8, Size: 0x18]
	SoftObjectPath EntryMap;//[Offset: 0x1d0, Size: 0x18]
	SoftObjectPath GameMap;//[Offset: 0x1e8, Size: 0x18]
	SoftObjectPath SettlementMap;//[Offset: 0x200, Size: 0x18]
	SoftObjectPath ConfigServerMap;//[Offset: 0x218, Size: 0x18]
	FString ConfigBattleAddr;//[Offset: 0x230, Size: 0x10]
	int ConfigBattlePort;//[Offset: 0x240, Size: 0x4]
	FString ConfigBackendAddr;//[Offset: 0x248, Size: 0x10]
	int ConfigBackendPort;//[Offset: 0x258, Size: 0x4]
	int BuildNumber;//[Offset: 0x25c, Size: 0x4]
	class SolarSaveGame* SaveGameClass;//[Offset: 0x260, Size: 0x8]
	SoftClassPath DefaultOperationLayout;//[Offset: 0x268, Size: 0x18]
	SoftClassPath DefaultLockSettings;//[Offset: 0x280, Size: 0x18]
	class SolarReplayManager* ReplayManagerClass;//[Offset: 0x298, Size: 0x8]
	SoftClassPath DefaultGameModeLockSettings;//[Offset: 0x2a0, Size: 0x18]
	bool bBaseManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	bool bGameManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	bool bLuaManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1]
	delegate OnBaseManagersInit;//[Offset: 0x2c0, Size: 0x10]
	delegate OnGameManagersInit;//[Offset: 0x2d0, Size: 0x10]
	delegate OnLuaManagersInit;//[Offset: 0x2e0, Size: 0x10]
	GameArgs* GameArgsManager;//[Offset: 0x308, Size: 0x8]
	UIManager* UIManager;//[Offset: 0x310, Size: 0x8]
	SolarTimerManager* SolarTimerManager;//[Offset: 0x318, Size: 0x8]
	SolarMainPlayerModel* MainPlayerModel;//[Offset: 0x320, Size: 0x8]
	SolarGameConfigManager* GameConfigManager;//[Offset: 0x328, Size: 0x8]
	SolarLuaHelper* SolarLuaHelper;//[Offset: 0x330, Size: 0x8]
	SolarAnoHelper* SolarAnoHelper;//[Offset: 0x338, Size: 0x8]
	SolarTableManager* SolarTableManager;//[Offset: 0x340, Size: 0x8]
	SolarTcpNetworkManager* SolarTcpNetworkManager;//[Offset: 0x348, Size: 0x8]
	SolarUDPManager* SolarUDPManager;//[Offset: 0x350, Size: 0x8]
	SolarAssetManager* SolarAssetManager;//[Offset: 0x358, Size: 0x8]
	SolarItemManager* SolarItemManager;//[Offset: 0x360, Size: 0x8]
	SolarInteractableManager* SolarInteractableManager;//[Offset: 0x368, Size: 0x8]
	SolarPlatformHelper* SolarPlatformHelper;//[Offset: 0x370, Size: 0x8]
	SolarMapManager* SolarMapManager;//[Offset: 0x378, Size: 0x8]
	WeaponGrowthManager* WeaponGrowthManager;//[Offset: 0x380, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x388, Size: 0x8]
	IMChatObject* SolarIMChatObject;//[Offset: 0x390, Size: 0x8]
	SolarLuaManager* SolarLuaManager;//[Offset: 0x398, Size: 0x8]
	SolarGameStatistics* SolarGameStatistics;//[Offset: 0x3a0, Size: 0x8]
	SolarWeaponMergeMeshManager* WeaponMergeMeshManager;//[Offset: 0x3a8, Size: 0x8]
	CrashReportManager* CrashReportManager;//[Offset: 0x3b0, Size: 0x8]
	SolarPopPanelManager* SolarPopPanelManager;//[Offset: 0x3b8, Size: 0x8]
	SolarApplicationLifetimeManager* SolarApplicationLifetimeManager;//[Offset: 0x3c0, Size: 0x8]
	SolarHomeActorManager* SolarHomeActorManager;//[Offset: 0x3c8, Size: 0x8]
	SolarGameplayLogger* SolarGameplayLoggger;//[Offset: 0x3d0, Size: 0x8]
	SolarAttributeSubSystem* SolarAttributeSubSystem;//[Offset: 0x3d8, Size: 0x8]
	SCustomizedGameModeManager* CustomizedGameManager;//[Offset: 0x3e0, Size: 0x8]
	SolarRedHintManager* SolarRedHintMgr;//[Offset: 0x3e8, Size: 0x8]
	SolarGameModeSelectionManager* SolarGameModeSelectionMgr;//[Offset: 0x3f0, Size: 0x8]
	SolarPingFpsManager* SolarPingFpsMgr;//[Offset: 0x3f8, Size: 0x8]
	SolarGameUserSettingsMgr* SolarGameUserSettingsMgr;//[Offset: 0x400, Size: 0x8]
	SolarLoginManager* SolarLoginManager;//[Offset: 0x408, Size: 0x8]
	SolarLockSettingsMgr* SolarLockSettingsMgr;//[Offset: 0x410, Size: 0x8]
	SolarGameProgressManager* SolarGameProgressMgr;//[Offset: 0x418, Size: 0x8]
	SolarABTestManager* SolarABTestManager;//[Offset: 0x420, Size: 0x8]
	SolarHttpManager* SolarHttpManager;//[Offset: 0x428, Size: 0x8]
	SolarActivityManager* SolarActivityManager;//[Offset: 0x430, Size: 0x8]
	SolarTutorialManager* SolarTutorialManager;//[Offset: 0x438, Size: 0x8]
	SolarReplayManager* SolarReplayManager;//[Offset: 0x440, Size: 0x8]
	SolarSaveGame* SolarSaveGame;//[Offset: 0x448, Size: 0x8]
	class SettlementStageManager* SettlementManagerClass;//[Offset: 0x450, Size: 0x28]
	SettlementStageManager* SettlementManager;//[Offset: 0x478, Size: 0x8]
	CGMCrossLevelDataMgr* CrossLevelDataMgr;//[Offset: 0x480, Size: 0x8]
	class SolarGraphicSettings* SolarGraphicSettingsClass;//[Offset: 0x4a0, Size: 0x28]
	SolarAccessLuaDataUtils* LuaDataAccessUtils;//[Offset: 0x4c8, Size: 0x8]
	SolarAkSoundManager* SolarAkSoundManager;//[Offset: 0x4d0, Size: 0x8]
	bool bIsDedicatedServerStressTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	KeyMappingManager* KeyMappingManager;//[Offset: 0x4e0, Size: 0x8]
	SolarSpecialEffectsMgr* SolarSpecialEffectsManager;//[Offset: 0x4e8, Size: 0x8]
	SolarGraphicSettings* SolarGraphicSettings;//[Offset: 0x4f0, Size: 0x8]
	AndroidInputManager* AndroidInputManager;//[Offset: 0x4f8, Size: 0x8]
	delegate OnTouchInputDelegate;//[Offset: 0x510, Size: 0x10]
	RegistedActorContainer CachedRegistedActors;//[Offset: 0x520, Size: 0x50]
	void SolarGm_UploadLogFile();// 0x4677670
	void SolarGM_TransmitGMLua(FString playerName, out const FString[] GmArray);// 0x4c8f29c
	void SolarGM_TransmitGM(FString playerName, out const FString[] transmitGm);// 0x4677be4
	void SolarGm_TestTutorialInLobby(int ID);// 0x4677730
	void SolarGm_SwitchFastFont(bool bIsEnable);// 0x46775c4
	void SolarGm_StopRecordingRePlay();// 0x4677b20
	void SolarGm_StopPlayingReplay();// 0x46777d4
	void SolarGm_StartRecordingLocalReplay(FString Filename);// 0x4677b34
	void SolarGm_RequestReplayList(int PageIndex, int PageSize);// 0x467798c
	void SolarGm_RequestPlayReplayByIdx(uint32 Index);// 0x46777e8
	void SolarGm_RequestPlayReplay(FString BattleID, FString DownloadUrl);// 0x467788c
	void SolarGm_PlayLocalReplay(FString Filename);// 0x4677a70
	void SolarGM_LobbyLua(FString CmdName, out const FString[] Params);// 0x4c8f29c
	void SolarGM_Lobby(FString CmdName, out const FString[] Params);// 0x4677ffc
	void SolarGM_GoTutorialLevel(FString LevelName, int Proficiency);// 0x4677e10
	void SolarGM_GoHome();// 0x4677f04
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);// 0x4677684
	void SolarGM_AddWeaponExpLua(int weaponid, int Count);// 0x4c8f29c
	void SolarGM_AddWeaponExp(int weaponid, int Count);// 0x4677d2c
	void SolarGM_AddItemLua(int ItemID, int Count);// 0x4c8f29c
	void SolarGM_AddItem(int ItemID, int Count);// 0x4677f18
	void ShutdownAnoSDK();// 0x4c8f29c
	void SetIsFirstLaunch(bool bIsFirst);// 0x4677058
	bool ServerTravel(FString Map, int ListenPort, bool bSpectator, bool bSkipGameNotify, FString options);// 0x467918c
	void SaveGame();// 0x467757c
	void RequestShutDown(FString Reason);// 0x4678144
	void RegisterNetworkManager();// 0x4c8f29c
	void OnManagersInitialized__DelegateSignature();// 0x4c8f29c
	void OnDisconnect();// 0x4c8f29c
	void LuaStartGameFrameWork();// 0x4c8f29c
	void LuaInitGameFrameWork();// 0x4c8f29c
	bool IsStandalone();// 0x4678da8
	static bool IsSolarServer(const Object* WorldContextObject);// 0x4678cc8
	bool IsSkipLogin();// 0x4677278
	bool IsServerOrStandalone();// 0x4678c20
	bool IsListenServer();// 0x4678c90
	bool IsGIsEditor();// 0x4678de0
	bool IsFirstLaunchAfterVersionUpdate();// 0x4677104
	bool IsEditor();// 0x4678e18
	bool IsDedicatedServerStressTest();// 0x4677120
	bool IsDedicatedServer();// 0x4678d70
	bool IsClientOrStandalone();// 0x4678be8
	bool IsClient();// 0x4678c58
	void InitLuaClasses();// 0x4c8f29c
	void InitGameManagers();// 0x46772c4
	void GoHomeLuaCall();// 0x4c8f29c
	SolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();// 0x467857c
	WeaponGrowthManager* GetWeaponGrowthManager();// 0x4678750
	SolarTutorialManager* GetSolarTutorialManager();// 0x4678290
	SolarTimerManager* GetSolarTimerManager();// 0x4678a64
	SolarTcpNetworkManager* GetSolarTcpNetworkManager();// 0x4678888
	SolarTableManager* GetSolarTableManager();// 0x46788bc
	SolarSaveGame* GetSolarSaveGame();// 0x4677590
	SolarReplayManager* GetSolarReplayManager();// 0x467825c
	SolarRedHintManager* GetSolarRedHintManager();// 0x46786b4
	SolarPopPanelManager* GetSolarPopPanelManager();// 0x467864c
	SolarPlatformHelper* GetSolarPlatformHelper();// 0x46787b8
	SolarPingFpsManager* GetSolarPingFpsManager();// 0x4678618
	SolarMapManager* GetSolarMapManager();// 0x4678784
	SolarMainPlayerModel* GetSolarMainPlayerModel();// 0x4678a30
	SolarLuaManager* GetSolarLuaManager();// 0x46785e4
	SolarLuaHelper* GetSolarLuaHelper();// 0x46789c8
	SolarLoginManager* GetSolarLoginManager();// 0x4678364
	SolarLockSettingsMgr* GetSolarLockSettingsManager();// 0x46784e0
	SolarItemManager* GetSolarItemManager();// 0x4678820
	SolarInteractableManager* GetSolarInteractableManager();// 0x46787ec
	IMChatObject* GetSolarIMChatObject();// 0x46786e8
	SolarHttpManager* GetSolarHttpManager();// 0x467839c
	SolarHomeActorManager* GetSolarHomeActorManager();// 0x4678478
	SolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();// 0x4678514
	SolarGameplayLogger* GetSolarGameplayLogger();// 0x46782fc
	SolarGameModeSelectionManager* GetSolarGameModeSelectionManager();// 0x4678680
	static SolarGameInstanceBase* GetSolarGameInstanceBase(Object* WorldContextObject);// 0x46783d4
	static SolarAnoHelper* GetSolarAnoHelperStatic(Object* WorldContextObject);// 0x46788f0
	SolarAnoHelper* GetSolarAnoHelper();// 0x4678994
	SolarAkSoundManager* GetSolarAkSoundManager();// 0x467752c
	SolarAkGameObject* GetSolarAkGameObject();// 0x467871c
	SolarActivityManager* GetSolarActivityManager();// 0x4678380
	SolarABTestManager* GetSolarABTestManager();// 0x46783b8
	SettlementStageManager* GetSettlementStageManager();// 0x46782e0
	SolarCharacter* GetPlayerCharacter();// 0x4678330
	FString GetPIEServerURL();// 0x4678acc
	int GetPIEInstance();// 0x4678a98
	FString GetNetModeString();// 0x4678e50
	byte GetNetMode();// 0x4678f00
	KeyMappingManager* GetKeyMappingManager();// 0x4678228
	bool GetIsMutiPlayer();// 0x4678bb0
	SolarGameStatistics* GetGameStatistics();// 0x46785b0
	SolarGameConfigManager* GetGameConfigManager();// 0x46789fc
	SolarOperationUIElement* GetDefaultOperationLayout();// 0x4677548
	SCustomizedGameModeManager* GetCustomizedGameManager();// 0x46784ac
	CGMCrossLevelDataMgr* GetCrossLevelDataMgr();// 0x46782c4
	CrashReportManager* GetCrashReportManager();// 0x4678548
	int GetClientNumber();// 0x4678b7c
	static void GetCategorizedActorsOfType(const Object* WorldContextObject, enum InActorType, out Actor*[] OutActors);// 0x467713c
	SolarAssetManager* GetAssetManager();// 0x4678854
	int64 GetAppActiveTimestampInterval();// 0x46781f4
	void ExecuteCommandArray(out const FString[] cmdArray);// 0x46772d8
	void ExecuteCommand(FString Cmd);// 0x46773cc
	void ExecuteBackKeyLuaCall();// 0x4c8f29c
	void ExecGameArgs(FString Args, out FString FailReason, out byte Branches);// 0x4678f34
	void ExecConsoleCmd(FString Cmd);// 0x467747c
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, int FGuid_A, int FGuid_B, int FGuid_C, int FGuid_D);// 0x4679384
	void ClearGameManagers();// 0x46772b0
	void CheckSavedDirFiles(out FString[] Files);// 0x4c8f29c
	void Browse(FString URL, byte TravelType);// 0x4679098

--------------------------------
Class: SolarSaveGame.SaveGame.Object
	bool HasShowNewPlayerGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EditorGameModeId;//[Offset: 0x2c, Size: 0x4]
	NeverShowCheckWindow[] NeverShowCheckWindowList;//[Offset: 0x30, Size: 0x10]
	bool HasReadSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool HasReadSurvey2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool HasPlayedHuntMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	byte MatchTimes;//[Offset: 0x43, Size: 0x1]
	bool HasCompleteTeamUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool IsMorrowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bClickSocialEntranceBtn1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bClickSocialEntranceBtn2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	bool bClickSocialEntranceBtn3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bClickLiveBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	int64 SocialLinkLastClickTime;//[Offset: 0x50, Size: 0x8]
	int[] DisplayedProductIDs;//[Offset: 0x58, Size: 0x10]
	uint32[] ReadMailIds;//[Offset: 0x70, Size: 0x10]
	bool ValidateNeverShowCheckWindow(int TargetConfirmID);// 0x476fd24
	void UpdateNeverShowCheckWindow(int TargetConfirmID, enum NewDuration);// 0x476fc40
	void UpdateDisplayedIDs(out const int[] InIDs);// 0x476fabc
	void PrintTwiceConfirmCheckWindowList();// 0x476fb7c
	bool DeleteNeverShowCheckWindow(int TargetConfirmID);// 0x476fb90
	void ClearDisplayIDs();// 0x476faa8

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: NeverShowCheckWindow
	int ConfirmID;//[Offset: 0x0, Size: 0x4]
	DateTime Timestamp;//[Offset: 0x8, Size: 0x8]
	enum Duration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DateTime

--------------------------------
Class: GameArgs.Object
	FString[] CommandLineArgs;//[Offset: 0x30, Size: 0x10]
	bool SkipTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ExecGameArgs(FString Args, out FString FailReason);// 0x37b7888

--------------------------------
Class: UIManager.SolarGameManager.Object
	<FString,SolarUserWidget*> WidgetOpenedMap;//[Offset: 0x38, Size: 0x50]
	<FString,int> WidgetCountMap;//[Offset: 0x88, Size: 0x50]
	<int,Texture2D*> SkinTextureCache;//[Offset: 0xd8, Size: 0x50]
	SolarUserWidget*[] TmpRemovedWidgets;//[Offset: 0x128, Size: 0x10]
	LoadingUIBase* LoadingScreenUI;//[Offset: 0x158, Size: 0x8]
	bool bLoadingScreenShouldDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	FString CurrentLoadingUIName;//[Offset: 0x168, Size: 0x10]
	SolarUserWidget* SolarBigMap;//[Offset: 0x188, Size: 0x8]
	delegate[] OnBigMapOpenDelegateGroup;//[Offset: 0x190, Size: 0x10]
	delegate[] OnBigMapVisibilityChangedDelegateGroup;//[Offset: 0x1a0, Size: 0x10]
	DataTable* BattleWidgetSettings;//[Offset: 0x1b0, Size: 0x8]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x1c8, Size: 0x8]
	static void UpdateButtonSprite(Button* TargetButton, FString AtlasType, FString NormalSpName, FString PressedSpName, FString HoveredSpName, FString DisableSpName);// 0x48ae614
	void TriggerDelegate();// 0x48acf54
	SolarUserWidget* ShowUIBySubClassWithCount(class SolarUserWidget SubClass, int RootID);// 0x48add5c
	SolarUserWidget* ShowUIBySubClass(class SolarUserWidget SubClass, int RootID);// 0x48ade4c
	SolarUserWidget* ShowUIByName(FString InName, int RootID);// 0x37b7888
	static void SetWidgetLayout(Widget* InWidget, float Scale, float Opacity, float PositionX, float PositionY);// 0x48ad00c
	static void SetWidgetChildrenLayout(UserWidget* InRootWidget, out const FName WidgetName, float Scale, float Opacity, float PositionX, float PositionY);// 0x48ad1a8
	SolarUserWidget* SetUIActive(SolarUserWidget* InWidget, const bool Inactive);// 0x4c8f29c
	void SetPersistentUserWidgetAndChildren(UserWidget* UserWidget, bool bInPersistent);// 0x48af2ac
	static void SetMaterialInstanceParams(Image* Image, FString ParamName, float Value);// 0x48ad8f4
	static void SetMaterialInstanceColor(Image* Image, FString ParamName, out const LinearColor Value);// 0x48ad7c0
	void SetLoadingScreenDisplay(bool bDisplay, bool bSetUIState);// 0x48acdac
	static void SetImageTintColor(Image* IMG, out const LinearColor InColor);// 0x48adaf0
	static void SetImageTexture(Image* IMG, Texture2D* Texture);// 0x48ae314
	static void SetImageColor(Image* IMG, float R, float G, float B, float A);// 0x48ae178
	static void SetFireInputStyle(FireInputWidget* FireInput, const SlateWidgetStyleAsset* Style);// 0x48adfd0
	static void SetCheckedState(CheckBox* Box, const enum State);// 0x48adbd4
	static void SetCheckboxStyle(CheckBox* CheckBox, const SlateWidgetStyleAsset* Style);// 0x48ada1c
	static void SetCheckBoxIsChecked(CheckBox* CheckBox, bool Checked);// 0x48ae490
	static void SetButtonStyle(Button* BTN, const SlateWidgetStyleAsset* Style);// 0x48ae0a4
	void RemoveUIFromOpenedMap(FString UIName);// 0x48af064
	void RemoveAllWidgets();// 0x37b7888
	void PreLoadUIAsset(FString MapName);// 0x37b7888
	void OpenUIGM(FString UIID, int RootID);// 0x37b7888
	void OpenConfirmUIInLua(int ConfirmID);// 0x37b7888
	void OnUserWidgetDestroyLuaObject(SolarUserWidget* UserWidget);// 0x48acf68
	void OnToggleBigMapVisibility(bool bVisible);// 0x48accd4
	void OnPostLoadMapInitUIRoot(World* InWorld);// 0x48aca14
	void OnGameManagersInitialized();// 0x48ac930
	void OnClientStartGame();// 0x48ac91c
	void OnBigMapOpen();// 0x48acd80
	void MarkDestroyLuaUserWidgetAndChildren(UserWidget* UserWidget);// 0x48af208
	void LuaCloseUIWithCount(FString MapName);// 0x48adcac
	void LuaCloseUI(FString MapName);// 0x37b7888
	static Texture2D* LoadTexture2DBySoftPath(out const SoftObjectPath Path);// 0x48aea64
	static Texture2D* LoadTexture2DByPath(Object* InOuter, FString FullPath);// 0x48aeb28
	static Texture2D* LoadTexture2D(Object* InOuter, FString TextureType, FString TexName);// 0x48aec1c
	static Texture2D* LoadQualityBG(Object* InOuter, const int InQuality);// 0x48ae97c
	static PaperSprite* LoadPaperSpriteByPath(Object* InOuter, FString FullPath);// 0x48aed60
	static PaperSprite* LoadPaperSprite(Object* InOuter, FString AtlasPath, FString SpName);// 0x48aee54
	static MaterialInterface* LoadMaterialInstance(Object* InOuter, FString MaterialType, FString MaterialName);// 0x48ae838
	bool IsLoadingScreenAvailable();// 0x48acd94
	static void InvalidateWidgetPrepass(Widget* InWidget);// 0x48adf3c
	void InitUIRoot();// 0x37b7888
	static void InitLvlTextWidget(TextBlock* InHeadTextWidget, TextBlock* InTrailTextWidget);// 0x48ad3a0
	void HandleOpenWidget(const UserWidget* MapName);// 0x37b7888
	static FString GetWeaponTextureFullPath(out FString IconPath);// 0x48ad6c0
	UserWidget* GetUIPanel(FString MapName);// 0x37b7888
	static FString GetTexture2DFullPath(out FString PrePath, out FString IconPath);// 0x48ad564
	static FString GetQualityBGFullPath(const int InQuality);// 0x48ad474
	Texture2D* GetPlayerAvatarByID(int PlayerAvatarID);// 0x37b7888
	static bool GetCheckBoxIsChecked(CheckBox* CheckBox);// 0x48ae3e8
	static CanvasPanelSlot* GetCanvasPanelSlotForWidget(Widget* Widget);// 0x48ae570
	CustomWidget_TableRow GetBattleWidgetSetting(FString ConfigName);// 0x48acab8
	UserWidget* GetBattleControlWidget();// 0x37b7888
	UserWidget* GetBattleBackpackWidget();// 0x37b7888
	void ExitSpectateMode();// 0x37b7888
	void ExecuteSetPersistentUserWidget(UserWidget* UserWidget, FString ModuleName, bool bInPersistent);// 0x37b7888
	void ExecuteDestroyLuaUserWidget(UserWidget* UserWidget, FString ModuleName);// 0x37b7888
	void EnterSpectateMode();// 0x37b7888
	ActorMarkBase* CreateWorldPosMark(class ActorMarkBase InActorMarkClass, Vector InPos, PlayerController* Controller);// 0x37b7888
	LoadingUIBase* CreateNewLoadingScreen(class LoadingUIBase LoadingUIClass);// 0x48acea8
	ActorMarkBase* CreateActorMark(class ActorMarkBase InActorMarkClass, Actor* InActor, PlayerController* Controller);// 0x37b7888
	void CloseUIGM(FString UIID);// 0x37b7888
	void ClearAllOpenedWidget();// 0x48af050
	void BindWidgetVisibilityChangedEvent(out const delegate VisibilityChangedEvent);// 0x48ac944
	void BatchRemovedWidgets();// 0x48aef98
	void AddUIToOpenedMap(FString UIName, SolarUserWidget* Widget);// 0x48af114
	void AddBatchRemovedWidget(SolarUserWidget* UserWidget);// 0x48aefac

--------------------------------
Class: SolarGameManager.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	void ReceiveManagerPostIntialized();// 0x4c8f29c
	void ReceiveManagerIntialized();// 0x4c8f29c
	static SolarGameManager* K2_CreateGameManager(SolarGameInstanceBase* Owner, class SolarGameManager Class);// 0x467e23c

--------------------------------
Class: LoadingUIBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_BG;//[Offset: 0x318, Size: 0x8]
	ProgressBar* LoadProgress;//[Offset: 0x320, Size: 0x8]
	SolarTextBlock* Txt_Percent_Num;//[Offset: 0x328, Size: 0x8]
	SolarTextBlock* Txt_Tips;//[Offset: 0x330, Size: 0x8]
	<FString,Texture2D*> BGImgMap;//[Offset: 0x338, Size: 0x50]
	FString[] TipArray;//[Offset: 0x390, Size: 0x10]
	int CurrentIndex;//[Offset: 0x3a0, Size: 0x4]
	float FakeProgress;//[Offset: 0x3a4, Size: 0x4]
	void SetTips(out const FText InTips);// 0x4584c6c
	void SetLoadingProgress(float InPercent);// 0x4584d7c
	void SetFakeProgress(float NewProgress);// 0x4584ba0
	void SetBGImgFromPath(out const SoftObjectPath Path);// 0x4584e20
	void SetBGImg(FString ImgName);// 0x4584ee4
	void OnWidgetReleasedAsLoadingScreen(Object* Outer);// 0x4c8f29c
	void OnWidgetCreatedAsLoadingScreen(Object* Outer);// 0x4c8f29c
	void OnLoadingStarted();// 0x4c8f29c
	void OnLoadingFinished();// 0x4c8f29c
	void OnLevelPreLoad(FString MapPackageName);// 0x4c8f29c
	void OnAsyncLoadingFlushUpdate();// 0x4c8f29c
	void LoadingStarted();// 0x4584c58
	void LoadingFinished();// 0x4584c44

--------------------------------
Class: SolarTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	FText Text;//[Offset: 0x150, Size: 0x18]
	int LocTextID;//[Offset: 0x168, Size: 0x4]
	enum PreviewLang;//[Offset: 0x16c, Size: 0x1]
	Vector2D CalcSize;//[Offset: 0x170, Size: 0x8]
	delegate TextDelegate;//[Offset: 0x178, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x188, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1c0, Size: 0x50]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x210, Size: 0x18]
	SlateBrush StrikeBrush;//[Offset: 0x228, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x2c0, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2c8, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2d8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2e8, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 0x1]
	void SetWrapTextAt(float InWrapTextAt);// 0x4826458
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x48263ac
	void SetText(FText InText);// 0x4826098
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x48267c0
	void SetShadowOffset(Vector2D InShadowOffset);// 0x4826c7c
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x4826d24
	void SetOpacity(float InOpacity);// 0x4826dd0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x4826714
	void SetMargin(Margin InMargin);// 0x4826664
	void SetLocLangTextData(FText InText, bool InEnableLocText, int InLocTextID, enum InPreviewLang, SlateFontSizeForLang InSlateFontSizeForLang);// 0x4826e7c
	void SetLineHeightPercentage(float InLineHeightPercentage);// 0x48265b8
	void SetFont(SlateFontInfo InFontInfo);// 0x4826ad8
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x4827198
	void SetAutoWrapText(bool InAutoTextWrap);// 0x4826504
	Vector2D GetTextSize();// 0x48262f8
	FText GetText();// 0x4826220
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x4826334
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x4826370

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x128, Size: 0x3]
	byte Justification;//[Offset: 0x12b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x12c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x130, Size: 0x4]
	Margin Margin;//[Offset: 0x134, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x144, Size: 0x4]
	void SetJustification(byte InJustification);// 0x5cb5bcc

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: SlateFontSizeForLang
	bool bEnableFontForLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int DefaultFontSize;//[Offset: 0x4, Size: 0x4]
	SlateFontSizeLangData[] FontForLangGroup;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SlateFontSizeLangData
	enum SpecialLang;//[Offset: 0x0, Size: 0x1]
	int SpecialFontSize;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarUIRoot.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x140, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x148, Size: 0x2b8]
	LinearColor ColorAndOpacity;//[Offset: 0x400, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x410, Size: 0x10]
	byte ClickMethod;//[Offset: 0x420, Size: 0x1]
	byte TouchMethod;//[Offset: 0x421, Size: 0x1]
	byte PressMethod;//[Offset: 0x422, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 0x1]
	delegate OnClicked;//[Offset: 0x428, Size: 0x10]
	delegate OnPressed;//[Offset: 0x438, Size: 0x10]
	delegate OnReleased;//[Offset: 0x448, Size: 0x10]
	delegate OnHovered;//[Offset: 0x458, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x468, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x5c8b7b4
	void SetStyle(out const ButtonStyle InStyle);// 0x5c8ba7c
	void SetPressMethod(byte InPressMethod);// 0x5c8b710
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x5c8b9d8
	void SetClickMethod(byte InClickMethod);// 0x5c8b858
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x5c8b934
	bool IsPressed();// 0x5c8b8fc

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x5c91614
	PanelSlot* GetContentSlot();// 0x5c916c0
	Widget* GetContent();// 0x5c915e0

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x98]
	SlateBrush Hovered;//[Offset: 0xa0, Size: 0x98]
	SlateBrush Pressed;//[Offset: 0x138, Size: 0x98]
	SlateBrush Disabled;//[Offset: 0x1d0, Size: 0x98]
	Margin NormalPadding;//[Offset: 0x268, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x278, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x288, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x2a0, Size: 0x18]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: FireInputWidget.Widget.Visual.Object
	SlateBrush JoyStickThumb;//[Offset: 0x128, Size: 0x98]
	SlateBrush JoyStickThumbPress;//[Offset: 0x1c0, Size: 0x98]
	SlateBrush JoyStickIcon;//[Offset: 0x258, Size: 0x98]
	Vector2D VisualSize;//[Offset: 0x2f0, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x2f8, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x300, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x308, Size: 0x8]
	float ActiveOpacity;//[Offset: 0x310, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x314, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x318, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	delegate OnJoystickPressed;//[Offset: 0x330, Size: 0x10]
	delegate OnJoystickRelease;//[Offset: 0x340, Size: 0x10]
	delegate OnInputYawAndPitch;//[Offset: 0x350, Size: 0x10]
	void SetJoyStickThumbBrush(out const ButtonStyle ButtonStyle);// 0x45575cc
	void SetJoyStickIcon(out const SlateBrush Icon);// 0x45573f8
	void SetInputScale(Vector2D Scale);// 0x455768c
	void ResetControlInput();// 0x45573e4

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x139, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x13c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0x610]
	SlateWidgetStyleAsset* Style;//[Offset: 0x760, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x768, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x770, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x778, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x780, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x788, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x790, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x798, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x7a0, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x7a8, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x7b0, Size: 0x1]
	Margin Padding;//[Offset: 0x7b4, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x7c8, Size: 0x28]
	byte ClickMethod;//[Offset: 0x7f0, Size: 0x1]
	byte TouchMethod;//[Offset: 0x7f1, Size: 0x1]
	byte PressMethod;//[Offset: 0x7f2, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f3, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x7f8, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x5c8dbf0
	void SetPressMethod(byte InPressMethod);// 0x5c8db4c
	void SetIsChecked(bool InIsChecked);// 0x5c8dddc
	void SetClickMethod(byte InClickMethod);// 0x5c8dc94
	void SetCheckedState(enum InCheckedState);// 0x5c8dd38
	bool IsPressed();// 0x5c8def4
	bool IsChecked();// 0x5c8debc
	enum GetCheckedState();// 0x5c8de88

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x98]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xa8, Size: 0x98]
	SlateBrush UncheckedPressedImage;//[Offset: 0x140, Size: 0x98]
	SlateBrush CheckedImage;//[Offset: 0x1d8, Size: 0x98]
	SlateBrush CheckedHoveredImage;//[Offset: 0x270, Size: 0x98]
	SlateBrush CheckedPressedImage;//[Offset: 0x308, Size: 0x98]
	SlateBrush UndeterminedImage;//[Offset: 0x3a0, Size: 0x98]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x438, Size: 0x98]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x4d0, Size: 0x98]
	Margin Padding;//[Offset: 0x568, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x578, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x5a0, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x5c8, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x5e0, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x5f8, Size: 0x18]

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x160, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x170, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x198, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1a8, Size: 0x50]
	SlateBrush StrikeBrush;//[Offset: 0x1f8, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x290, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x298, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2a8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2b8, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 0x1]
	void SetText(FText InText);// 0x5cb4744
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x5cb4b54
	void SetShadowOffset(Vector2D InShadowOffset);// 0x5cb5000
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x5cb50a0
	void SetOpacity(float InOpacity);// 0x5cb5144
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x5cb4ab0
	void SetFont(SlateFontInfo InFontInfo);// 0x5cb4e64
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x5cb51e8
	void SetAutoWrapText(bool InAutoTextWrap);// 0x5cb4a04
	FText GetText();// 0x5cb48cc
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x5cb499c
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x5cb49d0

--------------------------------
Class: CustomWidget_TableRow.TableRowBase
	SoftObjectPath TeammateState;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath BattleScore;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath SpectatorListPath;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath SafeAreaProgress;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: TableRowBase

--------------------------------
Class: ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Actor* CurrentFollowActor;//[Offset: 0x330, Size: 0x8]
	PlayerController* CurrentPlayerController;//[Offset: 0x338, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x340, Size: 0x8]
	Vector2D MarkPanelSize;//[Offset: 0x348, Size: 0x8]
	void SetUpdateState(bool InShouldUpdateLocation);// 0x4510cec
	void InitActorMarkBaseByFixedPos(Vector Pos, PlayerController* Controller);// 0x4510dcc
	void InitActorMarkBase(Actor* InActor, PlayerController* Controller);// 0x4510eb4
	Vector GetFollowActorLocation();// 0x4510cb4
	float GetDistance();// 0x4510d98
	Actor* GetCurrentFollowActor();// 0x4510c80

--------------------------------
Class: SolarTimerManager.Object
	bool bFullCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void UnPauseTimerInternal(TimerHandle Handle);// 0x482961c
	void TimerCallbackToLuaInternal(FString CallbackKey);// 0x37b7888
	TimerHandle SetTimerForNextTickInternal(FString CallbackKey);// 0x4829808
	void PauseTimerInternal(TimerHandle Handle);// 0x48296c0
	void OnLuaContextCleanup(const bool InBFullCleanup);// 0x37b7888
	bool IsValidTimerInternal(TimerHandle Handle);// 0x48294bc
	bool IsTimerActiveInternal(TimerHandle Handle);// 0x482956c
	void ClearTimerInternal(TimerHandle Handle);// 0x4829764
	TimerHandle AddTimerInternal(FString CallbackKey, const float Rate, const bool IsLoop, const float InitialStartDelay);// 0x48298c0

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarMainPlayerModel.Object
	void SyncFromPlayerData(int InAccountFlag);// 0x470f0b8
	bool IsAccountFlagOn();// 0x470f080

--------------------------------
Class: SolarGameConfigManager.Object
	DataTable* WeaponDTInstance;//[Offset: 0x30, Size: 0x8]
	DataTable* WeaponAppearanceDTInstance;//[Offset: 0x38, Size: 0x8]
	DataTable* ItemActorDTInstance;//[Offset: 0x40, Size: 0x8]
	DataTable* SolarBackpackFXDTInstance;//[Offset: 0x48, Size: 0x8]
	DataTable* CharacterDTInstance;//[Offset: 0x50, Size: 0x8]
	DataTable* ItemResourceDTInstance;//[Offset: 0x58, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfigAsset;//[Offset: 0x60, Size: 0x8]
	GlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;//[Offset: 0x68, Size: 0x8]
	float HeadHitValue;//[Offset: 0x70, Size: 0x4]
	float ShieldReducePhy;//[Offset: 0x74, Size: 0x4]
	float ShieldReduceEn;//[Offset: 0x78, Size: 0x4]
	float ArmorReducePhy;//[Offset: 0x7c, Size: 0x4]
	float ArmorReduceEn;//[Offset: 0x80, Size: 0x4]
	float BaseHeadShotAddit;//[Offset: 0x84, Size: 0x4]
	int BackpackEnergyID;//[Offset: 0x88, Size: 0x4]
	int BackpackExtraEnergyID;//[Offset: 0x8c, Size: 0x4]
	int MedicineItemId;//[Offset: 0x90, Size: 0x4]
	int RadarItemId;//[Offset: 0x94, Size: 0x4]
	int ShieldRechargerItemId;//[Offset: 0x98, Size: 0x4]
	float UnPickupItemTime;//[Offset: 0x9c, Size: 0x4]
	float UnAutoPickupItemTime;//[Offset: 0xa0, Size: 0x4]
	float AutoPickupTime;//[Offset: 0xa4, Size: 0x4]
	float AutoMarkCDTime;//[Offset: 0xa8, Size: 0x4]
	int[] AutoMarkItemTypeList;//[Offset: 0xb0, Size: 0x10]
	float AutoMarkTeammateDistance;//[Offset: 0xc0, Size: 0x4]
	float PickupCapsuleRadius;//[Offset: 0xc4, Size: 0x4]
	float PickupCapsuleHalfHeight;//[Offset: 0xc8, Size: 0x4]
	float MapVoiceSurviveTime;//[Offset: 0xcc, Size: 0x4]
	float MapVoiceDataRefreshTime;//[Offset: 0xd0, Size: 0x4]
	void OnInitialized();// 0x37b7888
	LinearColor GetLowQualityColorByQuality(int Quality);// 0x46767b0
	LinearColor GetHUDDecorateColorByQuality(int Quality);// 0x4676440
	LinearColor GetHUDColorByQuality(int Quality);// 0x46765a0
	LinearColor GetHUDBGColorByQuality(int Quality);// 0x46764f0
	LinearColor GetHighQualityColorByQuality(int Quality);// 0x4676650
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x4676894
	GlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();// 0x4676860
	LinearColor GetColorByQuality(int Quality);// 0x4676700

--------------------------------
Class: GlobalVehicleWeaponConfig.SolarDataAsset.DataAsset.Object
	AssitLockBoneWeight[] AssistLockBoneWeight;//[Offset: 0x38, Size: 0x10]
	AssitLockBoneWeight[] SortAssistLockBoneWeight;//[Offset: 0x48, Size: 0x10]
	float CoefficientHUD;//[Offset: 0x58, Size: 0x4]
	float CoefficientWorld;//[Offset: 0x5c, Size: 0x4]
	float CoefficientHUDUnlock;//[Offset: 0x60, Size: 0x4]
	float CoefficientWorldUnlock;//[Offset: 0x64, Size: 0x4]
	float HudDistFromAssistLockPawnToSecondReticle;//[Offset: 0x68, Size: 0x4]
	RuntimeFloatCurve AssistLockUIScaleCurve;//[Offset: 0x70, Size: 0x88]

--------------------------------
Class: AssitLockBoneWeight
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float BoneWeight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarLuaHelper.Object
	DataTable* ClassInfoDataTable;//[Offset: 0x30, Size: 0x8]
	DataTable* KeyMappingInfoDataTable;//[Offset: 0x38, Size: 0x8]
	static bool WriteFile(FString FilePath, FString Content);// 0x4705f04
	static void UELogWarning(FString str);// 0x4708d34
	static void UELogError(FString str);// 0x4708c94
	static void UELog(FString str);// 0x4708dd4
	static Object* TryLoadBySoftObjectPath(out const SoftObjectPath ObjectPath);// 0x4707bf0
	static void StaticSetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4707084
	static int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString InEventName, LatentActionInfo LatentInfo);// 0x4706e8c
	static int StaticPostAkEventByName(FString InEventName);// 0x4706fd4
	static void SolarSetShadowQuality(int InQuality);// 0x4706b3c
	static void SolarSetMSAAEnabled(bool bEnable);// 0x4706a0c
	static void SolarSetGraphicsQuality(enum InLevel);// 0x4706978
	static void SolarSetFrameRate(enum FrameRateLevel);// 0x4706bd0
	static void SolarSetColorGrading(enum InTheme);// 0x4706aa8
	static bool SolarGetTextureStreamingEnable();// 0x47068a4
	static void SolarEnableTextureStreaming(bool bEnable);// 0x47068dc
	static int ShouldEnterLobby();// 0x47063e8
	static void SetSwitch(SolarAkGameObject* SolarAkGameObject, FString SwitchGroup, FString SwitchState);// 0x4706c64
	static void SetSkeletalMeshMatFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMatResPath, int ElementIndex);// 0x4707644
	static void SetSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMatResPath, int ElementIndex);// 0x47079e4
	static void SetSkeletalMeshFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMeshResPath);// 0x470777c
	static void SetSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMeshResPath);// 0x4707b0c
	static void SetSkeletalAnimBPFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewAnimBPResPath);// 0x4707554
	static void SetSkeletalAnimBP(SkeletalMeshComponent* SkeletalMeshComponent, FString NewAnimBPResPath);// 0x470786c
	void SetRenderBatch(int Mode);// 0x470641c
	void SetPlayerSettlementReport(out const SolarPlayerReport[] Reports, out const SolarGameModeInfo GameInfo);// 0x37b7888
	static void SetPatchBuildVersion(FString Version);// 0x4708708
	static void SetChangeListNumber(FString ChangeListNum);// 0x47085b8
	static Object* ResolveSoftObjectPath(out const SoftObjectPath ObjectPath);// 0x4707cb4
	static FString ReadFileContent(FString FilePath);// 0x4706008
	static int PostAkEventByName(SolarAkGameObject* SolarAkGameObject, FString InEventName);// 0x4706d98
	static Object* LoadObject_WithOuter(Object* Outer, FString ObjectName);// 0x4708ba0
	bool IsWorldTearingDown();// 0x4708e74
	static bool IsLocalBuild();// 0x47063b0
	static bool HasReviveItemManager(Object* InWorldContext);// 0x4706308
	static FString HashMd5(FString InputText);// 0x47087dc
	static FString GetSourceCommitHash();// 0x4708198
	static FString GetSourceBuildVersion();// 0x47082f8
	SolarGameState* GetSolarGameState();// 0x47090d8
	static FString GetShortName(FString LongName);// 0x47066c0
	static FString GetServerEnvTag();// 0x47080e8
	static Vector2D GetScreenSizeXY();// 0x47087a8
	static FString GetPatchBuildVersion();// 0x4708658
	int GetMonsterDropItemOutcomeID(int MonsterAICharID, int StrengthGrade);// 0x37b7888
	int GetMonsterDeathBoxID(int MonsterAICharID);// 0x37b7888
	FString GetLocalText(int InLocalizationID, out const <FString,FString> FormatContext);// 0x37b7888
	SolarReplayPlayerController* GetLocalSolarReplayPlayerController();// 0x4709140
	SolarPlayerState* GetLocalSolarPlayerState();// 0x47090a4
	SolarPlayerController* GetLocalSolarPlayerController();// 0x4709174
	PlayerController* GetLocalPlayerController();// 0x470910c
	static Key GetLeftMouseKeyDown();// 0x47088cc
	void GetKeyMappingInfoByRowName(FString RowName, out KeyMappingRowInfo OutClassInfo);// 0x47060f8
	FString GetGameModeParam(int GameModeId, FString Key);// 0x37b7888
	static FString GetExtraCdnUrlPrefix();// 0x4707e28
	static FString GetExtBackdoorUrl();// 0x4707f88
	static FString GetClipboardPasteText();// 0x4706560
	void GetClassInfoByID(FString ClassID, out ClassInfo OutClassInfo);// 0x47071ac
	static FString GetChangeListNumber();// 0x4708508
	static FString GetCdnUrlPrefix();// 0x4707ed8
	static FString GetBuildVariation();// 0x47083a8
	static FString GetBuildMode();// 0x4708458
	static Vector GetBoneLocationByName(SkeletalMeshComponent* SkeletalMeshComponent, FName BoneName, byte Space);// 0x4707428
	static FString GetBackdoorUrl();// 0x4708038
	static FString GetAndroidPkgName();// 0x4706610
	void GetAllKeyMappingInfoFromTable(out KeyMappingRowInfo[] OutKeyMappingInfo);// 0x4706224
	void GetAllClassInfoFromTable(out ClassInfo[] OutAllClassInfo);// 0x470731c
	static FString GetActualBuildVersion();// 0x4708248
	static Color FromHex(FString HexString);// 0x4707d78
	static void EndOfPlayInEditor(Object* InWorldContext, FString EndReason, bool bPopMsgBox);// 0x4708a14
	void DoLuaDebug(out const FString[] cmdArray);// 0x37b7888
	static FString DecodeFile(FString InFilePath);// 0x4705e14
	static LevelStreamingDynamic* CreateStreamInstance(World* World, FString PackageName);// 0x47067b0
	Actor* CreateEmptySkeletalMeshActor();// 0x4708eac
	MaterialInstanceDynamic* CreateDynamicMaterial(CameraActor* CameraActor, FString TemplateMatResPath, const int RTSizeX, const int RTSizeY, byte RenderTargetFormat);// 0x4708ee0
	static void ClipboardCopyText(FString Content);// 0x47064c0
	static void ClearSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent);// 0x4707950

--------------------------------
Class: SolarPlayerReport
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	uint64 UserId;//[Offset: 0x10, Size: 0x8]
	FString NickName;//[Offset: 0x18, Size: 0x10]
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int PlayerRank;//[Offset: 0x30, Size: 0x4]
	int Gender;//[Offset: 0x34, Size: 0x4]
	int AccountFlag;//[Offset: 0x38, Size: 0x4]
	int TeamRank;//[Offset: 0x3c, Size: 0x4]
	int TeamID;//[Offset: 0x40, Size: 0x4]
	int PosInTeam;//[Offset: 0x44, Size: 0x4]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int KillNum;//[Offset: 0x4c, Size: 0x4]
	int[] VehicleKillNum_ID;//[Offset: 0x50, Size: 0x10]
	int[] VehicleKillNum_Value;//[Offset: 0x60, Size: 0x10]
	int KillTeammate;//[Offset: 0x70, Size: 0x4]
	int KillInAirNum;//[Offset: 0x74, Size: 0x4]
	int KillDownInAirNum;//[Offset: 0x78, Size: 0x4]
	int WeaponSkillKillNum;//[Offset: 0x7c, Size: 0x4]
	int P_KillStreak;//[Offset: 0x80, Size: 0x4]
	int[] KillStreakHistory;//[Offset: 0x88, Size: 0x10]
	int RevengeNum;//[Offset: 0x98, Size: 0x4]
	int DeathNum;//[Offset: 0x9c, Size: 0x4]
	int KillDownNum;//[Offset: 0xa0, Size: 0x4]
	int KillDownTeammate;//[Offset: 0xa4, Size: 0x4]
	float AccurateDamage;//[Offset: 0xa8, Size: 0x4]
	int AccurateDameageTimes;//[Offset: 0xac, Size: 0x4]
	int AccurateKillTimes;//[Offset: 0xb0, Size: 0x4]
	int AccurateKillDownTimes;//[Offset: 0xb4, Size: 0x4]
	float CauseDamage;//[Offset: 0xb8, Size: 0x4]
	float ReceivedDamage;//[Offset: 0xbc, Size: 0x4]
	int AssistNum;//[Offset: 0xc0, Size: 0x4]
	float CollectEnergy;//[Offset: 0xc4, Size: 0x4]
	int BuyESElectricNum;//[Offset: 0xc8, Size: 0x4]
	int ResurrectionCapsule;//[Offset: 0xcc, Size: 0x4]
	int TeamFriendRevive;//[Offset: 0xd0, Size: 0x4]
	float ReceivedHeal;//[Offset: 0xd4, Size: 0x4]
	float HealSelf;//[Offset: 0xd8, Size: 0x4]
	float TeammateHeal;//[Offset: 0xdc, Size: 0x4]
	int OpenAirBoxNum;//[Offset: 0xe0, Size: 0x4]
	float Lifetime;//[Offset: 0xe4, Size: 0x4]
	int SaveCount;//[Offset: 0xe8, Size: 0x4]
	int FlyCount;//[Offset: 0xec, Size: 0x4]
	int VehicleTime;//[Offset: 0xf0, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0xf4, Size: 0x4]
	int CurCharacterExp;//[Offset: 0xf8, Size: 0x4]
	int CharacterExp;//[Offset: 0xfc, Size: 0x4]
	int AccountExp;//[Offset: 0x100, Size: 0x4]
	int TotalAccountExp;//[Offset: 0x104, Size: 0x4]
	int AccountLevel;//[Offset: 0x108, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x110, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x114, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x118, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x11c, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x120, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x124, Size: 0x4]
	int RankAfterScore;//[Offset: 0x128, Size: 0x4]
	int RankLegend;//[Offset: 0x12c, Size: 0x4]
	byte RankProtectType;//[Offset: 0x130, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	int Zomborg;//[Offset: 0x134, Size: 0x4]
	float MvpScore;//[Offset: 0x138, Size: 0x4]
	float KDA;//[Offset: 0x13c, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 0x1]
	int[] SettlementItems;//[Offset: 0x148, Size: 0x10]
	FString[] StringExtraRewards;//[Offset: 0x158, Size: 0x10]
	int[] SendGiftGold;//[Offset: 0x168, Size: 0x10]
	int[] SendGiftDiamond;//[Offset: 0x178, Size: 0x10]
	FString[] SendGiftPlayerName;//[Offset: 0x188, Size: 0x10]
	FString[] SendGiftPlayerID;//[Offset: 0x198, Size: 0x10]
	int[] WeaponExpIds;//[Offset: 0x1a8, Size: 0x10]
	int[] WeaponLevel;//[Offset: 0x1b8, Size: 0x10]
	int[] CurWeaponExp;//[Offset: 0x1c8, Size: 0x10]
	int[] WeaponExps;//[Offset: 0x1d8, Size: 0x10]
	int[] WeaponKillNum_ID;//[Offset: 0x1e8, Size: 0x10]
	float[] WeaponKillNum_Value;//[Offset: 0x1f8, Size: 0x10]
	int[] WeaponDamage_ID;//[Offset: 0x208, Size: 0x10]
	float[] WeaponDamage_Value;//[Offset: 0x218, Size: 0x10]
	int[] VehicleDamage_ID;//[Offset: 0x228, Size: 0x10]
	float[] VehicleDamage_Value;//[Offset: 0x238, Size: 0x10]
	int[] VehicleDistance_ID;//[Offset: 0x248, Size: 0x10]
	int[] VehicleDistance_Value;//[Offset: 0x258, Size: 0x10]
	int SettlementConfigID;//[Offset: 0x268, Size: 0x4]
	int GameModeSubID;//[Offset: 0x26c, Size: 0x4]
	FString KillerPlayerID;//[Offset: 0x270, Size: 0x10]
	uint64 KillerUserId;//[Offset: 0x280, Size: 0x8]
	FString KillerNickName;//[Offset: 0x288, Size: 0x10]
	FString KillerOS;//[Offset: 0x298, Size: 0x10]
	FString OS;//[Offset: 0x2a8, Size: 0x10]
	int[] CharacterKillNumIDs;//[Offset: 0x2b8, Size: 0x10]
	int[] CharacterKillNumValues;//[Offset: 0x2c8, Size: 0x10]
	int WarmType;//[Offset: 0x2d8, Size: 0x4]
	int[] AchievementIDs;//[Offset: 0x2e0, Size: 0x10]
	int[] AchievementValues;//[Offset: 0x2f0, Size: 0x10]
	int LikeValue;//[Offset: 0x300, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x308, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x318, Size: 0x4]
	int LastUseVehicleID;//[Offset: 0x31c, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x320, Size: 0x10]
	FString[] SavedTeammateNameArr;//[Offset: 0x330, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x340, Size: 0x10]

--------------------------------
Class: SolarGameModeInfo
	int GameModeId;//[Offset: 0x0, Size: 0x4]
	FString MapName;//[Offset: 0x8, Size: 0x10]
	int NumMode;//[Offset: 0x18, Size: 0x4]
	int PlayerCount;//[Offset: 0x1c, Size: 0x4]
	int TeamCount;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: KeyMappingRowInfo.TableRowBase
	FString Label;//[Offset: 0x8, Size: 0x10]
	FString ActionDisplayName;//[Offset: 0x18, Size: 0x10]
	FString ActionName;//[Offset: 0x28, Size: 0x10]
	bool Continuity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float Scale;//[Offset: 0x3c, Size: 0x4]
	FString RealAction;//[Offset: 0x40, Size: 0x10]
	FString[] FirstDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString[] SecondDefaultKeys;//[Offset: 0x60, Size: 0x10]
	FString Description;//[Offset: 0x70, Size: 0x10]
	FString[] RelatedActions;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ClassInfo.TableRowBase
	enum ClassType;//[Offset: 0x8, Size: 0x1]
	int ClassName;//[Offset: 0xc, Size: 0x4]
	SoftObjectPath ClassIcon;//[Offset: 0x10, Size: 0x18]
	SkillConfig* SkillOne;//[Offset: 0x28, Size: 0x8]
	SkillConfig* SkillTwo;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SkillConfig.DataAsset.Object
	int SkillName;//[Offset: 0x30, Size: 0x4]
	int SkillType;//[Offset: 0x34, Size: 0x4]
	int SkillDescription;//[Offset: 0x38, Size: 0x4]
	SoftObjectPath SkillIcon;//[Offset: 0x40, Size: 0x18]
	<int,SkillBPAndExtraConfig*> SkillExtraConfigByPlayerLevel;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: SkillBPAndExtraConfig.DataAsset.Object
	SoftObjectPath SkillBlueprint;//[Offset: 0x30, Size: 0x18]
	int SkillLevel;//[Offset: 0x48, Size: 0x4]
	int SkillItemQuality;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x68bcc04
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x68bce48

--------------------------------
Class: SolarAnoHelper.Object
	bool bOpenAnoSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendAntiDataToSsmOnDs(FString AntiDataLog, const SolarPlayerController* PC);// 0x37b7888
	void SendAntiDataToSsmOnClientNative(FString ExtraParam, byte AntiType);// 0x45f5eb0
	void SendAntiDataToSsmOnClient(FString ExtraParam, byte AntiType);// 0x37b7888
	void InitializeBind();// 0x45f61dc
	FString GetAntiLogOnClient(const byte Type);// 0x37b7888
	void AnoUnRegisterCallBack();// 0x37b7888
	void AnoSentDataToSvr(AnoSDKAntiData Data);// 0x37b7888
	void AnoSentCoreTimeData(AnoSDKAntiData AntiData);// 0x45f5fa4
	void AnoSDKSendData(AnoSDKAntiData AntiData);// 0x45f60ac
	void AnoSDKResume();// 0x45f61c8
	void AnoSDKPause();// 0x45f61b4
	void AnoChangeAntiDataFlow(AnoSDKAntiData Data);// 0x37b7888

--------------------------------
Class: AnoSDKAntiData
	int Length;//[Offset: 0x0, Size: 0x4]
	FString AntiData;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarTableManager.Object
	static void SetIMInitFlag(bool Flag);// 0x478bd30
	static void SetCurrentLangEnum(enum InLang);// 0x478c0d0
	static void SetCurrentLang(FString InLang);// 0x478c164
	void ReceiveInit();// 0x37b7888
	static bool IsLocalTextIDValid(int ID);// 0x478be04
	static FString GetLocalTextWithLang(int ID, enum InLang);// 0x478beac
	static FString GetLocalText(int ID);// 0x478bfe0
	static bool GetIMInitFlag();// 0x478bdcc
	static enum GetCurrentLangEnum();// 0x478c204
	static FString GetCurrentLang();// 0x478c238

--------------------------------
Class: SolarTcpNetworkManager.Object
	bool bIsSsmMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	SolarTCPSocketClient* SocketClient;//[Offset: 0x38, Size: 0x8]
	SCMMatchChannelAction* MatchChannelAction;//[Offset: 0x40, Size: 0x8]
	FString EncryptKeyClientTCPDynamic;//[Offset: 0x48, Size: 0x10]
	bool bEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	delegate DisconnectedDelegate;//[Offset: 0x5c, Size: 0x10]
	delegate ConnectedDelegate;//[Offset: 0x6c, Size: 0x10]
	delegate MessageReceivedDelegate;//[Offset: 0x7c, Size: 0x10]
	SolarPlayerReport MyReport;//[Offset: 0x90, Size: 0x350]
	void UpdateTeamRank(byte TeamID, int Rank);// 0x37b7888
	void UpdatePlayerData(FString PlayerId, SolarPlayerState* PlayerState);// 0x37b7888
	void UpdatePlayerBattleInfo(SolarPlayerState* PS);// 0x37b7888
	bool UpdateBotAIData(int AIIndex, SolarPlayerState* PlayerState);// 0x37b7888
	void TryEndBattle();// 0x37b7888
	void SyncSsmDataToGameState();// 0x37b7888
	void SsmDSSendGiftRequest(const int GiftID, const int Num, FString SendPlayerId, FString RecivePlayerId, SolarPlayerState* SendPlayer);// 0x37b7888
	void SsmDSChangeRoleIDRequest(FString InPlayerId, int InRoleID);// 0x37b7888
	void RequestOpenMatchChannel(const int InMatchType, out const int[] InPlayerStructure, const int InMaxMatchTime);// 0x37b7888
	void ReportPlayerBattleInfo(SolarPlayerState* PS);// 0x37b7888
	void RecordLastUsedVehicle();// 0x37b7888
	void PlayerRequireToChangeGold(const int InChangedGoldType, const int InGoldNum, FString InPlayerId, SolarPlayerState* InPlayer);// 0x37b7888
	void OpenSupplement(int MaxSecond);// 0x4c8f29c
	void OnRecvData(out const byte[] Data);// 0x37b7888
	void OnPlayerLogin(FString PlayerId);// 0x37b7888
	void OnMessageReceived(int ConnId, out const byte[] Message);// 0x481fba8
	void OnDisconnected(int ConnId);// 0x37b7888
	void OnConnected(int ConnId);// 0x37b7888
	void NotifyPlayerReward_CustomMode(out const SCustomMode_PlayerReport Report);// 0x37b7888
	void NotifyPlayerReward();// 0x37b7888
	void NotifyPlayerOffline(SolarPlayerController* PC);// 0x37b7888
	void NotifyPlayerEnterBattle(SolarPlayerController* PC);// 0x37b7888
	void NotifyOBPlayersChanged(out FString[] PlayerIds);// 0x37b7888
	void NotifyClientBattleStateFish();// 0x37b7888
	void NotifyBattleGroupResultRequest(byte TeamID, int Rank);// 0x37b7888
	bool IsAllowReconnectGame();// 0x37b7888
	void HandlePlayerLogoutInPreparatoryPhase(Controller* PC);// 0x37b7888
	void HandlePlayerLogoutInBattlePhase(Controller* PC);// 0x37b7888
	void HandlePlayerLogin(Controller* PC);// 0x37b7888
	int GetWarmGameType();// 0x37b7888
	int GetTeamCount();// 0x37b7888
	void GetStartBattleRequestInfo(out StartBattleRequestInfo OutResult);// 0x37b7888
	SolarGameModeInfo GetSolarGameModeInfo();// 0x37b7888
	int GetRuleID();// 0x37b7888
	void GetReportWeaponExpIds(out int[] OutWeaponExpIds);// 0x481fcb0
	byte[] GetPlayerTeamIDs();// 0x37b7888
	FString[] GetPlayerRoleAndOpenIDs();// 0x37b7888
	int GetPlayerCount();// 0x37b7888
	void GetPlayerBattleRequestInfo(FString InSolarPlayerID, out PlayerBattleRequestInfo OutResult);// 0x37b7888
	int[] GetMLRelatedAIDataMLRatio();// 0x37b7888
	int[] GetMLRelatedAIDataMLFeature();// 0x37b7888
	bool GetMLRelatedAIDataMLClosed();// 0x37b7888
	int GetMaxPlayerNum();// 0x37b7888
	FString GetLocalIPAddress();// 0x481fd70
	bool GetIsCloseMatch();// 0x37b7888
	bool GetHasMonster();// 0x37b7888
	bool GetHasMachineLearning();// 0x37b7888
	int GetEntryID();// 0x37b7888
	FString GetBattleID();// 0x37b7888
	int GetAILevel();// 0x37b7888
	int GetAboutToEnterPlayerCount();// 0x37b7888
	bool FillTeamReport(out SolarPlayerReport[] Reports);// 0x37b7888
	void FakePlayerJoin(FString PlayerId, int TeamID);// 0x37b7888
	void CloseSupplement();// 0x37b7888
	bool CheckPlayerLeave(FString PlayerId);// 0x37b7888
	bool CheckJoinToken(FString Token, FString PlayerId);// 0x37b7888
	bool CheckIfPlayerHasJoined(FString PlayerId);// 0x37b7888
	void CheckBattleOver();// 0x37b7888

--------------------------------
Class: SolarTCPSocketClient.Actor.Object
	int SendBufferSize;//[Offset: 0x230, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x234, Size: 0x4]
	float TimeBetweenTicks;//[Offset: 0x238, Size: 0x4]
	bool SendData(int ConnectionId, byte[] Data);// 0x3a4042c
	void Disconnect(int ConnectionId);// 0x3a40580
	void Connect(FString IP, int Port, out const delegate OnConnected, out const delegate OnDisconnected, out const delegate OnMessageReceived, out int ConnectionId);// 0x3a40624

--------------------------------
Class: SCustomMode_PlayerReport.SolarPlayerReport
	<int,int> RewardItems;//[Offset: 0x350, Size: 0x50]

--------------------------------
Class: StartBattleRequestInfo
	int aiNum;//[Offset: 0x0, Size: 0x4]
	int AILevel;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerBattleRequestInfo
	FString NickName;//[Offset: 0x0, Size: 0x10]
	int AccountLevel;//[Offset: 0x10, Size: 0x4]
	PlatformParams PlatformParams;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: PlatformParams
	int64 UserId;//[Offset: 0x0, Size: 0x8]
	FString OpenId;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SCMMatchChannelAction.BlueprintAsyncActionBase.Object
	Object* WorldContextObject;//[Offset: 0x48, Size: 0x8]
	delegate OnMatchChannelChange;//[Offset: 0x50, Size: 0x10]
	static SCMMatchChannelAction* OpenMatchChannel(Object* WorldContextObject, const enum MatchType, out const int[] PlayerStructure, const int MaxMatchTime);// 0x45acaa0
	void HandleMatchChannelChange(bool InMatchResult, int RPCID);// 0x45ac9ac

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x67a3a58

--------------------------------
Class: SolarUDPManager.Object
	int SendBufferSize;//[Offset: 0x30, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x34, Size: 0x4]
	void OnMessageReceived(out const byte[] Data);// 0x37b7888

--------------------------------
Class: SolarAssetManager.AssetManager.Object
	SolarChunkAssignData* ChunkAssignDataCache;//[Offset: 0x440, Size: 0x8]
	<FString,Object*> CachedObjMap;//[Offset: 0x448, Size: 0x50]
	void UnLoadPrimaryAssetByLabelPathForLua(FString PrimaryAssetPath);// 0x45f83a4
	void OnBindingActorDestory(Actor* Actor);// 0x45f8300

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: SolarChunkAssignData.DataAsset.Object
	<FString,ChunkAssignRule> Rules;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ChunkAssignRule
	FString FullPath;//[Offset: 0x0, Size: 0x10]
	int ChunkID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarItemManager.Object
	SolarItemRootActor* RootActor;//[Offset: 0x30, Size: 0x8]
	SolarItemSpawner*[] ItemSpawners;//[Offset: 0x88, Size: 0x10]
	SolarItemSpawner*[] NSItemSpanwers;//[Offset: 0x98, Size: 0x10]
	<int,SolarItemSpawner*> ItemSpawnersMap;//[Offset: 0xa8, Size: 0x50]
	<int,SolarAirDropSpawner*> AirDropSpawnersMap;//[Offset: 0xf8, Size: 0x50]
	<int,SolarItemSpawnerArray> NSItemSpawnerMap;//[Offset: 0x148, Size: 0x50]
	<int,OutcomeData> ItemOutcomeDatas;//[Offset: 0x198, Size: 0x50]
	<int,OutcomeDataCollection> OutcomeCollection;//[Offset: 0x1e8, Size: 0x50]
	<int,SimpleDropItemDataCollection> OriginDropItemDatas;//[Offset: 0x238, Size: 0x50]
	<int,FinalDropDataCollection> AirDropItemDatas;//[Offset: 0x288, Size: 0x50]
	<int,int> AirDropChestIndexMap;//[Offset: 0x2d8, Size: 0x50]
	<int,int> UsedAirDropChestIndexMap;//[Offset: 0x328, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0x378, Size: 0x50]
	RandomStream ItemStream;//[Offset: 0x3c8, Size: 0x8]
	float DelaySpawnTime;//[Offset: 0x3d0, Size: 0x4]
	FString[] SubLevelNames;//[Offset: 0x3d8, Size: 0x10]
	bool BInitSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	bool BSpawnerDestoryed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	TimerHandle ItemInitSpawnerHandle;//[Offset: 0x3f0, Size: 0x8]
	float DelayInitSpawnerTime;//[Offset: 0x3f8, Size: 0x4]
	TimerHandle ItemLoopSpawnHandle;//[Offset: 0x400, Size: 0x8]
	float SpawnLoopInterval;//[Offset: 0x408, Size: 0x4]
	float SpawnMinDisSquared;//[Offset: 0x40c, Size: 0x4]
	float VehicleSpawnMinDisSquared;//[Offset: 0x410, Size: 0x4]
	DataTable* ItemResReferenceTable;//[Offset: 0x418, Size: 0x8]
	FString ItemResReferenceTablePath;//[Offset: 0x420, Size: 0x10]
	bool bOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	int FirstSpawnerIndex;//[Offset: 0x46c, Size: 0x4]
	int FirstTBoxIndex;//[Offset: 0x470, Size: 0x4]
	int FirstAirDropIndex;//[Offset: 0x474, Size: 0x4]
	int FirstVehicleIndex;//[Offset: 0x478, Size: 0x4]
	int ChestKeyCode;//[Offset: 0x47c, Size: 0x4]
	<int,enum> ItemID2Types;//[Offset: 0x490, Size: 0x50]
	int64 ThisIdRefCount;//[Offset: 0x4e0, Size: 0x8]
	int64 ServerNowSeconds;//[Offset: 0x4e8, Size: 0x8]
	FString RootActorBpPath;//[Offset: 0x4f0, Size: 0x10]
	float CheckDropRadius;//[Offset: 0x500, Size: 0x4]
	float CheckDropHeight;//[Offset: 0x504, Size: 0x4]
	float DropLineTraceLength;//[Offset: 0x508, Size: 0x4]
	float DropUnitOffset;//[Offset: 0x50c, Size: 0x4]
	SolarMapManager* MapManager;//[Offset: 0x510, Size: 0x8]
	SolarAirDropSpawner*[] ActiveAirDropBox;//[Offset: 0x518, Size: 0x10]
	void UpdateItemParams();// 0x46f61d0
	bool TryDropAtLocation(SolarCharacterBase* Owner, out Vector CheckPos);// 0x46f1cc4
	void SpawnTreasureBoxByID(const int TreasureId, Transform trans, SolarItemData[] ItemsToSpawn);// 0x46f3f14
	void SpawnItemsByOutcomeID(const int OutcomeID, out Transform trans);// 0x46f40d8
	void SpawnItems(const int ItemID, const int ItemNum, Transform trans);// 0x46f5244
	SolarItemData SpawnItemData(int ItemID);// 0x46f5fcc
	void SpawnDeathBox(SolarCharacterBase* Owner, out const Rotator Rotator, out const SolarItemData[] DataTarray, out const int DeathBoxId, out const SolarPlayerWeapon*[] DeathBoxWeaponArray, out const float CurrEnergyValue, out const float CurrExtraEnergyValue, out const int MonsterID);// 0x46f2124
	void SpawnAirDropByID(const int ChestID, Vector Location, SolarItemData[] ItemsToSpawn);// 0x46f3d68
	void ResetThisID();// 0x46f5e24
	bool RefreshOutcomePoolContent(out OutcomeData InOutcomeData);// 0x46f4300
	void OnUpdateServerNowSeconds(const int InNowSeconds);// 0x46f245c
	void OnAsyncLoadTreasureBoxComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Transform trans);// 0x46f3528
	void OnAsyncLoadItemComplete(SoftClassPath SClassPath, SolarItemData ItemData, Transform trans);// 0x46f3844
	void OnAsyncLoadDiscardItemComplete(SoftClassPath SClassPath, SolarCharacter* Owner, SolarItemData ItemData);// 0x46f2b34
	void OnAsyncLoadDeathBoxComplete(SoftClassPath SClassPath, SolarCharacterBase* Owner, Rotator Rotator, SolarItemData[] DataTarray, SolarItemData DeathBoxData, SolarPlayerWeapon*[] DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, const int MonsterID);// 0x46f2d88
	void OnAsyncLoadAirdropComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Vector Location);// 0x46f3240
	void NotifySpawnerDestroy();// 0x46f3ac0
	void NetStartAirDrops(const int SpawnerID, const int ChestID);// 0x46f514c
	bool NetRunSpecOutcome(const int InData, out SolarItemData[] OutItemArray);// 0x46f41f0
	void NetRunGlobalDrop();// 0x46f5c4c
	void NetRunDrop();// 0x46f5c60
	bool NetDropOutcomeContent(const int TargetContentID, out OutcomeData OutcomeData, out <int,SimpleDropItemDataCollection> InDropItemDatas, bool fromSpawner, out const Transform trans);// 0x46f5658
	bool NetDropOutcome(out OutcomeData OutcomeData, out int OutTargetContentID);// 0x46f596c
	void NetDropGlobalOutcome(out GlobalOutcomeData GlobalOutcomeData);// 0x46f5564
	void LoadSpawnerLevelComplete();// 0x46f5c74
	void LoadItemSpawnerLevels();// 0x46f5c88
	bool IsInSafeArea(out const Vector Location);// 0x46f1bd4
	void InitWeaponPartLevel(out SolarItemData InItemData);// 0x46f26d8
	void InitWeaponLevel(out SolarItemData InItemData);// 0x46f25ac
	void InitVehicleSpawnGroupData(out <int,int> VehicleGroupIdToNum);// 0x46f4ae8
	void InitItemDataShieldValue(out SolarItemData InItemData);// 0x46f2804
	int64 IncreaseThisID();// 0x46f5df0
	int GetVehicleIDBySingleSpawnId(const int SpawnID);// 0x46f4bc4
	int GetVehicleIDByGroupIDAndIndex(int GroupID, int GroupIndex);// 0x46f48f4
	static int GetVehicleGroupIDByVehicleID(int InVehicleID);// 0x46f4c70
	static SolarVehicleData GetVehicleConfigData(const int InVehicleID);// 0x46f4d14
	int GetServerNowSeconds();// 0x46f2428
	int GetRandomIDInMap(const int TotalWeight, out <int,int> WeightIDMap);// 0x46f5b2c
	int GetRandomAirDropIDInMap();// 0x46f1c90
	int GetOutcomeIdByTreasureBoxId(const int TreasureBoxID);// 0x46f3c10
	OutcomeData GetOutcomeDataByID(const int OutcomeID);// 0x46f4f5c
	OutcomeContentData GetOutcomeContentDataByID(const int ContentID);// 0x46f5024
	bool GetItemResReference(int InItemID, out ItemResReference outData);// 0x46f5e38
	int GetItemPrize(const int InItemID);// 0x46f2500
	int GetItemMaxPileByID(const int InItemID);// 0x46f3cbc
	bool GetGlobalOutcomeData(const int GamePlayMode, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x46f4e0c
	int GetEntryID();// 0x37b7888
	bool GetCurrItemSubLevels(FString InMapName, out FString[] OutSubLevelNames);// 0x46f5c9c
	OutcomeData GetCookedOutcomeDataByID(const int OutcomeID);// 0x46f4470
	bool GetChestsFromChestSpawn(const int ChestSpawnID, out int[] ChestIDs);// 0x46f47e0
	bool GetAirDropChestIDsByGamePlayMode(const int GamePlayMode, out int[] ChestIDs);// 0x46f3afc
	SolarAirDropSpawner*[] GetActiveAirDropBox();// 0x46f19f8
	void FindTransformForBoxItem(Actor* TargetActor, out Transform InTrans, bool bUseNewLocation);// 0x46f1ec4
	Rotator FindRotationForDropItem(Actor* TargetActor, out Vector FindTargetPos);// 0x46f2024
	bool FindPosForDropItem(SolarCharacterBase* Owner, out Vector FindTargetPos);// 0x46f1dc4
	SolarItemData CreateItemDataByKey(const int InItemID);// 0x46f2930
	void ConvertOriginDatasToItemDatas();// 0x46f5230
	void ClearSpawnLoopTimer();// 0x46f3ad4
	void CheckSpawnItemByDis();// 0x46f3ae8
	bool CheckPointInCircle(Vector2D Center, float Radius, Vector2D PlayerPoint);// 0x46f1aa8
	void AddVehicleGroupDataSingle(int GroupID, out int[] SingleData);// 0x46f49e0
	void AddOneDropDataToTempDatas(const int SpawnerID, const int InItemID, const int InItemNum, out <int,SimpleDropItemDataCollection> InDropItemDatas);// 0x46f539c

--------------------------------
Class: OutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int[] Contents;//[Offset: 0x8, Size: 0x10]
	enum OutcomeType;//[Offset: 0x18, Size: 0x1]
	<int,int> OutcomePools;//[Offset: 0x20, Size: 0x50]
	<int,int> OutcomeDynamicWeights;//[Offset: 0x70, Size: 0x50]
	<int,int> OutcomeSubWeights;//[Offset: 0xc0, Size: 0x50]
	int PoolTotalWeight;//[Offset: 0x110, Size: 0x4]
	int PoolOutcomeID;//[Offset: 0x114, Size: 0x4]
	int MaxTimes;//[Offset: 0x118, Size: 0x4]
	int MinTimes;//[Offset: 0x11c, Size: 0x4]
	int SpawnerID;//[Offset: 0x120, Size: 0x4]
	int NetSetTimes;//[Offset: 0x124, Size: 0x4]
	int DropedTimes;//[Offset: 0x128, Size: 0x4]
	<int,OutcomeContentData> ContentDatas;//[Offset: 0x130, Size: 0x50]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int GlobalDropTimes;//[Offset: 0x184, Size: 0x4]
	OutcomeTypeLimitData[] LimitTypeDatas;//[Offset: 0x188, Size: 0x10]
	OutcomeIDLimitData[] LimitIDDatas;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: OutcomeContentData
	int ID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int Weight;//[Offset: 0x8, Size: 0x4]
	int[] RandomNums;//[Offset: 0x10, Size: 0x10]
	int MaxTimes;//[Offset: 0x20, Size: 0x4]
	int MinTimes;//[Offset: 0x24, Size: 0x4]
	int RelatedContentID;//[Offset: 0x28, Size: 0x4]
	enum ItemType;//[Offset: 0x2c, Size: 0x4]
	int DropedTimes;//[Offset: 0x30, Size: 0x4]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool IsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: OutcomeTypeLimitData
	enum LimitType;//[Offset: 0x0, Size: 0x4]
	int MinTimes;//[Offset: 0x4, Size: 0x4]
	int MaxTimes;//[Offset: 0x8, Size: 0x4]
	int CurrDropTimes;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: OutcomeIDLimitData
	int[] LimitIDs;//[Offset: 0x0, Size: 0x10]
	int MinTimes;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int CurrDropTimes;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SimpleDropItemDataCollection
	<int,int> Datas;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: GlobalOutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int SingleMaxTimes;//[Offset: 0x4, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x8, Size: 0x4]
	int TotalMinTimes;//[Offset: 0xc, Size: 0x4]
	int NetSetTimes;//[Offset: 0x10, Size: 0x4]
	int DropedTimes;//[Offset: 0x14, Size: 0x4]
	<int,int> ItemIDNumMap;//[Offset: 0x18, Size: 0x50]
	int[] AffectedOutcomes;//[Offset: 0x68, Size: 0x10]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SolarVehicleData
	int VehicleID;//[Offset: 0x0, Size: 0x4]
	FString VehicleBP;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ItemResReference.TableRowBase
	FString Description;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath Icon;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath AbilityBP;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: SolarAirDropSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	int ChestID;//[Offset: 0x3a4, Size: 0x4]

--------------------------------
Class: SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnerID;//[Offset: 0x29c, Size: 0x4]
	enum SpawnerType;//[Offset: 0x2c8, Size: 0x1]
	enum SpawnerLevel;//[Offset: 0x2c9, Size: 0x1]
	int OutcomeID;//[Offset: 0x2cc, Size: 0x4]
	Vector OriginPos;//[Offset: 0x2d0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0x2dc, Size: 0xc]
	Color BoxLineColor;//[Offset: 0x2e8, Size: 0x4]
	bool bNotDrawBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	Box SpawnerBox;//[Offset: 0x2f0, Size: 0x1c]
	float RotateAngleRange;//[Offset: 0x30c, Size: 0x4]
	bool HasSpawnedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bActiveSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	FString SyncItemId;//[Offset: 0x318, Size: 0x10]
	bool bOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float RefreshTime;//[Offset: 0x32c, Size: 0x4]
	bool bUseSpawnerTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	int NumberOfPoints;//[Offset: 0x334, Size: 0x4]
	float fScalarParams;//[Offset: 0x338, Size: 0x4]
	TimerHandle ItemLoadHandle;//[Offset: 0x360, Size: 0x8]
	TimerHandle ItemSpawnHandle;//[Offset: 0x368, Size: 0x8]
	TimerHandle ItemRefreshHandle;//[Offset: 0x370, Size: 0x8]
	void SpawnSingleItem();// 0x46fc8a4
	void SpawnInNextTick();// 0x46fc728
	void SaveSpawnerRange();// 0x46fc8b8
	void RandomRotatorForItem(enum ItemType, out Quat TargetRotator);// 0x46fca3c
	void RandomPosInBoundingBox(out Vector TargetPos);// 0x46fcbe0
	void PlaceItemToTheGround(out Vector InOutLocation);// 0x46fc98c
	void OnItemSpawned(Actor* Item);// 0x46fc8d4
	void OnAsyncLoadComplete(SoftClassPath SClassPath, SolarItemData ItemData);// 0x46fc518
	void NetStartSpawnItems(SolarItemRootActor* OwnerActor);// 0x46fcc90
	void LoadSingleWeaponAsset(out const SolarItemData ItemData);// 0x46fc764
	void LoadSingleItemAsset();// 0x46fc890
	void LoadInNextTick();// 0x46fc73c
	void InitSpawnerBound();// 0x46fc978
	void GetSuitableDropPos(out Vector TargetPos);// 0x46fcb30
	void GenerateDropPosition();// 0x46fc504
	void ClearUnpickedItems();// 0x46fc4f0
	void ClearLoopTimer();// 0x46fc750

--------------------------------
Class: SolarItemRootActor.Actor.Object
	int MAX_LOAD_NUM;//[Offset: 0x230, Size: 0x4]
	int MAX_SPAWN_NUM;//[Offset: 0x234, Size: 0x4]
	int CurrLoadNum;//[Offset: 0x238, Size: 0x4]
	int CurrSpawnNum;//[Offset: 0x23c, Size: 0x4]
	int TempFrame;//[Offset: 0x240, Size: 0x4]
	int FrameInterval;//[Offset: 0x244, Size: 0x4]

--------------------------------
Class: SolarItemSpawnerArray
	SolarItemSpawner*[] ItemSpawnerArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: OutcomeDataCollection
	OutcomeData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FinalDropDataCollection
	SolarItemData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarMapManager.SolarGameManager.Object
	MapData MapData;//[Offset: 0x38, Size: 0x3c]
	int CurrentMapID;//[Offset: 0x74, Size: 0x4]
	FString CurrentMapName;//[Offset: 0x78, Size: 0x10]
	float FootMinLength;//[Offset: 0x88, Size: 0x4]
	float FootMaxLength;//[Offset: 0x8c, Size: 0x4]
	float GunMinLength;//[Offset: 0x90, Size: 0x4]
	float GunMaxLength;//[Offset: 0x94, Size: 0x4]
	float VehicleMinLength;//[Offset: 0x98, Size: 0x4]
	float VehicleMaxLength;//[Offset: 0x9c, Size: 0x4]
	<enum,Vector2D> MapVoiceRangeMap;//[Offset: 0xa0, Size: 0x50]
	MapVoiceData WorldLocationToVoiceData(out const enum Type, out const Vector PlayerPos, out const Vector EnemyPos);// 0x4711298
	Vector2D WorldLocationToMiniMap(Vector WorldLocation);// 0x47114e4
	float WorldLengthToMiniMap(float WorldLength);// 0x47111ec
	void UnInitMapData();// 0x4711980
	void ReceiveInitMapData(int MapID);// 0x37b7888
	Vector2D Normal2D(Vector2D VectorToTransForm);// 0x4710b84
	Vector MiniMapToWorldLocation(Vector2D PositionXY, float Z);// 0x47113f4
	bool IsOutOfBound(Vector2D PlayerNavPos);// 0x4711098
	static bool IsMiniMapAirlineDataValid(out const MiniMapAirlineData InData);// 0x471089c
	bool IsCharacterInRange(Vector Pos, enum VoiceType);// 0x47115c4
	void InitMapData(int MapID);// 0x4711994
	SolarCharacter* GetViewportFocusedCharacter();// 0x4711590
	bool GetSafeAreaSimpleInfoArray(out SafeAreaSimpleInfo[] OutArray);// 0x4710f10
	bool GetSafeAreaInfo(out SafeAreaMapInfo OutAreaInfo);// 0x4710fdc
	bool GetSafeAreaDroneArray(out SafeAreaDrone*[] OutArray);// 0x4710e44
	int GetLenegthFromPlayerToMarkPoint(Vector MarkPosRealWorld, Vector CurrentPlayerLocation);// 0x4711860
	bool GetIntersectionOnMapFrame(Vector2D TeamMatePos, Vector2D MapAPos, float MapFrameHeight, float MapFrameWidth, out Vector2D InterSecionList, out enum CrossDirection);// 0x4710970
	float GetDistanceToSafeArea(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x4710d38
	int GetCurrentMapID();// 0x471194c
	void GetAllEnemyActions(out MapVoiceDataListMap VoiceDataMap);// 0x47116b8
	Vector2D FixNavPos(Vector2D PlayerNavPos);// 0x4711144
	bool CheckIfMarkedPointValid(out const Vector2D InMarkedPoint);// 0x47117a4
	float CalculatePoisonDistance(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x4710c2c

--------------------------------
Class: MapVoiceData
	int Direction;//[Offset: 0x0, Size: 0x4]
	float TransparencyPercent;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MiniMapAirlineData
	Vector2D StartPoint;//[Offset: 0x0, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0x8, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x10, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x18, Size: 0x8]
	Vector2D AirlineDir;//[Offset: 0x20, Size: 0x8]
	float AirlineLength;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MapData
	Vector2D MapTopLeftCoord;//[Offset: 0x0, Size: 0x8]
	Vector2D MapRightBottomCoord;//[Offset: 0x8, Size: 0x8]
	Vector2D MapImageSize;//[Offset: 0x10, Size: 0x8]
	int MapImage;//[Offset: 0x18, Size: 0x4]
	float AirlineZ;//[Offset: 0x1c, Size: 0x4]
	float HorizonLineZ;//[Offset: 0x20, Size: 0x4]
	float TopZ;//[Offset: 0x24, Size: 0x4]
	float BottomZ;//[Offset: 0x28, Size: 0x4]
	float AverageZ;//[Offset: 0x2c, Size: 0x4]
	float InitFogZ;//[Offset: 0x30, Size: 0x4]
	float TargetFogZ;//[Offset: 0x34, Size: 0x4]
	float MapFOV;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SafeAreaSimpleInfo

--------------------------------
Class: SafeAreaMapInfo
	Vector CurrentLocation;//[Offset: 0x0, Size: 0xc]
	float CurrentRadius;//[Offset: 0xc, Size: 0x4]
	Vector NextLocation;//[Offset: 0x10, Size: 0xc]
	float NextRadius;//[Offset: 0x1c, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x20, Size: 0x4]
	float TargetShrinkTime;//[Offset: 0x24, Size: 0x4]
	float CurrentConfigRadius;//[Offset: 0x28, Size: 0x4]
	Vector CurrentAreaBeginLocation;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: MapVoiceDataListMap
	<enum,MapVoiceDataList> VoiceMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MapVoiceDataList
	MapVoiceData[] VoiceList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SolarInteractableManager.SolarGameManager.Object
	int ZoneNum;//[Offset: 0x48, Size: 0x4]
	int TotalNum;//[Offset: 0x4c, Size: 0x4]
	RadarStationCollection[] CurrRadarStations;//[Offset: 0x50, Size: 0x10]
	SolarElectricShop*[] CurrElectricShops;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: RadarStationCollection
	int Zone;//[Offset: 0x0, Size: 0x4]
	SolarRadarStation*[] AllRadarStations;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarRadarStation.SolarInteractableActor.Actor.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	int Zone;//[Offset: 0x24c, Size: 0x4]
	float MaxTirggerDistance;//[Offset: 0x250, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x254, Size: 0x4]
	GameplayTag CDTag;//[Offset: 0x258, Size: 0x8]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool bInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	float CoolDownTime;//[Offset: 0x264, Size: 0x4]
	float CostEnergy;//[Offset: 0x268, Size: 0x4]
	float RemainCDTime;//[Offset: 0x26c, Size: 0x4]
	SphereComponent* CollisionComp;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* NormalMesh;//[Offset: 0x278, Size: 0x8]
	SolarObjAbilitySystemComponent* ObjAbilitySystemComp;//[Offset: 0x280, Size: 0x8]
	class SolarObjGameplayAbility* ObjAbilityClass;//[Offset: 0x288, Size: 0x8]
	GameplayAbilitySpecHandle ObjAbilityHandle;//[Offset: 0x290, Size: 0x4]
	bool TryTriggerRadarStation(SolarCharacter* InUser);// 0x4761394
	void ServerInitailizeAbility();// 0x4761314
	void OnResetCD();// 0x4761344
	void OnRep_Broken();// 0x4761380
	void OnRep_BInCD();// 0x476136c
	void OnRadarStationCDChanged();// 0x4761358
	void OnPlayStartScanEffect();// 0x4c8f29c
	void OnGameplayTagChanged(GameplayTag Tag, bool bAdd);// 0x4761210
	void OnClientStartScan();// 0x4761328
	void OnBrokenChanged(bool InBroken);// 0x4c8f29c
	void InitailizeAbilityParams();// 0x4761300
	float GetAbilityReaminingCD();// 0x4761174
	float GetAbilityCostEnergy();// 0x47611dc
	float GetAbilityCooldown();// 0x47611a8
	bool CanActivateNow();// 0x4761444

--------------------------------
Class: SolarObjAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1310, Size: 0x20]
	GameplayTagContainer RepNotifiedTags;//[Offset: 0x1330, Size: 0x20]
	void OnRep_RepNotifiedTags(out const GameplayTagContainer Previous);// 0x472031c

--------------------------------
Class: SolarObjGameplayAbility.GameplayAbility.Object
	class GameplayEffect* ActivateEffect;//[Offset: 0x400, Size: 0x8]
	float CostEnergy;//[Offset: 0x408, Size: 0x4]
	SolarInteractableActor* GetAbilityInstigator();// 0x4721294
	Actor* GetAbilityEffectUser();// 0x4721260

--------------------------------
Class: SolarPlatformHelper.Object
	SolarPlatformStats* SolarPlatformStats;//[Offset: 0x30, Size: 0x8]
	SolarGameInstanceBase* SolarGameInstanceBase;//[Offset: 0x38, Size: 0x8]
	static bool UseRenderThread();// 0x472bdb8
	static bool SupportsMultithreading();// 0x472bb80
	static double Seconds();// 0x472c9e4
	void ReceiveShutdown();// 0x4c8f29c
	void ReceiveInit();// 0x4c8f29c
	static bool IsThisApplicationForeground();// 0x472c030
	static bool IsRunningOnBattery();// 0x472bbb8
	static bool Is64bitOperatingSystem();// 0x472c388
	FString GetUniqueDeviceId();// 0x472ca80
	static FString GetTimeZoneId();// 0x472bd08
	static FString GetSuitableStringWithUnitOfBytes(uint64 NumberOfBytes, FString ExtraUnit);// 0x472c848
	SolarPlatformStats* GetSolarPlatformStats();// 0x472ca18
	int GetSimultaneousInstanceId();// 0x472ca4c
	static FString GetPrimaryGPUBrand();// 0x472c470
	static FString GetPathVarDelimiter();// 0x472c764
	static void GetOSVersions(out FString out_OSVersionLabel, out FString out_OSSubVersionLabel);// 0x472c274
	static FString GetOSVersion();// 0x472c1c4
	static int GetMaxPathLength();// 0x472c814
	GameUserSettings* GetGameUserSettings();// 0x472c97c
	static FString GetEnvironmentVariable(FString VariableName);// 0x472bdf0
	Engine* GetEngine();// 0x472c9b0
	static bool GetDiskTotalAndFreeSpace(FString InPath, out uint64 TotalNumberOfBytes, out uint64 NumberOfFreeBytes);// 0x472c068
	static float GetDeviceTemperatureLevel();// 0x472bbf0
	static FString GetDeviceMakeAndModel();// 0x472c3c0
	static FString GetDefaultDeviceProfileName();// 0x472bc58
	static FString GetCPUVendor();// 0x472c6b4
	static uint32 GetCPUInfo();// 0x472c680
	static FString GetCPUChipset();// 0x472c520
	static FString GetCPUBrand();// 0x472c5d0
	static int GetBatteryLevel();// 0x472bc24
	static FString ClipboardPaste();// 0x472bee0
	static void ClipboardCopy(FString str);// 0x472bf90

--------------------------------
Class: SolarPlatformStats.Object
	uint64 MaxUsedPhysical;//[Offset: 0x30, Size: 0x8]
	void ReceiveWorldTickStart(World* World, enum LevelTick, float DeltaSeconds);// 0x37b7888
	void ReceiveWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0x37b7888
	void ReceiveShutdown();// 0x4c8f29c
	void ReceivePostWorldInitialization(World* World);// 0x37b7888
	void ReceiveInit();// 0x4c8f29c
	uint64 GetRHIUsedMemory();// 0x472da04
	float GetRenderThreadTime();// 0x472da38
	int GetNumDrawCalls();// 0x472daa0
	int GetMinFPS();// 0x37b7888
	float GetGameThreadTime();// 0x472da6c
	int GetAverageFPS();// 0x37b7888

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x68226f8
	bool SupportsHDRDisplayOutput();// 0x68222ac
	void SetVSyncEnabled(bool bEnable);// 0x682384c
	void SetVisualEffectQuality(int Value);// 0x6822a10
	void SetViewDistanceQuality(int Value);// 0x6822d70
	void SetToDefaults();// 0x68225f0
	void SetTextureQuality(int Value);// 0x6822ae8
	void SetShadowQuality(int Value);// 0x6822c98
	void SetShadingQuality(int Value);// 0x6822788
	void SetScreenResolution(IntPoint Resolution);// 0x6823a38
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x6822eb8
	void SetResolutionScaleValue(int NewScaleValue);// 0x6822f5c
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x6822e14
	void SetPostProcessingQuality(int Value);// 0x6822938
	void SetOverallScalabilityLevel(int Value);// 0x68233c8
	void SetFullscreenMode(byte InFullscreenMode);// 0x682392c
	void SetFrameRateLimit(float NewLimit);// 0x68234a8
	void SetFoliageQuality(int Value);// 0x6822860
	void SetDynamicResolutionEnabled(bool bEnable);// 0x6823768
	void SetBenchmarkFallbackValues();// 0x682360c
	void SetAudioQualityLevel(int QualityLevel);// 0x6823568
	void SetAntiAliasingQuality(int Value);// 0x6822bc0
	void SaveSettings();// 0x6822628
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x6822308
	void RevertVideoMode();// 0x6823620
	void ResetToCurrentSettings();// 0x682260c
	void LoadSettings(bool bForceReload);// 0x6822644
	bool IsVSyncEnabled();// 0x6823814
	bool IsVSyncDirty();// 0x6823688
	bool IsScreenResolutionDirty();// 0x68236f8
	bool IsHDREnabled();// 0x682214c
	bool IsFullscreenModeDirty();// 0x68236c0
	bool IsDynamicResolutionEnabled();// 0x6823730
	bool IsDynamicResolutionDirty();// 0x6823650
	bool IsDirty();// 0x6822714
	int GetVisualEffectQuality();// 0x68229dc
	int GetViewDistanceQuality();// 0x6822d3c
	int GetTextureQuality();// 0x6822ab4
	static int GetSyncInterval();// 0x68224a0
	int GetShadowQuality();// 0x6822c64
	int GetShadingQuality();// 0x6822754
	IntPoint GetScreenResolution();// 0x6823b48
	float GetResolutionScaleNormalized();// 0x6823000
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x6823034
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x68231e0
	float GetRecommendedResolutionScale();// 0x6822578
	byte GetPreferredFullscreenMode();// 0x68238f8
	int GetPostProcessingQuality();// 0x6822904
	int GetOverallScalabilityLevel();// 0x682338c
	IntPoint GetLastConfirmedScreenResolution();// 0x6823b10
	byte GetLastConfirmedFullscreenMode();// 0x68239d0
	static GameUserSettings* GetGameUserSettings();// 0x6822438
	byte GetFullscreenMode();// 0x6823a04
	float GetFrameRateLimit();// 0x6823474
	static int GetFramePace();// 0x682246c
	int GetFoliageQuality();// 0x682282c
	IntPoint GetDesktopResolution();// 0x6823ad8
	static IntPoint GetDefaultWindowPosition();// 0x6822508
	static byte GetDefaultWindowMode();// 0x68224d4
	float GetDefaultResolutionScale();// 0x68225b4
	static IntPoint GetDefaultResolution();// 0x6822540
	int GetCurrentHDRDisplayNits();// 0x6822184
	int GetAudioQualityLevel();// 0x682354c
	int GetAntiAliasingQuality();// 0x6822b8c
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x68221b8
	void ConfirmVideoMode();// 0x6823634
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x6823c48
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x6823b80
	void ApplyNonResolutionSettings();// 0x6823c2c
	void ApplyHardwareBenchmarkResults();// 0x68222ec

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8]
	SoftClassPath RuntimeAssetsCollectionClassName;//[Offset: 0x2b0, Size: 0x18]
	RuntimeAssetsCollectionBase* RuntimeAssetsCollection;//[Offset: 0x2c8, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2d0, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2f0, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x318, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x338, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x350, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x358, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x370, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x378, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x390, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x398, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3a8, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3b0, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c8, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3d0, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e8, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3f0, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x400, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x408, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x418, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x420, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x430, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x438, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x448, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x450, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x460, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x468, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x480, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x488, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x498, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4a0, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4b0, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b8, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c8, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4d0, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4e0, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e8, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f8, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x500, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x510, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x538, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x540, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x548, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x558, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x560, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x568, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x570, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x590, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5b0, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b8, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5d0, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5e0, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5f0, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x600, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x610, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x620, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x630, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x640, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x650, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x654, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x658, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x65c, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x660, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x668, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x66c, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x670, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x680, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x690, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6a0, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a8, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6c0, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6d0, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6e0, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6f0, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x700, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x708, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x720, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x728, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x740, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x748, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x760, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x768, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x780, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x788, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7a8, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7b0, Size: 0x10]
	int TickCycles;//[Offset: 0x7c0, Size: 0x4]
	int GameCycles;//[Offset: 0x7c4, Size: 0x4]
	int ClientCycles;//[Offset: 0x7c8, Size: 0x4]
	float NearClipPlane;//[Offset: 0x7cc, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7d4, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d8, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d8, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7dc, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7e0, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7f0, Size: 0x8]
	FString SkipLODStripStaticMeshNames;//[Offset: 0x818, Size: 0x10]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4]
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4]
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10]
	enum TransitionType;//[Offset: 0x8e8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10]
	float MeshLODRange;//[Offset: 0x910, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x914, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x918, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x91c, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x920, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x924, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x92c, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x930, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x938, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x948, Size: 0x4]
	float DisplayGamma;//[Offset: 0x94c, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x950, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x954, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x964, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x974, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x984, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x994, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a5, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a5, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a5, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a5, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a8, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9b0, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b4, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9b8, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9c8, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9cc, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9d0, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc20, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc30, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc40, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc50, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc54, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc68, Size: 0x4]

--------------------------------
Class: RuntimeAssetsCollectionBase.Object

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x69bff9c
	enum GetSynchronizationState();// 0x69bfeb8
	QualifiedFrameTime GetQualifiedFrameTime();// 0x69c003c
	FrameRate GetFrameRate();// 0x69bfef4
	Timecode GetDelayedTimecode();// 0x69bff30
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x69c0008

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WeaponGrowthManager.Object
	FString GetWeaponBpPath(int ID);// 0x48c38d0

--------------------------------
Class: IMChatObject.Object
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendPlayerPosToIMServerEveryFrame(out const Vector PlayerPosition);// 0x457b9a8

--------------------------------
Class: SolarLuaManager.Object
	SoftObjectPath LuaErrorWidgetPath;//[Offset: 0x40, Size: 0x18]
	LuaErrorWidgetBase* LuaErrorWidget;//[Offset: 0x60, Size: 0x8]
	void SetLuaErrorPopWidget(LuaErrorWidgetBase* Widget);// 0x470eac0
	void OnLuaContextCleanup(bool bFullCleanup);// 0x37b7888
	static enum GetBuildConfiguration();// 0x470eb64
	void AddToDoNotShowAgainList(FString Msg);// 0x470ea10

--------------------------------
Class: LuaErrorWidgetBase.UserWidget.Widget.Visual.Object
	void ShowLuaError(out const FString[] LuaErrorMsgs);// 0x4c8f29c

--------------------------------
Class: SolarGameStatistics.Object
	FString PlayerIdName;//[Offset: 0x30, Size: 0x10]
	FString LogTypeName;//[Offset: 0x40, Size: 0x10]
	SolarGameInstanceBase* Owner;//[Offset: 0x50, Size: 0x8]
	SolarGameStatisticsLogHeadInfo LogHeadInfo;//[Offset: 0x58, Size: 0x28]
	static SolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo();// 0x46bac4c
	void SetSwapLogFileSize(int InSize);// 0x46bb164
	void SetSwapLogFileInterval(int InInterval);// 0x46bb0c8
	void SetLogValueSeparater(FString InValueSeparater);// 0x46bafdc
	void SetLogTerminator(FString InTerminator);// 0x46bae04
	void SetLogFileNameSuffix(FString InLogFileNameSuffix);// 0x46bb388
	void SetLogFileNamePrefix(FString InLogFileNamePrefix);// 0x46bb474
	void SetLogFileExtension(FString InLogFileExtension);// 0x46bb29c
	void SetLogFileDir(FString InLogFileDir);// 0x46bb560
	void SetLogElementSeparater(FString InElementSeparater);// 0x46baef0
	void SetLogCheckIntervalMS(int InLogCheckIntervalMS);// 0x46bb200
	void ReceiveShutdown();// 0x37b7888
	void ReceiveInit();// 0x37b7888
	void NotifyBattleStart(FString InBattleID);// 0x46bc048
	void NotifyBattleEnd();// 0x46bc034
	static void LogInternal(FString InLog);// 0x46baa70
	static void LogGameStats_KeyValues(FString InKey, out const FString[] InValues);// 0x46bbd64
	static void LogGameStats_KeyValue(FString InKey, FString InValue);// 0x46bbea4
	static void LogGameStats_Key(FString InKey);// 0x46bbf94
	bool IsUseEmptyHeadData(FString InPlayerId);// 0x37b7888
	int GetSwapLogFileSize();// 0x46bb94c
	int GetSwapLogFileInterval();// 0x46bb928
	FString GetSCMLogDataString(const bool bIncludeStatistics, SolarPlayerState* InPS);// 0x37b7888
	static FString GetProperLogElement(FString InElement);// 0x46bab10
	FString GetLogValueSeparater();// 0x46bb834
	FString GetLogTerminator();// 0x46bb64c
	SolarGameStatisticsLogHeadInfo GetLogHeadInfo();// 0x46bad28
	FString GetLogFileNameSuffix();// 0x46bba88
	FString GetLogFileNamePrefix();// 0x46bbb7c
	FString GetLogFileExtension();// 0x46bb994
	FString GetLogFileDir();// 0x46bbc70
	FString GetLogElementSeparater();// 0x46bb740
	FString GetLogDataString(const bool bIncludeStatistics, FString InPlayerId);// 0x37b7888
	int GetLogCheckIntervalMS();// 0x46bb970
	FString GetHeadDataString(FString InPlayerId);// 0x37b7888
	FString GetEmptyHeadDataString();// 0x37b7888

--------------------------------
Class: SolarGameStatisticsLogHeadInfo
	int BattleInstanceId;//[Offset: 0x0, Size: 0x4]
	int PIEInstance;//[Offset: 0x4, Size: 0x4]
	FString BattleID;//[Offset: 0x8, Size: 0x10]
	FString WorldName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SolarWeaponMergeMeshManager.Object
	WeaponMergeMeshStruct[] MergeMeshArray;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WeaponMergeMeshStruct
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int weaponid;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	int[] Parts;//[Offset: 0x18, Size: 0x10]
	SkeletalMesh* MergeMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CrashReportManager.Object
	void SetUserId(out FString UserId);// 0x454c36c
	static void ReportLuaException(FString ErrorMsg, FString Traceback, bool bHandled);// 0x454c230

--------------------------------
Class: SolarPopPanelManager.SolarGameManager.Object

--------------------------------
Class: SolarApplicationLifetimeManager.SolarGameManager.Object
	int64 AppWillDeactivateTimestamp;//[Offset: 0x38, Size: 0x8]
	int64 AppHasReactivatedTimestamp;//[Offset: 0x40, Size: 0x8]
	void ReceiveOnAppWillDeactivate(int64 InTimestamp);// 0x37b7888
	void ReceiveOnAppHasReactivated(int64 InTimestamp);// 0x37b7888

--------------------------------
Class: SolarHomeActorManager.Object
	<FString,SolarHomeActor*> SpawnedHomeActors;//[Offset: 0x38, Size: 0x50]
	<IntVector,SolarHomeActor*> SpawnedConstructsLocKey;//[Offset: 0x88, Size: 0x50]
	<IntVector,SolarHomeActor*> PreviewConstructsLocKey;//[Offset: 0xd8, Size: 0x50]
	<SolarHomeConnectedGraph*> ConnectedGraphSet;//[Offset: 0x128, Size: 0x50]
	<FString,SolarHomeActor*> ClippingHomeActors;//[Offset: 0x178, Size: 0x50]
	<FString,SolarHomeActor*> InValidHomeActors;//[Offset: 0x1c8, Size: 0x50]
	<FString,SubPoolOfHomeActor*> HomeActorPools;//[Offset: 0x218, Size: 0x50]
	<int,HomeActorStaticData> StaticDataMap;//[Offset: 0x268, Size: 0x50]
	<FString,class Object> HomeActorClassPool;//[Offset: 0x2b8, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> SpawnedSpacesLocKey;//[Offset: 0x378, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> ShowsSpacesLocKey;//[Offset: 0x3c8, Size: 0x50]
	DataTable* HomeObjectTable;//[Offset: 0x470, Size: 0x8]
	SolarHomeShaderConfig* ShaderConfig;//[Offset: 0x478, Size: 0x8]
	DataTable* TextureDataTable;//[Offset: 0x480, Size: 0x8]
	DataTable* IconDataTable;//[Offset: 0x488, Size: 0x8]
	DataTable* PicDataTable;//[Offset: 0x490, Size: 0x8]
	int BuildCountPerFrame;//[Offset: 0x498, Size: 0x4]
	SolarHomeSpaceSpawner* HomeSpaceSpawner;//[Offset: 0x4b0, Size: 0x8]
	SolarHomePlayerController* HomePlayerCtrl;//[Offset: 0x4b8, Size: 0x8]
	SolarWaterActorNew* WaterActor;//[Offset: 0x4e0, Size: 0x8]
	<HomeShaderData,MaterialInstanceDynamic*> HomeObjShadersPool;//[Offset: 0x4e8, Size: 0x50]
	bool bIsConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool IsLoadingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	<SolarHomeDragUI*> CacheDragUIs;//[Offset: 0x5a8, Size: 0x50]
	<SolarHomeDragUI*> UsedDragUIs;//[Offset: 0x5f8, Size: 0x50]
	void UpdateCanSendSaveMsg();// 0x46ca4fc
	void UpdateCameraLayer(int NewLayer);// 0x37b7888
	bool TrySelectHomeActor(out const FString SelectedThisID, bool bSelect);// 0x46ca98c
	bool TrySaveAllHomeActors();// 0x46ca560
	void TryResetAllHomeActors();// 0x46ca54c
	void TryRemoveHomeActors(out const FString[] RemoveThisID);// 0x46ca718
	void TryRemoveHomeActor(out const FString RemoveThisID);// 0x46ca80c
	void TryRemoveAllInvalidHomeActors();// 0x46ca538
	void TryRemoveAllHomeActors();// 0x46ca524
	void TryDyeHomeActor(out const FString DyeThisID, out const FString SlotName, out const FString TexturesID);// 0x46ca598
	void TryCreateHomeActorsNoLimit(out const HomeBuildReqData[] ReqDataArr);// 0x46cab64
	void TryCreateHomeActors(out const HomeBuildReqData[] ReqData);// 0x46caaa8
	void TryCreateHomeActor(out const HomeBuildReqData ReqData);// 0x46cac20
	void TryConfirmHomeActor(out const FString SelectedThisID, bool bCancel);// 0x37b7888
	void TryCancelHomeActor(out const FString SelectedThisID);// 0x46ca8cc
	void SetLastSelectingThisID(out const FString InThisID);// 0x46cb244
	void SetLastCreateThisID(out const FString InThisID);// 0x46cb134
	void SetIsConstruct(bool bNewConstruct);// 0x46caefc
	void SetHomeActorValid(SolarHomeActor* TargetActor, bool bNewValid);// 0x46c9fd4
	void SetHoldingType(enum NewType);// 0x46cae20
	void SetDragUILoc(SolarHomeDragUI* TargetUI, out const Vector NewLoc);// 0x46ca408
	void SetCurSelectingThisID(out const FString InThisID, bool bSelected);// 0x46cb440
	void SetCurBuildingID(int NewItemID);// 0x46cafa4
	void SelectHomeActor_Request(out const FString SelectedThisID, bool bSelect);// 0x37b7888
	void SelectHomeActor_Other(FString ThisID);// 0x37b7888
	void SaveBuilding_Request(bool bSave);// 0x37b7888
	void RotateHomeActor(SolarHomeActor* TargetHomeActor, int DeltaAngle);// 0x46ca0c4
	void RemoveHomeActors_Request(out const FString[] WillRemoveThisIDs);// 0x37b7888
	void RemoveHomeActor_Request(out const FString WillRemoveThisID);// 0x37b7888
	void RemoveAllHomeActors_Request();// 0x37b7888
	void OnSelectingThisIDChanged(bool bSelect, out const FString NewThisID);// 0x37b7888
	void OnSelectingActorCanSaveChanged(bool bNewCanSave);// 0x37b7888
	bool OnIsDragChanged(bool bIsDrag);// 0x37b7888
	void OnInvalidActorsCountChanged(int NewCount);// 0x37b7888
	void OnHoldingTypeChanged(enum OldType, enum NewType);// 0x46cad3c
	void NotifyWhenWallDevicePutOnOtherPlace();// 0x37b7888
	void NotifyWhenFloorDevicePutOnOtherPlace();// 0x37b7888
	void NotifyWhenClickActorOnOtherFloor();// 0x37b7888
	void NotifyWhenCeilingDevicePutOnOtherPlace();// 0x37b7888
	void NotifyLoadingUIChanged(bool bShow);// 0x37b7888
	void MoveDevice(SolarHomeActor* TargetHomeActor, const SolarHomeActor* ParHomeActor, enum HitDir, out const Vector NewLoc);// 0x46ca290
	void MoveConstruct(SolarHomeActor* TargetHomeActor, SolarHomeBaseSpace* NewSpace);// 0x46ca1ac
	bool HasFoundation();// 0x46c94ac
	DataTable* GetTextureDataTable();// 0x46cb930
	HomeActorStaticData GetStaticDataByItemID(int ItemID);// 0x46c9588
	SolarHomeShaderConfig* GetShaderConfig();// 0x46cb964
	void GetMeshDefaultMat(int64 InItemID, out BuildMeshSlotData[] outData);// 0x46c9844
	FString GetLastCreateThisID();// 0x46cb048
	int GetInvalidActorsCount();// 0x46c96c8
	SolarHomeSpaceSpawner* GetHomeSpaceSpawner();// 0x46cb57c
	SolarHomePlayerController* GetHomePlayerCtrl();// 0x46cb548
	bool GetHomePicConfig(FString Name, out HomePic OutConfig);// 0x46cb5b0
	bool GetHomeObjectConfig(int InItemID, out HomeObject OutConfig);// 0x46cb998
	bool GetHomeIconConfig(FString Name, out HomeIcon OutConfig);// 0x46cb750
	enum GetHomeActorSecondType(int ItemID);// 0x37b7888
	enum GetHomeActorFirstType(int ItemID);// 0x37b7888
	SolarHomeActor* GetHomeActorByThisID(out const FString InThisID);// 0x46cbc30
	SolarHomeActor* GetHomeActorByLoc(out const Vector InLoc);// 0x46cbaa0
	FString GetCurSelectingThisID();// 0x46cb354
	enum GetCurHoldingItemType();// 0x46caec4
	int GetCurBuildingID();// 0x46caee0
	bool GetActorCanSave(SolarHomeActor* InActor);// 0x46c9990
	void DyeingHomeActor_Request(out const FString WillDyeingThisID, out const FString SlotName, out const FString TexturesID);// 0x37b7888
	void DeSelectAllHomeActors_Request();// 0x46ca510
	void CreateHomeActors_Request(out const HomeBuildReqData[] WillCreateDatas);// 0x37b7888
	void CreateHomeActor_Request(out const HomeBuildReqData WillCreateData);// 0x37b7888
	void ClientUpdateHomeActor_UseQueue(out const HomeActorServerData UpdateData);// 0x46c9be8
	void ClientUpdateHomeActor(out const HomeActorServerData UpdateData);// 0x46c9cbc
	void ClientRemoveHomeActor_UseQueue(out const HomeActorServerData RemoveData);// 0x46c9a40
	void ClientRemoveHomeActor(out const HomeActorServerData RemoveData);// 0x46c9b14
	void ClientCreateHomeActor_UseQueue(out const HomeActorServerData WillCreateData, enum InLoadingType);// 0x46c9d90
	bool ClientCreateHomeActor(out const HomeActorServerData WillCreateData, bool InIsConstruct);// 0x46c9ea4
	void Clear();// 0x46c96b4
	void ChangeCameraLayer(int DeltaLayer);// 0x46c94e4
	bool CanPreviewWithBuilding(int TypeID);// 0x37b7888
	bool CanDevicePlace(enum DeviceType, out const SolarHomeActor* HitConstruct, out const enum HitDir);// 0x46c96e4

--------------------------------
Class: HomeBuildReqData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	BuildMeshSlotData[] MatDataArr;//[Offset: 0x20, Size: 0x10]
	FString ParentThisID;//[Offset: 0x30, Size: 0x10]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: BuildMeshSlotData
	FString SlotName;//[Offset: 0x0, Size: 0x10]
	FString TexturesID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarHomeActor.Actor.Object
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x230, Size: 0x8]
	HomeActorStaticData HomeActorStaticData;//[Offset: 0x238, Size: 0x38]
	HomeActorServerData HomeActorServerData;//[Offset: 0x270, Size: 0x68]
	<FName,HomeOriginalShader> OriginalShaders;//[Offset: 0x2d8, Size: 0x50]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x338, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x340, Size: 0x10]
	<SolarHomeActor*,int> HitHomeActors;//[Offset: 0x350, Size: 0x50]
	SolarHomeConnectedGraph* CurrentConnectedGraph;//[Offset: 0x3a0, Size: 0x8]
	SolarHomeActor*[] NeighborFloors;//[Offset: 0x3a8, Size: 0x10]
	SolarHomeActor*[] NeighborWalls;//[Offset: 0x3b8, Size: 0x10]
	void UpdateHomeActor(out const HomeActorServerData NewServerData);// 0x46c31f0
	void UpdateHitHomeActors(SolarHomeActor* NewActor, bool isAdd);// 0x46c399c
	void SetStaticData(out const HomeActorStaticData NewData);// 0x46c3df0
	void SetServerData(out const HomeActorServerData NewData);// 0x46c3d1c
	void SetMaterial(out const HomeActorServerData InServerData, bool bPlaceable);// 0x46c3c00
	void OnOverlayEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x46c3554
	void OnOverlayBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x46c36c8
	void OnOverLap(Actor* OtherActor, bool isHitBegin);// 0x46c3a8c
	void OnCreatedByServer(out const HomeActorStaticData NewStaticData, out const HomeActorServerData NewServerData);// 0x46c32c4
	void OnCanSaveChanged(bool bNewCanSave);// 0x46c38f0
	DataTable* GetTextureDataTable();// 0x46c3b7c
	StaticMeshComponent* GetStaticMeshComp();// 0x46c3094
	HomeActorStaticData GetStaticData();// 0x46c3534
	SolarHomeShaderConfig* GetShaderConfig();// 0x46c3bb0
	HomeActorServerData GetServerData();// 0x46c3514
	bool GetNextLegalRotator(float RotAngle, out Rotator OutNextRot);// 0x46c3414
	enum GetHitSurface(out const Vector HitNormal);// 0x46c3138
	bool GetCanSave();// 0x46c3be4
	bool CanSelected();// 0x46c30c8
	bool CanRemove();// 0x46c3100

--------------------------------
Class: HomeActorServerData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FString ThisID;//[Offset: 0x8, Size: 0x10]
	enum Owner;//[Offset: 0x18, Size: 0x4]
	bool isPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	Vector CurLocation;//[Offset: 0x20, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x2c, Size: 0xc]
	BuildMeshSlotData[] FacesMatData;//[Offset: 0x38, Size: 0x10]
	FString ParentObject;//[Offset: 0x48, Size: 0x10]
	FString[] ChildObjects;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: HomeActorStaticData
	int64 ItemID;//[Offset: 0x0, Size: 0x8]
	enum FirstType;//[Offset: 0x8, Size: 0x4]
	enum SecondType;//[Offset: 0xc, Size: 0x4]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	FString BpPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: HomeOriginalShader

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x4d0, Size: 0xc]
	float LineThickness;//[Offset: 0x4dc, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x67b3f20
	Vector GetUnscaledBoxExtent();// 0x67b3ec4
	Vector GetScaledBoxExtent();// 0x67b3ee8

--------------------------------
Class: SolarHomeConnectedGraph.Object
	<SolarHomeActor*> ConnectedFloors;//[Offset: 0x28, Size: 0x50]
	<SolarHomeActor*> BaseWalls;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: SolarHomeShaderConfig.DataAsset.Object
	SoftObjectPath EmissiveMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath MaskedMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath TranslucentMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath DeleteEmissiveMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DeleteMaskedMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath DeleteTranslucentMatPath;//[Offset: 0xa8, Size: 0x18]
	LinearColor PrdinaryColor;//[Offset: 0xc0, Size: 0x10]
	LinearColor PlaceableColor;//[Offset: 0xd0, Size: 0x10]
	LinearColor UnPlaceableColor;//[Offset: 0xe0, Size: 0x10]
	LinearColor PlaceableColorOther;//[Offset: 0xf0, Size: 0x10]
	float BreathLightTimeScale;//[Offset: 0x100, Size: 0x4]
	float PlaceableEmissveA;//[Offset: 0x104, Size: 0x4]
	float UnPlaceableEmissveA;//[Offset: 0x108, Size: 0x4]

--------------------------------
Class: SolarHomeDragUI.Actor.Object

--------------------------------
Class: SolarHomeBaseSpace.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x230, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x238, Size: 0x10]
	BaseSpaceData BaseSpaceData;//[Offset: 0x248, Size: 0xc]
	void UpdateHomeSpaceByData(out const BaseSpaceData NewData);// 0x46d0f1c
	void ShowBaseSpace();// 0x46d0e24
	void OnBaseSpaceUnOccupied();// 0x46d0de8
	void OnBaseSpaceOccupied();// 0x46d0dfc
	void OnBaseSpaceCreated(int Layer, enum BaseSpaceType);// 0x46d0e38
	void HideBaseSpace();// 0x46d0e10
	BaseSpaceData GetData();// 0x46d0dc4

--------------------------------
Class: BaseSpaceData
	int Layer;//[Offset: 0x0, Size: 0x4]
	enum BaseSpaceType;//[Offset: 0x4, Size: 0x4]
	bool IsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SolarHomeSpaceSpawner.SolarMapElementBase.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x2a0, Size: 0x8]
	<enum,class Object> TypeClassMap;//[Offset: 0x2a8, Size: 0x50]
	<float,int> LayerMap;//[Offset: 0x2f8, Size: 0x50]
	float FloorUnit;//[Offset: 0x368, Size: 0x4]
	float WallUnit;//[Offset: 0x36c, Size: 0x4]
	float BaseUnit;//[Offset: 0x370, Size: 0x4]
	float RoundOnBase;//[Offset: 0x374, Size: 0x4]
	float RoundOnFloor;//[Offset: 0x378, Size: 0x4]
	float ArrowOnBase;//[Offset: 0x37c, Size: 0x4]
	float ArrowOnFloor;//[Offset: 0x380, Size: 0x4]
	float ArrowToWall;//[Offset: 0x384, Size: 0x4]
	Transform[] BasisFloorsTransArr;//[Offset: 0x390, Size: 0x10]
	bool IsAirWallOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	void OpenAirWall();// 0x46d5950
	void Init(int InBuildWidth, int InBuildHeight);// 0x46d5980
	bool GetIsAirWallOpen();// 0x46d5964
	void CloseAirWall();// 0x46d593c

--------------------------------
Class: SolarHomePlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	InputComponent* ConstructionInputComponent;//[Offset: 0x9f8, Size: 0x8]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0xa00, Size: 0x8]
	SolarHomeActor* DragActor;//[Offset: 0xa08, Size: 0x8]
	float MinCheckDistance;//[Offset: 0xa10, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xa14, Size: 0x4]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0xa18, Size: 0x8]
	bool bIsViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 0x1]
	bool bIsConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa21, Size: 0x1]
	float MoveCheckDis;//[Offset: 0xa30, Size: 0x4]
	float CheckDis;//[Offset: 0xbc8, Size: 0x4]
	SolarHomeCameraManager* CameraManager;//[Offset: 0xc60, Size: 0x8]
	Vector LookAtLocation;//[Offset: 0xc68, Size: 0xc]
	Vector OriginalLookAtLocation;//[Offset: 0xc74, Size: 0xc]
	Actor* CurrentViewTarget;//[Offset: 0xc80, Size: 0x8]
	Actor* OriginalViewTarget;//[Offset: 0xc88, Size: 0x8]
	void StopBuilding();// 0x46d4928
	void StartFadeOutEffect();// 0x46d48d0
	void StartBuilding();// 0x46d493c
	void SolarGM_Home_ResetLayer(int InLayer);// 0x46d42d4
	void SolarGM_FillUpHome();// 0x46d42c0
	void ShowBuildMainUI(bool bShow);// 0x4c8f29c
	void SetNormalCameraTarget();// 0x46d451c
	void SetConstructionCameraTarget();// 0x46d4530
	void SendMoveToBackend(out const ServerMoveData MoveData);// 0x4c8f29c
	void ResetConstructionCamera();// 0x46d438c
	void ResetCameraRotation();// 0x46d4378
	void OnTouchMove(int Index, out const Vector Location);// 0x46d46e8
	void OnTouchEnd(int Index, out const Vector Location);// 0x46d45f4
	void OnTouchBegin(int Index, out const Vector Location);// 0x46d47dc
	void OnDragBegin(out const Vector Location);// 0x46d4544
	void OnCameraRight(const float Value);// 0x46d43a0
	void OnCameraForward(const float Value);// 0x46d4444
	bool GetIsConstruction();// 0x46d490c
	int GetCameraCurrentLayer();// 0x46d44e8
	void BindConstructionInput();// 0x46d48f8
	void BindBattleInput();// 0x46d48e4

--------------------------------
Class: ServerMoveData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	int64 ServerTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector Acceleration;//[Offset: 0x10, Size: 0xc]
	Vector Velocity;//[Offset: 0x1c, Size: 0xc]
	Vector Loction;//[Offset: 0x28, Size: 0xc]
	byte CompressedMoveFlags;//[Offset: 0x34, Size: 0x1]
	byte RollByte;//[Offset: 0x35, Size: 0x1]
	uint32 YawPitchInt;//[Offset: 0x38, Size: 0x4]
	byte MovementMode;//[Offset: 0x3c, Size: 0x1]
	uint32 FullBodyAnimationState;//[Offset: 0x40, Size: 0x4]
	uint32 MontageAnimState;//[Offset: 0x44, Size: 0x4]
	byte JetPackFlag;//[Offset: 0x48, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: SolarHomeCameraManager.ActorComponent.Object
	CameraMovementParameters CameraMovementSetting;//[Offset: 0xc0, Size: 0x68]
	Vector LookAtLocation;//[Offset: 0x13c, Size: 0xc]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x148, Size: 0x8]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0x158, Size: 0x8]
	CameraActor* BuildCamera;//[Offset: 0x160, Size: 0x8]
	Actor* BattleCamera;//[Offset: 0x168, Size: 0x8]
	CameraComponent* BuildCameraComp;//[Offset: 0x170, Size: 0x8]
	void UpdateSliderScaleUI(float InScale);// 0x4c8f29c
	void UpdateCameraDistanceUI(float InPercent, float InScale);// 0x4c8f29c
	void SetNormalCameraTarget();// 0x46d29f8
	void SetConstructionCameraTarget();// 0x46d2a0c
	void RotateCameraSpin(const float Value);// 0x46d2574
	void RotateCameraPitch(const float Value);// 0x46d2618
	void MoveCameraRight(const float Value);// 0x46d26bc
	void MoveCameraForward(const float Value);// 0x46d2760
	void MoveCamera(int Index, out const Vector Location, const <int,Vector> FingerLocations);// 0x46d2804
	bool ChangeCameraMode(enum InMode);// 0x46d2a20
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);// 0x46d2ad0
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);// 0x46d2bc4

--------------------------------
Class: CameraMovementParameters
	float OneFingerMoveScale;//[Offset: 0x0, Size: 0x4]
	float MouseMoveScale;//[Offset: 0x4, Size: 0x4]
	float OneFingerZoomScale;//[Offset: 0x8, Size: 0x4]
	float MouseZoomScale;//[Offset: 0xc, Size: 0x4]
	float DoubleFingerSpinScale;//[Offset: 0x10, Size: 0x4]
	float DoubleFingerPitchScale;//[Offset: 0x14, Size: 0x4]
	float MouseRotateScale;//[Offset: 0x18, Size: 0x4]
	float LookAtLocationHeigh;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float PanoramicDefaultPitch;//[Offset: 0x28, Size: 0x4]
	float homeCameraBoundary;//[Offset: 0x2c, Size: 0x4]
	CurveFloat* DistanceCurve;//[Offset: 0x30, Size: 0x8]
	float DefultTime;//[Offset: 0x38, Size: 0x4]
	CurveFloat* DistanceCurve_Orthographic;//[Offset: 0x40, Size: 0x8]
	float DefaultTime_Orthographic;//[Offset: 0x48, Size: 0x4]
	CurveFloat* LayerTransitionCurve;//[Offset: 0x50, Size: 0x8]
	CurveFloat* CeilingTransitionCurve;//[Offset: 0x58, Size: 0x8]
	CurveFloat* PanoramicTransitionCurve;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: HomePic.TableRowBase
	SoftObjectPath PicPath;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: HomeObject.TableRowBase
	FString HomeObjectDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath BpPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PreviewBpPath;//[Offset: 0x30, Size: 0x18]
	BuildMeshSlotData[] DefaultMat;//[Offset: 0x48, Size: 0x10]
	bool IsFocusCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsDrawable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool IsRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool IsRotateHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int RotateAngleSingle;//[Offset: 0x60, Size: 0x4]
	SoftObjectPath Build_SFPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath Remove_SFXPath;//[Offset: 0x80, Size: 0x18]
	float FRemove_SFXTime;//[Offset: 0x98, Size: 0x4]
	FString FSBuild_Audio;//[Offset: 0xa0, Size: 0x10]
	FString FSRemove_Audio;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: HomeIcon.TableRowBase
	SoftObjectPath NormalIconPath;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath SelectedIconPath;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: SubPoolOfHomeActor.Object
	SolarHomeActor*[] UseActors;//[Offset: 0x30, Size: 0x10]
	SolarHomeActor*[] UnUseActors;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarWaterActorNew.StaticMeshActor.Actor.Object
	void OnExitWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x485ecf8
	void OnEnterWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x485ee64

--------------------------------
Class: HomeShaderData

--------------------------------
Class: SolarGameplayLogger.Object
	enum[] DefaultChannels;//[Offset: 0x28, Size: 0x10]
	static void SolarDebugLog(enum Channel, FString Message);// 0x46b27e8
	static void EnableDebugLogChannel(enum Channel);// 0x46b2754
	static void DisableDebugLogChannel(enum Channel);// 0x46b26c0

--------------------------------
Class: SolarAttributeSubSystem.SolarGameManager.Object
	<int,SolarAttributeConfig> AttributeDefaultData;//[Offset: 0x38, Size: 0x50]
	<int,SolarAttributeSubModifierGroup*> GlobalModifiers;//[Offset: 0x88, Size: 0x50]
	float CharacterTakeDamage(SolarAttributeSubComponent* AttributeSubComp, out const float Damage);// 0x37b7888
	float CalcWeaponFireDamage(SolarAttributeSubComponent* AttributeSet, out const int ModeIdx);// 0x37b7888

--------------------------------
Class: SolarAttributeConfig
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
	float BaseValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarAttributeSubModifierGroup.Object

--------------------------------
Class: SolarAttributeSubComponent.ActorComponent.Object
	<int,SolarAttributeSubData*> AttributeSubs;//[Offset: 0xb8, Size: 0x50]
	SolarAttributeSubReplicateData[] AttributeSubRepData;//[Offset: 0x108, Size: 0x10]
	<int,float> ClientAttributeSubValues;//[Offset: 0x118, Size: 0x50]
	void RemoveModifier(int AttributeSubID, out const FName Name);// 0x45f9aa0
	void OnRep_AttributeSubRepDatas();// 0x45f9a44
	void OnAttributeSubChanged();// 0x45f9a58
	float GetValue(int AttributeSubID);// 0x45f9d28
	SolarAttributeSubSystem* GetAttributeSubSystem();// 0x45f9a6c
	static SolarAttributeSubComponent* GetAttributeSubComponentFromActor(Actor* InActor);// 0x45f99a0
	int AddModifier(int AttributeSubID, byte InOpType, float Magnitude, out const FName Name);// 0x45f9b9c

--------------------------------
Class: SolarAttributeSubData.Object
	SolarAttributeSubModifierGroup* LocalModifier;//[Offset: 0x28, Size: 0x8]
	SolarAttributeSubModifierGroup* GlobalModifier;//[Offset: 0x30, Size: 0x8]
	int AttributeID;//[Offset: 0x50, Size: 0x4]
	float CurrentValue;//[Offset: 0x54, Size: 0x4]
	float MaxValue;//[Offset: 0x58, Size: 0x4]
	float MinValue;//[Offset: 0x5c, Size: 0x4]
	float BaseValue;//[Offset: 0x60, Size: 0x4]
	void OnModifierChanged();// 0x45fa564

--------------------------------
Class: SolarAttributeSubReplicateData
	int AttributeID;//[Offset: 0x0, Size: 0x4]
	float AttributeValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SCustomizedGameModeManager.Object
	SolarGameMode_JobManager* JobManager;//[Offset: 0x30, Size: 0x8]
	SolarGameMode_DataManager* DataManager;//[Offset: 0x38, Size: 0x8]
	SolarGameMode_PlayerManager* PlayerManager;//[Offset: 0x40, Size: 0x8]
	SolarGameMode_CharacterManager* CharacterManager;//[Offset: 0x48, Size: 0x8]
	SolarGameMode_LevelManager* LevelManager;//[Offset: 0x50, Size: 0x8]
	SolarGameMode_ElementManager* ElementManager;//[Offset: 0x58, Size: 0x8]
	SolarGameMode_EffectJobManager* EffectJobManager;//[Offset: 0x60, Size: 0x8]
	SCustomizedMode_AttributeManager* AttributeManager;//[Offset: 0x68, Size: 0x8]
	SolarGameModeData* GameModeData;//[Offset: 0x70, Size: 0x8]
	void InitModeById(int ModeID);// 0x45c4888

--------------------------------
Class: SolarGameMode_JobManager.Object
	<FString,GameMode_SideData*> SideList;//[Offset: 0x38, Size: 0x50]
	SCustomizedGameMode* CurrentGameMode;//[Offset: 0x88, Size: 0x8]
	DataTable* CurrentModeJobData;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: GameMode_SideData.Object
	<FString,GameMode_JobData*> JobList;//[Offset: 0x28, Size: 0x50]
	SGameMode_Player*[] PlayerList;//[Offset: 0x78, Size: 0x10]
	FString Name;//[Offset: 0x88, Size: 0x10]
	int SideIndex;//[Offset: 0x98, Size: 0x4]
	int MatchCount;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: GameMode_JobData.Object
	SGameMode_Player*[] PlayerList;//[Offset: 0x28, Size: 0x10]
	FString Name;//[Offset: 0x38, Size: 0x10]
	FString[] Tags;//[Offset: 0x48, Size: 0x10]
	GameMode_JobManagerRow JobData;//[Offset: 0x58, Size: 0x120]
	int MatchCount;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: SGameMode_Player.Object
	Controller* Controller;//[Offset: 0x28, Size: 0x8]
	int PlayerId;//[Offset: 0x30, Size: 0x4]
	FString SolarPlayerId;//[Offset: 0x38, Size: 0x10]
	byte SolarTeamId;//[Offset: 0x48, Size: 0x1]
	byte PosInTeam;//[Offset: 0x49, Size: 0x1]
	int Gender;//[Offset: 0x4c, Size: 0x4]
	int AvatarID;//[Offset: 0x50, Size: 0x4]
	FString SideName;//[Offset: 0x58, Size: 0x10]
	FString JobName;//[Offset: 0x68, Size: 0x10]
	FString SolarNickName;//[Offset: 0x78, Size: 0x10]
	FString OS;//[Offset: 0x88, Size: 0x10]
	int UserId;//[Offset: 0x98, Size: 0x4]
	bool bIsAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	enum PlayerState;//[Offset: 0x9d, Size: 0x1]
	void OnRep_PlayerController();// 0x46adc04
	SolarPlayerState* GetBindedPlayerState();// 0x46addc8
	Pawn* GetBindedPawn();// 0x46addfc
	SolarCharacter* GetBindedCharacter();// 0x46ade30
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x46adcc8
	void ClientCloseUI(FString UIName);// 0x46adc18
	void BindNewCharacter(SolarCharacter* NewCharacter);// 0x46ade64

--------------------------------
Class: GameMode_JobManagerRow.TableRowBase
	FString Name;//[Offset: 0x8, Size: 0x10]
	FString Desc;//[Offset: 0x18, Size: 0x10]
	int Count;//[Offset: 0x28, Size: 0x4]
	int MatchCount;//[Offset: 0x2c, Size: 0x4]
	FString Side;//[Offset: 0x30, Size: 0x10]
	FString Job;//[Offset: 0x40, Size: 0x10]
	FString[] Tag;//[Offset: 0x50, Size: 0x10]
	SoftObjectPath BP_Join;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath BP_Deploy;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath BP_Slay;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath BP_Assist;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath BP_Die;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath BP_Hit;//[Offset: 0xd8, Size: 0x18]
	SoftObjectPath BP_GetHit;//[Offset: 0xf0, Size: 0x18]
	SoftObjectPath BP_ControllerLogic;//[Offset: 0x108, Size: 0x18]

--------------------------------
Class: SCustomizedGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SolarGameMode_LogicComponent* ModeLogicComponent;//[Offset: 0x4e0, Size: 0x8]
	SolarGameMode_RewardComponent* ModeRewardComponent;//[Offset: 0x4e8, Size: 0x8]
	SCustomizedGameModeManager* CustomModeManager;//[Offset: 0x4f0, Size: 0x8]
	SolarGameMode_DataManager* CustomModeDataManager;//[Offset: 0x4f8, Size: 0x8]
	class SolarRadarBase* RadarClass;//[Offset: 0x500, Size: 0x8]
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x4c8f29c
	void OnReceiveBattleStart(PlayerController* PlayerController);// 0x4c8f29c

--------------------------------
Class: SolarGameMode_LogicComponent.ActorComponent.Object
	void OnPlayerQuit(SGameMode_Player* QuitPlayer);// 0x4c8f29c
	void OnPlayerPlacedFinished(SGameMode_Player* Player, FString LevelName);// 0x4c8f29c
	void OnPlayerOfflineTimeOut(SGameMode_Player* OfflineTimeoutPlayer);// 0x4c8f29c
	void OnPlayerLevelLoaded(SGameMode_Player* Player, FString LevelName);// 0x4c8f29c
	void OnPlayerJoin(SGameMode_Player* NewPlayer);// 0x4c8f29c
	void OnPlayerJobChange(SGameMode_Player* Player, FString OldSide, FString OldJob, FString NewSide, FString NewJob);// 0x4c8f29c
	void OnOpenSupplement();// 0x4c8f29c
	void OnMatchEnd(const int RPCID);// 0x4c8f29c
	void OnGameModeInit();// 0x4c8f29c
	void OnCloseSupplement();// 0x4c8f29c
	void OnBotAIDataReady();// 0x4c8f29c
	void OnBattleTick(float BattleTime);// 0x4c8f29c
	void OnBattleBegin();// 0x4c8f29c

--------------------------------
Class: SolarGameMode_RewardComponent.ActorComponent.Object
	void OnPlayerOut(SGameMode_Player* Player, enum PlayerOutType);// 0x4c8f29c
	void ClientOnPlayerOut(SGameMode_Player* Player, enum PlayerOutType);// 0x4c8f29c

--------------------------------
Class: SolarGameMode_DataManager.Object
	<enum,SolarGameMode_DataAccessorBase*> Accessors;//[Offset: 0x40, Size: 0x50]
	SolarGameMode_JobManager* JobManager;//[Offset: 0x98, Size: 0x8]
	SCustomizedGameMode* CurrentGameMode;//[Offset: 0xa0, Size: 0x8]
	SCustomizedMode_ModeDataReady* ModeDataReadyAction;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: SolarGameMode_DataAccessorBase.Object
	SolarGameMode_RankManager* RankManager;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SolarGameMode_RankManager.Object
	SolarGameMode_RankData[] NewRanking;//[Offset: 0x30, Size: 0x10]
	SolarGameMode_RankData[] OldRanking;//[Offset: 0x40, Size: 0x10]
	<FString,SolarGameMode_RankDataMap> RankObjectList;//[Offset: 0x50, Size: 0x50]
	void RemoveRangeEvent(FString RankDataName);// 0x468a918
	void BindEvent(FString RankDataName, delegate Delegate);// 0x468aa18

--------------------------------
Class: SolarGameMode_RankData
	Object* HostObject;//[Offset: 0x0, Size: 0x8]
	int RankingNumber;//[Offset: 0x8, Size: 0x4]
	int IntValue;//[Offset: 0xc, Size: 0x4]
	float FloatValue;//[Offset: 0x10, Size: 0x4]
	FString RankDataName;//[Offset: 0x18, Size: 0x10]
	FString ValueName;//[Offset: 0x28, Size: 0x10]
	enum DataType;//[Offset: 0x38, Size: 0x1]
	enum HostType;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: SolarGameMode_RankDataMap
	enum RankDataType;//[Offset: 0x0, Size: 0x1]
	SolarGameMode_RankData[] CurrentRanking;//[Offset: 0x8, Size: 0x10]
	<Object*,SolarGameMode_RankData> RankDatas;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: SCustomizedMode_ModeDataReady.BlueprintAsyncActionBase.Object
	delegate OnModeDataReadyComplete;//[Offset: 0x38, Size: 0x10]
	void HandleModeDataReadyComplete();// 0x45c6740
	static SCustomizedMode_ModeDataReady* BindModeDataReady(Object* WorldContextObject);// 0x45c6754

--------------------------------
Class: SolarRadarBase.Actor.Object
	bool bPublicRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	enum RadarType;//[Offset: 0x231, Size: 0x1]
	enum[] ScanTargetTypes;//[Offset: 0x238, Size: 0x10]
	float EffectRadius;//[Offset: 0x248, Size: 0x4]
	Vector2D EffectSize;//[Offset: 0x24c, Size: 0x8]
	bool bTeamShare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]
	bool bShowTowards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1]
	bool bMarkPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1]
	bool bUniqueExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 0x1]
	bool bNotifyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float DisplayTime;//[Offset: 0x25c, Size: 0x4]
	float ScanFrequency;//[Offset: 0x260, Size: 0x4]
	bool bPerspectiveInScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	MaterialInterface* PerspectiveMaterial;//[Offset: 0x268, Size: 0x8]
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0x2b8, Size: 0x4]
	GameplayTagContainer InhibitionTagContainer;//[Offset: 0x2c0, Size: 0x20]
	Actor*[] PerspectiveedActors;//[Offset: 0x2e0, Size: 0x10]
	<Actor*,PerspectiveActorInfo> ProcessingActors;//[Offset: 0x2f0, Size: 0x50]
	int[] OneTimeScannedPlayerIDs;//[Offset: 0x340, Size: 0x10]
	void ServerOneTimeScanStart();// 0x475f900
	void PerspectiveTargetCharacter(SolarCharacter* InTargetCharacter);// 0x475f848
	void OnRep_OneTimeScannedPlayerIDs();// 0x475f8ec

--------------------------------
Class: PerspectiveActorInfo

--------------------------------
Class: SolarGameMode_PlayerManager.Object
	SGameMode_Player*[] Players;//[Offset: 0x30, Size: 0x10]
	<Controller*,SGameMode_Player*> ControllerMap;//[Offset: 0x40, Size: 0x50]
	SGameMode_Player* LocalPlayer;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: SolarGameMode_CharacterManager.Object
	SolarCharacter*[] Characters;//[Offset: 0x30, Size: 0x10]
	static void PlaceCharacterAtStart(SolarCharacter* Character, PlayerStart* PlayerStart, const bool bClearAllItems, const bool bEmptyEnergy, const bool bReChargeJetToFull, const bool bClearWeapons);// 0x46886bc
	static void PlaceCharacterAtLocation(SolarCharacter* Character, out const Vector Location);// 0x46885d8

--------------------------------
Class: SolarGameMode_LevelManager.Object
	<FString,SGameMode_LevelConfig> LevelConfigs;//[Offset: 0xc0, Size: 0x50]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x110, Size: 0x50]
	<FString,ElementLevelStreaming> PersistentElementLevelStreamings;//[Offset: 0x1b0, Size: 0x50]
	FString[] LoadingElementLevelNames;//[Offset: 0x200, Size: 0x10]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x210, Size: 0x10]
	void ShowTransitionUI();// 0x37b7888
	void SetMinimapFootprintVisible(bool bVisible);// 0x37b7888
	void OnStreamingLevelLoaded();// 0x4693584
	void OnLevelLoaded();// 0x4693548
	void OnElementStreamingLevelUnLoaded();// 0x469355c
	void OnElementStreamingLevelLoaded();// 0x4693570
	void HideTransitionUI();// 0x37b7888

--------------------------------
Class: SGameMode_LevelConfig
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x20, Size: 0x18]
	int MiniMapId;//[Offset: 0x38, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	SolarElementGroupPath[] ElementGroups;//[Offset: 0x40, Size: 0x10]
	class LoadingUIBase* LoadingUI;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SolarElementGroupPath
	FString Name;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ElementLevel;//[Offset: 0x10, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bPersistentLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: ElementLevelStreaming
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bPersistentLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	LevelStreamingDynamic* LevelStreamingDynamic;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarGameMode_ElementManager.Object
	SolarMapElementBase*[] ElementsList;//[Offset: 0x30, Size: 0x10]
	SolarMonster*[] MonsterList;//[Offset: 0x40, Size: 0x10]
	SolarPlayerStart*[] PlayerStartList;//[Offset: 0x50, Size: 0x10]
	<FName,class SolarGameMode_HandleElementRPC> HandleActorRPCBPs;//[Offset: 0x60, Size: 0x50]
	<FString,SolarMapElementBase*> ElementMap;//[Offset: 0xb0, Size: 0x50]
	void OnStimulusActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x46926b0

--------------------------------
Class: SolarMonster.SolarCharacterBase.Character.Pawn.Actor.Object
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0x5e0, Size: 0x8]
	SolarMBCComponent* SolarMBCComponent;//[Offset: 0x5e8, Size: 0x8]
	WeaponSystemBase* WeaponSystemComponent;//[Offset: 0x5f0, Size: 0x8]
	int MonsterID;//[Offset: 0x5f8, Size: 0x4]
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x4718f24
	void SetCurrentHealth(float healthValue);// 0x4718d10
	void OnMonsterDied();// 0x4c8f29c
	FString GetSoundEventNameSpawn();// 0x4718e6c
	FString GetSoundEventNameHasEnemy();// 0x4718db4
	SolarMonsterAIController* GetMonsterController();// 0x4718fc8

--------------------------------
Class: SolarMonsterAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	float LoseSightTimeConfig;//[Offset: 0x380, Size: 0x4]
	float LoseEnemyActorConfig;//[Offset: 0x384, Size: 0x4]
	float DamageSenseDistThreshold;//[Offset: 0x388, Size: 0x4]
	SolarAISpawnVolume* OwnerAISpawnVolume;//[Offset: 0x390, Size: 0x8]
	<Actor*,float> DamageStimulusMap;//[Offset: 0x398, Size: 0x50]
	<Actor*> SightStimulusActors;//[Offset: 0x3e8, Size: 0x50]
	int StrengthGrade;//[Offset: 0x438, Size: 0x4]
	float WeaponDamageAttenuation;//[Offset: 0x43c, Size: 0x4]
	<Actor*> IgnoredActors;//[Offset: 0x440, Size: 0x50]
	bool UpdateStrengthGradeCfg(int InStrengthGrade);// 0x4c8f29c
	void SetSightSenseParams(float SightRadius, float LoseSightRadius, float PeripheralVisionHalfAngleDegrees, float MaxAge);// 0x4719a08
	void OnTargetUpdateCallBack(Actor* Actor, AIStimulus Stimulus);// 0x4719808
	void OnStimulusActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x4719720
	SolarMonster* GetMonster();// 0x47199d4
	float GetDamageFactor();// 0x47196ec

--------------------------------
Class: SolarAISpawnVolume.Volume.Brush.Actor.Object
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x268, Size: 0x8]
	float AISpawnVolumeTetherRadius;//[Offset: 0x2a4, Size: 0x4]

--------------------------------
Class: SolarMBCComponent.ActorComponent.Object
	SolarMonster* MonsterOwner;//[Offset: 0xb8, Size: 0x8]
	SolarMonsterAnimInstance* MonsterAnimInstance;//[Offset: 0xc0, Size: 0x8]
	bool bHasEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	void OnRep_HasEnemy();// 0x4716dc8
	void NetPlayMontageFromBT();// 0x4716dac
	void NetAbortMontageFromBT();// 0x4716d90

--------------------------------
Class: SolarMonsterAnimInstance.AnimInstance.Object
	SolarMonster* Monster;//[Offset: 0x268, Size: 0x8]
	SolarMBCComponent* BehaviorCtrlComponent;//[Offset: 0x270, Size: 0x8]
	float MoveSpeed;//[Offset: 0x278, Size: 0x4]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	float DamageDirection;//[Offset: 0x280, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x284, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x288, Size: 0x4]
	bool bIsDoingMontageFromAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	void DoPlayMontageFromBT();// 0x4c8f29c
	void DoAbortMontageFromBT();// 0x4c8f29c
	bool CheckAttackStateTransitionOut(float CurrentRatio, float BlendOutRatio, int AttackState);// 0x471a060

--------------------------------
Class: WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	WeaponSystemAutoFire* WeaponSystemAutoFire;//[Offset: 0x2b0, Size: 0x8]
	WeaponSystemAutoScope* WeaponSystemAutoScope;//[Offset: 0x2b8, Size: 0x8]
	WeaponSystemAssistAim* WeaponSystemAssistAim;//[Offset: 0x2c0, Size: 0x8]
	WeaponSystemInteract WeaponSysIneract;//[Offset: 0x2c8, Size: 0x50]
	Actor* MyPossessPawn;//[Offset: 0x318, Size: 0x8]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	bool bPreparePrimaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 0x1]
	bool bPrepareSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 0x1]
	bool bWeaponFireByAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	void WeaponAssistSystemTick(float InDeltaTime);// 0x48d7fec
	bool TryAssistAimApproach(SolarWeapon* InWeapon, const bool InbOpenScope);// 0x48d8188
	void SwitchAutoScopeEnable();// 0x48d85b8
	void SwitchAutoFireEnable();// 0x48d85d4
	void SwitchAutoFire(bool Open);// 0x48d8604
	void SwitchAssistAim(bool opened);// 0x48d86b0
	void SetCurrentActiveWeapon(SolarWeapon* Weapon);// 0x48d8400
	void SetCrosshairVisible(bool InVisible);// 0x48d8090
	void ReceiveMsgFromPlayer(bool bClient, out const PlayerWeaponMsg Msg);// 0x48d84a4
	void OnTouchScreen();// 0x48d85f0
	bool IsPrepareFire();// 0x48d8144
	WeaponSysStateStruct GetCurrentState();// 0x48d875c
	bool CheckAutoFire(out bool canfire);// 0x48d8340
	bool CheckAssistAim(out Rotator Offset);// 0x48d8284
	void AssistAimAdsorb();// 0x48d8174

--------------------------------
Class: PlayerWeaponMsg
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString MsgDetail;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WeaponSysStateStruct
	int State;//[Offset: 0x0, Size: 0x4]
	FString Parameter;//[Offset: 0x8, Size: 0x10]
	bool bPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WeaponSystemAutoFire.Object
	void OnWeaponFire();// 0x48d7874

--------------------------------
Class: WeaponSystemAutoScope.Object

--------------------------------
Class: WeaponSystemAssistAim.Object
	SolarWeapon* CurrentWeapon;//[Offset: 0x2c, Size: 0x8]
	SolarCharacter* WeaponHolder;//[Offset: 0x34, Size: 0x8]
	interface class None* HolderAAInterface;//[Offset: 0x40, Size: 0x10]
	SolarCameraComponent* SolarCamera;//[Offset: 0x50, Size: 0x8]
	SolarPlayerController* WeaponHolderController;//[Offset: 0x58, Size: 0x8]
	GlobalWeaponConfig* GlobalWeaponConfig;//[Offset: 0x60, Size: 0x8]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x68, Size: 0x8]
	SolarAssistAimDesc CurrentAssistAimDesc;//[Offset: 0x70, Size: 0x28]
	SolarCharacter* TargetActor;//[Offset: 0x98, Size: 0x8]
	SolarSignificanceManager* SignificanceManager;//[Offset: 0xa0, Size: 0x8]
	SolarAssistAimData CurrentAssistAimData;//[Offset: 0xd0, Size: 0x48]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	void RefreshCurrentWeapon(SolarWeapon* Weapon);// 0x48d727c
	bool Init(out const interface classNone AAInterface);// 0x48d7320
	bool GetDeltaData(out Rotator OutCameraOffsetRotator);// 0x48d7188
	bool GetActive();// 0x48d7244

--------------------------------
Class: SolarSignificanceManager.SignificanceManager.SignificanceManagerBase.Object
	float CalculateSceneActorTickInterval;//[Offset: 0x160, Size: 0x4]
	Actor*[] ManagedSceneActors;//[Offset: 0x178, Size: 0x10]
	<Actor*> ManagedSceneActorSet;//[Offset: 0x188, Size: 0x50]

--------------------------------
Class: SignificanceManager.SignificanceManagerBase.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x148, Size: 0x18]

--------------------------------
Class: SignificanceManagerBase.Object

--------------------------------
Class: SolarAssistAimData
	Vector2D DetectionRange;//[Offset: 0x0, Size: 0x8]
	Vector2D DetectionRangeMinRate;//[Offset: 0x8, Size: 0x8]
	Vector2D DetectionRangeMaxRate;//[Offset: 0x10, Size: 0x8]
	bool bLimitMinDetectionRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName[] DetectionScokets;//[Offset: 0x20, Size: 0x10]
	Vector2D DetectionPoint;//[Offset: 0x30, Size: 0x8]
	Vector2D RealDetectionRange;//[Offset: 0x38, Size: 0x8]
	float DetectionDistanceMinSquared;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: WeaponSystemInteract

--------------------------------
Class: SolarGameMode_EffectJobManager.Object

--------------------------------
Class: SCustomizedMode_AttributeManager.Object

--------------------------------
Class: SolarGameModeData.Object
	int GameModeId;//[Offset: 0x30, Size: 0x4]
	SGameMode_ModeConfig* CurrentModeData;//[Offset: 0x38, Size: 0x8]
	FString ModeConfigPath;//[Offset: 0x40, Size: 0x10]
	FString ModeParamsStr;//[Offset: 0x50, Size: 0x10]
	DataTable* JobDataTable;//[Offset: 0x60, Size: 0x8]
	DataTable* BoardDataTable;//[Offset: 0x68, Size: 0x8]
	DataTable* AttributeDataTable;//[Offset: 0x70, Size: 0x8]
	<FString,FString> ModeParams;//[Offset: 0xa8, Size: 0x50]
	void ReadConfigData();// 0x37b7888
	void InitModeParams(FString ParamStr);// 0x37b7888

--------------------------------
Class: SGameMode_ModeConfig.DataAsset.Object
	SoftObjectPath BP_Mode;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath BP_Reward;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RewardMap;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath JobStructure;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DataStructure;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath AttributeModifier;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath WellEffectJobRelationTable;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath BadEffectJobRelationTable;//[Offset: 0xd8, Size: 0x18]
	FString UIConfig;//[Offset: 0xf0, Size: 0x10]
	SCustomMode_GameModeSetting GameModeSetting;//[Offset: 0x100, Size: 0x68]
	SGameMode_LevelConfig[] Levels;//[Offset: 0x168, Size: 0x10]
	<FString,FString> Arguments;//[Offset: 0x178, Size: 0x50]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	bool bActiveRadarOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 0x1]
	float AllowJoinBattleLifeTime;//[Offset: 0x1cc, Size: 0x4]
	bool bAllowJoinAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bConsiderPotentialPlayerWhenSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]

--------------------------------
Class: SCustomMode_GameModeSetting
	SoftObjectPath PlayerControllerClass;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath DefaultPawnClass;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PlayerStateClass;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath HUDClass;//[Offset: 0x48, Size: 0x18]
	int SettlementStageConfigID;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SolarRedHintManager.SolarGameManager.Object

--------------------------------
Class: SolarGameModeSelectionManager.SolarGameManager.Object
	SolarGameModeLockSettings* CurGameModeLockSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameModeLockSettings* DefaultGameModeLockSettings;//[Offset: 0x58, Size: 0x8]
	void SaveGameModeLockSettings();// 0x46aed84
	void LoadGameModeLockSettings();// 0x46aed98

--------------------------------
Class: SolarGameModeLockSettings.SaveGame.Object
	<int,bool> GameModeLockStatus;//[Offset: 0x28, Size: 0x50]
	int[] LobbyGameModeRecIDs;//[Offset: 0x78, Size: 0x10]
	int[] GameModeGuideIDs;//[Offset: 0x88, Size: 0x10]
	void CopyFrom(SolarGameModeLockSettings* InLockSettings);// 0x46ad59c

--------------------------------
Class: SolarPingFpsManager.Object
	byte GetPingDS;//[Offset: 0x30, Size: 0x1]
	float GetPingBackend;//[Offset: 0x34, Size: 0x4]
	float FPS;//[Offset: 0x38, Size: 0x4]
	byte GetPingBattleServer();// 0x472b708
	float GetPacketsLossRate();// 0x472b6a0
	float GetAverageFPS();// 0x472b6d4

--------------------------------
Class: SolarGameUserSettingsMgr.Object
	SolarGameUserSettings* CurGameUserSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameSettingsRange* DefaultGameSettingsRange;//[Offset: 0x30, Size: 0x8]
	bool bIsDefalutSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	ChatOperatorUserSettings TempChatOperatorSettings;//[Offset: 0x39, Size: 0x2]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x40, Size: 0x8]
	void SaveGameSettings();// 0x46c086c
	void ResetToDefault(enum SettingPart);// 0x46c0880
	void RefreshValid(SolarGameInstanceBase* GameInstance, bool SaveIfDirty);// 0x46c06d8
	void OnSettingConfigSaved();// 0x46c06c4
	void OnPickupSettingChanged();// 0x46c06b0
	void InitializeSettings(SolarGameInstanceBase* GameInstance);// 0x46c07c8
	void Init(SolarGameInstanceBase* GameInstance);// 0x46c0924

--------------------------------
Class: SolarGameUserSettings.DeveloperSettings.Object
	PickupUserSettings PickupSettings;//[Offset: 0x38, Size: 0x18]
	GraphicsUserSettings GraphicsSettings;//[Offset: 0x50, Size: 0x80]
	WeaponUserSettings WeaponSettings;//[Offset: 0xd0, Size: 0x10]
	LanguageUserSettings LanguageSettings;//[Offset: 0xe0, Size: 0x1]
	SoundUserSettings SoundSettings;//[Offset: 0xe4, Size: 0x20]
	BasicUserSettings BasicSettings;//[Offset: 0x104, Size: 0x7]
	SensitivityUserSettings SensitivitySettings;//[Offset: 0x10c, Size: 0x70]
	VehicleControlUserSettings DriverSettings;//[Offset: 0x17c, Size: 0x3]
	ChatOperatorUserSettings ChatOperatorSettings;//[Offset: 0x17f, Size: 0x2]
	SoftClassPath DefaultSettingsRangePath;//[Offset: 0x188, Size: 0x18]
	bool bIsSynchronized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	float ConfigVersion;//[Offset: 0x1a4, Size: 0x4]

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: PickupUserSettings
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	PickupItemData[] PickupItemList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PickupItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GraphicsUserSettings
	enum FpsLevel;//[Offset: 0x0, Size: 0x1]
	enum ColorThemeType;//[Offset: 0x1, Size: 0x1]
	bool MSAAIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	FloatValue AdaptationUIValue;//[Offset: 0x4, Size: 0x4]
	enum SelectQualityLevel;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FloatValue
	float Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeaponUserSettings
	bool bAimAssist_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoScope_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bAutoScopeRifle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bAutoScopeShotgun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoScopeSubmachinegun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAutoScopeSniper_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	CurveFloat* HitEffectDistanceToScaleCurve;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LanguageUserSettings
	enum CurLanguage;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoundUserSettings
	ConditionValue Sound_Global;//[Offset: 0x0, Size: 0x8]
	ConditionValue Sound_Action;//[Offset: 0x8, Size: 0x8]
	ConditionValue Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	int MicroPhoneVolume;//[Offset: 0x18, Size: 0x4]
	int LoudSpeakerVolume;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ConditionValue
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int CurValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BasicUserSettings
	bool bOpenUniversalMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOpenQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoOverturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bPowerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOpenRecruitRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum curGyroscpeChooseLevel;//[Offset: 0x5, Size: 0x1]
	enum CurrentDamageTextDisplayMode;//[Offset: 0x6, Size: 0x1]

--------------------------------
Class: SensitivityUserSettings
	FloatValue Sensitivity_Free;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_SecondarySkills;//[Offset: 0x4, Size: 0x4]
	CameraSensitivityData Sensitivity_NoShoot;//[Offset: 0x8, Size: 0x20]
	CameraSensitivityData Sensitivity_Shoot;//[Offset: 0x28, Size: 0x20]
	GyroscopeSensitivityData GyroscopeData;//[Offset: 0x48, Size: 0x20]
	FloatValue Sensitivity_VehicleDriver;//[Offset: 0x68, Size: 0x4]
	FloatValue Sensitivity_VehicleFire;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: CameraSensitivityData
	FloatValue Sensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue Sensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GyroscopeSensitivityData
	FloatValue GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue GyroscopeSensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue GyroscopeSensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: VehicleControlUserSettings
	enum WheeledVehicleDriveType;//[Offset: 0x0, Size: 0x1]
	bool bCanAdjustInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanAutoSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ChatOperatorUserSettings
	enum Speaker;//[Offset: 0x0, Size: 0x1]
	enum Mic;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SolarGameSettingsRange.Object
	SoundSettingsRange SoundSettings;//[Offset: 0x28, Size: 0x18]
	SensitivitySettingsRange SensitivitySettings;//[Offset: 0x40, Size: 0xe0]
	GraphicsSettingsRange GraphicsSettings;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: SoundSettingsRange
	RangeData Sound_Global;//[Offset: 0x0, Size: 0x8]
	RangeData Sound_Action;//[Offset: 0x8, Size: 0x8]
	RangeData Sound_BackGround;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: RangeData
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SensitivitySettingsRange
	RangeData Sensitivity_Free;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_SecondarySkills;//[Offset: 0x8, Size: 0x8]
	CameraSensitivityRangeData Sensitivity_NoShoot;//[Offset: 0x10, Size: 0x40]
	CameraSensitivityRangeData Sensitivity_Shoot;//[Offset: 0x50, Size: 0x40]
	RangeData Sensitivity_VehicleDriver;//[Offset: 0x90, Size: 0x8]
	RangeData Sensitivity_VehicleFire;//[Offset: 0x98, Size: 0x8]
	GyroscopeSensitivityRangeData Sensitivity_GyroscopeData;//[Offset: 0xa0, Size: 0x40]

--------------------------------
Class: CameraSensitivityRangeData
	RangeData Sensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData Sensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData Sensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: GyroscopeSensitivityRangeData
	RangeData GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData GyroscopeSensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData GyroscopeSensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: GraphicsSettingsRange
	RangeData AdaptationUIValue;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarLoginManager.SolarGameManager.Object
	void InitFromLogin();// 0x37b7888
	void Init(SolarGameInstanceBase* GameInstance);// 0x4c8f29c

--------------------------------
Class: SolarLockSettingsMgr.Object
	SolarLockSettings* CurLockSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	SolarLockSettings* DefaultLockSettings;//[Offset: 0x48, Size: 0x8]
	void SaveLockSettings();// 0x4704d94
	void LoadLockSettings();// 0x4704da8
	void Init(SolarGameInstanceBase* GameInstance);// 0x4704cf0

--------------------------------
Class: SolarLockSettings.SaveGame.Object
	<int,bool> FeaturesLockStatus;//[Offset: 0x28, Size: 0x50]
	void CopyFrom(SolarLockSettings* InLockSettings);// 0x4704868

--------------------------------
Class: SolarGameProgressManager.SolarGameManager.Object
	delegate OnGameStart;//[Offset: 0x38, Size: 0x10]
	void OnWorldConditionsCompleted();// 0x46b3738
	void OnStreamingLevelComplete();// 0x46b374c
	void OnShadersCompileComplete();// 0x46b3760
	void OnGameStart__DelegateSignature();// 0x4c8f29c
	static void K2_ReceiveGlobalConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x46b3408
	static void K2_ReceiveConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x46b34dc
	void K2_OnGlobalConditionCompleted(GameplayTag CompletedCondition);// 0x46b35b0
	void K2_OnConditionCompleted(World* CurrentWorld, GameplayTag CompletedCondition);// 0x46b3654
	static bool IsGameStartNeedCondition(const Object* WorldContextObject, out const GameplayTag InCondition);// 0x46b38c0
	bool IsConditionInList(out const GameplayTag InCondition, World* WorldCheck);// 0x46b3a70
	bool IsAllStartGameConditionCompleted(World* WorldCheck);// 0x46b39c0
	bool InitGameStartCondition(World* CurrentWorld, GameplayTagContainer ConditionList);// 0x46b3b78
	static bool HasGameStarted(const Object* WorldContextObject);// 0x46b3818
	static SolarGameProgressManager* Get(const Object* WorldContextObject);// 0x46b3774

--------------------------------
Class: SolarABTestManager.SolarGameManager.Object

--------------------------------
Class: SolarHttpManager.SolarGameManager.Object
	FString ReportURL;//[Offset: 0x40, Size: 0x10]
	FString ReportStr;//[Offset: 0x50, Size: 0x10]
	int ReportRetryTimes;//[Offset: 0x60, Size: 0x4]
	delegate OnImgUploaded;//[Offset: 0x68, Size: 0x10]
	int Jank;//[Offset: 0x94, Size: 0x4]
	int BigJank;//[Offset: 0x98, Size: 0x4]
	float FPS25;//[Offset: 0x9c, Size: 0x4]
	void UploadToHTTP(FString URL, FString str);// 0x46dbaf8
	void UploadImg(out const int Appid, out const int AppUid, FString AppToken, out const int GameID, out const int UID, FString SourceImgPath);// 0x46db7cc
	FString StringToBase64(FString str);// 0x46dbcf0
	void StopRecordJank();// 0x46dba20
	void StartRecordJank();// 0x46dba34
	void ReCordOnlineError(FString InStr);// 0x37b7888
	void OnImgUploaded__DelegateSignature(int RespCode, FString RespMsg, FString ImgUrl);// 0x4c8f29c
	FString GetHttpReportUrl();// 0x46dba48
	FString Base64ToMD5(FString str);// 0x46dbbf8

--------------------------------
Class: SolarActivityManager.SolarGameManager.Object

--------------------------------
Class: SolarTutorialManager.SolarGameManager.Object
	enum CurrentTutorialStage;//[Offset: 0x42, Size: 0x1]
	delegate OnRegisterEvent;//[Offset: 0x48, Size: 0x10]
	delegate OnStepActionBegan;//[Offset: 0x58, Size: 0x10]
	delegate OnStepActionEnded;//[Offset: 0x68, Size: 0x10]
	delegate OnStepActionReset;//[Offset: 0x78, Size: 0x10]
	delegate OnStepActionDisposed;//[Offset: 0x88, Size: 0x10]
	TutorialGlobalConfig* TutorialGlobalConfig;//[Offset: 0x98, Size: 0x8]
	TutorialTableRow[] TutorialTableRows;//[Offset: 0xa0, Size: 0x10]
	TutorialActionTableRow[] ActionTableRows;//[Offset: 0xb0, Size: 0x10]
	TutorialConditionTableRow[] ConditionTableRows;//[Offset: 0xc0, Size: 0x10]
	<int,Tutorial*> Tutorials;//[Offset: 0xd0, Size: 0x50]
	bool bIsConditionCheckCodeParsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 0x1]
	int64 LastCheckTimestamp;//[Offset: 0x288, Size: 0x8]
	FString TutorialDataTablePath;//[Offset: 0x290, Size: 0x10]
	FString ActionDataTablePath;//[Offset: 0x2a0, Size: 0x10]
	FString ConditionDataTablePath;//[Offset: 0x2b0, Size: 0x10]
	FString TutorialGlobalConfigPath;//[Offset: 0x2c0, Size: 0x10]
	TutorialLevelSaveGame* CurrentTutorialLevelSaveGame;//[Offset: 0x2d0, Size: 0x8]
	void TryToStopTutorialByTutorialID(int InTutorialId);// 0x4835688
	FString[] TriggerWidgetClicked(out const FString[] Params);// 0x4833c68
	FString[] TriggerWeaponSlotHasSpecifiedItem(out const FString[] Params);// 0x4834a80
	FString[] TriggerUseSpecifiedWeaponAbility(out const FString[] Params);// 0x4834bc8
	FString[] TriggerUseSpecifiedVehicleWeapon(out const FString[] Params);// 0x4834d10
	FString[] TriggerUseSpecifiedVehicleAbility(out const FString[] Params);// 0x4834e58
	void TriggerTutorialModuleEvents(enum Module);// 0x48357e4
	FString[] TriggerTutorialLevelDone(out const FString[] Params);// 0x48339d8
	void TriggerTutorialEvents(out enum[] TriggerTypeArrays, bool bPostTrigger);// 0x4835938
	bool TriggerTutorialEventInternal(byte TriggerID);// 0x4835888
	void TriggerTutorialEvent(enum TriggerType, bool bPostTrigger);// 0x4835a40
	FString[] TriggerSprintingContinuously(out const FString[] Params);// 0x4833ef8
	FString[] TriggerShieldNotFull(out const FString[] Params);// 0x48347f0
	FString[] TriggerRunningStep(out const FString[] Params);// 0x4833748
	FString[] TriggerPlayerLevelGreaterThan(out const FString[] Params);// 0x4833db0
	FString[] TriggerOpenTreasureBox(out const FString[] Params);// 0x48342d0
	FString[] TriggerOpenBigMapUMG(out const FString[] Params);// 0x48346a8
	FString[] TriggerNearAirDropBox(out const FString[] Params);// 0x4834418
	FString[] TriggerJumpBegin(out const FString[] Params);// 0x4834040
	FString[] TriggerHasTakenDamage(out const FString[] Params);// 0x48334b8
	FString[] TriggerHasSpecifiedItem(out const FString[] Params);// 0x4833600
	FString[] TriggerHasSpecifiedEquipmentByType(out const FString[] Params);// 0x4834188
	FString[] TriggerFunctionUnlock(out const FString[] Params);// 0x4833b20
	void TriggerEvent(enum Module);// 0x483572c
	FString[] TriggerEquipSpecifiedWeapon(out const FString[] Params);// 0x4834938
	FString[] TriggerBotAIDying(out const FString[] Params);// 0x4833890
	FString[] TriggerApproachElectronicTreasureBox(out const FString[] Params);// 0x4833370
	FString[] TriggerAirDropBoxLanded(out const FString[] Params);// 0x4834560
	void TickActivatedTutorials();// 0x48357d0
	void TestTutorialTipsUI(int ID);// 0x37b7888
	void SetWidgetInteractionFlag(FString InWidgetName, enum InWidgetInteractionFlag);// 0x37b7888
	void SetTutorialTipsUIInteractionFlag(int TutorialID, bool boolChange);// 0x37b7888
	void SetTableFlagBooleanValue(FString InTableName, FString InFlagName, bool InValue);// 0x37b7888
	void SetSignNameBoolChange(FString SignName, bool NboolChangeum);// 0x37b7888
	void SetFlagNameIntCount(FString FlagName, int Num);// 0x37b7888
	void SetAirDropBoxLandedAddOneNum(int Value);// 0x483279c
	void SaveTutorialLevelSaveGame();// 0x4832578
	void SaveLevelTutorialID(FString InLevelName, int InTutorialId);// 0x4832084
	void SaveLevelTutorialHasFinished(FString InLevelName, bool InFinished);// 0x4832274
	void SaveLevelPlayerStartTag(FString InLevelName, FString InPlayerStartTag);// 0x4832478
	bool RunTriggerConditionCheck(Tutorial* InTutorial);// 0x37b7888
	bool RunConditionCheckByTutorialId(enum InConditionType, int InTutorialId);// 0x37b7888
	bool RunConditionCheckByExpression(FString InConditionalExpression);// 0x37b7888
	void ReceivePostSetupData();// 0x37b7888
	void ReceiveOnSingleTutorialStart(int TutorialID);// 0x37b7888
	void ReceiveOnSingleTutorialFinished(int TutorialID);// 0x37b7888
	void ReceiveOnPostLoadMapWithWorld(FString LevelName);// 0x37b7888
	void ReceiveOnAllTutorialsFinished();// 0x37b7888
	void ReceiveLoadTutorialLevelData();// 0x37b7888
	void ReceiveLoadData();// 0x37b7888
	void ReceiveClearData();// 0x37b7888
	bool PreCheckTutorial(Tutorial* InTutorial);// 0x37b7888
	bool PreCheckSetup(int TutorialID);// 0x37b7888
	void OnPostLoadMap(FString LevelName);// 0x4834fa0
	bool IsInTutorialLevel();// 0x37b7888
	enum GetWidgetInteractionFlag(FString InWidgetName);// 0x37b7888
	UserWidget* GetWeightByPanelNameAndChildWeightName(FString PanelName, FString ChildWidgetName);// 0x37b7888
	bool GetTutorialTipsUIInteractionFlag(int TutorialID);// 0x37b7888
	TutorialLevelSaveGame* GetTutorialLevelSaveGame();// 0x4832050
	bool GetTableFlagBooleanValue(FString InTableName, FString InFlagName);// 0x37b7888
	bool GetSignNameBoolChange(FString SignName);// 0x37b7888
	int GetLevelTutorialID(FString InLevelName, int DefaultValue);// 0x4832178
	bool GetLevelTutorialHasFinished(FString InLevelName, bool DefaultValue);// 0x4832370
	int GetFlagNameIntCount(FString FlagName);// 0x37b7888
	byte GetCurrentPlayerLevel();// 0x37b7888
	TutorialActionTableRow GetActionDataByID(int ActionDataID);// 0x4835050
	void EnterTutorialLevel(FString LevelName, int Proficiency);// 0x37b7888
	bool CheckTutorialTipUIOnClick(int TutorialID);// 0x37b7888
	void CheckTutorials(enum InTutorialModule, float InCheckInterval, bool bForceCheck);// 0x4835b30
	bool CheckIfWidgetReleased(FString InWidgetName);// 0x37b7888
	bool CheckIfWidgetPressed(FString InWidgetName);// 0x37b7888
	bool CheckIfWidgetClicked(FString InWidgetName);// 0x37b7888
	bool CheckIfWeaponSlotHasSpecifiedItem(int InSlot, int InItemID);// 0x4832878
	bool CheckIfTutorialLevelDone(FString LevelName);// 0x37b7888
	bool CheckIfTakeDamage(int InLostHealth);// 0x48331d0
	bool CheckIfSprintingContinuously(float InTimeOfDuration);// 0x4833120
	bool CheckIfShieldNotFull();// 0x4832eb8
	bool CheckIfRunningStep(int TutorialID, int ActionID);// 0x483258c
	bool CheckIfReloading();// 0x4832c20
	bool CheckIfRechargingShield();// 0x4832e80
	bool CheckIfPlayerLevelGreaterThan(byte InSpecifiedLevel);// 0x37b7888
	bool CheckIfPlayerInTargetScene(byte InPlayStage);// 0x37b7888
	bool CheckIfOpenBigMapUMG();// 0x4832764
	bool CheckIfNearAirDropBox();// 0x483272c
	bool CheckIfJumpBegin();// 0x4833078
	bool CheckIfJetFlyingVertically();// 0x4832fd0
	bool CheckIfJetFlyingHorizontally();// 0x4833008
	bool CheckIfInWater();// 0x4832f60
	bool CheckIfInVehicle();// 0x4832bb0
	bool CheckIfInAir();// 0x4832f28
	bool CheckIfHasSpecifiedItem(int InNum, int InItemID);// 0x4833280
	bool CheckIfHasSpecifiedEquipmentByType(enum InItemType);// 0x4832a50
	bool CheckIfHasSpecifiedEquipmentById(int InItemID);// 0x48329a0
	bool CheckIfHasShield();// 0x4832ef0
	bool CheckIfFunctionUnlock(FString FunctionID);// 0x37b7888
	bool CheckIfEquipSpecifiedWeapon(int InWeaponID);// 0x4832b00
	bool CheckIfDying();// 0x4832f98
	bool CheckIfDead();// 0x4832968
	bool CheckIfCurrentWeaponAmmoFull();// 0x4832be8
	bool CheckIfConsumingMedicine();// 0x4833040
	bool CheckIfCanUseSpecifiedWeaponAbility(int InAmmoId);// 0x4832c58
	bool CheckIfCanUseSpecifiedVehicleWeapon(FString InVehicleWeaponClassName);// 0x4832d08
	bool CheckIfCanUseSpecifiedVehicleAbility(FString InVehicleAbilityClassName);// 0x4832dc4
	bool CheckIfCanOpenTreasureBox();// 0x37b7888
	bool CheckIfCanJetFlyVertically();// 0x48330b0
	bool CheckIfCanJetFlyHorizontally();// 0x48330e8
	bool CheckIfBotAIDying(int UniqueSpawnerID);// 0x483267c
	bool CheckIfApproachElectronicTreasureBox();// 0x37b7888
	bool CheckIfAirDropBoxLanded();// 0x4832840

--------------------------------
Class: TutorialGlobalConfig.DataAsset.Object
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<FString,enum> MapName2TutorialStage;//[Offset: 0x38, Size: 0x50]
	float SubtitleDisappearTime;//[Offset: 0x88, Size: 0x4]
	float AsyncLoadUIDelayTime;//[Offset: 0x8c, Size: 0x4]
	TutorialLevelConfig TutorialLevelConfig;//[Offset: 0x90, Size: 0x38]
	enum GetTutorialStageByLevelName(FString LevelName);// 0x4831624
	FString GetTutorialLevelMainMapPath();// 0x4831574
	FString GetTutorialLevelMainMapName();// 0x48314c4
	TutorialLevelConfigData GetTutorialLevelConfigDataByName(FString LevelName);// 0x48316dc

--------------------------------
Class: TutorialLevelConfig
	TutorialLevelConfigData[] LevelConfigDatas;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath MainMapPath;//[Offset: 0x10, Size: 0x18]
	int VeteranTutorialID;//[Offset: 0x28, Size: 0x4]
	float RepeatOperationTime;//[Offset: 0x2c, Size: 0x4]
	float WaitToEndTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TutorialLevelConfigData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	int[] TutorialIds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum Type;//[Offset: 0x20, Size: 0x1]
	enum TriggerStage;//[Offset: 0x21, Size: 0x1]
	enum Module;//[Offset: 0x22, Size: 0x1]
	TutorialSoftCondition TriggerCondition;//[Offset: 0x28, Size: 0x28]
	int EndNum;//[Offset: 0x50, Size: 0x4]
	TutorialSoftCondition ForeverClosedCondition;//[Offset: 0x58, Size: 0x28]
	int[] ActionIDs;//[Offset: 0x80, Size: 0x10]
	bool bUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bStartUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]

--------------------------------
Class: TutorialTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TutorialSoftCondition
	FString ConditionStr;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ConditionBP;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: TutorialActionTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	TutorialForceUI TutorialForceUI;//[Offset: 0x20, Size: 0x38]
	TutorialNoticeUI TutorialNoticeUI;//[Offset: 0x58, Size: 0x30]
	TutorialMandatory TutorialMandatory;//[Offset: 0x88, Size: 0x2]
	TutorialTipAndEffectUI TutorialTipAndEffectUI;//[Offset: 0x90, Size: 0x78]
	SoftObjectPath RelatedUIPath;//[Offset: 0x108, Size: 0x18]
	bool IsUsingMadatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool IsUsingMadatoryClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	TutorialSubtitle TutorialSubtitle;//[Offset: 0x128, Size: 0x18]
	bool bRepeatTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	TutorialRepeatTip RepeatTip;//[Offset: 0x148, Size: 0x18]
	TutorialBackgroundMusicTableRow TutorialBackgroundMusic;//[Offset: 0x160, Size: 0x20]
	TutorialSoftCondition EndCondition;//[Offset: 0x180, Size: 0x28]
	TutorialSoftCondition InterruptCondition;//[Offset: 0x1a8, Size: 0x28]
	float WaitTime;//[Offset: 0x1d0, Size: 0x4]
	float MinExecuteTime;//[Offset: 0x1d4, Size: 0x4]
	int[] OpenBehaviors;//[Offset: 0x1d8, Size: 0x10]
	int[] CloseBehaviors;//[Offset: 0x1e8, Size: 0x10]
	int FixedTriggerAreaID;//[Offset: 0x1f8, Size: 0x4]
	int[] BotAISpawnIDs;//[Offset: 0x200, Size: 0x10]
	int[] BotAIDeathIDs;//[Offset: 0x210, Size: 0x10]
	int[] BotAIOnVehicleSpawnIDs;//[Offset: 0x220, Size: 0x10]
	int[] BotAIOnVehicleDeathIDs;//[Offset: 0x230, Size: 0x10]

--------------------------------
Class: TutorialForceUI
	SoftObjectPath TutorialForceUIBPPath;//[Offset: 0x0, Size: 0x18]
	FString NeedTouchOffLinkNodeButton;//[Offset: 0x18, Size: 0x10]
	FString ClickTouchOffLinkNodeButton;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TutorialNoticeUI
	SoftObjectPath NoticeUIBPPath;//[Offset: 0x0, Size: 0x18]
	FString NoticeUISlotAnchorsAndAlignment;//[Offset: 0x18, Size: 0x10]
	int NoticeUILocTextId;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TutorialMandatory
	bool IfMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool MandatoryUIIsRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TutorialTipAndEffectUI
	FString LinkedComponent;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath TutorialExpressionBPPath;//[Offset: 0x10, Size: 0x18]
	SoftObjectPath TutorialEffectBPPath;//[Offset: 0x28, Size: 0x18]
	Vector2D TutorialBPLocation;//[Offset: 0x40, Size: 0x8]
	int LocTextID;//[Offset: 0x48, Size: 0x4]
	float LocTextDuration;//[Offset: 0x4c, Size: 0x4]
	float DelayShowUITime;//[Offset: 0x50, Size: 0x4]
	float WaitUIShowTime;//[Offset: 0x54, Size: 0x4]
	float DelayShowCanCloseUITIme;//[Offset: 0x58, Size: 0x4]
	FString TextUISlotAnchorsAndAlignment;//[Offset: 0x60, Size: 0x10]
	enum UIParent;//[Offset: 0x70, Size: 0x1]
	bool OpenEffectSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]

--------------------------------
Class: TutorialSubtitle
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x0, Size: 0x10]
	float DelayTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TutorialSingleSubtitle
	FString LocalTextID;//[Offset: 0x0, Size: 0x10]
	FString Voice;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialRepeatTip
	float StartTime;//[Offset: 0x0, Size: 0x4]
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TutorialBackgroundMusicTableRow
	FString TutorialPlayMusicName;//[Offset: 0x0, Size: 0x10]
	FString TutorialStopMusicName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialConditionTableRow.TutorialTableRowBase.TableRowBase
	byte TriggerType;//[Offset: 0xc, Size: 0x1]
	FString[] Parameters;//[Offset: 0x10, Size: 0x10]
	FString Description;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: Tutorial.Object
	TutorialTableRow Data;//[Offset: 0x68, Size: 0x98]
	TutorialTriggerCondition* TriggerConditionBP;//[Offset: 0x100, Size: 0x8]
	TutorialTaskSequenceAction* TutorialTask;//[Offset: 0x108, Size: 0x8]
	void Stop();// 0x489eed8
	void ReceiveOnStart();// 0x37b7888
	void ReceiveOnSingleTaskFinish();// 0x37b7888
	void ReceiveOnFinish();// 0x37b7888
	void OnSingleTaskFinish();// 0x489ee58
	TutorialTableRow GetTableRowData();// 0x489eea0
	int GetCurrentFinishNum();// 0x489ee6c

--------------------------------
Class: TutorialTriggerCondition.TutorialCondition.Object
	SolarTutorialManager* GetSolarTutorialManager();// 0x48a456c
	bool CheckSatisfy(out const TutorialTableRow InData);// 0x4c8f29c

--------------------------------
Class: TutorialCondition.Object
	FString GetWorldName();// 0x48a1ffc
	SolarCharacter* GetPlayer();// 0x48a20ac

--------------------------------
Class: TutorialTaskSequenceAction.SequenceNode.ActionNode.Object

--------------------------------
Class: SequenceNode.ActionNode.Object
	ActionNode*[] Nodes;//[Offset: 0x78, Size: 0x10]
	ActionNode*[] ExecutingNodes;//[Offset: 0x88, Size: 0x10]
	int TotalCount();// 0x45d1990
	ActionNode* GetCurrentExecutingNode();// 0x45d195c
	SequenceNode* Append(ActionNode* Node);// 0x45d18b0

--------------------------------
Class: ActionNode.Object
	delegate OnBeganCallback;//[Offset: 0x28, Size: 0x10]
	delegate OnEndedCallback;//[Offset: 0x38, Size: 0x10]
	delegate OnResetCallback;//[Offset: 0x48, Size: 0x10]
	delegate OnDisposedCallback;//[Offset: 0x58, Size: 0x10]
	void Reset();// 0x450fbe4
	bool Finished();// 0x450fbb4
	void Finish();// 0x450fbf8
	bool Execute(float DeltaTime);// 0x450fc14
	bool Disposed();// 0x450fb98
	void Dispose();// 0x450fbd0

--------------------------------
Class: TutorialLevelSaveGame.SaveGame.Object
	<FString,TutorialLevelSaveData> TutorialLevelSaveDatas;//[Offset: 0x28, Size: 0x50]
	enum PlayerProficiency;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: TutorialLevelSaveData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	FString PlayerStartTag;//[Offset: 0x10, Size: 0x10]
	bool bTutorialHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int TutorialID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SettlementStageManager.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	int CurStageIndex;//[Offset: 0x38, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x3c, Size: 0x4]
	DataTable* SettlementConfig;//[Offset: 0x40, Size: 0x8]
	SettlementFormula* Formula;//[Offset: 0x48, Size: 0x8]
	void UpdateModeConfig(const int InConfigID);// 0x45d408c
	void SkipToTarget();// 0x4c8f29c
	void ShowNextStage();// 0x4c8f29c
	void ShowDiePage();// 0x4c8f29c
	void Init();// 0x4c8f29c
	class SolarUWSettlementBase GetSettlementUIClass();// 0x45d3e04
	int GetSettlementStageID();// 0x45d4058
	SettlementConfig GetSettlementConfigRow();// 0x45d3e38
	SettlementFormula* GetFormula();// 0x45d3dd0
	FString GetClassRelativePathName(const class Object InClass);// 0x4c8f29c
	void CloseDiePage();// 0x4c8f29c

--------------------------------
Class: SolarUWSettlementBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	SettlementStageManager* SettlementStageManager;//[Offset: 0x318, Size: 0x8]
	void SetStageManager(SettlementStageManager* InStageManager);// 0x4841ca4

--------------------------------
Class: SettlementConfig.TableRowBase
	int SettlementID;//[Offset: 0x8, Size: 0x4]
	SettlementStageConfig StageConfig;//[Offset: 0x10, Size: 0x40]
	class SettlementFormula* Formula;//[Offset: 0x50, Size: 0x28]
	bool IsValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SettlementStageConfig
	class SolarUWSettlementBase* Page_Die;//[Offset: 0x0, Size: 0x28]
	int Page_SkipIndex;//[Offset: 0x28, Size: 0x4]
	class SolarUWSettlementBase[] SettlementStage;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SettlementFormula.Actor.Object
	static FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x45d2e5c
	int GetZomborg(out const SettlementParam_Zomborg InParam);// 0x45d2388
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x4c8f29c
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam);// 0x45d2454
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x4c8f29c
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam);// 0x4c8f29c
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam);// 0x4c8f29c
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerId, out FString PBName);// 0x45d1ff0
	float GetKDA(out const SettlementParam_KDA InParam);// 0x4c8f29c
	FString[] GetGroupResultPlayerExData(FString SolarPlayerId, out FString PBName);// 0x45d21bc
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam);// 0x4c8f29c
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x45d2514
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x45d2638
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param);// 0x4c8f29c

--------------------------------
Class: SettlementParam_Zomborg
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float Lifetime;//[Offset: 0x8, Size: 0x4]
	int PlayerRank;//[Offset: 0xc, Size: 0x4]
	float GoldPunishRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SettlementParam_WeaponExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float UseTime;//[Offset: 0x8, Size: 0x4]
	int WeaponKillNum;//[Offset: 0xc, Size: 0x4]
	int WeaponAssitNum;//[Offset: 0x10, Size: 0x4]
	float ExpRatio;//[Offset: 0x14, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SettlementParam_PageParam
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int WeaponExpSettlmentNum;//[Offset: 0x4, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SettlementParam_CommonExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float Lifetime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x24, Size: 0x4]
	float CoinPunishRatio;//[Offset: 0x28, Size: 0x4]
	int RankCorePunish;//[Offset: 0x2c, Size: 0x4]
	int BaseExp;//[Offset: 0x30, Size: 0x4]
	float ExpRatio;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SettlementParam_KDA
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DeathNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SettlementParam_MVP
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float Lifetime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: CGMCrossLevelDataMgr.Object
	<FString,Object*> CrossLevelData;//[Offset: 0x28, Size: 0x50]
	void RegistryCrossLevelData(FString InSoltName, Object* InDataObj);// 0x4532534
	Object* GetCrossLevelData(FString InSoltName);// 0x453247c

--------------------------------
Class: SolarGraphicSettings.Object
	uint32 CurrentActiveColorThemeIndex;//[Offset: 0x28, Size: 0x4]
	FrameRateLevelItem FrameRateLevelItem;//[Offset: 0x2c, Size: 0x8]
	<enum,enum> DefaultQualityToDefaultFrameRateLevel;//[Offset: 0x50, Size: 0x50]
	<enum,MaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;//[Offset: 0xa0, Size: 0x50]
	int DefaultMSAALevel;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: FrameRateLevelItem
	enum FrameRateLevel;//[Offset: 0x0, Size: 0x1]
	float FrameRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MaxQualityConfig
	<enum,enum> CurQualityToMaxFrameRateLevel;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SolarAccessLuaDataUtils.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	void GetMatchResult(out MatchResult MatchResult);// 0x37b7888

--------------------------------
Class: MatchResult
	FString BattleID;//[Offset: 0x0, Size: 0x10]
	FString BattleAddr;//[Offset: 0x10, Size: 0x10]
	FString Token;//[Offset: 0x20, Size: 0x10]
	int ModeID;//[Offset: 0x30, Size: 0x4]
	int RuleID;//[Offset: 0x34, Size: 0x4]
	FString SelfPlayerID;//[Offset: 0x38, Size: 0x10]
	MatchResult_Group[] Groups;//[Offset: 0x48, Size: 0x10]
	FString MapName;//[Offset: 0x58, Size: 0x10]
	SoftObjectPath MapPath;//[Offset: 0x68, Size: 0x18]

--------------------------------
Class: MatchResult_Group
	int GroupID;//[Offset: 0x0, Size: 0x4]
	MatchResult_Player[] Players;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MatchResult_Player
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString playerName;//[Offset: 0x10, Size: 0x10]
	int AvatarID;//[Offset: 0x20, Size: 0x4]
	int fightCharacterID;//[Offset: 0x24, Size: 0x4]
	int fightCharacterSkinID;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath SkinConfigPath;//[Offset: 0x30, Size: 0x18]
	FString CharacterName;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SolarAkSoundManager.SolarGameManager.Object
	void OnAkBankUnloadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x45f3b40
	void OnAkBankLoadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x45f3c28

--------------------------------
Class: KeyMappingManager.Object
	delegate OnKeyMappingUpdate;//[Offset: 0x120, Size: 0x10]
	delegate OnKeyMappingConfirm;//[Offset: 0x130, Size: 0x10]
	delegate OnKeyboardUpdate;//[Offset: 0x140, Size: 0x10]
	<FString,FString> OccupiedKeyMap;//[Offset: 0x160, Size: 0x50]
	KeyMappingFileMgr* KeyMappingFileMgr;//[Offset: 0x260, Size: 0x8]
	void SwitchKeyMappingPlanIndex(int PlanIndex);// 0x457f72c
	void SwitchKeyMapping(FString ActionName, int SettingIndex, bool Enable, bool Force);// 0x457f7d0
	void ResetKeyMapping();// 0x457f718
	bool IsComboKey(FString KeyName);// 0x457f300
	void ImportKeyMappingSetting();// 0x457f960
	bool HasKeyModified();// 0x457f2c8
	FString[] GetAllActionNames(int PlanIndex);// 0x457f5a4
	FString[] GetActionKeyMapping(FString ActionName, int PlanIndex, int SettingIndex);// 0x457f3bc
	void ApplyResult();// 0x457f704

--------------------------------
Class: KeyMappingFileMgr.Object

--------------------------------
Class: SolarSpecialEffectsMgr.Object

--------------------------------
Class: AndroidInputManager.Object
	delegate OnAndroidBackPressed;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: RegistedActorContainer

--------------------------------
Class: SolarOperationUIElement.Object
	OperationUIElement[] CharacterOperationUI;//[Offset: 0x28, Size: 0x10]
	OperationUIElement[] DirectionOperationUI;//[Offset: 0x38, Size: 0x10]
	OperationUIElement[] SteeringOperationUI;//[Offset: 0x48, Size: 0x10]
	OperationUIElement[] JoyStickOperationUI;//[Offset: 0x58, Size: 0x10]
	OperationUIElement[] WheeledJoyStickOperationUI;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: OperationUIElement
	FString PanelName;//[Offset: 0x0, Size: 0x10]
	float CurScale;//[Offset: 0x10, Size: 0x4]
	float MinScale;//[Offset: 0x14, Size: 0x4]
	float MaxScale;//[Offset: 0x18, Size: 0x4]
	float CurOpacity;//[Offset: 0x1c, Size: 0x4]
	float MinOpacity;//[Offset: 0x20, Size: 0x4]
	float MaxOpacity;//[Offset: 0x24, Size: 0x4]
	bool bCanHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bLockAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float minOffsetY;//[Offset: 0x2c, Size: 0x4]
	float maxOffsetY;//[Offset: 0x30, Size: 0x4]
	bool bCannotChangeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bCannotChangeOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	Vector2D Translation;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: PlayerWeaponRecoilComponent.WeaponRecoilComponent.ActorComponent.Object
	enum CurrentCharacterState;//[Offset: 0x238, Size: 0x1]
	enum CurrentPostureType;//[Offset: 0x239, Size: 0x1]

--------------------------------
Class: WeaponRecoilComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0xc0, Size: 0x8]
	bool bHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bVActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bRActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	SolarWeapon* MyWeaponActor;//[Offset: 0xd0, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* YawCurve;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* RollCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* ScopeRollCurve;//[Offset: 0xf8, Size: 0x8]
	CurveFloat* ScopePitchCurve;//[Offset: 0x100, Size: 0x8]
	RichCurveKey[] OriginalScopePitchKeys;//[Offset: 0x108, Size: 0x10]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x118, Size: 0x8]
	CurveFloat*[] YawCurveArray;//[Offset: 0x1e8, Size: 0x10]
	CurveFloat*[] PitchCurveArray;//[Offset: 0x1f8, Size: 0x10]
	CurveFloat* PitchEndCurve;//[Offset: 0x208, Size: 0x8]
	CurveFloat*[] RollCurveArray;//[Offset: 0x210, Size: 0x10]
	CurveFloat*[] ScopeRollCurveArray;//[Offset: 0x220, Size: 0x10]
	void SetRecoilVActive(bool bActive);// 0x48d0280
	void SetRecoilRActive(bool bActive);// 0x48d01d4
	void SetRecoilHActive(bool bActive);// 0x48d032c
	void SetRecoilActive(bool bActive);// 0x48d0128
	bool JudgeHorizontalRecoilDir(out const Vector factorVector, bool bCurrentRight, int instantCout);// 0x48d0544
	bool IsRunning();// 0x48d0410
	CurveFloat* GetYawCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x48d0038
	Rotator GetRotatorDelta();// 0x48d03d8
	CurveFloat* GetRollCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x48cfe58
	CurveFloat* GetPitchCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x48cff48
	void Fire(bool hipfire, bool primary);// 0x48d0448

--------------------------------
Class: WeaponPartClipComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool IsSupportExtract();// 0x48c56f0
	Rotator GetHandRotOffset();// 0x48c5728
	Vector GetHandLocOffset();// 0x48c5760
	float GetDropLifeSpan();// 0x48c56bc
	FName GetCharacterHandSocket();// 0x48c5688
	FName GetCharacterHandInverseSocket();// 0x48c5654

--------------------------------
Class: WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PartId;//[Offset: 0x54c, Size: 0x4]
	bool bDataAssetInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bMeshAssetsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	WeaponPartDataAsset* OrginDataAsset;//[Offset: 0x558, Size: 0x8]
	WeaponPartDataAsset* SkinPartDataAsset;//[Offset: 0x560, Size: 0x8]
	StaticMesh* MyStaticMesh;//[Offset: 0x568, Size: 0x8]
	WeaponSkinData* WeaponSkin;//[Offset: 0x570, Size: 0x8]
	WeaponSkinPartData SkinMatchedPartData;//[Offset: 0x578, Size: 0x40]
	enum WeaponPartType;//[Offset: 0x5b8, Size: 0x1]
	void SwitchLOD(int LOD);// 0x48c672c
	void SetPartVisibility(bool bVisibility);// 0x48c6678
	void SetPartIDAndPartData(int InPartID);// 0x48c6154
	void ResetSkin();// 0x48c67d0
	void PartInitializeServer();// 0x48c68f0
	void PartInitializeClient();// 0x48c68dc
	void PartInitialize(const int InPartID);// 0x48c6904
	void OnLoadSkinDataCompleted();// 0x48c611c
	void OnLoadMeshDataCompleted();// 0x48c6138
	void OnLoadCompletedInternal(bool bSuccess);// 0x48c6068
	void OnLoadCompleted(bool bSuccess);// 0x48c5fbc
	bool IsValidPart();// 0x48c6820
	bool IsPartEnable();// 0x48c620c
	bool IsOnlyData();// 0x48c6640
	void InitializeMeshLOD();// 0x48c61f8
	bool HasInitialized();// 0x48c689c
	SoftObjectPath[] GetSkinNeedLoadAssets(WeaponSkinData* SkinData);// 0x48c63a8
	enum GetPartType();// 0x48c67ec
	int GetPartID();// 0x48c6860
	WeaponPartDataAsset* GetPartData();// 0x48c6244
	SoftObjectPath[] GetClientNeedLoadMesh();// 0x48c6278
	SoftObjectPath[] GetClientNeedLoadAssets();// 0x48c6518

--------------------------------
Class: WeaponPartDataAsset.DataAsset.Object
	bool bOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SoftObjectPath ViewStaticMeshPath;//[Offset: 0x38, Size: 0x18]
	Transform PreviewTransform;//[Offset: 0x50, Size: 0x30]
	SoftObjectPath FightStaticMeshPath;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath PartIcon;//[Offset: 0x98, Size: 0x18]
	<int,Vector> SpecificScaleMap;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: SolarVirtualBulletHitParameter
	AmmoConfig* Ammo;//[Offset: 0x0, Size: 0x8]
	Vector StartLoc;//[Offset: 0x8, Size: 0xc]
	Vector TargetLoc;//[Offset: 0x14, Size: 0xc]
	int ModeIndex;//[Offset: 0x20, Size: 0x4]
	int FireChargePhase;//[Offset: 0x24, Size: 0x4]
	float FireChargeTime;//[Offset: 0x28, Size: 0x4]
	int HitStartIndex;//[Offset: 0x2c, Size: 0x4]
	HitResult[] Hits;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SolarVirtualBulletSpawnParameter
	AmmoConfig* Ammo;//[Offset: 0x0, Size: 0x8]
	Vector StartLoc;//[Offset: 0x8, Size: 0xc]
	Vector TargetLoc;//[Offset: 0x14, Size: 0xc]
	int ModeIndex;//[Offset: 0x20, Size: 0x4]
	int FireChargePhase;//[Offset: 0x24, Size: 0x4]
	float FireChargeTime;//[Offset: 0x28, Size: 0x4]
	SolarVirtualBulletHomingTarget HomingTarget;//[Offset: 0x2c, Size: 0x24]
	FString AntiData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: SolarVirtualBulletHomingTarget
	bool bSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Actor* HomingTargetActor;//[Offset: 0x4, Size: 0x8]
	Vector InitialLoc;//[Offset: 0xc, Size: 0xc]
	Vector CurrentLoc;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: SpawnProjParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	byte Mode;//[Offset: 0x1c, Size: 0x1]
	Actor* Target;//[Offset: 0x20, Size: 0x8]
	bool bTriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float Scale;//[Offset: 0x2c, Size: 0x4]
	byte RocketNum;//[Offset: 0x30, Size: 0x1]
	byte CurRocketNum;//[Offset: 0x31, Size: 0x1]
	FString AntiData;//[Offset: 0x38, Size: 0x10]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: SolarSummonData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	Rotator Orientation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	BulletHitDetailData HitDetailData;//[Offset: 0x14, Size: 0x3c]
	float ServerTimeSeconds;//[Offset: 0x50, Size: 0x4]
	Vector WeaponLocation;//[Offset: 0x54, Size: 0xc]
	float DamageScale;//[Offset: 0x60, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x64, Size: 0x4]
	float LastFireTime;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MutiBulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	BulletHitDetailData[] HitDetailDataArray;//[Offset: 0x18, Size: 0x10]
	float ServerTimeSeconds;//[Offset: 0x28, Size: 0x4]
	Vector WeaponLocation;//[Offset: 0x2c, Size: 0xc]
	float DamageScale;//[Offset: 0x38, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x3c, Size: 0x4]
	float LastFireTime;//[Offset: 0x40, Size: 0x4]
	FString AntiData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: PlaySoundParams
	bool HasSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool InSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int SoundFireAutoCount;//[Offset: 0x4, Size: 0x4]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FireMode
	AmmoConfig* Ammo;//[Offset: 0x0, Size: 0x8]
	int Index;//[Offset: 0x8, Size: 0x4]
	enum HoldAction;//[Offset: 0xc, Size: 0x1]
	int AmmoReserve;//[Offset: 0x14, Size: 0x4]
	int AmmoCapacity;//[Offset: 0x18, Size: 0x4]
	float FireRateAccumulation;//[Offset: 0x1c, Size: 0x4]
	float FireRateAccumulationBurstInterval;//[Offset: 0x20, Size: 0x4]
	ParticleSystemComponent* BeamEffect;//[Offset: 0x50, Size: 0x8]
	ParticleSystemComponent* ChargingEffect;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SolarWeaponProjectileSpline.Actor.Object
	SplineComponent* Spline;//[Offset: 0x230, Size: 0x8]
	SolarSummonPreviewComponent* PreviewComponent;//[Offset: 0x23c, Size: 0x8]
	SplineMeshComponent* SplineMeshComponentCache;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* PreviewedStaticMesh;//[Offset: 0x250, Size: 0x8]
	SkeletalMeshComponent* PreviewedSkeletalMesh;//[Offset: 0x258, Size: 0x8]
	StaticMeshComponent* PreviewedRangeMesh;//[Offset: 0x260, Size: 0x8]
	SceneComponent* PreviewRoot;//[Offset: 0x268, Size: 0x8]
	void ShowHitPointAt(out const Vector Loc);// 0x4c8f29c
	void SetPreviewTransform(out const Vector PreviewLoc, out const Vector PreviewUpDir, out const Vector PreviewScale);// 0x487d274
	void SetPoints(out const Vector[] Points);// 0x4c8f29c
	void SetNeedUpdateDisplayThrowTrajectory(bool Value);// 0x487d1c8
	bool RequestDisplayPreview(SolarSummonDetectionComponent* InSummonDetectionComponent, out const Vector InSummonLocation, out const Vector InSummonNormal);// 0x487d4a0
	void HideHitPoint();// 0x4c8f29c
	void HideAllSummonPreview();// 0x487d3c4
	void Hide();// 0x4c8f29c
	SplineMeshComponent* GetSplineMeshComponent();// 0x4c8f29c
	void DrawSplineMesh(out const Vector[] InPredictPoints);// 0x487d3e0
	void ChangeSummonPreviewAttachParent();// 0x4c8f29c

--------------------------------
Class: SolarSummonDetectionComponent.SolarPreviewDetectionComponent.ActorComponent.Object
	SolarQuickSummonProxy* QuickSummonProxy;//[Offset: 0x110, Size: 0x8]
	void ResetQucikSummonTimer();// 0x47822e8
	bool IsWithinQuickSummonTime(const float InDeltaTime);// 0x47822fc

--------------------------------
Class: SolarPreviewDetectionComponent.ActorComponent.Object
	SoftObjectPath DetectionConfigPath;//[Offset: 0xb8, Size: 0x18]
	bool IsAllowPreview(out const Vector InLocation, out const Vector InNormal);// 0x4759f24
	bool CheckIsPreviewValid(out const SolarSummonData InSummonData, bool InbAccept);// 0x475a03c

--------------------------------
Class: SolarQuickSummonProxy.Object
	SolarSummonDetectionComponent* SummonDetectionComponent;//[Offset: 0x28, Size: 0x8]
	Vector RotateDirection(out const Vector InDirection, out const Vector InNormal);// 0x475ede0
	bool IsPlaceable(Actor* Summoner);// 0x475f1f4
	bool IsCheckedWorldStatic(Actor* InActor, out const Vector InDirection, out const Vector InCheckOffset, float InLength);// 0x475ec4c
	bool GetImpactPoint(Actor* InSummoner, out const Vector InStart, out const Vector InEndPoint, out Vector OutLocation, out Vector OutNormal);// 0x475eef0
	bool FindPlaceableSpace(out const Vector InSummonLocation, out const Vector InSummonNormal);// 0x475f0e4

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x550, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x5a8, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x5b4, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x5b8, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x5c8, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x5d0, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d4, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d4, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d4, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x5d5, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x5d8, Size: 0x4]
	void UpdateMesh();// 0x69ab508
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x69ab2b8
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x69aad88
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x69aac64
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x69ab3e0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x69aab44
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x69aaea8
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x69aa58c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x69aa6bc
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x69ab068
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x69aaa24
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x69aa900
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x69ab190
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x69aa7e0
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x69aa468
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x69aa344
	Vector GetStartTangent();// 0x69ab3a8
	Vector2D GetStartScale();// 0x69aae74
	float GetStartRoll();// 0x69aad54
	Vector GetStartPosition();// 0x69ab4d0
	Vector2D GetStartOffset();// 0x69aac30
	Vector GetSplineUpDir();// 0x69aa684
	byte GetForwardAxis();// 0x69aa7ac
	Vector GetEndTangent();// 0x69ab158
	Vector2D GetEndScale();// 0x69aab10
	float GetEndRoll();// 0x69aa9f0
	Vector GetEndPosition();// 0x69ab280
	Vector2D GetEndOffset();// 0x69aa8cc
	float GetBoundaryMin();// 0x69aa558
	float GetBoundaryMax();// 0x69aa434

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SolarSummonPreviewComponent.SolarPreviewComponent.ActorComponent.Object
	bool RequestDisplayPreviewDecalEffect(DecalComponent* InDecalComponent, out const SolarPreviewDecalEffectData InDecalEffectData, FString InDecalMaterialPath, out const Transform InDecalRelativeTransform);// 0x47843a4

--------------------------------
Class: SolarPreviewComponent.ActorComponent.Object
	bool RequestReplacePreviewMesh(MeshComponent* InMeshComponent, FString InPreviewMeshPath);// 0x4759898
	bool RequestReplacePreviewMaterial(MeshComponent* InMeshComponent, FString InPreviewMaterialPath);// 0x4759790
	bool RequestDisplayPreviewMesh(MeshComponent* InMeshComponent, FString InPreviewMeshPath, FString InPreviewMaterialPath, out const Transform InPreviewRelativeTransform);// 0x47599a0

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x298, Size: 0x8]
	int SortOrder;//[Offset: 0x2a0, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x2a4, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x2a8, Size: 0x4]
	float FadeDuration;//[Offset: 0x2ac, Size: 0x4]
	float FadeInDuration;//[Offset: 0x2b0, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x2b4, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	Vector DecalSize;//[Offset: 0x2bc, Size: 0xc]
	void SetSortOrder(int Value);// 0x67e0fd8
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x67e107c
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x67e1204
	void SetFadeIn(float StartDelay, float Duaration);// 0x67e1120
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x67e0f34
	float GetFadeStartDelay();// 0x67e13d0
	float GetFadeInStartDelay();// 0x67e1368
	float GetFadeInDuration();// 0x67e1334
	float GetFadeDuration();// 0x67e139c
	MaterialInterface* GetDecalMaterial();// 0x67e0f00
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x67e0ec4

--------------------------------
Class: SolarPreviewDecalEffectData
	SoftObjectPath ValidEffectPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath InvalidEffectPath;//[Offset: 0x18, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]
	int SortOrder;//[Offset: 0x60, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x64, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x68, Size: 0x4]
	float FadeDuration;//[Offset: 0x6c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x70, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x74, Size: 0x4]
	Vector DecalSize;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: CameraShakeData
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AttachedEffectParam
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Scale;//[Offset: 0x18, Size: 0xc]
	byte LocationType;//[Offset: 0x24, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x26, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: LocationEffectParam
	Rotator Rotation;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x19, Size: 0x1]
	bool bAutoActivateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: WeaponPartsComponent.ActorComponent.Object
	WeaponPartScopeComp* ScopeComp;//[Offset: 0xe8, Size: 0x8]
	WeaponPartClipComp* ClipComp;//[Offset: 0xf0, Size: 0x8]
	WeaponPartMuzzleComp* MuzzleComp;//[Offset: 0xf8, Size: 0x8]
	WeaponPartGripComp* GripComp;//[Offset: 0x100, Size: 0x8]
	WeaponPartGunStockComp* GunStockComp;//[Offset: 0x108, Size: 0x8]
	WeaponPartRunesComp* RunesComp;//[Offset: 0x110, Size: 0x8]
	StaticMeshComponent* CrossHairPlane;//[Offset: 0x118, Size: 0x8]
	StaticMeshComponent* RedCrosshairPanel;//[Offset: 0x120, Size: 0x8]
	bool bQuickScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	FName ScopeSocket;//[Offset: 0x12c, Size: 0x8]
	FName GripSocket;//[Offset: 0x134, Size: 0x8]
	FName ClipSocket;//[Offset: 0x13c, Size: 0x8]
	FName OldClipSocket;//[Offset: 0x144, Size: 0x8]
	FName MuzzleSocket;//[Offset: 0x14c, Size: 0x8]
	FName GunStockSocket;//[Offset: 0x154, Size: 0x8]
	SolarWeapon* MyWeaponActor;//[Offset: 0x160, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x168, Size: 0x8]
	void UpdateSkin(WeaponSkinData* SkinData);// 0x48cd928
	void UpdateSinglePartHoldView(WeaponPartComp* PartComp, bool bLocal);// 0x48cd748
	void UpdateHoldView(bool bLocal);// 0x48cd9cc
	bool SinglePartHasInitilized(WeaponPartComp* Part);// 0x48cdd54
	void ShowParts(bool show);// 0x48ce590
	void SetSinglePartSkin(WeaponPartComp* Part, WeaponSkinData* SkinData);// 0x48cdea8
	void ResetSkin();// 0x48cd914
	void ResetPartSkin(WeaponPartComp* Part);// 0x48cde04
	bool OverrideWeaponAmmoConfig(int InFireModeType, int InAmmoId);// 0x48cdc64
	bool IsPartExist(int ID);// 0x48ce380
	bool IsDefaultPart(const int PartId);// 0x48ce4e0
	bool IsAmmoExist(int ID);// 0x48cdf8c
	void InitEffectData(out const float[] hipV, out const float[] shoulderV, out WeaponPartsNetData Data);// 0x48cdab0
	void InitAllPartsEffectData(out WeaponPartsNetData Data);// 0x48ce03c
	bool HasInitilizeFinish();// 0x48cd8dc
	WeaponPartComp*[] GetWeaponParts();// 0x48ce430
	int GetPartsTypeByID(int ID);// 0x48ce2d4
	FString GetPartsBpByID(int ID);// 0x48ce130
	int GetPartLevelByID(int ID);// 0x48ce228
	WeaponPartsNetData GetNetData();// 0x48cda78
	void AttachToRightSocket(WeaponPartComp* PartComp);// 0x48cd838

--------------------------------
Class: WeaponPartScopeComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	bool bOpenProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	float OpenTime;//[Offset: 0x664, Size: 0x4]
	float CostTime;//[Offset: 0x668, Size: 0x4]
	StaticMesh* LodXStaticMesh;//[Offset: 0x670, Size: 0x8]
	float FovValue;//[Offset: 0x678, Size: 0x4]
	float HipToAdsTime;//[Offset: 0x67c, Size: 0x4]
	CurveFloat* FovChangeCurve;//[Offset: 0x680, Size: 0x8]
	float HitEffectScale;//[Offset: 0x688, Size: 0x4]
	void OpenScope(float Time);// 0x48cf188
	bool IsOpened();// 0x48cf13c
	bool IsNeedThermalImage();// 0x48cf308
	int GetScopeType();// 0x48cf108
	Vector GetScopeAimCenterPoint();// 0x48cf22c
	Rotator GetFPPRotation();// 0x48cf264
	Vector GetFPPLocation();// 0x48cf29c
	float GetDistanceToEyeWhenScope();// 0x48cf2d4
	void CloseScope();// 0x48cf174

--------------------------------
Class: WeaponPartMuzzleComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool HasSilencer();// 0x48cca64
	bool HasFlameArrester();// 0x48cca2c

--------------------------------
Class: WeaponPartGripComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartGunStockComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartRunesComp.ActorComponent.Object
	int[] Runes;//[Offset: 0xb8, Size: 0x10]
	void UpdateData(out const int[] Data);// 0x48cd0c0
	void OnInitilizeServer();// 0x48cd0ac
	void OnInitilizeClient();// 0x48cd098
	bool IsValid();// 0x48cd1b4
	enum GetPartType();// 0x48cd180

--------------------------------
Class: MultiHitResult.HitResult
	Vector_NetQuantize Start;//[Offset: 0x88, Size: 0xc]
	Vector_NetQuantize End;//[Offset: 0x94, Size: 0xc]
	int Num;//[Offset: 0xa0, Size: 0x4]
	int Seed;//[Offset: 0xa4, Size: 0x4]
	int Mode;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: OverrideBulletStruct
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x0, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarEnergyShield.SummonItemBase.Pawn.Actor.Object
	ParticleSystem* HitEffect;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystem* VehicleWholeShieldBrokenEffect;//[Offset: 0x2e8, Size: 0x28]
	Vector HitEffectScale;//[Offset: 0x310, Size: 0xc]
	byte OwnerTeam;//[Offset: 0x31c, Size: 0x1]
	<Actor*,float> OverlapActorsTimeMap;//[Offset: 0x320, Size: 0x50]
	float OverlapActorIntervalTime;//[Offset: 0x370, Size: 0x4]
	void PlaySkillStartSound();// 0x46742c4
	void PlaySkillEndSound();// 0x46742b0
	void PlayHitEffectOnVehicleWholeShield(int IndexToPlayHitEffect, out const Vector HitLocation);// 0x4c8f29c
	void PlayHitEffect(out const HitResult HitResult);// 0x4674664
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x46742d8
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4674444
	void ChangeColor();// 0x4c8f29c

--------------------------------
Class: SummonItemBase.Pawn.Actor.Object
	AkComponent* AkAudioComponent;//[Offset: 0x2a0, Size: 0x8]
	float MaxHealth;//[Offset: 0x2a8, Size: 0x4]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2ac, Size: 0x4]
	SolarCharacter* SourceSummoner;//[Offset: 0x2b0, Size: 0x8]
	float CurrentHealth;//[Offset: 0x2b8, Size: 0x4]
	float ReducedHealth;//[Offset: 0x2bc, Size: 0x4]
	float DelayDestroyTime;//[Offset: 0x2c0, Size: 0x4]
	bool bTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]
	float TimerMaxTime;//[Offset: 0x2c8, Size: 0x4]
	float Timer;//[Offset: 0x2cc, Size: 0x4]
	bool bEnableTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bOnlyOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	void SwitchTimer(bool InbEnable, float InMaxTime);// 0x4895648
	void Suicide();// 0x48959f8
	bool RequestPlaySoundByTeam(out const <enum,SolarSummonSoundData> InSoundData);// 0x489573c
	bool RequestPlaySound(out const FString[] InSoundData);// 0x4895850
	void ReceiveUpdateTimerEvent(float InTimerRate);// 0x4c8f29c
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate);// 0x4c8f29c
	void ReceiveDeathEvent();// 0x4c8f29c
	void OnRep_CurrentHealth();// 0x4895950
	bool IsDead();// 0x48959c0
	SolarCharacter* GetSourceSummoner();// 0x48959a4
	class Object GetClassType();// 0x489560c
	Vector GetCenterLocation();// 0x4895964

--------------------------------
Class: SolarSummonSoundData
	FString[] SoundNames;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapBase* MapOwner;//[Offset: 0x318, Size: 0x8]
	Vector2D MarkIconRealLoc;//[Offset: 0x320, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x328, Size: 0x8]
	bool IsOnBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	enum MarkerType;//[Offset: 0x331, Size: 0x1]
	bool IsMapObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]
	bool MoveAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 0x1]
	bool SupportEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	bool SupportEdgeWithBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]
	Actor* TargetActorRef;//[Offset: 0x338, Size: 0x8]
	void UpdateIconWithActor(Actor* InTargetActor);// 0x4585ccc
	void SetUpdateState(bool ShouldUpdateLocation);// 0x45859d8
	void SetMarkPos(out const Vector Loc);// 0x4585928
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);// 0x4585b24
	void OnBigMapOpen();// 0x4c8f29c
	void InitVehicleMarkIcon(int VehicleID);// 0x4c8f29c
	void InitStaticIcon(int MarkID);// 0x4585c20
	void InitMarkIcon(int MarkID, Actor* InTargetActor, bool InMoveable);// 0x4585d70
	void EdgeFix(Vector2D Pos);// 0x4585a84
	void CleanData();// 0x4c8f29c

--------------------------------
Class: MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MaxPool;//[Offset: 0x318, Size: 0x4]
	<FString,MapMarkElemArray> MapMarkPool;//[Offset: 0x320, Size: 0x50]
	void SetMiniMapFOV(float TargetFOV, float PlayTime, bool WithIconScale);// 0x4c8f29c
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x4c8f29c
	void RemoveDotLineOnMap(int DotLineID);// 0x4c8f29c
	void RemoveAllMapMarks();// 0x45899c8
	bool RecycleMapMark(FString MapMarkName, MapMarkBase* MapMarkToRecycle);// 0x45899dc
	void PlayVoiceOnMiniMap(enum InVoiceType, out const MapVoiceData InVoiceData);// 0x4589820
	void MapScaleFormat(MapMarkBase* MapMark);// 0x4589924
	void Lua_MapScaleFormat(MapMarkBase* MapMark);// 0x4c8f29c
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x4c8f29c
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder);// 0x4c8f29c
	void InitMapMarkPool();// 0x4589b94
	MapMarkBase* GetFreeMapMark(FString MapMarkName);// 0x4589adc
	bool EdgeSupportMarkFix(MapMarkBase* InMarkInstance, out Vector2D FixedPos);// 0x4c8f29c
	MapMarkBase* CreateMapMark(FString MapMarkName);// 0x4c8f29c
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x4c8f29c

--------------------------------
Class: MapMarkElemArray
	MapMarkElem[] MapMarkElems;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MapMarkElem
	MapMarkBase* MapMark;//[Offset: 0x0, Size: 0x8]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ElectricShopSection
	ElectricShopItem[] Items;//[Offset: 0x0, Size: 0x10]
	float CoolDownDuration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ElectricShopItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Prize;//[Offset: 0x4, Size: 0x4]
	int Num;//[Offset: 0x8, Size: 0x4]
	int ProductID;//[Offset: 0xc, Size: 0x4]
	float CoolDown;//[Offset: 0x10, Size: 0x4]
	int Generation;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ElectricShopCDRecord
	int ProductID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float EndWorldTime;//[Offset: 0x8, Size: 0x4]
	FString BuyerID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PoolRefreshInfo
	int PoolGroupID;//[Offset: 0x0, Size: 0x4]
	float PoolRefreshTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ElectricShopItemDemo.Actor.Object

--------------------------------
Class: ChargingPilePreset
	SoftObjectPath BrokenMeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath BrokenMatPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath RangeRingPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath RangeRingMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath ChargeCirclePath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath ChargeCircleMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ChargeParticleEffectPath;//[Offset: 0x90, Size: 0x18]
	Transform RangeRingTrans;//[Offset: 0xb0, Size: 0x30]
	Transform ChargeCircleTrans;//[Offset: 0xe0, Size: 0x30]
	Vector BeamStartPos;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: SolarBackpackActor.Actor.Object
	SceneComponent* BackpackRoot;//[Offset: 0x230, Size: 0x8]
	BackpackVertAnimMeshComponent* BackpackMesh;//[Offset: 0x238, Size: 0x8]
	SolarCharacter* BackPackActorOwner;//[Offset: 0x240, Size: 0x8]
	SolarBackpackSFX*[] BackpackSFX;//[Offset: 0x248, Size: 0x10]
	SolarBackpackSFX* BackpackOffgasSFX;//[Offset: 0x258, Size: 0x8]
	float OriginScale;//[Offset: 0x26c, Size: 0x4]
	FString TrailBpPath;//[Offset: 0x290, Size: 0x10]
	FString OffgasBpPath;//[Offset: 0x2a0, Size: 0x10]
	class SolarBackpackSFX* TrailClass;//[Offset: 0x2b0, Size: 0x8]
	class SolarBackpackSFX* OffgasClass;//[Offset: 0x2b8, Size: 0x8]
	<ParticleSystemComponent*> ListenSet;//[Offset: 0x2c0, Size: 0x50]
	void SetRenderMode(byte Mode);// 0x45fbed8
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int Flag);// 0x45fbde4
	void OnMeshEffectFactorChange();// 0x4c8f29c
	void OnChildPSCompFinish(ParticleSystemComponent* PSComponent);// 0x45fbb8c
	void OnChildPSCompActive(ActorComponent* Component, bool bReset);// 0x45fbc30
	bool IsFly();// 0x45fbd20
	bool IsCharging();// 0x45fbd90
	bool HasEnergy();// 0x45fbd58
	float GetBackpackOrginScale();// 0x45fbdc8

--------------------------------
Class: BackpackVertAnimMeshComponent.VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VertexAnimInfo DefaultAnimInfo;//[Offset: 0x578, Size: 0x10]
	<byte,VertexAnimInfo> BackPackAnimInfoMap;//[Offset: 0x588, Size: 0x50]
	SolarCharacter* SolarCharacter;//[Offset: 0x5d8, Size: 0x8]
	SolarBackpackActor* BackPackActor;//[Offset: 0x5e0, Size: 0x8]

--------------------------------
Class: VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void PlayInfo(out const VertexAnimInfo InAnimInfo);// 0x48bdf54
	void Play(int InStartFrame, int InEndFrame, float InLength, bool InLoop);// 0x48bdde0

--------------------------------
Class: VertexAnimInfo
	int StartFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	float Length;//[Offset: 0x8, Size: 0x4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SolarBackpackSFX.Actor.Object
	ParticleSystemComponent* GetTrailEffectComponent();// 0x460fd58
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x460fbfc
	void BackpackSFXEnd();// 0x460fae8
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x460fb04

--------------------------------
Class: BackpackJetPrepelInfo
	bool IsPropelling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int PropellingCounter;//[Offset: 0x4, Size: 0x4]
	byte JetType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GyroscopeConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 0x8]
	DataTable* gyroscopeSensitivityDataTab;//[Offset: 0x38, Size: 0x8]
	DataTable* GyroscopeDeviceModelDataTab;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: CharacterOperationEvent
	enum Name;//[Offset: 0x0, Size: 0x1]
	Object* Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ActorEffect.Object
	class ActorEffectController* ControllerClass;//[Offset: 0x28, Size: 0x8]
	ActorEffectController* Controller;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ActorEffectController.Object

--------------------------------
Class: SolarTeamRescueComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xc0, Size: 0x8]
	float MaxRescureDis;//[Offset: 0xc8, Size: 0x4]
	float MaxRescureAngle;//[Offset: 0xcc, Size: 0x4]
	float RescueRecoveryHp;//[Offset: 0xd0, Size: 0x4]
	float TempTime;//[Offset: 0xd4, Size: 0x4]
	float CheckInterval;//[Offset: 0xd8, Size: 0x4]
	float TempReqTime;//[Offset: 0xdc, Size: 0x4]
	float RequestTimeout;//[Offset: 0xe0, Size: 0x4]
	bool bSendRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	bool bLastRescueBtnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1]
	SolarCharacter* ClosestTarget;//[Offset: 0xe8, Size: 0x8]
	SolarCharacter*[] NearByTeamMates;//[Offset: 0xf0, Size: 0x10]
	void UpdateTeamRescueParams();// 0x4c8f29c
	void TryRescueClosestTeammateLuaCall(bool IsShow);// 0x37b7888
	void TryRescueClosestTeammate();// 0x48231c4
	void ShowTeamRescueToUI(bool IsShow);// 0x4c8f29c
	void SetRescueBtnVisibility(bool bIsVisible);// 0x37b7888
	void ReqStartTeamRescue(SolarCharacter* TargetCharacter);// 0x48232fc
	void ReqCompleteTeamRescue();// 0x48232d4
	void ReqCancelTeamRescure();// 0x48232e8
	void OnRescueStateChangeInternal();// 0x37b7888
	void OnRescueStateChange();// 0x4823444
	void InitTeamRescueParams();// 0x37b7888
	void DetectRescueTeammate(float DeltaTime);// 0x48233a0
	bool CanRescue(SolarCharacter* Player, const bool bStart);// 0x48231d8

--------------------------------
Class: InjectorMeshPreset
	SoftObjectPath InjectorMeshPath;//[Offset: 0x0, Size: 0x18]
	Transform InjectorRelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: WaterEffectPreset
	ParticleSystem* EffectResource;//[Offset: 0x0, Size: 0x28]
	FName DefaultTrackSocket;//[Offset: 0x28, Size: 0x8]
	FName FTrackSocket;//[Offset: 0x30, Size: 0x8]
	FName BTrackSocket;//[Offset: 0x38, Size: 0x8]
	FName LTrackSocket;//[Offset: 0x40, Size: 0x8]
	FName RTrackSocket;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarItemComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb8, Size: 0x8]
	void UseItemRequestLuaCall(int ItemID, int Num);// 0x46efffc
	void OnPlayerBackpackItemUpdate();// 0x46effe8
	bool CanUseMedicine();// 0x46effb0

--------------------------------
Class: SolarPickupComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* OwnerChar;//[Offset: 0x4d8, Size: 0x8]
	float PickUpHighlyThresholdFactor;//[Offset: 0x4e8, Size: 0x4]
	bool bWantedClearItemData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 0x1]
	<enum,SolarPickupHandlerBase*> PickupHandlerMap;//[Offset: 0x4f0, Size: 0x50]
	bool GlobalPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	AirDropTreasureBox* TagetAirDropBox;//[Offset: 0x544, Size: 0x8]
	<enum,ActorArrayMap> PickupItemsMap;//[Offset: 0x558, Size: 0x50]
	Actor*[] ProccessedList;//[Offset: 0x5a8, Size: 0x10]
	bool ItemUIToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	UIManager* UIManager;//[Offset: 0x5c0, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x5c8, Size: 0x8]
	Actor* PendingFirstItemActor;//[Offset: 0x678, Size: 0x8]
	SolarTreasureBoxActor* PendingFirstTreasureBox;//[Offset: 0x680, Size: 0x8]
	SolarTreasureBoxActor* PendingFirstDeathBox;//[Offset: 0x688, Size: 0x8]
	bool GlobalAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	float UnAutoPickupItemTime;//[Offset: 0x694, Size: 0x4]
	float AutoPickupTime;//[Offset: 0x698, Size: 0x4]
	bool StopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	bool GlobalAutoPickupHomeItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 0x1]
	bool bReqPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69e, Size: 0x1]
	SolarGameUserSettings* UserSettings;//[Offset: 0x778, Size: 0x8]
	delegate OnItemDataSet;//[Offset: 0x790, Size: 0x10]
	delegate UpdateCheckBoxesVisibility;//[Offset: 0x7a0, Size: 0x10]
	delegate OnUpdateCheckBoxesHighLight;//[Offset: 0x7b0, Size: 0x10]
	delegate OnUpdateCheckBoxesStates;//[Offset: 0x7c0, Size: 0x10]
	delegate OnPickupListClear;//[Offset: 0x7d0, Size: 0x10]
	delegate OnTogglePickupList;//[Offset: 0x7e0, Size: 0x10]
	delegate OnSelectPickupSightWidget;//[Offset: 0x7f0, Size: 0x10]
	bool ListenFireReslutFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	float DelayedDisplayTime;//[Offset: 0x804, Size: 0x4]
	TimerHandle AutoShowPickupListHandle;//[Offset: 0x808, Size: 0x8]
	TimerHandle DelayProcessFireResultHandle;//[Offset: 0x810, Size: 0x8]
	TimerHandle EnsuredAutoShowHandle;//[Offset: 0x818, Size: 0x8]
	FString[] FireResultMsgs;//[Offset: 0x820, Size: 0x10]
	void UpdateItemUI(bool bForce);// 0x47247dc
	void UpdateCheckboxSwitchLuaCall(enum PickupType, bool InCheckBoxSwitch);// 0x4723dd8
	void UpdateCheckboxSwitches(out const <enum,bool> InOpenSwitches);// 0x4723ec8
	void UpdateBagNearbyData();// 0x4724dc4
	void TryReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x4725e1c
	void TryPickupTreasureItem(SolarTreasureBoxActor* PickActor, out const SolarItemData ItemData);// 0x47244a0
	void TryPickupItem(Actor* PickActor);// 0x4724608
	bool TryOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x4724f54
	void TryClearDirtyData(const bool bForce);// 0x4726004
	bool TryCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x4724ea4
	void ToggleItemUI(bool Flag);// 0x472615c
	void StopListenFireInput(bool bIsInstantlyStop);// 0x4723d18
	void StopAutoPickupTimer(enum PickupType);// 0x4724204
	void StopAutoPickupBoxHomeItemTimer();// 0x47241dc
	void StartListenFireInput();// 0x4723dc4
	void StartCheckTutorials(enum TriggerType);// 0x4724dd8
	void StartAutoPickupTimer(enum PickupType);// 0x47242a8
	void StartAutoPickupBoxHomeItemTimer();// 0x47241f0
	void ShowPickupList(bool Flag);// 0x47260b0
	bool ShouldPickupTreasureBoxItem(SolarTreasureBoxActor* InTreasureBox);// 0x4725f54
	void SetStopAutoPickupWhenClose(const bool InStopAutoPickupWhenClose);// 0x4724070
	void SetPickupSwitchInLua(const bool IsOpen);// 0x4c8f29c
	void SetPickupSwitch(const bool IsOpen);// 0x472530c
	void SetPickupCapsuleSize(out const Vector Size);// 0x47262f4
	void SetIsAutoPickupHomeItems(const bool InValue);// 0x47246ac
	void SetAutoPickupSwitch(const bool InCanAutoPickup);// 0x472411c
	void RestartPickupTimer(enum PickupType);// 0x4723fb8
	void ReqPickupWeapon(Actor* WeaponData, bool IsAutoPickup);// 0x4725bf4
	void ReqPickupTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool IsAutoPickup, int TargetIndex, enum InItemType);// 0x47257ac
	void ReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x4725ce4
	void ReqPickupHomeItemByDrag(SolarItemActor* ItemActor, int Grade, int GridIndex);// 0x4725acc
	void ReqPickupBoxHomeItemByDrag(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, int Grade, int GridIndex);// 0x4725964
	void ReqOpenTreasureBox(SolarTreasureBoxActor* TreasureBox);// 0x4725708
	void RefreshPickupTimer();// 0x472405c
	void RefreshItemUI();// 0x472621c
	void RecheckPendingActors();// 0x4724b9c
	void ReceiveFireResult(FString InFireResultMsg);// 0x4723c68
	void ProcessFireResultMsgs();// 0x4723c54
	void PickFirstItemFromPickupList();// 0x472434c
	void OnWeaponSlotEquip(int InWeaponSlotID, SolarPlayerWeapon* InWeapon);// 0x4723770
	void OnUpdateItemUIDataChanged(Object* Object, int OldItemID, int NewItemID);// 0x4724888
	void OnTreasureBoxStateChange(int64 ThisID, const enum State);// 0x4725620
	void OnPickupSettingChanged();// 0x47241c8
	void OnPickupConfirmHandle();// 0x4724360
	void OnPickupActorEnd(Actor* ItemActor);// 0x4724a54
	void OnPickupActorBegin(Actor* ItemActor);// 0x4724af8
	void OnCharacterDeathBegin();// 0x47250b4
	void OnActorDestroyed(Actor* Actor);// 0x47249b0
	void MarkDirtyForTick();// 0x4726230
	bool IsValidItemActor(const Actor* ItemActor);// 0x4726244
	bool IsNeedReplace(const enum InType, out const SolarItemData InItemData);// 0x47253f0
	bool IsEquipItem(const enum InType);// 0x4725570
	bool IsCharacterInAir();// 0x47253b8
	void InitPickupCheckBoxSwitches();// 0x47247c8
	SolarItemData GetTreasureItemDataByThisID(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID);// 0x47250c8
	Actor* GetPickupTreasureBoxActor();// 0x4724bb0
	<int,ActorArray> GetItemData(enum PickupItemType);// 0x4724c90
	int GetItemCount(enum PickupItemType);// 0x4724be4
	bool GetIsGlobalPickup();// 0x4724790
	bool GetIsAutoPickupHomeItems();// 0x4724758
	void DoStopOpeningAirDropBox();// 0x4724e7c
	void DoOpenAirDropBox();// 0x4724e90
	void CloseItemUI();// 0x4726208
	void ClearAutoShowPickupListHandle();// 0x4723c40
	void ClearAllTimer();// 0x4723fa4
	void CheckToShowConfirm(out const SolarItemData ItemData);// 0x4724374
	bool CheckIsItemMaximizing(const int ItemID);// 0x4725004
	void CallHUDSetTreasureBoxActor(Actor* InActor);// 0x4723a44
	void CallHUDSetAirdropBoxActor(Actor* InActor);// 0x47239a0
	void CallHUDSetActiveOpenBoxProgress(const bool Inactive);// 0x4723ae8
	void CallHUDSetActiveOpenBoxBtn(const bool Inactive);// 0x4723b94
	void CallHUDHideOpenBoxUIByThisID(const int64 InThisID);// 0x47238fc
	void CallHUDHideAirdropBoxUIByThisID(const int64 InThisID);// 0x4723858

--------------------------------
Class: SolarItemActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x270, Size: 0xa8]
	float SpawnOffset;//[Offset: 0x318, Size: 0x4]
	SphereComponent* SphereComponent;//[Offset: 0x320, Size: 0x8]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x330, Size: 0x10]
	byte ItemCurrentState;//[Offset: 0x340, Size: 0x1]
	byte[] MarkedTeamIdList;//[Offset: 0x350, Size: 0x10]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x368, Size: 0x8]
	StaticMeshComponent* OutlineMeshComp;//[Offset: 0x370, Size: 0x8]
	MaterialInstanceDynamic*[] NormalMats;//[Offset: 0x378, Size: 0x10]
	MaterialInstanceDynamic*[] OutlineMats;//[Offset: 0x388, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x46ea268
	void SwitchDiscardMaterials();// 0x46ea4e8
	void SetOutlineMeshVisible(bool Visible);// 0x46ea3c0
	void SetItemData(out const SolarItemData _ItemData);// 0x46ea534
	void OnServerPawned();// 0x46ea518
	void OnRep_ItemDataChange();// 0x46ea668
	void OnRep_ItemCurrentStateChanged();// 0x46ea4fc
	void NotifyThisItemWasPickedUp();// 0x46ea254
	void MarkThisItem(byte TeamID);// 0x46ea314
	StaticMeshComponent* GetStaticMeshComp();// 0x46ea490
	int GetQuality();// 0x46ea4ac
	StaticMeshComponent* GetBackgroundFXMeshComp();// 0x46ea474

--------------------------------
Class: SolarDormantActor.Actor.Object

--------------------------------
Class: SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	enum CurrentState;//[Offset: 0x398, Size: 0x1]
	SolarItemData[] ItemDataList;//[Offset: 0x3a0, Size: 0x10]
	SolarItemData[] SortedGameItemDatas;//[Offset: 0x3b0, Size: 0x10]
	int DataLeng;//[Offset: 0x3d0, Size: 0x4]
	int CostNum;//[Offset: 0x3d4, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x3d8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3e0, Size: 0x8]
	void UpdateTreasureBoxInternal();// 0x482e7a4
	void UpdateOpenBoxUIByState(const enum NewState);// 0x4c8f29c
	void UpdateItemDataListInternal();// 0x482e7c0
	void ServerSetState(const enum NewState, SolarCharacter* RequestCharacter);// 0x482e6a8
	void ServerNotifyPlayerOpen(SolarCharacter* RequestCharacter, enum StatisticsType);// 0x482e5c0
	void PlayOpenAnimation();// 0x4c8f29c
	void OpenTreasureBoxRequire();// 0x482e960
	void OnRep_ItemDataList();// 0x482e7d4
	void OnRep_CurrentState();// 0x482e790
	bool IsEmpty();// 0x482e93c
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x482e490
	int GetNumCost();// 0x482e920
	SolarItemData[] GetItemList();// 0x482e7e8
	void ConstructTreasureBoxTest(out int[] itemIdList);// 0x482e974
	void ConstructTreasureBox(int dropId);// 0x482ea34
	bool BOpened();// 0x482e580

--------------------------------
Class: SolarPickupHandlerBase.Object
	enum Type;//[Offset: 0x28, Size: 0x1]
	SolarPickupComponent* OwnerComponent;//[Offset: 0x30, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	bool bIsOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	float openProgress;//[Offset: 0x3ec, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0x3f0, Size: 0x8]
	float OpenTime;//[Offset: 0x3f8, Size: 0x4]
	float ProtectionTime;//[Offset: 0x3fc, Size: 0x4]
	bool bBoxLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 0x1]
	Rotator TargetRotation;//[Offset: 0x42c, Size: 0xc]
	Vector TargetLocation;//[Offset: 0x438, Size: 0xc]
	ParticleSystem* LandHitEffect;//[Offset: 0x448, Size: 0x8]
	class Actor* WarningEffect;//[Offset: 0x450, Size: 0x8]
	class SolarAbility* RangeAbility;//[Offset: 0x458, Size: 0x8]
	float dropGravity;//[Offset: 0x460, Size: 0x4]
	float maxDropSpeed;//[Offset: 0x464, Size: 0x4]
	float originHeight;//[Offset: 0x468, Size: 0x4]
	float dropOffset;//[Offset: 0x46c, Size: 0x4]
	bool bIsDroping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 0x1]
	bool bIsSeating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47e, Size: 0x1]
	FString SNameAirDropOpen;//[Offset: 0x4b8, Size: 0x10]
	FString SNameLandHit;//[Offset: 0x4c8, Size: 0x10]
	FString SNameStartDrop;//[Offset: 0x4d8, Size: 0x10]
	FString SNameStopDrop;//[Offset: 0x4e8, Size: 0x10]
	FString SNamePlayLandedLoopAudio;//[Offset: 0x4f8, Size: 0x10]
	FString SNameStopLandedLoopAudio;//[Offset: 0x508, Size: 0x10]
	FString SNamePlayStartHackAudio;//[Offset: 0x518, Size: 0x10]
	FString SNameStopStartHackAudio;//[Offset: 0x528, Size: 0x10]
	FString SNamePlayHackingLoopAudio;//[Offset: 0x538, Size: 0x10]
	FString SNameStopHackingLoopAudio;//[Offset: 0x548, Size: 0x10]
	void PlayLandingAnimation();// 0x4c8f29c
	bool OpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x451452c
	void OnStateChanged();// 0x4514460
	void OnRep_TargetLocation();// 0x4514438
	void OnRep_OpenProgressChange();// 0x45145f0
	void OnRep_OpenCharacterChange();// 0x45145dc
	void OnRep_IsOpening();// 0x4514604
	void OnRep_bBoxLanded();// 0x451444c
	bool IsOpenningCharacterOffline();// 0x45143c8
	bool IsOpeningCharacterInRange();// 0x4514400
	bool CancelOpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x451447c

--------------------------------
Class: ActorArrayMap
	<int,ActorArray> ActorArrayMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ActorArray
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SolarTreatmentComponent.ActorComponent.Object
	delegate OnCharacterHealthLow;//[Offset: 0xc0, Size: 0x10]
	int MedicineItemId;//[Offset: 0xd0, Size: 0x4]
	float DefaultTreatmentDuration;//[Offset: 0xd4, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0xd8, Size: 0x8]
	void TryStopTreatment();// 0x482fbec
	void TryStatisticsTreatedTimes();// 0x482fb9c
	void TryStartTreatment();// 0x482fc00
	void StopProgress();// 0x482fbc4
	void StartProgress();// 0x482fbd8
	bool IsMedicineEnough();// 0x482fc84
	bool IsFullHealth();// 0x482fc4c
	bool IsAbleToContinueTreatment();// 0x482fcbc
	void IncreaseTreatedTimes();// 0x482fbb0
	float GetTreatmentDuration();// 0x37b7888
	FString GetModuleName_Implementation();// 0x482fcf4
	bool CanStartTreatment();// 0x4c8f29c
	bool CanBeTreated();// 0x482fc14

--------------------------------
Class: OperatorMeshPreset
	ParticleSystem* ShieldRepairFXResourceSoft;//[Offset: 0x0, Size: 0x28]
	Vector ShieldRepairFXRelativeLocation;//[Offset: 0x28, Size: 0xc]
	SoftObjectPath ShieldOperatorMeshPath;//[Offset: 0x38, Size: 0x18]
	Transform ShieldOperatorRelativeTrans;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ShieldEffect
	ParticleSystem* ShieldEffect;//[Offset: 0x0, Size: 0x28]
	Vector EffectScale;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ShieldSoundData
	<enum,enum> SoundData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TreasureBoxOperatorMeshPreset
	SoftObjectPath TreasureBoxOperatorMeshPath;//[Offset: 0x0, Size: 0x18]
	Transform TreasureBoxOperatorRelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	float CharacterPickupRange;//[Offset: 0x3e8, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x3ec, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x3f0, Size: 0x4]
	FString PlayerId;//[Offset: 0x3f8, Size: 0x10]
	FString NickName;//[Offset: 0x408, Size: 0x10]
	bool IsPickuped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	BoxChargingInfo[] ChargingChars;//[Offset: 0x430, Size: 0x10]
	void ReceiveSetUIEnable(bool IsShow);// 0x4c8f29c
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x4c8f29c
	void ReceiveRefreshExtraEnergy(FString Message);// 0x4c8f29c
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x4c8f29c
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x454f3b8
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x454f524
	void OnRep_PickupedChanged();// 0x454f390
	void OnRep_CurrExtraEnergyValueChanged();// 0x454f3a4
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x4c8f29c

--------------------------------
Class: BoxChargingInfo

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x4d9, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x4da, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x4e0, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x4e8, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 0x1]
	float RedrawTime;//[Offset: 0x4f4, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x500, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x50c, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x516, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x517, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x518, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x520, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x530, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x540, Size: 0x4]
	enum BlendMode;//[Offset: 0x544, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x546, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x548, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x570, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x578, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x580, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x588, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x590, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x598, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x5a0, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x5b0, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x5bc, Size: 0x8]
	int LayerZOrder;//[Offset: 0x5c4, Size: 0x4]
	enum GeometryMode;//[Offset: 0x5c8, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x5cc, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x5cd223c
	void SetWindowFocusable(bool bInWindowFocusable);// 0x5cd22fc
	void SetWidgetSpace(enum NewSpace);// 0x5cd253c
	void SetWidget(UserWidget* Widget);// 0x5cd2de4
	void SetTwoSided(const bool bWantTwoSided);// 0x5cd2a58
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x5cd284c
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x5cd2994
	void SetRedrawTime(float InRedrawTime);// 0x5cd25f8
	void SetPivot(out const Vector2D InPivot);// 0x5cd2778
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x5cd2d40
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x5cd2c78
	void SetGeometryMode(enum InGeometryMode);// 0x5cd2480
	void SetDrawSize(Vector2D Size);// 0x5cd2b3c
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x5cd26b4
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x5cd23c4
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x5cd28f0
	void RequestRedraw();// 0x5cd2b20
	enum GetWindowVisiblility();// 0x5cd22e0
	bool GetWindowFocusable();// 0x5cd23a8
	enum GetWidgetSpace();// 0x5cd25dc
	UserWidget* GetUserWidgetObject();// 0x5cd2ef8
	bool GetTwoSided();// 0x5cd2b04
	bool GetTickWhenOffscreen();// 0x5cd2a3c
	TextureRenderTarget2D* GetRenderTarget();// 0x5cd2ec4
	float GetRedrawTime();// 0x5cd2698
	Vector2D GetPivot();// 0x5cd282c
	LocalPlayer* GetOwnerPlayer();// 0x5cd2c44
	MaterialInstanceDynamic* GetMaterialInstance();// 0x5cd2e90
	bool GetManuallyRedraw();// 0x5cd2d24
	enum GetGeometryMode();// 0x5cd2520
	Vector2D GetDrawSize();// 0x5cd2c10
	bool GetDrawAtDesiredSize();// 0x5cd275c
	float GetCylinderArcAngle();// 0x5cd2464
	Vector2D GetCurrentDrawSize();// 0x5cd2bdc

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4]
	int SizeY;//[Offset: 0xc4, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xc8, Size: 0x10]
	byte AddressX;//[Offset: 0xd8, Size: 0x1]
	byte AddressY;//[Offset: 0xd9, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xda, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xda, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xda, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xdb, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0xdd, Size: 0x1]
	byte MipsAddressU;//[Offset: 0xde, Size: 0x1]
	byte MipsAddressV;//[Offset: 0xdf, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: TeammateHUDPreset
	class UserWidget* TeammateHUDClass;//[Offset: 0x0, Size: 0x8]
	bool bUseDesireSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector2D DrawSize;//[Offset: 0xc, Size: 0x8]
	int ZOrder;//[Offset: 0x14, Size: 0x4]
	float DisplayMaxDistance;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RadarScanSoundDataAsset.DataAsset.Object
	FString RadarScan_Loop_Start;//[Offset: 0x30, Size: 0x10]
	FString RadarScan_Loop_End;//[Offset: 0x40, Size: 0x10]
	FString RadarScan_Once_Success;//[Offset: 0x50, Size: 0x10]
	FString RadarScan_Once_Failed;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: SolarRadarComponent.ActorComponent.Object
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0xc0, Size: 0x8]
	class UserWidget* ScannedScreenUIClass;//[Offset: 0xc8, Size: 0x8]
	float ScreenUIDisplayTime;//[Offset: 0xd0, Size: 0x4]
	UserWidget* CreatedScreenUI;//[Offset: 0xd8, Size: 0x8]
	TimerHandle ScreenUITimerHandle;//[Offset: 0xe0, Size: 0x8]
	SolarCharacter* CharacterOwner;//[Offset: 0xe8, Size: 0x8]
	ScannedInfo[] CurrentScanResults;//[Offset: 0xf0, Size: 0x10]
	float CurrentSpanTimer;//[Offset: 0x100, Size: 0x4]
	FName[] ActivedRadarTags;//[Offset: 0x108, Size: 0x10]
	void OnRecivedScanResults();// 0x37b7888
	void OnRecieveOnceScanStart(int ScanedNum);// 0x475ff98
	void OnRadarScanStart(out RadarDataSpec RadarDataSpec);// 0x476010c
	void OnRadarScanEnd(out RadarDataSpec RadarDataSpec);// 0x476003c
	void OnExposedByRadar(bool bOnceScan);// 0x475feec
	void OnceScanSuccessNotifation(int ScanedNum);// 0x37b7888
	void OnceScanFailedNotifation();// 0x37b7888
	void MarkedByOnceScanNotifation();// 0x37b7888
	FString GetModuleName_Implementation();// 0x47601dc
	void ExposedByRadarNotifation();// 0x37b7888

--------------------------------
Class: RadarDataSpec.FastArraySerializerItem
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0xc, Size: 0x4]
	byte RadarType;//[Offset: 0x10, Size: 0x1]
	Vector2D RadarRange;//[Offset: 0x14, Size: 0x8]
	Pawn* RadarSpawner;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ScannedInfo
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	enum TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector TargetLocation;//[Offset: 0xc, Size: 0xc]
	float TargetToward;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RadarDataSpecContainer.FastArraySerializer
	RadarDataSpec[] Radars;//[Offset: 0x108, Size: 0x10]
	SolarRadarComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: CriticalHitInfo
	SolarPlayerState* Instigator;//[Offset: 0x0, Size: 0x8]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float DamageTime;//[Offset: 0xc, Size: 0x4]
	int LastDamageWeaponID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WorldMarkComponent.ActorComponent.Object
	SolarCharacter* Owner;//[Offset: 0xc0, Size: 0x8]
	uint32 WorldMarkPoolOriginSize;//[Offset: 0xc8, Size: 0x4]
	float MinCheckDistance;//[Offset: 0xcc, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xd0, Size: 0x4]
	void VehicleNotify(int VehicleID, int NameLocID);// 0x4c8f29c
	void UnMarkItemByIDLuaCall(int64 instanceID);// 0x48f3e90
	void ResponseChosenMark();// 0x4c8f29c
	void NotifyThatToFarToMark();// 0x4c8f29c
	void MarkWarningOnWorld();// 0x48f4160
	void MarkQuickChatOnWorld(FString IconImg);// 0x48f40b0
	void MarkPointOnWorld();// 0x48f4174
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x48f4188
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x48f3f34
	void LuaRelease();// 0x4c8f29c
	void LuaInit();// 0x4c8f29c
	void InteractTypeNotify(enum Type);// 0x4c8f29c
	void Init(SolarCharacter* Character);// 0x48f427c
	HUD_WorldMarkPanel* GetWorldMarkPanel();// 0x48f3e5c
	void CreateWorldMark(int PosInTeam, out const WorldMarkData InWorldMarkedData);// 0x4c8f29c
	void CreateWarningWidget(WorldMarkData Data);// 0x4c8f29c
	void CreateItemMarkWidget(WorldMarkData Data);// 0x4c8f29c
	void CreateInvalidWidget(WorldMarkData Data, bool bShouldNotify);// 0x4c8f29c

--------------------------------
Class: HUD_WorldMarkPanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* MarkPanel;//[Offset: 0x318, Size: 0x8]
	FString OnRegisterPositionMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, out const Vector InPosition);// 0x4574c9c
	FString OnRegisterActorMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, Actor* FollowActor);// 0x4574b0c
	HUD_WorldMarkPanel* GetSelf();// 0x4574e3c

--------------------------------
Class: SolarCharacterAbility.SolarAbility.Actor.Object
	enum[] Conditions;//[Offset: 0x310, Size: 0x10]
	enum TriggerType;//[Offset: 0x320, Size: 0x1]
	float CoolDown;//[Offset: 0x324, Size: 0x4]
	int CharacterId;//[Offset: 0x328, Size: 0x4]
	int Level;//[Offset: 0x32c, Size: 0x4]
	int LevelOutside;//[Offset: 0x330, Size: 0x4]
	SolarCharacterAbilityCondition*[] ConditionInsts;//[Offset: 0x338, Size: 0x10]
	void UpdateParamsFromConfig();// 0x4c8f29c
	void UpdateParam(FString ParamKey, float ParamValue);// 0x46429f4
	void PrepareConfigData();// 0x4c8f29c
	static void GiveCharacterAbility(class SolarCharacterAbility AbilityClass, SolarCharacter* SolarCharacter);// 0x4642ae8

--------------------------------
Class: SolarCharacterAbilityCondition.Object

--------------------------------
Class: CharacterGameplayTagsConfig.DataAsset.Object
	GameplayTag CruiseAbilityTag;//[Offset: 0x30, Size: 0x8]
	GameplayTag SkydiveFlyAbilityTag;//[Offset: 0x38, Size: 0x8]
	GameplayTag SkydiveLandAbilityTag;//[Offset: 0x40, Size: 0x8]
	GameplayTag CrouchAbilityTag;//[Offset: 0x48, Size: 0x8]
	GameplayTag JumpAbilityTag;//[Offset: 0x50, Size: 0x8]
	GameplayTag SprintAbilityTag;//[Offset: 0x58, Size: 0x8]
	GameplayTag SwimAbilityTag;//[Offset: 0x60, Size: 0x8]
	GameplayTag VaultAbilityTag;//[Offset: 0x68, Size: 0x8]
	GameplayTag JetFlyVertAbilityTag;//[Offset: 0x70, Size: 0x8]
	GameplayTag JetFlyHoriAbilityTag;//[Offset: 0x78, Size: 0x8]
	GameplayTag LaunchAbilityTag;//[Offset: 0x80, Size: 0x8]
	GameplayTag EquipAbilityTag;//[Offset: 0x88, Size: 0x8]
	GameplayTag MeleeAbilityTag;//[Offset: 0x90, Size: 0x8]
	GameplayTag FireAbilityTag;//[Offset: 0x98, Size: 0x8]
	GameplayTag ReloadAbilityTag;//[Offset: 0xa0, Size: 0x8]
	GameplayTag BoltAbilityTag;//[Offset: 0xa8, Size: 0x8]
	GameplayTag OpenScopeAbilityTag;//[Offset: 0xb0, Size: 0x8]
	GameplayTag GetOnVehicleAbilityTag;//[Offset: 0xb8, Size: 0x8]
	GameplayTag GetOffVehicleAbilityTag;//[Offset: 0xc0, Size: 0x8]
	GameplayTag SwitchVehicleSeatAbilityTag;//[Offset: 0xc8, Size: 0x8]
	GameplayTag StickOutOffVehicleAbilityTag;//[Offset: 0xd0, Size: 0x8]
	GameplayTag TreatAbilityTag;//[Offset: 0xd8, Size: 0x8]
	GameplayTag RechargeShieldAbilityTag;//[Offset: 0xe0, Size: 0x8]
	GameplayTag OpenTreasureBoxAbilityTag;//[Offset: 0xe8, Size: 0x8]
	GameplayTag RepairVehicleAbilityTag;//[Offset: 0xf0, Size: 0x8]
	GameplayTag RescueAbilityTag;//[Offset: 0xf8, Size: 0x8]
	GameplayTag AutoPickUpAbilityTag;//[Offset: 0x100, Size: 0x8]
	GameplayTag DeathVergeAbilityTag;//[Offset: 0x108, Size: 0x8]
	GameplayTag DeathAbilityTag;//[Offset: 0x110, Size: 0x8]
	GameplayTag RebirthAbilityTag;//[Offset: 0x118, Size: 0x8]
	GameplayTag CruisingStatusTag;//[Offset: 0x120, Size: 0x8]
	GameplayTag WalkingStatusTag;//[Offset: 0x128, Size: 0x8]
	GameplayTag FallingStatusTag;//[Offset: 0x130, Size: 0x8]
	GameplayTag FlyingStatusTag;//[Offset: 0x138, Size: 0x8]
	GameplayTag SwimmingStatusTag;//[Offset: 0x140, Size: 0x8]
	GameplayTag SkydivingStatusTag;//[Offset: 0x148, Size: 0x8]
	GameplayTag VaultingStatusTag;//[Offset: 0x150, Size: 0x8]
	GameplayTag VaultingAcceptCancelTag;//[Offset: 0x158, Size: 0x8]
	GameplayTag LaunchStatusTag;//[Offset: 0x160, Size: 0x8]
	GameplayTag SprintingStatusTag;//[Offset: 0x168, Size: 0x8]
	GameplayTag MeleeAttackingStatusTag;//[Offset: 0x170, Size: 0x8]
	GameplayTag FiringStatusTag;//[Offset: 0x178, Size: 0x8]
	GameplayTag HiddenFireStatusTag;//[Offset: 0x180, Size: 0x8]
	GameplayTag BoltingStatusTag;//[Offset: 0x188, Size: 0x8]
	GameplayTag ReloadingStatusTag;//[Offset: 0x190, Size: 0x8]
	GameplayTag ScopeOpeningStatusTag;//[Offset: 0x198, Size: 0x8]
	GameplayTag OpeningTreasureBoxStatusTag;//[Offset: 0x1a0, Size: 0x8]
	GameplayTag RechargingShieldStatusTag;//[Offset: 0x1a8, Size: 0x8]
	GameplayTag RescuingStatusTag;//[Offset: 0x1b0, Size: 0x8]
	GameplayTag TreatingStatusTag;//[Offset: 0x1b8, Size: 0x8]
	GameplayTag DeathVergeStatusTag;//[Offset: 0x1c0, Size: 0x8]
	GameplayTag DeathStatusTag;//[Offset: 0x1c8, Size: 0x8]
	GameplayTag InhibitOpenScopeStatusTag;//[Offset: 0x1d0, Size: 0x8]
	GameplayTag InhibitWeaponInputStatusTag;//[Offset: 0x1d8, Size: 0x8]
	GameplayTag InhibitWeaponFireInputStatusTag;//[Offset: 0x1e0, Size: 0x8]
	GameplayTag InhibitMoveStatusTag;//[Offset: 0x1e8, Size: 0x8]
	GameplayTag InhibitUnCrouchStatusTag;//[Offset: 0x1f0, Size: 0x8]
	GameplayTag InhibitLeftHandWeaponAttachTag;//[Offset: 0x1f8, Size: 0x8]
	GameplayTag StartCruiseEventTag;//[Offset: 0x200, Size: 0x8]
	GameplayTag IntoParachuteZoneEventTag;//[Offset: 0x208, Size: 0x8]
	GameplayTag ForceParachuteEventTag;//[Offset: 0x210, Size: 0x8]
	GameplayTag FinishCruiseEventTag;//[Offset: 0x218, Size: 0x8]
	GameplayTag LaunchEventTag;//[Offset: 0x220, Size: 0x8]
	GameplayTag MeleeAttackEventTag;//[Offset: 0x228, Size: 0x8]
	GameplayTag FireEventTag;//[Offset: 0x230, Size: 0x8]
	GameplayTag BoltEventTag;//[Offset: 0x238, Size: 0x8]
	GameplayTag EquipEventTag;//[Offset: 0x240, Size: 0x8]
	GameplayTag PickUpEventTag;//[Offset: 0x248, Size: 0x8]
	GameplayTag AutoPickUpEventTag;//[Offset: 0x250, Size: 0x8]
	GameplayTag RepairVehicleEventTag;//[Offset: 0x258, Size: 0x8]
	GameplayTag DyingEventTag;//[Offset: 0x260, Size: 0x8]
	GameplayTag GottenOnVehicleEventTag;//[Offset: 0x268, Size: 0x8]
	GameplayTag GottenOffVehicleEventTag;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: SolarCharacterMovementComponent.SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x698, Size: 0x8]
	bool bKeepWalkSpeedOnTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a3, Size: 0x1]
	float MinJogSpeedScaleOnBlocked;//[Offset: 0x6a4, Size: 0x4]
	float MinRunSpeedScaleOnBlocked;//[Offset: 0x6a8, Size: 0x4]
	float MinSprintSpeedScaleOnBlocked;//[Offset: 0x6ac, Size: 0x4]
	float MinCrawlSpeedScaleOnBlocked;//[Offset: 0x6b0, Size: 0x4]
	float MinSwimSpeedScaleOnBlocked;//[Offset: 0x6b4, Size: 0x4]
	bool bOverrideFallingGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	float OverriddenFallingGravity;//[Offset: 0x6bc, Size: 0x4]
	float FallingHorizontalSpeedUpperLimit;//[Offset: 0x6c0, Size: 0x4]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x6c4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x6c8, Size: 0x1]
	float MinTimeToCorrectClientAfterForcedUpdate;//[Offset: 0x6cc, Size: 0x4]
	float MaxTimeToKeepCorrectingClientAfterForcedUpdate;//[Offset: 0x6d0, Size: 0x4]
	enum CurrentAirMoveMode;//[Offset: 0x6ee, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x6ef, Size: 0x1]
	CustomJumpParams CustomJumpParams;//[Offset: 0x6f0, Size: 0xc]
	CustomJumpParams CustomLaunchParams;//[Offset: 0x6fc, Size: 0xc]
	JetPackConfig* JetPackConfig;//[Offset: 0x718, Size: 0x8]
	SkydiveConfig* SkydiveConfig;//[Offset: 0x738, Size: 0x8]
	float HinderAngel;//[Offset: 0x774, Size: 0x4]
	float HinderPercent;//[Offset: 0x778, Size: 0x4]
	float HinderZ;//[Offset: 0x77c, Size: 0x4]
	float SwimSpeedWhenSprintLockConfig;//[Offset: 0x780, Size: 0x4]
	float SwimSpeedConfig;//[Offset: 0x784, Size: 0x4]
	float SwimSpeedSmoothSpeed;//[Offset: 0x788, Size: 0x4]
	float SwimMaxFloatingUpSpeed;//[Offset: 0x78c, Size: 0x4]
	float SwimMaxSinkingSpeed;//[Offset: 0x790, Size: 0x4]
	PhysicsVolume* NextPhysicsVolume;//[Offset: 0x794, Size: 0x8]
	bool bWantDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 0x1]
	float DeathVergeHalfHeight;//[Offset: 0x7a4, Size: 0x4]
	void SetHinderZ(float InHinderZ);// 0x464e6a4
	void SetHinderAngel(float InHinderAngel);// 0x464e748
	void OnMovementBaseChanged(Character* Character, PrimitiveComponent* OldBase, PrimitiveComponent* NewBase);// 0x464e858
	void HinderUphill(out const Vector SlopeNormal, out Vector MoveVelocity);// 0x464e5a0
	byte GetSteppedSurfaceType();// 0x464e7ec
	enum GetLastWalkMode();// 0x464e820
	enum GetCurrentWalkMode();// 0x464e83c

--------------------------------
Class: SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float SimStepOptimizedDist;//[Offset: 0x630, Size: 0x4]
	SolarClientAdjustPositionInfo CachedClientAdjustPositionInfo;//[Offset: 0x650, Size: 0x38]

--------------------------------
Class: SolarClientAdjustPositionInfo
	PrimitiveComponent* NewBase;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CustomJumpParams
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float JumpTime;//[Offset: 0x4, Size: 0x4]
	float JumpDelay;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: JetPackConfig.DataAsset.Object
	float AltitudeLimitation;//[Offset: 0x30, Size: 0x4]
	float DashHeightForLimitedAltitude;//[Offset: 0x34, Size: 0x4]
	float SlantDashInputThreshold;//[Offset: 0x38, Size: 0x4]
	float VerticalDashTime;//[Offset: 0x3c, Size: 0x4]
	float VerticalDashHeight;//[Offset: 0x40, Size: 0x4]
	float VerticalDashAngle;//[Offset: 0x44, Size: 0x4]
	float VerticalDashMaxHorizontalEndSpeed;//[Offset: 0x48, Size: 0x4]
	float VerticalDashBreakableTime;//[Offset: 0x4c, Size: 0x4]
	float VerticalDashCameraFadeOutTime;//[Offset: 0x50, Size: 0x4]
	float SlantDashTime;//[Offset: 0x54, Size: 0x4]
	float SlantDashHeight;//[Offset: 0x58, Size: 0x4]
	float SlantDashAngle;//[Offset: 0x5c, Size: 0x4]
	float SlantDashMaxHorizontalEndSpeed;//[Offset: 0x60, Size: 0x4]
	float SlantDashBreakableTime;//[Offset: 0x64, Size: 0x4]
	float SlantDashCameraFadeOutTime;//[Offset: 0x68, Size: 0x4]
	float HorizontalDashTime;//[Offset: 0x6c, Size: 0x4]
	float HorizontalDashDistance;//[Offset: 0x70, Size: 0x4]
	float HorizontalDashAngle;//[Offset: 0x74, Size: 0x4]
	float HorizontalDashEndSpeed;//[Offset: 0x78, Size: 0x4]
	float HorizontalDashBreakableTime;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashCameraFadeOutTime;//[Offset: 0x80, Size: 0x4]
	float UnderWaterHorizontalDashTime;//[Offset: 0x84, Size: 0x4]
	float UnderWaterHorizontalDashDistance;//[Offset: 0x88, Size: 0x4]
	float UnderWaterHorizontalDashBreakableTime;//[Offset: 0x8c, Size: 0x4]
	float UnderWaterHorizontalDashCameraFadeOutTime;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: SkydiveConfig.DataAsset.Object
	float DefaultFallingSpeed;//[Offset: 0x30, Size: 0x4]
	float MinFallingSpeed;//[Offset: 0x34, Size: 0x4]
	float FallingBrakingDeceleration;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve FlyingForwardPitchMappingCurve;//[Offset: 0x40, Size: 0x88]
	RuntimeFloatCurve MaxFlyingForwardSpeedCurve;//[Offset: 0xc8, Size: 0x88]
	float MaxFlyingSidewardSpeed;//[Offset: 0x150, Size: 0x4]
	float MaxFlyingAcceleration;//[Offset: 0x154, Size: 0x4]
	float MinFlyingBrakingDeceleration;//[Offset: 0x158, Size: 0x4]
	float MaxFlyingBrakingDeceleration;//[Offset: 0x15c, Size: 0x4]
	float FlyingRotationSmoothSpeedYaw;//[Offset: 0x160, Size: 0x4]
	float FlyingRotationSmoothSpeedPitch;//[Offset: 0x164, Size: 0x4]
	float FlyingRotationSmoothSpeedYawOnFollowing;//[Offset: 0x168, Size: 0x4]
	float FlyingRotationSmoothSpeedPitchOnFollowing;//[Offset: 0x16c, Size: 0x4]
	float LandingHeight;//[Offset: 0x170, Size: 0x4]
	float LandingFallingSpeed;//[Offset: 0x174, Size: 0x4]
	float LandingFallingBrakingDeceleration;//[Offset: 0x178, Size: 0x4]
	float LandingMaxFlyingSpeed;//[Offset: 0x17c, Size: 0x4]
	float LandingFlyingAcceleration;//[Offset: 0x180, Size: 0x4]
	FName[] LandingIgnoredActorTags;//[Offset: 0x188, Size: 0x10]
	Vector[] FollowFormation;//[Offset: 0x198, Size: 0x10]
	float SmoothTimeToCatchUpWithLeaderOnBeginning;//[Offset: 0x1a8, Size: 0x4]
	CharacterMovementNetworkOptions NetworkOptions;//[Offset: 0x1ac, Size: 0xc]
	CharacterMovementSimulationOptions SimulationOptions;//[Offset: 0x1b8, Size: 0x10]

--------------------------------
Class: CharacterMovementNetworkOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: CharacterMovementSimulationOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x4, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x8, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CruiseAssetSet.DataAsset.Object
	SoftClassPath CapsuleActorClass;//[Offset: 0x30, Size: 0x18]
	SoftClassPath[] CruiseAbilityClasses;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SolarCapsuleRoot.Actor.Object
	SceneComponent* RootComp;//[Offset: 0x238, Size: 0x8]
	WidgetComponent* LocationSign;//[Offset: 0x240, Size: 0x8]
	MiniMapAirlineData MiniMapData;//[Offset: 0x26c, Size: 0x2c]
	UsingAirlineData CurrentAirline;//[Offset: 0x298, Size: 0x40]
	int ForceParachuteWarningTime;//[Offset: 0x2d8, Size: 0x4]
	float MaxAllowedSmoothDistance;//[Offset: 0x2dc, Size: 0x4]
	float ClientSpeedScale;//[Offset: 0x2e0, Size: 0x4]
	float ClientRotationSmoothSpeed;//[Offset: 0x2e4, Size: 0x4]
	CapsuleFormationData* CapsuleFormationData;//[Offset: 0x318, Size: 0x8]
	<Vector,TeamFormationUnit> CruiseFormation;//[Offset: 0x320, Size: 0x50]
	BoarderInfo[] BoardingPlayerList;//[Offset: 0x370, Size: 0x10]
	void ServerUnBoardCharacter(SolarCharacter* Character);// 0x462572c
	void OnRep_MiniMapAirline();// 0x46258a4
	void OnRep_CurrentAirline();// 0x4625890
	static SolarCapsuleRoot* GetSolarCapsuleRoot(const Object* WorldContextObject);// 0x4625990
	float GetCruiseProgress();// 0x46258b8
	void ClientSmoothMove(float DeltaTime);// 0x46258ec
	int BoardingCharacter(out const BoarderInfo BoarderInfo);// 0x46257d0

--------------------------------
Class: BoarderInfo
	SolarCharacter* Boarder;//[Offset: 0x0, Size: 0x8]
	int BoarderTeamID;//[Offset: 0x8, Size: 0x4]
	int BoarderTeamSize;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UsingAirlineData
	int MapID;//[Offset: 0x0, Size: 0x4]
	Vector StartPoint;//[Offset: 0x4, Size: 0xc]
	Vector EndPoint;//[Offset: 0x10, Size: 0xc]
	Vector2D Direction;//[Offset: 0x1c, Size: 0x8]
	float Speed;//[Offset: 0x24, Size: 0x4]
	Vector CanParachutePoint;//[Offset: 0x28, Size: 0xc]
	Vector ForceParachutePoint;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CapsuleFormationData.DataAsset.Object
	<byte,EchelonFormation> TeamFormation;//[Offset: 0x30, Size: 0x50]
	CruiseFormation CruiseFormation;//[Offset: 0x80, Size: 0x10]
	void OverrideTeamFormation(out const <byte,EchelonFormation> InNewFormation);// 0x452ec70
	void ClearTeamFormationData();// 0x452ec5c
	void ClearCruiseFormationData();// 0x452eb84
	void AddTeamFormationLocation(const byte InEchelon, out const Vector InLocation);// 0x452ed78
	static void AddLocationToTeamFormation(out <byte,EchelonFormation> InFormation, const byte InEchelon, out const Vector InLocation);// 0x452e9f4
	void AddEchelonFormation(const byte InEchelon, out const EchelonFormation InFormation);// 0x452ee6c
	void AddCruiseFormation(out const CruiseFormation InFormation);// 0x452eb98

--------------------------------
Class: EchelonFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CruiseFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TeamFormationUnit
	<byte,EchelonFormationUnit> TeamFormation;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: EchelonFormationUnit
	BoardingSpotInfo[] EchelonFormation;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BoardingSpotInfo
	Vector SpotLocation;//[Offset: 0x0, Size: 0xc]
	SolarPlayerState* BoardingPlayer;//[Offset: 0x10, Size: 0x8]
	SolarPlayerState* LeaderPlayer;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CharacterCruiseComponent.ActorComponent.Object
	SolarCapsuleActor* BoardedCapsulePrivate;//[Offset: 0xb8, Size: 0x8]
	SolarCharacter* GetCharacterOwner();// 0x4546d68

--------------------------------
Class: SolarCapsuleActor.Actor.Object
	SoftObjectPath StartCruisingPath;//[Offset: 0x230, Size: 0x18]
	SoftObjectPath StopCruisingPath;//[Offset: 0x248, Size: 0x18]
	FName CruiseCharacterBindingName;//[Offset: 0x260, Size: 0x8]
	FName CruiseCapsuleBindingName;//[Offset: 0x268, Size: 0x8]
	FName CruiseCameraBindingName;//[Offset: 0x270, Size: 0x8]
	float SequenceCameraBlendDuration;//[Offset: 0x278, Size: 0x4]
	AnimationAsset* CapsuleCruisingLoopAnim;//[Offset: 0x280, Size: 0x8]
	AnimSequence* CharacterCruiseLoopAnim;//[Offset: 0x288, Size: 0x8]
	SoftObjectPath CapsuleCruisingStopAnimPath;//[Offset: 0x290, Size: 0x18]
	AnimSequence* CharacterCruiseEndAnim;//[Offset: 0x2a8, Size: 0x8]
	SkeletalMeshComponent* CapsuleSkeletalMesh;//[Offset: 0x2b0, Size: 0x8]
	StaticMeshComponent*[] AirflowMeshEffects;//[Offset: 0x2b8, Size: 0x10]
	ParticleSystemComponent*[] AirflowParticleEffects;//[Offset: 0x2c8, Size: 0x10]
	LevelSequenceActor* SequenceActor;//[Offset: 0x2d8, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x2e0, Size: 0x8]
	LevelSequence* StartCruisingSequence;//[Offset: 0x2e8, Size: 0x8]
	LevelSequence* StopCruisingSequence;//[Offset: 0x2f0, Size: 0x8]
	AnimationAsset* CapsuleCruisingEndAnim;//[Offset: 0x2f8, Size: 0x8]
	SolarCharacter* BoardedCharacterPrivate;//[Offset: 0x300, Size: 0x8]
	ParticleSystemComponent* CloudParticleComponent;//[Offset: 0x308, Size: 0x8]
	SoftObjectPath CloudParticlePath;//[Offset: 0x310, Size: 0x18]
	ParticleSystem* CloudParticleAsset;//[Offset: 0x348, Size: 0x8]
	void StopCruiseSequenceFinished();// 0x4624b2c
	void StartCruiseSequenceFinished();// 0x4624b40
	void PlayStopCruiseSequence();// 0x4624c60
	void PlayStopCruiseAnimation();// 0x4624c4c
	void PlayStartCruiseSequence();// 0x4624c88
	void PlayCruiseLoopAnimation();// 0x4624c74
	void HideCapsuleAirflowVFX();// 0x4624c38
	static SolarCapsuleActor* CreateCapsuleActorForBoarder(SolarCharacter* InBoarder, class SolarCapsuleActor CapsuleActorClass);// 0x4624b54

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x240, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x258, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x260, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x278, Size: 0x10]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x288, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x290, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x298, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a0, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a0, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2a8, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2b0, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	void ShowBurnin();// 0x5ebb93c
	void SetSequence(LevelSequence* InSequence);// 0x5ebbb9c
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x5ebb998
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x5ebba44
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x5ebb678
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x5ebb7c8
	void ResetBindings();// 0x5ebb124
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x5ebb138
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x5ebb200
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x5ebb2e4
	void OnLevelSequenceLoaded__DelegateSignature();// 0x4c8f29c
	LevelSequence* LoadSequence();// 0x5ebbc40
	void HideBurnin();// 0x5ebb950
	LevelSequencePlayer* GetSequencePlayer();// 0x5ebb964
	LevelSequence* GetSequence();// 0x5ebbc74
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x5ebaf64
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x5ebb060
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x5ebb3f0
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x5ebb520

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x888, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x5ebd7c0
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x5ebd7f8

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x408, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x418, Size: 0x10]
	delegate OnStop;//[Offset: 0x428, Size: 0x10]
	delegate OnPause;//[Offset: 0x438, Size: 0x10]
	delegate OnFinished;//[Offset: 0x448, Size: 0x10]
	byte Status;//[Offset: 0x458, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x468, Size: 0x4]
	int DurationFrames;//[Offset: 0x46c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x470, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 0x320]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 0x10]
	void StopAtCurrentTime();// 0x5a8a344
	void Stop();// 0x5a8a358
	void SetTimeRange(float StartTime, float Duration);// 0x5a89ba4
	void SetPlayRate(float PlayRate);// 0x5a89418
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x5a89fbc
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x5a8a0a0
	void SetFrameRate(FrameRate FrameRate);// 0x5a89db4
	void SetFrameRange(int StartFrame, int Duration);// 0x5a89c88
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x5a89364
	void ScrubToSeconds(float TimeInSeconds);// 0x5a89870
	bool ScrubToMarkedFrame(FString InLabel);// 0x5a89654
	void ScrubToFrame(FrameTime NewPosition);// 0x5a89a5c
	void Scrub();// 0x5a8a36c
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x5a88f94
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x5a89040
	void PlayToSeconds(float TimeInSeconds);// 0x5a89914
	bool PlayToMarkedFrame(FString InLabel);// 0x5a89710
	void PlayToFrame(FrameTime NewPosition);// 0x5a89b00
	void PlayReverse();// 0x5a8a44c
	void PlayLooping(int NumLoops);// 0x5a8a394
	void Play();// 0x5a8a460
	void Pause();// 0x5a8a380
	void JumpToSeconds(float TimeInSeconds);// 0x5a897cc
	void JumpToPosition(float NewPlaybackPosition);// 0x5a89f18
	bool JumpToMarkedFrame(FString InLabel);// 0x5a89598
	void JumpToFrame(FrameTime NewPosition);// 0x5a899b8
	bool IsReversed();// 0x5a894f0
	bool IsPlaying();// 0x5a89560
	bool IsPaused();// 0x5a89528
	void GoToEndAndStop();// 0x5a8a330
	QualifiedFrameTime GetStartTime();// 0x5a89d94
	float GetPlayRate();// 0x5a894bc
	float GetPlaybackStart();// 0x5a8a204
	float GetPlaybackPosition();// 0x5a8a288
	float GetPlaybackEnd();// 0x5a8a1a8
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x5a89130
	float GetLength();// 0x5a8a254
	FrameRate GetFrameRate();// 0x5a89e60
	int GetFrameDuration();// 0x5a89e7c
	QualifiedFrameTime GetEndTime();// 0x5a89d6c
	QualifiedFrameTime GetDuration();// 0x5a89eb0
	bool GetDisableCameraCuts();// 0x5a89344
	QualifiedFrameTime GetCurrentTime();// 0x5a89ee4
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x5a89228
	void ChangePlaybackDirection();// 0x5a8a438

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x5eb9e80
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x5eb9fa8
	Object* FindMetaDataByClass(class Object InClass);// 0x5eba044
	Object* CopyMetaData(Object* InMetaData);// 0x5eb9f0c

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x5ebaad0

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x250, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x308, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x4c8f29c
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x5ebca4c

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7d0, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x5cdde80

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x880, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x88c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x898, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x8b0, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x908, Size: 0x4]
	float CurrentAperture;//[Offset: 0x90c, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x910, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x920, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x930, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x940, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0x950, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0x960, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0x970, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x974, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x5cdeadc
	void SetFilmbackPresetByName(FString InPresetName);// 0x5cdec3c
	void SetCurrentFocalLength(out const float InFocalLength);// 0x5cdeef0
	float GetVerticalFieldOfView();// 0x5cdee88
	static NamedLensPreset[] GetLensPresetsCopy();// 0x5cde9c4
	FString GetLensPresetName();// 0x5cdeb8c
	float GetHorizontalFieldOfView();// 0x5cdeebc
	FString GetFilmbackPresetName();// 0x5cdedd8
	FString GetDefaultFilmbackPresetName();// 0x5cdecec

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: SkydivingEffectPreset
	ParticleSystem* EffectResource;//[Offset: 0x0, Size: 0x28]
	Transform AttachmentOffset;//[Offset: 0x30, Size: 0x30]
	FName AttachmentSocket;//[Offset: 0x60, Size: 0x8]
	enum Lifetime;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x230, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	void OnRep_bEnabled();// 0x6806070

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableFarlightMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	SLDistanceFogData DistanceFogData_M;//[Offset: 0x298, Size: 0x18]
	SLHeightFogData HeightFogData_M;//[Offset: 0x2b0, Size: 0x10]
	SLDirectionalLightScattering ScatteringData_M;//[Offset: 0x2c0, Size: 0x20]
	LinearColor FogColor_M;//[Offset: 0x2e0, Size: 0x10]
	float FogDensity;//[Offset: 0x2f0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x2f4, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x2f8, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x304, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x318, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x320, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x324, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x334, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x338, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x33c, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x340, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x344, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x354, Size: 0x4]
	float StartDistance;//[Offset: 0x358, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x35c, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x364, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x368, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x36c, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x37c, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x380, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x384, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x6806b54
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x6806ab0
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x680696c
	void SetVolumetricFogDistance(float NewValue);// 0x68068c8
	void SetVolumetricFogAlbedo(Color NewValue);// 0x6806a10
	void SetVolumetricFog(bool bNewValue);// 0x6806bf8
	void SetStartDistance(float Value);// 0x6806d48
	void SetSecondFogData_FogHeightOffset(float Value);// 0x680759c
	void SetSecondFogData_FogHeightFalloff(float Value);// 0x6807640
	void SetSecondFogData_FogDensity(float Value);// 0x68076e4
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x68071c4
	void SetInscatteringTextureTint(LinearColor Value);// 0x6807120
	void SetInscatteringColorCubemapAngle(float Value);// 0x680730c
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x68073b0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x6807268
	void SetFogMaxOpacity(float Value);// 0x6806dec
	void SetFogInscatteringColor(LinearColor Value);// 0x6807454
	void SetFogHeightFalloff(float Value);// 0x6806e90
	void SetFogDensity(float Value);// 0x68074f8
	void SetFogCutoffDistance(float Value);// 0x6806ca4
	void SetDirectionalInscatteringStartDistance(float Value);// 0x6806fd8
	void SetDirectionalInscatteringExponent(float Value);// 0x680707c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x6806f34
	void Set_HStartDistance(float _HStartDistance);// 0x6807c04
	void Set_HMaxFadingDistance(float _HMaxFadingDistance);// 0x6807b60
	void Set_HFogHeight(float _HFogHeight);// 0x6807d4c
	void Set_HFogFallOff(float _HFogFallOff);// 0x6807ca8
	void Set_FogColor_M(LinearColor _FogColor_M);// 0x6807788
	void Set_DStartDistance(float _DStartDistance);// 0x6807df0
	void Set_DMaxOpacity(float _DMaxOpacity);// 0x6807e94
	void Set_DMaxDistance(float _DMaxDistance);// 0x6807fdc
	void Set_DirectionalInscatteringStartDistance_M(float _DirectionalInscatteringStartDistance_M);// 0x6807a18
	void Set_DirectionalInscatteringMaxDistance_M(float _DirectionalInscatteringMaxDistance_M);// 0x6807974
	void Set_DirectionalInscatteringGamma_M(float _DirectionalInscatteringGamma_M);// 0x680782c
	void Set_DirectionalInscatteringExponent_M(float _DirectionalInscatteringExponent_M);// 0x6807abc
	void Set_DirectionalInscatteringColor_M(LinearColor _DirectionalInscatteringColor_M);// 0x68078d0
	void Set_DFogHeight(float _DFogHeight);// 0x6808124
	void Set_DFogGamma(float _DFogGamma);// 0x6807f38
	void Set_DFogFallOff(float _DFogFallOff);// 0x6808080

--------------------------------
Class: SLDistanceFogData
	float DFogHeight;//[Offset: 0x0, Size: 0x4]
	float DFogFallOff;//[Offset: 0x4, Size: 0x4]
	float DMaxDistance;//[Offset: 0x8, Size: 0x4]
	float DFogGamma;//[Offset: 0xc, Size: 0x4]
	float DMaxOpacity;//[Offset: 0x10, Size: 0x4]
	float DStartDistance;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SLHeightFogData
	float HFogHeight;//[Offset: 0x0, Size: 0x4]
	float HFogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float HStartDistance;//[Offset: 0x8, Size: 0x4]
	float HMaxFadingDistance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SLDirectionalLightScattering
	float DirectionalInscatteringExponent_M;//[Offset: 0x0, Size: 0x4]
	float DirectionalInscatteringStartDistance_M;//[Offset: 0x4, Size: 0x4]
	float DirectionalInscatteringMaxDistance_M;//[Offset: 0x8, Size: 0x4]
	LinearColor DirectionalInscatteringColor_M;//[Offset: 0xc, Size: 0x10]
	float DirectionalInscatteringGamma_M;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarPointDamageEvent.PointDamageEvent.DamageEvent
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bIgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float ActualShieldDamage;//[Offset: 0xac, Size: 0x4]
	bool bBreakArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIgnoreArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float ActualArmorDamage;//[Offset: 0xb4, Size: 0x4]
	byte SolarAttributeType;//[Offset: 0xb8, Size: 0x1]
	bool bPreFakeInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	byte HealthChangeType;//[Offset: 0xba, Size: 0x1]
	SolarAbility* DamageAbility;//[Offset: 0xc0, Size: 0x8]
	SolarAbilityEffect* DamageAbilityEffect;//[Offset: 0xc8, Size: 0x8]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCanDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	int UseWeaponID;//[Offset: 0xd4, Size: 0x4]
	enum DamageType;//[Offset: 0xd8, Size: 0x1]
	Actor* DamageCauser;//[Offset: 0xdc, Size: 0x8]
	FString HitBoneName;//[Offset: 0xf0, Size: 0x10]
	bool bHitVehicleWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bHitHumanoidTargetHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	enum BattleState;//[Offset: 0x7a0, Size: 0x1]
	enum PlayerOutType;//[Offset: 0x7a1, Size: 0x1]
	enum PlayerType;//[Offset: 0x7a2, Size: 0x1]
	SCMReplicateHostData[] ReplicateData;//[Offset: 0x7b8, Size: 0x10]
	void UpDateDataManager(const SCMReplicateHostData[] ReplicateData, bool bInit);// 0x45ae52c
	void ServerBeginSpectate(SCMPlayerState* TargetPlayer);// 0x45ae974
	void OnRep_BattleState();// 0x45ae800
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x4c8f29c
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x4c8f29c
	void NotifyUpdateCGMData(FString InDataName);// 0x45ae750
	void NotifyClientUpdateDataManager(bool bInit);// 0x45ae480
	bool NeedConsiderRepData();// 0x45ae710
	SCMReplicateHostData[] GetReplicateDataArray();// 0x45ae654
	SCMPlayerState*[] GetMySidePlayerList();// 0x45ae8c4
	SCMPlayerState*[] GetMySideJobPlayerList();// 0x45ae814

--------------------------------
Class: SCMReplicateHostData
	enum HostType;//[Offset: 0x0, Size: 0x1]
	FString HostID;//[Offset: 0x8, Size: 0x10]
	SCMRepData[] RepDataArray;//[Offset: 0x18, Size: 0x10]
	SCMRepDataArray[] RepArrDataArray;//[Offset: 0x28, Size: 0x10]
	SCMRepDataMap[] RepMapDataArray;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SCMRepData
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum DataChangeType;//[Offset: 0x11, Size: 0x1]
	int VInt;//[Offset: 0x14, Size: 0x4]
	float VFloat;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantize100 VVector;//[Offset: 0x1c, Size: 0xc]
	FString VString;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SCMRepDataArray
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SCMRepDataMap
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	FString[] KeyArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SolarVehiclePawn.Pawn.Actor.Object
	PrimitiveComponent* VehicleRoot;//[Offset: 0x2b8, Size: 0x8]
	SkeletalMeshComponentBudgeted* VehicleMesh;//[Offset: 0x2c0, Size: 0x8]
	bool bVehicleMeshAggregationTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	class SkeletalMeshComponentBudgeted* VehicleStencilClass;//[Offset: 0x2d0, Size: 0x28]
	SkeletalMeshComponentBudgeted* VehicleStencilNew;//[Offset: 0x2f8, Size: 0x8]
	SolarNetMovementComponent* NetMovementComponent;//[Offset: 0x300, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x308, Size: 0x8]
	SolarVehicleAbilitySystemComponent* VehicleAbilitySystem;//[Offset: 0x310, Size: 0x8]
	SolarVehicleSpringArmComponent* SpringArmComponent;//[Offset: 0x318, Size: 0x8]
	SolarVehicleCameraComponent* CameraComponent;//[Offset: 0x320, Size: 0x8]
	SolarVehicleAttributeSet* VehicleAttributeSet;//[Offset: 0x328, Size: 0x8]
	BasedMovement BasedMovement;//[Offset: 0x330, Size: 0x28]
	VehicleSeatSlot[] SeatSlots;//[Offset: 0x358, Size: 0x10]
	int HealthUIID;//[Offset: 0x368, Size: 0x4]
	float VehicleInteractionRadius;//[Offset: 0x36c, Size: 0x4]
	Vector OutVehicleOffset;//[Offset: 0x370, Size: 0xc]
	float WaterDraftDepth;//[Offset: 0x37c, Size: 0x4]
	float CarpadProtectTime;//[Offset: 0x380, Size: 0x4]
	float CarPadAccelerationMultiplier;//[Offset: 0x384, Size: 0x4]
	Vector2D[] DropPassengerOffset;//[Offset: 0x388, Size: 0x10]
	float BottomHeighten;//[Offset: 0x398, Size: 0x4]
	Vector[] DropPassengerLocations;//[Offset: 0x3a0, Size: 0x10]
	Vector DropPassengerAtTop;//[Offset: 0x3b0, Size: 0xc]
	Vector DamageBoxLocation;//[Offset: 0x3bc, Size: 0xc]
	Vector DamageBoxExtent;//[Offset: 0x3c8, Size: 0xc]
	float VehicleMaxSpeedOnUI;//[Offset: 0x3d4, Size: 0x4]
	enum VehicleControlUIType;//[Offset: 0x3d8, Size: 0x1]
	enum VehicleAnimationType;//[Offset: 0x3d9, Size: 0x1]
	VehicleVFX NosCameraVFX;//[Offset: 0x3e0, Size: 0x90]
	float NOSCameraEffectAngle;//[Offset: 0x470, Size: 0x4]
	<byte,ParticleSystem*> RaiseDustEffects;//[Offset: 0x478, Size: 0x50]
	VehicleVFX[] NosVFXes;//[Offset: 0x4c8, Size: 0x10]
	float SpeedThresholdForCollidingDamage;//[Offset: 0x4d8, Size: 0x4]
	float SpeedThresholdForStandingOn;//[Offset: 0x4dc, Size: 0x4]
	float SpeedThresholdForGetOnVehicle;//[Offset: 0x4e0, Size: 0x4]
	ParticleSystem* EnterWaterVFX;//[Offset: 0x4e8, Size: 0x28]
	float SprayVelocity;//[Offset: 0x588, Size: 0x4]
	float HeavyInSpeed;//[Offset: 0x58c, Size: 0x4]
	float CriticalAngle;//[Offset: 0x590, Size: 0x4]
	Vector OffsetBasedVechileLoction;//[Offset: 0x594, Size: 0xc]
	float CollisionSparkThreshold;//[Offset: 0x5a0, Size: 0x4]
	ParticleSystem* CollisionSparkParticle;//[Offset: 0x5a8, Size: 0x28]
	FName CollisionSparkParamNowel;//[Offset: 0x5d0, Size: 0x8]
	FName CollisionSparkParamQuantity;//[Offset: 0x5d8, Size: 0x8]
	float VehicleSpeedThresholdToPlayVFX;//[Offset: 0x5e0, Size: 0x4]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel;//[Offset: 0x5e8, Size: 0x88]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity;//[Offset: 0x670, Size: 0x88]
	VehicleVFX SpeedParticle;//[Offset: 0x700, Size: 0x90]
	VehicleVFXMesh[] DriverOnVFXMeshes;//[Offset: 0x790, Size: 0x10]
	Vector SpawnOffset;//[Offset: 0x7a0, Size: 0xc]
	SeatCameraSetting DefaultCameraSetting;//[Offset: 0x7ac, Size: 0x30]
	RuntimeFloatCurve CameraFovCurve;//[Offset: 0x7e0, Size: 0x88]
	float CameraFovInterpSpeed;//[Offset: 0x868, Size: 0x4]
	RuntimeFloatCurve CameraDistanceMultiplierCurve;//[Offset: 0x870, Size: 0x88]
	float CameraDistanceInterpSpeed;//[Offset: 0x8f8, Size: 0x4]
	bool bCameraFollowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 0x1]
	RuntimeFloatCurve CameraFollowSpeedCurve;//[Offset: 0x900, Size: 0x88]
	float CameraFollowTimeThreshold;//[Offset: 0x988, Size: 0x4]
	float CamearResetFollowSpeed;//[Offset: 0x98c, Size: 0x4]
	float CameraFollowSpeedThreshold;//[Offset: 0x990, Size: 0x4]
	RuntimeFloatCurve CameraZLagSpeedCurve;//[Offset: 0x998, Size: 0x88]
	float CameraZLagMaxDistance;//[Offset: 0xa20, Size: 0x4]
	bool bResetTargetPitchOffsetBasedOnVehicleOnCameralNormalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	float MaxSpeedDecelerationRate;//[Offset: 0xa28, Size: 0x4]
	<enum,SolarVehicleLampData> MapVehicleLampData;//[Offset: 0xa30, Size: 0x50]
	SolarVehicleSoundDataAsset* VehicleSoundDataAsset;//[Offset: 0xa80, Size: 0x8]
	class GameplayEffect* DefaultAttributes;//[Offset: 0xa88, Size: 0x8]
	class GameplayEffect* CanDriveEffect;//[Offset: 0xa90, Size: 0x8]
	class GameplayEffect* CanGetOnEffect;//[Offset: 0xa98, Size: 0x8]
	class GameplayEffect* UnderWaterEffect;//[Offset: 0xaa0, Size: 0x8]
	class SolarAbility* ExplosionAbilityClass;//[Offset: 0xaa8, Size: 0x8]
	VehicleVFX ExplosionVFX;//[Offset: 0xab0, Size: 0x90]
	VehicleVFXMesh VehicleBrokenMesh;//[Offset: 0xb40, Size: 0x70]
	VehicleVFX VehicleDamagedVFXs;//[Offset: 0xbb0, Size: 0x90]
	class GameplayEffect* VehicleDamageStatusEffects;//[Offset: 0xe80, Size: 0x8]
	int MaxLodLevelForUpdateVisual;//[Offset: 0xea8, Size: 0x4]
	VehicleWeakPointSpec[] VehicleWeakPointContainer;//[Offset: 0xeb0, Size: 0x10]
	PrimitiveComponent* PlatformComponent;//[Offset: 0xec0, Size: 0x8]
	bool bCanStandOnPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 0x1]
	float DistanceThresholdForAttachPlatform;//[Offset: 0xecc, Size: 0x4]
	float DegreeThresholdForAttachPlatform;//[Offset: 0xed0, Size: 0x4]
	class SolarAbility* CollideDamageAbility;//[Offset: 0xed8, Size: 0x8]
	bool bHitDamageToSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 0x1]
	float SelfCrashDamageRate;//[Offset: 0xee4, Size: 0x4]
	float PassengerDamageRatio;//[Offset: 0xee8, Size: 0x4]
	float MinPlayerDamageVelocity;//[Offset: 0xeec, Size: 0x4]
	float CollidedCharacterDmgRatio;//[Offset: 0xef0, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0xef4, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0xef8, Size: 0x8]
	float CollidePushUpAngle;//[Offset: 0xf00, Size: 0x4]
	float CharacterProtectTime;//[Offset: 0xf04, Size: 0x4]
	bool bRemoveStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf14, Size: 0x1]
	Vector_NetQuantize RepLocation;//[Offset: 0xf18, Size: 0xc]
	SphereComponent* VehicleInteractionZone;//[Offset: 0xf28, Size: 0x8]
	float WaterLineHeight;//[Offset: 0xf34, Size: 0x4]
	CarPadSpeedData[] CarPadSpeedsDatas;//[Offset: 0xf38, Size: 0x10]
	int MovementForbidPreSpeed;//[Offset: 0xf48, Size: 0x4]
	bool IsLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 0x1]
	delegate OnPlayerGetOnVehicle;//[Offset: 0xf80, Size: 0x1]
	delegate OnPlayerGetOffVehicle;//[Offset: 0xf81, Size: 0x1]
	int[] OccupiedSeats;//[Offset: 0x1090, Size: 0x10]
	Vector_NetQuantizeNormal ReplicatedPlayerInputVector;//[Offset: 0x10a0, Size: 0xc]
	int VehicleID;//[Offset: 0x10ac, Size: 0x4]
	Actor*[] ActorsOnPlatform;//[Offset: 0x1148, Size: 0x10]
	byte CurPlayerInputMask;//[Offset: 0x1179, Size: 0x1]
	byte ReplicatedPlayerInputMask;//[Offset: 0x117a, Size: 0x1]
	int SkinId;//[Offset: 0x1208, Size: 0x4]
	AbilityCooldownTimer[] ActivedAbilityCooldownArray;//[Offset: 0x1220, Size: 0x10]
	byte CurrentDamageStatus;//[Offset: 0x1230, Size: 0x1]
	bool bVehicleBurningStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1231, Size: 0x1]
	void WeakPointStateChanged(byte WeakPointID);// 0x48488b0
	void StatVehicleCollision(Vector PreVelocity, Vector CurVelocity);// 0x4847fdc
	void StatVehicleAutoMove(int MoveTime);// 0x48480c8
	void SetWeakPointHealth(byte WeakPointID, float InHealth);// 0x4848954
	void SetVehicleId(int InID);// 0x48490b0
	void SetPlayerInputVector(bool bFreeLook, out const Vector2D InputVector, float CameraYaw);// 0x4849454
	void SetCurrentHealth(float InHealth);// 0x48475d8
	void SetCrossCarpad(Actor* InCarpad);// 0x48487f8
	void SetAllWeakPointToNewState(enum NewWeakPointState);// 0x4848a3c
	void ServerSetPlayerInputVector(const Vector_NetQuantizeNormal InputVector);// 0x4848384
	void ServerSetPlayerInputMask(byte InCurPlayerInputMask);// 0x48482d8
	void ServerSendsTransformToEveryoneWithMovementBase(const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4847424
	void ServerSendsTransformToEveryone(const byte[] Value);// 0x4847520
	void ServerSendsTeleportStateToEveryone(const Vector_NetQuantize InLocation, const Vector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp);// 0x48470c0
	void ServerDrawActorLocationAndRotationOnClient(const Vector InLocation, const Rotator InRotator);// 0x4846fdc
	void ServerApplyVehicleSkin(int InSkinID);// 0x4847e78
	void ServerApplyDamageToVehilceAndPassenger(Actor* OtherActor, float DamageToSelf, float DamageToOther, const Vector HitLocation);// 0x484816c
	void ServerApplyAbilityDamageToTargets(const Pawn*[] Targets, GameplayAbilitySpecHandle AbilityHandle);// 0x4848c14
	void RemoveSeatSlot(byte SeatIndex);// 0x4849184
	void ReleaseDamagedStatusVFX(byte InDamagedStatus);// 0x4847750
	void PlayVehicleEjectSound(SolarCharacter* ejectedCharacter);// 0x4847f24
	void PlaySpeedboardSound();// 0x4847fc8
	void PlayDamagedStatusVFX(byte InDamagedStatus);// 0x48477f4
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x484842c
	void OnStencilLoaded();// 0x484889c
	void OnRep_WeakPointHealthOrStateChanged(VehicleWeakPointSpec[] OldVehicleWeakPointDatas);// 0x48485fc
	void OnRep_WaterLineHeight();// 0x484959c
	void OnRep_VehicleBurning();// 0x48478c8
	void OnRep_SkinId();// 0x4847dc0
	void OnRep_ReplicatedPlayerInputMask(byte OldReplicatedPlayerInputMask);// 0x4848754
	void OnRep_RemoveStencil();// 0x48495b0
	bool IsVehicleFullHealth();// 0x4847718
	bool IsVehicleDangerous();// 0x4848bec
	bool IsVehicleBroken();// 0x4848bc4
	bool IsTeammateWith(const Pawn* Pawn);// 0x4848f2c
	bool IsManuallyCancelAbilityActive(byte SeatIndex);// 0x4847b2c
	bool IsExistEnemy(const SolarCharacter* Character);// 0x484933c
	bool IsAbilityActive(byte SeatIndex, byte AbilityIndex);// 0x4847bdc
	bool InSameTeam();// 0x4848fdc
	bool HasAbilityActive(byte SeatIndex);// 0x4847a7c
	VehicleWeakPointSpec[] GetVehicleWeakPoints();// 0x4848ae0
	int GetVehicleTypeID();// 0x4849048
	byte GetVehicleTeamId();// 0x4849014
	PhysicalMaterial* GetVehicleRootPhysMaterial();// 0x4849420
	int GetVehicleGroupID();// 0x484907c
	SolarVehicleAnimInstance* GetVehicleAnimInstance();// 0x48493ec
	float GetSpeedInKmh();// 0x48495d8
	float GetSpeed();// 0x4849624
	Vector GetSpawnOffset();// 0x4848ba0
	Vector2D GetPlayerInputVector();// 0x4849308
	int GetPassengerCount();// 0x4849150
	int GetNextVacantSeat(int InCurrentSeatIndex);// 0x484925c
	float GetMaxHealth();// 0x48476b0
	int GetManuallyCancelAbilityIndex(byte SeatIndex);// 0x48479d0
	int GetHealthPercentInt();// 0x484767c
	SolarCharacter* GetDriverCharacter();// 0x4849228
	float GetCurrentHealth();// 0x48476e4
	float GetAbilityCostEnergy(byte SeatIndex, byte AbilityIndex);// 0x4847cd0
	bool DoesAbilitySatisfyTagRequirements(int CurSeatIndex, byte AbilityIndex);// 0x4846ee8
	void DeleteStencilMesh();// 0x48495c4
	void ClientVehicleExplosion();// 0x4847898
	void ClientVehicleBroken();// 0x48478ac
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x48471e8
	void ClientSendsTransformToServer(float DriverLocalTime, const byte[] Value);// 0x4847328
	bool CheckUpdateVisual();// 0x4846e00
	bool CheckOpenParticleOptimization(int Bias);// 0x4846e38
	bool CanActivateAbility(byte SeatIndex, byte AbilityIndex);// 0x48478dc
	void ApplySkinFromCDO(SolarVehiclePawn* SkinVehiclePawnCDO);// 0x4847dd4
	byte AddSeatSlot(out const VehicleSeatSlot SeatSlot);// 0x4848d18

--------------------------------
Class: VehicleWeakPointSpec
	float CurrentHealth;//[Offset: 0x0, Size: 0x4]
	enum CurrentState;//[Offset: 0x4, Size: 0x1]
	byte WeakPointID;//[Offset: 0x5, Size: 0x1]
	enum LastState;//[Offset: 0x6, Size: 0x1]
	FName[] WeakPointSockets;//[Offset: 0x8, Size: 0x10]
	StaticMesh* WeakPointStaticMesh;//[Offset: 0x18, Size: 0x28]
	Transform WeakPointRelativeTransform;//[Offset: 0x40, Size: 0x30]
	SolarVehicleWeakPointComponent* WeakPointMeshComponent;//[Offset: 0x70, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x78, Size: 0x8]
	float MaxWeakPointHealth;//[Offset: 0x80, Size: 0x4]
	float RepairCostEnergy;//[Offset: 0x84, Size: 0x4]
	float RepairDuration;//[Offset: 0x88, Size: 0x4]
	bool bRecoverBoneScaleAfterVFXFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	class GameplayEffect* BrokenEffect;//[Offset: 0xd0, Size: 0x8]
	float FacingAngle;//[Offset: 0xe0, Size: 0x4]
	float DistFromCharacterToWeakPoint;//[Offset: 0xe4, Size: 0x4]

--------------------------------
Class: SolarVehicleWeakPointComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SolarVehicleAnimInstance.AnimInstance.Object
	Rotator VehicleRudderRotator;//[Offset: 0x268, Size: 0xc]
	Vector2D VehicleAnimationPosition;//[Offset: 0x274, Size: 0x8]
	float VehicleAnimationSize;//[Offset: 0x27c, Size: 0x4]
	float VehicleRotationValue;//[Offset: 0x280, Size: 0x4]
	float VehicleRotationPercent;//[Offset: 0x284, Size: 0x4]
	float VehicleCameraYaw;//[Offset: 0x288, Size: 0x4]
	float VehicleCameraPitch;//[Offset: 0x28c, Size: 0x4]
	Rotator VehicleWeaponPitchRot;//[Offset: 0x290, Size: 0xc]
	Rotator VehicleWeaponYawRot;//[Offset: 0x29c, Size: 0xc]
	bool bWithDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool bAbilityActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	float Speed;//[Offset: 0x2ac, Size: 0x4]
	float VelocityDegree;//[Offset: 0x2b0, Size: 0x4]
	AnimMontage* SelfRepairMontage;//[Offset: 0x2b8, Size: 0x8]
	void SetSelfRepairTrigger(bool bTrigger);// 0x4842b14

--------------------------------
Class: VehicleSeatSlot
	FName SeatSocketName;//[Offset: 0x0, Size: 0x8]
	FName SeatWeaponSocket;//[Offset: 0x8, Size: 0x8]
	bool bDisplayBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverrideCameraSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	SeatCameraSetting SeatCameraSetting;//[Offset: 0x14, Size: 0x30]
	bool SeatStickOutEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	OutVehicleShootSetting OutVehicleShotSetting;//[Offset: 0x48, Size: 0xc8]
	VehicleSeatAbility[] VechicleAbilities;//[Offset: 0x110, Size: 0x10]
	class SolarVehicleWeapon* VehicleWeaponClass;//[Offset: 0x120, Size: 0x8]
	VehicleSeatWeaponSkinInfo VehicleSeatWeaponSkinInfo;//[Offset: 0x128, Size: 0x20]
	bool bAutoEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	Texture2D* SeatDisplayIcon;//[Offset: 0x150, Size: 0x8]
	Rotator EjectRotation;//[Offset: 0x158, Size: 0xc]
	float EjectForce;//[Offset: 0x164, Size: 0x4]
	SolarCharacter* SeatPassenger;//[Offset: 0x168, Size: 0x8]
	SolarVehicleWeapon* SeatWeapon;//[Offset: 0x170, Size: 0x8]

--------------------------------
Class: SeatCameraSetting
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	Vector OffsetToTarget;//[Offset: 0x4, Size: 0xc]
	Vector OffsetToTargetForTrace;//[Offset: 0x10, Size: 0xc]
	float DefaultPitch;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float MinYaw;//[Offset: 0x28, Size: 0x4]
	float MaxYaw;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: OutVehicleShootSetting
	Vector OutShotCameraOffset;//[Offset: 0x0, Size: 0xc]
	Rotator OutShotCameraRotation;//[Offset: 0xc, Size: 0xc]
	Vector2D OutShotCameraYawLimite;//[Offset: 0x18, Size: 0x8]
	CurveFloat* OutShotPitchLimiteCurve;//[Offset: 0x20, Size: 0x8]
	Vector ShotAimCameraOffset;//[Offset: 0x28, Size: 0xc]
	RuntimeFloatCurve ShotAimCameraFovCurve;//[Offset: 0x38, Size: 0x88]
	float OutShotBlendTime;//[Offset: 0xc0, Size: 0x4]
	float ShotAimBlendTime;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: VehicleSeatAbility
	class SolarVehicleGameplayAbility* AbilityClass;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle ServerOrDriverAbilityHandle;//[Offset: 0x8, Size: 0x4]
	GameplayAbilitySpecHandle SkinPreAbilityHandle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarVehicleGameplayAbility.GameplayAbility.Object
	bool bCancelAfterVacateSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bCancelManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x400, Size: 0x20]
	bool bCheckInstigatorBeforeActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bActivateAbilityOnGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	float DurationTime;//[Offset: 0x424, Size: 0x4]
	class GameplayEffect* ActivateEffect;//[Offset: 0x428, Size: 0x8]
	Texture2D* AbilityIcon;//[Offset: 0x430, Size: 0x28]
	float CostEnergy;//[Offset: 0x458, Size: 0x4]
	float DamageToVehicle;//[Offset: 0x45c, Size: 0x4]
	float DamageToCharacter;//[Offset: 0x460, Size: 0x4]
	SolarVehiclePawn* GetVehiclePawn();// 0x484fb80

--------------------------------
Class: SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MaxWeaponPitch;//[Offset: 0x914, Size: 0x4]
	float MinWeaponPitch;//[Offset: 0x918, Size: 0x4]
	float MaxWeaponYaw;//[Offset: 0x91c, Size: 0x4]
	float MinWeaponYaw;//[Offset: 0x920, Size: 0x4]
	float PitchFollowSpeed;//[Offset: 0x924, Size: 0x4]
	float YawFollowSpeed;//[Offset: 0x928, Size: 0x4]
	bool bHasScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92c, Size: 0x1]
	bool bHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92d, Size: 0x1]
	Vector ScopeCameraOffset;//[Offset: 0x930, Size: 0xc]
	float ScopeCameraDistance;//[Offset: 0x93c, Size: 0x4]
	float ScopeBlendTime;//[Offset: 0x940, Size: 0x4]
	float[] ScopeFOVMultipliers;//[Offset: 0x948, Size: 0x10]
	class VehicleWeaponScopeWidget* ScopeUI;//[Offset: 0x958, Size: 0x8]
	float PitchCameraOffset;//[Offset: 0x960, Size: 0x4]
	bool bCameraFocusWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 0x1]
	bool bUseNormalCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x965, Size: 0x1]
	byte FireType;//[Offset: 0x966, Size: 0x1]
	FName FireSocketName;//[Offset: 0x968, Size: 0x8]
	FName[] MuzzleCheckSocketNames;//[Offset: 0x970, Size: 0x10]
	byte FireAixsType;//[Offset: 0x980, Size: 0x1]
	FName TurretVSocketName;//[Offset: 0x984, Size: 0x8]
	FName TurretHSocketName;//[Offset: 0x98c, Size: 0x8]
	FString ReloadSoundName1P;//[Offset: 0x998, Size: 0x10]
	FString ReloadSoundName3P;//[Offset: 0x9a8, Size: 0x10]
	FString ReloadSoundName3PEnemy;//[Offset: 0x9b8, Size: 0x10]
	SolarVehiclePawn* AttachedVehicle;//[Offset: 0x9c8, Size: 0x8]
	SolarCharacter* WeaponOwner;//[Offset: 0x9d8, Size: 0x8]
	bool bVehicleWeaponScopeOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	uint32 RotationYawAndPitchPacket;//[Offset: 0x9e4, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x9f0, Size: 0x8]
	class SkeletalMeshComponent* VehicleStencilClass;//[Offset: 0x9f8, Size: 0x28]
	SkeletalMeshComponent* VehicleStencilNew;//[Offset: 0xa20, Size: 0x8]
	FName AttachBoneName;//[Offset: 0xa28, Size: 0x8]
	SolarCharacter* CahedLastOwner;//[Offset: 0xa30, Size: 0x8]
	bool bUseAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8c, Size: 0x1]
	bool bShowAssistLockUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8c, Size: 0x1]
	Vector2D AssistLockImageSize;//[Offset: 0xd90, Size: 0x8]
	bool bAutoLockSpreadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd98, Size: 0x1]
	float AutoLockSpreadDec;//[Offset: 0xd9c, Size: 0x4]
	float PreSelectProgress;//[Offset: 0xda0, Size: 0x4]
	RuntimeFloatCurve ProgressUpgradeSpeedCurve;//[Offset: 0xda8, Size: 0x88]
	enum AssistLockState;//[Offset: 0xe30, Size: 0x1]
	bool bSimulateWeaponFireSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe31, Size: 0x1]
	bool bUsingCameraRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe32, Size: 0x1]
	float TriggerSmoothReticleDistance;//[Offset: 0xe34, Size: 0x4]
	Vector2D SmoothReticleSpeed;//[Offset: 0xe38, Size: 0x8]
	float WeaponFollowCameraYaw;//[Offset: 0xe40, Size: 0x4]
	float WeaponFollowCameraPitch;//[Offset: 0xe44, Size: 0x4]
	Rotator SimulateWeaponRot;//[Offset: 0xe48, Size: 0xc]
	Transform SimulateMuzzleTransform;//[Offset: 0xe60, Size: 0x30]
	Transform CachedWeaponRelativeTransform;//[Offset: 0xe90, Size: 0x30]
	Rotator SimulateWeaponTargetRotator;//[Offset: 0xec0, Size: 0xc]
	GameplayTagContainer BlockVehicleWeaponFireTags;//[Offset: 0xed0, Size: 0x20]
	void VehicleWeaponOpenScope();// 0x485a96c
	void VehicleWeaponCloseScope();// 0x485a958
	void UpdateWeaponSimulateTransform(float DeltaTime, bool bInFreeLook);// 0x485a800
	void ServerUpdateVehicleWeaponRotate(uint32 PackedRotation);// 0x485aa14
	void OnStencilLoaded();// 0x485ac7c
	void LocallyVehicleWeaponTick(float DeltaTime);// 0x485aac0
	bool IsPlayerLocallyControlledWeapon();// 0x485a9dc
	void InitializeVehicleWeapon(SolarVehiclePawn* VehicleWeaponOwner, out const FName WeaponAttachSocket);// 0x485ab78
	Vector GetShotTargetLocation();// 0x485a8f0
	byte GetFireType();// 0x485a9c0
	bool CheckCanOpenScope();// 0x485a980
	bool CanEnterFireState();// 0x485a918
	void CacheActivedMeshData();// 0x485ab64

--------------------------------
Class: VehicleWeaponScopeWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_Vehicle;//[Offset: 0x318, Size: 0x8]
	Image* Img_Weapon;//[Offset: 0x320, Size: 0x8]
	CanvasPanel* Panel_Pitch;//[Offset: 0x328, Size: 0x8]
	CheckBoxGroup* ScopeMutiplerContainer;//[Offset: 0x330, Size: 0x8]
	SolarCheckBox* Btn_Pitch;//[Offset: 0x338, Size: 0x8]
	CanvasPanel* SecondReticlePanel;//[Offset: 0x340, Size: 0x8]
	CanvasPanel* Panel_BG;//[Offset: 0x348, Size: 0x8]
	CanvasPanel* Panel_Border;//[Offset: 0x350, Size: 0x8]
	Image* ReticleDirection;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x360, Size: 0x8]
	CanvasPanelSlot* SecondReticleSlot;//[Offset: 0x368, Size: 0x8]
	CanvasPanelSlot* ReticleDirectionSlot;//[Offset: 0x370, Size: 0x8]
	Image* ProgressImage;//[Offset: 0x378, Size: 0x8]
	WidgetAnimation* ProgressAnima;//[Offset: 0x380, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x388, Size: 0x8]
	void UpdateScopeUI(SolarVehicleWeapon* VehicleWeapon, out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x48bc748
	void SetCurrentScopeIndex(const int CurrentIndex);// 0x48bc6a4
	void SetChargeProgress(out Image* InProgressImage, out WidgetAnimation* InProgressAnima);// 0x4c8f29c
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress);// 0x48bc914
	void OnScopeTriggerChanged(bool bChecked);// 0x48bcc24
	void OnScopeOpened();// 0x48bc85c
	void OnScopeGroupChanged(out const CheckBox*[] ChildChangedArray, const int CheckedChildIndex);// 0x48bcb24
	void InitScopeUI(SolarVehiclePawn* InVehicle);// 0x48bc870
	void ApplyWeaponCrossHairToScope(out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x48bca4c

--------------------------------
Class: VehicleWeaponCrossHairInfo
	bool bShowCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D CrossHairPosition;//[Offset: 0x4, Size: 0x8]
	float CrossHairOpacity;//[Offset: 0xc, Size: 0x4]
	bool bShowReticleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D ReticleDirectionPosition;//[Offset: 0x14, Size: 0x8]
	float ReticleDirectionAngle;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: CheckBoxGroup.NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object
	delegate OnStateChangedEvent;//[Offset: 0x150, Size: 0x10]
	CheckBox* RevertToCachedChild;//[Offset: 0x160, Size: 0x8]
	CheckBox* LastCheckedChild;//[Offset: 0x168, Size: 0x8]
	PanelWidget* GroupRoot;//[Offset: 0x170, Size: 0x8]
	bool bAllowSwitchOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	enum UseType;//[Offset: 0x179, Size: 0x1]
	CheckBox*[] CheckBoxList;//[Offset: 0x180, Size: 0x10]
	void SetSelectIndex(int Index);// 0x454b830
	void RevertLastCheck();// 0x454b7e8
	bool RemoveGroupChild(CheckBox* Child);// 0x454b8d4
	void OnStateChanged(bool bIsChecked);// 0x454b728
	int GetSelectedIndex();// 0x454b7fc
	void CleanCheckedState();// 0x454b7d4
	CheckBox*[] CheckChildrenState(out int CheckedChildIndex);// 0x454ba34
	bool AddGroupChild(CheckBox* Child);// 0x454b984

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: SolarCheckBox.CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	Widget* OnGroup;//[Offset: 0x828, Size: 0x8]
	Widget* OffGroup;//[Offset: 0x830, Size: 0x8]
	enum CheckedGroupVisibility;//[Offset: 0x838, Size: 0x1]
	enum UncheckedGroupVisibility;//[Offset: 0x839, Size: 0x1]
	void OnStateChanged(bool bIsChecked);// 0x465bbe4
	void ManualSetIsChecked(bool InIsChecked);// 0x465bc90

--------------------------------
Class: VehicleSeatWeaponSkinInfo
	SkeletalMesh* WeaponMesh;//[Offset: 0x0, Size: 0x8]
	class AnimInstance* WeaponMeshAnimClass;//[Offset: 0x8, Size: 0x8]
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x10, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb0, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb0, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb0, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x3184eb8

--------------------------------
Class: SolarNetMovementComponent.ActorComponent.Object
	float InterpolatedBackTime;//[Offset: 0xec, Size: 0x4]
	float ServerBufferCheckTimeInterval;//[Offset: 0xf0, Size: 0x4]
	int ServerBufferCheckCount;//[Offset: 0xf4, Size: 0x4]
	float ServerBufferCheckMinSpeed;//[Offset: 0xf8, Size: 0x4]
	float ServerBufferIgnoreCheckTimer;//[Offset: 0xfc, Size: 0x4]
	float AtRestThresholdCount;//[Offset: 0x100, Size: 0x4]
	enum ExtrapolationMode;//[Offset: 0x104, Size: 0x1]
	bool bUseExtrapolationTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	float ExtrapolationTimeLimit;//[Offset: 0x108, Size: 0x4]
	bool bUseExtrapolationDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	float ExtrapolationDistanceLimit;//[Offset: 0x110, Size: 0x4]
	float SendPositionThreshold;//[Offset: 0x114, Size: 0x4]
	float SendRotationThreshold;//[Offset: 0x118, Size: 0x4]
	float SendVelocityThreshold;//[Offset: 0x11c, Size: 0x4]
	float SendAngularVelocityThreshold;//[Offset: 0x120, Size: 0x4]
	float LinearVelcolityForPositionThreshold;//[Offset: 0x124, Size: 0x4]
	float ReceivedPositionThreshold;//[Offset: 0x128, Size: 0x4]
	float AngularVelocityForRotationThreshold;//[Offset: 0x12c, Size: 0x4]
	float ReceivedRotationThreshold;//[Offset: 0x130, Size: 0x4]
	float PositionSnapThreshold;//[Offset: 0x134, Size: 0x4]
	float RotationSnapThreshold;//[Offset: 0x138, Size: 0x4]
	float PositionLerpSpeed;//[Offset: 0x13c, Size: 0x4]
	float RotationLerpSpeed;//[Offset: 0x140, Size: 0x4]
	enum SyncPosition;//[Offset: 0x144, Size: 0x1]
	enum SyncRotation;//[Offset: 0x145, Size: 0x1]
	enum SyncVelocity;//[Offset: 0x146, Size: 0x1]
	enum SyncAngularVelocity;//[Offset: 0x147, Size: 0x1]
	bool bSyncDesiredYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool isPositionCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	bool isRotationCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]
	bool isVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1]
	bool isAngularVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	float SendRate;//[Offset: 0x150, Size: 0x4]
	float TimeSmoothing;//[Offset: 0x154, Size: 0x4]
	bool bUsingOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool bAlwaysSendOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	GameStateBase* GameState;//[Offset: 0x188, Size: 0x8]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x190, Size: 0x8]
	SceneComponent* RelativeComponent;//[Offset: 0x198, Size: 0x8]
	SolarVehiclePawn* PreviousBaseVehicleActor;//[Offset: 0x1a0, Size: 0x8]
	float AtRestPositionThreshold;//[Offset: 0x4d0, Size: 0x4]
	float AtRestRotationThreshold;//[Offset: 0x4d4, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x4f0, Size: 0x8]

--------------------------------
Class: SolarVehicleAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object

--------------------------------
Class: SolarVehicleSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarVehicleCameraComponent* VehicleCamera;//[Offset: 0x378, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x380, Size: 0x8]

--------------------------------
Class: SolarVehicleCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarVehiclePawn* Vehicle;//[Offset: 0x940, Size: 0x8]

--------------------------------
Class: SolarVehicleAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData CurrentVehicleHealth;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxVehicleHealth;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData MaxBrokenHealth;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData StealthMaterialPercent;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData SpeedMultiplier;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData CurrentVehicleWholeShield;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData MaxVehicleWholeShield;//[Offset: 0x90, Size: 0x10]
	void OnRep_StealthMaterialPercent(out const GameplayAttributeData OldStealthMaterialPercent);// 0x4843120
	void OnRep_SpeedMultiplier(out const GameplayAttributeData OldSpeedMultiplier);// 0x4843058
	void OnRep_MaxVehicleWholeShield(out const GameplayAttributeData OldMaxVehicleWholeShield);// 0x4842ec8
	void OnRep_MaxVehicleHealth(out const GameplayAttributeData OldMaxVehicleHealth);// 0x48432b0
	void OnRep_MaxBrokenHealth(out const GameplayAttributeData OldMaxBrokenHealth);// 0x48431e8
	void OnRep_CurrentVehicleWholeShield(out const GameplayAttributeData OldVehicleWholeShield);// 0x4842f90
	void OnRep_CurrentVehicleHealth(out const GameplayAttributeData OldVehicleHealth);// 0x4843378

--------------------------------
Class: BasedMovement
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: VehicleVFX
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]
	CurveFloat* ActivateCurve;//[Offset: 0x60, Size: 0x8]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: VehicleVFXMesh
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: SolarVehicleLampData
	int8 LampMateriaIndex;//[Offset: 0x0, Size: 0x1]
	float LampOnValue;//[Offset: 0x4, Size: 0x4]
	float LampOffValue;//[Offset: 0x8, Size: 0x4]
	MaterialInstanceDynamic* LampMatInstanceDynamic;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SolarVehicleSoundDataAsset.DataAsset.Object
	FString Engine_3P;//[Offset: 0x30, Size: 0x10]
	FString Engine_3P_Enemy;//[Offset: 0x40, Size: 0x10]
	FString Engine_Down_3P;//[Offset: 0x50, Size: 0x10]
	FString Engine_Down_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Engine_RTPC;//[Offset: 0x70, Size: 0x10]
	FString Engine_Stop_3P;//[Offset: 0x80, Size: 0x10]
	FString Engine_Stop_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Engine_Input_RTPC;//[Offset: 0xa0, Size: 0x10]
	float MaxMoveSpeed;//[Offset: 0xb0, Size: 0x4]
	FString MoveSpeed_Acc_RTPC;//[Offset: 0xb8, Size: 0x10]
	FString Tire_3P;//[Offset: 0xc8, Size: 0x10]
	FString Tire_3P_Enemy;//[Offset: 0xd8, Size: 0x10]
	FString Tire_End_3P;//[Offset: 0xe8, Size: 0x10]
	FString Tire_End_3P_Enemy;//[Offset: 0xf8, Size: 0x10]
	FString Tire_RTPC;//[Offset: 0x108, Size: 0x10]
	FString Tire_Group;//[Offset: 0x118, Size: 0x10]
	<byte,FString> Tire_States;//[Offset: 0x128, Size: 0x50]
	bool bUseEngineRpm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	FString Vehicle_Collision_3P;//[Offset: 0x180, Size: 0x10]
	FString Vehicle_Collision_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Vehicle_Collision_RTPC;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Booster_3P;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Booster_3P_Enemy;//[Offset: 0x1c0, Size: 0x10]
	FString Stop_Booster_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Stop_Booster_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Vehicle_Speedboard_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Vehicle_Speedboard_3P;//[Offset: 0x200, Size: 0x10]
	FString Vehicle_Speedboard_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Vehicle_Eject_1P;//[Offset: 0x220, Size: 0x10]
	FString Vehicle_Eject_3P;//[Offset: 0x230, Size: 0x10]
	FString Vehicle_Eject_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Vehicle_Destroyed;//[Offset: 0x250, Size: 0x10]
	FString Weakpoint_Broken_3P;//[Offset: 0x260, Size: 0x10]
	FString Weakpoint_Broken_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Weakpoint_Fixed_3P;//[Offset: 0x280, Size: 0x10]
	FString Weakpoint_Fixed_3P_Enemy;//[Offset: 0x290, Size: 0x10]
	FString Engine_Start_3P;//[Offset: 0x2a0, Size: 0x10]
	FString Engine_Start_3P_Enemy;//[Offset: 0x2b0, Size: 0x10]
	FString Braking_Loop_RTPC;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Braking_Loop_3P;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Braking_Loop_3P_Enemy;//[Offset: 0x2e0, Size: 0x10]
	FString Stop_Braking_Loop_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Stop_Braking_Loop_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	float BrakingLoopSoundDegree;//[Offset: 0x310, Size: 0x4]
	float BrakingLoopSoundSpeed;//[Offset: 0x314, Size: 0x4]
	FString Play_Reverse_Loop;//[Offset: 0x318, Size: 0x10]
	FString Stop_Reverse_Loop;//[Offset: 0x328, Size: 0x10]
	FString Drift_RTPC;//[Offset: 0x338, Size: 0x10]
	FString Drift_Start;//[Offset: 0x348, Size: 0x10]
	FString Drift_Stop;//[Offset: 0x358, Size: 0x10]
	byte SpeedDifferenceInKmThresholdForHitSound;//[Offset: 0x368, Size: 0x1]
	FString Play_SelfHealing_3P;//[Offset: 0x370, Size: 0x10]
	FString Stop_SelfHealing_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_vehicle_crash_ground_3P;//[Offset: 0x390, Size: 0x10]
	FString Play_vehicle_crash_ground_3P_enemy;//[Offset: 0x3a0, Size: 0x10]
	FString Vehicle_Crash_Ground_RTPC;//[Offset: 0x3b0, Size: 0x10]
	float VehicleCrashGroundRtpcMultiplier;//[Offset: 0x3c0, Size: 0x4]
	FString Play_vehicle_crash_water_3P;//[Offset: 0x3c8, Size: 0x10]
	FString Play_vehicle_crash_water_3P_enemy;//[Offset: 0x3d8, Size: 0x10]
	FString Play_vehicle_fixing_weakpoint_3P;//[Offset: 0x3e8, Size: 0x10]
	FString Stop_vehicle_fixing_weakpoint_3P;//[Offset: 0x3f8, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Start_1P;//[Offset: 0x408, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Loop_1P;//[Offset: 0x418, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Start_3P;//[Offset: 0x428, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Loop_3P;//[Offset: 0x438, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Start_1P;//[Offset: 0x448, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Loop_1P;//[Offset: 0x458, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Start_3P;//[Offset: 0x468, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Loop_3P;//[Offset: 0x478, Size: 0x10]
	FString Play_HitVehicleWholdShield_1P;//[Offset: 0x488, Size: 0x10]
	FString Play_HitVehicleWholdShield_3P;//[Offset: 0x498, Size: 0x10]
	FString HoverJumpOnActive1P;//[Offset: 0x4a8, Size: 0x10]
	FString HoverJumpOnActive3P;//[Offset: 0x4b8, Size: 0x10]
	FString HoverJumpWhileActive1P;//[Offset: 0x4c8, Size: 0x10]
	FString HoverJumpWhileActive3P;//[Offset: 0x4d8, Size: 0x10]
	FString HoverJumpOnRemove1P;//[Offset: 0x4e8, Size: 0x10]
	FString HoverJumpOnRemove3P;//[Offset: 0x4f8, Size: 0x10]
	FString Play_VehicleTrumpet_1P;//[Offset: 0x508, Size: 0x10]
	FString Play_VehicleTrumpet_3P;//[Offset: 0x518, Size: 0x10]
	FString Stop_VehicleTrumpet_1P;//[Offset: 0x528, Size: 0x10]
	FString Stop_VehicleTrumpet_3P;//[Offset: 0x538, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P;//[Offset: 0x548, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x558, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P;//[Offset: 0x568, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x578, Size: 0x10]
	FString Play_Vehicle_UpShift_3P;//[Offset: 0x588, Size: 0x10]
	FString Play_Vehicle_UpShift_3P_Enemy;//[Offset: 0x598, Size: 0x10]
	FString Play_Vehicle_DownShift_3P;//[Offset: 0x5a8, Size: 0x10]
	FString Play_Vehicle_DownShift_3P_Enemy;//[Offset: 0x5b8, Size: 0x10]
	FString Play_IronMan_Laser_Hit;//[Offset: 0x5c8, Size: 0x10]

--------------------------------
Class: CarPadSpeedData
	float Duration;//[Offset: 0x0, Size: 0x4]
	float SpeedMultiplier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AbilityCooldownTimer
	byte CooldownAbilityIndex;//[Offset: 0x0, Size: 0x1]
	float AbilityAppliedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarDestructibleActor.StaticMeshActor.Actor.Object
	byte[] OnHitIgnoreChannels;//[Offset: 0x240, Size: 0x10]
	float AddForceCoefficient;//[Offset: 0x250, Size: 0x4]
	float BrokenDestroyTime;//[Offset: 0x254, Size: 0x4]
	bool bChildDetachOnBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bDestroyedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	void SetDestroyedOnClient();// 0x4664be0
	void OnRep_bDestroyedOnClient();// 0x4664c08
	void OnDestructibleActorHit(Actor* SelfActor, Actor* OtherActor, out const HitResult Hit, float SpeedDifference);// 0x4664d88
	void OnClientBrokenEffect();// 0x4c8f29c
	void OnBroken(SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x4664c1c
	void DestroyWithNetForce();// 0x4664bf4

--------------------------------
Class: WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0x338, Size: 0x8]
	int CurrentActiveSlot;//[Offset: 0x340, Size: 0x4]
	SolarPlayerWeapon* PackPrimaryWeapon;//[Offset: 0x348, Size: 0x8]
	SolarPlayerWeapon* PackSecondaryWeapon;//[Offset: 0x350, Size: 0x8]
	SolarPlayerWeapon* PackTertiaryWeapon;//[Offset: 0x358, Size: 0x8]
	SolarPlayerWeapon* CurrentWeapon;//[Offset: 0x360, Size: 0x8]
	SolarUnArmWeapon* UnArmWeapon;//[Offset: 0x370, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x378, Size: 0x8]
	bool bVisibleToggleOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	WeaponAction WeaponPickupAction;//[Offset: 0x398, Size: 0x8]
	WeaponAction WeaponSwitchAction;//[Offset: 0x3a0, Size: 0x8]
	WeaponAction WeaponReplaceAction;//[Offset: 0x3a8, Size: 0x8]
	WeaponAction WeaponDropAction;//[Offset: 0x3b0, Size: 0x8]
	WeaponAction WeaponClearAction;//[Offset: 0x3b8, Size: 0x8]
	WeaponAction WeaponDataUpdateAction;//[Offset: 0x3c0, Size: 0x8]
	PlayerWeaponSystemWidgetMgr* SpectateModeWidgetMgrCache;//[Offset: 0x3c8, Size: 0x8]
	PlayerWeaponSystemWidgetMgr* WeaponSystemWidgetMgr;//[Offset: 0x3d0, Size: 0x8]
	void TriggerBoltAnim();// 0x48e07c0
	void SpectateModeTick(float InDeltaTime);// 0x48dfdfc
	void SpawnMeleeWeapon(SolarCharacter* Owner);// 0x48e0214
	void ResetCurrentWeaponFireState();// 0x48e065c
	void ResetAllWeaponByCache();// 0x48dfea0
	void PostBolt();// 0x48e07d4
	void OpenScopeForSpectator();// 0x48dfee4
	void OnRep_WeaponSwitchAction();// 0x48dffa8
	void OnRep_WeaponReplaceAction();// 0x48dff8c
	void OnRep_WeaponPickupAction();// 0x48dffc4
	void OnRep_WeaponDropAction();// 0x48dff70
	void OnRep_WeaponDataUpdateAction();// 0x48dff38
	void OnRep_WeaponClearAction();// 0x48dff54
	void OnRep_VisibleToggleOn();// 0x48e0200
	void OnRep_TertiaryWeapon(SolarPlayerWeapon* InLastPlayerWeapon);// 0x48dffe0
	void OnRep_SecondaryWeapon(SolarPlayerWeapon* InLastPlayerWeapon);// 0x48e008c
	void OnRep_PrimaryWeapon(SolarPlayerWeapon* InLastPlayerWeapon);// 0x48e0138
	void OnRep_CurrentWeapon();// 0x48e01e4
	void OnOtherPlayerSpectateMyOwner();// 0x48dfeb4
	float GetWeaponWeight();// 0x48e03cc
	SolarPlayerWeapon* GetWeaponBySlot(int Slot);// 0x48e06dc
	SolarUnArmWeapon* GetUnArmWeapon();// 0x48e06a8
	SolarPlayerWeapon* GetPackSecondaryWeapon();// 0x48e05c0
	SolarPlayerWeapon* GetPackPrimaryWeapon();// 0x48e05f4
	int GetLastActiveWeaponSlot();// 0x48e0788
	bool GetIsUnArm();// 0x48e0670
	float GetCurrentWeaponReloadTime(int Mode);// 0x48e0514
	bool GetCurrentWeaponIsOverloading();// 0x48e07e8
	Texture2D* GetCurrentWeaponIcon();// 0x48e0368
	float GetCurrentWeaponBoltTime(int Mode);// 0x48e0468
	SolarPlayerWeapon* GetCurrentWeapon();// 0x48e0628
	float GetCurrentSwitchWeaponTime();// 0x48e0434
	int GetCurrentActiveSlot();// 0x48e07a4
	StaticMesh* GetClipMeshOfCurrentWeapon();// 0x48e0400
	void GameStatisticsWeaponSkill(FString Param);// 0x48e02b8
	void CrosshairQuitReload();// 0x48dff00
	void CrosshairEnterReload();// 0x48dff1c
	void CloseScopeForSpectator();// 0x48dfec8
	void CleanWeaponSlotsUI();// 0x48e039c
	void ChangeShootingOption();// 0x48e0820
	void CancelSecondaryFire();// 0x48e03b0

--------------------------------
Class: SolarUnArmWeapon.Actor.Object
	float Angle;//[Offset: 0x238, Size: 0x4]
	byte[] HitDetectableTypes;//[Offset: 0x240, Size: 0x10]
	float Interval;//[Offset: 0x250, Size: 0x4]
	class UserWidget* CrossHair;//[Offset: 0x258, Size: 0x8]
	SoftObjectPath FireIconPath;//[Offset: 0x260, Size: 0x18]
	SlateBrush FireBtnBrush;//[Offset: 0x278, Size: 0x98]
	SolarAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x310, Size: 0x8]
	SolarCharacterBase* AttackTargetCharacter;//[Offset: 0x320, Size: 0x8]
	class SolarAbility* MeleeAbilityClass;//[Offset: 0x328, Size: 0x8]
	class SolarGameplayAbility[] MeleeAbilities;//[Offset: 0x330, Size: 0x10]
	GameplayAbilitySpecHandle[] AbilitySpecHandles;//[Offset: 0x340, Size: 0x10]
	void TryDealMeleeDamage(out const Vector Location, float DetectSphereRadius);// 0x483dba8
	void ServerDealMeleeDamage(SolarCharacterBase* Target);// 0x483d960
	bool HitAnyCharacters(out SolarCharacterBase* HitTarget, out const Vector Location, out const float DetectSphereRadius);// 0x483da44
	SlateBrush GetFireButtonBrush();// 0x483dcb4
	SolarCharacterBase* GetAttackTargetCharacter();// 0x483dc98

--------------------------------
Class: SolarGameplayAbility.GameplayAbility.Object
	bool bTryActivateWhenGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	enum InputID;//[Offset: 0x3fa, Size: 0x1]
	bool bAllowReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 0x1]
	AbilityMeshMontage[] CurrentAbilityMeshMontages;//[Offset: 0x400, Size: 0x10]
	void RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x46b0dac
	void ReceivingGiven(out const GameplayAbilityActorInfo ActorInfo, out const GameplayAbilitySpec Spec);// 0x4c8f29c
	void MontageStopForMesh(SkeletalMeshComponent* InMesh, float OverrideBlendOutTime);// 0x46b0918
	void MontageStopForAllMeshes(float OverrideBlendOutTime);// 0x46b0874
	void MontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, FName FromSectionName, FName ToSectionName);// 0x46b0a00
	void MontageJumpToSectionForMesh(SkeletalMeshComponent* InMesh, FName SectionName);// 0x46b0b28
	int GetDefaultGrantedLevel(const Actor* InOwner, const Actor* InAvatar);// 0x46b0cb8
	AnimMontage* GetCurrentMontageForMesh(SkeletalMeshComponent* InMesh);// 0x46b0c0c
	void ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x46b1144
	void AddGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x46b0f78

--------------------------------
Class: AbilityMeshMontage
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	AnimMontage* Montage;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WeaponAction
	int ActionCount;//[Offset: 0x0, Size: 0x4]
	int ActionParameter;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerWeaponSystemWidgetMgr.WeaponSystemWidgetMgr.Object
	SolarPlayerWeapon* CurrentPlayerWeapon;//[Offset: 0x50, Size: 0x8]
	UserWidget* UnArmWidget;//[Offset: 0x58, Size: 0x8]
	void InitUnarmWidget(SolarUnArmWeapon* UnArmWeapon);// 0x45a1898

--------------------------------
Class: WeaponSystemWidgetMgr.Object
	SolarWeapon* CurrentWeapon;//[Offset: 0x28, Size: 0x8]
	bool bReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	FeedbackWidget* FeedbackWidget;//[Offset: 0x38, Size: 0x8]
	CrossHairWidget* CrossHairWidget;//[Offset: 0x48, Size: 0x8]
	void UpdateClipCapacity(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x48e2d6c
	void SetVisible(bool Visible);// 0x48e2bb8
	void SetShootActive(bool bo);// 0x48e2c88
	void ReloadTick(float DeltaTime);// 0x48e2b14
	void QuitReload(bool InbReloadSuccess, int InReservedAmmo, int InMaxAmmo, int InReloadAmmo);// 0x48e2f48
	void PreWeaponFire(int Mode);// 0x48e3164
	void OverloadTick(float DeltaTime);// 0x48e2a70
	void Overload(bool bEntry);// 0x48e2e9c
	void OpenScope();// 0x48e2d50
	void InitWeaponWidget(SolarWeapon* Weapon);// 0x48e2920
	void EnterReload(int Mode);// 0x48e30c0
	void CoolDownTick(float DeltaTime);// 0x48e29cc
	void CloseScope();// 0x48e2d34
	void Clear();// 0x48e2c6c

--------------------------------
Class: SkeletalMeshComponentConfig.DataAsset.Object
	SoftObjectPath AnimClass;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkeletalMesh;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: CharacterSkinConfig.DataAsset.Object
	SoftObjectPath SkinIcon;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath DefaultIcon;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath SkinRes;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath CharaSkinRes;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ShieldRes;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath InvincibleMAT;//[Offset: 0xa8, Size: 0x18]
	SoftClassPath AnimBPRes;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath GetSkinRes();// 0x454a870
	SoftObjectPath GetSkinIcon();// 0x454a8fc
	SoftObjectPath GetInvincibleMAT();// 0x454a988
	SoftObjectPath GetCharaSkinRes();// 0x454a7e0
	SoftObjectPath GetAnimBPRes();// 0x454a754

--------------------------------
Class: SolarWeaponDamageEvent.SolarPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: BackpackStatisticsInfo
	bool IsVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector PlayerStartLocation;//[Offset: 0x4, Size: 0xc]
	Vector PlayerEndLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: RestoreAbilityInfo
	GameplayAbilitySpecHandle Handle;//[Offset: 0x0, Size: 0x4]
	PredictionKey ActivationPredictionKey;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: ScannedInfo_NetQuantize
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	byte TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize TargetLocation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: WeaponSystemPlayer.WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bInitializeWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	float ReloadBlockTimeMax;//[Offset: 0x554, Size: 0x4]
	FString ReceviedReloadMessage;//[Offset: 0x558, Size: 0x10]
	StaticMeshActor* DroppedClip;//[Offset: 0x578, Size: 0x8]
	StaticMeshActor* ExtractedClip;//[Offset: 0x580, Size: 0x8]
	bool bHoldFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	float CheckPickableWeaponRange;//[Offset: 0x58c, Size: 0x4]
	Actor* LastCheckPickableWeapon;//[Offset: 0x590, Size: 0x8]
	float PressOpenScopeTime;//[Offset: 0x5b0, Size: 0x4]
	void TestSetSkin(int SkinId);// 0x48dd508
	void TestSafeArea();// 0x48dd5b4
	void TakeOffEquipAttributes(SolarPlayerWeapon* Weapon);// 0x4c8f29c
	void SwitchFireMode();// 0x48de14c
	void SwitchChargeUI(bool On, int Mode);// 0x48dd400
	void SetAllEnemyRenderMode(const byte InRenderModeType);// 0x48dd35c
	bool ServerPackDropWeapon(int Slot);// 0x48de184
	void ReplaceUpgradeRoute(int Slot);// 0x48dd76c
	void RecieveSafeAreaUpdateMsg(out const int Num);// 0x37b7888
	void RecieveExpPackMsg(int ItemID, int Num);// 0x37b7888
	void RecieveExpMsg(bool bClient, int Type, int Num, int Slot);// 0x48ddfd4
	void RecieveAssistMsg(enum HitedCharacterType);// 0x37b7888
	void ReceiveWeaponEXP(int InExp);// 0x48dddb8
	void PutEquipAttributes(SolarPlayerWeapon* Weapon);// 0x4c8f29c
	void PrintSensitivityGM();// 0x48dd4f4
	void PostAddWeaponEXPMessageWhenKill(const int InWeaponSlot, const enum InHitType, const float InDamage, const bool InbKillPlayer);// 0x48dde5c
	void PostAddWeaponEXPMessageFromLua(const int InWeaponSlot, const enum InHitType, const float InDamage, const bool InbKillPlayer);// 0x37b7888
	void OnPlayerEnergyUpdate();// 0x48dd608
	void OnEnterBattleAction(enum battleType);// 0x48dd880
	bool NeedThermalImage();// 0x48dd848
	bool IsWeaponAmmoUseEnergy(int Slot, int FireMode);// 0x48dd924
	bool IsWeaponAmmoUseBagResource(int Slot, int FireMode);// 0x48dda14
	bool IsReloadBlock();// 0x48dd5d0
	bool IsOwnUpgradeRoute(int Slot);// 0x37b7888
	bool IsCurrentWeaponTeamDamageValid();// 0x37b7888
	bool IsCurrentWeapon(int ID);// 0x48ddd08
	bool InternalReplaceUpgradeRoute(SolarPlayerWeapon* wp);// 0x37b7888
	void InitializeWeaponSystem(SolarCharacter* InOwner);// 0x48dd6c8
	int GetWeapoonSkin(SolarPlayerWeapon* Weapon);// 0x37b7888
	SolarPlayerWeapon* GetWeaponByItemID(int ItemInstanceId);// 0x48dd61c
	SolarPlayerWeapon* GetWeaponByID(int ID);// 0x48ddb04
	int GetSlotByItemID(int ID);// 0x48ddbb0
	int GetSlotByID(int ID);// 0x48ddc5c
	float GetRetrofitCost(int Slot);// 0x37b7888
	bool CurrentWeaponIsThermalImage();// 0x48dd810
	void ClearWeapons();// 0x48de168
	void CheckPickableWeapon();// 0x48dd348
	bool CanReplaceUpgradeRoute(int Slot);// 0x37b7888

--------------------------------
Class: WeaponSystemPlayerAI.WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	bool IsCurrentWeapon(int ID);// 0x48df934
	void ClearWeapons();// 0x48df9e4

--------------------------------
Class: WeaponSystemVehicleComponent.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	WeaponSystemInteract WeaponSystemInteract;//[Offset: 0x328, Size: 0x50]
	SolarVehicleWeapon* CurrentWeapon;//[Offset: 0x390, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x398, Size: 0x8]
	WeaponAction WeaponEquipAction;//[Offset: 0x3d0, Size: 0x8]
	WeaponAction WeaponUnequipAction;//[Offset: 0x3d8, Size: 0x8]
	WeaponAction WeaponStartReloadAction;//[Offset: 0x3e0, Size: 0x8]
	VehicleWeaponSystemWidgetMgr* WeaponSystemWidgetMgr;//[Offset: 0x3e8, Size: 0x8]
	void StatVehicleWeaponFire(FString Param);// 0x48e1e88
	void OnRep_WeaponUnequipAction();// 0x48e1f54
	void OnRep_WeaponStartReloadAction();// 0x48e1f40
	void OnRep_WeaponEquipAction();// 0x48e1f68
	void OnRep_CurrentWeapon(SolarVehicleWeapon* PreviousWeapon);// 0x48e1fb0
	SolarVehicleWeapon* GetMyWeapon();// 0x48e1f7c
	SolarVehicleWeapon* GetCurrentVehicleWeapon();// 0x48e2100
	void FireInput(bool bPress);// 0x48e2054

--------------------------------
Class: VehicleWeaponSystemWidgetMgr.WeaponSystemWidgetMgr.Object
	VehicleWeaponScopeWidget* VehicleWeaponScopeUI;//[Offset: 0x58, Size: 0x8]
	VehicleWeaponCrossHairInfo CachedCrossHairInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: BoardedVehicleInfo
	SolarVehiclePawn* BoardedVehicle;//[Offset: 0x0, Size: 0x8]
	int BoardedSeatIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: VehicleRepairToolMeshPreset
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 0x18]
	Transform RelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: MotionWarpingComponent.ActorComponent.Object
	bool bSearchForWindowsInAnimsWithinMontages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	delegate OnPreUpdate;//[Offset: 0xc0, Size: 0x10]
	Character* CharacterOwner;//[Offset: 0xd0, Size: 0x8]
	RootMotionModifier*[] Modifiers;//[Offset: 0xd8, Size: 0x10]
	<FName,MotionWarpingTarget> WarpTargetMap;//[Offset: 0xe8, Size: 0x50]
	int RemoveWarpTarget(FName WarpTargetName);// 0x33653b0
	void DisableAllRootMotionModifiers();// 0x3365a88
	void AddOrUpdateWarpTargetFromTransform(FName WarpTargetName, Transform TargetTransform);// 0x3365854
	void AddOrUpdateWarpTargetFromLocationAndRotation(FName WarpTargetName, Vector TargetLocation, Rotator TargetRotation);// 0x336545c
	void AddOrUpdateWarpTargetFromLocation(FName WarpTargetName, Vector TargetLocation);// 0x33655c8
	void AddOrUpdateWarpTargetFromComponent(FName WarpTargetName, const SceneComponent* Component, FName BoneName, bool bFollowComponent);// 0x33656e0
	void AddOrUpdateWarpTarget(FName WarpTargetName, out const MotionWarpingTarget WarpTarget);// 0x336596c

--------------------------------
Class: RootMotionModifier.Object
	AnimSequenceBase* Animation;//[Offset: 0x28, Size: 0x8]
	float StartTime;//[Offset: 0x30, Size: 0x4]
	float EndTime;//[Offset: 0x34, Size: 0x4]
	float PreviousPosition;//[Offset: 0x38, Size: 0x4]
	float CurrentPosition;//[Offset: 0x3c, Size: 0x4]
	float Weight;//[Offset: 0x40, Size: 0x4]
	bool bInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	Transform StartTransform;//[Offset: 0x50, Size: 0x30]
	float ActualStartTime;//[Offset: 0x80, Size: 0x4]
	delegate OnActivateDelegate;//[Offset: 0x84, Size: 0x10]
	delegate OnUpdateDelegate;//[Offset: 0x94, Size: 0x10]
	delegate OnDeactivateDelegate;//[Offset: 0xa4, Size: 0x10]
	enum State;//[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: MotionWarpingTarget
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	SceneComponent* Component;//[Offset: 0x30, Size: 0x8]
	FName BoneName;//[Offset: 0x38, Size: 0x8]
	bool bFollowComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DebugReplicator.Actor.Object

--------------------------------
Class: CameraSettings
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	float CameraFOV;//[Offset: 0x4, Size: 0x4]
	Vector TargetOffset;//[Offset: 0x8, Size: 0xc]
	Vector CameraOffset;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: JumpCamSettings
	float FadeIn;//[Offset: 0x0, Size: 0x4]
	float FadeOut;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	CurveVector* OffsetCurve;//[Offset: 0x10, Size: 0x8]
	CurveVector* RotationCurve;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SolarWarmClockComponent.ActorComponent.Object
	float RingWarmClockTimeMin;//[Offset: 0xb8, Size: 0x4]
	float RingWarmClockTimeMax;//[Offset: 0xbc, Size: 0x4]
	int MaxWarmBotNum;//[Offset: 0xc0, Size: 0x4]
	float RangeCheckNearby;//[Offset: 0xc4, Size: 0x4]
	int NumLimitNearby;//[Offset: 0xc8, Size: 0x4]
	float StartFirstDelay;//[Offset: 0xcc, Size: 0x4]
	SolarWarmTargetComponent*[] WarmTargetCompList;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: LocTextParam
	FString ParamName;//[Offset: 0x0, Size: 0x10]
	int LocTextID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: RotationBarMarkWidget.UserWidget.Widget.Visual.Object
	FName FlagName;//[Offset: 0x278, Size: 0x8]
	FName TextName;//[Offset: 0x280, Size: 0x8]
	Image* FlagImage;//[Offset: 0x288, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x290, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x298, Size: 0x8]
	void SetupOrder(int InOrderID);// 0x4c8f29c
	void SetUpdateState(bool ShouldUpdateLocation);// 0x45a427c
	void SetPosition(Vector2D InPosition);// 0x45a41dc
	void SetFlagIcon(PaperSprite* InSprite);// 0x45a4138
	void InitializeMark(Actor* InTargetActor, bool InMoveable);// 0x45a4328
	float GetAngle();// 0x45a4104

--------------------------------
Class: SolarFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bEnableOffmeshDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float MinDetectInterval;//[Offset: 0x2a8, Size: 0x4]
	uint32 MaxDetectIteration;//[Offset: 0x2ac, Size: 0x4]
	Vector InitialOffmeshSolveExtent;//[Offset: 0x2b0, Size: 0xc]
	bool bEnableSolveBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	Actor* VehicleActor;//[Offset: 0x2f8, Size: 0x8]
	float SensorTraceDistance;//[Offset: 0x30c, Size: 0x4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float RightSensorAlpha;//[Offset: 0x314, Size: 0x4]
	float CentralSensorAlpha;//[Offset: 0x318, Size: 0x4]
	float LeftSensorAlpha;//[Offset: 0x31c, Size: 0x4]
	float SteeringAngle;//[Offset: 0x320, Size: 0x4]
	float VehicleSteeringSensitivity;//[Offset: 0x324, Size: 0x4]
	float BrakingForce;//[Offset: 0x328, Size: 0x4]
	float DecelerationDistance;//[Offset: 0x32c, Size: 0x4]
	float VehicleDecelerationSpeed;//[Offset: 0x330, Size: 0x4]
	float VehicleTurningSpeed;//[Offset: 0x334, Size: 0x4]
	float CheckReverseDistance;//[Offset: 0x338, Size: 0x4]
	float HoverCheckBlockSpeed;//[Offset: 0x33c, Size: 0x4]
	float WheeledCheckBlockSpeed;//[Offset: 0x340, Size: 0x4]
	float LeggedVehicleCheckBlockSpeed;//[Offset: 0x344, Size: 0x4]
	float CheckBlockTime;//[Offset: 0x34c, Size: 0x4]
	int TryReverseTimes;//[Offset: 0x358, Size: 0x4]
	float TryReverseDurationTime;//[Offset: 0x35c, Size: 0x4]
	float SolveBlockGoFrontTime;//[Offset: 0x368, Size: 0x4]
	bool bPathFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	void SetVehicle(Actor* VehicleActorIn);// 0x4675e9c
	void OnUpdatedCharacterLanded(out const HitResult Hit);// 0x4675f40

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x270, Size: 0x8]
	Vector CrowdAgentMoveDirection;//[Offset: 0x278, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x6ce0364

--------------------------------
Class: NgaiAIControllerComponent.ActorComponent.Object
	SolarCharacterBase* EnemyCharacterBase;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: MonsterAISpawnSettings
	int MonsterGroupSizeMin;//[Offset: 0x0, Size: 0x4]
	int MonsterGroupSizeMax;//[Offset: 0x4, Size: 0x4]
	int NumberMonsterGroupMin;//[Offset: 0x8, Size: 0x4]
	int NumberOfMonsterGroupMax;//[Offset: 0xc, Size: 0x4]
	float MonsterSpawnCoolDown;//[Offset: 0x10, Size: 0x4]
	float MonsterSpawnStartTime;//[Offset: 0x14, Size: 0x4]
	<int,float> MonsterGroupProbabilities;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: ChargingZone
	float Level1;//[Offset: 0x0, Size: 0x4]
	float Level2;//[Offset: 0x4, Size: 0x4]
	float Level3;//[Offset: 0x8, Size: 0x4]
	float Level4;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TutorialLevel_02_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 0x8]
	void ReceiveBeginPlay();// 0x4c8f29c
	void AutoRunLevel();// 0x4c8f29c
	void ExecuteUbergraph_TutorialLevel_02(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_VH_Hover_Soroll03_TutorialLowMaxHP_C*[] CallFunc_GetAllActorsOfClass_OutActors, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_VH_Hover_Soroll03_TutorialLowMaxHP_C* CallFunc_Array_Get_Item, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NetGetOffVehicle_ReturnValue, bool CallFunc_NetGetOnVehicle_ReturnValue, BP_VH_Hover_Soroll03_TutorialPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_VH_Hover_Soroll03_TutorialPlayer_C* CallFunc_Array_Get_Item, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_NetGetOffVehicle_ReturnValue, bool CallFunc_NetGetOnVehicle_ReturnValue, LevelSequenceActor* CallFunc_CreateLevelSequencePlayer_OutActor, LevelSequencePlayer* CallFunc_CreateLevelSequencePlayer_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x4c8f29c

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: BP_VH_Hover_Soroll03_TutorialLowMaxHP_C.BP_VH_Hover_Soroll02_C.BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1310, Size: 0x8]
	void ReceiveBeginPlay();// 0x4c8f29c
	void SetSpeedToZero();// 0x4c8f29c
	void ExecuteUbergraph_BP_VH_Hover_Soroll03_TutorialLowMaxHP(int EntryPoint, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess);// 0x4c8f29c

--------------------------------
Class: BP_VH_Hover_Soroll02_C.BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object

--------------------------------
Class: BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object

--------------------------------
Class: SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarHoverVehicleMovement* VehicleMovement;//[Offset: 0x12e0, Size: 0x8]
	VehicleBasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x12e8, Size: 0x20]
	void OnVehicleRootHitForAttachPlatform(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x46da3cc
	void OnRep_ReplicatedBasedMovement(VehicleBasedMovementInfo PreviousBasedMovement);// 0x46da59c
	void OnPlatformActorEndplay(Actor* Actor, byte EndPlayReason);// 0x46da2e4

--------------------------------
Class: SolarHoverVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x238, Size: 0x8]
	SolarHoverVehicleAnimInstance* VehicleAnimInstance;//[Offset: 0x240, Size: 0x8]
	float MinLocationDiffForThrusterTrace;//[Offset: 0x248, Size: 0x4]
	float MinRotationDiffForThrusterTrace;//[Offset: 0x24c, Size: 0x4]
	float DriverJustOnTimer;//[Offset: 0x250, Size: 0x4]
	Vector MassOffset;//[Offset: 0x254, Size: 0xc]
	float HoverForce;//[Offset: 0x260, Size: 0x4]
	float HoverSpringCoefficient;//[Offset: 0x264, Size: 0x4]
	float HoverDampingCoefficient;//[Offset: 0x268, Size: 0x4]
	float HoverHeight;//[Offset: 0x26c, Size: 0x4]
	RuntimeFloatCurve HoverForceMultiplier;//[Offset: 0x270, Size: 0x88]
	float MinHoverHeight;//[Offset: 0x2f8, Size: 0x4]
	ThrusterData[] ThrusterDataArray;//[Offset: 0x300, Size: 0x10]
	CurveFloat* DustEffectScaleCurve;//[Offset: 0x310, Size: 0x8]
	float ThrusterTargetAnimationBlendSpeed;//[Offset: 0x318, Size: 0x4]
	float YawDegreeDifference;//[Offset: 0x31c, Size: 0x4]
	float SpoilerRotateSpeed;//[Offset: 0x320, Size: 0x4]
	float MaxRudderRoll;//[Offset: 0x324, Size: 0x4]
	float MinRudderRoll;//[Offset: 0x328, Size: 0x4]
	float MaxRudderYaw;//[Offset: 0x32c, Size: 0x4]
	float MinRudderYaw;//[Offset: 0x330, Size: 0x4]
	RuntimeFloatCurve AccelerationCurve;//[Offset: 0x338, Size: 0x88]
	float MaxSideMovingSpeed;//[Offset: 0x3c0, Size: 0x4]
	float MaxBackwardMovingSpeed;//[Offset: 0x3c4, Size: 0x4]
	float DecelerationDegree;//[Offset: 0x3c8, Size: 0x4]
	float DecelerationOnInput;//[Offset: 0x3cc, Size: 0x4]
	float DecelerationOnMovingDirection;//[Offset: 0x3d0, Size: 0x4]
	float MinDecelerationOnMovingDirection;//[Offset: 0x3d4, Size: 0x4]
	RuntimeFloatCurve DecelerationOnSide;//[Offset: 0x3d8, Size: 0x88]
	RuntimeFloatCurve AccelerationMultiplierForSideVelocity;//[Offset: 0x460, Size: 0x88]
	float MaxControllableDegree;//[Offset: 0x4e8, Size: 0x4]
	GameplayTagContainer InAirControllableTags;//[Offset: 0x4f0, Size: 0x20]
	float GravityAcceleration;//[Offset: 0x510, Size: 0x4]
	float GravityWithoutDriver;//[Offset: 0x514, Size: 0x4]
	float LandingDuration;//[Offset: 0x518, Size: 0x4]
	float MaximumVelocityOnZWithoutDriver;//[Offset: 0x51c, Size: 0x4]
	float DecelerationRateWithoutDriver;//[Offset: 0x520, Size: 0x4]
	float AngularDampingWithoutDriver;//[Offset: 0x524, Size: 0x4]
	float WaterLineForFloatingForce;//[Offset: 0x528, Size: 0x4]
	float UpwardAccelerationFloatingOnWater;//[Offset: 0x52c, Size: 0x4]
	float WaterAlignSpeed;//[Offset: 0x530, Size: 0x4]
	float WaterHeightWithoutDriver;//[Offset: 0x534, Size: 0x4]
	PIDController UpwardForcePIDController;//[Offset: 0x538, Size: 0x1c]
	float RotateAccelaration;//[Offset: 0x554, Size: 0x4]
	float RotateDecelaration;//[Offset: 0x558, Size: 0x4]
	float MaxAngularSpeed;//[Offset: 0x55c, Size: 0x4]
	float RotationYawDifferenceLimit;//[Offset: 0x560, Size: 0x4]
	float HoverHeightMultiplierAfterBroken;//[Offset: 0x564, Size: 0x4]
	float ParticleMultiplierAfterBroken;//[Offset: 0x568, Size: 0x4]
	VehicleVFX[] ThrusterParticles;//[Offset: 0x570, Size: 0x10]
	VehicleVFX MovementParticles;//[Offset: 0x580, Size: 0x90]
	float MaxVelocityOnZAfterColliding;//[Offset: 0x7c0, Size: 0x4]
	ThrusterState[] ThrusterStateArray;//[Offset: 0x828, Size: 0x10]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x838, Size: 0x8]
	SolarNetMovementComponent* VehicleNetMovement;//[Offset: 0x840, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x848, Size: 0x8]
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x46dad98
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x46db050
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x46daf68

--------------------------------
Class: SolarHoverVehicleAnimInstance.SolarVehicleAnimInstance.AnimInstance.Object
	float VehicleLeftOrRightPercent;//[Offset: 0x2c0, Size: 0x4]
	float VehicleSpoilerRotateFactor;//[Offset: 0x2c4, Size: 0x4]
	Vector FLThrusterBoneScale;//[Offset: 0x2c8, Size: 0xc]
	Vector FRThrusterBoneScale;//[Offset: 0x2d4, Size: 0xc]
	Vector BLThrusterBoneScale;//[Offset: 0x2e0, Size: 0xc]
	Vector BRThrusterBoneScale;//[Offset: 0x2ec, Size: 0xc]

--------------------------------
Class: ThrusterData
	float HoverHeightMultiplierInForward;//[Offset: 0x0, Size: 0x4]
	float HoverHeightMultiplierInBackward;//[Offset: 0x4, Size: 0x4]
	float HoverHeightMultiplierInLeft;//[Offset: 0x8, Size: 0x4]
	float HoverHeightMultiplierInRight;//[Offset: 0xc, Size: 0x4]
	bool bRaiseDust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float DustEffectScale;//[Offset: 0x14, Size: 0x4]
	Vector DustEffectOffest;//[Offset: 0x18, Size: 0xc]
	FName ThrusterSocket;//[Offset: 0x24, Size: 0x8]
	Vector ThrusterOffsetIfNoValidSocket;//[Offset: 0x2c, Size: 0xc]
	float SweepRadius;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PIDController
	float PCoeff;//[Offset: 0x0, Size: 0x4]
	float ICoeff;//[Offset: 0x4, Size: 0x4]
	float DCoeff;//[Offset: 0x8, Size: 0x4]
	float Minimum;//[Offset: 0xc, Size: 0x4]
	float Maximum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ThrusterState
	HitResult TouchGroundHit;//[Offset: 0x38, Size: 0x88]

--------------------------------
Class: VehicleBasedMovementInfo
	SolarVehiclePawn* MovementBaseActor;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 RelativeLocation;//[Offset: 0x8, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: BP_VH_Hover_Soroll03_TutorialPlayer_C.BP_VH_Hover_Soroll03_C.BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1320, Size: 0x8]
	void ReceiveBeginPlay();// 0x4c8f29c
	void ExecuteUbergraph_BP_VH_Hover_Soroll03_TutorialPlayer(int EntryPoint);// 0x4c8f29c

--------------------------------
Class: BP_VH_Hover_Soroll03_C.BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1310, Size: 0x8]
	BoxComponent* CollisionForDriver;//[Offset: 0x1318, Size: 0x8]
	void Circle Y(float Z, float X, out float Y, float CallFunc_Square_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Sqrt_ReturnValue);// 0x4c8f29c
	void OnPlayerGetOnVehicle_Event(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x4c8f29c
	void OnPlayerGetOffVehicle_Event(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x4c8f29c
	void ExecuteUbergraph_BP_VH_Hover_Soroll03(int EntryPoint, int K2Node_CustomEvent_GetOffSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOffPlayer, int K2Node_CustomEvent_GetOnSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOnPlayer);// 0x4c8f29c

--------------------------------
Class: BP_TutorialLevelGameState_C.STutorialLevelGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x440, Size: 0x8]

--------------------------------
Class: STutorialLevelGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: BP_SolarPlayerController_C.SolarPlayerController.PlayerController.Controller.Actor.Object
	BPC_BuyResurrection_C* BPC_BuyResurrection;//[Offset: 0x9f8, Size: 0x8]

--------------------------------
Class: BPC_BuyResurrection_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb8, Size: 0x8]
	UI_WorldMark_ReviveTeammates_C* DeathBoxMark;//[Offset: 0xc0, Size: 0x8]
	UI_BuyResurrectionPanel_C* UI_BuyResurrectionPanel;//[Offset: 0xc8, Size: 0x8]
	BP_DI_DeathBoxA_TreasureBox_C* DeathBoxRef;//[Offset: 0xd0, Size: 0x8]
	byte State;//[Offset: 0xd8, Size: 0x1]
	int GoldNum;//[Offset: 0xdc, Size: 0x4]
	int WaitingTime;//[Offset: 0xe0, Size: 0x4]
	float ReturnRatio;//[Offset: 0xe4, Size: 0x4]
	float StartTime;//[Offset: 0xe8, Size: 0x4]
	float[] ReturnRatioList;//[Offset: 0xf0, Size: 0x10]
	int BuyLimitedTime;//[Offset: 0x100, Size: 0x4]
	delegate NewStateChange;//[Offset: 0x108, Size: 0x10]
	int NumberOfApplications;//[Offset: 0x118, Size: 0x4]
	int[] PriceList;//[Offset: 0x120, Size: 0x10]
	bool bDeductedOnlyOnceFalg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int TeammateSalary;//[Offset: 0x134, Size: 0x4]
	int ItemID;//[Offset: 0x138, Size: 0x4]
	SolarCharacter* HelpYourTeammates;//[Offset: 0x140, Size: 0x8]
	UI_MapMark_ReviveTeammates_C*[] UI_MapMark_ReviveTeammatesArr;//[Offset: 0x148, Size: 0x10]
	int CompLimitedTime;//[Offset: 0x158, Size: 0x4]
	int PurchasesNum;//[Offset: 0x15c, Size: 0x4]
	SolarCharacter* TeammatesCountingDown;//[Offset: 0x160, Size: 0x8]
	BP_DeathBoxCountdownExec_C* BP_DeathBoxCountdownExec;//[Offset: 0x168, Size: 0x8]
	SCMPlayerState* WaitingResurrectedPlayer;//[Offset: 0x170, Size: 0x8]
	Vector CharacterFlyOffset;//[Offset: 0x178, Size: 0xc]
	bool DelayFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	TimerHandle DelaySetTimeOutHandle;//[Offset: 0x188, Size: 0x8]
	TimerHandle DelaySetNotBuyHandel;//[Offset: 0x190, Size: 0x8]
	float BP_SI_RebornLine_Life;//[Offset: 0x198, Size: 0x4]
	int SaveTeammatesNum;//[Offset: 0x19c, Size: 0x4]
	int ZomborgNum;//[Offset: 0x1a0, Size: 0x4]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0x1a8, Size: 0x8]
	FString[] SavedTeammateIDArr;//[Offset: 0x1b0, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x1c0, Size: 0x10]
	TimerHandle EndJudgmentHander;//[Offset: 0x1d0, Size: 0x8]
	FString[] SavedTeammateNameArr;//[Offset: 0x1d8, Size: 0x10]
	BP_ReviveItemManger_BattleRoyale_C* ReviveItemManger;//[Offset: 0x1e8, Size: 0x8]
	int Withholding;//[Offset: 0x1f0, Size: 0x4]
	SolarCharacter* NoneVal;//[Offset: 0x1f8, Size: 0x8]
	FString GetModuleName();// 0x4c8f29c
	void Judgmenttimeout(out bool IsTimeOut, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x4c8f29c
	void Check Condition(bool DetectMoney, out bool IsSatisfy, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Get_Alive_Team_Player_Num_Num, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4c8f29c
	void Create Punctuation(Vector InputPin, MapMarkBase*[] CallFunc_RegisterMarkToMap_ReturnValue, int CallFunc_Array_Length_ReturnValue, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, UI_WorldMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, MapMarkBase* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, UI_MapMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_Map_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, MapMarkBase* CallFunc_Array_Get_Item, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x4c8f29c
	SCMPlayerState*[] GetTeammatesArr(const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x4c8f29c
	void On All Teammates Killed(const FString[] Temp_string_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BeginSpectateOtherPlayer_ReturnValue, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4c8f29c
	void Get Alive Team Player Num(SCMPlayerState* OutPlayer, out int Num, int NumberOfSurvivingTeammates, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool CallFunc___A_Is_Player_Reviving_Reviving, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x4c8f29c
	void OnRep_TeammatesCountingDown(bool CallFunc_IsServer_ReturnValue, UI_ResurrectionProgress_C* CallFunc_Get_Local_Resurrection_Progress_UI_UIRef, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc__C_GetLocalCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x4c8f29c
	void Get the number of purchases(out int PurchasesNum);// 0x4c8f29c
	void Calculate price and rebate ratio(int[] NewLocalVar, int[] NewLocalVar, float CallFunc_Subtract_FloatFloat_ReturnValue, int[] K2Node_MakeArray_Array, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int[] K2Node_MakeArray_Array, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item);// 0x4c8f29c
	void OnRep_State(Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_ObjectToText_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_ReceiveGold_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x4c8f29c
	void Show Buy Resurrection UI(bool Visible, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_BuyResurrectionPanel_C* K2Node_DynamicCast_AsUI_Buy_Resurrection_Panel, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x4c8f29c
	void ReceiveBeginPlay();// 0x4c8f29c
	void Event_CreatePunctuation(Vector Pos);// 0x4c8f29c
	void Event_RebirthCharacter(SolarPlayerState* CostPlayer);// 0x4c8f29c
	void Event_SetPlayerEnterOpeningState(bool Opening, SCMPlayerState* TargetPlayer);// 0x4c8f29c
	void Event_NotifyTeammatesOfDeath(SolarPlayerState* PlayerState);// 0x4c8f29c
	void Event_EnterBuyResurrectionProcess(SolarPlayerState* PlayerState, bool Affordable);// 0x4c8f29c
	void Event_OnSuccessfulPurchase();// 0x4c8f29c
	void Event_EnableBoxRestart(bool UnLockResurrection);// 0x4c8f29c
	void Event_GiveUpResurrection();// 0x4c8f29c
	void Evnet_OnAllTeammatesKilled();// 0x4c8f29c
	void EventApplyResurrectionClick();// 0x4c8f29c
	void Event_RemovePunctuation();// 0x4c8f29c
	void Event_NotifTeammatesHelp();// 0x4c8f29c
	void Event_ClientPlayerMarkAnim();// 0x4c8f29c
	void Event_SetTeammatesCountingDown(SolarCharacter* TeammatesCountingDown, FString PlayerId);// 0x4c8f29c
	void Notify Server Deduct(SCMPlayerState* CostPlayer);// 0x4c8f29c
	void Event_LeaveWhileWaiting();// 0x4c8f29c
	void Event_CheckAllDeath();// 0x4c8f29c
	void Event_RespondReconnection();// 0x4c8f29c
	void DelaySetTimeOut();// 0x4c8f29c
	void DelaySetNotBuy();// 0x4c8f29c
	void Event_NotifRescueSuccessful(int TeammateSalary);// 0x4c8f29c
	void BuyResurrectionTimeOut();// 0x37b7888
	void EndJudgment();// 0x4c8f29c
	void Event_NotificationOverTimeLimit();// 0x4c8f29c
	void OnDeathboxApproachingExecImpl();// 0x4c8f29c
	void Event_ApproachingExec(BP_SolarCharacterPlayer_C* Character, BP_DeathBoxCountdownExec_C* BPC_CountdownExec);// 0x4c8f29c
	void Event_NotifyServerDeduct(FString PlayerId);// 0x4c8f29c
	void Event_EnterSetTeammatesCountingDown(SolarCharacter* SolarCharacter, FString PlayerId);// 0x4c8f29c
	void Event_LeavingExec(SolarCharacter* SolarCharacter, BPC_CountdownExec_C* BPC_CountdownExec);// 0x4c8f29c
	void Refund(BP_SCustomPlayerStateBase_C* Player);// 0x4c8f29c
	void ExecuteUbergraph_BPC_BuyResurrection(int EntryPoint, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, WidgetComponent* CallFunc_CreateOverheadHUD_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, bool CallFunc_IsServer_ReturnValue, UI_HUD_Gold_C* K2Node_DynamicCast_AsUI_HUD_Gold, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, Vector K2Node_CustomEvent_Pos, SolarPlayerState* K2Node_CustomEvent_CostPlayer, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_ReceiveGold_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_Opening, SCMPlayerState* K2Node_CustomEvent_TargetPlayer, SolarPlayerState* K2Node_CustomEvent_PlayerState, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SolarPlayerState* K2Node_CustomEvent_PlayerState, bool K2Node_CustomEvent_Affordable, bool K2Node_CustomEvent_UnLockResurrection, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, const enum[] K2Node_MakeArray_Array, float CallFunc_Conv_IntToFloat_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, UI_MapMark_ReviveTeammates_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Add_IntInt_ReturnValue, UI_MapMark_ReviveTeammates_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SolarCharacter* K2Node_CustomEvent_TeammatesCountingDown, FString K2Node_CustomEvent_PlayerID, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_Character_BattleRoyale_C* K2Node_DynamicCast_AsBP_Character_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* K2Node_CustomEvent_CostPlayer, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetPlayerNameWithoutUID_ReturnValue, FString CallFunc_GetUserID_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_CustomEvent_TeammateSalary, FText CallFunc_Conv_IntToText_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, Pawn* CallFunc_GetLocalCharacter_ReturnValue, Controller* CallFunc_GetController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_CustomEvent_Character, BP_DeathBoxCountdownExec_C* K2Node_CustomEvent_BPC_CountdownExec, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_DI_DeathBoxA_TreasureBox_C* K2Node_DynamicCast_AsBP_DI_Death_Box_A_Treasure_Box, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, FString K2Node_CustomEvent_PlayerID, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* K2Node_CustomEvent_SolarCharacter, FString K2Node_CustomEvent_PlayerID, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SolarCharacter* K2Node_CustomEvent_SolarCharacter, BPC_CountdownExec_C* K2Node_CustomEvent_BPC_CountdownExec, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, BP_DI_DeathBoxA_TreasureBox_C* K2Node_DynamicCast_AsBP_DI_Death_Box_A_Treasure_Box, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Add_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_StriStri_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_CustomEvent_Player, bool CallFunc_CostGold_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_ReceiveGold_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, BP_LogicBase_C* K2Node_DynamicCast_AsBP_Logic_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue, int Temp_int_Variable, UI_ResurrectionProgress_C* CallFunc_Get_Local_Resurrection_Progress_UI_UIRef, bool CallFunc_IsValid_ReturnValue, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4c8f29c
	void NewStateChange__DelegateSignature(byte State);// 0x4c8f29c

--------------------------------
Class: UI_WorldMark_ReviveTeammates_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x368, Size: 0x8]
	WidgetAnimation* Occupy_Loop_Anim;//[Offset: 0x370, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x378, Size: 0x8]
	Image* Img_BG;//[Offset: 0x380, Size: 0x8]
	Image* Img_Light;//[Offset: 0x388, Size: 0x8]
	Image* Img_Light;//[Offset: 0x390, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x398, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x3a0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3a8, Size: 0x8]
	int HideDistance;//[Offset: 0x3b0, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x3b8, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x3c8, Size: 0x10]
	FString PlayerId;//[Offset: 0x3d8, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4c8f29c
	void SetColor(byte Index, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor);// 0x4c8f29c
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x4c8f29c
	FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x4c8f29c
