Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1e0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x650, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6e0, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x53d2b2d80041
	void HandleTimelineScrubbed();// 0x53d1b2d80041

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xe06b2d80031

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x238, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x23c, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23d, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23d, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23d, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23d, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23d, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23d, Size: 0x1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x240, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0x250, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x260, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0x270, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x280, Size: 0x10]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x290, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x290, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x290, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x290, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x291, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x298, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x2a0, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2a8, Size: 0x4]
	float KillZ;//[Offset: 0x2ac, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2b0, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2b8, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2bc, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2c0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c8, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2d0, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2d8, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2e0, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2e4, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2f0, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2f4, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2f8, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x300, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x320, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x344, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x348, Size: 0x8]
	float TimeDilation;//[Offset: 0x350, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x354, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x358, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x35c, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x360, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x364, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x368, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x36c, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3b0, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3b8, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c8, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3d8, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3e0, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3e8, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3f0, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x400, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x4641b2d80041

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x38]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x61, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x62, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x62, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x63, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x63, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x63, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x6a, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x6b, Size: 0x1]
	byte RemoteRole;//[Offset: 0x6c, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x70, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xa4, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa8, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xb0, Size: 0x40]
	Actor* Owner;//[Offset: 0xf0, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf8, Size: 0x8]
	byte Role;//[Offset: 0x100, Size: 0x1]
	byte NetDormancy;//[Offset: 0x101, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x102, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x103, Size: 0x1]
	int InputPriority;//[Offset: 0x104, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x108, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x110, Size: 0x4]
	int NetTag;//[Offset: 0x114, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x118, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x11c, Size: 0x4]
	float NetPriority;//[Offset: 0x120, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x128, Size: 0x8]
	Actor*[] Children;//[Offset: 0x130, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x140, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x148, Size: 0x10]
	FName[] Layers;//[Offset: 0x160, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x170, Size: 0x8]
	FName[] Tags;//[Offset: 0x180, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x190, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x191, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x192, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x193, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x194, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x195, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x196, Size: 0x1]
	delegate OnClicked;//[Offset: 0x197, Size: 0x1]
	delegate OnReleased;//[Offset: 0x198, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x199, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x19a, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x19b, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x19c, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x19d, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x19e, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x19f, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x200, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x210, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x141db2d80041
	void UserConstructionScript();// 0x141cb2d80041
	void TearOff();// 0x141bb2d80041
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x141ab2d80041
	void SetTickGroup(byte NewTickGroup);// 0x1419b2d80041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1418b2d80041
	void SetReplicates(bool bInReplicates);// 0x1417b2d80041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x1416b2d80041
	void SetOwner(Actor* NewOwner);// 0x1415b2d80041
	void SetNetDormancy(byte NewDormancy);// 0x1413b2d80041
	void SetLifeSpan(float InLifespan);// 0x1412b2d80041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x1411b2d80041
	void SetActorTickInterval(float TickInterval);// 0x1410b2d80041
	void SetActorTickEnabled(bool bEnabled);// 0x140fb2d80041
	void SetActorScale3D(Vector NewScale3D);// 0x140eb2d80041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x140db2d80041
	void SetActorHiddenInGame(bool bNewHidden);// 0x140cb2d80041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x140bb2d80041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x140ab2d80041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1409b2d80041
	void ReceiveTick(float DeltaSeconds);// 0x1408b2d80041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1407b2d80041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1406b2d80041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1405b2d80041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1404b2d80041
	void ReceiveDestroyed();// 0x1403b2d80041
	void ReceiveBeginPlay();// 0x1402b2d80041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1401b2d80041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1400b2d80041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x13ffb2d80041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x13feb2d80041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x13fdb2d80041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x13fcb2d80041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x13fbb2d80041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x13fab2d80041
	void ReceiveActorEndCursorOver();// 0x13f9b2d80041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x13f8b2d80041
	void ReceiveActorBeginCursorOver();// 0x13f7b2d80041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x13f6b2d80041
	void OnRep_ReplicateMovement();// 0x13f5b2d80041
	void OnRep_ReplicatedMovement();// 0x13f4b2d80041
	void OnRep_Owner();// 0x13f3b2d80041
	void OnRep_Instigator();// 0x13f2b2d80041
	void OnRep_AttachmentReplication();// 0x13f1b2d80041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x13f0b2d80041
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x13efb2d80041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x13eeb2d80041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13edb2d80041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x13ecb2d80041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13ebb2d80041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13eab2d80041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e9b2d80041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e8b2d80041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e7b2d80041
	void K2_OnReset();// 0x13e6b2d80041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x13e5b2d80041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x13e4b2d80041
	SceneComponent* K2_GetRootComponent();// 0x13e3b2d80041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x13e2b2d80041
	Rotator K2_GetActorRotation();// 0x13e1b2d80041
	Vector K2_GetActorLocation();// 0x13e0b2d80041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x13deb2d80041
	void K2_DestroyComponent(ActorComponent* Component);// 0x13ddb2d80041
	void K2_DestroyActor();// 0x13dcb2d80041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x13dbb2d80041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x13d9b2d80041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x13d8b2d80041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x13d6b2d80041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d5b2d80041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d4b2d80041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d3b2d80041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d2b2d80041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d1b2d80041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d0b2d80041
	bool IsOverlappingActor(const Actor* Other);// 0x13cfb2d80041
	bool IsChildActor();// 0x13ceb2d80041
	bool IsActorTickEnabled();// 0x13cdb2d80041
	bool IsActorBeingDestroyed();// 0x13ccb2d80041
	bool HasAuthority();// 0x13cbb2d80041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x13cab2d80041
	Vector GetVelocity();// 0x13c9b2d80041
	Transform GetTransform();// 0x13c8b2d80041
	bool GetTickableWhenPaused();// 0x13c7b2d80041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x13c6b2d80041
	byte GetRemoteRole();// 0x13c5b2d80041
	ChildActorComponent* GetParentComponent();// 0x13c4b2d80041
	Actor* GetParentActor();// 0x13c3b2d80041
	Actor* GetOwner();// 0x13c2b2d80041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x13c1b2d80041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x13c0b2d80041
	byte GetLocalRole();// 0x13beb2d80041
	float GetLifeSpan();// 0x13bdb2d80041
	Controller* GetInstigatorController();// 0x13bcb2d80041
	Pawn* GetInstigator();// 0x13bbb2d80041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x13bab2d80041
	float GetInputAxisValue(const FName InputAxisName);// 0x13b9b2d80041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x13b8b2d80041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x13b7b2d80041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x13b6b2d80041
	float GetGameTimeSinceCreation();// 0x13b5b2d80041
	float GetDotProductTo(const Actor* OtherActor);// 0x13b4b2d80041
	float GetDistanceTo(const Actor* OtherActor);// 0x13b3b2d80041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x13b2b2d80041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x13b1b2d80041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x13b0b2d80041
	FName GetAttachParentSocketName();// 0x13afb2d80041
	Actor* GetAttachParentActor();// 0x13aeb2d80041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x13adb2d80041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x13acb2d80041
	Vector GetActorUpVector();// 0x13abb2d80041
	float GetActorTimeDilation();// 0x13aab2d80041
	float GetActorTickInterval();// 0x13a9b2d80041
	Vector GetActorScale3D();// 0x13a8b2d80041
	Vector GetActorRightVector();// 0x13a7b2d80041
	Vector GetActorRelativeScale3D();// 0x13a6b2d80041
	Vector GetActorForwardVector();// 0x13a5b2d80041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x13a4b2d80041
	bool GetActorEnableCollision();// 0x13a3b2d80041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x13a2b2d80041
	void ForceNetUpdate();// 0x13a1b2d80041
	void FlushNetDormancy();// 0x13a0b2d80041
	void EnableInput(PlayerController* PlayerController);// 0x139fb2d80041
	void DisableInput(PlayerController* PlayerController);// 0x139eb2d80041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x139db2d80041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x139cb2d80041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x139bb2d80041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x139ab2d80041
	bool ActorHasTag(FName Tag);// 0x1399b2d80041

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xd0, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe8, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x124, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x130, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x13c, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x148, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x154, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x154, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x154, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x154, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x155, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x155, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x155, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x155, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x155, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x155, Size: 0x1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x155, Size: 0x1]
	byte Mobility;//[Offset: 0x157, Size: 0x1]
	byte DetailMode;//[Offset: 0x158, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x159, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x20a2b2d80041
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x20a1b2d80041
	void SetWorldScale3D(Vector NewScale);// 0x20a0b2d80041
	void SetVisibilityByFlag(bool bNewVisibility, int Flag, bool bPropagateToChildren);// 0x209fb2d80041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x209eb2d80041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x209db2d80041
	void SetRelativeScale3D(Vector NewScale3D);// 0x209cb2d80041
	void SetMobility(byte NewMobility);// 0x209ab2d80041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2099b2d80041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2098b2d80041
	void ResetRelativeTransform();// 0x2097b2d80041
	void OnRep_Visibility(bool OldValue);// 0x2096b2d80041
	void OnRep_Transform();// 0x2095b2d80041
	void OnRep_AttachSocketName();// 0x2094b2d80041
	void OnRep_AttachParent();// 0x2093b2d80041
	void OnRep_AttachChildren();// 0x2092b2d80041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2091b2d80041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2090b2d80041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208fb2d80041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208eb2d80041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208db2d80041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208cb2d80041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208bb2d80041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208ab2d80041
	Transform K2_GetComponentToWorld();// 0x2089b2d80041
	Vector K2_GetComponentScale();// 0x2088b2d80041
	Rotator K2_GetComponentRotation();// 0x2087b2d80041
	Vector K2_GetComponentLocation();// 0x2086b2d80041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x2085b2d80041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2084b2d80041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x2083b2d80041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2082b2d80041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2081b2d80041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2080b2d80041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207fb2d80041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207eb2d80041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207db2d80041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207cb2d80041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207bb2d80041
	bool IsVisible();// 0x207ab2d80041
	bool IsSimulatingPhysics(FName BoneName);// 0x2079b2d80041
	bool IsAnySimulatingPhysics();// 0x2078b2d80041
	Vector GetUpVector();// 0x2077b2d80041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x2075b2d80041
	Rotator GetSocketRotation(FName InSocketName);// 0x2074b2d80041
	Quat GetSocketQuaternion(FName InSocketName);// 0x2073b2d80041
	Vector GetSocketLocation(FName InSocketName);// 0x2072b2d80041
	bool GetShouldUpdatePhysicsVolume();// 0x2071b2d80041
	Vector GetRightVector();// 0x2070b2d80041
	Transform GetRelativeTransform();// 0x206fb2d80041
	PhysicsVolume* GetPhysicsVolume();// 0x206eb2d80041
	void GetParentComponents(out SceneComponent*[] Parents);// 0x206db2d80041
	int GetNumChildrenComponents();// 0x206cb2d80041
	Vector GetForwardVector();// 0x206bb2d80041
	Vector GetComponentVelocity();// 0x206ab2d80041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x2069b2d80041
	SceneComponent* GetChildComponent(int ChildIndex);// 0x2068b2d80041
	FName GetAttachSocketName();// 0x2067b2d80041
	SceneComponent* GetAttachParent();// 0x2066b2d80041
	FName[] GetAllSocketNames();// 0x2065b2d80041
	bool DoesSocketExist(FName InSocketName);// 0x2064b2d80041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x2063b2d80041

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x38]
	FName[] ComponentTags;//[Offset: 0x68, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x8c, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x91, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x92, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x92, Size: 0x1]
	enum CreationMethod;//[Offset: 0x94, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x95, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x96, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x98, Size: 0x10]
	void ToggleActive();// 0xe86b2d80041
	void SetTickGroup(byte NewTickGroup);// 0xe84b2d80041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xe83b2d80041
	void SetIsReplicated(bool ShouldReplicate);// 0xe82b2d80041
	void SetComponentTickInterval(float TickInterval);// 0xe81b2d80041
	void SetComponentTickEnabled(bool bEnabled);// 0xe80b2d80041
	void SetAutoActivate(bool bNewAutoActivate);// 0xe7fb2d80041
	void SetActive(bool bNewActive, bool bReset);// 0xe7eb2d80041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xe7db2d80041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xe7cb2d80041
	void ReceiveTick(float DeltaSeconds);// 0xe7bb2d80041
	void ReceiveEndPlay(byte EndPlayReason);// 0xe7ab2d80041
	void ReceiveBeginPlay();// 0xe79b2d80041
	void OnRep_IsActive();// 0xe78b2d80041
	void K2_DestroyComponent(Object* Object);// 0xe77b2d80041
	bool IsComponentTickEnabled();// 0xe76b2d80041
	bool IsBeingDestroyed();// 0xe75b2d80041
	bool IsActive();// 0xe74b2d80041
	Actor* GetOwner();// 0xe73b2d80041
	float GetComponentTickInterval();// 0xe72b2d80041
	void Deactivate();// 0xe71b2d80041
	bool ComponentHasTag(FName Tag);// 0xe70b2d80041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xe6fb2d80041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xe6eb2d80041
	void Activate(bool bReset);// 0xe6db2d80041

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x268, Size: 0x4]
	int Priority;//[Offset: 0x26c, Size: 0x4]
	float FluidFriction;//[Offset: 0x270, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x230, Size: 0x1]
	Color BrushColor;//[Offset: 0x234, Size: 0x4]
	int PolyFlags;//[Offset: 0x238, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1]
	Model* Brush;//[Offset: 0x240, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x248, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x258, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x4b8, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x4c0, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x2a0, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x2a4, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x2a8, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x2ac, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2ad, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x2ae, Size: 0x1]
	enum LightmapType;//[Offset: 0x2af, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b0, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b1, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b1, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b1, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b1, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b1, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b1, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b1, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b1, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b2, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b2, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b2, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b2, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b2, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b2, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b2, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b2, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b3, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b3, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b3, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b3, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b3, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b3, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b3, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b3, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b4, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b4, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b4, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b4, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b4, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b4, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b5, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b5, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b5, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b5, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b5, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b5, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b5, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b5, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b6, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b6, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b6, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b6, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b6, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b6, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b6, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2b8, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x2ba, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2bb, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2bc, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x2c0, Size: 0x4]
	int MainPassDepthStencilValue;//[Offset: 0x2c4, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x2c8, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x2d8, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x2e8, Size: 0x4]
	int VisibilityId;//[Offset: 0x2ec, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2f0, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x300, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x301, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x302, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x303, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x308, Size: 0x4]
	float BoundsScale;//[Offset: 0x314, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x328, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x338, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x358, Size: 0x130]
	delegate OnComponentHit;//[Offset: 0x488, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x489, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x48a, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x48b, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x48c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x48e, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x48f, Size: 0x1]
	delegate OnClicked;//[Offset: 0x490, Size: 0x1]
	delegate OnReleased;//[Offset: 0x491, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x492, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x493, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x494, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x495, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x4b0, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x2398b2d80041
	void WakeRigidBody(FName BoneName);// 0x2397b2d80041
	void WakeAllRigidBodies();// 0x2396b2d80041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x2395b2d80041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x2394b2d80041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2393b2d80041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x2392b2d80041
	void SetSimulatePhysics(bool bSimulate);// 0x2391b2d80041
	void SetRenderMainPassStencil(bool bValue);// 0x2390b2d80041
	void SetRenderInMainPass(bool bValue);// 0x238fb2d80041
	void SetRenderCustomDepth(bool bValue);// 0x238eb2d80041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x238db2d80041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x238cb2d80041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x238bb2d80041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x238ab2d80041
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2389b2d80041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x2388b2d80041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2387b2d80041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2386b2d80041
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2385b2d80041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x2384b2d80041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2383b2d80041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2382b2d80041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2381b2d80041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2380b2d80041
	void SetMassScale(FName BoneName, float InMassScale);// 0x237fb2d80041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x237eb2d80041
	void SetMainPassStencilValue(int Value);// 0x237db2d80041
	void SetLinearDamping(float InDamping);// 0x237cb2d80041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x237bb2d80041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x237ab2d80041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x2379b2d80041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x2378b2d80041
	void SetEnableGravity(bool bGravityEnabled);// 0x2377b2d80041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x2376b2d80041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x2375b2d80041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x2374b2d80041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x2373b2d80041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2372b2d80041
	void SetCustomDepthStencilValue(int Value);// 0x2371b2d80041
	void SetCullDistance(float NewCullDistance);// 0x2370b2d80041
	void SetConstraintMode(byte ConstraintMode);// 0x236fb2d80041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x236eb2d80041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x236db2d80041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x236cb2d80041
	void SetCollisionObjectType(byte Channel);// 0x236bb2d80041
	void SetCollisionEnabled(byte NewType);// 0x236ab2d80041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2369b2d80041
	void SetCastShadow(bool NewCastShadow);// 0x2368b2d80041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x2367b2d80041
	void SetBoundsScale(float NewBoundsScale);// 0x2366b2d80041
	void SetAngularDamping(float InDamping);// 0x2365b2d80041
	void SetAllUseCCD(bool InUseCCD);// 0x2364b2d80041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2363b2d80041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2362b2d80041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x2361b2d80041
	void SetAllMassScale(float InMassScale);// 0x2360b2d80041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x235fb2d80041
	void PutRigidBodyToSleep(FName BoneName);// 0x235eb2d80041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x235db2d80041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x235cb2d80041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x235bb2d80041
	bool K2_IsQueryCollisionEnabled();// 0x235ab2d80041
	bool K2_IsPhysicsCollisionEnabled();// 0x2359b2d80041
	bool K2_IsCollisionEnabled();// 0x2358b2d80041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2357b2d80041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x2356b2d80041
	bool IsOverlappingActor(const Actor* Other);// 0x2355b2d80041
	bool IsGravityEnabled();// 0x2354b2d80041
	bool IsAnyRigidBodyAwake();// 0x2353b2d80041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2352b2d80041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x2351b2d80041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x234fb2d80041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x234eb2d80041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x234db2d80041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x234cb2d80041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x234bb2d80041
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x234ab2d80041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x2349b2d80041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2348b2d80041
	int GetNumMaterials();// 0x2347b2d80041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x2346b2d80041
	MaterialInterface* GetMaterial(int ElementIndex);// 0x2345b2d80041
	float GetMassScale(FName BoneName);// 0x2344b2d80041
	float GetMass();// 0x2343b2d80041
	float GetLinearDamping();// 0x2342b2d80041
	Vector GetInertiaTensor(FName BoneName);// 0x2341b2d80041
	bool GetGenerateOverlapEvents();// 0x2340b2d80041
	byte GetCollisionResponseToChannel(byte Channel);// 0x233fb2d80041
	FName GetCollisionProfileName();// 0x233eb2d80041
	byte GetCollisionObjectType();// 0x233db2d80041
	byte GetCollisionEnabled();// 0x233cb2d80041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x233bb2d80041
	Vector GetCenterOfMass(FName BoneName);// 0x233ab2d80041
	float GetAngularDamping();// 0x2339b2d80041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x2338b2d80041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x2337b2d80041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x2336b2d80041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x2335b2d80041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x2334b2d80041
	void ClearMoveIgnoreComponents();// 0x2333b2d80041
	void ClearMoveIgnoreActors();// 0x2332b2d80041
	bool CanCharacterStepUp(Pawn* Pawn);// 0x2331b2d80041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x2330b2d80041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x232fb2d80041
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x232eb2d80041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x232db2d80041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x232cb2d80041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x232bb2d80041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x232ab2d80041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x2329b2d80041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x2328b2d80041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x2327b2d80041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2326b2d80041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x2325b2d80041
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2324b2d80041

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130]
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x4999b2d80041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x4998b2d80041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x4997b2d80041
	PhysicalMaterial* GetPhysicalMaterial();// 0x4996b2d80041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x4995b2d80041
	Material* GetBaseMaterial();// 0x4994b2d80041

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 0x1]
	byte DepthCompare;//[Offset: 0x200, Size: 0x1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	byte MainPassStencilCompare;//[Offset: 0x202, Size: 0x1]
	byte MainPassStencilRefValue;//[Offset: 0x203, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x204, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x205, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	byte StencilCompare;//[Offset: 0x207, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x208, Size: 0x1]
	byte RefractionMode;//[Offset: 0x209, Size: 0x1]
	int BlendablePriority;//[Offset: 0x20c, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x218, Size: 0x4]
	Guid StateId;//[Offset: 0x21c, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x22c, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10]
	int LODBias;//[Offset: 0x58, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1]
	byte Filter;//[Offset: 0x5d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1]
	byte LODGroup;//[Offset: 0x5f, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte AddressX;//[Offset: 0xc1, Size: 0x1]
	byte AddressY;//[Offset: 0xc2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x4d75b2d80041
	int Blueprint_GetSizeX();// 0x4d74b2d80041

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileCount;//[Offset: 0x34, Size: 0x4]
	int TileSize;//[Offset: 0x38, Size: 0x4]
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4]
	int StreamLowMips;//[Offset: 0x40, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4]
	int GetTileSize();// 0x530cb2d80041
	int GetTileCount();// 0x530bb2d80041
	int GetTileBorderSize();// 0x530ab2d80041
	int GetSize();// 0x5309b2d80041

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 0xc]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	uint32 BuildHash;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 0x1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 0x10]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x9c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 0x8]
	int LODForCollision;//[Offset: 0xa8, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd0, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xfc, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x108, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x124, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x128, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x140, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x5372b2d80041
	int GetNumSections(int InLOD);// 0x5371b2d80041
	int GetNumLODs();// 0x5370b2d80041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x536fb2d80041
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x536eb2d80041
	int GetMaterialIndex(FName MaterialSlotName);// 0x536db2d80041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x536cb2d80041
	BoxSphereBounds GetBounds();// 0x536bb2d80041
	Box GetBoundingBox();// 0x536ab2d80041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x5369b2d80041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x5368b2d80041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x5367b2d80041
	void AddSocket(StaticMeshSocket* Socket);// 0x5366b2d80041
	FName AddMaterial(MaterialInterface* Material);// 0x5365b2d80041

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x4bffb2d80041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x4bfeb2d80041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x4bfdb2d80041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x4bfcb2d80041

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x4bfbb2d80041
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x4bfab2d80041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x4bf9b2d80041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x4bf8b2d80041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x4bf7b2d80041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x4bf6b2d80041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x4bf5b2d80041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x4bf4b2d80041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x4bf3b2d80041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x4bf2b2d80041
	bool IsVertexValid(VertexID VertexID);// 0x4bf1b2d80041
	bool IsVertexOrphaned(VertexID VertexID);// 0x4bf0b2d80041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x4befb2d80041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x4beeb2d80041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x4bedb2d80041
	bool IsPolygonValid(PolygonID PolygonID);// 0x4becb2d80041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x4bebb2d80041
	bool IsEmpty();// 0x4beab2d80041
	bool IsEdgeValid(EdgeID EdgeID);// 0x4be9b2d80041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x4be8b2d80041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x4be7b2d80041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x4be6b2d80041
	Vector GetVertexPosition(VertexID VertexID);// 0x4be5b2d80041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x4be4b2d80041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x4be3b2d80041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x4be2b2d80041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x4be1b2d80041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x4be0b2d80041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x4bdfb2d80041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x4bdeb2d80041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x4bddb2d80041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x4bdcb2d80041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x4bdbb2d80041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x4bdab2d80041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x4bd9b2d80041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x4bd8b2d80041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x4bd7b2d80041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x4bd6b2d80041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x4bd5b2d80041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x4bd4b2d80041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x4bd3b2d80041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x4bd2b2d80041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x4bd1b2d80041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x4bd0b2d80041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x4bcfb2d80041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x4bceb2d80041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x4bcdb2d80041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x4bccb2d80041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x4bcbb2d80041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x4bcab2d80041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x4bc9b2d80041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x4bc8b2d80041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x4bc7b2d80041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x4bc6b2d80041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x4bc5b2d80041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x4bc4b2d80041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x4bc3b2d80041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x4bc2b2d80041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x4bc1b2d80041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x4bc0b2d80041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x4bbfb2d80041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x4bbeb2d80041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x4bbdb2d80041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x4bbcb2d80041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x4bbbb2d80041
	void Empty();// 0x4bbab2d80041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x4bb9b2d80041
	void DeleteVertex(VertexID VertexID);// 0x4bb8b2d80041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x4bb7b2d80041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x4bb6b2d80041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x4bb5b2d80041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x4bb4b2d80041
	void CreateVertexWithID(VertexID VertexID);// 0x4bb3b2d80041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x4bb2b2d80041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x4bb1b2d80041
	VertexID CreateVertex();// 0x4bb0b2d80041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4bafb2d80041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4baeb2d80041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4badb2d80041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x4bacb2d80041
	PolygonGroupID CreatePolygonGroup();// 0x4babb2d80041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4baab2d80041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x4ba9b2d80041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x4ba8b2d80041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x4ba7b2d80041

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x5294b2d80041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x5293b2d80041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x5292b2d80041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x5291b2d80041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x5290b2d80041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x528fb2d80041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x528eb2d80041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x528db2d80041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x528cb2d80041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x528bb2d80041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x528ab2d80041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x5289b2d80041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x5288b2d80041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x5287b2d80041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x5286b2d80041
	void CopyInterpParameters(MaterialInstance* Source);// 0x5285b2d80041

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x238, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x23c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x240, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x241, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x242, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x248, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x250, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x260, Size: 0x8]
	Controller* Controller;//[Offset: 0x268, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x274, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x280, Size: 0xc]
	void SpawnDefaultController();// 0x15b5b2d80041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x15b4b2d80041
	void ReceiveUnpossessed(Controller* OldController);// 0x15b3b2d80041
	void ReceivePossessed(Controller* NewController);// 0x15b2b2d80041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x15b1b2d80041
	void OnRep_PlayerState();// 0x15b0b2d80041
	void OnRep_Controller();// 0x15afb2d80041
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x15aeb2d80041
	Vector K2_GetMovementInputVector();// 0x15adb2d80041
	bool IsPlayerControlled();// 0x15acb2d80041
	bool IsPawnControlled();// 0x15abb2d80041
	bool IsMoveInputIgnored();// 0x15aab2d80041
	bool IsLocallyControlled();// 0x15a9b2d80041
	bool IsControlled();// 0x15a8b2d80041
	bool IsBotControlled();// 0x15a7b2d80041
	Vector GetPendingMovementInputVector();// 0x15a6b2d80041
	Vector GetNavAgentLocation();// 0x15a5b2d80041
	PawnMovementComponent* GetMovementComponent();// 0x15a4b2d80041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x15a3b2d80041
	Vector GetLastMovementInputVector();// 0x15a2b2d80041
	Rotator GetControlRotation();// 0x15a1b2d80041
	Controller* GetController();// 0x15a0b2d80041
	Rotator GetBaseAimRotation();// 0x159fb2d80041
	void DetachFromControllerPendingDestroy();// 0x159eb2d80041
	Vector ConsumeMovementInputVector();// 0x159db2d80041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x159cb2d80041
	void AddControllerYawInput(float Val);// 0x159bb2d80041
	void AddControllerRollInput(float Val);// 0x159ab2d80041
	void AddControllerPitchInput(float Val);// 0x1599b2d80041

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x238, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x248, Size: 0x10]
	FName StateName;//[Offset: 0x258, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x260, Size: 0x8]
	Character* Character;//[Offset: 0x270, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x278, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2b0, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	void UnPossess();// 0x185db2d80041
	void StopMovement();// 0x185cb2d80041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x185bb2d80041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x185ab2d80041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x1859b2d80041
	void SetControlRotation(out const Rotator NewRotation);// 0x1858b2d80041
	void ResetIgnoreMoveInput();// 0x1857b2d80041
	void ResetIgnoreLookInput();// 0x1856b2d80041
	void ResetIgnoreInputFlags();// 0x1855b2d80041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x1854b2d80041
	void ReceivePossess(Pawn* PossessedPawn);// 0x1853b2d80041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1852b2d80041
	void Possess(Pawn* InPawn);// 0x1851b2d80041
	void OnRep_PlayerState();// 0x1850b2d80041
	void OnRep_Pawn();// 0x184fb2d80041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x184eb2d80041
	Pawn* K2_GetPawn();// 0x184db2d80041
	bool IsPlayerController();// 0x184cb2d80041
	bool IsMoveInputIgnored();// 0x184bb2d80041
	bool IsLookInputIgnored();// 0x184ab2d80041
	bool IsLocalPlayerController();// 0x1849b2d80041
	bool IsLocalController();// 0x1848b2d80041
	Actor* GetViewTarget();// 0x1847b2d80041
	Rotator GetDesiredRotation();// 0x1846b2d80041
	Rotator GetControlRotation();// 0x1845b2d80041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x1844b2d80041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x1843b2d80041
	PlayerController* CastToPlayerController();// 0x1842b2d80041

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x230, Size: 0x4]
	int PlayerId;//[Offset: 0x234, Size: 0x4]
	byte Ping;//[Offset: 0x238, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23a, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23a, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23a, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23a, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23a, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23a, Size: 0x1]
	int StartTime;//[Offset: 0x23c, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x240, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x250, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x260, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x290, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x308, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x14f4b2d80041
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x14f3b2d80041
	void OnRep_UniqueId();// 0x14f2b2d80041
	void OnRep_Score();// 0x14f1b2d80041
	void OnRep_PlayerName();// 0x14f0b2d80041
	void OnRep_PlayerId();// 0x14efb2d80041
	void OnRep_bIsInactive();// 0x14eeb2d80041
	FString GetPlayerName();// 0x14edb2d80041

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x290, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x298, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2a0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a8, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d8, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x308, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x30c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x320, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x330, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x334, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x338, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x33c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x340, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x340, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x340, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x340, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x340, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x341, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x341, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x341, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x344, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x348, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x34c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x350, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x354, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x358, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x360, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x380, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x390, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3a0, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3e0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x420, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x430, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x15e6b2d80041
	void StopJumping();// 0x15e5b2d80041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x15e4b2d80041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x15e3b2d80041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x15e2b2d80041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x15e1b2d80041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x15e0b2d80041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x15dfb2d80041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x15deb2d80041
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x15ddb2d80041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x15dcb2d80041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x15dbb2d80041
	void OnRep_RootMotion();// 0x15dab2d80041
	void OnRep_ReplicatedBasedMovement();// 0x15d9b2d80041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x15d8b2d80041
	void OnRep_IsCrouched();// 0x15d7b2d80041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x15d6b2d80041
	void OnLanded(out const HitResult Hit);// 0x15d5b2d80041
	void OnJumped();// 0x15d4b2d80041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x15d3b2d80041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x15d2b2d80041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x15d1b2d80041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x15d0b2d80041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x15cfb2d80041
	void Jump();// 0x15ceb2d80041
	bool IsPlayingRootMotion();// 0x15cdb2d80041
	bool IsPlayingNetworkedRootMotionMontage();// 0x15ccb2d80041
	bool IsJumpProvidingForce();// 0x15cbb2d80041
	bool HasAnyRootMotion();// 0x15cab2d80041
	AnimMontage* GetCurrentMontage();// 0x15c9b2d80041
	Vector GetBaseTranslationOffset();// 0x15c8b2d80041
	Rotator GetBaseRotationOffsetRotator();// 0x15c7b2d80041
	float GetAnimRootMotionTranslationScale();// 0x15c6b2d80041
	void Crouch(bool bClientSimulation);// 0x15c5b2d80041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x15c4b2d80041
	void ClientCheatWalk();// 0x15c3b2d80041
	void ClientCheatGhost();// 0x15c2b2d80041
	void ClientCheatFly();// 0x15c1b2d80041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x15beb2d80041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x15bdb2d80041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x15bcb2d80041
	void ClientAckGoodMove(float Timestamp);// 0x15bbb2d80041
	bool CanJumpInternal();// 0x15bab2d80041
	bool CanJump();// 0x15b9b2d80041
	bool CanCrouch();// 0x15b8b2d80041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x15b7b2d80041

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x4ca6b2d80041

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x4ca5b2d80041

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x4d71b2d80041

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x4d70b2d80041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x4d6fb2d80041

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	int TrackIndex;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x3319b2d80041
	FString GetNotifyName();// 0x3318b2d80041

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6f0, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x6f8, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x700, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x708, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x710, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x738, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x744, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x770, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x780, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x790, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x7c0, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x7c4, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x7c5, Size: 0x1]
	byte AnimationMode;//[Offset: 0x7c7, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c9, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c9, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c9, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c9, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c9, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ca, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ca, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ca, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ca, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ca, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cb, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cb, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cb, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cb, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cb, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cb, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cb, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x7d0, Size: 0x2]
	enum MassMode;//[Offset: 0x7d2, Size: 0x1]
	float UniformMass;//[Offset: 0x7d4, Size: 0x4]
	float TotalMass;//[Offset: 0x7d8, Size: 0x4]
	float Density;//[Offset: 0x7dc, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x7e0, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x7e4, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x7e8, Size: 0x4]
	float BendingStiffness;//[Offset: 0x7ec, Size: 0x4]
	float AreaStiffness;//[Offset: 0x7f0, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x7f4, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x7f8, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x7fc, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x800, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x810, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x820, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x830, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x910, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x914, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x920, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x980, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xa50, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x2c32b2d80041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x2c31b2d80041
	void ToggleDisablePostProcessBlueprint();// 0x2c30b2d80041
	void TermBodiesBelow(FName ParentBoneName);// 0x2c2fb2d80041
	void SuspendClothingSimulation();// 0x2c2eb2d80041
	void Stop();// 0x2c2db2d80041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x2c2cb2d80041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x2c2bb2d80041
	void SetTeleportRotationThreshold(float Threshold);// 0x2c2ab2d80041
	void SetTeleportDistanceThreshold(float Threshold);// 0x2c29b2d80041
	void SetPosition(float InPos, bool bFireNotifies);// 0x2c28b2d80041
	void SetPlayRate(float Rate);// 0x2c27b2d80041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x2c26b2d80041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x2c25b2d80041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x2c24b2d80041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x2c23b2d80041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x2c22b2d80041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x2c21b2d80041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x2c20b2d80041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x2c1fb2d80041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x2c1eb2d80041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x2c1db2d80041
	void SetClothMaxDistanceScale(float Scale);// 0x2c1cb2d80041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x2c1bb2d80041
	void SetAnimClass(class Object NewClass);// 0x2c1ab2d80041
	void SetAnimationMode(byte InAnimationMode);// 0x2c19b2d80041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x2c18b2d80041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x2c17b2d80041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x2c16b2d80041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x2c15b2d80041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x2c14b2d80041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2c13b2d80041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2c12b2d80041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x2c11b2d80041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x2c10b2d80041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2c0fb2d80041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x2c0eb2d80041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x2c0db2d80041
	void ResumeClothingSimulation();// 0x2c0cb2d80041
	void ResetClothTeleportMode();// 0x2c0bb2d80041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x2c0ab2d80041
	void ResetAllowedAnimCurveEvaluation();// 0x2c09b2d80041
	void ResetAllBodiesSimulatePhysics();// 0x2c08b2d80041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x2c07b2d80041
	void Play(bool bLooping);// 0x2c06b2d80041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x2c05b2d80041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x2c04b2d80041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x2c03b2d80041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x2c02b2d80041
	bool IsPlaying();// 0x2c01b2d80041
	bool IsClothingSimulationSuspended();// 0x2c00b2d80041
	bool IsBodyGravityEnabled(FName BoneName);// 0x2bffb2d80041
	bool HasValidAnimationInstance();// 0x2bfeb2d80041
	float GetTeleportRotationThreshold();// 0x2bfdb2d80041
	float GetTeleportDistanceThreshold();// 0x2bfcb2d80041
	Vector GetSkeletalCenterOfMass();// 0x2bfbb2d80041
	AnimInstance* GetPostProcessInstance();// 0x2bfab2d80041
	float GetPosition();// 0x2bf9b2d80041
	float GetPlayRate();// 0x2bf8b2d80041
	float GetMorphTarget(FName MorphTargetName);// 0x2bf7b2d80041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x2bf6b2d80041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x2bf5b2d80041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x2bf4b2d80041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x2bf3b2d80041
	bool GetDisablePostProcessBlueprint();// 0x2bf2b2d80041
	bool GetDisableAnimCurves();// 0x2bf1b2d80041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x2bf0b2d80041
	float GetClothMaxDistanceScale();// 0x2befb2d80041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x2beeb2d80041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x2bedb2d80041
	AnimInstance* GetAnimInstance();// 0x2becb2d80041
	class Object GetAnimClass();// 0x2bebb2d80041
	byte GetAnimationMode();// 0x2beab2d80041
	bool GetAllowRigidBodyAnimNode();// 0x2be9b2d80041
	bool GetAllowedAnimCurveEvaluate();// 0x2be8b2d80041
	void ForceClothNextUpdateTeleportAndReset();// 0x2be7b2d80041
	void ForceClothNextUpdateTeleport();// 0x2be6b2d80041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x2be5b2d80041
	void ClearMorphTargets();// 0x2be4b2d80041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x2be3b2d80041
	void BindClothToMasterPoseComponent();// 0x2be2b2d80041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x2be1b2d80041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x2be0b2d80041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x2bdfb2d80041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2bdeb2d80041

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x4e0, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x4e8, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x4f0, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5f8, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x600, Size: 0x4]
	int MinLodModel;//[Offset: 0x604, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x614, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x620, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x654, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x656, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x656, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x656, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x656, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x656, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x656, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x657, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x657, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x657, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x657, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x657, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x657, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x657, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x657, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x658, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x658, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x658, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x658, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x658, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x658, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x659, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x65c, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x670, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x690, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x2bddb2d80041
	void UnHideBoneByName(FName BoneName);// 0x2bdcb2d80041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2bdbb2d80041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2bdab2d80041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x2bd9b2d80041
	void ShowAllMaterialSections(int LODIndex);// 0x2bd8b2d80041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x2bd7b2d80041
	bool SetSkinWeightProfile(FName InProfileName);// 0x2bd6b2d80041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x2bd5b2d80041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x2bd4b2d80041
	void SetRenderStatic(bool bNewValue);// 0x2bd3b2d80041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x2bd2b2d80041
	void SetMinLOD(int InNewMinLOD);// 0x2bd1b2d80041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x2bd0b2d80041
	void SetForcedLOD(int InNewForcedLOD);// 0x2bcfb2d80041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x2bceb2d80041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x2bcdb2d80041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x2bccb2d80041
	bool IsUsingSkinWeightProfile();// 0x2bcbb2d80041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x2bcab2d80041
	bool IsBoneHiddenByName(FName BoneName);// 0x2bc9b2d80041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x2bc8b2d80041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x2bc7b2d80041
	FName GetSocketBoneName(FName InSocketName);// 0x2bc6b2d80041
	Vector GetRefPosePosition(int BoneIndex);// 0x2bc5b2d80041
	FName GetParentBone(FName BoneName);// 0x2bc4b2d80041
	int GetNumLODs();// 0x2bc3b2d80041
	int GetNumBones();// 0x2bc2b2d80041
	int GetForcedLOD();// 0x2bc1b2d80041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x2bc0b2d80041
	FName GetCurrentSkinWeightProfileName();// 0x2bbfb2d80041
	FName GetBoneName(int BoneIndex);// 0x2bbeb2d80041
	int GetBoneIndex(FName BoneName);// 0x2bbdb2d80041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x2bbcb2d80041
	void ClearVertexColorOverride(int LODIndex);// 0x2bbbb2d80041
	void ClearSkinWeightProfile();// 0x2bbab2d80041
	void ClearSkinWeightOverride(int LODIndex);// 0x2bb9b2d80041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x2bb8b2d80041

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x4b8, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d8, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x23a5b2d80041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x23a4b2d80041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x23a3b2d80041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x23a2b2d80041
	FName[] GetMaterialSlotNames();// 0x23a1b2d80041
	MaterialInterface*[] GetMaterials();// 0x23a0b2d80041
	int GetMaterialIndex(FName MaterialSlotName);// 0x239fb2d80041

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4]
	byte LODGroup;//[Offset: 0x13c, Size: 0x1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x13d, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x13e, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x13f, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x531db2d80041
	int NumSockets();// 0x531cb2d80041
	FString[] K2_GetAllMorphTargetNames();// 0x531bb2d80041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x531ab2d80041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x5319b2d80041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x5318b2d80041
	BoxSphereBounds GetImportedBounds();// 0x5317b2d80041
	BoxSphereBounds GetBounds();// 0x5316b2d80041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x5315b2d80041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x5314b2d80041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x5313b2d80041

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x5323b2d80041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x5322b2d80041

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x3021b2d80041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3020b2d80041
	Pawn* TryGetPawnOwner();// 0x301fb2d80041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x301eb2d80041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x301db2d80041
	void SetRootMotionMode(byte Value);// 0x301cb2d80041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x301bb2d80041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x301ab2d80041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x3019b2d80041
	void SavePoseSnapshot(FName SnapshotName);// 0x3018b2d80041
	void ResetDynamics(enum InTeleportType);// 0x3017b2d80041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x3016b2d80041
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x3015b2d80041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x3014b2d80041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x3013b2d80041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x3012b2d80041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x3011b2d80041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x3010b2d80041
	void Montage_Resume(const AnimMontage* Montage);// 0x300fb2d80041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x300eb2d80041
	void Montage_Pause(const AnimMontage* Montage);// 0x300db2d80041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x300cb2d80041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x300bb2d80041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x300ab2d80041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x3009b2d80041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x3008b2d80041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x3007b2d80041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3006b2d80041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3005b2d80041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3004b2d80041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3003b2d80041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3002b2d80041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3001b2d80041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3000b2d80041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x2fffb2d80041
	bool IsAnyMontagePlaying();// 0x2ffeb2d80041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x2ffdb2d80041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x2ffcb2d80041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x2ffbb2d80041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x2ffab2d80041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x2ff9b2d80041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x2ff8b2d80041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x2ff7b2d80041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x2ff6b2d80041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x2ff5b2d80041
	bool GetPropagateNotifiesToLinkedInstances();// 0x2ff4b2d80041
	SkeletalMeshComponent* GetOwningComponent();// 0x2ff3b2d80041
	Actor* GetOwningActor();// 0x2ff2b2d80041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x2ff1b2d80041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x2ff0b2d80041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x2fefb2d80041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x2feeb2d80041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x2fedb2d80041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x2fecb2d80041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x2febb2d80041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x2feab2d80041
	float GetInstanceMachineWeight(int MachineIndex);// 0x2fe9b2d80041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x2fe8b2d80041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x2fe7b2d80041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x2fe6b2d80041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x2fe5b2d80041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x2fe4b2d80041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x2fe3b2d80041
	float GetCurveValue(FName CurveName);// 0x2fe2b2d80041
	FName GetCurrentStateName(int MachineIndex);// 0x2fe1b2d80041
	AnimMontage* GetCurrentActiveMontage();// 0x2fe0b2d80041
	void GetAllCurveNames(out FName[] OutNames);// 0x2fdfb2d80041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x2fdeb2d80041
	void ClearMorphTargets();// 0x2fddb2d80041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x2fdcb2d80041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x2fdbb2d80041
	void BlueprintPostEvaluateAnimation();// 0x2fdab2d80041
	void BlueprintLinkedAnimationLayersInitialized();// 0x2fd9b2d80041
	void BlueprintInitializeAnimation();// 0x2fd8b2d80041
	void BlueprintBeginPlay();// 0x2fd7b2d80041

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x4d7ab2d80041

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x4d73b2d80041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x4d72b2d80041

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x4c04b2d80041
	void PhysicsAssetUpdated();// 0x4c03b2d80041
	void EnableGravityOverride(out const Vector InVector);// 0x4c02b2d80041
	void DisableGravityOverride();// 0x4c01b2d80041
	void ClothConfigUpdated();// 0x4c00b2d80041

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x2d8cb2d80041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2d8bb2d80041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x2d8ab2d80041
	FString GetNotifyName();// 0x2d89b2d80041

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x150, Size: 0x8]
	float GravityScale;//[Offset: 0x158, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x15c, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x160, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x164, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x168, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x16c, Size: 0x4]
	byte MovementMode;//[Offset: 0x170, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x171, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x172, Size: 0x1]
	float GroundFriction;//[Offset: 0x174, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1a0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1a4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x1a8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x1ac, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1b0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1b4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1b8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1bc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1c0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1c4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1c8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1cc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1d0, Size: 0x4]
	float AirControl;//[Offset: 0x1d4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1d8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1dc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1e0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1e4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1e8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1ec, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1f0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1f4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x201, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x202, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x202, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x202, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x202, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x208, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x210, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x214, Size: 0x4]
	float Mass;//[Offset: 0x218, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x21c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x220, Size: 0x4]
	float PushForceFactor;//[Offset: 0x224, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x228, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x22c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x230, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x234, Size: 0x4]
	float RepulsionForce;//[Offset: 0x238, Size: 0x4]
	Vector Acceleration;//[Offset: 0x23c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x260, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x26c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x278, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x27c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x280, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x284, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x290, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x29c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x2ac, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2b0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2b4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2b8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2bc, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2c0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2c4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2c8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2cc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2d0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2d4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2d8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2e0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2e4, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2e8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2ec, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2f0, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2f4, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2f8, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2fc, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x300, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x394, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x395, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x396, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x397, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x397, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x397, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x397, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x398, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x398, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x398, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x398, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x398, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x398, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x398, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x399, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x399, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x399, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x399, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x399, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x399, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x399, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39a, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39a, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39a, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39a, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39a, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39a, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3ac, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3b0, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3bc, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3c0, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3c4, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3c8, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3cc, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3d0, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x480, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x484, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x488, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x48c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x490, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x494, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x498, Size: 0x38]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4e8, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4f0, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5c0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x600, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x3133b2d80041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x3132b2d80041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x3131b2d80041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x3130b2d80041
	void SetGroupsToIgnore(int GroupFlags);// 0x312fb2d80041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x312eb2d80041
	void SetGroupsToAvoid(int GroupFlags);// 0x312db2d80041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x312cb2d80041
	void SetAvoidanceGroup(int GroupFlags);// 0x312bb2d80041
	void SetAvoidanceEnabled(bool bEnable);// 0x312ab2d80041
	float K2_GetWalkableFloorZ();// 0x3129b2d80041
	float K2_GetWalkableFloorAngle();// 0x3128b2d80041
	float K2_GetModifiedMaxAcceleration();// 0x3127b2d80041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x3126b2d80041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x3125b2d80041
	bool IsWalking();// 0x3124b2d80041
	bool IsWalkable(out const HitResult Hit);// 0x3123b2d80041
	float GetValidPerchRadius();// 0x3122b2d80041
	float GetPerchRadiusThreshold();// 0x3121b2d80041
	PrimitiveComponent* GetMovementBase();// 0x3120b2d80041
	float GetMinAnalogSpeed();// 0x311fb2d80041
	float GetMaxJumpHeightWithJumpTime();// 0x311eb2d80041
	float GetMaxJumpHeight();// 0x311db2d80041
	float GetMaxBrakingDeceleration();// 0x311cb2d80041
	float GetMaxAcceleration();// 0x311bb2d80041
	Vector GetLastUpdateVelocity();// 0x311ab2d80041
	Rotator GetLastUpdateRotation();// 0x3119b2d80041
	Vector GetLastUpdateLocation();// 0x3118b2d80041
	Vector GetImpartedMovementBaseVelocity();// 0x3117b2d80041
	Vector GetCurrentAcceleration();// 0x3116b2d80041
	Character* GetCharacterOwner();// 0x3115b2d80041
	float GetAnalogInputModifier();// 0x3114b2d80041
	void DisableMovement();// 0x3113b2d80041
	void ClearAccumulatedForces();// 0x3112b2d80041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3111b2d80041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x3110b2d80041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x310fb2d80041
	void AddForce(Vector Force);// 0x310eb2d80041

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x138, Size: 0x8]
	Vector K2_GetInputVector();// 0x310db2d80041
	bool IsMoveInputIgnored();// 0x310cb2d80041
	Vector GetPendingInputVector();// 0x310bb2d80041
	Pawn* GetPawnOwner();// 0x310ab2d80041
	Vector GetLastInputVector();// 0x3109b2d80041
	Vector ConsumeInputVector();// 0x3108b2d80041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x3107b2d80041

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf8, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x128, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12c, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x12d, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x130, Size: 0x8]
	void StopMovementKeepPathing();// 0x3106b2d80041
	void StopActiveMovement();// 0x3105b2d80041
	bool IsSwimming();// 0x3104b2d80041
	bool IsMovingOnGround();// 0x3103b2d80041
	bool IsFlying();// 0x3102b2d80041
	bool IsFalling();// 0x3101b2d80041
	bool IsCrouching();// 0x3100b2d80041

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb8, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 0x8]
	Vector Velocity;//[Offset: 0xcc, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xf3, Size: 0x1]
	void StopMovementImmediately();// 0xeb3b2d80041
	void SnapUpdatedComponentToPlane();// 0xeb2b2d80041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xeb1b2d80041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xeb0b2d80041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xeafb2d80041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xeaeb2d80041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xeadb2d80041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xeacb2d80041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xeabb2d80041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xeaab2d80041
	float K2_GetModifiedMaxSpeed();// 0xea9b2d80041
	float K2_GetMaxSpeedModifier();// 0xea8b2d80041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xea7b2d80041
	Vector GetPlaneConstraintOrigin();// 0xea6b2d80041
	Vector GetPlaneConstraintNormal();// 0xea5b2d80041
	enum GetPlaneConstraintAxisSetting();// 0xea3b2d80041
	PhysicsVolume* GetPhysicsVolume();// 0xea2b2d80041
	float GetMaxSpeed();// 0xea1b2d80041
	float GetGravityZ();// 0xea0b2d80041
	Vector ConstrainNormalToPlane(Vector Normal);// 0xe9fb2d80041
	Vector ConstrainLocationToPlane(Vector Location);// 0xe9eb2d80041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xe9db2d80041

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x4d0, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x4d4, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x3f04b2d80041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x3f03b2d80041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x3f02b2d80041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3f01b2d80041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3f00b2d80041
	float GetUnscaledCapsuleRadius();// 0x3effb2d80041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x3efeb2d80041
	float GetUnscaledCapsuleHalfHeight();// 0x3efdb2d80041
	float GetShapeScale();// 0x3efcb2d80041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3efbb2d80041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3efab2d80041
	float GetScaledCapsuleRadius();// 0x3ef9b2d80041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x3ef8b2d80041
	float GetScaledCapsuleHalfHeight();// 0x3ef7b2d80041

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x4b8, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x4c0, Size: 0x8]
	Color ShapeColor;//[Offset: 0x4c8, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4cc, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4cc, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4cc, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2c0, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c8, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2d0, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d8, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2e0, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e8, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2f4, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x30c, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x318, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x328, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x33c, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x340, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x34c, Size: 0xc]
	int ClientCap;//[Offset: 0x358, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x360, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x368, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x370, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x378, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f8, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f9, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x438, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x440, Size: 0x8]
	float InputYawScale;//[Offset: 0x454, Size: 0x4]
	float InputPitchScale;//[Offset: 0x458, Size: 0x4]
	float InputRollScale;//[Offset: 0x45c, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x460, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x460, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x460, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x460, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x460, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x464, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x468, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x478, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x479, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x47a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x47b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x47c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x480, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x482, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x510, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x518, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x530, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x588, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x598, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x18efb2d80041
	bool WasInputKeyJustPressed(Key Key);// 0x18eeb2d80041
	void ToggleSpeaking(bool bInSpeaking);// 0x18edb2d80041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x18ecb2d80041
	void SwitchLevel(FString URL);// 0x18ebb2d80041
	void StopHapticEffect(enum Hand);// 0x18eab2d80041
	void StartFire(byte FireModeNum);// 0x18e9b2d80041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x18e8b2d80041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x18e7b2d80041
	void SetName(FString S);// 0x18e6b2d80041
	void SetMouseLocation(const int X, const int Y);// 0x18e5b2d80041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x18e3b2d80041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x18e2b2d80041
	void SetDisableHaptics(bool bNewDisabled);// 0x18e1b2d80041
	void SetControllerLightColor(Color Color);// 0x18e0b2d80041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x18dfb2d80041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x18deb2d80041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x18ddb2d80041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x18dcb2d80041
	void ServerViewPrevPlayer();// 0x18dbb2d80041
	void ServerViewNextPlayer();// 0x18dab2d80041
	void ServerVerifyViewTarget();// 0x18d9b2d80041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x18d8b2d80041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x18d6b2d80041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x18d5b2d80041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x18d4b2d80041
	void ServerToggleAILogging();// 0x18d3b2d80041
	void ServerShortTimeout();// 0x18d2b2d80041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x18d1b2d80041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x18d0b2d80041
	void ServerRestartPlayer();// 0x18cfb2d80041
	void ServerPause();// 0x18ceb2d80041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x18cdb2d80041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x18ccb2d80041
	void ServerExecRPC(FString Msg);// 0x18cbb2d80041
	void ServerExec(FString Msg);// 0x18cab2d80041
	void ServerCheckClientPossessionReliable();// 0x18c9b2d80041
	void ServerCheckClientPossession();// 0x18c8b2d80041
	void ServerChangeName(FString S);// 0x18c7b2d80041
	void ServerCamera(FName NewMode);// 0x18c6b2d80041
	void ServerAcknowledgePossession(Pawn* P);// 0x18c5b2d80041
	void SendToConsole(FString Command);// 0x18c4b2d80041
	void RestartLevel();// 0x18c3b2d80041
	void ResetControllerLightColor();// 0x18c2b2d80041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x18c1b2d80041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x18bfb2d80041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x18bdb2d80041
	void Pause();// 0x18bcb2d80041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x18bbb2d80041
	void LocalTravel(FString URL);// 0x18bab2d80041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x18b9b2d80041
	bool IsInputKeyDown(Key Key);// 0x18b8b2d80041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x18b7b2d80041
	SpectatorPawn* GetSpectatorPawn();// 0x18b6b2d80041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x18b5b2d80041
	Vector GetInputVectorKeyState(Key Key);// 0x18b4b2d80041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x18b3b2d80041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x18b2b2d80041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x18b1b2d80041
	float GetInputKeyTimeDown(Key Key);// 0x18b0b2d80041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x18aeb2d80041
	float GetInputAnalogKeyState(Key Key);// 0x18adb2d80041
	HUD* GetHUD();// 0x18acb2d80041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x18abb2d80041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x18aab2d80041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x18a9b2d80041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x18a8b2d80041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x18a7b2d80041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x18a5b2d80041
	Vector GetFocalLocation();// 0x18a4b2d80041
	void FOV(float NewFOV);// 0x18a3b2d80041
	void EnableCheats();// 0x18a2b2d80041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x18a1b2d80041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x18a0b2d80041
	void ConsoleKey(Key Key);// 0x189fb2d80041
	void ClientWasKicked(const FText KickReason);// 0x189eb2d80041
	void ClientVoiceHandshakeComplete();// 0x189db2d80041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x189bb2d80041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x189ab2d80041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x1899b2d80041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1898b2d80041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1897b2d80041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x1896b2d80041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x1895b2d80041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x1894b2d80041
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x1893b2d80041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x1892b2d80041
	void ClientStartOnlineSession();// 0x1891b2d80041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x1890b2d80041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x188db2d80041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x188cb2d80041
	void ClientSetHUD(class HUD NewHUDClass);// 0x188bb2d80041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x188ab2d80041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x1889b2d80041
	void ClientSetCameraMode(FName NewCamMode);// 0x1888b2d80041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x1887b2d80041
	void ClientSetBlockOnAsyncLoading();// 0x1886b2d80041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x1885b2d80041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x1884b2d80041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x1883b2d80041
	void ClientRestart(Pawn* NewPawn);// 0x1882b2d80041
	void ClientReset();// 0x1881b2d80041
	void ClientRepObjRef(Object* Object);// 0x1880b2d80041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x187fb2d80041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x187eb2d80041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x187db2d80041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x187cb2d80041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x187bb2d80041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x1879b2d80041
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x1878b2d80041
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x1877b2d80041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x1875b2d80041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x1874b2d80041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x1873b2d80041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x1872b2d80041
	void ClientIgnoreLookInput(bool bIgnore);// 0x1871b2d80041
	void ClientGotoState(FName NewState);// 0x1870b2d80041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x186fb2d80041
	void ClientForceGarbageCollection();// 0x186eb2d80041
	void ClientFlushLevelStreaming();// 0x186db2d80041
	void ClientEndOnlineSession();// 0x186cb2d80041
	void ClientEnableNetworkVoice(bool bEnable);// 0x186bb2d80041
	void ClientCommitMapChange();// 0x186ab2d80041
	void ClientClearCameraLensEffects();// 0x1869b2d80041
	void ClientCapBandwidth(int Cap);// 0x1868b2d80041
	void ClientCancelPendingMapChange();// 0x1867b2d80041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x1866b2d80041
	void ClearAudioListenerOverride();// 0x1865b2d80041
	void ClearAudioListenerAttenuationOverride();// 0x1864b2d80041
	bool CanRestartPlayer();// 0x1863b2d80041
	void Camera(FName NewMode);// 0x1862b2d80041
	void AddYawInput(float Val);// 0x1861b2d80041
	void AddRollInput(float Val);// 0x1860b2d80041
	void AddPitchInput(float Val);// 0x185fb2d80041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x185eb2d80041

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x130, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x140, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x150, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x178, Size: 0x10]
	Margin Padding;//[Offset: 0x188, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x198, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1a8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1b8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1c8, Size: 0x8]
	int Priority;//[Offset: 0x1d0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d4, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1e0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1e8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1f0, Size: 0x10]
	void UnregisterInputComponent();// 0x1c98b2d80041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x1c97b2d80041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x1c96b2d80041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x1c95b2d80041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x1c94b2d80041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1c93b2d80041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x1c92b2d80041
	void StopListeningForAllInputActions();// 0x1c91b2d80041
	void StopAnimationsAndLatentActions();// 0x1c90b2d80041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x1c8fb2d80041
	void StopAllAnimations();// 0x1c8eb2d80041
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x1c8db2d80041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x1c8cb2d80041
	void SetPadding(Margin InPadding);// 0x1c8bb2d80041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x1c8ab2d80041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x1c89b2d80041
	void SetInputActionPriority(int NewPriority);// 0x1c88b2d80041
	void SetInputActionBlocking(bool bShouldBlock);// 0x1c87b2d80041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x1c86b2d80041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x1c85b2d80041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x1c84b2d80041
	void SetAnchorsInViewport(Anchors Anchors);// 0x1c83b2d80041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x1c82b2d80041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x1c81b2d80041
	void RemoveFromViewport();// 0x1c80b2d80041
	void RegisterInputComponent();// 0x1c7fb2d80041
	void PreConstruct(bool IsDesignTime);// 0x1c7eb2d80041
	void PlaySound(SoundBase* SoundToPlay);// 0x1c7db2d80041
	void PlayEnterAnim();// 0x1c7cb2d80041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1c7bb2d80041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x1c7ab2d80041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x1c79b2d80041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1c77b2d80041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x1c76b2d80041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c75b2d80041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c74b2d80041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x1c73b2d80041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c72b2d80041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c71b2d80041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x1c70b2d80041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c6fb2d80041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c6eb2d80041
	void OnPaint(out PaintContext Context);// 0x1c6db2d80041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c6cb2d80041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c6bb2d80041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1c6ab2d80041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c69b2d80041
	void OnMouseCaptureLost();// 0x1c68b2d80041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c67b2d80041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c66b2d80041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x1c65b2d80041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x1c63b2d80041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c62b2d80041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c61b2d80041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x1c60b2d80041
	void OnInitialized();// 0x1c5fb2d80041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x1c5eb2d80041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x1c5db2d80041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c5cb2d80041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c5bb2d80041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c5ab2d80041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c59b2d80041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x1c58b2d80041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c57b2d80041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x1c56b2d80041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1c55b2d80041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x1c54b2d80041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x1c52b2d80041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x1c51b2d80041
	bool IsPlayingAnimation();// 0x1c50b2d80041
	bool IsListeningForInputAction(FName ActionName);// 0x1c4fb2d80041
	bool IsInViewport();// 0x1c4eb2d80041
	bool IsInteractable();// 0x1c4db2d80041
	bool IsAnyAnimationPlaying();// 0x1c4cb2d80041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x1c4bb2d80041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x1c4ab2d80041
	Pawn* GetOwningPlayerPawn();// 0x1c49b2d80041
	HUD* GetOwningHUD();// 0x1c48b2d80041
	bool GetIsVisible();// 0x1c47b2d80041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x1c46b2d80041
	Anchors GetAnchorsInViewport();// 0x1c44b2d80041
	Vector2D GetAlignmentInViewport();// 0x1c43b2d80041
	void DoPlayEnterAnim(bool InPlayFlag);// 0x1c42b2d80041
	void Destruct();// 0x1c41b2d80041
	void Construct();// 0x1c40b2d80041
	void CancelLatentActions();// 0x1c3fb2d80041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x1c3eb2d80041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x1c3db2d80041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x1c3bb2d80041
	void AddToViewport(int ZOrder);// 0x1c3ab2d80041
	bool AddToPlayerScreen(int ZOrder);// 0x1c39b2d80041

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x118, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x1b67b2d80041
	void SetUserFocus(PlayerController* PlayerController);// 0x1b66b2d80041
	void SetToolTipText(out const FText InToolTipText);// 0x1b65b2d80041
	void SetToolTip(Widget* Widget);// 0x1b64b2d80041
	void SetRenderTranslation(Vector2D Translation);// 0x1b63b2d80041
	void SetRenderTransformPivot(Vector2D Pivot);// 0x1b62b2d80041
	void SetRenderTransformAngle(float Angle);// 0x1b61b2d80041
	void SetRenderTransform(WidgetTransform InTransform);// 0x1b5fb2d80041
	void SetRenderShear(Vector2D Shear);// 0x1b5eb2d80041
	void SetRenderScale(Vector2D Scale);// 0x1b5db2d80041
	void SetRenderOpacity(float InOpacity);// 0x1b5cb2d80041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x1b5bb2d80041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x1b5ab2d80041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x1b59b2d80041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x1b58b2d80041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x1b57b2d80041
	void SetKeyboardFocus();// 0x1b56b2d80041
	void SetIsEnabled(bool bInIsEnabled);// 0x1b55b2d80041
	void SetFocus();// 0x1b54b2d80041
	void SetCursor(byte InCursor);// 0x1b53b2d80041
	void SetClipping(enum InClipping);// 0x1b52b2d80041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x1b50b2d80041
	void ResetCursor();// 0x1b4fb2d80041
	void RemoveFromParent();// 0x1b4eb2d80041
	EventReply OnReply__DelegateSignature();// 0x1b4db2d80041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1b49b2d80041
	bool IsVisible();// 0x1b48b2d80041
	bool IsHovered();// 0x1b47b2d80041
	void InvalidateLayoutAndVolatility();// 0x1b46b2d80041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x1b45b2d80041
	bool HasUserFocus(PlayerController* PlayerController);// 0x1b44b2d80041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x1b43b2d80041
	bool HasMouseCapture();// 0x1b42b2d80041
	bool HasKeyboardFocus();// 0x1b41b2d80041
	bool HasFocusedDescendants();// 0x1b40b2d80041
	bool HasAnyUserFocus();// 0x1b3fb2d80041
	Widget* GetWidget__DelegateSignature();// 0x1b3eb2d80041
	enum GetVisibility();// 0x1b3db2d80041
	Geometry GetTickSpaceGeometry();// 0x1b3cb2d80041
	FText GetText__DelegateSignature();// 0x1b3bb2d80041
	enum GetSlateVisibility__DelegateSignature();// 0x1b39b2d80041
	SlateColor GetSlateColor__DelegateSignature();// 0x1b38b2d80041
	SlateBrush GetSlateBrush__DelegateSignature();// 0x1b2fb2d80041
	float GetRenderTransformAngle();// 0x1b2eb2d80041
	float GetRenderOpacity();// 0x1b2db2d80041
	PanelWidget* GetParent();// 0x1b2cb2d80041
	Geometry GetPaintSpaceGeometry();// 0x1b2bb2d80041
	PlayerController* GetOwningPlayer();// 0x1b2ab2d80041
	LocalPlayer* GetOwningLocalPlayer();// 0x1b29b2d80041
	byte GetMouseCursor__DelegateSignature();// 0x1b28b2d80041
	LinearColor GetLinearColor__DelegateSignature();// 0x1b27b2d80041
	bool GetIsEnabled();// 0x1b26b2d80041
	int GetInt32__DelegateSignature();// 0x1b25b2d80041
	GameInstance* GetGameInstance();// 0x1b24b2d80041
	float GetFloat__DelegateSignature();// 0x1b23b2d80041
	Vector2D GetDesiredSize();// 0x1b22b2d80041
	enum GetClipping();// 0x1b20b2d80041
	enum GetCheckBoxState__DelegateSignature();// 0x1b1eb2d80041
	Geometry GetCachedGeometry();// 0x1b1cb2d80041
	bool GetBool__DelegateSignature();// 0x1b1bb2d80041
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1b1ab2d80041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1b19b2d80041
	void ForceVolatile(bool bForce);// 0x1b18b2d80041
	void ForceLayoutPrepass();// 0x1b17b2d80041

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x4abeb2d80041
	FName GetUserTag();// 0x4abdb2d80041

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x4adab2d80041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x4ad9b2d80041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x4ad8b2d80041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x4ad7b2d80041
	float GetStartTime();// 0x4ad6b2d80041
	float GetEndTime();// 0x4ad5b2d80041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x4ad4b2d80041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x4ad3b2d80041

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x3087b2d80041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x3086b2d80041

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: Geometry

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c]
	float Duration;//[Offset: 0xf4, Size: 0x4]
	float MaxDistance;//[Offset: 0xf8, Size: 0x4]
	float TotalSamples;//[Offset: 0xfc, Size: 0x4]
	float Priority;//[Offset: 0x100, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x5344b2d80041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x5343b2d80041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x5342b2d80041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x5341b2d80041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x5340b2d80041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x533fb2d80041

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 0x8]
	Margin Margin;//[Offset: 0x1c, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x30, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x58, Size: 0x8]
	FName ResourceName;//[Offset: 0x60, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x68, Size: 0x14]
	byte DrawAs;//[Offset: 0x7c, Size: 0x1]
	byte Tiling;//[Offset: 0x7d, Size: 0x1]
	byte Mirroring;//[Offset: 0x7e, Size: 0x1]
	byte ImageType;//[Offset: 0x7f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x128, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x1e47b2d80041
	bool RemoveChild(Widget* Content);// 0x1e46b2d80041
	bool HasChild(Widget* Content);// 0x1e45b2d80041
	bool HasAnyChildren();// 0x1e44b2d80041
	int GetChildrenCount();// 0x1e43b2d80041
	int GetChildIndex(const Widget* Content);// 0x1e42b2d80041
	Widget* GetChildAt(int Index);// 0x1e41b2d80041
	Widget*[] GetAllChildren();// 0x1e40b2d80041
	void ClearChildren();// 0x1e3fb2d80041
	PanelSlot* AddChild(Widget* Content);// 0x1e3eb2d80041

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x3cbeb2d80041
	void ShowTitleSafeArea();// 0x3cbdb2d80041
	void SetConsoleTarget(int PlayerIndex);// 0x3cbcb2d80041

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0xeeab2d80041
	void ReceiveInit();// 0xee9b2d80041
	void HandleTravelError(byte FailureType);// 0xee7b2d80041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xee5b2d80041
	void DebugRemovePlayer(int ControllerId);// 0xee4b2d80041
	void DebugCreatePlayer(int ControllerId);// 0xee3b2d80041

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x3af1b2d80041
	void Dragged(out const PointerEvent PointerEvent);// 0x3af0b2d80041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3aefb2d80041

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x128, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x3d9eb2d80041
	bool WasControllerKeyJustPressed(Key Key);// 0x3d9db2d80041
	bool IsControllerKeyDown(Key Key);// 0x3d9cb2d80041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3d9bb2d80041
	Vector GetControllerVectorKeyState(Key Key);// 0x3d9ab2d80041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x3d99b2d80041
	float GetControllerKeyTimeDown(Key Key);// 0x3d98b2d80041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3d97b2d80041
	float GetControllerAnalogKeyState(Key Key);// 0x3d96b2d80041

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x3f9fb2d80041
	void SetBind(FName BindName, FString Command);// 0x3f9eb2d80041
	void InvertAxisKey(const Key AxisKey);// 0x3f9db2d80041
	void InvertAxis(const FName AxisName);// 0x3f9cb2d80041
	void ClearSmoothing();// 0x3f9bb2d80041

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x230, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x23c, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x240, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x240, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x248, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x260, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x270, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x280, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x288, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x290, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2a0, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2a8, Size: 0x8]
	void ShowHUD();// 0x1ce5b2d80041
	void ShowDebugToggleSubCategory(FName Category);// 0x1ce4b2d80041
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x1ce3b2d80041
	void ShowDebug(FName DebugType);// 0x1ce2b2d80041
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x1ce1b2d80041
	void RemoveAllDebugStrings();// 0x1ce0b2d80041
	void ReceiveHitBoxRelease(const FName BoxName);// 0x1cdfb2d80041
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x1cdeb2d80041
	void ReceiveHitBoxClick(const FName BoxName);// 0x1cddb2d80041
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x1cdcb2d80041
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x1cdbb2d80041
	Vector Project(Vector Location);// 0x1cdab2d80041
	void PreviousDebugTarget();// 0x1cd9b2d80041
	void NextDebugTarget();// 0x1cd8b2d80041
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x1cd7b2d80041
	PlayerController* GetOwningPlayerController();// 0x1cd6b2d80041
	Pawn* GetOwningPawn();// 0x1cd5b2d80041
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x1cd4b2d80041
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x1cd3b2d80041
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x1cd1b2d80041
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x1cd0b2d80041
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x1ccfb2d80041
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x1cceb2d80041
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x1ccdb2d80041
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x1cccb2d80041
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x1ccbb2d80041
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x1ccab2d80041
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x1cc9b2d80041
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x1cc8b2d80041

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4d69b2d80041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x4d68b2d80041
	Vector K2_Project(Vector WorldLocation);// 0x4d67b2d80041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x4d66b2d80041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4d65b2d80041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x4d64b2d80041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x4d63b2d80041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x4d62b2d80041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x4d61b2d80041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x4d60b2d80041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x4d5fb2d80041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x4d5eb2d80041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x4d5db2d80041

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x230, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x238, Size: 0x8]
	float DefaultFOV;//[Offset: 0x248, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x250, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x258, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x610]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8b0, Size: 0x610]
	TViewTarget ViewTarget;//[Offset: 0xec0, Size: 0x620]
	TViewTarget PendingViewTarget;//[Offset: 0x14e0, Size: 0x620]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1b30, Size: 0x610]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2140, Size: 0x610]
	CameraModifier*[] ModifierList;//[Offset: 0x2750, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2760, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2770, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2774, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2780, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x27a0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x27b0, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x27b8, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x27f8, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2818, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2828, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2838, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2840, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2840, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2840, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2840, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2841, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2844, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2848, Size: 0x4]
	float ViewYawMin;//[Offset: 0x284c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2850, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2854, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2858, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2860, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x3f99b2d80041
	void StopCameraFade();// 0x3f98b2d80041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x3f97b2d80041
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3f96b2d80041
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x3f95b2d80041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x3f94b2d80041
	void StopAllCameraShakes(bool bImmediately);// 0x3f93b2d80041
	void StopAllCameraAnims(bool bImmediate);// 0x3f92b2d80041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x3f91b2d80041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x3f90b2d80041
	void SetGameCameraCutThisFrame();// 0x3f8fb2d80041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x3f8eb2d80041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x3f8db2d80041
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x3f8cb2d80041
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x3f8bb2d80041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x3f8ab2d80041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x3f89b2d80041
	void OnPhotographySessionStart();// 0x3f88b2d80041
	void OnPhotographySessionEnd();// 0x3f87b2d80041
	void OnPhotographyMultiPartCaptureStart();// 0x3f86b2d80041
	void OnPhotographyMultiPartCaptureEnd();// 0x3f85b2d80041
	PlayerController* GetOwningPlayerController();// 0x3f84b2d80041
	float GetFOVAngle();// 0x3f83b2d80041
	Rotator GetCameraRotation();// 0x3f82b2d80041
	Vector GetCameraLocation();// 0x3f81b2d80041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x3f80b2d80041
	void ClearCameraLensEffects();// 0x3f7fb2d80041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x3f7eb2d80041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x3f7db2d80041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3f7cb2d80041

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x4d58b2d80041
	void ReceivePlayShake(float Scale);// 0x4d57b2d80041
	bool ReceiveIsFinished();// 0x4d56b2d80041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x4d55b2d80041

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x570]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5b0, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	byte BloomMethod;//[Offset: 0x17, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x18, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorSaturation;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x190, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1a0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1a4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1a8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1ac, Size: 0x4]
	float FilmSlope;//[Offset: 0x1b0, Size: 0x4]
	float FilmToe;//[Offset: 0x1b4, Size: 0x4]
	float FilmShoulder;//[Offset: 0x1b8, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x1bc, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x1c0, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1d4, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1e4, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1e8, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1ec, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1f0, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x200, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x210, Size: 0x10]
	float FilmContrast;//[Offset: 0x220, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x224, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x228, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x22c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x230, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x240, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x244, Size: 0x4]
	float BloomIntensity;//[Offset: 0x248, Size: 0x4]
	float BloomThreshold;//[Offset: 0x24c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x250, Size: 0x4]
	float Bloom1Size;//[Offset: 0x254, Size: 0x4]
	float Bloom2Size;//[Offset: 0x258, Size: 0x4]
	float Bloom3Size;//[Offset: 0x25c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x260, Size: 0x4]
	float Bloom5Size;//[Offset: 0x264, Size: 0x4]
	float Bloom6Size;//[Offset: 0x268, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x26c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x27c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x28c, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2bc, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2cc, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2d0, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2d8, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2e0, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2e4, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2e8, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2ec, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2f0, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2f8, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2fc, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x30c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x31c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x320, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x328, Size: 0x4]
	float CameraISO;//[Offset: 0x32c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x330, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x334, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x338, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x33c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x340, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x348, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x350, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x358, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x35c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x360, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x364, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x368, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x36c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x370, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x374, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x378, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x37c, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x380, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x390, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x394, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x398, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3a0, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x420, Size: 0x4]
	float GrainJitter;//[Offset: 0x424, Size: 0x4]
	float GrainIntensity;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x434, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x440, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x444, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x448, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x44c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x450, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x454, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x45c, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x464, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x468, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x478, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x47c, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x480, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x484, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x488, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x490, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x498, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x49c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4a0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4a4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4a8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4ac, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4b0, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x4b4, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4b8, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4bc, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4c0, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4c4, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4c8, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4cc, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4d0, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x4d4, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4d8, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4dc, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4e0, Size: 0x4]
	float LPVSize;//[Offset: 0x4e4, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4ec, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4f0, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4f4, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4f8, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4fc, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x500, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x504, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x508, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x50c, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x510, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x514, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x518, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x51c, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x520, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x524, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x528, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x52c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x52e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x530, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x534, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x538, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x53c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x540, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x544, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x548, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x54c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x550, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x558, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x570]
	float BasePostProcessBlendWeight;//[Offset: 0x5d0, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x4d4eb2d80041
	void SetScale(float NewDuration);// 0x4d4db2d80041
	void SetDuration(float NewDuration);// 0x4d4cb2d80041

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x294, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x298, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x29c, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x2a0, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x4d5cb2d80041
	void PlayCameraShake(class CameraShake InCameraShake);// 0x4d5bb2d80041
	void Play();// 0x4d5ab2d80041
	float GetAttenuationFactor(out const Vector Location);// 0x4d59b2d80041

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x4d54b2d80041
	Actor* GetViewTarget();// 0x4d53b2d80041
	void EnableModifier();// 0x4d52b2d80041
	void DisableModifier(bool bImmediate);// 0x4d51b2d80041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x4d50b2d80041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x4d4fb2d80041

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x280, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x288, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x290, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x2a0, Size: 0x30]
	float BaseFOV;//[Offset: 0x2d0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2d8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2e8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x230, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x240, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x250, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x260, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x270, Size: 0x10]
	void ToggleActive();// 0x4dd8b2d80041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4dd7b2d80041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4dd6b2d80041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4dd5b2d80041
	void SetFloatParameter(FName ParameterName, float Param);// 0x4dd4b2d80041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4dd3b2d80041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4dd2b2d80041
	void OnRep_bCurrentlyActive();// 0x4dd1b2d80041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x4dd0b2d80041
	bool IsActive();// 0x4dcfb2d80041
	void Deactivate();// 0x4dceb2d80041
	void Activate();// 0x4dcdb2d80041

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x52a2b2d80041

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x4b8, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x4c0, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x4d0, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e1, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e1, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e1, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e1, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4e1, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e2, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e2, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e2, Size: 0x1]
	byte LODMethod;//[Offset: 0x4ed, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x4ee, Size: 0x1]
	float SignificanceValue;//[Offset: 0x4f0, Size: 0x4]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x4f8, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x508, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x518, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x528, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x538, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	Vector OldPosition;//[Offset: 0x54c, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x558, Size: 0xc]
	float WarmupTime;//[Offset: 0x564, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x568, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x570, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x578, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x598, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x5b0, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x608, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x610, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x618, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x619, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x61a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x648, Size: 0x10]
	float LastFrameTickTime;//[Offset: 0x718, Size: 0x4]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2d56b2d80041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2d55b2d80041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2d54b2d80041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x2d53b2d80041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x2d52b2d80041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x2d51b2d80041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x2d50b2d80041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x2d4fb2d80041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x2d4eb2d80041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x2d4db2d80041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x2d4cb2d80041
	int GetNumActiveParticles();// 0x2d4bb2d80041
	MaterialInterface* GetNamedMaterial(FName InName);// 0x2d4ab2d80041
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x2d49b2d80041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x2d48b2d80041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x2d47b2d80041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x2d46b2d80041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x2d45b2d80041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x2d44b2d80041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x2d43b2d80041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x2d42b2d80041
	void EndTrails();// 0x2d41b2d80041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x2d40b2d80041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2d3fb2d80041

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2d3eb2d80041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x2d3db2d80041
	void SetFloatParameter(FName ParameterName, float Param);// 0x2d3cb2d80041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x2d3bb2d80041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2d3ab2d80041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x2d39b2d80041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x2d38b2d80041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2d37b2d80041
	void ReleaseToPool();// 0x2d36b2d80041
	FXSystemAsset* GetFXSystemAsset();// 0x2d35b2d80041

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x600]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x600]
	PlayerState* PlayerState;//[Offset: 0x610, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x230, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x238, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x240, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	float AspectRatio;//[Offset: 0x254, Size: 0x4]
	float FOVAngle;//[Offset: 0x258, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x25c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x570]
	int GetAutoActivatePlayerIndex();// 0x4b3cb2d80041

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x294, Size: 0x4]
	float OrthoWidth;//[Offset: 0x298, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x29c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x2a0, Size: 0x4]
	float AspectRatio;//[Offset: 0x2a4, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x2a9, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2e0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x310, Size: 0x570]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x3a04b2d80041
	void SetProjectionMode(byte InProjectionMode);// 0x3a03b2d80041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x3a02b2d80041
	void SetOrthoWidth(float InOrthoWidth);// 0x3a01b2d80041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x3a00b2d80041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x39ffb2d80041
	void SetFieldOfView(float InFieldOfView);// 0x39feb2d80041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x39fdb2d80041
	void SetAspectRatio(float InAspectRatio);// 0x39fcb2d80041
	void RemoveBlendable(interface classNone InBlendableObject);// 0x39fbb2d80041
	void OnCameraMeshHiddenChanged();// 0x39fab2d80041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x39f9b2d80041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x39f8b2d80041

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x28c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x290, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x298, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x2a0, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	void TurnAtRate(float Rate);// 0x2c89b2d80041
	void MoveUp_World(float Val);// 0x2c88b2d80041
	void MoveRight(float Val);// 0x2c87b2d80041
	void MoveForward(float Val);// 0x2c86b2d80041
	void LookUpAtRate(float Rate);// 0x2c85b2d80041

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x4d0, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x3538b2d80041
	float GetUnscaledSphereRadius();// 0x3537b2d80041
	float GetShapeScale();// 0x3536b2d80041
	float GetScaledSphereRadius();// 0x3535b2d80041

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x4dc, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x4e0, Size: 0x4]
	int MinLOD;//[Offset: 0x4e4, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x4e8, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x4f0, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x4f8, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fc, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4fc, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4fc, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4fc, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fd, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4fd, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4fd, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fd, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4fd, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x500, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x504, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x508, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x50c, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x510, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x520, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x530, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x3335b2d80041
	void SetReverseCulling(bool ReverseCulling);// 0x3334b2d80041
	void SetForcedLodModel(int NewForcedLodModel);// 0x3333b2d80041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x3332b2d80041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x3331b2d80041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x3330b2d80041

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x3a83b2d80041
	void ViewSelf();// 0x3a82b2d80041
	void ViewPlayer(FString S);// 0x3a81b2d80041
	void ViewClass(class Actor DesiredClass);// 0x3a80b2d80041
	void ViewActor(FName ActorName);// 0x3a7fb2d80041
	void UpdateSafeArea();// 0x3a7eb2d80041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x3a7db2d80041
	void ToggleServerStatReplicatorClientOverwrite();// 0x3a7cb2d80041
	void ToggleDebugCamera();// 0x3a7bb2d80041
	void ToggleAILogging();// 0x3a7ab2d80041
	void TestCollisionDistance();// 0x3a79b2d80041
	void Teleport();// 0x3a78b2d80041
	void Summon(FString ClassName);// 0x3a77b2d80041
	void StreamLevelOut(FName PackageName);// 0x3a76b2d80041
	void StreamLevelIn(FName PackageName);// 0x3a75b2d80041
	void SpawnServerStatReplicator();// 0x3a74b2d80041
	void Slomo(float NewTimeDilation);// 0x3a73b2d80041
	void SetWorldOrigin();// 0x3a72b2d80041
	void SetMouseSensitivityToDefault();// 0x3a71b2d80041
	void ServerToggleAILogging();// 0x3a70b2d80041
	void ReceiveInitCheatManager();// 0x3a6fb2d80041
	void ReceiveEndPlay();// 0x3a6eb2d80041
	void PlayersOnly();// 0x3a6db2d80041
	void OnlyLoadLevel(FName PackageName);// 0x3a6cb2d80041
	void LogLoc();// 0x3a6bb2d80041
	void InvertMouse();// 0x3a6ab2d80041
	void God();// 0x3a69b2d80041
	void Ghost();// 0x3a68b2d80041
	void FreezeFrame(float Delay);// 0x3a67b2d80041
	void Fly();// 0x3a66b2d80041
	void FlushLog();// 0x3a65b2d80041
	void EnableDebugCamera();// 0x3a64b2d80041
	void DumpVoiceMutingState();// 0x3a63b2d80041
	void DumpPartyState();// 0x3a62b2d80041
	void DumpOnlineSessionState();// 0x3a61b2d80041
	void DumpChatState();// 0x3a60b2d80041
	void DisableDebugCamera();// 0x3a5fb2d80041
	void DestroyTarget();// 0x3a5eb2d80041
	void DestroyServerStatReplicator();// 0x3a5db2d80041
	void DestroyPawns(class Pawn aClass);// 0x3a5cb2d80041
	void DestroyAllPawnsExceptTarget();// 0x3a5bb2d80041
	void DestroyAll(class Actor aClass);// 0x3a5ab2d80041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x3a59b2d80041
	void DebugCapsuleSweepPawn();// 0x3a58b2d80041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x3a57b2d80041
	void DebugCapsuleSweepClear();// 0x3a56b2d80041
	void DebugCapsuleSweepChannel(byte Channel);// 0x3a55b2d80041
	void DebugCapsuleSweepCapture();// 0x3a54b2d80041
	void DebugCapsuleSweep();// 0x3a53b2d80041
	void DamageTarget(float DamageAmount);// 0x3a52b2d80041
	void CheatScript(FString ScriptName);// 0x3a51b2d80041
	void ChangeSize(float F);// 0x3a50b2d80041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x3a4fb2d80041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x3a4eb2d80041
	void BugIt(FString ScreenShotDescription);// 0x3a4db2d80041

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ad, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ad, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5ad, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5ad, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5ad, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5ad, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5ad, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5ad, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5b0, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5b8, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5c0, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5c8, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x650, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x658, Size: 0x8]
	float SpeedScale;//[Offset: 0x660, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x664, Size: 0x4]
	float InitialAccel;//[Offset: 0x668, Size: 0x4]
	float InitialDecel;//[Offset: 0x66c, Size: 0x4]
	void ToggleDisplay();// 0x4d86b2d80041
	void ShowDebugSelectedInfo();// 0x4d85b2d80041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x4d84b2d80041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x4d83b2d80041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x4d82b2d80041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x4d81b2d80041
	Actor* GetSelectedActor();// 0x4d80b2d80041

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x4b8, Size: 0x4]
	float FrustumAngle;//[Offset: 0x4bc, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x4c0, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x4c4, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x4c8, Size: 0x4]
	Texture* Texture;//[Offset: 0x4d0, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x168, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1528, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1a48, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f0, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x230, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x240, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x248, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x250, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x258, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x260, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x268, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x270, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x278, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x280, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x288, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x290, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x298, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x2a0, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	void StartPlay();// 0x180db2d80041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x180cb2d80041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x180bb2d80041
	bool ShouldReset(Actor* ActorToReset);// 0x180ab2d80041
	void ReturnToMainMenuHost();// 0x1809b2d80041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x1808b2d80041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x1807b2d80041
	void RestartPlayer(Controller* NewPlayer);// 0x1806b2d80041
	void ResetLevel();// 0x1805b2d80041
	bool PlayerCanRestart(PlayerController* Player);// 0x1804b2d80041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x1803b2d80041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1802b2d80041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1801b2d80041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1800b2d80041
	void K2_OnLogout(Controller* ExitingController);// 0x17ffb2d80041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x17feb2d80041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x17fdb2d80041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x17fcb2d80041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x17fbb2d80041
	bool HasMatchStarted();// 0x17fab2d80041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x17f9b2d80041
	int GetNumSpectators();// 0x17f8b2d80041
	int GetNumPlayers();// 0x17f7b2d80041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x17f6b2d80041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x17f5b2d80041
	Actor* ChoosePlayerStart(Controller* Player);// 0x17f4b2d80041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x17f3b2d80041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x17f2b2d80041

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x230, Size: 0x4]
	int MaxPlayers;//[Offset: 0x234, Size: 0x4]
	int MaxPartySize;//[Offset: 0x238, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x23c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1]
	FName SessionName;//[Offset: 0x240, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x230, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x238, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x240, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x248, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x25c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x260, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x264, Size: 0x4]
	void OnRep_SpectatorClass();// 0x142eb2d80041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x142db2d80041
	void OnRep_ReplicatedHasBegunPlay();// 0x142cb2d80041
	void OnRep_GameModeClass();// 0x142bb2d80041
	bool HasMatchStarted();// 0x142ab2d80041
	bool HasBegunPlay();// 0x1429b2d80041
	float GetServerWorldTimeSeconds();// 0x1428b2d80041
	float GetPlayerStartTime(Controller* Controller);// 0x1427b2d80041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x1426b2d80041

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	uint32 Channels;//[Offset: 0x234, Size: 0x4]
	uint32 InRate;//[Offset: 0x238, Size: 0x4]
	uint32 OutRate;//[Offset: 0x23c, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x244, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x248, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x24c, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x250, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x254, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x258, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x25c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x260, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x264, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x268, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x26c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x270, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x274, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x278, Size: 0x4]
	uint32 InPackets;//[Offset: 0x27c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x280, Size: 0x4]
	uint32 InBunches;//[Offset: 0x284, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x288, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x28c, Size: 0x4]
	uint32 InLoss;//[Offset: 0x290, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x294, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x298, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x29c, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x2a0, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2a4, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2a8, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d8, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2dc, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2e0, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2e4, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2e8, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2ec, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x230, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x234, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x238, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x23c, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x240, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x244, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x248, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x24c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x250, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x258, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x25c, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x260, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x264, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x268, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x26c, Size: 0x4]
	float MoveRepSize;//[Offset: 0x270, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x274, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x278, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x27c, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x280, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x284, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x288, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x28c, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x298, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x29c, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2a0, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2a4, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a8, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2b0, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2b4, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2c4, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c8, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2cc, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x230, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x238, Size: 0x8]
	float PlayRate;//[Offset: 0x240, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x248, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x24c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x250, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x258, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x270, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x280, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	float InterpPosition;//[Offset: 0x294, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x29c, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2a0, Size: 0x10]
	delegate OnStop;//[Offset: 0x2b0, Size: 0x10]
	delegate OnPause;//[Offset: 0x2c0, Size: 0x10]
	void Stop();// 0x529cb2d80041
	void SetPosition(float NewPosition, bool bJump);// 0x529bb2d80041
	void SetLoopingState(bool bNewLooping);// 0x529ab2d80041
	void Reverse();// 0x5299b2d80041
	void Play();// 0x5298b2d80041
	void Pause();// 0x5297b2d80041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x5296b2d80041
	void ChangePlaybackDirection();// 0x5295b2d80041

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x298, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x2a0, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x2a8, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x4d6eb2d80041

--------------------------------
Class: Interface.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x4d0, Size: 0x8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x5271b2d80041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x5270b2d80041
	bool RemoteEvent(FName EventName);// 0x526fb2d80041
	void LevelReset();// 0x526eb2d80041

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x240, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x248, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x4b8, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c0, Size: 0x1]
	float ScreenSize;//[Offset: 0x4c4, Size: 0x4]
	float U;//[Offset: 0x4c8, Size: 0x4]
	float UL;//[Offset: 0x4cc, Size: 0x4]
	float V;//[Offset: 0x4d0, Size: 0x4]
	float VL;//[Offset: 0x4d4, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x4cd8b2d80041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x4cd7b2d80041
	void SetSprite(Texture2D* NewSprite);// 0x4cd6b2d80041

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x120, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x130, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 0x8]
	bool ShouldBeLoaded();// 0x527db2d80041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x527cb2d80041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x527bb2d80041
	void SetPriority(int NewPriority);// 0x527ab2d80041
	void SetLevelLODIndex(int LODIndex);// 0x5279b2d80041
	bool IsStreamingStatePending();// 0x5278b2d80041
	bool IsLevelVisible();// 0x5277b2d80041
	bool IsLevelLoaded();// 0x5276b2d80041
	FName GetWorldAssetPackageFName();// 0x5275b2d80041
	Level* GetLoadedLevel();// 0x5274b2d80041
	LevelScriptActor* GetLevelScriptActor();// 0x5273b2d80041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x5272b2d80041

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x268, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x279, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x848, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc5c, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xc90, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xcf8, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x4cd5b2d80041
	int GetObjectCount();// 0x4cd4b2d80041
	int GetNewAvoidanceUID();// 0x4cd3b2d80041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x4cd2b2d80041

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 0x4]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 0x10]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x53d3b2d80041

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapID;//[Offset: 0x408, Size: 0x4]
	FName PreloadAssets;//[Offset: 0x40c, Size: 0x8]
	class SolarPostProcessSettingItem* PostProcessItemClass;//[Offset: 0x418, Size: 0x8]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x420, Size: 0x8]
	int CurrentActiveColorThemeIndex;//[Offset: 0x428, Size: 0x4]
	int SolarMapTypeValue;//[Offset: 0x42c, Size: 0x4]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]

--------------------------------
Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 0x580]

--------------------------------
Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 0x1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 0x570]

--------------------------------
Class: BP_Controller_BattleRoyale_C.BP_CMPlayerController_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa00, Size: 0x8]
	UI_ResurrectionProgress_C* ResurrectionProgressUI;//[Offset: 0xa08, Size: 0x8]
	void Get Resurrection Progress UI(out UI_ResurrectionProgress_C* UIRef, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_ResurrectionProgress_C* K2Node_DynamicCast_AsUI_Resurrection_Progress, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x9dc1b3000001
	void ReceiveBeginPlay();// 0x9dc0b3000001
	void ReceiveTick(float DeltaSeconds);// 0x9dbfb3000001
	void BindSpectateEvent(SolarSpectateInfo* SpectateInfo);// 0x9dbeb3000001
	void ReceivePossess(Pawn* PossessedPawn);// 0x9dbdb3000001
	void BindEvent();// 0x9dbcb3000001
	void RefreshUI(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0xffffff8ab2d80002
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0xffffff8ab2d80002
	void UnBindEvent();// 0x9db9b3000001
	void ExecuteUbergraph_BP_Controller_BattleRoyale(int EntryPoint, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, float K2Node_Event_DeltaSeconds, SolarSpectateInfo* K2Node_CustomEvent_SpectateInfo, Pawn* K2Node_Event_PossessedPawn, bool CallFunc_IsServer_ReturnValue, SolarPlayerState* K2Node_CustomEvent_OldTarget, SolarSpectateInfo* K2Node_CustomEvent_SpectateInfo, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, Pawn* K2Node_Event_UnpossessedPawn, BP_Character_BattleRoyale_C* K2Node_DynamicCast_AsBP_Character_Battle_Royale, bool K2Node_DynamicCast_bSuccess, BP_Character_BattleRoyale_C* K2Node_DynamicCast_AsBP_Character_Battle_Royale, bool K2Node_DynamicCast_bSuccess, BP_DeathBoxCountdownExec_C* K2Node_DynamicCast_AsBP_Death_Box_Countdown_Exec, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetOpenProgress_OpenProgress, SolarSpectateInfo* CallFunc_GetSpectateInfo_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, int CallFunc_FTrunc_ReturnValue, UI_Relive_C* K2Node_DynamicCast_AsUI_Relive, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_FTrunc_ReturnValue, UI_Relive_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, UI_Relive_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UI_ResurrectionProgress_C* CallFunc_Get_Resurrection_Progress_UI_UIRef, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9d9bb3000001

--------------------------------
Class: BP_CMPlayerController_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	SCMPlayerRPCComponent* RpcComponent;//[Offset: 0x9f8, Size: 0x8]
	void ServerHandlePlayerLevelLoaded(FString LevelName);// 0x369db2d80041
	void RequestUpdataDataManager();// 0x369cb2d80041

--------------------------------
Class: SolarPlayerController.PlayerController.Controller.Actor.Object
	delegate OnPawnReplicated;//[Offset: 0x5e0, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x5f0, Size: 0x10]
	delegate OnCatchInputActionDelegate;//[Offset: 0x600, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0x610, Size: 0x10]
	delegate OnNotifiedMarkedItemWasPickedUpDelegate;//[Offset: 0x620, Size: 0x10]
	SolarInputManager* InputManager;//[Offset: 0x630, Size: 0x8]
	delegate OnHUDSpawnedDelegate;//[Offset: 0x638, Size: 0x10]
	Vector2D InputMovementVector;//[Offset: 0x6bc, Size: 0x8]
	float InputRotatePitch;//[Offset: 0x6c4, Size: 0x4]
	float InteractHoldTimer;//[Offset: 0x6dc, Size: 0x4]
	class SolarCharacterSpringArmComponent* FollowArmClass;//[Offset: 0x720, Size: 0x8]
	class SolarCharacterCameraComponent* FollowCameraClass;//[Offset: 0x728, Size: 0x8]
	float FreeLookSmoothSpeed;//[Offset: 0x730, Size: 0x4]
	SolarCharacterSpringArmComponent* FollowArm;//[Offset: 0x740, Size: 0x8]
	SolarCharacterCameraComponent* FollowCamera;//[Offset: 0x748, Size: 0x8]
	FString PlayerId;//[Offset: 0x758, Size: 0x10]
	float VehicleInteractionDistance;//[Offset: 0x790, Size: 0x4]
	int PeekInput;//[Offset: 0x7b8, Size: 0x4]
	delegate OnTeammateHUDDodgeSet;//[Offset: 0x810, Size: 0x10]
	<SolarCharacter*,int> TeammateCandidates;//[Offset: 0x820, Size: 0x50]
	bool bIsAlreadyParachuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	Actor*[] UniqueActorArray;//[Offset: 0x8d0, Size: 0x10]
	float HangUpTime;//[Offset: 0x8e0, Size: 0x4]
	UserWidget* DamageTextWidget;//[Offset: 0x920, Size: 0x8]
	SolarDamageText[] SameFrameDamageTextDataCache;//[Offset: 0x928, Size: 0x10]
	TimerHandle SameFrameDamageTextDataHandle;//[Offset: 0x938, Size: 0x8]
	SolarWarmClockComponent* WarmClockComp;//[Offset: 0x9e0, Size: 0x8]
	delegate OnSpectateInfoRep;//[Offset: 0x9e8, Size: 0x10]
	void WorldMarkDelayExecFunction();// 0x1a75b2d80041
	void UseMedicine();// 0x1a74b2d80041
	void UnMarkWorldInLevel(int64 instanceID);// 0x1a73b2d80041
	void Turn(float Value);// 0x1a72b2d80041
	void TryRechargeShield();// 0x1a71b2d80041
	void TryPickupFirstItem();// 0x1a70b2d80041
	void TriggerVoiceByType(enum VoiceType);// 0x1a6fb2d80041
	void SwtichVehicleSeatNotification();// 0x1a6eb2d80041
	void SwitchWeaponByReverseOrder();// 0x1a6db2d80041
	void SwitchWeaponByOrder();// 0x1a6cb2d80041
	void SwitchSpectatedCharacterInTeam(int PosInTeam);// 0x1a6bb2d80041
	void SwitchInputBinding(out const FName InputName, enum SwitchTpye);// 0x1a69b2d80041
	void StopRecordingAtDS();// 0x1a68b2d80041
	void StartRecordingAtDS(FString Filename);// 0x1a67b2d80041
	void SolarSlot(int ID);// 0x1a66b2d80041
	void SolarServerNetProfileStop();// 0x1a65b2d80041
	void SolarServerNetProfileStart();// 0x1a64b2d80041
	void SolarOpenUI(FString UIID, int RootID);// 0x1a63b2d80041
	void SolarModule(int ID);// 0x1a62b2d80041
	void SolarISPC(FString _str);// 0x1a61b2d80041
	void SolarGM_Weapon(FString Type, FString paramOne, FString paramTwo);// 0x1a60b2d80041
	void SolarGM_TutorialTipsUI(int ID);// 0x1a5fb2d80041
	void SolarGM_TeleportToBotAIServer(uint32 CtrlIndex);// 0x1a5eb2d80041
	void SolarGM_StopRecordingAtDS();// 0x1a5db2d80041
	void SolarGM_StartShrinkSafeArea();// 0x1a5cb2d80041
	void SolarGM_StartRecordingAtDS(FString Filename);// 0x1a5bb2d80041
	void SolarGM_SpawnMonsterGroupAtCrosshairServer(int inPlayerTeamSize, int NumberToSpawn, int StrengthGrade);// 0x1a5ab2d80041
	void SolarGM_SpawnMonsterGroupAtCrosshair(int inPlayerTeamSize, int NumberToSpawn, int StrengthGrade);// 0x1a59b2d80041
	void SolarGM_SpawnMonsterAIAtCrosshair(int MonsterAICharacterID, int StrengthGrade);// 0x1a58b2d80041
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int Num);// 0x1a57b2d80041
	void SolarGM_SpawnBotAIAtCrosshair(int AICharacterID);// 0x1a56b2d80041
	void SolarGM_SpawnAIAtCrosshairServer(int AICharacterID, bool bIsBotAI, int StrengthGrade);// 0x1a55b2d80041
	void SolarGM_ShowRedZoneDamage(bool IsShow);// 0x1a54b2d80041
	void SolarGM_ShowNotice(int NoticeId);// 0x1a53b2d80041
	void SolarGM_ShowDrone(bool IsShow);// 0x1a52b2d80041
	void SolarGM_ShowAllSafeArea(bool IsShow);// 0x1a51b2d80041
	void SolarGM_SetTeamID(int InTeamID);// 0x1a50b2d80041
	void SolarGM_SetStatDataForDebug();// 0x1a4fb2d80041
	void SolarGM_SetSolarPlayerID(FString InSolarPlayer);// 0x1a4eb2d80041
	void SolarGM_SetReconnection(bool IsReconnection);// 0x1a4db2d80041
	void SolarGM_SetPlayerData(FString InPlayerId);// 0x1a4cb2d80041
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(FString bSwitch);// 0x1a4bb2d80041
	void SolarGM_SetGyroscopeTiltZThreshold(float Value);// 0x1a4ab2d80041
	void SolarGM_SetGyroscopeTiltYThreshold(float Value);// 0x1a49b2d80041
	void SolarGM_SetGyroscopeTiltFrameCount(float Value);// 0x1a48b2d80041
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);// 0x1a47b2d80041
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);// 0x1a46b2d80041
	void SolarGM_ServerStartShrinkSafeArea();// 0x1a45b2d80041
	void SolarGM_ServerShowRedZoneDamage(bool IsShow);// 0x1a44b2d80041
	void SolarGM_ServerShowAllSafeArea(bool IsShow);// 0x1a43b2d80041
	void SolarGM_ServerSetTeamID(int InTeamID);// 0x1a42b2d80041
	void SolarGM_ServerSetStatDataForDebug();// 0x1a41b2d80041
	void SolarGM_ServerSetSolarPlayerID(FString InSolarPlayer);// 0x1a40b2d80041
	void SolarGM_ServerSetReconnection(bool IsReconnection);// 0x1a3fb2d80041
	void SolarGM_ServerSetPlayerData(FString InPlayerId);// 0x1a3eb2d80041
	void SolarGM_ServerDebugOffline();// 0x1a3db2d80041
	void SolarGM_ServerConsoleCommand(FString InConsoleCommand);// 0x1a3cb2d80041
	void SolarGM_ServerClosePoisonDamage(bool isClose);// 0x1a3bb2d80041
	void SolarGM_ServerChangeDayLight(int ID);// 0x1a3ab2d80041
	void SolarGM_ResetZoneBombsFire();// 0x1a39b2d80041
	void SolarGM_RefreshSafeArea();// 0x1a38b2d80041
	void SolarGM_RedZoneServer(const int ZoneId);// 0x1a37b2d80041
	void SolarGM_RedZone(const int ZoneId);// 0x1a36b2d80041
	void SolarGM_PoisonServer(FString GMType);// 0x1a35b2d80041
	void SolarGM_Poison(FString GMType);// 0x1a34b2d80041
	void SolarGM_PlayerUndetectableByAIServer(int debugValue);// 0x1a33b2d80041
	void SolarGM_PlayerUndetectableByAI(int debugValue);// 0x1a32b2d80041
	void SolarGM_PickHomeitems(int ID, int InCount);// 0x1a31b2d80041
	void SolarGM_PauseMonsterSpawnVolumesServer(bool pauseSpawn);// 0x1a30b2d80041
	void SolarGM_PauseMonsterSpawnVolumes(bool pauseSpawn);// 0x1a2fb2d80041
	void SolarGM_NoviceTestGetWidget(FString PanelName, FString ChildWidgetName);// 0x1a2eb2d80041
	void SolarGM_NoviceGuidance(int ActionID, bool bOn);// 0x1a2db2d80041
	void SolarGM_KillAllAIServer(bool KillBot);// 0x1a2cb2d80041
	void SolarGM_KickMeOut();// 0x1a2bb2d80041
	void SolarGM_GoPreviousHomeCameraMode();// 0x1a2ab2d80041
	void SolarGM_GoNextHomeCameraMode();// 0x1a29b2d80041
	void SolarGM_GoHomeCameraModeByIndex(int Index);// 0x1a28b2d80041
	void SolarGM_GMGoSpectatePreviousPlayer();// 0x1a27b2d80041
	void SolarGM_GMGoSpectatePlayerByIndex(uint32 Index);// 0x1a26b2d80041
	void SolarGM_Freelook(bool Open);// 0x1a25b2d80041
	void SolarGM_DebugOffline();// 0x1a24b2d80041
	void SolarGM_DebugAllAIServer(int debugValue);// 0x1a23b2d80041
	void SolarGM_DebugAllAI(int debugValue);// 0x1a22b2d80041
	void SolarGM_ClosePoisonDamage(bool isClose);// 0x1a21b2d80041
	void SolarGM_ClientShowRedZoneDamage(Vector bombLocation, Vector CharacterLocation, float Distance, float Damage);// 0x1a20b2d80041
	void SolarGM_ClientSetPlayerData(FString InPlayerId);// 0x1a1fb2d80041
	void SolarGM_ClientGotoLogin();// 0x1a1eb2d80041
	void SolarGM_Character(FString GMType, FString Param1, FString Param2);// 0x1a1db2d80041
	void SolarGM_ChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x1a1cb2d80041
	void SolarGM_ChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x1a1bb2d80041
	void SolarGM_ChangeVehicleIntProperty(FString InPropertyName, int inInt);// 0x1a1ab2d80041
	void SolarGM_ChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x1a19b2d80041
	void SolarGM_ChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x1a18b2d80041
	void SolarGM_ChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x1a17b2d80041
	void SolarGM_ChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x1a16b2d80041
	void SolarGM_ChangeDayLight(int ID);// 0x1a15b2d80041
	void SolarGM(FString _str);// 0x1a14b2d80041
	void SolarEnergy(int InMode, int ID);// 0x1a13b2d80041
	void SolarCloseUI(FString UIID);// 0x1a12b2d80041
	void SolarClientNetProfileStop();// 0x1a11b2d80041
	void SolarClientNetProfileStart();// 0x1a10b2d80041
	void ShowBackpackUI();// 0x1a0fb2d80041
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x1a0eb2d80041
	void SetAllTeammateHUDDodge(bool bDodge);// 0x1a0db2d80041
	void ServerTeleportTo(const Vector DestLocation);// 0x1a0cb2d80041
	void ServerSyncPlayerSelfReport();// 0x1a0bb2d80041
	void ServerSwitchSpectatedCharacterInTeam(int PosInTeam);// 0x1a0ab2d80041
	void ServerSpawnVehicleWithVehicleID(const int VehicleID);// 0x1a09b2d80041
	void ServerSpawnVehicle(const int SpawnID);// 0x1a08b2d80041
	void ServerSpawnTreasureBox(const int TreasureBoxID);// 0x1a07b2d80041
	void ServerSpawnSolarRadar(FString BpPath);// 0x1a06b2d80041
	void ServerSpawnOutcomeContent(const int OutcomeID);// 0x1a05b2d80041
	void ServerSpawnChargingPile(FString BpPath);// 0x1a04b2d80041
	void ServerSpawnAirdrop(const int AirdropID);// 0x1a03b2d80041
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float SpreadStatuSpeed);// 0x1a02b2d80041
	void ServerSolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x1a01b2d80041
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x1a00b2d80041
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x19ffb2d80041
	void ServerSolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x19feb2d80041
	void ServerSolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x19fdb2d80041
	void ServerSolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x19fcb2d80041
	void ServerSolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x19fbb2d80041
	void ServerSolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float Lifetime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x19fab2d80041
	void ServerSetPlayerLevel(int InLevel);// 0x19f9b2d80041
	void ServerSetHangUpBehavior();// 0x19f8b2d80041
	void ServerSetFreeLook(bool bInFreeLook);// 0x19f7b2d80041
	void ServerSetActorOwner(Actor* TargetActor);// 0x19f6b2d80041
	void ServerRPCResetZoneBombsFire();// 0x19f5b2d80041
	void ServerRespondSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState, bool bAgreed);// 0x19f4b2d80041
	void ServerRespondSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState, bool bAgreed);// 0x19f3b2d80041
	void ServerRequestSkydivingLeaderTransfer(SolarPlayerState* DesiredLeaderPlayerState);// 0x19f2b2d80041
	void ServerRequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x19f1b2d80041
	void ServerPlayerUpgrade(int InLevel);// 0x19f0b2d80041
	void ServerPlayerResumeSettlement();// 0x19efb2d80041
	void ServerPlayerRequestLogout(bool IsGiveUp);// 0x19eeb2d80041
	void ServerPlayerGoToSettlement();// 0x19edb2d80041
	void ServerNetProfile(bool startOrStop);// 0x19ecb2d80041
	void ServerInviteSkydivingFollow(SolarPlayerState* FollowerPlayerState);// 0x19ebb2d80041
	void ServerGoSpectatePreviousPlayer();// 0x19eab2d80041
	void ServerGoSpectatePlayerByPlayerIdInternal(FString SolarPlayerId);// 0x19e9b2d80041
	void ServerGoSpectatePlayerByPlayerId(FString SolarPlayerId);// 0x19e8b2d80041
	void ServerGoSpectatePlayerByIndex_Internal(int Index);// 0x19e7b2d80041
	void ServerGoSpectatePlayerByIndex(int Index);// 0x19e6b2d80041
	void ServerGoSpectateNextPlayer();// 0x19e5b2d80041
	void ServerGainExperience(int InExp);// 0x19e4b2d80041
	void ServerEnableCheats();// 0x19e3b2d80041
	void ServerCmd(FString Cmd);// 0x19e2b2d80041
	void ServerChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x19e1b2d80041
	void ServerChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x19e0b2d80041
	void ServerChangeVehicleIntProperty(FString InPropertyName, int InFloat);// 0x19dfb2d80041
	void ServerChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x19deb2d80041
	void ServerChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x19ddb2d80041
	void ServerChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x19dcb2d80041
	void ServerChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x19dbb2d80041
	void ServerCancelSkydivingFollow();// 0x19dab2d80041
	void ServerCallMonsterAICmd(int InType, float Param);// 0x19d9b2d80041
	void SendRepliableMessageServer(const int Message);// 0x19d8b2d80041
	void SendRepliableMessageInMsgBucket(out const int[] MessageIDs);// 0x19d7b2d80041
	void SendRepliableMessageByMessageID(out const int ID);// 0x19d6b2d80041
	void SendQuickMessageServer(FString Message, bool bSound);// 0x19d5b2d80041
	void SendQuickMessageClient(FString NickName, FString Message, bool IsLocalPlayer, bool bSound, int PosInTeam);// 0x19d4b2d80041
	void SendLocalizationTeamMessageServer(int TextID, const LocTextParam[] TextParams, FString SoundEvent);// 0x19d3b2d80041
	void SendLocalizationTeamMessageClient(const SolarPlayerState* SenderPS, int TextID, const LocTextParam[] TextParams, FString SoundEvent, int PosInTeam);// 0x19d1b2d80041
	void SendLocalizationTeamMessage(int TextID, out const <FString,int> TextParamsId, FString SoundEvent);// 0x19d0b2d80041
	void SendDamageTextDataNextTick(out const SolarDamageText InSolarDamageText);// 0x19cfb2d80041
	void RespondSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState, bool bAgreed);// 0x19ceb2d80041
	void RespondSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState, bool bAgreed);// 0x19cdb2d80041
	void ResetPeekInput();// 0x19ccb2d80041
	void ResetJoyStickSprintState();// 0x19cbb2d80041
	void ResetJoyStickControlInput();// 0x19cab2d80041
	void ResetAllInput();// 0x19c9b2d80041
	void RequestSkydivingLeaderTransfer(SolarPlayerState* DesiredLeaderPlayerState);// 0x19c8b2d80041
	void RequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x19c7b2d80041
	void QuickMessageLuaCall(FString Message, bool bSound);// 0x19c6b2d80041
	int QueryStage();// 0x19c5b2d80041
	void PostInputAction(FName ActionName, byte KeyEvent);// 0x19c4b2d80041
	void PlayerGoToSettleMent();// 0x19c3b2d80041
	void PlayerGotoLobbyWithLogout();// 0x19c2b2d80041
	void PassiveTriggeredVoice(enum VoiceType);// 0x19c0b2d80041
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);// 0x19bfb2d80041
	void OnTeamNumChangeFun(enum ChangeType, int OldValue, int NewValue);// 0x19beb2d80041
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);// 0x19bdb2d80041
	void OnSpectateTargetChangedHandler(SolarPlayerState* OldTarget, SolarSpectateInfo* MySpecInfo);// 0x19bcb2d80041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x19bbb2d80041
	void OnSkydivingStatusUpdated(SolarPlayerState* SelfPlayerState, bool bInIsSkydiving);// 0x19bab2d80041
	void OnShowGameNotice(const int InNoticeID, out const <FString,FString> InNoticeParams);// 0x19b9b2d80041
	RotationBarMarkWidget*[] OnShowActorMarkDelegate__DelegateSignature(Actor*[] MarkActors);// 0x19b8b2d80041
	void OnSeamlessTravelEnd();// 0x19b7b2d80041
	void OnReceivedSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState);// 0x19b6b2d80041
	void OnReceivedSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState);// 0x19b5b2d80041
	void OnReceiveBattleEnd();// 0x19b4b2d80041
	void OnPutAwayWeaponPressed();// 0x19b3b2d80041
	void OnPlayerStateRepHandlerForSpectate(enum RepType, PlayerState* InPlayerState);// 0x19b2b2d80041
	void OnPawnReplicated__DelegateSignature();// 0x19b1b2d80041
	void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(out const int64 InItemInstanceId);// 0x19b0b2d80041
	void OnEnterVoyageDelegate__DelegateSignature();// 0x19afb2d80041
	void OnEnterLanding();// 0x19aeb2d80041
	void OnEndSpectateMode(SolarSpectateInfo* MySpecInfo);// 0x19adb2d80041
	void OnCustomizeLevelLoaded();// 0x19acb2d80041
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(RotationBarMarkWidget*[] MarkWidgets);// 0x19abb2d80041
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(Actor*[] MarkActors);// 0x19aab2d80041
	void OnCharacterRebirthLua();// 0x19a9b2d80041
	void OnCharacterDeathLua();// 0x19a8b2d80041
	void OnCatchInputActionDelegate__DelegateSignature(FName ActionName, byte InputEventType);// 0x19a6b2d80041
	void OnBeginSpectateMode(SolarSpectateInfo* MySpecInfo);// 0x19a5b2d80041
	void OnBeforeSpectateTargetChanged(SolarPlayerState* NewTarget, SolarSpectateInfo* MySpecInfo);// 0x19a4b2d80041
	void OnAppHasReactivated();// 0x19a3b2d80041
	void OnAppHasDeactiveated();// 0x19a2b2d80041
	void NotifyMonsterSpawn();// 0x19a1b2d80041
	void NotifyCrouchIsLocked();// 0x19a0b2d80041
	void NotifyAppReactivate();// 0x199fb2d80041
	void NotifyAppHasDeactivate();// 0x199eb2d80041
	void NofityCustomizeLevelLoaded();// 0x199db2d80041
	void MarkWorldInLevelLuaCall(out const WorldMarkData InWorldMarkedData);// 0x199cb2d80041
	void MarkWorldInLevel(const WorldMarkData InWorldMarkedData);// 0x199bb2d80041
	void MarkPointInNavMapLuaCall(out const Vector2D InMarkedPoint);// 0x199ab2d80041
	void MarkPointInNavMap(const Vector2D InMarkedPoint);// 0x1999b2d80041
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x1998b2d80041
	void MarkedAsAppHasReactivated();// 0x1997b2d80041
	void MarkedAsAppHasDeactivated();// 0x1996b2d80041
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x1995b2d80041
	void LuaCallInputTouch(uint32 Handle, byte Type, out const Vector2D TouchLocation);// 0x1993b2d80041
	void LookUp(float Value);// 0x1992b2d80041
	void KickMeOutAtDS(FString InPlayerId);// 0x1991b2d80041
	bool IsSpectatingOtherPlayer();// 0x1990b2d80041
	bool IsHasSkydiveAndEnd();// 0x198fb2d80041
	void InviteSkydivingFollow(SolarPlayerState* FollowerPlayerState);// 0x198eb2d80041
	void InputWorldMarkReleased();// 0x198db2d80041
	void InputWorldMarkPressed();// 0x198cb2d80041
	void InputVerticalJetReleased();// 0x198bb2d80041
	void InputVerticalJetPressed();// 0x198ab2d80041
	void InputUseMedicineReleased();// 0x1989b2d80041
	void InputUseMedicinePressed();// 0x1988b2d80041
	void InputToggleTertiaryWeapon_Checkbox();// 0x1987b2d80041
	void InputToggleSecondaryWeaponReleased();// 0x1986b2d80041
	void InputToggleSecondaryWeaponPressed();// 0x1985b2d80041
	void InputToggleSecondaryWeapon_Checkbox();// 0x1984b2d80041
	void InputTogglePrimaryWeaponReleased();// 0x1983b2d80041
	void InputTogglePrimaryWeaponPressed();// 0x1982b2d80041
	void InputTogglePrimaryWeapon_Checkbox();// 0x1981b2d80041
	void InputSwitchToSeatTwoPressed();// 0x1980b2d80041
	void InputSwitchToSeatThreePressed();// 0x197fb2d80041
	void InputSwitchToSeatOnePressed();// 0x197eb2d80041
	void InputSwitchToSeatFourPressed();// 0x197db2d80041
	void InputSwitchFireModeReleased();// 0x197cb2d80041
	void InputSwitchFireModePressed();// 0x197bb2d80041
	void InputStartRepairVehicleReleased();// 0x197ab2d80041
	void InputSprintLockStart();// 0x1979b2d80041
	void InputSprintFreeTerminate();// 0x1978b2d80041
	void InputSprintFreeStart();// 0x1977b2d80041
	void InputSprintFreeReleasedOnPC();// 0x1976b2d80041
	void InputSprintFreePressedOnPC();// 0x1975b2d80041
	void InputReloadReleased();// 0x1974b2d80041
	void InputReloadPressed();// 0x1973b2d80041
	void InputRechargeShieldReleased();// 0x1972b2d80041
	void InputRechargeShieldPressed();// 0x1971b2d80041
	void InputPickupReleased();// 0x1970b2d80041
	void InputPickupPressed();// 0x196fb2d80041
	void InputOpenSettingPressed();// 0x196eb2d80041
	void InputMoveRight(float InValueY);// 0x196db2d80041
	void InputMovementYReceived(float InValueY);// 0x196cb2d80041
	void InputMovementXReceived(float InValueX);// 0x196bb2d80041
	void InputMoveForward(float InValueX);// 0x196ab2d80041
	void InputMapPressed();// 0x1969b2d80041
	void InputLeftFireReleased();// 0x1968b2d80041
	void InputLeftFirePressed();// 0x1967b2d80041
	void InputJumpReleased();// 0x1966b2d80041
	void InputJumpPressed();// 0x1965b2d80041
	void InputInteractReleased();// 0x1964b2d80041
	void InputInteractPressed();// 0x1963b2d80041
	void InputHorizontalJetReleased();// 0x1962b2d80041
	void InputHorizontalJetPressed();// 0x1961b2d80041
	void InputGunsightReleased();// 0x1960b2d80041
	void InputGunsightPressed();// 0x195fb2d80041
	void InputGetOnVehicleReleased();// 0x195eb2d80041
	void InputGetOffVehicleReleased();// 0x195db2d80041
	void InputFreeLookReleased();// 0x195cb2d80041
	void InputFreeLookPressed();// 0x195bb2d80041
	void InputFireReleased();// 0x195ab2d80041
	void InputFirePressed();// 0x1959b2d80041
	void InputEscapeUIPressed();// 0x1958b2d80041
	void InputEquip2Released();// 0x1957b2d80041
	void InputEquip2Pressed();// 0x1956b2d80041
	void InputEquip1Released();// 0x1955b2d80041
	void InputEquip1Pressed();// 0x1954b2d80041
	void InputEjectReleased();// 0x1953b2d80041
	void InputEjectPressed();// 0x1952b2d80041
	void InputDriveVehicleReleased();// 0x1951b2d80041
	void InputCrouchReleased();// 0x1950b2d80041
	void InputCrouchPressed();// 0x194fb2d80041
	void InputCancelVehicleAbilityReleased();// 0x194eb2d80041
	void InputBuilding();// 0x194db2d80041
	void InputBackpackReleased();// 0x194cb2d80041
	void InputBackpackPressed();// 0x194bb2d80041
	void InputAltFireReleased();// 0x194ab2d80041
	void InputAltFirePressed();// 0x1949b2d80041
	void InputActiveVehicleSecondAbilityReleased();// 0x1948b2d80041
	void InputActiveVehicleFirstAbilityReleased();// 0x1947b2d80041
	void InputActionSecondaryReleased();// 0x1946b2d80041
	void InputActionSecondaryPressed();// 0x1945b2d80041
	void InputActionPrimaryReleased();// 0x1944b2d80041
	void InputActionPrimaryPressed();// 0x1943b2d80041
	bool IfSolarCharacterIsDriver();// 0x1942b2d80041
	void HandleDamageText(Actor* InDamageSource, Controller* InAutonomousController, out SolarPointDamageEvent InPointDamageEvent);// 0x1941b2d80041
	void HandleBeginSpectateRequest();// 0x1940b2d80041
	void GyroscopeTilt(Vector Tilt);// 0x193fb2d80041
	void GyroscopeRotationRate(Vector RotationRate);// 0x193eb2d80041
	SolarCharacter* GetViewportFocusedCharacter();// 0x193db2d80041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x193cb2d80041
	SolarSpectateInfo* GetSpectateInfo();// 0x193bb2d80041
	SolarCharacter* GetSpectatedCharacter();// 0x193ab2d80041
	SolarPlayerState* GetSolarViewPlayerState();// 0x1939b2d80041
	SolarPlayerState* GetSolarPlayerState();// 0x1938b2d80041
	SolarCharacter* GetSolarCharacter();// 0x1937b2d80041
	enum GetPlayNetStateInGame();// 0x1936b2d80041
	PlayerStatisticsData* GetPlayerStatData();// 0x1935b2d80041
	FString GetPlayerID();// 0x1934b2d80041
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x1933b2d80041
	byte GetMyTeamID();// 0x1932b2d80041
	byte GetMyPosInTeam();// 0x1931b2d80041
	Vector2D GetMyMarkedPointInNavMap();// 0x1930b2d80041
	int GetMultiKillNum();// 0x192fb2d80041
	int GetKillNum();// 0x192eb2d80041
	int GetKillingSpreesNum();// 0x192db2d80041
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();// 0x192cb2d80041
	SolarCameraComponent* GetCurrentCameraComponent();// 0x192bb2d80041
	void GetControlledVehiclePropertyContainer(out Object*[] OutObjects);// 0x192ab2d80041
	Rotator GetCharacterViewRotation();// 0x1929b2d80041
	Rotator GetCameraRotation();// 0x1928b2d80041
	Vector GetCameraLocation();// 0x1927b2d80041
	SolarCameraComponent* GetActiveCamera();// 0x1926b2d80041
	FString GenLocalizationMessage(int TextID, out const <FString,int> TextParamsId);// 0x1925b2d80041
	void ExcludeDifferentTeam(int TeamID);// 0x1924b2d80041
	void EndOBCurrentBattle();// 0x1923b2d80041
	void DropPassengerNotification();// 0x1922b2d80041
	void DestroyCharacterCorpse();// 0x1921b2d80041
	void DebugSetPlayerData();// 0x1920b2d80041
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x191fb2d80041
	void ClientSyncPlayerSelfReport(const SolarPlayerReport SelfReport, const SolarGameModeInfo GameInfo);// 0x191eb2d80041
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x191db2d80041
	void ClientShowDiePage();// 0x191cb2d80041
	void ClientRespondSkydivingLeaderTransferRequest(SolarPlayerState* DesiredLeaderPlayerState, bool bAgreed);// 0x191bb2d80041
	void ClientRespondSkydivingFollowInvitation(SolarPlayerState* FollowerPlayerState, bool bAgreed);// 0x191ab2d80041
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(SolarPlayerState* NewLeaderPlayerState, SolarPlayerState* OldLeaderPlayerState);// 0x1919b2d80041
	void ClientResetSpectatedView();// 0x1918b2d80041
	void ClientRequestSkydivingLeaderTransfer(SolarPlayerState* RequesterPlayerState);// 0x1917b2d80041
	void ClientReplacePlayerKillEffect(Actor* InSource, Actor* InTarget);// 0x1916b2d80041
	void ClientReceviceDamageText(const SolarDamageText[] InSolarDamageTextDatas);// 0x1914b2d80041
	void ClientPlayerGoViewInstigatorCustomTime(float ReachTime, float ViewTime, float ViewSelfBoyTime);// 0x1913b2d80041
	void ClientPlayerGoToSettlement(const SolarPlayerReport[] Reports, const SolarGameModeInfo GameInfo, const int[] InSettlementPageIndexs);// 0x1910b2d80041
	void ClientInviteSkydivingFollow(SolarPlayerState* InviterPlayerState);// 0x190fb2d80041
	void ClientGoViewInstigator();// 0x190eb2d80041
	void ClientDoCharacterOperation(const CharacterOperationEvent ChOperationEvt);// 0x190db2d80041
	void ClientCloseUI(FString UIName);// 0x190cb2d80041
	void ClientClearAudioListenerOverride();// 0x190bb2d80041
	void ClientCharacterIsDead();// 0x190ab2d80041
	void ClientBeginOBCurrentBattleInternal();// 0x1909b2d80041
	void ClearMarkedPointInNavMapLuaCall();// 0x1908b2d80041
	void ClearMarkedPointInNavMap();// 0x1907b2d80041
	void ChangeVehicleVectorPropertyInternal(FString InPropertyName, float InX, float InY, float InZ);// 0x1906b2d80041
	void ChangeVehicleRotatorPropertyInternal(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x1905b2d80041
	void ChangeVehicleIntPropertyInternal(FString InPropertyName, int InFloat);// 0x1904b2d80041
	void ChangeVehicleFloatPropertyInternal(FString InPropertyName, float InFloat);// 0x1903b2d80041
	void ChangeVehicleCurvePropertyInternal(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x1902b2d80041
	void ChangeVehicleBoolPropertyInternal(FString InPropertyName, bool InBool);// 0x1901b2d80041
	bool CanSolarCharacterLaunchJetPack();// 0x1900b2d80041
	bool CanSolarCharacterInput();// 0x18ffb2d80041
	bool CanSolarCharacterCrouch();// 0x18feb2d80041
	void CancelSkydivingFollow();// 0x18fdb2d80041
	void CallMonsterAICmd(int InType, float Param);// 0x18fcb2d80041
	void BuyRescurrectionEnded();// 0x18fbb2d80041
	void BuildSkydivingFollowOnLeavingTeam();// 0x18fab2d80041
	void BuildSkydivingFollowOnEnteringTeam();// 0x18f9b2d80041
	void BindSpectateDelegates(SolarSpectateInfo* SpecInfo);// 0x18f8b2d80041
	void BindDelegatesDependGameState();// 0x18f7b2d80041
	void BeNotifiedMarkedItemWasPickedUp(const int64 InItemInstanceId);// 0x18f6b2d80041
	void BeginOBCurrentBattle();// 0x18f5b2d80041
	void BackToLobby();// 0x18f4b2d80041
	void AddTeammateCandidate(SolarCharacter* Candidate, int TeamID);// 0x18f3b2d80041
	void AddRightPeekInput();// 0x18f2b2d80041
	void AddLeftPeekInput();// 0x18f1b2d80041

--------------------------------
Class: UI_ResurrectionProgress_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x318, Size: 0x8]
	Button* Button_Cancel;//[Offset: 0x320, Size: 0x8]
	Button* Button_Open;//[Offset: 0x328, Size: 0x8]
	Image* Image_BG;//[Offset: 0x330, Size: 0x8]
	GaugeImage_C* Image_GameProgressBar;//[Offset: 0x338, Size: 0x8]
	Overlay* Overlay;//[Offset: 0x340, Size: 0x8]
	SolarTextBlock* SolarTextBlock;//[Offset: 0x348, Size: 0x8]
	TextBlock* Text_GameProgressTime;//[Offset: 0x350, Size: 0x8]
	WidgetSwitcher* WidgetSwitcherBtn;//[Offset: 0x358, Size: 0x8]
	BPC_CountdownExec_C* CGMRebirthComponent;//[Offset: 0x360, Size: 0x8]
	SolarCharacter* OpeningCharacter;//[Offset: 0x368, Size: 0x8]
	BPC_BuyResurrection_C* BuyResurrection;//[Offset: 0x370, Size: 0x8]
	FString GetModuleName();// 0x9d9ab3000001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x9d99b3000001
	void BndEvt__Button_Open_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xffffff8ab2d80002
	void BndEvt__Button_Cancel_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0xffffff8ab2d80002
	void Init(BPC_CountdownExec_C* CGMRebirthComponent, SolarCharacter* OpeningCharacter);// 0x69b6b2da3540
	static void ExecuteUbergraph_UI_ResurrectionProgress(int EntryPoint, BP_DeathBoxCountdownExec_C* K2Node_DynamicCast_AsBP_Death_Box_Countdown_Exec, bool K2Node_DynamicCast_bSuccess, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_CountdownExec_C* K2Node_CustomEvent_CGMRebirthComponent, SolarCharacter* K2Node_CustomEvent_OpeningCharacter, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_GetOpenProgress_OpenProgress, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Clamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Clamp_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0xffffff8ab2d80002

--------------------------------
Class: SolarUserWidget.UserWidget.Widget.Visual.Object
	enum WidgetLayerLevel;//[Offset: 0x250, Size: 0x1]
	enum CaptureInput;//[Offset: 0x251, Size: 0x1]
	int MyRoot;//[Offset: 0x254, Size: 0x4]
	FString widgetkey;//[Offset: 0x258, Size: 0x10]
	bool bIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bReceiveReturnKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	class WidgetInputManager* InputManagerClass;//[Offset: 0x270, Size: 0x8]
	WidgetInputManager* InputManager;//[Offset: 0x278, Size: 0x8]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x280, Size: 0x50]
	WidgetAnimation* PlayingAnimation;//[Offset: 0x2d0, Size: 0x8]
	PlayAnimationParams[] PendingPlayAnimations;//[Offset: 0x2f0, Size: 0x10]
	bool WidgetLuaTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	SolarUserWidget*[] AllSolarUserWidgetChilds;//[Offset: 0x308, Size: 0x10]
	void UnbindControlDefine();// 0x1cbdb2d80041
	void SetZOrder(int ZOrder);// 0x1cbcb2d80041
	void SetWidgetLuaTickEnabled(bool bEnabled);// 0x1cbbb2d80041
	void SetNeedDestroyLuaObject(bool bInNeedDestroyLuaObject);// 0x1cbab2d80041
	void RemoveUObjectNode(SolarUserWidget* Widget);// 0x1cb9b2d80041
	void ReceiveTick(out const Geometry MyGeometry, float InDeltaTime);// 0x1cb8b2d80041
	void ReceiveShow();// 0x1cb7b2d80041
	void ReceiveHide();// 0x1cb6b2d80041
	bool PlayAnimationByName(out const FName AnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x1cb5b2d80041
	void PlayAnimationByExclusively(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1cb4b2d80041
	void OnTouchManagerInitialized();// 0x1cb3b2d80041
	void OnSynchronizeProperties();// 0x1cb2b2d80041
	void OnSolarUIOpened();// 0x1cb1b2d80041
	void OnSolarUIClosed();// 0x1cb0b2d80041
	void OnShow();// 0x1cafb2d80041
	void OnHide();// 0x1caeb2d80041
	void OnExclusivelyAnimationFinished();// 0x1cadb2d80041
	void OnDeinitialize();// 0x1cacb2d80041
	void OnBackKey();// 0x1cabb2d80041
	bool IsWidgetLuaTickEnabled();// 0x1caab2d80041
	bool IsSolarUserWidgetAndBindLua(Widget* InWidget);// 0x1ca9b2d80041
	Vector2D[] GetTouchedLocation();// 0x1ca8b2d80041
	Vector2D[] GetPointerLocation();// 0x1ca7b2d80041
	SolarPlayerState* GetOwningSolarPlayerState();// 0x1ca6b2d80041
	SolarCharacter* GetOwningSolarPlayerCharacter();// 0x1ca5b2d80041
	WidgetAnimation* GetAnimationByName(out const FName AnimationName);// 0x1ca4b2d80041
	Widget* FindWidgetFromName(out const FName Name);// 0x1ca3b2d80041
	void ExecuteSolarUIShow();// 0x1ca2b2d80041
	void ExecuteSolarUIOpened();// 0x1ca1b2d80041
	void ExecuteSolarUIHide();// 0x1ca0b2d80041
	void ExecuteSolarUIClosed();// 0x1c9fb2d80041
	void ExecuteSolarUIClean();// 0x1c9eb2d80041
	void BindControlDefine(FString FullPath);// 0x1c9db2d80041
	void AddUObjectNode(SolarUserWidget* Widget);// 0x1c9cb2d80041

--------------------------------
Class: BPC_CountdownExec_C.CGMCountdownExecComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf0, Size: 0x8]
	void AddUI(SolarCharacter* OpeningCharacter, UI_ResurrectionProgress_C* CallFunc_Get_Local_Resurrection_Progress_UI_UIRef);// 0x9d4db3000001
	void CloseUI(UI_ResurrectionProgress_C* CallFunc_Get_Local_Resurrection_Progress_UI_UIRef, bool CallFunc_IsValid_ReturnValue);// 0x9d4cb3000001
	void ExecuteAfterTheCountdown();// 0x9d4bb3000001
	void OnRespondToPlayerApproachingExec(SolarCharacter* Character);// 0x9d4ab3000001
	void OnRespondToPlayerLeavingExec(SolarCharacter* Character);// 0xffffff8ab2d80002
	void OnStartStartCountingDownExec(SolarCharacter* InOpeningCharacter);// 0xffffff8ab2d80002
	void ExecuteUbergraph_BPC_CountdownExec(int EntryPoint, SolarCharacter* K2Node_Event_Character, SolarCharacter* K2Node_Event_Character, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, SolarCharacter* K2Node_Event_InOpeningCharacter, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess);// 0x9d50b3000001

--------------------------------
Class: CGMCountdownExecComponent.ActorComponent.Object
	enum State;//[Offset: 0xb8, Size: 0x1]
	float OpenTime;//[Offset: 0xbc, Size: 0x4]
	float MinOpenTime;//[Offset: 0xc0, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0xc8, Size: 0x8]
	float openProgress;//[Offset: 0xd0, Size: 0x4]
	bool bHasBeenExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	float ProtectionTime;//[Offset: 0xd8, Size: 0x4]
	float RestProtectionTime;//[Offset: 0xdc, Size: 0x4]
	float CurrentOpenedTime;//[Offset: 0xe0, Size: 0x4]
	SphereComponent* SphereComponent;//[Offset: 0xe8, Size: 0x8]
	void StartCountingDown(SolarCharacter* InOpeningCharacter);// 0x3388b2d80041
	void RespondToPlayerLeaving(SolarCharacter* Character);// 0x3387b2d80041
	void RespondToPlayerApproaching(SolarCharacter* Character);// 0x3386b2d80041
	void OnStartStartCountingDownExec(SolarCharacter* InOpeningCharacter);// 0x3385b2d80041
	void OnRespondToPlayerLeavingExec(SolarCharacter* Character);// 0x3384b2d80041
	void OnRespondToPlayerApproachingExec(SolarCharacter* Character);// 0x3383b2d80041
	void OnRep_StateChange();// 0x3382b2d80041
	void OnRep_OpenCharacterChange();// 0x3381b2d80041
	bool IsOpenningCharacterOffline();// 0x3380b2d80041
	bool IsOpeningCharacterInRange();// 0x337fb2d80041
	void ExecuteAfterTheCountdown();// 0x337eb2d80041

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	delegate PendingBeginPlay;//[Offset: 0x600, Size: 0x10]
	delegate OnPlayerStatePossessDelegate;//[Offset: 0x638, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x648, Size: 0x10]
	enum SolarCharacterType;//[Offset: 0x658, Size: 0x1]
	SolarCharacter* ClientControlledCharacter;//[Offset: 0x660, Size: 0x8]
	Vector2D CharacterCapsuleSizeOverride;//[Offset: 0x668, Size: 0x8]
	bool bInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]
	float CheckInRoomInterval;//[Offset: 0x674, Size: 0x4]
	ReconnectionParams ReconnectionParams;//[Offset: 0x67d, Size: 0x1]
	SolarAnimInstance* SolarAnimInstance;//[Offset: 0x690, Size: 0x8]
	SolarSpecABP_Vehicle* SolarSpecAnim_Vehicle;//[Offset: 0x698, Size: 0x8]
	int BodyHitSoundCount;//[Offset: 0x6a4, Size: 0x4]
	SolarChargingPile*[] ChargingPileQueue;//[Offset: 0x6a8, Size: 0x10]
	int64 ChargingDoneSoundCD;//[Offset: 0x6b8, Size: 0x8]
	class CameraShake* HitCameraShake;//[Offset: 0x6d0, Size: 0x8]
	float CameraShakeCD;//[Offset: 0x6d8, Size: 0x4]
	delegate OnCharacterIDSet;//[Offset: 0x6e8, Size: 0x10]
	delegate OnSkinIDSet;//[Offset: 0x6f8, Size: 0x10]
	delegate OnCharacterSkinReset;//[Offset: 0x708, Size: 0x10]
	enum BodyScaleType;//[Offset: 0x718, Size: 0x1]
	int AssignedCharacterID;//[Offset: 0x71c, Size: 0x4]
	int AssignedSkinID;//[Offset: 0x720, Size: 0x4]
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0x870, Size: 0x8]
	SolarBackpackActor* SolarBackpackActor;//[Offset: 0x878, Size: 0x8]
	SolarBackpackComponent* SolarBackpackComponent;//[Offset: 0x880, Size: 0x8]
	BackpackJetPrepelInfo JetPropellingInfo;//[Offset: 0x890, Size: 0xc]
	Vector2D InputVector;//[Offset: 0x89c, Size: 0x8]
	GyroscopeConfig* GyroscopeConfig;//[Offset: 0x8a8, Size: 0x8]
	byte IdleTurnType;//[Offset: 0x8b0, Size: 0x1]
	Rotator CharacterLookAt;//[Offset: 0x8b4, Size: 0xc]
	float TurnSpeed;//[Offset: 0x8d8, Size: 0x4]
	float TurnChangeSpeedThreshold;//[Offset: 0x8dc, Size: 0x4]
	CharacterOperationEvent CharacterOperationEvt;//[Offset: 0x8e0, Size: 0x10]
	delegate OnHealthUpdateDelegate;//[Offset: 0x908, Size: 0x10]
	bool bIsDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x918, Size: 0x1]
	class ActorEffect* DissolvedDeathActorEffectClass;//[Offset: 0x928, Size: 0x8]
	ParticleSystem* DissolvedDeathFX;//[Offset: 0x930, Size: 0x28]
	FName DissolvedDeathFXBindingSocketName;//[Offset: 0x958, Size: 0x8]
	SolarTeamRescueComponent* SolarTeamRescueComponent;//[Offset: 0x968, Size: 0x8]
	byte CurrentRescueState;//[Offset: 0x970, Size: 0x1]
	byte LastRescueState;//[Offset: 0x971, Size: 0x1]
	InjectorMeshPreset RescueInjectorPreset;//[Offset: 0x980, Size: 0x50]
	StaticMeshComponent* RescueInjector;//[Offset: 0x9d0, Size: 0x8]
	SolarCharacter* RescuedCharater;//[Offset: 0x9fc, Size: 0x8]
	SolarPlayerWeapon*[] DeathBoxWeaponArray;//[Offset: 0xa08, Size: 0x10]
	SolarItemData[] DeathBoxArray;//[Offset: 0xa18, Size: 0x10]
	float DeathBoxEnergy;//[Offset: 0xa28, Size: 0x4]
	int DeathBoxId;//[Offset: 0xa2c, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0xa30, Size: 0x8]
	float KneeWaterInfluencesCharacterSpeed;//[Offset: 0xa38, Size: 0x4]
	float WaterDraftDepthWhenDeathVerge;//[Offset: 0xa3c, Size: 0x4]
	float ShoalWaterMaxDepth;//[Offset: 0xa40, Size: 0x4]
	float HeavyJumpWaterMinAxisVelocity;//[Offset: 0xa44, Size: 0x4]
	WaterEffectPreset SwimmingWaterEffectPreset;//[Offset: 0xa48, Size: 0x50]
	ParticleSystemComponent* SwimmingWaterEffect;//[Offset: 0xa98, Size: 0x8]
	WaterEffectPreset HeavyJumpWaterEffectPreset;//[Offset: 0xaa0, Size: 0x50]
	WaterEffectPreset[] SoftJumpWaterEffectPresets;//[Offset: 0xaf0, Size: 0x10]
	ParticleSystemComponent*[] HorizontalFlyWaterEffects;//[Offset: 0xb00, Size: 0x10]
	FName PickupCollisionProfileName;//[Offset: 0xb2c, Size: 0x8]
	SolarItemComponent* SolarItemComponent;//[Offset: 0xb38, Size: 0x8]
	SolarPickupComponent* SolarPickupComponent;//[Offset: 0xb40, Size: 0x8]
	bool bIsElectricStoreOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 0x1]
	ParticleSystem* TreatFX;//[Offset: 0xb50, Size: 0x28]
	float MinHealthRatioToShowMedicineFX;//[Offset: 0xb78, Size: 0x4]
	SolarTreatmentComponent* SolarTreatmentComponent;//[Offset: 0xb80, Size: 0x8]
	int TreatmentTextID;//[Offset: 0xb88, Size: 0x4]
	enum CurrentTreatState;//[Offset: 0xb8c, Size: 0x1]
	delegate OnShieldRecharge;//[Offset: 0xb90, Size: 0x10]
	delegate OnShieldBreak;//[Offset: 0xba0, Size: 0x10]
	delegate OnShowShieldHUD;//[Offset: 0xbb0, Size: 0x10]
	delegate OnShowShieldHUDItem;//[Offset: 0xbc0, Size: 0x10]
	delegate OnShieldUpFX;//[Offset: 0xbd0, Size: 0x10]
	delegate OnCurShieldValueChanged;//[Offset: 0xbe0, Size: 0x10]
	delegate OnShieldIDChanged;//[Offset: 0xbf0, Size: 0x10]
	delegate OnShieldValueLow;//[Offset: 0xc00, Size: 0x10]
	int CurrShieldId;//[Offset: 0xc14, Size: 0x4]
	int CurUniqueShieldId;//[Offset: 0xc18, Size: 0x4]
	float MaxShieldValue;//[Offset: 0xc1c, Size: 0x4]
	float CurrShieldValue;//[Offset: 0xc20, Size: 0x4]
	enum CurrShieldState;//[Offset: 0xc24, Size: 0x1]
	OperatorMeshPreset ShieldOperatorPreset;//[Offset: 0xc70, Size: 0x80]
	StaticMeshComponent* ShieldRepairOperator;//[Offset: 0xcf0, Size: 0x8]
	ParticleSystemComponent* ShieldRepairFX;//[Offset: 0xcf8, Size: 0x8]
	CurveFloat* ShieldOperatorExpandCurve;//[Offset: 0xd00, Size: 0x8]
	CurveFloat* ShieldOperatorNarrowCurve;//[Offset: 0xd08, Size: 0x8]
	Timeline ShieldOperatorExpandTimeline;//[Offset: 0xd10, Size: 0x98]
	Timeline ShieldOperatorNarrowTimeline;//[Offset: 0xda8, Size: 0x98]
	FName EffectAttachBone;//[Offset: 0xe40, Size: 0x8]
	ShieldEffect ShieldRechargeEffect;//[Offset: 0xe48, Size: 0x38]
	ShieldEffect ShieldBrokenEffect;//[Offset: 0xe80, Size: 0x38]
	float HitEffectOffset;//[Offset: 0xeb8, Size: 0x4]
	<enum,ShieldSoundData> ShieldSounds;//[Offset: 0xec0, Size: 0x50]
	int ShieldRechargeTextID;//[Offset: 0xf14, Size: 0x4]
	TreasureBoxOperatorMeshPreset TreasureBoxOperatorMeshPreset;//[Offset: 0xf20, Size: 0x50]
	StaticMeshComponent* TreasureBoxOperator;//[Offset: 0xf70, Size: 0x8]
	DeathTreasureBox* CurChargingDeathBox;//[Offset: 0xf78, Size: 0x8]
	DeathTreasureBox*[] DeathBoxes;//[Offset: 0xf80, Size: 0x10]
	ParticleSystem* RevivePickupFX;//[Offset: 0xf98, Size: 0x28]
	ParticleSystem* ReviveClearFX;//[Offset: 0xfc0, Size: 0x28]
	delegate OnHUDNickNameSet;//[Offset: 0xfe8, Size: 0x10]
	delegate OnHUDTeamPosSet;//[Offset: 0xff8, Size: 0x10]
	delegate OnHUDDistanceSet;//[Offset: 0x1008, Size: 0x10]
	delegate OnHUDDistanceDisplaySet;//[Offset: 0x1018, Size: 0x10]
	delegate OnHUDRescueBtnActivitySet;//[Offset: 0x1028, Size: 0x10]
	WidgetComponent* TeammateHUDComp;//[Offset: 0x1038, Size: 0x8]
	TeammateHUDPreset TeammateHUDPreset;//[Offset: 0x1040, Size: 0x20]
	float HUDZNomral;//[Offset: 0x1068, Size: 0x4]
	float HUDZSwim;//[Offset: 0x106c, Size: 0x4]
	float HUDZCrouch;//[Offset: 0x1070, Size: 0x4]
	float HUDZCrawl;//[Offset: 0x1074, Size: 0x4]
	float HUDChangeTime;//[Offset: 0x1078, Size: 0x4]
	float HUDChangeSpeed;//[Offset: 0x107c, Size: 0x4]
	float CheckHUDDistanceToCenter;//[Offset: 0x1080, Size: 0x4]
	float HUDTranslucentValue;//[Offset: 0x1084, Size: 0x4]
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0x1098, Size: 0x8]
	class UserWidget* RadarScannedScreenUIClass;//[Offset: 0x10a0, Size: 0x8]
	float RadarScreenUIDisplayTime;//[Offset: 0x10a8, Size: 0x4]
	SolarRadarComponent* SolarRadarComponent;//[Offset: 0x10b0, Size: 0x8]
	RadarDataSpecContainer ActivatedRadars;//[Offset: 0x10b8, Size: 0x120]
	SolarRadarStation* TargetRadarStation;//[Offset: 0x11d8, Size: 0x8]
	SolarElectricShop* TargetElectricShop;//[Offset: 0x11e0, Size: 0x8]
	TimerHandle StatisticsTimerHandle;//[Offset: 0x11f0, Size: 0x8]
	SolarCharacter* CachedInstigatorCharacter;//[Offset: 0x1268, Size: 0x8]
	delegate OnPlayerHitAtDirection;//[Offset: 0x1280, Size: 0x10]
	float DamageLimitTime;//[Offset: 0x1290, Size: 0x4]
	float MinHitTurnBackDistance;//[Offset: 0x1294, Size: 0x4]
	float MaxHitTurnBackDistance;//[Offset: 0x1298, Size: 0x4]
	float HitTurnBackDuration;//[Offset: 0x129c, Size: 0x4]
	float HitTurnBackCD;//[Offset: 0x12a0, Size: 0x4]
	float BaseHitTurnSpeed;//[Offset: 0x12a4, Size: 0x4]
	float MinHitTurnSpeedRate;//[Offset: 0x12a8, Size: 0x4]
	float ArmorReduceValue;//[Offset: 0x12ac, Size: 0x4]
	float HeadHitValue;//[Offset: 0x12b0, Size: 0x4]
	int InstigatorCharacterWeaponItemID;//[Offset: 0x12b4, Size: 0x4]
	float MinDistSquared;//[Offset: 0x12b8, Size: 0x4]
	float MaxDistSquared;//[Offset: 0x12bc, Size: 0x4]
	float HitTurnBackTimeStamp;//[Offset: 0x12c0, Size: 0x4]
	CriticalHitInfo[] CriticalHits;//[Offset: 0x12c8, Size: 0x10]
	float DefaultHitTraceLifetime;//[Offset: 0x131c, Size: 0x4]
	CurveFloat* DefaultHitTraceWidgetScaleCurve;//[Offset: 0x1320, Size: 0x8]
	float SniperHitTraceLifetime;//[Offset: 0x1328, Size: 0x4]
	CurveFloat* SniperHitTraceWidgetScaleCurve;//[Offset: 0x1330, Size: 0x8]
	float MeleeHitTraceLifetime;//[Offset: 0x1338, Size: 0x4]
	float VehicleHitTraceLifetime;//[Offset: 0x133c, Size: 0x4]
	CurveFloat* VehicleHitTraceWidgetScaleCurve;//[Offset: 0x1340, Size: 0x8]
	WorldMarkComponent* WorldMarkComponent;//[Offset: 0x1380, Size: 0x8]
	float PeekSpeed;//[Offset: 0x1388, Size: 0x4]
	int DesirePeekValue;//[Offset: 0x138c, Size: 0x4]
	IMChatObject* IMChatObj;//[Offset: 0x1390, Size: 0x8]
	int AIActorCapacity;//[Offset: 0x1398, Size: 0x4]
	SolarCharacterAbility* CharacterAbility;//[Offset: 0x13c0, Size: 0x8]
	SolarGameplayAbilitySet* DefaultAbilitiesWithCharacterData;//[Offset: 0x13c8, Size: 0x8]
	CharacterGameplayTagsConfig* GameplayTagsConfig;//[Offset: 0x13d0, Size: 0x8]
	float StandJogSpeed;//[Offset: 0x13f8, Size: 0x4]
	float StandRunSpeed;//[Offset: 0x13fc, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x1400, Size: 0x4]
	float CrouchJogSpeed;//[Offset: 0x1404, Size: 0x4]
	float CrouchRunSpeed;//[Offset: 0x1408, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x140c, Size: 0x4]
	float JetLandingTriggerMinVelocity;//[Offset: 0x1410, Size: 0x4]
	float JetLandingHeightThreshold;//[Offset: 0x1414, Size: 0x4]
	float JetLandingVelocity;//[Offset: 0x1418, Size: 0x4]
	delegate OnJogSetClient;//[Offset: 0x1420, Size: 0x10]
	SolarCharacterMovementComponent* CachedSolarCharacterMovement;//[Offset: 0x1430, Size: 0x8]
	bool bIsJog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x143c, Size: 0x1]
	bool bEnableCustomJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1448, Size: 0x1]
	enum CurrentCustomJumpType;//[Offset: 0x1449, Size: 0x1]
	enum CurrentJetFlyType;//[Offset: 0x144c, Size: 0x1]
	bool bNewJetFlyCheckFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144d, Size: 0x1]
	CruiseAssetSet* CruiseAssetSet;//[Offset: 0x1468, Size: 0x8]
	FString AirborneStartSound;//[Offset: 0x1470, Size: 0x10]
	FString AirborneJumpSound;//[Offset: 0x1480, Size: 0x10]
	AnimSequence* CruiseStartAnim;//[Offset: 0x1490, Size: 0x8]
	AnimSequence* CruiseLoopAnim;//[Offset: 0x1498, Size: 0x8]
	AnimSequence* CruiseEndAnim;//[Offset: 0x14a0, Size: 0x8]
	int CapsuleID;//[Offset: 0x14c0, Size: 0x4]
	bool bEnableCruising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c4, Size: 0x1]
	SolarCapsuleRoot* BoardedRoot;//[Offset: 0x14c8, Size: 0x8]
	enum CruiseState;//[Offset: 0x14d0, Size: 0x1]
	int ForceParachuteCountDown;//[Offset: 0x14d4, Size: 0x4]
	CharacterCruiseComponent* CruiseComponentPrivate;//[Offset: 0x14d8, Size: 0x8]
	SkydivingEffectPreset[] SkydivingEffectClassList;//[Offset: 0x14e8, Size: 0x10]
	float LowerLimitOfSpeedForSkydivingSoundEffect;//[Offset: 0x14f8, Size: 0x4]
	float MinPitchToPlaySkydivingLandingEffect;//[Offset: 0x14fc, Size: 0x4]
	delegate OnSkydiveTraced;//[Offset: 0x1500, Size: 0x10]
	ExponentialHeightFog* HeightFogActor;//[Offset: 0x1510, Size: 0x8]
	ParticleSystemComponent*[] SkydiveFlyingEffects;//[Offset: 0x1518, Size: 0x10]
	ParticleSystemComponent*[] SkydiveLandingEffects;//[Offset: 0x1528, Size: 0x10]
	ParticleSystemComponent*[] SkydiveWholeLifetimeEffects;//[Offset: 0x1538, Size: 0x10]
	enum CurrentSkydiveStage;//[Offset: 0x1548, Size: 0x1]
	ActorComponent* FollowedLeaderMovementComponent;//[Offset: 0x1570, Size: 0x8]
	WeaponSystemPlayerBase* WeaponSystemComponent;//[Offset: 0x1590, Size: 0x8]
	float WeaponInfluencesCharacterSpeed;//[Offset: 0x1598, Size: 0x4]
	float WeaponBlotAnimLength;//[Offset: 0x159c, Size: 0x4]
	float WeaponSwitchAnimLength;//[Offset: 0x15a0, Size: 0x4]
	float WeaponReloadAnimLength;//[Offset: 0x15a4, Size: 0x4]
	MaterialInstance* MarkMaterial;//[Offset: 0x15e0, Size: 0x8]
	SkeletalMeshComponentConfig* FirstPersonMeshConfig;//[Offset: 0x15f0, Size: 0x8]
	SkeletalMeshComponent* FirstPersonMesh;//[Offset: 0x15f8, Size: 0x8]
	float BaseGunCollisionTraceDis;//[Offset: 0x1600, Size: 0x4]
	float CurrentGunCollisionTraceDis;//[Offset: 0x1604, Size: 0x4]
	<enum,float> GunCollisionTraceStartHighIdle;//[Offset: 0x1608, Size: 0x50]
	<enum,float> GunCollisionTraceStartHighCrouch;//[Offset: 0x1658, Size: 0x50]
	float MinDistanceGun2Wall;//[Offset: 0x16a8, Size: 0x4]
	float GunCollisionXYAdjustDownSide;//[Offset: 0x16ac, Size: 0x4]
	float GunCollisionCheckZLimit;//[Offset: 0x16b0, Size: 0x4]
	class WeaponSystemPlayer* WeaponSystemPlayerClass;//[Offset: 0x16b8, Size: 0x8]
	class WeaponSystemPlayerAI* WeaponSystemAIClass;//[Offset: 0x16c0, Size: 0x8]
	class MapMarkBase* TrackingMarkWidgetClass;//[Offset: 0x16c8, Size: 0x8]
	SolarPlayerWeapon* TempSwitchWeapon;//[Offset: 0x16d8, Size: 0x8]
	WeaponSystemVehicleComponent* WeaponSystemVehicle;//[Offset: 0x1770, Size: 0x8]
	BoardedVehicleInfo BoardedVehicleInfo;//[Offset: 0x1790, Size: 0x10]
	bool bOutVehicleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a0, Size: 0x1]
	SolarVehicleWeapon* CurrentVehicleWeapon;//[Offset: 0x1850, Size: 0x8]
	VehicleRepairToolMeshPreset VehicleRepairToolMeshPreset;//[Offset: 0x1860, Size: 0x50]
	int RepairWeakPointTextID;//[Offset: 0x18b0, Size: 0x4]
	StaticMeshComponent* VehicleRepairToolMesh;//[Offset: 0x18b8, Size: 0x8]
	class ActorEffect* VehicleStealthEffectClass;//[Offset: 0x18c0, Size: 0x8]
	delegate OnCharacterActivateEMP;//[Offset: 0x18e0, Size: 0x10]
	bool bActiveEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f0, Size: 0x1]
	enum CurrentSkillType;//[Offset: 0x18f1, Size: 0x1]
	WidgetComponent* ReplayInfoHUDComponent;//[Offset: 0x1968, Size: 0x8]
	class UserWidget* ReplayInfoHUDWidgetClass;//[Offset: 0x1970, Size: 0x8]
	float VaultDegree;//[Offset: 0x1984, Size: 0x4]
	float VaultHalfHeight;//[Offset: 0x1988, Size: 0x4]
	float VaultCameraDistance;//[Offset: 0x198c, Size: 0x4]
	float VaultCheckDistanceInSprint;//[Offset: 0x1990, Size: 0x4]
	FName DetectorProfile;//[Offset: 0x1994, Size: 0x8]
	MotionWarpingComponent* SolarMotionWarpingComponent;//[Offset: 0x19a0, Size: 0x8]
	DebugReplicator* DebugReplicator;//[Offset: 0x1a30, Size: 0x8]
	FString DebugStringToDrawGASServer;//[Offset: 0x1a38, Size: 0x10]
	GameplayAbilitySpecHandle[] RoleAbilitySpecHandles;//[Offset: 0x1a50, Size: 0x10]
	bool WorldToScreen(out const Vector Location, out Vector2D Screen);// 0x17cfb2d80041
	void UpdateWeaponCrosshair(float InDeltaTime);// 0x17ceb2d80041
	void UpdateVehicleStealthProgress(float StealthMaterialPercent);// 0x17cdb2d80041
	void UpdateTeammateHUDData(byte InNewPosInTeam);// 0x17ccb2d80041
	void UpdateShieldPropertyByAblility();// 0x17cbb2d80041
	void UpdateDyingAttr(float DeltaTime);// 0x17cab2d80041
	float UpdateCurrentHealth(const float UpdateValue, const byte ChangeType, SolarCharacter* InInstigatorCharacter, Actor* InDamageCauserActor, out SolarPointDamageEvent DamageEvent, SolarMapElementBase* ElementObj);// 0x17c9b2d80041
	void UnbindActorToSelfTeam(Actor* Actor);// 0x17c8b2d80041
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);// 0x17c7b2d80041
	void TurnCharacterToDirection(out const Vector Dir);// 0x17c6b2d80041
	void TryStopShieldRecharge();// 0x17c5b2d80041
	void TryStatisticsRechargedTimes();// 0x17c4b2d80041
	void TryStartShieldRecharge();// 0x17c3b2d80041
	void TrySetTeammateHUDShow();// 0x17c2b2d80041
	void TrySetTeammateHUDHide();// 0x17c1b2d80041
	void TrySetTeamateHUDVisiblity();// 0x17c0b2d80041
	void TryRechargeShield();// 0x17bfb2d80041
	void TryHideShieldOperator();// 0x17beb2d80041
	bool TryGotoDyingState();// 0x17bdb2d80041
	void TryCreatingOwnTeammate();// 0x17bcb2d80041
	void TryBreakShieldRecharge();// 0x17bbb2d80041
	void TryBreakScopeStatus();// 0x17bab2d80041
	void TryBindPowerBarDelegates();// 0x17b9b2d80041
	void TryBindPickupDelegates();// 0x17b8b2d80041
	void TryBindItemPanelDelegates();// 0x17b7b2d80041
	void TryBindHPPanelDelegates();// 0x17b6b2d80041
	void TryAutoMarkItemForTeammateServer(const SolarItemData[] ItemData);// 0x17b5b2d80041
	void ToggleDebugInfo();// 0x17b4b2d80041
	void ToggleDebugGASInfo();// 0x17b3b2d80041
	void TickShieldOperatorTimeline(float InDeltaTime);// 0x17b2b2d80041
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x17b1b2d80041
	void StopTreatmentProgressBar();// 0x17b0b2d80041
	void StopTreatment();// 0x17afb2d80041
	void StopShieldRechargeProgressBar();// 0x17aeb2d80041
	void StopShieldRechargeProgress();// 0x17adb2d80041
	void StopRescueProgressBar(const int TextID);// 0x17acb2d80041
	void StopRepairWeakPointProgressBar();// 0x17abb2d80041
	void StopClimbSound();// 0x17aab2d80041
	void StatisticElectricShopOnActivated(out const Vector InLocation);// 0x17a9b2d80041
	void StartTurnToHitDirection(out const Vector HitDir);// 0x17a8b2d80041
	void StartTreatmentProgressBar(const float Duration);// 0x17a7b2d80041
	void StartTreatment();// 0x17a6b2d80041
	void StartShieldRechargeProgressBar(const float InRechargeDuration);// 0x17a5b2d80041
	void StartShieldRechargeProgress();// 0x17a4b2d80041
	void StartRescueProgressBar(const float Duration, const int TextID, const bool bShowBtn);// 0x17a3b2d80041
	void StartRepairWeakPointProgressBar(const float Duration);// 0x17a2b2d80041
	void StartCheckShieldTutorials();// 0x17a1b2d80041
	void SpecAnimInstStopMontage(enum SpecAnimType, AnimMontage* AnimMontage);// 0x17a0b2d80041
	float SpecAnimInstPlayMontage(enum SpecAnimType, AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x179fb2d80041
	AnimMontage* SpecAnimInstGetCurrentMontage(enum SpecAnimType);// 0x179eb2d80041
	void SpawnDeathBoxActor();// 0x179db2d80041
	void SolarLaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x179cb2d80041
	void SolarGM_ServerEnableCustomJump(bool bEnabled);// 0x179bb2d80041
	void SolarGM_EnableCustomJump(int Enabled);// 0x179ab2d80041
	void ShowShieldUIFX(const int ShiledID);// 0x1799b2d80041
	void ShowShieldUI(const bool IsShow);// 0x1798b2d80041
	void ShowRevivePickupEffect();// 0x1797b2d80041
	void ShowReviveClearEffect();// 0x1796b2d80041
	void ShowRescueInjector();// 0x1795b2d80041
	void ShieldOperatorInterpFunc(float InValue);// 0x1794b2d80041
	void SetSpectateTargetCharacter(SolarCharacter* InSpectateTargetCharacter);// 0x1793b2d80041
	void SetSelfEnergyCostEnable(bool bEnable);// 0x1792b2d80041
	void SetRequirementBySetting();// 0x1791b2d80041
	void SetRenderMode(byte Mode);// 0x1790b2d80041
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x178fb2d80041
	void SetNewCharacterSkin(SkeletalMesh* NewMesh, MaterialInterface* NewMaterial, class Object NewAnimClass);// 0x178eb2d80041
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x178db2d80041
	void SetActiveRescueBtn(bool bIsActive);// 0x178cb2d80041
	void ServerUseItemRequest(int ItemID, int Num);// 0x178bb2d80041
	void ServerTryRechargeShield(const float InRecoverySpeed);// 0x178ab2d80041
	void ServerTriggerRadarStation(SolarRadarStation* InRadarStation);// 0x1789b2d80041
	void ServerSyncVaultInfo(enum InVaultMontage, Actor* InContactActor, Vector InContactLocation, Rotator InContactRotation, Vector InLandLocation);// 0x1787b2d80041
	void ServerSwitchVehicleSeat(float LocalTime, SolarVehiclePawn* InVehicle, int TargetSeatIndex, const Vector_NetQuantize VehicleLocation, const Vector_NetQuantizeNormal VehicleEuler);// 0x1786b2d80041
	void ServerSwitchShield(const SolarItemData NewShieldData);// 0x1785b2d80041
	void ServerStatisticsRechargedTimes(const int RechargedTimes);// 0x1784b2d80041
	void ServerStatisticElectricShopOnActivated(const Vector InLocation);// 0x1783b2d80041
	void ServerStartRescue(SolarCharacter* TargetCharacter);// 0x1782b2d80041
	void ServerSpawnProjectile(class Object ProjClass, const Vector StartLocation, const Vector Velocity);// 0x1781b2d80041
	void ServerSetTreasureBoxState(SolarTreasureBoxActor* TreasureBox, const enum NewState, SolarCharacter* RequestCharacter);// 0x177fb2d80041
	void ServerSetInputVector(uint16 AxisX, uint16 AxisY);// 0x177eb2d80041
	void ServerSetIdleTurnType(byte TurnType);// 0x177cb2d80041
	void ServerSetDesirePeek(int NewValue);// 0x177bb2d80041
	void ServerSetCurChargingDeathBox(DeathTreasureBox* DeathBox);// 0x177ab2d80041
	void ServerSetCharacterOperation(enum InType, Object* Target);// 0x1779b2d80041
	void ServerSetCanBeDamaged(bool bInCanBeDamaged);// 0x1778b2d80041
	void ServerSendAntiLogFromClientToDS(FString AntiData);// 0x1777b2d80041
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable);// 0x1776b2d80041
	void ServerRPCDisplayAllElectricShops();// 0x1775b2d80041
	void ServerRecieveHitDataFromClient(SolarWeapon* Weapon, const BulletHitData HitData, const bool IsNotDelay);// 0x1771b2d80041
	void ServerPickUpWeapon(Actor* Actor, bool bIsAutoPickup, Vector ClientCharPos, Vector ClientItemPos);// 0x1770b2d80041
	void ServerPickUpTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x176fb2d80041
	void ServerPickUpItem(SolarItemActor* ItemActor, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x176eb2d80041
	void ServerPickUpHomeItemByDrag(SolarItemActor* ItemActor, int Grade, int GridIndex);// 0x176db2d80041
	void ServerPickUpBoxHomeItemByDrag(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, int Grade, int GridIndex);// 0x176cb2d80041
	void ServerOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x176bb2d80041
	void ServerOnDestructActor(SolarDestructibleActor* DestructibleActor, SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x176ab2d80041
	void ServerKillMe(enum DamageType);// 0x1769b2d80041
	void ServerInitSheildComp(const int InShiledID);// 0x1768b2d80041
	void ServerHideShieldOperator();// 0x1767b2d80041
	void ServerGMVehicleSubHealth(int SubHealth);// 0x1766b2d80041
	void ServerGetOnVehicle(float LocalTime, SolarVehiclePawn* InVehicle, int SeatIndex);// 0x1765b2d80041
	void ServerGetOffVehicleEjected(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection, float EjectForce);// 0x1764b2d80041
	void ServerGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x1763b2d80041
	void ServerDetectBlock();// 0x1762b2d80041
	void ServerCompleteRescue();// 0x1761b2d80041
	void ServerChangeRechargeState(const bool bRecharge);// 0x1760b2d80041
	void ServerCancleVault(float InAnimPosition, Vector InLandLocation);// 0x175fb2d80041
	void ServerCancelVehicleAbility(byte AbilityIndex);// 0x175eb2d80041
	void ServerCancelRescue();// 0x175db2d80041
	void ServerCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x175cb2d80041
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected();// 0x175bb2d80041
	void ServerApplyVehicleAbility(byte AbilityIndex);// 0x175ab2d80041
	void SendMultipleMsgsToWeapon(const PlayerWeaponMsg[] MsgArray);// 0x1759b2d80041
	void SendMsgToWeapon(const PlayerWeaponMsg Msg);// 0x1758b2d80041
	void SendMsgToVehicleWeapon(const PlayerWeaponMsg Msg);// 0x1755b2d80041
	void ReturnMostValuableItemIDServer(const byte TeammatePosInTeam, const int64 ItemThisID);// 0x1754b2d80041
	void ResponseChosenMark();// 0x1753b2d80041
	void RequestToStopVehicleRepairing();// 0x1752b2d80041
	void RequestToStartVehicleRepairing(SolarVehiclePawn* InVehicle);// 0x1751b2d80041
	void RequestPlayShieldSound(out ShieldSoundData ShieldSound, bool bIsOnly1P);// 0x174eb2d80041
	void RequestDisplayAllElectricShops();// 0x174db2d80041
	void RequestCompleteRescue();// 0x174cb2d80041
	void RequestCancelRescue();// 0x174bb2d80041
	void RemoveTreasureBoxOperator();// 0x174ab2d80041
	void RemoveTempComponent(PrimitiveComponent* TargetComp);// 0x1749b2d80041
	void RemoveTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag);// 0x1748b2d80041
	void RemoveShieldRepairEffectItem();// 0x1747b2d80041
	void RemoveShieldOperator();// 0x1746b2d80041
	void RefreshTeammateHUDUI(SolarPlayerState* SelfData);// 0x1745b2d80041
	void ReceiveVehicleAbilityInputForTutorial(byte AbilityIndex);// 0x1744b2d80041
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x1743b2d80041
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x1742b2d80041
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x1741b2d80041
	void ReceiveLocalPlayerCameraFOVChange(float NewCameraFOV, float LastCameraFOV);// 0x1740b2d80041
	void ReceivedOnShieldIdChanged(int LastShieldId);// 0x173fb2d80041
	void ReceiveAfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x173eb2d80041
	void QuitVehicleWholeShield();// 0x173db2d80041
	void QuitVehicleStealth();// 0x173cb2d80041
	void PostNotEnoughEnergyNotice();// 0x173bb2d80041
	void PlaySquatSound();// 0x173ab2d80041
	void PlaySpeedUpEffect(bool bIsUp);// 0x1739b2d80041
	void PlayShieldSoundByType(enum ShieldSoundType);// 0x1737b2d80041
	void PlayParachuteStartSound();// 0x1736b2d80041
	void PlayerStateReplicatedForHUD();// 0x1735b2d80041
	void PlayDissolvedDeathEffect();// 0x1734b2d80041
	void PlayActionSpringboardSound();// 0x1733b2d80041
	void OnUpdateShieldId();// 0x1732b2d80041
	void OnTeamIDChange();// 0x1731b2d80041
	void OnSkydiveTraced__DelegateSignature(out const HitResult HitResult);// 0x1730b2d80041
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);// 0x172fb2d80041
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x172eb2d80041
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);// 0x172db2d80041
	void OnShieldRechargeStart();// 0x172cb2d80041
	void OnShieldRechargeProgressBarComplete();// 0x172bb2d80041
	void OnShieldRechargeProgressBarCancel();// 0x172ab2d80041
	void OnShieldRechargeEnd();// 0x1729b2d80041
	void OnShieldIDChangedDelegate__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bIsAdvancedShield);// 0x1728b2d80041
	void OnSheildUpFXDelegate__DelegateSignature();// 0x1727b2d80041
	void OnSheildRechargeDelegate__DelegateSignature();// 0x1726b2d80041
	void OnSheildBreakDelegate__DelegateSignature();// 0x1725b2d80041
	void OnRepCurrentSkydiveStage();// 0x1724b2d80041
	void OnRep_WeaponSystemVehicle();// 0x1723b2d80041
	void OnRep_WeaponSystemComponentChanged();// 0x1722b2d80041
	void OnRep_RoleAbilitySpecHandles();// 0x1721b2d80041
	void OnRep_RescueState();// 0x1720b2d80041
	void OnRep_PlayBodyHitSound();// 0x171fb2d80041
	void OnRep_OutVehicleShotState();// 0x171eb2d80041
	void OnRep_IsDeathVerge();// 0x171db2d80041
	void OnRep_ForceParachuteCountDown();// 0x171cb2d80041
	void OnRep_EnableCruising();// 0x171bb2d80041
	void OnRep_CurUniqueShieldId();// 0x171ab2d80041
	void OnRep_CurrShieldValue(float PreviousValue);// 0x1719b2d80041
	void OnRep_CurrShieldState(enum LastState);// 0x1717b2d80041
	void OnRep_CurrShieldId(int InLastShieldId);// 0x1716b2d80041
	void OnRep_CurChargingDeathBoxChanged(DeathTreasureBox* PreBox);// 0x1715b2d80041
	void OnRep_CruiseState();// 0x1714b2d80041
	void OnRep_CharacterCapsuleSizeOverride();// 0x1713b2d80041
	void OnRep_CapsuleID();// 0x1712b2d80041
	void OnRep_ActiveEMP();// 0x1711b2d80041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x1710b2d80041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x170fb2d80041
	void OnPlayerDataRepAsPlayer(byte TeamID);// 0x170eb2d80041
	void OnPlayerBackpackEnergyUpdate();// 0x170db2d80041
	void OnPickupSettingChanged();// 0x170cb2d80041
	void OnOwnTeammateHUDCreated(SolarPlayerState* SelfData);// 0x170bb2d80041
	void OnOutVehicleStateChanged();// 0x170ab2d80041
	void OnNotInBattle();// 0x1709b2d80041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* LocalPlayerSpectateInfo);// 0x1708b2d80041
	void OnLevelSequence_PlayAirborneJumpSound();// 0x1707b2d80041
	void OnLandedCallback(out const HitResult Hit);// 0x1706b2d80041
	void OnJogSetClient__DelegateSignature(bool bSet);// 0x1705b2d80041
	void OnInBattle();// 0x1704b2d80041
	void OnHUDTeamPosSet__DelegateSignature(byte PosInTeam);// 0x1703b2d80041
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);// 0x1702b2d80041
	void OnHUDNickNameSet__DelegateSignature(FString NickName);// 0x1701b2d80041
	void OnHUDDistanceSet__DelegateSignature(float Distance);// 0x1700b2d80041
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);// 0x16ffb2d80041
	void OnHitAtDirection__DelegateSignature(out const Vector Direction, float Duration);// 0x16feb2d80041
	void OnHealthUpdated__DelegateSignature();// 0x16fdb2d80041
	bool OnExitOpenTreasureBox();// 0x16fcb2d80041
	bool OnEnterOpenTreasureBox();// 0x16fbb2d80041
	void OnDetectRadarStation(bool bEnter, SolarRadarStation* InRadarStation);// 0x16fab2d80041
	void OnDetectElectricShop(bool bEnter, SolarElectricShop* InElectricShop);// 0x16f9b2d80041
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum WidgetState, float InCurValue, float InChangeValue, FString InSolarPlayerID);// 0x16f7b2d80041
	void OnClientMovementComponentEnabled();// 0x16f6b2d80041
	void OnCharacterSpawnDeathBox(bool bCheat);// 0x16f5b2d80041
	void OnCharacterSkinReset__DelegateSignature();// 0x16f4b2d80041
	void OnCharacterDaraSet__DelegateSignature(int DataID);// 0x16f3b2d80041
	void OnApplyDyingDamage(float DeltaTime);// 0x16f2b2d80041
	void NotifyLeaveSafeArea();// 0x16f1b2d80041
	void NotifyEnterSafeArea();// 0x16f0b2d80041
	void NetTriggerRadarStation();// 0x16efb2d80041
	bool NetGetOnVehicle(SolarVehiclePawn* InVehicle, int SeatIndex);// 0x16eeb2d80041
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x16edb2d80041
	void MultiSetGetOffVehicleLocationAndRotation(const Vector DropLocation, float TeleportRotYaw);// 0x16ecb2d80041
	void MultiOnRebirth();// 0x16ebb2d80041
	void MarkWarningOnWorld();// 0x16eab2d80041
	void MarkQuickChatOnWorld(FString IconImg);// 0x16e9b2d80041
	void MarkPointOnWorld();// 0x16e8b2d80041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x16e7b2d80041
	void KillMe();// 0x16e6b2d80041
	bool K2_IsSwimming();// 0x16e5b2d80041
	bool K2_IsInAir();// 0x16e4b2d80041
	WidgetComponent* K2_GetTeamHUDComp();// 0x16e3b2d80041
	HUD* K2_GetControlledHUD();// 0x16e2b2d80041
	bool IsWeaponsAvailable();// 0x16e1b2d80041
	bool IsWeaponCauseTeamDamage();// 0x16e0b2d80041
	bool IsViewportFocused();// 0x16dfb2d80041
	bool IsTeammateWith(const SolarCharacter* Other);// 0x16deb2d80041
	bool IsTeamHUDValid();// 0x16ddb2d80041
	bool IsSprinting();// 0x16dcb2d80041
	bool IsSpectatingOtherPlayer();// 0x16dbb2d80041
	bool IsSkyCharging();// 0x16dab2d80041
	bool IsShieldValueLow();// 0x16d9b2d80041
	bool IsShieldFullyCharged();// 0x16d8b2d80041
	bool IsScopeOpening();// 0x16d7b2d80041
	bool IsRescuing();// 0x16d6b2d80041
	bool IsReplayPlaying();// 0x16d5b2d80041
	bool IsReloading();// 0x16d4b2d80041
	bool IsRechargerEnough();// 0x16d3b2d80041
	bool IsPlayerLocallyControlled();// 0x16d2b2d80041
	bool IsPileCharging();// 0x16d1b2d80041
	bool IsOwnerOffline();// 0x16d0b2d80041
	bool IsOpeningTreasureBox();// 0x16cfb2d80041
	bool IsNoCharging();// 0x16ceb2d80041
	bool IsMovingOnGround(enum VelocityStatus);// 0x16ccb2d80041
	bool IsMeleeAttacking();// 0x16cbb2d80041
	bool IsLocalPlayerSpectatingMe();// 0x16cab2d80041
	bool IsLaunching();// 0x16c9b2d80041
	bool IsJumping();// 0x16c8b2d80041
	bool IsInVehicleStealth();// 0x16c7b2d80041
	bool IsInVehicle();// 0x16c6b2d80041
	bool IsInsideVehicle();// 0x16c5b2d80041
	bool IsInShoulderOrScopeView();// 0x16c4b2d80041
	bool IsInScopeView();// 0x16c3b2d80041
	bool IsInRescueState();// 0x16c2b2d80041
	bool IsInDeathVerge();// 0x16c1b2d80041
	bool IsHumanCharacter();// 0x16c0b2d80041
	bool IsHoldingWeapon();// 0x16bfb2d80041
	bool IsFiring();// 0x16beb2d80041
	bool IsExistWeaponSeatedVehicleSeat();// 0x16bdb2d80041
	bool IsEnergyCostAndChargeDisabled();// 0x16bcb2d80041
	bool IsE2M();// 0x16bbb2d80041
	bool IsDying();// 0x16bab2d80041
	bool IsDoingAnyAttack();// 0x16b9b2d80041
	bool IsCruising();// 0x16b8b2d80041
	bool IsClimbing();// 0x16b7b2d80041
	bool IsCharacterDebugBlockDetectionEnabled();// 0x16b6b2d80041
	bool IsCanShowTeammateHUD();// 0x16b5b2d80041
	bool IsBoxCharging();// 0x16b4b2d80041
	bool IsBolting();// 0x16b3b2d80041
	bool IsBeingSpectated();// 0x16b2b2d80041
	bool IsBeingRescue();// 0x16b1b2d80041
	bool IsAllEnergyFull();// 0x16b0b2d80041
	bool IsAiming();// 0x16afb2d80041
	bool IsAbleToContinueRecharge();// 0x16aeb2d80041
	void InitShieldPropertyByConfig();// 0x16adb2d80041
	void InitShieldOperatorTimeline();// 0x16acb2d80041
	void InitializeCharacterData(const int InCharacterID, const int InSkinID);// 0x16abb2d80041
	void InitGameStatisticEquipment();// 0x16aab2d80041
	void InitDefaultDayNight();// 0x16a9b2d80041
	void InitCharacterDefaultShield(out const SolarItemData InShiledID);// 0x16a8b2d80041
	void IncreaseRechargedTimes();// 0x16a7b2d80041
	void HideShieldRepairEffectItem();// 0x16a6b2d80041
	void HideShieldOperator();// 0x16a5b2d80041
	void HideRescueInjector();// 0x16a4b2d80041
	bool HasBlockBetweenUs(const Actor* A, const Actor* B, bool BIsVehicle);// 0x16a3b2d80041
	bool HandleDying(byte ChangeType, Controller* InstigatorController);// 0x16a2b2d80041
	int GetVerticalJetFlyTotalTimes();// 0x16a1b2d80041
	int GetVerticalJetFlyRestTimes();// 0x16a0b2d80041
	void GetVerticalJetFlyCharging(out float OutValue, out float OutPercent);// 0x169fb2d80041
	void GetVerticalJetFlyCD(out float OutValue, out float OutPercent);// 0x169eb2d80041
	SolarVehicleWeapon* GetVehicleWeapon();// 0x169db2d80041
	byte GetVehicleAbilityCounter();// 0x169cb2d80041
	void GetTeamHUDTranslucentData(out float CheckDistance, out float TranslucentValue);// 0x169bb2d80041
	UserWidget* GetTeamHUD();// 0x169ab2d80041
	SolarSpectateInfo* GetSpectateInfo();// 0x1699b2d80041
	AnimInstance* GetSpecAnimInstance(enum SpecAnimType);// 0x1697b2d80041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x1696b2d80041
	SolarPlayerState* GetSolarPlayerState();// 0x1695b2d80041
	FString GetSolarPlayerID();// 0x1694b2d80041
	SolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);// 0x1693b2d80041
	SolarCharacterMovementComponent* GetSolarCharacterMovementComponent();// 0x1692b2d80041
	SolarBotAIController* GetSolarAIController();// 0x1691b2d80041
	float GetSkydiveLandingHeight();// 0x1690b2d80041
	CharacterSkinConfig* GetSkinConfig(const int InSkinID);// 0x168fb2d80041
	int GetShieldWorthByID(const int InShieldID);// 0x168eb2d80041
	float GetShieldRechargeRemainningTime();// 0x168db2d80041
	float GetRecoveryDuartionModify();// 0x168cb2d80041
	float GetRecoveryAmountModify();// 0x168bb2d80041
	Rotator GetNormalizeCameraRotation();// 0x168ab2d80041
	byte GetMyTeamID();// 0x1689b2d80041
	float GetMaxShieldValue();// 0x1688b2d80041
	float GetMaxExtraEnergy();// 0x1687b2d80041
	float GetMaxEnergy();// 0x1686b2d80041
	SolarPlayerState* GetLastDownBy();// 0x1685b2d80041
	int GetJetPackModuleLevel(const bool bVertical);// 0x1684b2d80041
	bool GetIsActiveEMP();// 0x1683b2d80041
	Vector GetInputVector();// 0x1682b2d80041
	int GetHorizontalJetFlyTotalTimes();// 0x1681b2d80041
	int GetHorizontalJetFlyRestTimes();// 0x1680b2d80041
	void GetHorizontalJetFlyCharging(out float OutValue, out float OutPercent);// 0x167fb2d80041
	void GetHorizontalJetFlyCD(out float OutValue, out float OutPercent);// 0x167eb2d80041
	float GetFactorialAttributeModifies(int AttributeID);// 0x167db2d80041
	float GetEnergyConsumptionModify();// 0x167cb2d80041
	byte GetDriveState();// 0x167ab2d80041
	float GetDesirePeekValue();// 0x1679b2d80041
	Actor* GetDamagerCauserActor();// 0x1678b2d80041
	float GetCurrShieldValue();// 0x1677b2d80041
	float GetCurrExtraEnergy();// 0x1676b2d80041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x1675b2d80041
	enum GetCurrentWalkMode();// 0x1673b2d80041
	float GetCurrentVehicleAbilityCooldownRemaining(byte AbilityIndex);// 0x1672b2d80041
	float GetCurrentVehicleAbilityCooldownDuration(byte AbilityIndex);// 0x1671b2d80041
	byte GetCurrentRenderMode();// 0x166fb2d80041
	enum GetCurrentCustomJumpType();// 0x166db2d80041
	float GetCurrEnergy();// 0x166cb2d80041
	float GetCumulativeAttributeModifies(int AttributeID);// 0x166bb2d80041
	PlayerController* GetControllingOrReplayController();// 0x166ab2d80041
	StaticMesh* GetClipMeshOfHoldingWeapon();// 0x1669b2d80041
	SolarCharacter* GetClientViewedCharacter();// 0x1668b2d80041
	SolarCharacter* GetClientControlledCharacter();// 0x1667b2d80041
	void GetChargingStateForUI(out bool IsSky, out bool IsPile, out bool IsBox, out bool IsE2M);// 0x1666b2d80041
	Rotator GetCameraRotation();// 0x1665b2d80041
	Vector GetCameraLocation();// 0x1664b2d80041
	void GetAllSkydiveLandingEffects(out ParticleSystemComponent*[] OutEffects);// 0x1663b2d80041
	void GetAllSkydiveFlyingEffects(out ParticleSystemComponent*[] OutEffects);// 0x1662b2d80041
	void GatheringDeathBoxItem();// 0x1661b2d80041
	void GameStatisticsWeaponHit(SolarCharacterBase* DamageCauserCharacter, out const SolarWeaponDamageEvent DamageInfo, const float ActualDamage);// 0x165fb2d80041
	void GameStatisticsVehicleHit(Actor* DamageCauser, float HitDamage);// 0x165eb2d80041
	void GameStatisticsItemChange(const int ItemID, const enum PickType, const int OldNum, const int NewNum);// 0x165cb2d80041
	void GameStatisticsGetOnVehicleReason(int Type, FString Type_Parameter);// 0x165bb2d80041
	void GameStatisticsGetOffVehicleReason(const SolarWeapon* CurrentWeapon, FString Param);// 0x165ab2d80041
	void GameStatisticsEquipment();// 0x1659b2d80041
	void GameStatisticsElectricShopActivated(out const Vector InLocation);// 0x1658b2d80041
	void GameStatisticsDeathReason(const bool InIsDown, SolarPlayerState* InKiller, out const SolarPointDamageEvent InDamageEvent);// 0x1657b2d80041
	void GameStatisticsDamageReason(out const SolarPointDamageEvent InDamageEvent, const float ActualDamage);// 0x1656b2d80041
	void GameStatisticsBackpackFly(out const BackpackStatisticsInfo InBackpackStatisticsInfo);// 0x1654b2d80041
	void ForceBreakSprintState();// 0x1653b2d80041
	void FindMostValuableItemClient(const SolarItemData[] ItemData, const byte FromWhichTeammate);// 0x1652b2d80041
	void ExitDyingMovement();// 0x1651b2d80041
	void ExitDeathVerge(bool bClientSimulation);// 0x1650b2d80041
	void ExecuteGM(FString GMType, FString Param1, FString Param2);// 0x164fb2d80041
	void EnterVehicleWholeShield(MaterialInterface* ShieldMaterialSource);// 0x164eb2d80041
	void EnterVehicleStealth();// 0x164db2d80041
	void EnterDyingMovement();// 0x164cb2d80041
	void EnterDeathVerge(bool bClientSimulation);// 0x164bb2d80041
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);// 0x164ab2d80041
	void DoOperation(enum OperationType, Object* Target);// 0x1648b2d80041
	void DisCardShield();// 0x1647b2d80041
	float DealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1646b2d80041
	void CreateTreatEffect();// 0x1645b2d80041
	void CreateTreasureBoxOperator();// 0x1644b2d80041
	void CreateShieldRepairEffectItem();// 0x1643b2d80041
	void CreateShieldOperator();// 0x1642b2d80041
	WidgetComponent* CreateOwnTeammateHUDInternal(SolarPlayerState* SelfData);// 0x1641b2d80041
	WidgetComponent* CreateOwnTeammateHUD();// 0x1640b2d80041
	void CoolDownGETagCallback(const GameplayTag Tag, int NewCount, int AbilityIndex);// 0x163fb2d80041
	void ClientUpdateTracking(int Mode, int Index, const Vector Location);// 0x163eb2d80041
	void ClientStartRecharge(const float InCurrentValue, const float InRecoveryDuration, const float InRecoveryAmount);// 0x163db2d80041
	void ClientSomeOneIsOpening();// 0x163cb2d80041
	void ClientSetServerBlockDetectionResult(FString Info);// 0x163bb2d80041
	void ClientRPCDisplayAllElectricShops(const Vector[] AllPositions);// 0x163ab2d80041
	void ClientRestoreActiveAbilitiesOnReconnected(const RestoreAbilityInfo[] SpecHandles);// 0x1638b2d80041
	void ClientResetCharacter(const Vector Location, const Rotator Rotation, const bool bClearWeapon);// 0x1637b2d80041
	void ClientReceiveScanResult(const ScannedInfo_NetQuantize[] ScannedDatas, const float SpanTimer);// 0x1635b2d80041
	void ClientReceivePlayerHitAtDirection(const Vector Direction);// 0x1634b2d80041
	void ClientRadarOnceScanned(int ScannedNum);// 0x1633b2d80041
	void ClientPlayHitEffect(const HitResult HitResult, class SolarBullet BulletClass, const enum HitType, const PlayerController* Attacker, const Vector RelativeVector, const float VFXScale, const int AttackerSkin);// 0x1631b2d80041
	void ClientOnReconnecting(const ReconnectionParams Params);// 0x162fb2d80041
	void ClientOnContinuousTreatmentStarted();// 0x162eb2d80041
	void ClientNotifyMarkedByOnceScan();// 0x162db2d80041
	void ClientNotifyGameProgressCondition(out const GameplayTag InProgressTag);// 0x162cb2d80041
	void ClientNotifyCharacterExposed();// 0x162bb2d80041
	void ClientNoticePickup(const int ItemID, const int ItemQuality);// 0x162ab2d80041
	void ClientHideShieldOperator();// 0x1629b2d80041
	void ClientCompleteRecharge(const float InCurrentValue, const float InChangeValue);// 0x1628b2d80041
	void ClientCancelRecharge(const bool BreakAnimOnly, const float InCurrentValue, const float InChangeValue);// 0x1627b2d80041
	void ClientAddHitTrace(const HitTraceInfo Info);// 0x1626b2d80041
	void CliendKilledCharacter();// 0x1625b2d80041
	void ClearGameStatisticEquipment();// 0x1624b2d80041
	void ClearDeathBoxData();// 0x1623b2d80041
	float CheckSelfAltitudeInstantlyByTrace(out HitResult HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);// 0x1622b2d80041
	void ChangeSeatByIndex(int TargetSeatIndex);// 0x1621b2d80041
	void ChangeSeatByDefault();// 0x1620b2d80041
	void CGM_SpawnDeathBox();// 0x161fb2d80041
	void CGM_EnterDeath();// 0x161eb2d80041
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);// 0x161db2d80041
	bool CanRebirth();// 0x161cb2d80041
	bool CanPeek();// 0x161bb2d80041
	void CancelVehicleAbility();// 0x161ab2d80041
	void BroadCastCharacterReset(const Vector Location, const Rotator Rotation);// 0x1619b2d80041
	void BreakRechargeShield();// 0x1618b2d80041
	void BindUpdateHUDToOnHealthUpdateDelegateProc();// 0x1617b2d80041
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* LocalSpecInfo);// 0x1616b2d80041
	void BindActorToSelfTeam(Actor* Actor);// 0x1615b2d80041
	void BeginplayPending__DelegateSignature();// 0x1614b2d80041
	void BeginPlayBlueprint();// 0x1613b2d80041
	void AutoMarkItemForTeammateClient(const int64 ItemThisID);// 0x1612b2d80041
	void ApplyVehicleAbility(byte AbilityIndex);// 0x1611b2d80041
	void AfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1610b2d80041
	void AfterDealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1609b2d80041
	void AddTrackingTarget(SolarCharacterBase* Tracked);// 0x1608b2d80041
	void AddTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag, float Value);// 0x1607b2d80041
	void AddDebugString(FString DebugString);// 0x1606b2d80041

--------------------------------
Class: SolarCharacterBase.Character.Pawn.Actor.Object
	SolarAbilityComponent* SolarAbilityComponent;//[Offset: 0x4f8, Size: 0x8]
	bool PendingEnterWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	SolarCharacterBase* InstigatorCharacter;//[Offset: 0x508, Size: 0x8]
	ParticleSystem* DedicatedDeathEffect;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* DeathEffect;//[Offset: 0x518, Size: 0x8]
	ParticleSystem* DeathEffectSoft;//[Offset: 0x520, Size: 0x28]
	float VehicleCollisionProtectionTimeOnJumpingOff;//[Offset: 0x57c, Size: 0x4]
	SolarAbilitySystemComponent* SolarAbilitySystemComponent;//[Offset: 0x580, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x588, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x5b0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5b8, Size: 0x8]
	CharacterSoundConfig* CharacterSoundConfig;//[Offset: 0x5c0, Size: 0x8]
	float DefaultRefreshBonesCountDown;//[Offset: 0x5c8, Size: 0x4]
	void SetAttributeWithGAS(const GameplayAttribute InAttribute, byte ModifyType, float InValue);// 0x1604b2d80041
	void ResetAudioComponentTransform();// 0x1603b2d80041
	void MulticastAddHitTrace(const HitTraceInfo Info);// 0x1600b2d80041
	void LazyRefreshBones(float DelayTime);// 0x15ffb2d80041
	bool K2_IsInWater();// 0x15feb2d80041
	bool K2_IsAlive();// 0x15fdb2d80041
	bool IsInWater();// 0x15fcb2d80041
	bool IsInSight(out const Vector InTargetPos, const float InMaxAngle, const bool bHorizontalOnly);// 0x15fbb2d80041
	bool IsInRoom();// 0x15fab2d80041
	bool IsBlocked(const Actor* InOtherActor);// 0x15f9b2d80041
	bool InSameTeamWithFirstPlayerController();// 0x15f8b2d80041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x15f7b2d80041
	FString GetSoundEventString(enum SoundOpt);// 0x15f5b2d80041
	SolarAkGameObject* GetSolarAkGameObject();// 0x15f4b2d80041
	float GetMaxHealth();// 0x15f3b2d80041
	float GetCurrentHealth();// 0x15f2b2d80041
	enum GetCharacterType();// 0x15f0b2d80041
	Vector GetCharacterDirection();// 0x15efb2d80041
	SolarBackpackComponent* GetBackpack();// 0x15eeb2d80041
	void ClientOnPushedByVehicle();// 0x15edb2d80041
	bool CheckOpenParticleOptimization(int Bias);// 0x15ecb2d80041
	void ChangeCurrentHealthWithGAS(byte ModifyType, float InValue);// 0x15ebb2d80041

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: HitTraceInfo
	Vector_NetQuantizeNormal TraceDirection;//[Offset: 0x0, Size: 0xc]
	float Damage;//[Offset: 0xc, Size: 0x4]
	enum WeaponType;//[Offset: 0x10, Size: 0x1]
	bool bIsVehicleHitTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ReconnectionParams
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SolarAbilityComponent.ActorComponent.Object
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectMap;//[Offset: 0xc0, Size: 0x50]
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectsThisTick;//[Offset: 0x110, Size: 0x50]
	ReplicateEffectData[] ReplicateEffectDatas;//[Offset: 0x160, Size: 0x10]
	<class SolarAbilityEffectAccessory,SolarAbilityEffectAccessory*> EffectAccessoryMap;//[Offset: 0x170, Size: 0x50]
	bool CharacterWeaponDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool CharacterMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	float MoveSpeedCoeffient;//[Offset: 0x1cc, Size: 0x4]
	MaterialInterface* OriginalMaterial;//[Offset: 0x1d0, Size: 0x8]
	float ShieldRechargeCostCoefficient;//[Offset: 0x1d8, Size: 0x4]
	void OnRep_SpeedCoeffient();// 0x37bfb2d80041
	void OnRep_ReplicateEffectData();// 0x37beb2d80041
	int GetCharacterLevel();// 0x37bdb2d80041

--------------------------------
Class: SolarAbilityEffect.Object
	SoftObjectPath EffectIconPath;//[Offset: 0x28, Size: 0x18]
	SolarAttributeModifier[] AttributeModifiers;//[Offset: 0x40, Size: 0x10]
	class SolarAbilityEffectAccessory[] AbilityEffectAccessoryClass;//[Offset: 0x50, Size: 0x10]
	bool bAllowMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	SolarCharacterBase* AbilityEffectAffectingCharacter;//[Offset: 0x120, Size: 0x8]
	SolarAbilityComponent* AbilityEffectAffectingAbilityComponent;//[Offset: 0x128, Size: 0x8]
	SolarAbility* AffectingAbility;//[Offset: 0x130, Size: 0x8]
	FString ExtraInfo;//[Offset: 0x138, Size: 0x10]
	<FString,float> AttributeParamMap;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: SolarAttributeModifier
	byte SolarAttributeType;//[Offset: 0x0, Size: 0x1]
	enum AttributeDurationType;//[Offset: 0x1, Size: 0x1]
	enum AttributeDurationSourceType;//[Offset: 0x2, Size: 0x1]
	float AttributeModifyDuration;//[Offset: 0x4, Size: 0x4]
	FString AttributeModifyDurationSourceKey;//[Offset: 0x8, Size: 0x10]
	float AttributeModifyMinDistance;//[Offset: 0x18, Size: 0x4]
	float AttributeModifyMaxDistance;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* AttributeDistanceScaleCurve;//[Offset: 0x20, Size: 0x8]
	bool AttributeUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float AttributeTargetValue;//[Offset: 0x2c, Size: 0x4]
	enum AttributeChangeValueSourceType;//[Offset: 0x30, Size: 0x1]
	float AttributeChangeValue;//[Offset: 0x34, Size: 0x4]
	float AttributeChangeValueForVehicle;//[Offset: 0x38, Size: 0x4]
	FString AttributeChangeValueSourceKey;//[Offset: 0x40, Size: 0x10]
	bool AttributeChangeValueIsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum AttributeChangeSpeedSourceType;//[Offset: 0x58, Size: 0x1]
	FString AttributeChangeSpeedSourceKey;//[Offset: 0x60, Size: 0x10]
	float AttributeChangeSpeed;//[Offset: 0x70, Size: 0x4]
	bool AttributeApplyChargingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int[] AttributeExtraIntParam;//[Offset: 0x78, Size: 0x10]
	float[] AttributeExtraFloatParam;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: SolarAbilityEffectAccessory.Actor.Object
	SolarCharacterBase* EffectAffectingCharacter;//[Offset: 0x230, Size: 0x8]
	byte EffectAccessoryInstanceType;//[Offset: 0x238, Size: 0x1]
	bool SpawnAtHitLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]

--------------------------------
Class: SolarAbility.Actor.Object
	class SolarAbility* MyAbilityClass;//[Offset: 0x230, Size: 0x8]
	class SolarAbilityEffect[] AbilityEffectClasses;//[Offset: 0x238, Size: 0x10]
	SolarCharacter* AbilitySourceCharacter;//[Offset: 0x248, Size: 0x8]
	Transform SpawnTransform;//[Offset: 0x250, Size: 0x30]
	bool InstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool DoNotAutoApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	bool ApplyToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	bool RadialAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	float RadialAbilityRadius;//[Offset: 0x284, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool CheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	bool EnableAbilityDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	FString ExtraInfo;//[Offset: 0x290, Size: 0x10]
	Actor* InitiatorActor;//[Offset: 0x2a0, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 0x8]
	<FString,float> EffectParams;//[Offset: 0x2b8, Size: 0x50]
	void WeaponApplyAbility(const Object* WorldContextObject, class SolarAbility SolarAbilityClass, Actor* SourceActor, Actor* TargetActor, out const Vector HitLocation, out const FName HitBoneName, float Scale, out const Rotator ProjRotator, FString InExtarInfo, PrimitiveComponent* HitComponent);// 0x37bcb2d80041
	void StopSound();// 0x37bbb2d80041
	void StaticRemoveSolarAbilityFrom(class SolarAbility AbilityClass, Actor* AffectingActor);// 0x37bab2d80041
	void StaticApplySolarAbilityToWithHitResult(class SolarAbility AbilityClass, Actor* AffectingActor, out const HitResult HitResult, const float Scale, FString InExtarInfo, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation);// 0x37b9b2d80041
	void StaticApplySolarAbilityTo(class SolarAbility AbilityClass, Actor* AffectingActor, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation, out const Vector HitLocation, out const FName HitBoneName, float Scale, FString InExtraInfo, PrimitiveComponent* HitComponent);// 0x37b8b2d80041
	void RestoreSound();// 0x37b7b2d80041
	void RemoveSolarAbilityFrom(Actor* ApplyToActor);// 0x37b6b2d80041
	void PlaySound();// 0x37b5b2d80041
	void PauseSound();// 0x37b4b2d80041
	bool IsLocalControl();// 0x37b3b2d80041
	bool InSameTeam();// 0x37b2b2d80041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x37b1b2d80041
	bool CheckActor(Actor* SourceActor, Actor* TargetActor);// 0x37b0b2d80041
	void ApplySolarAbilityTo(Actor* ApplyToActor, Actor* SourceActor);// 0x37afb2d80041

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x2b8, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b9, Size: 0x1]
	float OuterRadius;//[Offset: 0x2bc, Size: 0x4]
	float InnerRadius;//[Offset: 0x2c0, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2c8, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2d0, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x2e0, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2e4, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2e8, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x2ec, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x2f0, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x2f4, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x2f8, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2fc, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2fc, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x300, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x304, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x2ddeb2d80041
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x2dddb2d80041
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x2ddcb2d80041
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x2ddbb2d80041
	void SetOutputBusVolume(float BusVolume);// 0x2ddab2d80041
	void SetListeners(out const AkComponent*[] Listeners);// 0x2dd9b2d80041
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x2dd8b2d80041
	void SetEarlyReflectionsVolume(float SendVolume);// 0x2dd7b2d80041
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x2dd6b2d80041
	void SetAttenuationScalingFactor(float Value);// 0x2dd5b2d80041
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x2dd4b2d80041
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x2dd3b2d80041
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x2dd2b2d80041
	int PostAkEventByName(FString in_EventName);// 0x2dd1b2d80041
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x2dd0b2d80041
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x2dcfb2d80041
	float GetAttenuationRadius();// 0x2dceb2d80041

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x298, Size: 0x8]
	FString EventName;//[Offset: 0x2a0, Size: 0x10]
	void Stop();// 0x2dcdb2d80041
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x2dccb2d80041
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x2dcbb2d80041
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x2dcab2d80041
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x2dc9b2d80041
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x2dc8b2d80041
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x2dc7b2d80041

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x2dc6b2d80041
	float GetMaximumDuration();// 0x2dc5b2d80041
	float GetMaxAttenuationRadius();// 0x2dc4b2d80041
	bool GetIsInfinite();// 0x2dc3b2d80041

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: SolarAkGameObject.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void Wakeup();// 0x3850b2d80041
	void UnloadBank(FString InBankName);// 0x384fb2d80041
	void UnLoadAllBanks();// 0x384eb2d80041
	void Suspend(bool in_bRenderAnyway);// 0x384db2d80041
	int StopSoundByEvent(FString in_EventName);// 0x384cb2d80041
	int StaticStopSoundByEvent(FString in_EventName);// 0x384bb2d80041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString in_EventName, LatentActionInfo LatentInfo);// 0x384ab2d80041
	int StaticPostAkEventByName(FString in_EventName);// 0x3849b2d80041
	int StaticPlaySoundByEvent(FString in_EventName);// 0x3848b2d80041
	int StaticComponentPostAkEventByName(AkComponent* AkComponent, FString in_EventName);// 0x3847b2d80041
	void SolarLoadAllBanks();// 0x3846b2d80041
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x3845b2d80041
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x3844b2d80041
	void SetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x3843b2d80041
	void ReceiveTick(float DeltaTime);// 0x3842b2d80041
	void ReceiveEndPlay(const byte EndPlayReason);// 0x3841b2d80041
	void ReceiveBeginPlay();// 0x3840b2d80041
	int PostAkEventByNameAndWaitForEnd(FString in_EventName, LatentActionInfo LatentInfo);// 0x383fb2d80041
	int PostAkEventByName(FString in_EventName);// 0x383eb2d80041
	int PlaySoundByEvent(FString in_EventName);// 0x383db2d80041
	void LoadBank(FString InBankName);// 0x383cb2d80041
	void LoadAllBanks();// 0x383bb2d80041

--------------------------------
Class: ReplicateEffectData
	SoftObjectPath IconPath;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: SolarAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1308, Size: 0x20]
	GameplayTag[] RepNotifiedTags;//[Offset: 0x1328, Size: 0x10]
	GameplayTag[] NotifiedPreviousTags;//[Offset: 0x1338, Size: 0x10]
	SolarGameplayAbilitySet* DefaultAbilitySet;//[Offset: 0x1350, Size: 0x8]
	SkeletalMeshComponent* OptionMeshForRepMontage;//[Offset: 0x1358, Size: 0x8]
	bool bPendingMontageRepForMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 0x1]
	GameplayAbilityLocalAnimMontageForMesh[] LocalAnimMontageInfoForMeshes;//[Offset: 0x1368, Size: 0x10]
	GameplayAbilityRepAnimMontageForMesh[] RepAnimMontageInfoForMeshes;//[Offset: 0x1378, Size: 0x10]
	void ServerCurrentMontageSetPlayRateForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float InPlayRate);// 0x37d9b2d80041
	void ServerCurrentMontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x37d8b2d80041
	void ServerCurrentMontageJumpToSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, FName SectionName);// 0x37d7b2d80041
	void RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x37d6b2d80041
	void PostDefaultAbilitiesGranted();// 0x37d5b2d80041
	void OnRep_RepNotifiedTags();// 0x37d4b2d80041
	void OnRep_ReplicatedAnimMontageForMesh();// 0x37d3b2d80041
	void OnInternalMetaAttributeUpdate(SolarMetaAttributeSet* MetaAttributeSet, out GameplayModifierEvaluatedData EvaluatedData, out const GameplayEffectSpec EffectSpec, out MetaAttributeUpdateEvent UpdateEvent);// 0x37d2b2d80041
	void NotifySourceMetaAttributeExecution(out const MetaAttributeUpdateEvent UpdateEvent);// 0x37d1b2d80041
	GameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(class GameplayAbility AbilityClass, int Level);// 0x37d0b2d80041
	GameplayAbilitySpecHandle K2_GiveAbility(class GameplayAbility AbilityClass, int Level);// 0x37cfb2d80041
	AttributeSet* K2_FindOwnedAttributeSetByClass(class AttributeSet Class);// 0x37ceb2d80041
	void K2_ClearAbility(out const GameplayAbilitySpecHandle Handle);// 0x37cdb2d80041
	GameplayAbilitySpecHandle GiveDefaultAbility(class GameplayAbility AbilityClass);// 0x37ccb2d80041
	void ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x37cbb2d80041
	void ClientReceiveTagChangeNotify(out const FName TagName, bool bAdded);// 0x37cab2d80041
	void AddGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x37c9b2d80041

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x138, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x148, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x158, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x300, Size: 0x4]
	float IncomingDuration;//[Offset: 0x304, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x328, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x338, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3b0, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3e8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3f0, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x408, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x558, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x738, Size: 0x38]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x778, Size: 0x30]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x848, Size: 0x480]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc8, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xdf0, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1040, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1178, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e8, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x1095b2d80041
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x1094b2d80041
	void TargetConfirm();// 0x1093b2d80041
	void TargetCancel();// 0x1092b2d80041
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x1091b2d80041
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x1090b2d80041
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x108fb2d80041
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x108eb2d80041
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x108db2d80041
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x108cb2d80041
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x108bb2d80041
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x1089b2d80041
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x1088b2d80041
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x1087b2d80041
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x1086b2d80041
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x1085b2d80041
	void ServerPrintDebug_Request();// 0x1084b2d80041
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x1083b2d80041
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x1082b2d80041
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x1081b2d80041
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x1080b2d80041
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x107fb2d80041
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x107db2d80041
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x107cb2d80041
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x107bb2d80041
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x107ab2d80041
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x1079b2d80041
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x1078b2d80041
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x1077b2d80041
	void OnRep_ServerDebugString();// 0x1076b2d80041
	void OnRep_ReplicatedAnimMontage();// 0x1075b2d80041
	void OnRep_OwningActor();// 0x1074b2d80041
	void OnRep_ClientDebugString();// 0x1073b2d80041
	void OnRep_ActivateAbilities();// 0x1072b2d80041
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x1071b2d80041
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x1070b2d80041
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x106fb2d80041
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x106eb2d80041
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x106db2d80041
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x106cb2d80041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x106bb2d80041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x1069b2d80041
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x1066b2d80041
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x1065b2d80041
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x1064b2d80041
	GameplayEffectContextHandle MakeEffectContext();// 0x1063b2d80041
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x1062b2d80041
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x1061b2d80041
	bool GetUserAbilityActivationInhibited();// 0x1060b2d80041
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x105fb2d80041
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x105eb2d80041
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x105db2d80041
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x105ab2d80041
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x1059b2d80041
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x1057b2d80041
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x1056b2d80041
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x1055b2d80041
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x1052b2d80041
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x1051b2d80041
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x1050b2d80041
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x104fb2d80041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x104eb2d80041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x104db2d80041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x104cb2d80041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x104bb2d80041
	void AbilityConfirmOrCancel__DelegateSignature();// 0x104ab2d80041
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x1049b2d80041

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc8, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd8, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf8, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x108, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x118, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x1048b2d80041
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x1046b2d80041

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: SolarGameplayAbilitySet.DataAsset.Object
	class GameplayAbility[] Abilities;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x20]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 0x8]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 0x48]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x2d0db2d80041
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x2d0cb2d80041
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x2d0bb2d80041
	void RemoveGrantedByEffect();// 0x2d0ab2d80041
	void MontageStop(float OverrideBlendOutTime);// 0x2d09b2d80041
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x2d08b2d80041
	void MontageJumpToSection(FName SectionName);// 0x2d07b2d80041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x2d06b2d80041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x2d05b2d80041
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x2d04b2d80041
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x2d03b2d80041
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x2d02b2d80041
	void K2_OnEndAbility(bool bWasCancelled);// 0x2d01b2d80041
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x2d00b2d80041
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x2cffb2d80041
	void K2_EndAbility();// 0x2cfeb2d80041
	void K2_CommitExecute();// 0x2cfdb2d80041
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x2cfcb2d80041
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x2cfbb2d80041
	bool K2_CommitAbility();// 0x2cfab2d80041
	bool K2_CheckAbilityCost();// 0x2cf9b2d80041
	bool K2_CheckAbilityCooldown();// 0x2cf8b2d80041
	void K2_CancelAbility();// 0x2cf7b2d80041
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x2cf6b2d80041
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x2cf5b2d80041
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x2cf4b2d80041
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x2cf3b2d80041
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x2cf2b2d80041
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x2cf1b2d80041
	void K2_ActivateAbility();// 0x2cf0b2d80041
	void InvalidateClientPredictionKey();// 0x2cefb2d80041
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x2ceeb2d80041
	Actor* GetOwningActorFromActorInfo();// 0x2cedb2d80041
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x2cecb2d80041
	Object* GetCurrentSourceObject();// 0x2cebb2d80041
	AnimMontage* GetCurrentMontage();// 0x2ceab2d80041
	float GetCooldownTimeRemaining();// 0x2ce9b2d80041
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x2ce8b2d80041
	Actor* GetAvatarActorFromActorInfo();// 0x2ce7b2d80041
	GameplayAbilityActorInfo GetActorInfo();// 0x2ce6b2d80041
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x2ce5b2d80041
	int GetAbilityLevel();// 0x2ce4b2d80041
	void EndTaskByInstanceName(FName InstanceName);// 0x2ce3b2d80041
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x2ce2b2d80041
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x2ce1b2d80041
	void CancelTaskByInstanceName(FName InstanceName);// 0x2ce0b2d80041
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x2cdfb2d80041
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x2cdeb2d80041
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x2cddb2d80041
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x2cdcb2d80041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x2cdbb2d80041

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 0x2]
	int16 Base;//[Offset: 0x2, Size: 0x2]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x40]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3d0, Size: 0x40]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x410, Size: 0x40]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x450, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x4b0, Size: 0x40]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x4f0, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x648, Size: 0x150]
	enum StackingType;//[Offset: 0x799, Size: 0x1]
	int StackLimitCount;//[Offset: 0x79c, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x7a0, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x7a1, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x7a2, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x7a8, Size: 0x10]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x2d26b2d80041

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x40]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: GameplayTagRequirements
	GameplayTagContainer RequireTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer IgnoreTags;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x2d25b2d80041

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x240, Size: 0x40]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x2d24b2d80041

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x103eb2d80041
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x103db2d80041
	void EndTask();// 0x103cb2d80041

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x240, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x2d0, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x2d8, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x2e8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x2f0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x300, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x308, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x330, Size: 0x8]
	void ConfirmTargeting();// 0x2d0fb2d80041
	void CancelTargeting();// 0x2d0eb2d80041

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x230, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x240, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x248, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x2d15b2d80041
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x2d14b2d80041
	void OnValidTargetChanged(bool bNewValue);// 0x2d13b2d80041
	void OnTargetingAnActor(bool bNewValue);// 0x2d12b2d80041
	void OnParametersInitialized();// 0x2d11b2d80041
	void FaceTowardSource(bool bFaceIn2D);// 0x2d10b2d80041

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameplayAbilityLocalAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityLocalAnimMontage LocalMontageInfo;//[Offset: 0x8, Size: 0x30]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GameplayAbilityRepAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityRepAnimMontage RepMontageInfo;//[Offset: 0x8, Size: 0x38]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	byte SectionIdToPlay;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SolarMetaAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData Damage;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData ShieldDamage;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarAttributeSet.AttributeSet.Object
	void K2_SetAttributeValue(FName AttributeName, float NewVal);// 0x333cb2d80041
	void K2_OnReplicationAttribute(out const GameplayAttributeData OldValue, out const GameplayAttributeData ReplicatedAttribute, FName AttributeName);// 0x333bb2d80041
	void K2_InitAttributeValue(out GameplayAttributeData OriginAttribute, float NewVal);// 0x333ab2d80041
	float K2_GetAttributeValue(out const GameplayAttributeData OriginAttribute);// 0x3339b2d80041
	GameplayAttribute K2_GetAttribute(FName AttributeName);// 0x3338b2d80041

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MetaAttributeUpdateEvent
	int TypeID;//[Offset: 0x8, Size: 0x4]
	SolarAbilitySystemComponent* TargetASC;//[Offset: 0x10, Size: 0x8]
	SolarMetaAttributeSet* MetaAttributeSet;//[Offset: 0x18, Size: 0x8]
	GameplayAttribute MetaAttribute;//[Offset: 0x20, Size: 0x38]
	float MetaAttributeValue;//[Offset: 0x58, Size: 0x4]
	MetaAttributeProduceEffect[] Effects;//[Offset: 0x60, Size: 0x10]
	MetaAttributeUpdateEvent_Character CharacterEventData;//[Offset: 0x70, Size: 0x3]

--------------------------------
Class: MetaAttributeProduceEffect
	SolarAttributeSet* EffectAttributeSet;//[Offset: 0x0, Size: 0x8]
	GameplayAttribute EffectAttribute;//[Offset: 0x8, Size: 0x38]
	float EffectValue;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MetaAttributeUpdateEvent_Character
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xb8]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: SpawnedActorHandle
	uint32 Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SolarAnimInstance.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	<enum,AnimMontage*> CharacterMontageMap;//[Offset: 0x270, Size: 0x50]
	byte OwnerRole;//[Offset: 0x2c0, Size: 0x1]
	FName LeftHandIKSocketName;//[Offset: 0x2cc, Size: 0x8]
	FName RightHandWeaponSocketName;//[Offset: 0x2d4, Size: 0x8]
	Transform LeftHandIKSocket2BoneTrans;//[Offset: 0x2e0, Size: 0x30]
	Vector LeftHandEffectorLocation;//[Offset: 0x310, Size: 0xc]
	Rotator LeftHandEffectorRotation;//[Offset: 0x31c, Size: 0xc]
	Vector CurrentLeftHandJointLocation;//[Offset: 0x34c, Size: 0xc]
	Vector RightHandEffectorLocation;//[Offset: 0x358, Size: 0xc]
	Vector RightHandJointLocation;//[Offset: 0x364, Size: 0xc]
	float LeftIKHandWeight;//[Offset: 0x370, Size: 0x4]
	float CurrentReloadTimeRate;//[Offset: 0x374, Size: 0x4]
	float CurrentSwitchWeaponTimeRate;//[Offset: 0x378, Size: 0x4]
	float CurrentBoltTimeRate;//[Offset: 0x37c, Size: 0x4]
	bool IsJog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	float ViewPitch;//[Offset: 0x384, Size: 0x4]
	float ViewYaw;//[Offset: 0x388, Size: 0x4]
	float SimulatedProxyViewSmoothSpeed;//[Offset: 0x38c, Size: 0x4]
	float MinSwimSpeed;//[Offset: 0x398, Size: 0x4]
	float Direction;//[Offset: 0x39c, Size: 0x4]
	float Speed;//[Offset: 0x3a0, Size: 0x4]
	float InputDirection;//[Offset: 0x3a4, Size: 0x4]
	byte IdleTurnType;//[Offset: 0x3a8, Size: 0x1]
	float TurnExplicitTime;//[Offset: 0x3ac, Size: 0x4]
	int turnDirection;//[Offset: 0x3b0, Size: 0x4]
	float DamageDirection;//[Offset: 0x3b4, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x3b8, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x3bc, Size: 0x4]
	LeftHandGripConfig CurrentGripData;//[Offset: 0x4c8, Size: 0x84]
	float Fire2PlayRateStand;//[Offset: 0x5d0, Size: 0x4]
	float Fire2PlayRateCrouch;//[Offset: 0x5d4, Size: 0x4]
	bool bHoldingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	bool ShieldRechargeIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	float FallingInputScale;//[Offset: 0x614, Size: 0x4]
	Vector IKOffsetLeftFootVector;//[Offset: 0x618, Size: 0xc]
	Vector IKOffsetRightFootVector;//[Offset: 0x624, Size: 0xc]
	Vector JointTargetLeftFootVector;//[Offset: 0x630, Size: 0xc]
	Vector JointTargetRightFootVector;//[Offset: 0x63c, Size: 0xc]
	Rotator LeftFootRotation;//[Offset: 0x648, Size: 0xc]
	Rotator RightFootRotation;//[Offset: 0x654, Size: 0xc]
	Vector HipOffsetVector;//[Offset: 0x660, Size: 0xc]
	float FootIKTraceDistanceRate;//[Offset: 0x66c, Size: 0x4]
	float CrouchFootIKTraceDistanceRate;//[Offset: 0x670, Size: 0x4]
	float FootIKInterpSpeed;//[Offset: 0x674, Size: 0x4]
	FName LeftFootSocket;//[Offset: 0x678, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x680, Size: 0x8]
	bool AnimParam_LeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool bNeedJetLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1]
	float LandingBlendWeight;//[Offset: 0x68c, Size: 0x4]
	float FootIKEnableDelayTime;//[Offset: 0x6b4, Size: 0x4]
	bool bActiveFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	float FlailRate;//[Offset: 0x6cc, Size: 0x4]
	float ConfigPitchToZeroTime;//[Offset: 0x6d0, Size: 0x4]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeX;//[Offset: 0x6d4, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeY;//[Offset: 0x6dc, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeZ;//[Offset: 0x6e4, Size: 0x8]
	float JetPack2PoseRestoreSmoothSpeed;//[Offset: 0x6ec, Size: 0x4]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX;//[Offset: 0x6f0, Size: 0x8]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY;//[Offset: 0x6f8, Size: 0x8]
	bool bNewJet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70e, Size: 0x1]
	bool bIsJetFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70f, Size: 0x1]
	int DesirePeekDir;//[Offset: 0x710, Size: 0x4]
	float PeekSpeed;//[Offset: 0x714, Size: 0x4]
	float PeekDirection;//[Offset: 0x718, Size: 0x4]
	bool bEnableDamageReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 0x1]
	bool bEnableWeaponAdditiveA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 0x1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71c, Size: 0x1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71c, Size: 0x1]
	bool bEnableWeaponAdditiveB;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71c, Size: 0x1]
	bool bEnableWeaponJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71c, Size: 0x1]
	byte MaxLODDamageReact;//[Offset: 0x71d, Size: 0x1]
	byte MaxLODWeaponAdditiveA;//[Offset: 0x71e, Size: 0x1]
	byte MaxLODHandIK;//[Offset: 0x71f, Size: 0x1]
	byte MaxLODFootIK;//[Offset: 0x720, Size: 0x1]
	byte MaxLODWeaponAdditiveB;//[Offset: 0x721, Size: 0x1]
	byte MaxLODWeaponJitter;//[Offset: 0x722, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x723, Size: 0x1]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x723, Size: 0x1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x723, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x723, Size: 0x1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x723, Size: 0x1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x723, Size: 0x1]
	enum CurrentWalkMode;//[Offset: 0x724, Size: 0x1]
	enum LastWalkMode;//[Offset: 0x725, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x726, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x727, Size: 0x1]
	enum CurrentCruiseState;//[Offset: 0x728, Size: 0x1]
	AnimSequence* CruiseStartSequence;//[Offset: 0x730, Size: 0x8]
	AnimSequence* CruiseLoopSequence;//[Offset: 0x738, Size: 0x8]
	AnimSequence* CruiseEndSequence;//[Offset: 0x740, Size: 0x8]
	float MinSpeedForSkydiveFlyingInputBonus;//[Offset: 0x748, Size: 0x4]
	float MaxSpeedForSkydiveFlyingInputBonus;//[Offset: 0x74c, Size: 0x4]
	float InputYThresholdToCalcInputYByCamera;//[Offset: 0x750, Size: 0x4]
	float MinDeltaYawFromCameraToGetMaxInputY;//[Offset: 0x754, Size: 0x4]
	enum CurrentSkydiveStage;//[Offset: 0x758, Size: 0x1]
	enum WeaponStatus;//[Offset: 0x759, Size: 0x1]
	bool bIsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75a, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75a, Size: 0x1]
	bool bIsLeftHandDetaching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x75a, Size: 0x1]
	class AnimInstance* VehicleSpecClass;//[Offset: 0x760, Size: 0x8]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x768, Size: 0x1]
	enum CurrentSkillType;//[Offset: 0x769, Size: 0x1]
	void OnMontagePlayStarted(AnimMontage* Montage);// 0x3861b2d80041
	void OnMontagePlayEnded(AnimMontage* Montage, bool bInterrupted);// 0x3860b2d80041
	void OnMontagePlayBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x385fb2d80041
	bool NeedResolveWeaponJitter();// 0x385eb2d80041
	bool JetPack2IsDashingCompletelyOver();// 0x385db2d80041
	bool IsHoldingWeapon();// 0x385cb2d80041
	bool IsAiming();// 0x385bb2d80041
	Vector2D GetSkydiveFlyingInput();// 0x385ab2d80041
	int GetOwnerGroupID();// 0x3859b2d80041
	Vector GetJetPackDashAnimationBlend();// 0x3858b2d80041
	Vector GetInputVector();// 0x3857b2d80041
	Vector GetFallingInputVector();// 0x3856b2d80041
	float GenJumpDirection(float InInputDirection);// 0x3855b2d80041
	float GenBackwordDirection(float InInputDirection);// 0x3854b2d80041
	bool CheckNewJetAndReset();// 0x3853b2d80041

--------------------------------
Class: LeftHandGripConfig
	Rotator HandL;//[Offset: 0x0, Size: 0xc]
	Rotator Thumbl01;//[Offset: 0xc, Size: 0xc]
	Rotator Thumbl02;//[Offset: 0x18, Size: 0xc]
	Rotator Index01;//[Offset: 0x24, Size: 0xc]
	Rotator Index02;//[Offset: 0x30, Size: 0xc]
	Rotator Middle01;//[Offset: 0x3c, Size: 0xc]
	Rotator Middle02;//[Offset: 0x48, Size: 0xc]
	Rotator Ring01;//[Offset: 0x54, Size: 0xc]
	Rotator Ring02;//[Offset: 0x60, Size: 0xc]
	Rotator Pinky01;//[Offset: 0x6c, Size: 0xc]
	Rotator Pinky02;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: JetPackPoseSpeedRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarSpecABP_Vehicle.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	float ViewPitch;//[Offset: 0x270, Size: 0x4]
	float ViewYaw;//[Offset: 0x274, Size: 0x4]
	enum InVehicleState;//[Offset: 0x278, Size: 0x1]
	enum CurrentVehicleAnimationType;//[Offset: 0x279, Size: 0x1]
	float CurrentVehicleRotationValue;//[Offset: 0x27c, Size: 0x4]
	Vector2D CurrentInputOnVehicle;//[Offset: 0x280, Size: 0x8]
	float LeanTowardRightValue;//[Offset: 0x288, Size: 0x4]
	bool bVehicleInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	Rotator OutVehicleShotRotation;//[Offset: 0x290, Size: 0xc]
	float VehicleDirection;//[Offset: 0x29c, Size: 0x4]
	bool bIronManCanFlyFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bHasPassenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	float VehicleSpeed;//[Offset: 0x2a4, Size: 0x4]
	byte DriveIdleTurnType;//[Offset: 0x2a8, Size: 0x1]
	float SteeringRoatingratio;//[Offset: 0x2ac, Size: 0x4]
	Vector LeftHandOnRudderLocation;//[Offset: 0x2b0, Size: 0xc]
	Vector RightHandOnRudderLocation;//[Offset: 0x2bc, Size: 0xc]
	enum WeaponStatus;//[Offset: 0x2c8, Size: 0x1]

--------------------------------
Class: CharacterSoundConfig.DataAsset.Object
	<enum,FString> SoundEventTable;//[Offset: 0x30, Size: 0x50]
	Transform DefaultTransform;//[Offset: 0x80, Size: 0x30]

--------------------------------
Class: SolarChargingPile.SolarMapElementBase.Actor.Object
	StaticMeshComponent* NormalMesh;//[Offset: 0x2c0, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x2c8, Size: 0x8]
	ActorComponent*[] ExtraChargingVFXComps;//[Offset: 0x2d0, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2e0, Size: 0x4]
	enum Channel;//[Offset: 0x2fc, Size: 0x1]
	int Zone;//[Offset: 0x300, Size: 0x4]
	float MaxEnergy;//[Offset: 0x304, Size: 0x4]
	float PowerRecoveryCD;//[Offset: 0x308, Size: 0x4]
	float PowerRecoveryFrequency;//[Offset: 0x30c, Size: 0x4]
	float PowerRecoveryQuantity;//[Offset: 0x310, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	bool bCanRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 0x1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 0x1]
	bool bIsLosingEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	int OwnerTeam;//[Offset: 0x31c, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0x320, Size: 0x8]
	ChargingInfo[] ChargingInfoList;//[Offset: 0x328, Size: 0x10]
	float CurrentEnergy;//[Offset: 0x338, Size: 0x4]
	float SphereRadius;//[Offset: 0x340, Size: 0x4]
	TimerHandle RecoveryHandle;//[Offset: 0x348, Size: 0x8]
	TimerHandle ServerChargingTimerHandle;//[Offset: 0x358, Size: 0x8]
	TimerHandle ClientChargingTimerHandle;//[Offset: 0x360, Size: 0x8]
	ParticleSystemComponent*[] ChargeParticleEffects;//[Offset: 0x368, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x378, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x380, Size: 0x8]
	bool bEnableHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 0x1]
	float MaxHealth;//[Offset: 0x38c, Size: 0x4]
	float ReducedHealth;//[Offset: 0x390, Size: 0x4]
	float CurrentHealth;//[Offset: 0x394, Size: 0x4]
	float TweenTimeSpeed;//[Offset: 0x398, Size: 0x4]
	float RestTweenTime;//[Offset: 0x39c, Size: 0x4]
	float TargetOpacity;//[Offset: 0x3a0, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x3a4, Size: 0x4]
	float OpacityTweenTime;//[Offset: 0x3a8, Size: 0x4]
	MaterialInstanceDynamic* DynamicMatChargingCircle;//[Offset: 0x3b0, Size: 0x8]
	ChargingPilePreset ChargingPilePreset;//[Offset: 0x3c0, Size: 0x120]
	StaticMeshComponent* RangeRingMeshComp;//[Offset: 0x4e0, Size: 0x8]
	StaticMeshComponent* ChargeCircleMeshComp;//[Offset: 0x4e8, Size: 0x8]
	bool bCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	void ToggleExtraChargingVFX(bool Toggle);// 0x3a4cb2d80041
	void SetIsActivated(bool bActivated);// 0x3a4bb2d80041
	void ServerOnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3a4ab2d80041
	void ServerOnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3a49b2d80041
	void RemoveChargeParticle(SolarCharacter* InCharacter);// 0x3a48b2d80041
	void RemoveAllEffects();// 0x3a47b2d80041
	void ReceivePileExpired();// 0x3a46b2d80041
	void ReceiveEnergyChanged();// 0x3a45b2d80041
	void ReceiveChargingPileInitialize();// 0x3a44b2d80041
	void ReceiveCharacterShowEffect(const Actor* Other);// 0x3a43b2d80041
	void ReceiveCharacterHideEffect(const Actor* Other);// 0x3a42b2d80041
	void PlaySkillStartSound();// 0x3a41b2d80041
	void PlaySkillEndSound();// 0x3a40b2d80041
	void PlayRecoveryAnim(bool bStart);// 0x3a3fb2d80041
	void PlayChargingAnimation(bool Reverse);// 0x3a3eb2d80041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3a3db2d80041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3a3cb2d80041
	void OnRep_IsLosingEnergyChanged();// 0x3a3bb2d80041
	void OnRep_Energy();// 0x3a3ab2d80041
	void OnRep_Enable();// 0x3a39b2d80041
	void OnRep_CurrentHealth();// 0x3a38b2d80041
	void OnRep_ChargingInfoListChanged();// 0x3a37b2d80041
	void OnRep_CanRecover();// 0x3a36b2d80041
	void OnRep_Broken();// 0x3a35b2d80041
	void OnRefreshRangeRing();// 0x3a34b2d80041
	void OnRefreshChargeCircle(const bool InCharging);// 0x3a33b2d80041
	void OnCharacterBatteryIdChanged(SolarCharacter* InCharacter, float Frequency, float Quantity);// 0x3a32b2d80041
	bool IsCharacterInRange(SolarCharacter* InCharacter);// 0x3a31b2d80041
	bool IsAnyCharacterInRange();// 0x3a30b2d80041
	void CreateChargeParticle(SolarCharacter* InCharacter);// 0x3a2fb2d80041
	bool CanWork();// 0x3a2eb2d80041

--------------------------------
Class: SolarMapElementBase.Actor.Object
	FString Side;//[Offset: 0x240, Size: 0x10]
	FString Job;//[Offset: 0x250, Size: 0x10]
	FString ElementID;//[Offset: 0x260, Size: 0x10]
	enum Type;//[Offset: 0x270, Size: 0x1]
	enum State;//[Offset: 0x271, Size: 0x1]
	enum Visibility;//[Offset: 0x272, Size: 0x1]
	class SolarGameMode_HandleElementRPC* BP_HandleActorRPC;//[Offset: 0x278, Size: 0x8]
	FName ElementTypeName;//[Offset: 0x280, Size: 0x8]
	FString GroupKey;//[Offset: 0x288, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0x298, Size: 0x1]
	void SetElementVisibility(const enum NewType);// 0x3526b2d80041
	enum SetElementState(const enum NewState);// 0x3525b2d80041
	void OnRep_ElementVisibility();// 0x3524b2d80041
	void OnRep_ElementState();// 0x3523b2d80041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x3522b2d80041
	void OnElementStateChanged(const enum CurrentState);// 0x3521b2d80041

--------------------------------
Class: SolarGameMode_HandleElementRPC.ActorComponent.Object
	FName ComponentTagName;//[Offset: 0xb8, Size: 0x8]
	void OnRep_ComponentName();// 0x3b7eb2d80041

--------------------------------
Class: ChargingInfo
	SolarCharacter* Ch;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float LastChargeTime;//[Offset: 0xc, Size: 0x4]
	bool bShowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Quantity;//[Offset: 0x14, Size: 0x4]
	float Frequency;//[Offset: 0x18, Size: 0x4]
	SolarBackpackComponent* BackpackComponent;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SolarBackpackComponent.ActorComponent.Object
	float ReduceChargeFactor;//[Offset: 0xd8, Size: 0x4]
	int DeathBoxId;//[Offset: 0xdc, Size: 0x4]
	int MonsterDeathBoxId;//[Offset: 0xe0, Size: 0x4]
	float DeathBoxEnergyRate;//[Offset: 0xe4, Size: 0x4]
	float RebirthEnergyRate;//[Offset: 0xe8, Size: 0x4]
	delegate OnBackpackItemUpdate;//[Offset: 0xf8, Size: 0x10]
	delegate OnBackpackEnergyUpdate;//[Offset: 0x108, Size: 0x10]
	delegate OnBackpackEquipUpdate;//[Offset: 0x118, Size: 0x10]
	delegate OnBatteryIdUpdate;//[Offset: 0x128, Size: 0x10]
	delegate OnEnergyStateUpdate;//[Offset: 0x138, Size: 0x10]
	delegate OnChargeInfoUpdate;//[Offset: 0x148, Size: 0x10]
	delegate OnConsumableNumUpdated;//[Offset: 0x158, Size: 0x10]
	delegate OnMaxEnergyUpdate;//[Offset: 0x168, Size: 0x10]
	delegate OnCurEnergyUpdate;//[Offset: 0x178, Size: 0x10]
	<int,int> MaxPileMap;//[Offset: 0x188, Size: 0x50]
	ReplicateMaxPileData[] MaxPileArray;//[Offset: 0x1d8, Size: 0x10]
	ReplicateBagGradeData[] GradeKeyBagGradeArray;//[Offset: 0x1e8, Size: 0x10]
	BagRequirementData[] BagRequirementArr;//[Offset: 0x1f8, Size: 0x10]
	<int,SolarItemData> IdKeyItemMap;//[Offset: 0x208, Size: 0x50]
	ReplicateItemData[] IdKeyItemArray;//[Offset: 0x258, Size: 0x10]
	<enum,SolarItemData> TypeKeyItemMap;//[Offset: 0x268, Size: 0x50]
	ReplicateItemData[] TypeKeyItemArray;//[Offset: 0x2b8, Size: 0x10]
	ReplicateItemData[] WeaponDataArray;//[Offset: 0x2c8, Size: 0x10]
	<int,SolarItemData> WeaponDataMap;//[Offset: 0x2d8, Size: 0x50]
	int BeReplacedWeaponItemID;//[Offset: 0x328, Size: 0x4]
	bool bGenerateDefaultWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	int PackPrimaryWeaponId;//[Offset: 0x330, Size: 0x4]
	int PackSecondaryWeaponId;//[Offset: 0x334, Size: 0x4]
	byte EnergyState;//[Offset: 0x340, Size: 0x1]
	bool bSettingEnergyCostEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	int DayLightID;//[Offset: 0x344, Size: 0x4]
	float SolarChargeRatio;//[Offset: 0x348, Size: 0x4]
	float InitialSolarCharge;//[Offset: 0x3c0, Size: 0x4]
	float SolarChargeInterval;//[Offset: 0x3c4, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0x3c8, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x3cc, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x3d0, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x3d4, Size: 0x4]
	float MaxEnergyValue;//[Offset: 0x3d8, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x3dc, Size: 0x4]
	float MaxExtraEnergyValue;//[Offset: 0x3e0, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x3e4, Size: 0x4]
	int EnergyModuleID;//[Offset: 0x3ec, Size: 0x4]
	float AddedEnergyMax;//[Offset: 0x3f0, Size: 0x4]
	int ExtraEnergyModuleID;//[Offset: 0x3f8, Size: 0x4]
	float AddedExtraEnergyMax;//[Offset: 0x3fc, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x408, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x40c, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x410, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x414, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x418, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x41c, Size: 0x4]
	int VJetPackModuleID;//[Offset: 0x490, Size: 0x4]
	int HJetPackModuleID;//[Offset: 0x494, Size: 0x4]
	float JetPackVerticalDashSpeedScale;//[Offset: 0x4a8, Size: 0x4]
	float JetPackHorizontalDashSpeedScale;//[Offset: 0x4ac, Size: 0x4]
	<int,class GameplayAbility> ItemAbilities;//[Offset: 0x4b0, Size: 0x50]
	<int,GameplayAbilitySpecHandle> GivenAbilityHandles;//[Offset: 0x500, Size: 0x50]
	delegate OnBackpackWeaponPartUpdate;//[Offset: 0x550, Size: 0x10]
	int[] WeaponPartsArray;//[Offset: 0x5b0, Size: 0x10]
	byte[] IgnoreScopeSlots;//[Offset: 0x5c0, Size: 0x10]
	bool bWeaponPartPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	<int,DateTime> DroppedItemIDMap;//[Offset: 0x630, Size: 0x50]
	float DiscardItemDelayNoticeTime;//[Offset: 0x680, Size: 0x4]
	bool bReviveItemCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1]
	float[] GradeRankProportion;//[Offset: 0x688, Size: 0x10]
	int[] InitialGridNum;//[Offset: 0x698, Size: 0x10]
	int[] CustomMode_Hunt_InitialGridNum;//[Offset: 0x6a8, Size: 0x10]
	AttributeDefaults ItemAttributeData;//[Offset: 0x6b8, Size: 0x10]
	SolarGameplayAbilitySet* ComponentGrantedAbilities;//[Offset: 0x6c8, Size: 0x8]
	void UseItemServer(int ItemID, int Num);// 0x3955b2d80041
	void UpdateItemUI();// 0x3954b2d80041
	void UpdateCurrentExtraEnergy(float UpdateValue, enum Usage);// 0x3953b2d80041
	void UpdateCurrentEnergy(float UpdateValue, enum Usage);// 0x3952b2d80041
	void UpdateConsumeSlotUI();// 0x3951b2d80041
	bool TryTriggerAbility(const int InItemID);// 0x3950b2d80041
	void TrySendDropItemTips(const int InDroppedItemID);// 0x394fb2d80041
	float TakeDeathBoxEnergy();// 0x394eb2d80041
	int SupportWeaponSlotNum();// 0x394db2d80041
	void StartCheckTutorials();// 0x394cb2d80041
	void SmoothEnergy(const float Amount);// 0x394bb2d80041
	void SetSettlementsOnServer();// 0x394ab2d80041
	void SetRequirementBySetting();// 0x3949b2d80041
	void SetMaxPileMap(int ItemID, int MaxNum);// 0x3948b2d80041
	void SetBoxCharging(bool bSet);// 0x3947b2d80041
	void SetBackPackGM(enum gmtypy, int ID, int Num, int Slot);// 0x3946b2d80041
	bool ServerUseItem(int ItemID, int Num);// 0x3945b2d80041
	void ServerUnLockBagGrid(int Grade, int NewUnLockNum);// 0x3944b2d80041
	void ServerSwapBagGrid(int fromGrade, int fromGridIndex, int targetGrade, int TargetIndex);// 0x3943b2d80041
	void ServerSetJetPackModule(int NewJetPackModuleID, bool bForVertical);// 0x3942b2d80041
	void ServerSetEnergyState(enum State);// 0x3941b2d80041
	void ServerSetChargingPile(bool bEnter, SolarChargingPile* InChargingPile);// 0x3940b2d80041
	bool ServerSendOutItem(int ItemID, int Num);// 0x393fb2d80041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x393eb2d80041
	void ServerRPCUnLockBagGridArr(const BagRequirementData[] InArr);// 0x393db2d80041
	void ServerRPCUnLockBagGrid(int Grade, int NewUnLockNum);// 0x393cb2d80041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x393bb2d80041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x393ab2d80041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x3939b2d80041
	void ServerRPCSwapBagGridLuaCall(int fromGrade, int fromGridIndex, int targetGrade, int TargetIndex);// 0x3938b2d80041
	void ServerRPCSwapBagGrid(int fromGrade, int fromGridIndex, int targetGrade, int TargetIndex);// 0x3937b2d80041
	void ServerRPCSetSettlements();// 0x3936b2d80041
	void ServerRPCSetBagRequirementArr(const BagRequirementData[] BagRequirements);// 0x3935b2d80041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x3934b2d80041
	void ServerRPCInitSettlementNeedRankArr();// 0x3933b2d80041
	void ServerRPCInitBagGradeData();// 0x3932b2d80041
	void ServerRPCFixBagGrid(int Grade, int GridIndex);// 0x3931b2d80041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x3930b2d80041
	void ServerRPCDisCardWeaponLuaCall(int Slot);// 0x392fb2d80041
	void ServerRPCDisCardWeapon(int Slot);// 0x392eb2d80041
	void ServerRPCDisCardItemLuaCall(int ID, int Num);// 0x392db2d80041
	void ServerRPCDisCardItem(int ID, int Num);// 0x392cb2d80041
	void ServerRPCDisCardHomeItemLuaCall(int Grade, int GridIndex);// 0x392bb2d80041
	void ServerRPCDisCardHomeItem(int Grade, int GridIndex);// 0x392ab2d80041
	void ServerRPCArrangeBag();// 0x3929b2d80041
	void ServerPickUpHomeitemsGM(int ID, int Num);// 0x3928b2d80041
	bool ServerPickUpHomeItems(int ItemID, bool isAutoPick);// 0x3927b2d80041
	int ServerGetDefaultGridNum(int Grade);// 0x3926b2d80041
	void ServerFixBagGrid(int Grade, int GridIndex);// 0x3925b2d80041
	bool ServerDiscardWeapon(int Slot);// 0x3924b2d80041
	bool ServerDiscardHomeItem(int Grade, int GridIndex);// 0x3923b2d80041
	bool ServerDiscardFromBackpackByType(enum ItemType, bool InDropItem);// 0x3922b2d80041
	bool ServerDiscardFromBackpack(int ItemID, int Num, bool InDropItem);// 0x3921b2d80041
	void ServerConsumeExtraEnergy(float Amount, enum Usage);// 0x3920b2d80041
	void ServerConsumeEnergy(float Amount, enum Usage);// 0x391fb2d80041
	void ServerClearJetModule();// 0x391eb2d80041
	void ServerClearEnergyState(enum State);// 0x391db2d80041
	void ServerClearAllItems();// 0x391cb2d80041
	void ServerBackpackGM(enum gmtypy, int ID, int Num, int Slot);// 0x391bb2d80041
	void ServerArrangeBag();// 0x391ab2d80041
	bool ServerAddWeaponToWeaponSysByDataCache(const byte SlotType, out const SolarItemData WeaponData, const bool bDestroyPrev, const bool IsAutoPickup);// 0x3919b2d80041
	bool ServerAddWeaponToWeaponSysByData(out const SolarItemData WeaponData, const bool IsAutoPickup);// 0x3918b2d80041
	int ServerAddToItemMapByIdAndNumForced(const int ItemID, const int Num);// 0x3917b2d80041
	int ServerAddToItemMap(SolarItemData ItemData);// 0x3916b2d80041
	void ServerAddToEquipMap(out const SolarItemData ItemData, bool Bydefault, bool InDropItem);// 0x3915b2d80041
	int ServerAddToBackpackByIdAndNum(int ItemID, int Num, bool Bydefault, const float CurValue, bool IsGM);// 0x3914b2d80041
	int ServerAddToBackpack(out const SolarItemData ItemData, bool Bydefault);// 0x3913b2d80041
	bool ServerAddHomeItemToBagGrid(int ItemID, int Grade, int GridIndex);// 0x3912b2d80041
	void ReqUseEnergy(float Amount, enum Usage);// 0x3911b2d80041
	void RequestWeaponReplaceNotice(int OldWeaponItemId, int CurWeaponItemId, int OldWeaponLevel, int CurWeaponLevel);// 0x3910b2d80041
	void RequestWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x390fb2d80041
	void RequestUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x390eb2d80041
	void RequestEquipReplaceNotice(int OldEquipItemId, int CurEquipItemId, int EquipType);// 0x390db2d80041
	void ReqesutPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x390cb2d80041
	void RefreshWeaponPartsInBackPackUI();// 0x390bb2d80041
	void RefreshWeaponInBackPackUIInternal();// 0x390ab2d80041
	void RefreshWeaponInBackPackUI();// 0x3909b2d80041
	void RefreshWeaponDataMapAndArray();// 0x3908b2d80041
	void RefreshTypeItemMapAndArray();// 0x3907b2d80041
	void RefreshMaxPileMapAndArray();// 0x3906b2d80041
	void RefreshItemInBackPackUI();// 0x3905b2d80041
	void RefreshIdItemMapAndArray();// 0x3904b2d80041
	void RefreshHomeItemBackPackUI();// 0x3903b2d80041
	void RefreshEquipInBackPackUI();// 0x3902b2d80041
	void RefreshBackPackUIState();// 0x3901b2d80041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x3900b2d80041
	int PredictEnergy(const float Amount);// 0x38ffb2d80041
	void OnUnLockGrid(int Grade);// 0x38feb2d80041
	void OnRepItemWeaponParts();// 0x38fdb2d80041
	void OnRepIgnoreScopeSlots();// 0x38fcb2d80041
	void OnRep_WeaponDataMap();// 0x38fbb2d80041
	void OnRep_VJetPackModuleID();// 0x38fab2d80041
	void OnRep_TypeKeyItemArrayChange();// 0x38f9b2d80041
	void OnRep_SettingEnergyCostChanged();// 0x38f8b2d80041
	void OnRep_ReviveItemCleared();// 0x38f7b2d80041
	void OnRep_MaxPileArrayChange();// 0x38f6b2d80041
	void OnRep_MaxExtraEnergyChanged();// 0x38f5b2d80041
	void OnRep_IdKeyItemArrayChange();// 0x38f4b2d80041
	void OnRep_HJetPackModuleID();// 0x38f3b2d80041
	void OnRep_GradeKeyBagGradeArrayChange();// 0x38f2b2d80041
	void OnRep_ExtraEnergyModuleIDChanged();// 0x38f1b2d80041
	void OnRep_EnergyStateChanged();// 0x38f0b2d80041
	void OnRep_CurrentEnergyChanged(float LastEnergyValue);// 0x38efb2d80041
	void OnRep_BagRequirementArrChange();// 0x38eeb2d80041
	void OnReceiveItemAbilityCoolDown(out const GameplayTag Tags, const bool bAdd);// 0x38edb2d80041
	void OnGameModeGlobalSettingChanged(GameModeGlobalSetting* InNewSettings);// 0x38ecb2d80041
	void OnDayNightChange(const int ID);// 0x38ebb2d80041
	bool NetUseEnergy(float InCostEnergy, enum Usage);// 0x38eab2d80041
	void NetTakeWeaponPartToBagLuaCall(const int Slot, const int WeaponPartType);// 0x38e9b2d80041
	void NetTakeBagPartToWeaponLuaCall(const int Slot, const int WeaponPartType);// 0x38e8b2d80041
	void NetSwitchWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x38e7b2d80041
	void NetDiscardWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x38e6b2d80041
	bool ModuleOverflow2(int ModuleMax);// 0x38e5b2d80041
	bool ModuleOverflow(int ModuleMax);// 0x38e4b2d80041
	ReplicateBagGridData[] MergeAllGrade();// 0x38e3b2d80041
	void LogBackPackItem();// 0x38e2b2d80041
	bool IsReviveItemRecommend();// 0x38e1b2d80041
	bool IsReviveItemPickable();// 0x38e0b2d80041
	bool IsReviveItem(const int InItemID);// 0x38dfb2d80041
	bool IsExtraEnergyID(int ID);// 0x38deb2d80041
	bool IsEquippedWeapon(const int InThisID);// 0x38ddb2d80041
	bool IsEquippedOrHasBetterPart(const int PartType, const int Level);// 0x38dcb2d80041
	bool IsEnergyID(int ID);// 0x38dbb2d80041
	bool IsBetterWeaponForBag(out const SolarItemData InItemData, int InWeaponLevel);// 0x38dab2d80041
	bool IsBetterScopeForBag(const int PartType, const int Level);// 0x38d9b2d80041
	bool IsBetterPartForBag(const int PartType, const int Level);// 0x38d8b2d80041
	void InitSettlementNeedRankArrOnServer();// 0x38d7b2d80041
	void InitializeOwnerAbility(int InCharacterID);// 0x38d6b2d80041
	void InitEquipItemUI();// 0x38d5b2d80041
	void InitDefaultItem(int ItemID, int Num);// 0x38d4b2d80041
	void InitDefaultDayNight(const int GameModeId);// 0x38d3b2d80041
	void InitDeathBoxEnergyRate();// 0x38d2b2d80041
	void InitBagGradeDataOnServer();// 0x38d1b2d80041
	bool HasPickEnoughItem(int ItemID, out int requirementIndex);// 0x38d0b2d80041
	bool HasMaxExtraEnergy();// 0x38cfb2d80041
	bool HasEmptyWeaponSlot();// 0x38ceb2d80041
	bool GetWeaponSlotEmpty(int Slot);// 0x38cdb2d80041
	bool GetWeaponPartInBagClient(int TargetPartType, out int OutPartLevel, out int OutItemID);// 0x38ccb2d80041
	SolarItemData GetWeaponItemDataBySlot(int Slot);// 0x38cbb2d80041
	<int,SolarItemData> GetWeaponDataMap();// 0x38cab2d80041
	bool GetWeaponDataBySolt(int Slot, out SolarItemData ItemData);// 0x38c9b2d80041
	<enum,SolarItemData> GetTypeKeyItemMap();// 0x38c8b2d80041
	float GetTotalEnergy();// 0x38c7b2d80041
	float GetQuantityFrom(enum Usage);// 0x38c6b2d80041
	int GetPlayerRank();// 0x38c5b2d80041
	SolarItemData GetNewItemData(int ItemID, int Num);// 0x38c4b2d80041
	int GetNeedRankNumOnServer(int Grade);// 0x38c3b2d80041
	int GetMonsterDeathBoxID();// 0x38c2b2d80041
	float GetMaxExtraEnergy();// 0x38c1b2d80041
	float GetMaxEnergy();// 0x38c0b2d80041
	bool GetLastNormalGrid(out int outGrade, out int outGridIndex);// 0x38bfb2d80041
	int GetItemNumById(int ItemID);// 0x38beb2d80041
	int GetItemMaxPile(int ItemID);// 0x38bdb2d80041
	bool GetItemDataByType(enum ItemType, out SolarItemData ItemData);// 0x38bcb2d80041
	bool GetItemDataById(int ItemID, out SolarItemData ItemData);// 0x38bbb2d80041
	<int,SolarItemData> GetIdKeyItemMap();// 0x38bab2d80041
	int GetHasUnLockGridNum(int Grade);// 0x38b9b2d80041
	float GetFrequencyFrom(enum Usage);// 0x38b8b2d80041
	int GetExtraEnergyModuleID();// 0x38b7b2d80041
	SolarItemData GetEquipItemDataByType(enum ItemType);// 0x38b6b2d80041
	int GetEquipIdByType(enum ItemType);// 0x38b5b2d80041
	int GetDefaultAddGrade();// 0x38b4b2d80041
	int GetDeathBoxId();// 0x38b3b2d80041
	int GetDafalutAddGrid(int Grade);// 0x38b2b2d80041
	float GetCurrExtraEnergyValue();// 0x38b1b2d80041
	float GetCurrExtraEnergy();// 0x38b0b2d80041
	SolarItemData GetCurrentWeaponItemData();// 0x38afb2d80041
	bool GetCurrentWeaponIsOverloading();// 0x38aeb2d80041
	void GetCurrentEquipItems(out int[] OutArray);// 0x38adb2d80041
	float GetCurrEnergyValue();// 0x38acb2d80041
	float GetCurrEnergy();// 0x38abb2d80041
	SolarCharacter* GetCharacterOwner();// 0x38aab2d80041
	void GetBagGridDatasByGrade(int Grade, out ReplicateBagGridData[] OutBagGridDataArray);// 0x38a9b2d80041
	bool GetAnyScopeInBagClient(out int OutPartType, out int OutPartLevel, out int OutItemID);// 0x38a8b2d80041
	float GetAbilityRemainingCD(const int InItemID);// 0x38a7b2d80041
	float GetAbilityDuration(const int InItemID);// 0x38a6b2d80041
	void GameStatistics_ItemUseCount(out const SolarItemData InItemData);// 0x38a5b2d80041
	void FixBagGrid(int Grade, int GridIndex);// 0x38a4b2d80041
	void ExecuteGM(FString InStrGM);// 0x38a3b2d80041
	void EquipModuleByID(int ModuleID);// 0x38a2b2d80041
	int EquipModule(const int ID, const float ModuleMax);// 0x38a1b2d80041
	void EquipBatteryByID(int BatteryID);// 0x38a0b2d80041
	int EquipBattery(const int ID, const float BatteryMax, const float Charge, const float cd);// 0x389fb2d80041
	void DiscardItemAndResetCharacterData(out const SolarItemData DiscardItem, const bool DiscardDataOnly);// 0x389eb2d80041
	void DiscardItem(SolarItemData DiscardItem);// 0x389db2d80041
	void DelayCheckClearAbility(const int InItemID);// 0x389cb2d80041
	void CompleteWholeRowOnServer(int Grade);// 0x389bb2d80041
	void CommitEnergy(const int ID);// 0x389ab2d80041
	void ClientWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x3899b2d80041
	void ClientEquipReplaceNotice(int OldEquipItemId, int CurEquipItemId, int EquipType);// 0x3898b2d80041
	bool ClearBackpackItemByID(const int InItemID);// 0x3897b2d80041
	void CheckToGiveAbility(const int InItemID);// 0x3896b2d80041
	void CheckToClearAbility(const int InItemID);// 0x3895b2d80041
	bool CheckIsRecWeaponParts(const int ItemID);// 0x3894b2d80041
	bool CheckIsEquippedDifferentScope(const int PartId);// 0x3893b2d80041
	bool CheckCanAutoPickupWeaponPart(const int ItemID);// 0x3892b2d80041
	float ChargeMain(const float Amount, enum Usage);// 0x3891b2d80041
	float ChargeExtra(const float Amount, enum Usage);// 0x3890b2d80041
	void CancelEnergy(const int ID);// 0x388fb2d80041
	bool CanAutoPickupHomeItem(const int InItemID);// 0x388eb2d80041
	bool BatteryOverflow(int BatteryMax);// 0x388db2d80041
	void ArrangeBag();// 0x388cb2d80041
	void AddCurrExtraEnergyValue(float DeltaEnergy);// 0x388bb2d80041
	enum AddBackpackItemByID(const int InItemID, const int InItemNum, const bool InDropItem);// 0x388ab2d80041

--------------------------------
Class: ReplicateMaxPileData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxPile;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicateBagGradeData
	int BagGrade;//[Offset: 0x0, Size: 0x4]
	ReplicateBagGridData[] BagGridDataArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ReplicateBagGridData
	SolarItemData ItemData;//[Offset: 0x0, Size: 0xa8]
	enum GridType;//[Offset: 0xa8, Size: 0x1]
	int BagGrade;//[Offset: 0xac, Size: 0x4]
	int Index;//[Offset: 0xb0, Size: 0x4]
	bool IsRequirementTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: SolarItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int64 ThisID;//[Offset: 0x8, Size: 0x8]
	FString Name;//[Offset: 0x10, Size: 0x10]
	FString Icon;//[Offset: 0x20, Size: 0x10]
	FString Info;//[Offset: 0x30, Size: 0x10]
	int Count;//[Offset: 0x40, Size: 0x4]
	enum ItemType;//[Offset: 0x44, Size: 0x4]
	int Quality;//[Offset: 0x48, Size: 0x4]
	int MaxPile;//[Offset: 0x4c, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	FString AbilityBP;//[Offset: 0x58, Size: 0x10]
	FString ItemBP;//[Offset: 0x68, Size: 0x10]
	int DropTime;//[Offset: 0x78, Size: 0x4]
	int UnPickupTime;//[Offset: 0x7c, Size: 0x4]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool IsPickupLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	int64 UserId;//[Offset: 0x88, Size: 0x8]
	int Level;//[Offset: 0x90, Size: 0x4]
	int Prize;//[Offset: 0x94, Size: 0x4]
	float CurValue;//[Offset: 0x98, Size: 0x4]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]

--------------------------------
Class: BagRequirementData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicateItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	int Slot;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarElectricShop.SolarInteractableActor.Actor.Object
	int MaxWeaponLevel;//[Offset: 0x248, Size: 0x4]
	float[] UpgradeEnergyCosts;//[Offset: 0x250, Size: 0x10]
	StaticMeshComponent* ShopMesh;//[Offset: 0x260, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x268, Size: 0x8]
	int SpawnID;//[Offset: 0x270, Size: 0x4]
	bool bSpecificShopID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	DataTable* ShopMeshPathTable;//[Offset: 0x278, Size: 0x28]
	bool bIfShowInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	class MapMarkBase* MapIcon;//[Offset: 0x2a8, Size: 0x28]
	int MapIconID;//[Offset: 0x2d0, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x2d4, Size: 0x4]
	int ShopID;//[Offset: 0x2d8, Size: 0x4]
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	float TirggerDistance;//[Offset: 0x2e0, Size: 0x4]
	enum CurrentModeAnimType;//[Offset: 0x2e4, Size: 0x1]
	enum WantedModeAnimType;//[Offset: 0x2e5, Size: 0x1]
	SolarCharacter*[] InstigateCharacters;//[Offset: 0x2e8, Size: 0x10]
	DataTable* ShopMeshDataTable;//[Offset: 0x2f8, Size: 0x8]
	ElectricShopSection[] ItemSections;//[Offset: 0x300, Size: 0x10]
	ElectricShopCDRecord[] ItemCDRecords;//[Offset: 0x310, Size: 0x10]
	float[] PoolRefreshTimeList;//[Offset: 0x320, Size: 0x10]
	PoolRefreshInfo[] PoolRefreshInfoList;//[Offset: 0x330, Size: 0x10]
	int CurPoolGroupID;//[Offset: 0x340, Size: 0x4]
	MapMarkBase*[] MapMarkArray;//[Offset: 0x358, Size: 0x10]
	TimerHandle[] CachedHandles;//[Offset: 0x368, Size: 0x10]
	float DemoRotationSpeed;//[Offset: 0x378, Size: 0x4]
	float DemoSwtichTime;//[Offset: 0x37c, Size: 0x4]
	float DemoOffsetFromZ;//[Offset: 0x380, Size: 0x4]
	DataTable* ItemDemoBPTable;//[Offset: 0x388, Size: 0x28]
	DataTable* ItemDemoBPDataTable;//[Offset: 0x3b0, Size: 0x8]
	<SoftObjectPath,ElectricShopItemDemo*> DemoActorMap;//[Offset: 0x3b8, Size: 0x50]
	ElectricShopItemDemo* CurDemo;//[Offset: 0x408, Size: 0x8]
	TimerHandle DemoLoopPlaybackHandle;//[Offset: 0x410, Size: 0x8]
	Object*[] CachedDemoItemsClass;//[Offset: 0x448, Size: 0x10]
	void UpgradeWeaponResponse(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x3b42b2d80041
	bool ServerUpgradeWeapon(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x3b41b2d80041
	void ServerStatisticElectricShop(const SolarCharacter* ActivateCharacter, enum StatisticType, const int InValueA, const int InValueB);// 0x3b40b2d80041
	bool ServerPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarCharacter* InCharacter);// 0x3b3fb2d80041
	bool RemoveInstigator(SolarCharacter* InCharacter);// 0x3b3eb2d80041
	bool RefreshSellingItem(const int InProductID);// 0x3b3db2d80041
	void RefreshItemCDRecords(out const ElectricShopItem InItem, FString InPlayerId);// 0x3b3cb2d80041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarCharacter* InCharacter);// 0x3b3bb2d80041
	void OnShopIDReplicatedBP();// 0x3b3ab2d80041
	void OnRep_ShopID();// 0x3b39b2d80041
	void OnRep_ItemSections();// 0x3b38b2d80041
	void OnRep_ItemCDRecords();// 0x3b37b2d80041
	void OnRep_CurPoolGroupID(int PrePoolGroupID);// 0x3b36b2d80041
	void OnPlayWeaponUpgradeAnim();// 0x3b35b2d80041
	void OnPlayPurchaseAnim();// 0x3b34b2d80041
	void OnPlayIdleAnim();// 0x3b33b2d80041
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3b32b2d80041
	void OnCurrentAnimFinish();// 0x3b31b2d80041
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b30b2d80041
	bool IsProductRecommendEquipType(const enum ProductType);// 0x3b2fb2d80041
	bool IsInteractable(SolarCharacter* InCharacter);// 0x3b2eb2d80041
	void InitWeaponUpgradeEnergyCost();// 0x3b2db2d80041
	void InitializeElectricShop();// 0x3b2cb2d80041
	float GetServerWorldTime();// 0x3b2bb2d80041
	float GetRemainingCD(const int ProductID);// 0x3b2ab2d80041
	bool GetCurrentItem(const int InProductID, out ElectricShopItem OutItem);// 0x3b29b2d80041
	FString GetBuyerID(const int ProductID);// 0x3b28b2d80041
	ElectricShopItem GenerateNewItem(const int InProductID);// 0x3b27b2d80041
	void ClientUpgradeWeaponSuccess();// 0x3b26b2d80041
	void ClientUpdateModelAnim();// 0x3b25b2d80041
	void ClientPurchaseSuccess();// 0x3b24b2d80041
	void ClientHUDUpgradeWeaponSuccess(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x3b23b2d80041
	void ClientHUDPurchaseSuccess(const int InProductID, SolarCharacter* InCharacter);// 0x3b22b2d80041
	void ClientHUDPoolRefresh(SolarCharacter* InCharacter);// 0x3b21b2d80041
	void ClientHUDItemRefresh(SolarCharacter* InCharacter);// 0x3b20b2d80041
	void ClientHUDCDRefresh(SolarCharacter* InCharacter);// 0x3b1fb2d80041
	void AddInstigator(SolarCharacter* InCharacter);// 0x3b1eb2d80041

--------------------------------
Class: SolarInteractableActor.Actor.Object
	enum InteractType;//[Offset: 0x230, Size: 0x1]
	byte bUseSceneActorOptimization;//[Offset: 0x23c, Size: 0x1]
	void SetUserActor(Actor* InUser);// 0x3b1db2d80041
	void InteractWithActor(Actor* InActor);// 0x3b1cb2d80041
	Actor* GetUserActor();// 0x3b1bb2d80041

--------------------------------
Class: SolarPlayerWeapon.SolarWeapon.Actor.Object
	float SpawnOffset;//[Offset: 0x9c8, Size: 0x4]
	bool bIsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc, Size: 0x1]
	SolarItemData ItemData;//[Offset: 0x9f0, Size: 0xa8]
	byte[] MarkedTeamIdList;//[Offset: 0xa98, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0xaa8, Size: 0x1]
	SphereComponent* SphereComponent;//[Offset: 0xab0, Size: 0x8]
	Vector DroppedLocation;//[Offset: 0xab8, Size: 0xc]
	SolarCharacterBase* WeaponOwner;//[Offset: 0xac8, Size: 0x8]
	WeaponAnimationComponent* WeaponAnimationComponent;//[Offset: 0xad0, Size: 0x8]
	WeaponUpgradeComponent* WeaponUpgradeComponent;//[Offset: 0xad8, Size: 0x8]
	SkeletalMeshComponent*[] WeaponOutlineComponents;//[Offset: 0xae0, Size: 0x10]
	byte CurrentRenderMode;//[Offset: 0xaf0, Size: 0x1]
	byte WeaponCurrentState;//[Offset: 0xaf2, Size: 0x1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0xaf8, Size: 0x10]
	SoftObjectPath HoldMeshMaterialPath;//[Offset: 0xb08, Size: 0x18]
	bool bNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 0x1]
	ParticleSystemComponent*[] SkinExtraPSCArray;//[Offset: 0xb28, Size: 0x10]
	ParticleSystemComponent* SkinSpecialEffect;//[Offset: 0xb38, Size: 0x8]
	<enum,SoftObjectPath> CharacterMontagePathMap;//[Offset: 0xb50, Size: 0x50]
	int AutoFireAnimCountFPP;//[Offset: 0xba0, Size: 0x4]
	int StandardLoopShotSectionFPP;//[Offset: 0xba4, Size: 0x4]
	int AutoFireAnimCountTPP;//[Offset: 0xba8, Size: 0x4]
	int StandardLoopShotSectionTPP;//[Offset: 0xbac, Size: 0x4]
	<enum,AnimMontage*> CharacterMontageMap;//[Offset: 0xbb0, Size: 0x50]
	<enum,AnimMontage*> OverrideCharacterMontageMap;//[Offset: 0xc00, Size: 0x50]
	ParticleSystem* SkinDedicatedKillEffect;//[Offset: 0xc50, Size: 0x8]
	ParticleSystem* SkinDedicatedSpecialEffect;//[Offset: 0xc58, Size: 0x8]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 0x1]
	void YieldCmdExec();// 0x40aeb2d80041
	void WeaponUpgradeToNextLevel();// 0x40adb2d80041
	void UpdateCharacterState(enum CharacterState, bool bIsOnGround, bool bResetState);// 0x40acb2d80041
	void UpdateCharacterPosture(bool IsCrouch);// 0x40abb2d80041
	void UpdateAppearanceCmdExec();// 0x40aab2d80041
	void SwitchPossessMaterial();// 0x40a9b2d80041
	void SwitchDiscardMaterial();// 0x40a8b2d80041
	void SetWeaponSkin(const WeaponSkinData* SkinData);// 0x40a7b2d80041
	void SetWeaponOutlineVisibility(const bool InVisibile);// 0x40a6b2d80041
	void SetSkin(int SkinId);// 0x40a5b2d80041
	void SetRenderMode(byte Mode);// 0x40a4b2d80041
	void SetOpenScopeOnVehicle(const bool InbOpenScope);// 0x40a3b2d80041
	void SetDedicatedSkinEffect(const WeaponSkinData* InSkinData);// 0x40a2b2d80041
	void ResumeCmdExec();// 0x40a1b2d80041
	void ResetSkin();// 0x40a0b2d80041
	void ResetMaterial();// 0x409fb2d80041
	void RequestUnlimitedAmmo(const bool InEnable);// 0x409eb2d80041
	void RefreshSkin();// 0x409db2d80041
	void PostUpdateAppearance();// 0x409cb2d80041
	void OnWeaponSkinRefresh(bool bValid, int SkinId);// 0x409bb2d80041
	void OnWeaponAppreanceChanged(const bool bPart, const enum PartType);// 0x409ab2d80041
	void OnSetWeaponSkinMesh(SkeletalMesh* InMesh, class Object InAnimClass);// 0x4099b2d80041
	void OnRep_WeaponCurrentStateChanged();// 0x4098b2d80041
	void OnClientMeshLodChanged(int LOD);// 0x4097b2d80041
	void NotifyThisItemWasPickedUp();// 0x4096b2d80041
	void MarkDirty();// 0x4095b2d80041
	void K2_SwitchDrawDistance(bool Hold);// 0x4094b2d80041
	void K2_OnHold(bool bLocal);// 0x4093b2d80041
	void K2_OnDrop();// 0x4092b2d80041
	bool IsOpenedScopeOnVehicle();// 0x4091b2d80041
	bool IsItemWeapon();// 0x4090b2d80041
	bool IsExistPart(out const enum PartType);// 0x408fb2d80041
	void Hold(bool bo);// 0x408eb2d80041
	bool HasScope();// 0x408db2d80041
	float GetWeaponSilencerMagnitude();// 0x408cb2d80041
	WeaponUpgradeComponent* GetUpgradeComponent();// 0x408bb2d80041
	PlayerWeaponSpreadComponent* GetSpreadComp();// 0x408ab2d80041
	SoftObjectPath[] GetSkinNeedLoadAssets(WeaponSkinData* SkinData);// 0x4089b2d80041
	PlayerWeaponRecoilComponent* GetRecoilComp();// 0x4088b2d80041
	int GetQualityByLevel(int Level);// 0x4087b2d80041
	int GetQuality();// 0x4086b2d80041
	byte GetItemCurrentState();// 0x4085b2d80041
	bool GetIsHolded();// 0x4084b2d80041
	Vector GetFPPLocation();// 0x4083b2d80041
	float GetFire2AnimPlayRate();// 0x4082b2d80041
	float GetDistanceToEyeWhenScope();// 0x4081b2d80041
	Vector GetCurrentScopeAimCenterPoint();// 0x4080b2d80041
	byte GetCurrentRenderMode();// 0x407fb2d80041
	WeaponPartClipComp* GetCurrentClip();// 0x407eb2d80041
	AnimMontage* GetCharacterAnimMontage(enum InMontageType);// 0x407db2d80041
	enum FindMontageKey(AnimMontage* Montage);// 0x407cb2d80041
	void EnqueueUpdateAppearanceCmd(const byte Cmd, FString Params);// 0x407bb2d80041
	void CRecieveProto_RefreshSkinAction(bool bAutonomous, FString paramters);// 0x407ab2d80041
	void ClearSkinExtraPSC();// 0x4079b2d80041
	void ClearDedicatedSkinEffect();// 0x4078b2d80041
	void AddWeaponEXP(int InExp);// 0x4077b2d80041

--------------------------------
Class: SolarWeapon.Actor.Object
	delegate OnWeaponUnhold;//[Offset: 0x3b8, Size: 0x10]
	class SolarWeaponFireStateMachine* WeaponFireStateMachineClass;//[Offset: 0x3c8, Size: 0x8]
	SolarWeaponFireStateMachine* WeaponFireStateMachine;//[Offset: 0x3d0, Size: 0x8]
	class SolarWeaponSkillStateMachine* WeaponSkillStateMachineClass;//[Offset: 0x3d8, Size: 0x8]
	SolarWeaponSkillStateMachine* WeaponSkillStateMachine;//[Offset: 0x3e0, Size: 0x8]
	float HitHeadValue;//[Offset: 0x3e8, Size: 0x4]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 0x1]
	bool bBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 0x1]
	bool bAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 0x1]
	bool bNeedBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	enum PrimaryShootingOption;//[Offset: 0x3f2, Size: 0x1]
	ImpactDisplayInfo ImpactInfo;//[Offset: 0x3f4, Size: 0x10]
	bool bSkillCostSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	int ExtraPoints;//[Offset: 0x414, Size: 0x4]
	int ExtraPointsForInit;//[Offset: 0x418, Size: 0x4]
	int ExtraPointsLimit;//[Offset: 0x41c, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x420, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x424, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x428, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x42c, Size: 0x4]
	float RestoreProgressAccumulation;//[Offset: 0x430, Size: 0x4]
	float RestoreProgressAccumulationForInit;//[Offset: 0x434, Size: 0x4]
	byte FireModeIndex;//[Offset: 0x441, Size: 0x1]
	int BurstMaxCount;//[Offset: 0x450, Size: 0x4]
	enum OverloadState;//[Offset: 0x468, Size: 0x1]
	float OverloadAccum;//[Offset: 0x46c, Size: 0x4]
	WeaponDebugFlag DebugFlag;//[Offset: 0x48c, Size: 0x6]
	float GatlingRollSpeed;//[Offset: 0x494, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x498, Size: 0x4]
	float GatlingRollSpeedInterp;//[Offset: 0x49c, Size: 0x4]
	int GatlingRepState;//[Offset: 0x4a0, Size: 0x4]
	bool bUseBlendSpaceForFPPRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	bool bResetMuzzleIndexWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 0x1]
	SolarVirtualBulletCollector* VirtualBulletCollector;//[Offset: 0x4c0, Size: 0x8]
	float FireChargingTime;//[Offset: 0x4e0, Size: 0x4]
	int FireChargingPhase;//[Offset: 0x4e4, Size: 0x4]
	float ChargeAnimationRate;//[Offset: 0x4ec, Size: 0x4]
	AbilitySystemComponent* OwnerGAS;//[Offset: 0x4f0, Size: 0x8]
	int CurrentMode;//[Offset: 0x508, Size: 0x4]
	FireMode[] FireModes;//[Offset: 0x518, Size: 0x10]
	Actor* WeaponHolder;//[Offset: 0x528, Size: 0x8]
	SolarCharacterBase* ControllWeaponCharacter;//[Offset: 0x530, Size: 0x8]
	GameplayAbilitySpecHandle[] EquipedAbilityHandles;//[Offset: 0x538, Size: 0x10]
	bool bControllWeaponCharacterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	Actor* AimTarget;//[Offset: 0x550, Size: 0x8]
	class SolarWeaponProjectileSpline* ProjSplineClass;//[Offset: 0x558, Size: 0x8]
	SolarWeaponProjectileSpline* ProjSpline;//[Offset: 0x560, Size: 0x8]
	enum[] ShootingOptArray;//[Offset: 0x568, Size: 0x10]
	bool bShowSpecialEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	int SecondaryModeBurstMaxCount;//[Offset: 0x57c, Size: 0x4]
	SingleWeaponConfig* Config;//[Offset: 0x580, Size: 0x8]
	Texture2D* WeaponIcon;//[Offset: 0x588, Size: 0x8]
	SlateWidgetStyleAsset* PrimaryFireBtnStyle;//[Offset: 0x590, Size: 0x8]
	SlateWidgetStyleAsset* SecondaryFireBtnStyle;//[Offset: 0x598, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfig;//[Offset: 0x5a0, Size: 0x8]
	WeaponSpreadComponent* SpreadComponent;//[Offset: 0x5a8, Size: 0x8]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0x5b0, Size: 0x8]
	int weaponid;//[Offset: 0x5b8, Size: 0x4]
	bool bInitCfgFromTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bf, Size: 0x1]
	bool bTeamDamageEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1]
	bool bInfinitePackageAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c2, Size: 0x1]
	int ExtraAmmo;//[Offset: 0x5c4, Size: 0x4]
	int CurrentClipAmmo;//[Offset: 0x5f8, Size: 0x4]
	CameraShakeData[] WeaponFireCameraShakes;//[Offset: 0x600, Size: 0x10]
	CameraShakeData[] UsingSkillCameraShakes;//[Offset: 0x610, Size: 0x10]
	CameraShakeData[] WeaponChargingCameraShakes;//[Offset: 0x620, Size: 0x10]
	enum WeaponChargePhase;//[Offset: 0x630, Size: 0x1]
	bool bUseEmptyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 0x1]
	SoftObjectPath FightMeshPath;//[Offset: 0x638, Size: 0x18]
	SkeletalMeshComponent* Mesh;//[Offset: 0x650, Size: 0x8]
	SkeletalMesh* OriginalMesh;//[Offset: 0x658, Size: 0x8]
	class WeaponAnimInstance* OriginalAnimBP;//[Offset: 0x660, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x668, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x670, Size: 0x8]
	int SoundFireAutoCount;//[Offset: 0x678, Size: 0x4]
	bool bTriggerSoundFireAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 0x1]
	int OldSoundFireAutoCount;//[Offset: 0x680, Size: 0x4]
	bool bTriggerSoundB9A04Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x685, Size: 0x1]
	int SkillFireCount;//[Offset: 0x688, Size: 0x4]
	int SingleFireCount;//[Offset: 0x68c, Size: 0x4]
	int FireOverloadCount;//[Offset: 0x690, Size: 0x4]
	int FireLastCount;//[Offset: 0x694, Size: 0x4]
	FName SkillReleaseResult;//[Offset: 0x6e8, Size: 0x8]
	OverrideBulletStruct OverrideBullet;//[Offset: 0x718, Size: 0x10]
	bool bInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]
	bool bClientInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 0x1]
	bool bLoadInitAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 0x1]
	bool bLoadAllCfgAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 0x1]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x730, Size: 0x8]
	<FireUniqueID,float> FireHitVerifyMap;//[Offset: 0x738, Size: 0x50]
	bool bDetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	ParticleSystemComponent* MuzzlePSC;//[Offset: 0x798, Size: 0x8]
	ParticleSystemComponent*[] GatlingOverHeatPSCs;//[Offset: 0x7a0, Size: 0x10]
	int RandomSkillIndex;//[Offset: 0x7b0, Size: 0x4]
	SolarEnergyShield*[] IgnoreEnergyShieldArray;//[Offset: 0x8f8, Size: 0x10]
	bool bEnterReloadState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90a, Size: 0x1]
	float WeaponSpreadValue;//[Offset: 0x90c, Size: 0x4]
	bool bDisplayPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	bool VerifyLastClipAmmo(int InFireModeType, int InLastClipAmmo);// 0x4076b2d80041
	bool UseEnergy(int Mode);// 0x4075b2d80041
	bool UseBagResource(int Mode);// 0x4074b2d80041
	bool TryHitOperation(out const FireUniqueID FireUniqueID, out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const float DamageScale, out const BulletHitDetailData HitDetailData, const bool IsNotDelay);// 0x4073b2d80041
	void StopSoundDelay(const float DelayTime);// 0x4072b2d80041
	void StopSound(enum Opt, int idx);// 0x4071b2d80041
	void StopLastValidFire();// 0x4070b2d80041
	void StartSound(enum Opt, int idx);// 0x406fb2d80041
	void StartAsyncLoading();// 0x406eb2d80041
	SolarProjBullet* SpawnProjWithFireID(out const SpawnBulletParam Param, out const FireUniqueID FireID, bool Local);// 0x406db2d80041
	bool SkillCost();// 0x406cb2d80041
	void ShowSpecialEffect(bool bShow);// 0x406bb2d80041
	void SetWeaponSkill(const int InWeaponID, out SingleWeaponConfig* InWeaponConfig);// 0x406ab2d80041
	void SetWeaponAnimState(enum InWeaponAnimState);// 0x4069b2d80041
	void SetPrimaryShootingOption(enum Opt);// 0x4068b2d80041
	void SetLastFireTime(int InFireModeType, float InFireTime);// 0x4067b2d80041
	void SetHolder(Actor* holder);// 0x4066b2d80041
	void ServerWeaponSound(enum Opt, bool TriggerSound);// 0x4065b2d80041
	void ServerVirtualBulletShotHit(const SolarVirtualBulletHitParameter[] AllHitParams);// 0x4064b2d80041
	void ServerVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, bool bMuzzleBlocked);// 0x4063b2d80041
	void ServerUpdateGatlingRepState(int InState);// 0x4062b2d80041
	void ServerSpawnProjWithVelocity(const SpawnProjParam Param);// 0x4061b2d80041
	void ServerSpawnProjWithFireID(const SpawnBulletParam Param, const FireUniqueID FireID);// 0x4060b2d80041
	void ServerSkillCost();// 0x405fb2d80041
	void ServerSetWeaponSpreadValue(float InSpreadValue);// 0x405eb2d80041
	void ServerSetTarget(Actor* Target);// 0x405db2d80041
	void ServerSetPrimaryOption(const enum Opt);// 0x405cb2d80041
	void ServerSetImpactInfo(const Vector Postion, const float Scale);// 0x405bb2d80041
	void ServerSetHipFire(const bool InbHipFire);// 0x405ab2d80041
	void ServerSetDisplayPreview(bool InbDisplay);// 0x4059b2d80041
	void ServerResetFireCount();// 0x4058b2d80041
	void ServerRequestSummonItem(const int fireModeType, const bool InIsQuickSummon, const SolarSummonData InSummonData);// 0x4057b2d80041
	void ServerRequestDropWeapon();// 0x4056b2d80041
	void ServerRecieveHitDataFromClient(const BulletHitData HitData, const bool IsNotDelay);// 0x4055b2d80041
	void ServerPostReloadState(bool InbEnterReload);// 0x4054b2d80041
	void ServerModeState(int Mode);// 0x4053b2d80041
	void ServerInstantLineShot(const int ModeIndex, const Vector Start, const Vector End, const float DamageScale, const MutiBulletHitData HitData, bool bMuzzleBlocked);// 0x4052b2d80041
	void ServerHit(const HitResult Impact, int Mode, FString AntiData, bool TriggerAnim, float Scale);// 0x4051b2d80041
	void ServerFireChargeShoot(const AmmoConfig* InAmmo, int InFireChargingPhase, int InFireChargingTime);// 0x4050b2d80041
	void ServerFireChargePhaseChange(int InFireChargingPhase);// 0x404fb2d80041
	void ServerFire_JustAbilitiesAmmo(const int idx);// 0x404eb2d80041
	void ServerChangeWeaponChargePhase(const enum InChargeState);// 0x404db2d80041
	void ServerChangeOverloadState(enum InState);// 0x404cb2d80041
	void ServerCanisterShot(const int ModeIndex, const Vector Start, const Vector End, float RandomA, float RandomB, const MutiBulletHitData HitData, bool bMuzzleBlocked);// 0x404bb2d80041
	void ServerAddOrRemoveGameplayTagsToCharacter(bool bInAddTag, const GameplayTagContainer InTags);// 0x404ab2d80041
	void RuntimeUpdateData(int Cmd, FString Params);// 0x4049b2d80041
	void ResetRecoilComponent();// 0x4048b2d80041
	AmmoConfig* ReLoadAmmoData(const AmmoConfig* BaseConfig, int AmmoID);// 0x4047b2d80041
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x4046b2d80041
	void ReceiveChargingState(const int Index, const enum State);// 0x4045b2d80041
	void PrimaryCost();// 0x4044b2d80041
	void PlayBulletHitEffect(out const HitResult HitResult, SolarBullet* Bullet, bool bForce, Pawn* HitCauser);// 0x4043b2d80041
	void PlayAutoSingleSound();// 0x4042b2d80041
	void OverrideFireMode(int InFireModeType, const AmmoConfig* InNewAmmoConfig);// 0x4041b2d80041
	void OnShow(const bool Toggle);// 0x4040b2d80041
	void OnRep_WeaponChargePhase();// 0x403fb2d80041
	void OnRep_SoundFireSkillCast();// 0x403eb2d80041
	void OnRep_SoundFireSingle();// 0x403db2d80041
	void OnRep_SoundFireOverload();// 0x403cb2d80041
	void OnRep_SoundFireLast();// 0x403bb2d80041
	void OnRep_SoundFireBurst();// 0x403ab2d80041
	void OnRep_SoundFireAutoCount();// 0x4039b2d80041
	void OnRep_SoundB9A04Skill();// 0x4038b2d80041
	void OnRep_OverloadStateChange(enum PreviousState);// 0x4037b2d80041
	void OnRep_ImpactPosition();// 0x4036b2d80041
	void OnRep_FireModes();// 0x4035b2d80041
	void OnRep_FireChargingPhase(int InOldFireChargingPhase);// 0x4034b2d80041
	void OnRep_ExtraAmmo();// 0x4033b2d80041
	void OnRep_EnterReloadState();// 0x4032b2d80041
	void OnRep_DisplayPreview();// 0x4031b2d80041
	void OnRep_CurrentMode();// 0x4030b2d80041
	void OnRep_ControllWeaponCharacterChanged();// 0x402fb2d80041
	void OnRep_bInitFinishChanged();// 0x402eb2d80041
	void OnPlayMuzzleEffect(int ModeIdx, bool bMuzzleBlocked);// 0x402db2d80041
	void OnOverrideWeaponConfigByTable(int PrimaryAmmoSoundID, int SecondaryAmmoSoundID);// 0x402cb2d80041
	void OnLoadInitAssetComplete();// 0x402bb2d80041
	void OnLoadCfgAssetsComplete();// 0x402ab2d80041
	void OnInternalUnControlled();// 0x4029b2d80041
	void OnInternalControlled(SolarCharacterBase* OwnerChar);// 0x4028b2d80041
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x4027b2d80041
	void OnInitFlowComplete(SolarWeaponState* Last);// 0x4026b2d80041
	void OnGatlingRollChange(bool bIncrease);// 0x4025b2d80041
	void OnFireChargeBurstCountChange(int BurstSum);// 0x4024b2d80041
	void OnBeamFinished(ParticleSystemComponent* PS);// 0x4023b2d80041
	enum NextShootingPrimaryOption();// 0x4022b2d80041
	void LuaStopSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x4021b2d80041
	void LuaStartSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x4020b2d80041
	void LoadInitAsset();// 0x401fb2d80041
	void LoadAllCfgAssets();// 0x401eb2d80041
	AmmoConfig* K2_GetOverrideAmmoConfigBase(int ModeIndex);// 0x401db2d80041
	bool IsVisiable();// 0x401cb2d80041
	bool IsSummonWeapon();// 0x401bb2d80041
	bool IsShowCoolDownWidget();// 0x401ab2d80041
	bool IsShotAimEnemy();// 0x4019b2d80041
	bool IsShootingOptionSupport(int idx);// 0x4018b2d80041
	bool IsScopeOpen();// 0x4017b2d80041
	bool IsOpenedScope();// 0x4016b2d80041
	bool IsMultipleShootingPrimaryShooting();// 0x4015b2d80041
	bool IsHipFire();// 0x4014b2d80041
	bool IsFireStreakBreak(int InFireModeType);// 0x4013b2d80041
	bool IsEnergyID(const int BulletItemID);// 0x4012b2d80041
	bool IsControlled();// 0x4011b2d80041
	bool IsCanFire();// 0x4010b2d80041
	ParticleSystemComponent* InternalPlayEffectAttached(ParticleSystem* PS, SceneComponent* AttachToComponent, FName AttachPointName, AttachedEffectParam Param);// 0x400fb2d80041
	ParticleSystemComponent* InternalPlayEffectAtLocation(const Object* WorldContext, ParticleSystem* PS, out const Vector Location, LocationEffectParam Param, bool bUseDistScale);// 0x400eb2d80041
	void InternalClientPlayFiringEffects(const int ModeIdx, bool bMuzzleBlocked);// 0x400db2d80041
	bool InSameTeam();// 0x400cb2d80041
	void InitSkin();// 0x400bb2d80041
	void InitLevel();// 0x400ab2d80041
	void InitConfigs();// 0x4009b2d80041
	bool ImmediatelyFire(int idx, const bool bEnable);// 0x4008b2d80041
	bool HasLoadInitAsset();// 0x4007b2d80041
	bool HasLoadAllCfgAssets();// 0x4006b2d80041
	bool HasInitSkin();// 0x4005b2d80041
	bool HasInitLevel();// 0x4004b2d80041
	bool HasInitFinish();// 0x4003b2d80041
	bool HasInitConfigs();// 0x4002b2d80041
	void HandFireModeInput(byte WeaponFireModeType, bool Press);// 0x4001b2d80041
	enum GetWeaponType();// 0x4000b2d80041
	FString GetWeaponTextType();// 0x3fffb2d80041
	uint32 GetWeaponNoticeID(out const FName InNoticeType);// 0x3ffeb2d80041
	WeaponNetComponent* GetWeaponNetComp();// 0x3ffdb2d80041
	int GetWeaponLevel();// 0x3ffcb2d80041
	int GetWeaponID();// 0x3ffbb2d80041
	Texture2D* GetWeaponIcon();// 0x3ffab2d80041
	enum GetWeaponBrand();// 0x3ff9b2d80041
	SlateBrush GetTriggerIcon(const int InFireModeType);// 0x3ff8b2d80041
	WeaponSpreadComponent* GetSpreadComponent();// 0x3ff7b2d80041
	int GetSpareAmmo(int InFireModeType);// 0x3ff6b2d80041
	float GetSoundRTPCValue();// 0x3ff5b2d80041
	int GetSkinID();// 0x3ff4b2d80041
	float GetShotGunSpreadSeed();// 0x3ff3b2d80041
	Vector GetShotDir(bool NeedSpread);// 0x3ff2b2d80041
	Vector GetShootingTraceStartLocation(int FireModeIdx);// 0x3ff1b2d80041
	FString GetShootingPrimaryShootingOptionName(const enum Opt);// 0x3ff0b2d80041
	float GetSecondModeValue();// 0x3fefb2d80041
	int GetReservedAmmo(int idx);// 0x3feeb2d80041
	float GetReloadPreogress();// 0x3fedb2d80041
	WeaponRecoilComponent* GetRecoilComponent();// 0x3fecb2d80041
	int GetPrimaryShootingOptionIndex();// 0x3febb2d80041
	WeaponPartsComponent* GetPartsComponent();// 0x3feab2d80041
	float GetOverloadPercent();// 0x3fe9b2d80041
	float GetOverloadMaxValue();// 0x3fe8b2d80041
	SolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();// 0x3fe7b2d80041
	float GetNpcDamageFactor();// 0x3fe6b2d80041
	int GetMaxAmmo(int idx);// 0x3fe5b2d80041
	float GetLastFireTime(int InFireModeType);// 0x3fe4b2d80041
	bool GetIsVehicleMounted();// 0x3fe3b2d80041
	bool GetIsSupportSecondaryFire();// 0x3fe2b2d80041
	bool GetIsSupportAutoFire();// 0x3fe1b2d80041
	bool GetIsSupportAssistAim();// 0x3fe0b2d80041
	bool GetIsReloading();// 0x3fdfb2d80041
	bool GetIsQuickScope();// 0x3fdeb2d80041
	bool GetIsOverloading();// 0x3fddb2d80041
	bool GetIsIntialized();// 0x3fdcb2d80041
	bool GetIsIdle();// 0x3fdbb2d80041
	bool GetIsGatlingRoll();// 0x3fdab2d80041
	bool GetIsFiring();// 0x3fd9b2d80041
	bool GetIsCoolDown(int Mode);// 0x3fd8b2d80041
	bool GetIsBurst();// 0x3fd7b2d80041
	bool GetIsBolt();// 0x3fd6b2d80041
	float GetGunHandPoseAimOffset();// 0x3fd5b2d80041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x3fd4b2d80041
	void GetFPPFireBlendParam(out float OutHorizontal, out float OutVertical);// 0x3fd3b2d80041
	int GetFireModeNameLocalizationID(int InFireModeType);// 0x3fd2b2d80041
	float GetFireIntervalProgress(int idx);// 0x3fd1b2d80041
	float GetFireInterval(int idx);// 0x3fd0b2d80041
	float GetFireCD(int idx);// 0x3fcfb2d80041
	float GetExtraPointsPercent();// 0x3fceb2d80041
	int GetExtraPoints();// 0x3fcdb2d80041
	ParticleSystem* GetDedicatedKillEffect();// 0x3fccb2d80041
	int GetCurScopeType();// 0x3fcbb2d80041
	enum GetCurrentShootingPrimaryOption();// 0x3fcab2d80041
	SingleWeaponConfig* GetCurrentConfig();// 0x3fc9b2d80041
	int GetCurrentClipAmmo(int InFireModeType);// 0x3fc8b2d80041
	bool GetCurrentChargeModePercent(int InFireModeType, out int OutChargeMode, out float OutChargePercent);// 0x3fc7b2d80041
	int GetCostPreAttack(int idx);// 0x3fc6b2d80041
	float GetCoolDownPercent();// 0x3fc5b2d80041
	SolarCharacterBase* GetControlWeaponCharacter();// 0x3fc4b2d80041
	float GetChargingPercent(int idx);// 0x3fc3b2d80041
	float GetBurstInterval(int idx);// 0x3fc2b2d80041
	float GetBurstInternalInterval(int idx);// 0x3fc1b2d80041
	void GetBulletHitEffectRot(out const HitResult HitResult, const SolarBullet* Bullet, out Rotator TargetPos, const bool bIsHittedShield);// 0x3fc0b2d80041
	void GetBulletHitEffectPos(out const HitResult HitResult, out Vector TargetRot, float Offset);// 0x3fbfb2d80041
	SolarBullet* GetBulletDefaultObject(const int idx, const AmmoConfig* AmmoCfg);// 0x3fbeb2d80041
	class SolarBullet GetBulletClass(const int idx, const AmmoConfig* AmmoCfg);// 0x3fbdb2d80041
	float GetBotAIDamageFactor();// 0x3fbcb2d80041
	enum GetAmmoTriggerType(const int fireModeType);// 0x3fbbb2d80041
	int GetAmmoItemID(int idx);// 0x3fbab2d80041
	bool GetAllInitAssetPath(out SoftObjectPath[] PathArray);// 0x3fb9b2d80041
	bool GetAllCfgAssetsPath(out SoftObjectPath[] PathArray);// 0x3fb8b2d80041
	bool FireVerify_Location(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x3fb7b2d80041
	bool FireVerify_EffectRange(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x3fb6b2d80041
	bool FireVerify_Block(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x3fb5b2d80041
	bool FireValidate(out const int idx, float InLastShootTime);// 0x3fb4b2d80041
	void ExitBoltState();// 0x3fb3b2d80041
	void EnterOverloadState();// 0x3fb2b2d80041
	void DestroyWeaponProjectileSpline();// 0x3fb1b2d80041
	void ClientVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, bool bMuzzleBlocked);// 0x3fb0b2d80041
	void ClientSkillRelease(bool InbSuccess, uint32 InResultID);// 0x3fafb2d80041
	void ClientPlayHitEffect(const MultiHitResult InMultiHitResult);// 0x3faeb2d80041
	void ClientPlayFiringEffects(const int ModeIdx, bool bMuzzleBlocked);// 0x3fadb2d80041
	void ClientInstantLineShot(const int ModeIndex, const HitResult[] HitResults, const Vector End, const float DamageScale, bool bMuzzleBlocked);// 0x3facb2d80041
	void ClientFireChargeShoot(const AmmoConfig* InAmmo, int InFireChargingPhase, int InFireChargingTime);// 0x3fabb2d80041
	void ClientCanisterShot(const int ModeIndex, const Vector Start, const HitResult[] ValidHits, bool bMuzzleBlocked, const Vector Target);// 0x3faab2d80041
	void ClearFireHitVerify();// 0x3fa9b2d80041
	bool CheckOpenParticleOptimization(int Bias);// 0x3fa8b2d80041
	bool CanOverload();// 0x3fa7b2d80041
	bool CanCauseTeamDamage();// 0x3fa6b2d80041
	float CalcScale(out const FireMode Mode);// 0x3fa5b2d80041
	int CalcCost(out const FireMode Mode);// 0x3fa4b2d80041
	void AsyncCheckShotAimHitResult();// 0x3fa3b2d80041
	void AddOrRemoveGameplayTagsToCharacter(bool InbAdd, out const GameplayTagContainer InTags);// 0x3fa2b2d80041
	void AddOrRemoveBlockChracterSprintTag(bool InbAdd);// 0x3fa1b2d80041
	void AddExtraPoints(const enum InHitType, const int InDamage);// 0x3fa0b2d80041

--------------------------------
Class: FireUniqueID
	int Data;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BulletHitDetailData
	Actor* HitActor;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x8, Size: 0x8]
	Vector HitActorLocation;//[Offset: 0x10, Size: 0xc]
	Vector HitLocation;//[Offset: 0x1c, Size: 0xc]
	Vector HitNormal;//[Offset: 0x28, Size: 0xc]
	FName HitBone;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: SpawnBulletParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	int Mode;//[Offset: 0x1c, Size: 0x4]
	bool TriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float Scale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	FString AntiData;//[Offset: 0x30, Size: 0x10]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SolarProjBullet.SolarBullet.Actor.Object
	Vector SpawnedLocation;//[Offset: 0x358, Size: 0xc]
	float EffRange;//[Offset: 0x364, Size: 0x4]
	float MaxRange;//[Offset: 0x368, Size: 0x4]
	int RocketNum;//[Offset: 0x36c, Size: 0x4]
	Vector SecondVelocity;//[Offset: 0x370, Size: 0xc]
	Vector FirstBulletSpeed;//[Offset: 0x384, Size: 0xc]
	bool bNoRTImpactEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	HitResult RocketHitResult;//[Offset: 0x3a4, Size: 0x88]
	AmmoConfig* AmmoConfig;//[Offset: 0x430, Size: 0x8]
	bool bScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool bHiddenWhenExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	SolarPlayerController* BulletOwnerController;//[Offset: 0x440, Size: 0x8]
	int ModeIdx;//[Offset: 0x44c, Size: 0x4]
	ShapeComponent* CollisionComp;//[Offset: 0x450, Size: 0x8]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x458, Size: 0x8]
	SolarSplineMovementComponent* SplineMovementComp;//[Offset: 0x460, Size: 0x8]
	float GravityScaleRate;//[Offset: 0x468, Size: 0x4]
	CurveFloat* BounceCurve;//[Offset: 0x470, Size: 0x8]
	bool bHitSpecificActorsExplodeWithBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bForcePenetrateEnergyShiled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	Vector InitialVelocity;//[Offset: 0x47c, Size: 0xc]
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bTriggerEffRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	bool bTriggerMaxRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 0x1]
	bool bWaitToBeDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48b, Size: 0x1]
	bool bDontAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x490, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x4a0, Size: 0x8]
	ParticleSystemComponent* ParticleComp;//[Offset: 0x4b0, Size: 0x8]
	ParticleSystemComponent* TrajPSC;//[Offset: 0x4b8, Size: 0x8]
	int PoolLimit;//[Offset: 0x4d0, Size: 0x4]
	bool bVerifyFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	bool bSpecialVerifyFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x662, Size: 0x1]
	FireUniqueID FireUniqueID;//[Offset: 0x664, Size: 0x4]
	bool bBulletActiveAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	void StopSound(enum Opt);// 0x40deb2d80041
	void StartSound(enum Opt);// 0x40ddb2d80041
	void SpawnSoundPlayerAndPlayFlySound();// 0x40dcb2d80041
	void SetLocationByEnergyShield();// 0x40dbb2d80041
	void OnStop(out const HitResult HitResult);// 0x40dab2d80041
	void OnSplineMovementCompStop(out const HitResult HitResult, bool bBlocking);// 0x40d9b2d80041
	void OnRep_RocketHitResult();// 0x40d8b2d80041
	void OnRep_InitialVelocity();// 0x40d7b2d80041
	void OnRep_bExploded();// 0x40d6b2d80041
	void OnOutRange();// 0x40d5b2d80041
	void OnBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x40d4b2d80041
	void OnAttachedActorDestroyed(Actor* Other);// 0x40d3b2d80041
	void OnActorDestroyed(Actor* DestroyedActor);// 0x40d2b2d80041
	bool IsAllowPlayEffect();// 0x40d1b2d80041
	void InitSplineMovementComp(SolarSplineMovementComponent* Comp);// 0x40d0b2d80041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x40cfb2d80041
	void ExplodeBegin();// 0x40ceb2d80041
	void DelayDestroy(float DelayTime);// 0x40cdb2d80041
	SolarSplineMovementComponent* BlueprintGetSplineMovementComp();// 0x40ccb2d80041

--------------------------------
Class: SolarBullet.Actor.Object
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bShowHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	bool bShowHitWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1]
	ParticleSystem* BulletEffect;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* TrajectoryEffect;//[Offset: 0x240, Size: 0x8]
	ParticleSystem* TrajectoryEffectOther;//[Offset: 0x248, Size: 0x8]
	SoftObjectPath SimpleCanisterShotEffectPath;//[Offset: 0x250, Size: 0x18]
	ParticleSystem* TrajectoryBeamEffect;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* TrajectoryBeamEffectOther;//[Offset: 0x270, Size: 0x8]
	ParticleSystem* HitEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* MuzzleEffect;//[Offset: 0x280, Size: 0x8]
	ParticleSystem* MuzzleEffectScope;//[Offset: 0x288, Size: 0x8]
	ParticleSystem* MuzzleEffectOther;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffect;//[Offset: 0x298, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectScope;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectOther;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* SpecialEffect;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* DecalEffect;//[Offset: 0x2b8, Size: 0x8]
	ParticleSystem* DecalEffect2;//[Offset: 0x2c0, Size: 0x8]
	SoftObjectPath ShieldEffect;//[Offset: 0x2c8, Size: 0x18]
	<byte,SoftObjectPath> PhysicsHitEffects;//[Offset: 0x2e0, Size: 0x50]
	float DecalLifeSpan;//[Offset: 0x330, Size: 0x4]
	ParticleSystem* ShellCaseEffect;//[Offset: 0x338, Size: 0x8]
	ParticleSystem* ShellCaseEffectOnScope;//[Offset: 0x340, Size: 0x8]
	float ProjectTileSummonDistance;//[Offset: 0x348, Size: 0x4]
	bool CanExplodeWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	byte BulletCollisionType;//[Offset: 0x34d, Size: 0x1]
	SoftObjectPath GetHitPhysicEffectPath(out const byte HitSurface);// 0x39e5b2d80041

--------------------------------
Class: AmmoConfig.DataAsset.Object
	enum HoldAction;//[Offset: 0x30, Size: 0x1]
	FireChargeData[] FireChargeDatas;//[Offset: 0x38, Size: 0x10]
	FString FireChargeStopSoundName;//[Offset: 0x48, Size: 0x10]
	float ChargingToleranceEndTime;//[Offset: 0x58, Size: 0x4]
	float ChargingWorkingEndTime;//[Offset: 0x5c, Size: 0x4]
	float ChargingHoldingEndTime;//[Offset: 0x60, Size: 0x4]
	float ChargingTrajectoryTime;//[Offset: 0x64, Size: 0x4]
	bool bCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x6c, Size: 0x4]
	bool bForceFullShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxChargingDamageScale;//[Offset: 0x74, Size: 0x4]
	bool bIsTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	TracerBulletData TracerData;//[Offset: 0x7c, Size: 0xc]
	float DeltaAngle;//[Offset: 0x88, Size: 0x4]
	FString Name;//[Offset: 0x90, Size: 0x10]
	FString Des;//[Offset: 0xa0, Size: 0x10]
	int PropID;//[Offset: 0xb0, Size: 0x4]
	float Lifetime;//[Offset: 0xb4, Size: 0x4]
	enum FireMethodType;//[Offset: 0xb8, Size: 0x1]
	enum TrajectoryType;//[Offset: 0xb9, Size: 0x1]
	float CustomValue;//[Offset: 0xbc, Size: 0x4]
	class SolarBullet* BulletClass;//[Offset: 0xc0, Size: 0x8]
	enum BulletBounce;//[Offset: 0xc8, Size: 0x1]
	int BounceTimes;//[Offset: 0xcc, Size: 0x4]
	enum TriggerType;//[Offset: 0xd0, Size: 0x1]
	float MaxRange;//[Offset: 0xd4, Size: 0x4]
	float EffRange;//[Offset: 0xd8, Size: 0x4]
	float Radius;//[Offset: 0xdc, Size: 0x4]
	float InitSpeed;//[Offset: 0xe0, Size: 0x4]
	enum FireCostType;//[Offset: 0xe4, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0xe8, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0xec, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0xf0, Size: 0x4]
	float FastestFireInterval;//[Offset: 0xf4, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0xf8, Size: 0x4]
	float BaseFireInterval;//[Offset: 0xfc, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x100, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x104, Size: 0x4]
	float BoltActionTime;//[Offset: 0x108, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x10c, Size: 0x4]
	float AutoFireBreakTime;//[Offset: 0x110, Size: 0x4]
	bool bUseBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float FireStreakBreakTime;//[Offset: 0x118, Size: 0x4]
	int FireIdx;//[Offset: 0x11c, Size: 0x4]
	bool bTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	float BaseReloadTime;//[Offset: 0x124, Size: 0x4]
	float PostFireOverload;//[Offset: 0x128, Size: 0x4]
	bool bPlayHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bPlayExplodeSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	int SingleSoundCount;//[Offset: 0x130, Size: 0x4]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x138, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x148, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x158, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x168, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x178, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x188, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x198, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1a8, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1b8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x1c8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1d8, Size: 0x10]
	CurveFloat* PostFireSpreadCurveStruct;//[Offset: 0x1e8, Size: 0x8]
	float ADSSpreadCOP;//[Offset: 0x1f0, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0x1f4, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0x1f8, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0x1fc, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0x200, Size: 0x4]
	AmmonVerticalRecoilStruct PitchRecoilStruct;//[Offset: 0x208, Size: 0x30]
	AmmonHorizontalRecoilStruct YawRecoilStruct;//[Offset: 0x238, Size: 0x30]
	AmmonRecoilRollStruct RollRecoilStruct;//[Offset: 0x268, Size: 0x40]
	AmmonRecoilScope ScopeRecoil;//[Offset: 0x2a8, Size: 0xb8]
	float ADSRecoilCOP;//[Offset: 0x360, Size: 0x4]
	<FString,float> RecoilCOPMap;//[Offset: 0x368, Size: 0x50]
	byte[] IgnoreEPhysicalSurface;//[Offset: 0x3b8, Size: 0x10]
	SoftObjectPath SummonConfigPath;//[Offset: 0x3c8, Size: 0x18]
	float BurstFireInterval;//[Offset: 0x3e0, Size: 0x4]
	float BurstFireInternalInterval;//[Offset: 0x3e4, Size: 0x4]
	float FireAnimationPlayRate;//[Offset: 0x3e8, Size: 0x4]
	int AmmoSoundType;//[Offset: 0x3ec, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x3f0, Size: 0x4]
	float ParticleStartDistance;//[Offset: 0x3f4, Size: 0x4]
	float TrajectoryStartDistance;//[Offset: 0x3f8, Size: 0x4]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	float PenetrationRadius;//[Offset: 0x400, Size: 0x4]
	CurveFloat* PenetrationDamageMultiplierCurve;//[Offset: 0x408, Size: 0x8]
	CurveFloat* CylinderDamageMultiplierCurve;//[Offset: 0x410, Size: 0x8]
	SlateBrush TriggerIcon;//[Offset: 0x418, Size: 0x98]
	CurveFloat* BulletDamageCurve;//[Offset: 0x4b0, Size: 0x8]
	CurveFloat* BulletScaleCurve;//[Offset: 0x4b8, Size: 0x8]
	CurveFloat* BulletSpeedCurve;//[Offset: 0x4c0, Size: 0x8]
	bool bForceApplyAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	class SolarAbility[] AmmoAbilityClasses;//[Offset: 0x4d0, Size: 0x10]
	class SolarAbility[] AmmoAbilityClassesOnDestroyed;//[Offset: 0x4e0, Size: 0x10]
	class SolarAbility* AmmoAbilityClassesOnSelf;//[Offset: 0x4f0, Size: 0x8]
	class GameplayAbility* GASAbilityClass;//[Offset: 0x4f8, Size: 0x8]
	int NameLocalTextIDNumber;//[Offset: 0x500, Size: 0x4]
	int DescriptionLocalTextIDNumber;//[Offset: 0x504, Size: 0x4]
	void InitVerticalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x3317b2d80041
	void InitSpreadData(float adscop, float firepre, float changespeed, float restorepre, float restorespeed);// 0x3316b2d80041
	void InitScopeRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x3315b2d80041
	void InitScopeAndCrossHairVibration(const float ScopeVMaxDistanceOffSet, const float ScopeVVibrationDuration, const float ScopeHMaxDistanceOffSet, const float ScopeHVibrationDuration, const float ScopeVContinuousFallingDuration, const float ScopeVContinuousFallingPointIndex, const float VMaxDistanceOffSetScale, const float VVibrationDurationScale, const float VSingleOffSetScale, const float VContinuousOffSetScale, const float HMaxDistanceOffSetScale, const float HVibrationDurationScale, const float HSingleOffSetScale, const float HContinuousOffSetScale, const float HOffSetProbabilityScale);// 0x3314b2d80041
	void InitRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x3313b2d80041
	void InitRecoilCOPMap(out const FString[] Keys, out const float[] Values);// 0x3312b2d80041
	void InitPostFireSpreadCurveStruct(FString Path);// 0x3311b2d80041
	void InitHorizontalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x3310b2d80041
	void InitBaseData(int Trigger);// 0x330fb2d80041

--------------------------------
Class: FireChargeData
	bool IfContinuousCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ChargeTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ChargeDamageRadiusCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* ChargeDamageMagnificationCurve;//[Offset: 0x10, Size: 0x8]
	bool IfPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	AmmoConfig* OverrideAmmo;//[Offset: 0x20, Size: 0x8]
	int OverrideAmmoID;//[Offset: 0x28, Size: 0x4]
	FString ChargeSoundName;//[Offset: 0x30, Size: 0x10]
	FString ChargeSoundEnemyName;//[Offset: 0x40, Size: 0x10]
	FString FireSoundName;//[Offset: 0x50, Size: 0x10]
	FString FireSoundEnemyName;//[Offset: 0x60, Size: 0x10]
	bool IfBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* BulletBurstCountCurve;//[Offset: 0x78, Size: 0x8]
	bool IfCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x84, Size: 0x4]
	bool IfForceFullShotCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bNeedPlayCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	CurveFloat* AmmoSpeedScaleCurve;//[Offset: 0x90, Size: 0x8]
	CurveFloat* AmmoEffectScaleCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* OverloadCurve;//[Offset: 0xa0, Size: 0x8]
	float ChargeAnimationRate;//[Offset: 0xa8, Size: 0x4]
	CurveFloat* DeflectionAngleCurve;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: TracerBulletData
	float DeflectionAnglePerSec;//[Offset: 0x0, Size: 0x4]
	float MaximumDetectionAngle;//[Offset: 0x4, Size: 0x4]
	float HomingRange;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AmmonVerticalRecoilStruct.AmmonRecoilStruct
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AmmonRecoilStruct
	float CostTime;//[Offset: 0x0, Size: 0x4]
	CurveFloat* RecoilRangeCurve;//[Offset: 0x8, Size: 0x8]
	int APointCurveKeyIndex;//[Offset: 0x10, Size: 0x4]
	float APointMin;//[Offset: 0x14, Size: 0x4]
	float APointMax;//[Offset: 0x18, Size: 0x4]
	int BPointCurveKeyIndex;//[Offset: 0x1c, Size: 0x4]
	float BPointMin;//[Offset: 0x20, Size: 0x4]
	float BPointMax;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AmmonHorizontalRecoilStruct.AmmonRecoilStruct
	CurveVector* ContinuousFireInfoCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AmmonRecoilRollStruct.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	float ADSRollCOP;//[Offset: 0x30, Size: 0x4]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AmmonRecoilScope
	bool EnableScopeVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool EnableCrossHairVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool EnableScopeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x4, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x8, Size: 0x4]
	CurveFloat* ScopeVSingleOffSetCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ScopeVContinuousOffSetCurve;//[Offset: 0x18, Size: 0x8]
	float ScopeVContinuousFallingDuration;//[Offset: 0x20, Size: 0x4]
	CurveFloat* ScopeVContinuousFallingCurve;//[Offset: 0x28, Size: 0x8]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x30, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x34, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x38, Size: 0x4]
	CurveFloat* ScopeHSingleOffSetCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* ScopeHContinuousOffSetCurve;//[Offset: 0x48, Size: 0x8]
	CurveFloat* ScopeHOffSetProbabilityCurve;//[Offset: 0x50, Size: 0x8]
	AmmonRecoilCrossHair CrossHairScaleSettings;//[Offset: 0x58, Size: 0x24]
	AmmonRecoilScopeRoll ScopeRollSettings;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: AmmonRecoilCrossHair
	float VMaxDistanceOffSetScale;//[Offset: 0x0, Size: 0x4]
	float VVibrationDurationScale;//[Offset: 0x4, Size: 0x4]
	float VSingleOffSetScale;//[Offset: 0x8, Size: 0x4]
	float VContinuousOffSetScale;//[Offset: 0xc, Size: 0x4]
	float HMaxDistanceOffSetScale;//[Offset: 0x10, Size: 0x4]
	float HVibrationDurationScale;//[Offset: 0x14, Size: 0x4]
	float HSingleOffSetScale;//[Offset: 0x18, Size: 0x4]
	float HContinuousOffSetScale;//[Offset: 0x1c, Size: 0x4]
	float HOffSetProbabilityScale;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AmmonRecoilScopeRoll.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf8, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfc, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfd, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfd, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x100, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x110, Size: 0x4]
	float Buoyancy;//[Offset: 0x114, Size: 0x4]
	float Bounciness;//[Offset: 0x118, Size: 0x4]
	float Friction;//[Offset: 0x11c, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x124, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x128, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x138, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x158, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x160, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x164, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x168, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x16c, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0xee2b2d80041
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xee1b2d80041
	void SetInterpolatedComponent(SceneComponent* Component);// 0xee0b2d80041
	void ResetInterpolation();// 0xedfb2d80041
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xedeb2d80041
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xeddb2d80041
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xedcb2d80041
	Vector LimitVelocity(Vector NewVelocity);// 0xedbb2d80041
	bool IsVelocityUnderSimulationThreshold();// 0xedab2d80041
	bool IsInterpolationComplete();// 0xed9b2d80041

--------------------------------
Class: SolarSplineMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnSolarSplineMovementComponentStop;//[Offset: 0xf8, Size: 0x10]
	SplineComponent* SplineComponent;//[Offset: 0x108, Size: 0x8]
	float SplineDistance;//[Offset: 0x110, Size: 0x4]
	SolarProjBullet* SolarProjBullet;//[Offset: 0x114, Size: 0x8]
	Vector LastLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator VelocityRotator;//[Offset: 0x128, Size: 0xc]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x4b8, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x520, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x538, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x550, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x568, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x584, Size: 0x4]
	float Duration;//[Offset: 0x588, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58e, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58f, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x592, Size: 0x1]
	float LoopPosition;//[Offset: 0x594, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x598, Size: 0xc]
	void UpdateSpline();// 0x2f2db2d80041
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x2f2cb2d80041
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x2f2bb2d80041
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x2f2ab2d80041
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x2f29b2d80041
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x2f28b2d80041
	void SetSplineWorldPoints(out const Vector[] Points);// 0x2f27b2d80041
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x2f26b2d80041
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x2f25b2d80041
	void SetSplineLocalPoints(out const Vector[] Points);// 0x2f24b2d80041
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x2f23b2d80041
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x2f22b2d80041
	void SetDrawDebug(bool bShow);// 0x2f21b2d80041
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x2f20b2d80041
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x2f1fb2d80041
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x2f1eb2d80041
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x2f1db2d80041
	bool IsClosedLoop();// 0x2f1cb2d80041
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x2f1bb2d80041
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x2f1ab2d80041
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x2f19b2d80041
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x2f18b2d80041
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x2f17b2d80041
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x2f16b2d80041
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x2f15b2d80041
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x2f14b2d80041
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x2f13b2d80041
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x2f12b2d80041
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2f11b2d80041
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2f10b2d80041
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x2f0fb2d80041
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2f0eb2d80041
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x2f0db2d80041
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x2f0cb2d80041
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x2f0bb2d80041
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x2f0ab2d80041
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2f09b2d80041
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2f08b2d80041
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x2f07b2d80041
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2f06b2d80041
	byte GetSplinePointType(int PointIndex);// 0x2f05b2d80041
	float GetSplineLength();// 0x2f04b2d80041
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x2f03b2d80041
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x2f02b2d80041
	Vector GetScaleAtSplineInputKey(float InKey);// 0x2f01b2d80041
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x2f00b2d80041
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2effb2d80041
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2efeb2d80041
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x2efdb2d80041
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2efcb2d80041
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2efbb2d80041
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2efab2d80041
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x2ef9b2d80041
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2ef8b2d80041
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2ef7b2d80041
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ef6b2d80041
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x2ef5b2d80041
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2ef4b2d80041
	int GetNumberOfSplineSegments();// 0x2ef3b2d80041
	int GetNumberOfSplinePoints();// 0x2ef2b2d80041
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2ef1b2d80041
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ef0b2d80041
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x2eefb2d80041
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2eeeb2d80041
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x2eedb2d80041
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x2eecb2d80041
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2eebb2d80041
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x2eeab2d80041
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x2ee9b2d80041
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x2ee8b2d80041
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x2ee7b2d80041
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2ee6b2d80041
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ee5b2d80041
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x2ee4b2d80041
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2ee3b2d80041
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x2ee2b2d80041
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ee1b2d80041
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ee0b2d80041
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x2edfb2d80041
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2edeb2d80041
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x2eddb2d80041
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2edcb2d80041
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2edbb2d80041
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2edab2d80041
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ed9b2d80041
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x2ed8b2d80041
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ed7b2d80041
	void ClearSplinePoints(bool bUpdateSpline);// 0x2ed6b2d80041
	void AddSplineWorldPoint(out const Vector Position);// 0x2ed5b2d80041
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x2ed4b2d80041
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x2ed3b2d80041
	void AddSplineLocalPoint(out const Vector Position);// 0x2ed2b2d80041
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x2ed1b2d80041
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x2ed0b2d80041

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SolarWeaponFireStateMachine.SolarWeaponStateMachine.Object
	bool bTryGotoOverloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bTryGotoIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	bool bTryGotoBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool bTryGotoFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	bool bTryGotoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]
	bool bTryGotoBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 0x1]
	bool bTryGotoGatlingRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool ToReload(SolarWeaponState* CurState);// 0x45dfb2d80041
	bool ToOverloading(SolarWeaponState* CurState);// 0x45deb2d80041
	bool ToIdle(SolarWeaponState* CurState);// 0x45ddb2d80041
	bool ToGatlingRoll(SolarWeaponState* CurState);// 0x45dcb2d80041
	bool ToFiring(SolarWeaponState* CurState);// 0x45dbb2d80041
	bool ToBurst(SolarWeaponState* CurState);// 0x45dab2d80041
	bool ToBolt(SolarWeaponState* CurState);// 0x45d9b2d80041

--------------------------------
Class: SolarWeaponStateMachine.Object
	SolarWeaponState* CurrentState;//[Offset: 0x60, Size: 0x8]
	class SolarWeaponState* StartStateSubClass;//[Offset: 0x68, Size: 0x8]
	class SolarWeaponState* CurStateSubClass;//[Offset: 0x70, Size: 0x8]
	WeaponStateFlowItem[] FlowData;//[Offset: 0x78, Size: 0x10]
	<class SolarWeaponState,SolarWeaponState*> StateMap;//[Offset: 0x88, Size: 0x50]
	WeaponStateMapItem[] StateFlowMap;//[Offset: 0xd8, Size: 0x10]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	void Update(float DeltaTime);// 0x45d8b2d80041
	void Start();// 0x45d7b2d80041
	void Resume();// 0x45d6b2d80041
	void Reset(bool bAutoStart);// 0x45d5b2d80041
	void Pause();// 0x45d4b2d80041
	void LogStartMsg(SolarWeaponState* State);// 0x45d3b2d80041
	void LogEndMsg(SolarWeaponState* Last);// 0x45d2b2d80041
	void LogChangeMsg(SolarWeaponState* From, SolarWeaponState* To);// 0x45d1b2d80041
	bool IsRunning();// 0x45d0b2d80041
	bool IsPause();// 0x45cfb2d80041
	void GotoState(out const class SolarWeaponState InWeaponState);// 0x45ceb2d80041
	void GotoNext();// 0x45cdb2d80041
	SolarWeaponState* GetStateInstance(out const class SolarWeaponState StateSubClass);// 0x45ccb2d80041
	bool GetNextState(out class SolarWeaponState Next);// 0x45cbb2d80041
	bool CheckCurStateToNextState(out const WeaponStateFlowItem StateFlowItem);// 0x45cab2d80041
	bool CheckConditionNative(out const FName ConditionFunc);// 0x45c9b2d80041

--------------------------------
Class: SolarWeaponState.Object
	SolarWeaponState* NextState;//[Offset: 0x28, Size: 0x8]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SolarWeaponStateMachine* OwnerStateMachine;//[Offset: 0x38, Size: 0x8]
	void UpdateState(float DeltaTime);// 0x45beb2d80041
	bool IsRunning();// 0x45bdb2d80041
	void GotoNext();// 0x45bcb2d80041
	void EnterState(SolarWeaponState* InPrevState);// 0x45bbb2d80041
	void EndState(SolarWeaponState* InNextState);// 0x45bab2d80041

--------------------------------
Class: WeaponStateFlowItem
	class SolarWeaponState* Current;//[Offset: 0x0, Size: 0x8]
	class SolarWeaponState* Next;//[Offset: 0x8, Size: 0x8]
	byte Weight;//[Offset: 0x10, Size: 0x1]
	bool bBpFuncCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	FName ConditonFunc;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: WeaponStateMapItem
	class SolarWeaponState* Current;//[Offset: 0x0, Size: 0x8]
	WeaponStateFlowItem[] NextList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarWeaponSkillStateMachine.SolarWeaponStateMachine.Object
	bool IsTriggerSkillSuccessed(SolarWeaponState* CurState);// 0x45fcb2d80041
	bool IsTriggerSkillFailed(SolarWeaponState* CurState);// 0x45fbb2d80041

--------------------------------
Class: ImpactDisplayInfo
	Vector Pos;//[Offset: 0x0, Size: 0xc]
	float Scale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WeaponDebugFlag
	bool bIgnoreOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStateMachineDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShotGunDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bInstantShotDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bDisplayShootDirectionDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bRecoilDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: SolarVirtualBulletCollector.ActorComponent.Object
	SolarWeapon* CacheWeapon;//[Offset: 0xb8, Size: 0x8]
	World* CacheWorld;//[Offset: 0xc0, Size: 0x8]
	SolarVirtualBullet[] Bullets;//[Offset: 0xc8, Size: 0x10]
	SolarVirtualBullet[] BulletsInSimulated;//[Offset: 0xd8, Size: 0x10]
	SolarBullet* EffectBulletCDO;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: SolarVirtualBullet
	ParticleSystemComponent* BulletEffect;//[Offset: 0x8, Size: 0x8]
	ParticleSystemComponent* TrajectoryEffect;//[Offset: 0x10, Size: 0x8]
	ParticleSystemComponent* TrajectoryBeamEffect;//[Offset: 0x18, Size: 0x8]
	SolarVirtualBulletAKComponent* AkComponent;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SolarVirtualBulletAKComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponSkinData.DataAsset.Object
	enum WeaponSkinType;//[Offset: 0x30, Size: 0x1]
	WeaponBodyData WeaponData;//[Offset: 0x38, Size: 0xf0]
	WeaponSkinPartData[] WeaponBarMap;//[Offset: 0x128, Size: 0x10]
	WeaponSkinPartData[] WeaponClipMap;//[Offset: 0x138, Size: 0x10]
	WeaponSkinPartData[] WeaponGripMap;//[Offset: 0x148, Size: 0x10]
	bool bUseGripIkSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	WeaponSkinPartData[] WeaponScopeMap;//[Offset: 0x160, Size: 0x10]
	<int,Transform> ScopeOffsetMap;//[Offset: 0x170, Size: 0x50]
	WeaponSkinPartData[] WeaponStockMap;//[Offset: 0x1c0, Size: 0x10]
	class SolarBullet* DedicatedBulletEffect;//[Offset: 0x1d0, Size: 0x8]
	class SolarBullet* DedicatedSkillEffect;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath DedicatedBulletEffectPath;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath DedicatedSkillEffectPath;//[Offset: 0x1f8, Size: 0x18]
	ParticleSystem* DedicatedKillEffect;//[Offset: 0x210, Size: 0x8]
	SoftObjectPath DedicatedKillEffectPath;//[Offset: 0x218, Size: 0x18]
	SoftObjectPath DedicatedSpecialEffectPath;//[Offset: 0x230, Size: 0x18]
	void ModifyResPath();// 0x4745b2d80041
	bool IsMeshReplace();// 0x4744b2d80041
	bool GetPartDataArrayByType(enum PartType, out WeaponSkinPartData[] PartDataMap);// 0x4743b2d80041

--------------------------------
Class: WeaponBodyData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	FString WeaponDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath WeaponMesh;//[Offset: 0x18, Size: 0x18]
	class WeaponAnimInstance* WeaponAnimBP;//[Offset: 0x30, Size: 0x8]
	<enum,SoftObjectPath> OverrideCharacterMontagePathMap;//[Offset: 0x38, Size: 0x50]
	SoftObjectPath LodpMesh;//[Offset: 0x88, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0xa0, Size: 0x10]
	Vector MeshExtraFPPLocation;//[Offset: 0xb0, Size: 0xc]
	Vector NoMeshExtraFPPLocation;//[Offset: 0xbc, Size: 0xc]
	Rotator MeshExtraFPPRotation;//[Offset: 0xc8, Size: 0xc]
	Rotator NoMeshExtraFPPRotation;//[Offset: 0xd4, Size: 0xc]
	WeaponSkinExtraPS[] SkinPSArray;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: WeaponAnimInstance.AnimInstance.Object
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool bBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	AnimMsgData[] MsgArray;//[Offset: 0x270, Size: 0x10]
	AnimMsgData CurrentMsg;//[Offset: 0x280, Size: 0x8]
	bool bCurrentMsgUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	AnimSequence* IdleAnim;//[Offset: 0x290, Size: 0x8]
	AnimSequence* FireAnim;//[Offset: 0x298, Size: 0x8]
	AnimSequence* AltFireAnim;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* ReloadAnim;//[Offset: 0x2a8, Size: 0x8]
	AnimSequence* OverloadAnim;//[Offset: 0x2b0, Size: 0x8]
	AnimSequence* OpenScopeAnim;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* CloseScopeAnim;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* BoltAnim;//[Offset: 0x2c8, Size: 0x8]
	bool SwitchStateCheck(enum CheckState);// 0x465cb2d80041
	void SetInterruptIsTrue();// 0x465bb2d80041
	bool RouterNodeJudge();// 0x465ab2d80041
	void OnQuitState(enum State);// 0x4659b2d80041
	void OnEnterState(enum State);// 0x4658b2d80041
	void Interrupt();// 0x4657b2d80041
	bool HasMsg();// 0x4656b2d80041
	bool ConsumMsg();// 0x4655b2d80041
	bool AddMsg(enum State, float Speed);// 0x4654b2d80041

--------------------------------
Class: AnimMsgData
	enum State;//[Offset: 0x0, Size: 0x1]
	float Speed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponSkinExtraPS
	bool bStimulatedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName Socket;//[Offset: 0x4, Size: 0x8]
	ParticleSystem* PS;//[Offset: 0x10, Size: 0x8]
	SoftObjectPath PSPath;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: WeaponSkinPartData
	int WeaponPartId;//[Offset: 0x0, Size: 0x4]
	FString WeaponPartDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath PartDataAsset;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WeaponAnimationComponent.ActorComponent.Object
	WeaponAnimInstance* WeaponAnimInstance;//[Offset: 0xb8, Size: 0x8]
	SolarWeapon* MyWeapon;//[Offset: 0xc0, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0xc8, Size: 0x8]
	<enum,AnimSequence*> AnimSequenceMap;//[Offset: 0xd0, Size: 0x50]
	void SRecieveProto_SwitchStateAction(FString paramters);// 0x4653b2d80041
	void SetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x4652b2d80041
	void PostWeaponAnimStateToSimulation(enum InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);// 0x4651b2d80041
	void InternalSetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x4650b2d80041
	void InitSkeletaMesh(SkeletalMeshComponent* Mesh);// 0x464fb2d80041
	void GotoState(enum State, float Interval);// 0x464eb2d80041
	void CRecieveProto_SwitchStateAction(bool bAutonomous, FString paramters);// 0x464db2d80041

--------------------------------
Class: WeaponNetComponent.BaseWeaponComponent.ActorComponent.Object
	WeaponSkinNetData SkinData;//[Offset: 0x238, Size: 0x4]
	WeaponUpgradeNetData UpgradeData;//[Offset: 0x240, Size: 0x20]
	WeaponPartsNetData PartsData;//[Offset: 0x260, Size: 0x58]
	bool bSkinModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	bool bUpgradeModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	bool bPartsModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1]
	WeaponLevelUpInfo LevelData;//[Offset: 0x2bc, Size: 0x8]
	int PartsInitCount;//[Offset: 0x2c4, Size: 0x4]
	void OnRep_UpgradeData();// 0x474ab2d80041
	void OnRep_SkinData();// 0x4749b2d80041
	void OnRep_PartsInitCount();// 0x4748b2d80041
	void OnRep_PartsData();// 0x4747b2d80041
	void OnRep_Level();// 0x4746b2d80041

--------------------------------
Class: BaseWeaponComponent.ActorComponent.Object
	Guid SpawnedGuid;//[Offset: 0xf8, Size: 0x10]
	ProtoBody[] ServerToClientReqArray;//[Offset: 0x208, Size: 0x10]
	uint32 ServerToClientReqArrayMinSize;//[Offset: 0x218, Size: 0x4]
	int TempProto;//[Offset: 0x21c, Size: 0x4]
	FString[] ParamsArray;//[Offset: 0x220, Size: 0x10]
	bool bLastFrameClientLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	void TryRecordClientID();// 0x334bb2d80041
	void StartSendServerProto(byte proto);// 0x334ab2d80041
	void StartSendClientProto(byte proto);// 0x3349b2d80041
	void SendServerProto(byte proto, FString Param);// 0x3348b2d80041
	void SendClientProto(byte Type, byte proto, FString Parameter, bool bVerify);// 0x3347b2d80041
	FString ParseArrayParamsToString();// 0x3346b2d80041
	void OnClientRoleChanged(bool LocalPlayer);// 0x3345b2d80041
	void OnClientIDHasRegisted();// 0x3344b2d80041
	void EndSendServerProto();// 0x3343b2d80041
	void EndSendClientProto(byte Type, bool bVerify);// 0x3342b2d80041
	void BindServerEvents();// 0x3341b2d80041
	void BindClientEvents();// 0x3340b2d80041
	void AppendProtoParam(FString strValue);// 0x333fb2d80041

--------------------------------
Class: ProtoBody
	byte ProtoID;//[Offset: 0x0, Size: 0x1]
	uint32 ReplicationIndex;//[Offset: 0x4, Size: 0x4]
	FString Params;//[Offset: 0x8, Size: 0x10]
	bool bVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	byte ClientType;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: WeaponSkinNetData
	int SkinId;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeaponUpgradeNetData
	float TotalScore;//[Offset: 0x0, Size: 0x4]
	float LevelScore;//[Offset: 0x4, Size: 0x4]
	UpgradeSlotStruct[] UpgradeSlots;//[Offset: 0x8, Size: 0x10]
	int UpgradeCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: UpgradeSlotStruct
	int SlotID;//[Offset: 0x0, Size: 0x4]
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AccessoryType;//[Offset: 0x5, Size: 0x1]
	int AccessoryID;//[Offset: 0x8, Size: 0x4]
	SlateBrush IconOverride;//[Offset: 0x10, Size: 0x98]
	LinearColor IconColorOverride;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: WeaponPartsNetData
	WeaponPartsData Data;//[Offset: 0x0, Size: 0x28]
	float[] EffectDataHipValues;//[Offset: 0x28, Size: 0x10]
	float[] EffectDataShoulderValues;//[Offset: 0x38, Size: 0x10]
	int ChangedPartType;//[Offset: 0x48, Size: 0x4]
	int ChangedPartID;//[Offset: 0x4c, Size: 0x4]
	int OriginalPartID;//[Offset: 0x50, Size: 0x4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: WeaponPartsData
	int ScopeID;//[Offset: 0x0, Size: 0x4]
	int GripID;//[Offset: 0x4, Size: 0x4]
	int GunStockID;//[Offset: 0x8, Size: 0x4]
	int MuzzleID;//[Offset: 0xc, Size: 0x4]
	int ClipID;//[Offset: 0x10, Size: 0x4]
	int[] Runes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WeaponLevelUpInfo
	int Level;//[Offset: 0x0, Size: 0x4]
	int LastLevel;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponUpgradeComponent.ActorComponent.Object
	bool bUpgradeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	float UpgradeCD;//[Offset: 0xec, Size: 0x4]
	float LastUpgradeRealtime;//[Offset: 0xf0, Size: 0x4]
	SolarWeapon* MyWeapon;//[Offset: 0xf8, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x100, Size: 0x8]
	int CurrentLevel;//[Offset: 0x108, Size: 0x4]
	int LastLevel;//[Offset: 0x10c, Size: 0x4]
	int LastUnlockSlotID;//[Offset: 0x110, Size: 0x4]
	void SetWeaponLevel(int InWeaponLevel);// 0x483fb2d80041
	void SetUpgradeSwitch(const bool Enable);// 0x483eb2d80041
	void ServerReceiveAddScoreAction(FString Param);// 0x483db2d80041
	void ReplaceUpgradeRoute(out const UpgradeSlotStruct[] replaceSlots);// 0x483cb2d80041
	bool IsOwnUpgradeRoute(UpgradeSlotStruct[] Slots);// 0x483bb2d80041
	void InitUpgradeData(out const UpgradeSlotStruct[] upgradeDatas);// 0x483ab2d80041
	WeaponUpgradeNetData GetUpgradeNetData();// 0x4839b2d80041
	bool GetUpgradeDataByLevel(int Level, out UpgradeSlotStruct UpgradeData);// 0x4838b2d80041
	UpgradeSlotStruct[] GetSlotArray();// 0x4837b2d80041
	float GetScoreByLevel(int Level);// 0x4836b2d80041
	int GetNextLevelNeedScore();// 0x4835b2d80041
	int GetLastUnlockSlot();// 0x4834b2d80041
	int GetLastLevel();// 0x4833b2d80041
	void GetDefaultAccessoriesID(out int[] DefaultAccessories);// 0x4832b2d80041
	int GetCurrentScore();// 0x4831b2d80041
	int GetCurrentLevelScore();// 0x4830b2d80041
	int GetCurrentLevel();// 0x482fb2d80041
	void ClientReceiveReplaceUpgradeRouteAction(bool bAutonomous, FString Param);// 0x482eb2d80041
	void ClientReceiveLevelUpAction(bool bAutonomous, FString Param);// 0x482db2d80041
	void ClientReceiveExpRefreshAction(bool bAutonomous, FString Param);// 0x482cb2d80041
	int CalculateLevelByTotalExp(const int TotalExp);// 0x482bb2d80041
	void AddExp(bool bClient, float Exp, int Reason);// 0x482ab2d80041

--------------------------------
Class: SingleWeaponConfig.DataAsset.Object
	enum WeaponBrand;//[Offset: 0x30, Size: 0x1]
	enum WeaponType;//[Offset: 0x31, Size: 0x1]
	bool bSupportSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	<FString,float> CharacterStateWeightMap;//[Offset: 0x38, Size: 0x50]
	float Weight;//[Offset: 0x88, Size: 0x4]
	FName[] MultiMuzzleSocketNames;//[Offset: 0x90, Size: 0x10]
	FName[] MultiBulletSocketNames;//[Offset: 0xa0, Size: 0x10]
	FName[] MultiCastShellSocketNames;//[Offset: 0xb0, Size: 0x10]
	FName[] MultiCastShellOnScopeSocketNames;//[Offset: 0xc0, Size: 0x10]
	float MaxSpread;//[Offset: 0xd0, Size: 0x4]
	float MinSpread;//[Offset: 0xd4, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0xd8, Size: 0x4]
	float ShoulderFireBaseSpread;//[Offset: 0xdc, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0xe0, Size: 0x4]
	<FString,float> SpreadCOPMap;//[Offset: 0xe8, Size: 0x50]
	float SpreadStatuSpeed;//[Offset: 0x138, Size: 0x4]
	<FString,float> SpreadStatuIncreaseCoefficient;//[Offset: 0x140, Size: 0x50]
	<FString,float> SpreadStatuReduceCoefficient;//[Offset: 0x190, Size: 0x50]
	AmmoConfig* PrimaryAmmo;//[Offset: 0x1e0, Size: 0x8]
	int PrimaryAmmoIndex;//[Offset: 0x1e8, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x1ec, Size: 0x4]
	AmmoConfig* SecondaryAmmo;//[Offset: 0x1f0, Size: 0x8]
	int SecondaryAmmoIndex;//[Offset: 0x1f8, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x1fc, Size: 0x4]
	AmmoConfig* UpgradedSecAmmo;//[Offset: 0x200, Size: 0x8]
	LinearColor UpgradedSecAmmoColor;//[Offset: 0x208, Size: 0x10]
	bool bNeedOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x21c, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x220, Size: 0x4]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x228, Size: 0x8]
	float OverloadCoolingPeriod;//[Offset: 0x230, Size: 0x4]
	CurveFloat* OverloadReduceRateCurve;//[Offset: 0x238, Size: 0x8]
	float OverloadWarningRate;//[Offset: 0x240, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x244, Size: 0x4]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0x24c, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0x250, Size: 0x4]
	float AutoFireCompensationRate;//[Offset: 0x254, Size: 0x4]
	bool bCanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bCanAimAssistOpenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	SolarAssistAimDesc HipAutoAimConfig;//[Offset: 0x260, Size: 0x28]
	SolarAssistAimDesc ShoulderAutoAimConfig;//[Offset: 0x288, Size: 0x28]
	SolarAssistAimDesc OpenScopeAssitAimConfig;//[Offset: 0x2b0, Size: 0x28]
	float AssistAimApproachVehicleRate;//[Offset: 0x2d8, Size: 0x4]
	bool bOneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	float ScopeOpenTime;//[Offset: 0x2e0, Size: 0x4]
	float ScopeOpenFOVTimeScale;//[Offset: 0x2e4, Size: 0x4]
	enum[] SupportChangeTypeArray;//[Offset: 0x2e8, Size: 0x10]
	int[] DefaultPartsArray;//[Offset: 0x2f8, Size: 0x10]
	float RecoilFireTimeWithScope;//[Offset: 0x308, Size: 0x4]
	float RecoilRecoverTimeWithScope;//[Offset: 0x30c, Size: 0x4]
	float RecoilMagnitudeWithScope;//[Offset: 0x310, Size: 0x4]
	CurveFloat* RecoilCurveWithScope;//[Offset: 0x318, Size: 0x8]
	int RecoilSkipSequenceSumWithScope;//[Offset: 0x320, Size: 0x4]
	Vector2D[] RecoilCurveSequenceWithScope;//[Offset: 0x328, Size: 0x10]
	float RecoilFireTimeNoScope;//[Offset: 0x338, Size: 0x4]
	float RecoilRecoverTimeNoScope;//[Offset: 0x33c, Size: 0x4]
	float RecoilMagnitudeNoScope;//[Offset: 0x340, Size: 0x4]
	CurveFloat* RecoilCurveNoScope;//[Offset: 0x348, Size: 0x8]
	int RecoilSkipSequenceSumNoScope;//[Offset: 0x350, Size: 0x4]
	Vector2D[] RecoilCurveSequenceNoScope;//[Offset: 0x358, Size: 0x10]
	bool bIsGatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float GatlingRotaryAcceleration;//[Offset: 0x36c, Size: 0x4]
	float GatlingFireRotarySpeed;//[Offset: 0x370, Size: 0x4]
	float GatlingMaxRotarySpeed;//[Offset: 0x374, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x378, Size: 0x4]
	float GatlingRotaryAttenuation;//[Offset: 0x37c, Size: 0x4]
	float GatlingScatteringMagnification;//[Offset: 0x380, Size: 0x4]
	ParticleSystem* GatlingOverHeatSmokeEffect;//[Offset: 0x388, Size: 0x8]
	class GameplayAbility[] GasAbilities;//[Offset: 0x390, Size: 0x10]
	FName Socket;//[Offset: 0x3a0, Size: 0x8]
	FName LeftHandIKTargetSocket;//[Offset: 0x3a8, Size: 0x8]
	Vector LeftHandIkEffectLocation;//[Offset: 0x3b0, Size: 0xc]
	Vector LeftHandIkJointLocation;//[Offset: 0x3bc, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdle;//[Offset: 0x3c8, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdleWhenCrouch;//[Offset: 0x3d4, Size: 0xc]
	Vector RightHandIkEffectLocation;//[Offset: 0x3e0, Size: 0xc]
	Vector RightHandIkJointLocation;//[Offset: 0x3ec, Size: 0xc]
	LeftHandGripConfig LeftHandGripRotationConfig;//[Offset: 0x3f8, Size: 0x84]
	LeftHandGripConfig LeftHandGripRotationConfigForGunIdle;//[Offset: 0x47c, Size: 0x84]
	bool bShowCoolDownWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	class CrossHairWidget* CrossHair;//[Offset: 0x508, Size: 0x8]
	class FeedbackWidget* FeedbackWidget;//[Offset: 0x510, Size: 0x8]
	SoftObjectPath WeaponIcon;//[Offset: 0x518, Size: 0x18]
	SlateBrush PrimaryFireBrush;//[Offset: 0x530, Size: 0x98]
	SlateBrush SecondaryFireBrush;//[Offset: 0x5c8, Size: 0x98]
	FString WeaponTextType;//[Offset: 0x660, Size: 0x10]
	SoftObjectPath ItemIcon;//[Offset: 0x670, Size: 0x18]
	SoftObjectPath UpgradeParticleSystem;//[Offset: 0x688, Size: 0x18]
	void InitSupportChangeTypeArray(int[] Data);// 0x37aeb2d80041
	void InitStatuSpreadCoefficient(out const FString[] Increasekeys, out const float[] Increasevalues, out const FString[] Reducekeys, out const float[] Reducevalues);// 0x37adb2d80041
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float statuspeed);// 0x37acb2d80041
	void InitSpreadCOPMap(out const FString[] Keys, out const float[] Values);// 0x37abb2d80041
	void InitScopeData(bool onekey, float scopetime);// 0x37aab2d80041
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);// 0x37a9b2d80041
	void InitBase(int WPType);// 0x37a8b2d80041
	void InitAutoAimConfig(int InAssistAimMode, out const float[] InApproachCheckRange, float InApproachRatio, float InApproachRatioMin, float InApproachSpeed);// 0x37a7b2d80041
	bool GetIsSupportPart(enum Type);// 0x37a6b2d80041

--------------------------------
Class: SolarAssistAimDesc
	Vector2D AimAssistApproachRange;//[Offset: 0x0, Size: 0x8]
	float AimAssistStepRatio;//[Offset: 0x8, Size: 0x4]
	float MinAssistStepRatio;//[Offset: 0xc, Size: 0x4]
	float AimAssistStepSpeed;//[Offset: 0x10, Size: 0x4]
	CurveFloat* AimAssistAdsorbEnterRate;//[Offset: 0x18, Size: 0x8]
	CurveFloat* AimAssistAdsorbExitRate;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CrossHairWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum CurrentCrosshairState;//[Offset: 0x31c, Size: 0x1]
	enum LastCrosshairState;//[Offset: 0x31d, Size: 0x1]
	CrosshairCanvasPanel* RootPanel;//[Offset: 0x320, Size: 0x8]
	int MinSpread;//[Offset: 0x328, Size: 0x4]
	void OnWeaponFired();// 0x3427b2d80041
	void OnUpdateReloadProgress(float InReloadProgress, int InMaxAmmo);// 0x3426b2d80041
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire);// 0x3425b2d80041
	void OnUpdateCoolDownProgress(float InCoolDownProgress);// 0x3424b2d80041
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress, int InChargeBurstCount);// 0x3423b2d80041
	void OnUpdateAimState(bool InbLockEnemy);// 0x3422b2d80041
	void OnReloadStarted(float InReloadTime);// 0x3421b2d80041
	void OnReloadFinished(bool InbReloadSuccess, int InReloadAmmo, int InReservedAmmo, int InMaxAmmo);// 0x3420b2d80041
	void OnOverloadStateChanged(bool bEnter);// 0x341fb2d80041
	void OnAmmoChanged(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x341eb2d80041
	void HandleCrosshairState(enum InCrosshairState, bool InbQuitState);// 0x341db2d80041
	Widget* GetSpreadCanvasWidget();// 0x341cb2d80041
	UserWidget* GetReloadWidget();// 0x341bb2d80041
	UserWidget* GetOverloadWidget();// 0x341ab2d80041
	UserWidget* GetCoolDownWidget();// 0x3419b2d80041
	UserWidget* GetChargeWidget();// 0x3418b2d80041
	UserWidget* GetAmmoWidget();// 0x3417b2d80041
	Vector2D CalcDeltaScaleBySpread(const float Spread);// 0x3416b2d80041
	Vector2D CalcDeltaPosBySpread(const float Spread);// 0x3415b2d80041
	float CalcDeltaAngleBySpread(const float Spread);// 0x3414b2d80041

--------------------------------
Class: CrosshairCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<enum,StateMapItemStruct> CrosshairStateConfigList;//[Offset: 0x150, Size: 0x50]
	Widget*[] IgonreWidgetToStateMap;//[Offset: 0x1a0, Size: 0x10]
	UICrossHairSpreadStruct[] SpreadItemList;//[Offset: 0x1b0, Size: 0x10]
	UICrossHairAimColorStruct[] AimColorItemList;//[Offset: 0x1c0, Size: 0x10]
	TweenImage* ReloadingTween;//[Offset: 0x1d0, Size: 0x8]
	GaugeImage* BulletGauge;//[Offset: 0x1d8, Size: 0x8]
	TweenImage* OverloadingTween;//[Offset: 0x1e0, Size: 0x8]
	ProgressBar* OverloadBar_Normal;//[Offset: 0x1e8, Size: 0x8]
	ProgressBar* OverloadBar_Warn;//[Offset: 0x1f0, Size: 0x8]
	TweenWidget* OverloadNormalPanelTween;//[Offset: 0x1f8, Size: 0x8]
	ProgressBar*[] CoolDownBars;//[Offset: 0x200, Size: 0x10]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	int ReservedLayerSpace;//[Offset: 0x13c, Size: 0x4]
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x3413b2d80041

--------------------------------
Class: StateMapItemStruct
	StateItemStruct[] ChildWidgetConfigList;//[Offset: 0x0, Size: 0x10]
	bool bLoadChildWidgetTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: StateItemStruct
	Widget* CrosshairChildWidget;//[Offset: 0x0, Size: 0x8]
	enum VisibilityType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: UICrossHairSpreadStruct
	Widget* TargetWidget;//[Offset: 0x0, Size: 0x8]
	enum SpreadType;//[Offset: 0x8, Size: 0x1]
	float Weight;//[Offset: 0xc, Size: 0x4]
	bool bPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Angle;//[Offset: 0x14, Size: 0x4]
	bool Pos_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	Vector2D ScaleFactor;//[Offset: 0x1c, Size: 0x8]
	bool Scale_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bRenderAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	float RenderAngleFactor;//[Offset: 0x28, Size: 0x4]
	bool Angle_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Vector2D OrginalVector;//[Offset: 0x30, Size: 0x8]
	Vector2D OrginalScale;//[Offset: 0x38, Size: 0x8]
	float OrginalAngle;//[Offset: 0x40, Size: 0x4]
	Vector2D Dir;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: UICrossHairAimColorStruct
	Image* TargetImg;//[Offset: 0x0, Size: 0x8]
	LinearColor TargetColor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x128, Size: 0x98]
	delegate BrushDelegate;//[Offset: 0x1c0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1d0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1e0, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1f4, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x4a33b2d80041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4a32b2d80041
	void SetBrushTintColor(SlateColor TintColor);// 0x4a31b2d80041
	void SetBrushSize(Vector2D DesiredSize);// 0x4a30b2d80041
	void SetBrushResourceObject(Object* ResourceObject);// 0x4a2fb2d80041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x4a2eb2d80041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x4a2db2d80041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x4a2cb2d80041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x4a2bb2d80041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x4a2ab2d80041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x4a29b2d80041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x4a28b2d80041
	void SetBrush(out const SlateBrush InBrush);// 0x4a27b2d80041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x4a26b2d80041

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x98]

--------------------------------
Class: TweenImage.TweenBase.UserWidget.Widget.Visual.Object
	Image* TargetImg;//[Offset: 0x2c8, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2d0, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x310, Size: 0x40]
	ImageColorTween ColorTween;//[Offset: 0x350, Size: 0x48]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x398, Size: 0x28]
	void InitImageTween();// 0x46a2b2d80041

--------------------------------
Class: TweenBase.UserWidget.Widget.Visual.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	float Interval;//[Offset: 0x254, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bEndHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	delegate OnTweenStart;//[Offset: 0x280, Size: 0x10]
	delegate OnTweenStop;//[Offset: 0x290, Size: 0x10]
	Widget* LinkWidget;//[Offset: 0x2b0, Size: 0x8]
	float Progress;//[Offset: 0x2bc, Size: 0x4]
	void Stop();// 0x46a1b2d80041
	void Reset();// 0x46a0b2d80041
	void Play();// 0x469fb2d80041
	void InitAndPlay();// 0x469eb2d80041
	void Init();// 0x469db2d80041

--------------------------------
Class: UIScaleTween.UITweenBaseStruct
	Vector2D OriginalScale;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetScale;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: UITweenBaseStruct
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum InterpolationType;//[Offset: 0x9, Size: 0x1]
	byte EaseType;//[Offset: 0xa, Size: 0x1]
	CurveFloat* InterpolationCurve;//[Offset: 0x10, Size: 0x8]
	Widget* Widget;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: UIPositionTween.UITweenBaseStruct
	Vector2D OriginalPosition;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetPosition;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsRelativeChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ImageColorTween.UITweenBaseStruct
	LinearColor Original;//[Offset: 0x20, Size: 0x10]
	LinearColor TargetColor;//[Offset: 0x30, Size: 0x10]
	Image* Image;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: UIRenderOpacityTween.UITweenBaseStruct
	float OriginalOpacity;//[Offset: 0x20, Size: 0x4]
	float TargetOpacity;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x2c]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int ZOrder;//[Offset: 0x68, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x4a03b2d80041
	void SetSize(Vector2D InSize);// 0x4a02b2d80041
	void SetPosition(Vector2D InPosition);// 0x4a01b2d80041
	void SetOffsets(Margin InOffset);// 0x4a00b2d80041
	void SetMinimum(Vector2D InMinimumAnchors);// 0x49ffb2d80041
	void SetMaximum(Vector2D InMaximumAnchors);// 0x49feb2d80041
	void SetLayout(out const AnchorData InLayoutData);// 0x49fdb2d80041
	void SetAutoSize(bool InbAutoSize);// 0x49fcb2d80041
	void SetAnchors(Anchors InAnchors);// 0x49fbb2d80041
	void SetAlignment(Vector2D InAlignment);// 0x49fab2d80041
	int GetZOrder();// 0x49f9b2d80041
	Vector2D GetSize();// 0x49f8b2d80041
	Vector2D GetPosition();// 0x49f7b2d80041
	Margin GetOffsets();// 0x49f6b2d80041
	AnchorData GetLayout();// 0x49f5b2d80041
	bool GetAutoSize();// 0x49f4b2d80041
	Anchors GetAnchors();// 0x49f3b2d80041
	Vector2D GetAlignment();// 0x49f2b2d80041

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Vector2D Alignment;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: GaugeImage.UserWidget.Widget.Visual.Object
	enum GaugeType;//[Offset: 0x250, Size: 0x1]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	Vector2D ImageSize;//[Offset: 0x254, Size: 0x8]
	float InitialDegree;//[Offset: 0x25c, Size: 0x4]
	bool bSymmetric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	Vector2D CenterOffset;//[Offset: 0x264, Size: 0x8]
	Object* ResourceObject;//[Offset: 0x270, Size: 0x8]
	float Progress;//[Offset: 0x278, Size: 0x4]
	MaterialInterface* MaterialDegree360;//[Offset: 0x280, Size: 0x8]
	MaterialInterface* MaterialDegree180;//[Offset: 0x288, Size: 0x8]
	MaterialInterface* MaterialDegree90;//[Offset: 0x290, Size: 0x8]
	MaterialInterface* MaterialDegreeLR;//[Offset: 0x298, Size: 0x8]
	MaterialInterface* MaterialDegreeUD;//[Offset: 0x2a0, Size: 0x8]
	Image* TargetImage;//[Offset: 0x2a8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x2b0, Size: 0x8]
	void UpdateProgress(float InProgress);// 0x348bb2d80041
	void SetProgress(float InProgress);// 0x348ab2d80041
	void SetImage(Object* RO);// 0x3489b2d80041
	Image* GetInternalImage();// 0x3488b2d80041

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x128, Size: 0x1d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2f8, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x300, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x308, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x310, Size: 0x8]
	float Percent;//[Offset: 0x318, Size: 0x4]
	byte BarFillType;//[Offset: 0x31c, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x320, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x328, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x338, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x348, Size: 0x10]
	void SetPercent(float InPercent);// 0x4a50b2d80041
	void SetIsMarquee(bool InbIsMarquee);// 0x4a4fb2d80041
	void SetFillColorAndOpacity(LinearColor InColor);// 0x4a4eb2d80041

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush FillImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush MarqueeImage;//[Offset: 0x138, Size: 0x98]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: TweenWidget.TweenBase.UserWidget.Widget.Visual.Object
	Widget* TargetWidget;//[Offset: 0x2c8, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2d0, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x310, Size: 0x40]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x350, Size: 0x28]

--------------------------------
Class: FeedbackWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	FeedbackCanvasPanel* RootPanel;//[Offset: 0x318, Size: 0x8]

--------------------------------
Class: FeedbackCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<FString,FeedbackSingleData> FeedbackMap;//[Offset: 0x150, Size: 0x50]
	<int,FString> FeedbackValueNameMap;//[Offset: 0x1a0, Size: 0x50]

--------------------------------
Class: FeedbackSingleData
	FString NameString;//[Offset: 0x0, Size: 0x10]
	bool bUseAmination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	TweenImage* Tween;//[Offset: 0x18, Size: 0x8]
	SolarUserWidget* AnimationWidget;//[Offset: 0x20, Size: 0x8]
	FName AnimationName;//[Offset: 0x28, Size: 0x8]
	float AnimationPlaySpeed;//[Offset: 0x30, Size: 0x4]
	float AnimationStartTime;//[Offset: 0x34, Size: 0x4]
	float AnimationAgainStartTime;//[Offset: 0x38, Size: 0x4]
	int AnimationLoopNumber;//[Offset: 0x3c, Size: 0x4]
	FName AudioName;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: PlayerWeaponSpreadComponent.WeaponSpreadComponent.ActorComponent.Object

--------------------------------
Class: WeaponSpreadComponent.ActorComponent.Object
	SolarWeapon* MyWeaponActor;//[Offset: 0xb8, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xc0, Size: 0x8]
	GlobalWeaponConfig* GlobalWeaponConfig;//[Offset: 0xc8, Size: 0x8]
	float CurrentSpread;//[Offset: 0xd0, Size: 0x4]
	float SpreadRatio;//[Offset: 0xd4, Size: 0x4]
	SolarGameInstanceBase* GameInstance;//[Offset: 0x120, Size: 0x8]
	bool IsSpreadInitialized();// 0x3646b2d80041
	float GetSpread();// 0x3645b2d80041
	void Fire(bool hipfire, bool primary);// 0x3644b2d80041

--------------------------------
Class: GlobalWeaponConfig.SolarDataAsset.DataAsset.Object
	Vector2D StandardViewportSize;//[Offset: 0x38, Size: 0x8]
	float StandardDPIScale;//[Offset: 0x40, Size: 0x4]
	DataTable* WeaponNoticeTable;//[Offset: 0x48, Size: 0x8]
	DataTable* WeaponSkillTable;//[Offset: 0x50, Size: 0x8]
	DataTable* WeaponScopeSensitivityTable;//[Offset: 0x58, Size: 0x8]
	bool bSecondLimitFullForGameDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float QuitBattleUpgradeTriggerTime;//[Offset: 0x64, Size: 0x4]
	float BattleUpgradeCD;//[Offset: 0x68, Size: 0x4]
	float OpenScopeWaitTimeForPC;//[Offset: 0x6c, Size: 0x4]
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* WeaponCrosshairSpreadSpeedCurve;//[Offset: 0x78, Size: 0x8]
	CurveFloat* WeaponCrosshairBackSpeedCurve;//[Offset: 0x80, Size: 0x8]
	float WeaponSkillDataUIDisplayDistance;//[Offset: 0x88, Size: 0x4]
	float PriamayFireIgnoreInterval;//[Offset: 0x8c, Size: 0x4]
	float AssistAimAutoFireRadius;//[Offset: 0x90, Size: 0x4]
	Vector2D AssistAimRangeMaxRate;//[Offset: 0x94, Size: 0x8]
	Vector2D AssistAimRangeMinRate;//[Offset: 0x9c, Size: 0x8]
	float EnableAssistAimDistanceMin;//[Offset: 0xa4, Size: 0x4]
	FName[] AssistAimApproachSockets;//[Offset: 0xa8, Size: 0x10]
	float AssistAimApproachSpeedRate;//[Offset: 0xb8, Size: 0x4]
	Vector2D AssistAimAdsorbRange;//[Offset: 0xbc, Size: 0x8]
	CurveFloat* AssistAimAdsorbEnterRate;//[Offset: 0xc8, Size: 0x8]
	CurveFloat* AssistAimAdsorbExitRate;//[Offset: 0xd0, Size: 0x8]
	FName[] AssistAimAdsorbSockets;//[Offset: 0xd8, Size: 0x10]
	bool bEnableAssistAimAdsorbSlowDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	SoftObjectPath PartUpgradeMaterial;//[Offset: 0xf0, Size: 0x18]
	float PartUpgradeFadeInterval;//[Offset: 0x108, Size: 0x4]
	<enum,FString> CharaterPostureMap;//[Offset: 0x110, Size: 0x50]
	CurveFloat* HitEffectScaleCurve;//[Offset: 0x160, Size: 0x8]
	GameplayTagContainer BlockCharacterSprintTags;//[Offset: 0x168, Size: 0x20]
	FString GetStateByPosture(enum posture);// 0x348fb2d80041
	FString GetStateByAnimState(enum CharacterState);// 0x348eb2d80041
	bool GetIsGroundByAnimState(enum CharacterState);// 0x348db2d80041

--------------------------------
Class: SolarDataAsset.DataAsset.Object
	void InitFromAsset();// 0x348cb2d80041

--------------------------------
Class: SolarGameInstanceBase.GameInstance.Object
	SoftObjectPath LoginMap;//[Offset: 0x1a0, Size: 0x18]
	SoftObjectPath LobbyMap;//[Offset: 0x1b8, Size: 0x18]
	SoftObjectPath EntryMap;//[Offset: 0x1d0, Size: 0x18]
	SoftObjectPath GameMap;//[Offset: 0x1e8, Size: 0x18]
	SoftObjectPath SettlementMap;//[Offset: 0x200, Size: 0x18]
	SoftObjectPath ConfigServerMap;//[Offset: 0x218, Size: 0x18]
	FString ConfigBattleAddr;//[Offset: 0x230, Size: 0x10]
	int ConfigBattlePort;//[Offset: 0x240, Size: 0x4]
	FString ConfigBackendAddr;//[Offset: 0x248, Size: 0x10]
	int ConfigBackendPort;//[Offset: 0x258, Size: 0x4]
	int BuildNumber;//[Offset: 0x25c, Size: 0x4]
	class SolarSaveGame* SaveGameClass;//[Offset: 0x260, Size: 0x8]
	SoftClassPath DefaultOperationLayout;//[Offset: 0x268, Size: 0x18]
	SoftClassPath DefaultLockSettings;//[Offset: 0x280, Size: 0x18]
	class SolarReplayManager* ReplayManagerClass;//[Offset: 0x298, Size: 0x8]
	SoftClassPath DefaultGameModeLockSettings;//[Offset: 0x2a0, Size: 0x18]
	bool bBaseManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	bool bGameManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	bool bLuaManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1]
	delegate OnBaseManagersInit;//[Offset: 0x2c0, Size: 0x10]
	delegate OnGameManagersInit;//[Offset: 0x2d0, Size: 0x10]
	delegate OnLuaManagersInit;//[Offset: 0x2e0, Size: 0x10]
	GameArgs* GameArgsManager;//[Offset: 0x308, Size: 0x8]
	UIManager* UIManager;//[Offset: 0x310, Size: 0x8]
	SolarTimerManager* SolarTimerManager;//[Offset: 0x318, Size: 0x8]
	SolarMainPlayerModel* MainPlayerModel;//[Offset: 0x320, Size: 0x8]
	SolarGameConfigManager* GameConfigManager;//[Offset: 0x328, Size: 0x8]
	SolarLuaHelper* SolarLuaHelper;//[Offset: 0x330, Size: 0x8]
	SolarAnoHelper* SolarAnoHelper;//[Offset: 0x338, Size: 0x8]
	SolarTableManager* SolarTableManager;//[Offset: 0x340, Size: 0x8]
	SolarTcpNetworkManager* SolarTcpNetworkManager;//[Offset: 0x348, Size: 0x8]
	SolarUDPManager* SolarUDPManager;//[Offset: 0x350, Size: 0x8]
	SolarAssetManager* SolarAssetManager;//[Offset: 0x358, Size: 0x8]
	SolarItemManager* SolarItemManager;//[Offset: 0x360, Size: 0x8]
	SolarInteractableManager* SolarInteractableManager;//[Offset: 0x368, Size: 0x8]
	SolarPlatformHelper* SolarPlatformHelper;//[Offset: 0x370, Size: 0x8]
	SolarMapManager* SolarMapManager;//[Offset: 0x378, Size: 0x8]
	WeaponGrowthManager* WeaponGrowthManager;//[Offset: 0x380, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x388, Size: 0x8]
	IMChatObject* SolarIMChatObject;//[Offset: 0x390, Size: 0x8]
	SolarLuaManager* SolarLuaManager;//[Offset: 0x398, Size: 0x8]
	SolarGameStatistics* SolarGameStatistics;//[Offset: 0x3a0, Size: 0x8]
	SolarWeaponMergeMeshManager* WeaponMergeMeshManager;//[Offset: 0x3a8, Size: 0x8]
	CrashReportManager* CrashReportManager;//[Offset: 0x3b0, Size: 0x8]
	SolarPopPanelManager* SolarPopPanelManager;//[Offset: 0x3b8, Size: 0x8]
	SolarApplicationLifetimeManager* SolarApplicationLifetimeManager;//[Offset: 0x3c0, Size: 0x8]
	SolarHomeActorManager* SolarHomeActorManager;//[Offset: 0x3c8, Size: 0x8]
	SolarGameplayLogger* SolarGameplayLoggger;//[Offset: 0x3d0, Size: 0x8]
	SolarAttributeSubSystem* SolarAttributeSubSystem;//[Offset: 0x3d8, Size: 0x8]
	SCustomizedGameModeManager* CustomizedGameManager;//[Offset: 0x3e0, Size: 0x8]
	SolarRedHintManager* SolarRedHintMgr;//[Offset: 0x3e8, Size: 0x8]
	SolarGameModeSelectionManager* SolarGameModeSelectionMgr;//[Offset: 0x3f0, Size: 0x8]
	SolarPingFpsManager* SolarPingFpsMgr;//[Offset: 0x3f8, Size: 0x8]
	SolarGameUserSettingsMgr* SolarGameUserSettingsMgr;//[Offset: 0x400, Size: 0x8]
	SolarLoginManager* SolarLoginManager;//[Offset: 0x408, Size: 0x8]
	SolarLockSettingsMgr* SolarLockSettingsMgr;//[Offset: 0x410, Size: 0x8]
	SolarGameProgressManager* SolarGameProgressMgr;//[Offset: 0x418, Size: 0x8]
	SolarABTestManager* SolarABTestManager;//[Offset: 0x420, Size: 0x8]
	SolarHttpManager* SolarHttpManager;//[Offset: 0x428, Size: 0x8]
	SolarActivityManager* SolarActivityManager;//[Offset: 0x430, Size: 0x8]
	SolarTutorialManager* SolarTutorialManager;//[Offset: 0x438, Size: 0x8]
	SolarReplayManager* SolarReplayManager;//[Offset: 0x440, Size: 0x8]
	SolarSaveGame* SolarSaveGame;//[Offset: 0x448, Size: 0x8]
	class SettlementStageManager* SettlementManagerClass;//[Offset: 0x450, Size: 0x28]
	SettlementStageManager* SettlementManager;//[Offset: 0x478, Size: 0x8]
	CGMCrossLevelDataMgr* CrossLevelDataMgr;//[Offset: 0x480, Size: 0x8]
	class SolarGraphicSettings* SolarGraphicSettingsClass;//[Offset: 0x4a0, Size: 0x28]
	SolarAccessLuaDataUtils* LuaDataAccessUtils;//[Offset: 0x4c8, Size: 0x8]
	SolarAkSoundManager* SolarAkSoundManager;//[Offset: 0x4d0, Size: 0x8]
	bool bIsDedicatedServerStressTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	KeyMappingManager* KeyMappingManager;//[Offset: 0x4e0, Size: 0x8]
	SolarSpecialEffectsMgr* SolarSpecialEffectsManager;//[Offset: 0x4e8, Size: 0x8]
	SolarGraphicSettings* SolarGraphicSettings;//[Offset: 0x4f0, Size: 0x8]
	AndroidInputManager* AndroidInputManager;//[Offset: 0x4f8, Size: 0x8]
	delegate OnTouchInputDelegate;//[Offset: 0x510, Size: 0x10]
	RegistedActorContainer CachedRegistedActors;//[Offset: 0x520, Size: 0x50]
	void SolarGm_UploadLogFile();// 0x1393b2d80041
	void SolarGM_TransmitGMLua(FString playerName, out const FString[] GmArray);// 0x1392b2d80041
	void SolarGM_TransmitGM(FString playerName, out const FString[] transmitGm);// 0x1391b2d80041
	void SolarGm_TestTutorialInLobby(int ID);// 0x1390b2d80041
	void SolarGm_SwitchFastFont(bool bIsEnable);// 0x138fb2d80041
	void SolarGm_StopRecordingRePlay();// 0x138eb2d80041
	void SolarGm_StopPlayingReplay();// 0x138db2d80041
	void SolarGm_StartRecordingLocalReplay(FString Filename);// 0x138cb2d80041
	void SolarGm_RequestReplayList(int PageIndex, int PageSize);// 0x138bb2d80041
	void SolarGm_RequestPlayReplayByIdx(uint32 Index);// 0x138ab2d80041
	void SolarGm_RequestPlayReplay(FString BattleID, FString DownloadUrl);// 0x1389b2d80041
	void SolarGm_PlayLocalReplay(FString Filename);// 0x1388b2d80041
	void SolarGM_LobbyLua(FString CmdName, out const FString[] Params);// 0x1387b2d80041
	void SolarGM_Lobby(FString CmdName, out const FString[] Params);// 0x1386b2d80041
	void SolarGM_GoTutorialLevel(FString LevelName, int Proficiency);// 0x1385b2d80041
	void SolarGM_GoHome();// 0x1384b2d80041
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);// 0x1383b2d80041
	void SolarGM_AddWeaponExpLua(int weaponid, int Count);// 0x1382b2d80041
	void SolarGM_AddWeaponExp(int weaponid, int Count);// 0x1381b2d80041
	void SolarGM_AddItemLua(int ItemID, int Count);// 0x1380b2d80041
	void SolarGM_AddItem(int ItemID, int Count);// 0x137fb2d80041
	void ShutdownAnoSDK();// 0x137eb2d80041
	void SetIsFirstLaunch(bool bIsFirst);// 0x137db2d80041
	bool ServerTravel(FString Map, int ListenPort, bool bSpectator, bool bSkipGameNotify, FString options);// 0x137cb2d80041
	void SaveGame();// 0x137bb2d80041
	void RequestShutDown(FString Reason);// 0x137ab2d80041
	void RegisterNetworkManager();// 0x1379b2d80041
	void OnManagersInitialized__DelegateSignature();// 0x1378b2d80041
	void OnDisconnect();// 0x1377b2d80041
	void LuaStartGameFrameWork();// 0x1376b2d80041
	void LuaInitGameFrameWork();// 0x1375b2d80041
	bool IsStandalone();// 0x1374b2d80041
	bool IsSolarServer(const Object* WorldContextObject);// 0x1373b2d80041
	bool IsSkipLogin();// 0x1372b2d80041
	bool IsServerOrStandalone();// 0x1371b2d80041
	bool IsListenServer();// 0x1370b2d80041
	bool IsGIsEditor();// 0x136fb2d80041
	bool IsFirstLaunchAfterVersionUpdate();// 0x136eb2d80041
	bool IsEditor();// 0x136db2d80041
	bool IsDedicatedServerStressTest();// 0x136cb2d80041
	bool IsDedicatedServer();// 0x136bb2d80041
	bool IsClientOrStandalone();// 0x136ab2d80041
	bool IsClient();// 0x1369b2d80041
	void InitLuaClasses();// 0x1368b2d80041
	void InitGameManagers();// 0x1367b2d80041
	void GoHomeLuaCall();// 0x1366b2d80041
	SolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();// 0x1365b2d80041
	WeaponGrowthManager* GetWeaponGrowthManager();// 0x1364b2d80041
	SolarTutorialManager* GetSolarTutorialManager();// 0x1363b2d80041
	SolarTimerManager* GetSolarTimerManager();// 0x1362b2d80041
	SolarTcpNetworkManager* GetSolarTcpNetworkManager();// 0x1361b2d80041
	SolarTableManager* GetSolarTableManager();// 0x1360b2d80041
	SolarSaveGame* GetSolarSaveGame();// 0x135fb2d80041
	SolarReplayManager* GetSolarReplayManager();// 0x135eb2d80041
	SolarRedHintManager* GetSolarRedHintManager();// 0x135db2d80041
	SolarPopPanelManager* GetSolarPopPanelManager();// 0x135cb2d80041
	SolarPlatformHelper* GetSolarPlatformHelper();// 0x135bb2d80041
	SolarPingFpsManager* GetSolarPingFpsManager();// 0x135ab2d80041
	SolarMapManager* GetSolarMapManager();// 0x1359b2d80041
	SolarMainPlayerModel* GetSolarMainPlayerModel();// 0x1358b2d80041
	SolarLuaManager* GetSolarLuaManager();// 0x1357b2d80041
	SolarLuaHelper* GetSolarLuaHelper();// 0x1356b2d80041
	SolarLoginManager* GetSolarLoginManager();// 0x1355b2d80041
	SolarLockSettingsMgr* GetSolarLockSettingsManager();// 0x1354b2d80041
	SolarItemManager* GetSolarItemManager();// 0x1353b2d80041
	SolarInteractableManager* GetSolarInteractableManager();// 0x1352b2d80041
	IMChatObject* GetSolarIMChatObject();// 0x1351b2d80041
	SolarHttpManager* GetSolarHttpManager();// 0x1350b2d80041
	SolarHomeActorManager* GetSolarHomeActorManager();// 0x134fb2d80041
	SolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();// 0x134eb2d80041
	SolarGameplayLogger* GetSolarGameplayLogger();// 0x134db2d80041
	SolarGameModeSelectionManager* GetSolarGameModeSelectionManager();// 0x134cb2d80041
	SolarGameInstanceBase* GetSolarGameInstanceBase(Object* WorldContextObject);// 0x134bb2d80041
	SolarAnoHelper* GetSolarAnoHelperStatic(Object* WorldContextObject);// 0x134ab2d80041
	SolarAnoHelper* GetSolarAnoHelper();// 0x1349b2d80041
	SolarAkSoundManager* GetSolarAkSoundManager();// 0x1348b2d80041
	SolarAkGameObject* GetSolarAkGameObject();// 0x1347b2d80041
	SolarActivityManager* GetSolarActivityManager();// 0x1346b2d80041
	SolarABTestManager* GetSolarABTestManager();// 0x1345b2d80041
	SettlementStageManager* GetSettlementStageManager();// 0x1344b2d80041
	SolarCharacter* GetPlayerCharacter();// 0x1343b2d80041
	FString GetPIEServerURL();// 0x1342b2d80041
	int GetPIEInstance();// 0x1341b2d80041
	FString GetNetModeString();// 0x1340b2d80041
	byte GetNetMode();// 0x133eb2d80041
	KeyMappingManager* GetKeyMappingManager();// 0x133db2d80041
	bool GetIsMutiPlayer();// 0x133cb2d80041
	SolarGameStatistics* GetGameStatistics();// 0x133bb2d80041
	SolarGameConfigManager* GetGameConfigManager();// 0x133ab2d80041
	SolarOperationUIElement* GetDefaultOperationLayout();// 0x1339b2d80041
	SCustomizedGameModeManager* GetCustomizedGameManager();// 0x1338b2d80041
	CGMCrossLevelDataMgr* GetCrossLevelDataMgr();// 0x1337b2d80041
	CrashReportManager* GetCrashReportManager();// 0x1336b2d80041
	int GetClientNumber();// 0x1335b2d80041
	void GetCategorizedActorsOfType(const Object* WorldContextObject, enum InActorType, out Actor*[] OutActors);// 0x1333b2d80041
	SolarAssetManager* GetAssetManager();// 0x1332b2d80041
	int64 GetAppActiveTimestampInterval();// 0x1331b2d80041
	void ExecuteCommandArray(out const FString[] cmdArray);// 0x1330b2d80041
	void ExecuteCommand(FString Cmd);// 0x132fb2d80041
	void ExecuteBackKeyLuaCall();// 0x132eb2d80041
	void ExecGameArgs(FString Args, out FString FailReason, out byte Branches);// 0x132cb2d80041
	void ExecConsoleCmd(FString Cmd);// 0x132bb2d80041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, int FGuid_A, int FGuid_B, int FGuid_C, int FGuid_D);// 0x132ab2d80041
	void ClearGameManagers();// 0x1329b2d80041
	void CheckSavedDirFiles(out FString[] Files);// 0x1328b2d80041
	void Browse(FString URL, byte TravelType);// 0x1326b2d80041

--------------------------------
Class: SolarSaveGame.SaveGame.Object
	bool HasShowNewPlayerGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EditorGameModeId;//[Offset: 0x2c, Size: 0x4]
	NeverShowCheckWindow[] NeverShowCheckWindowList;//[Offset: 0x30, Size: 0x10]
	bool HasReadSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool HasReadSurvey2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool HasPlayedHuntMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	byte MatchTimes;//[Offset: 0x43, Size: 0x1]
	bool HasCompleteTeamUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool IsMorrowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bClickSocialEntranceBtn1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bClickSocialEntranceBtn2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	bool bClickSocialEntranceBtn3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bClickLiveBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	int64 SocialLinkLastClickTime;//[Offset: 0x50, Size: 0x8]
	int[] DisplayedProductIDs;//[Offset: 0x58, Size: 0x10]
	uint32[] ReadMailIds;//[Offset: 0x70, Size: 0x10]
	bool ValidateNeverShowCheckWindow(int TargetConfirmID);// 0x4129b2d80041
	void UpdateNeverShowCheckWindow(int TargetConfirmID, enum NewDuration);// 0x4128b2d80041
	void UpdateDisplayedIDs(out const int[] InIDs);// 0x4127b2d80041
	void PrintTwiceConfirmCheckWindowList();// 0x4126b2d80041
	bool DeleteNeverShowCheckWindow(int TargetConfirmID);// 0x4125b2d80041
	void ClearDisplayIDs();// 0x4124b2d80041

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: NeverShowCheckWindow
	int ConfirmID;//[Offset: 0x0, Size: 0x4]
	DateTime Timestamp;//[Offset: 0x8, Size: 0x8]
	enum Duration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DateTime

--------------------------------
Class: SolarReplayManager.Object
	bool bMeshWidgetOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	class UserWidget* WaitingReplayStartUIClass;//[Offset: 0x40, Size: 0x8]
	SoftObjectPath WaitingOBMap;//[Offset: 0x48, Size: 0x18]
	class Actor* SpectatorPawnStartPointClass;//[Offset: 0x60, Size: 0x8]
	delegate FOnPlayingTryToStartDelegate;//[Offset: 0x70, Size: 0x10]
	delegate OnPlayingStartedDelegate;//[Offset: 0x80, Size: 0x10]
	delegate OnPlayingLoadLevelsStartedDelegate;//[Offset: 0x90, Size: 0x10]
	delegate OnPlayingLevelLoadedDelegate;//[Offset: 0xa0, Size: 0x10]
	delegate OnPlayingStartFailedDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate OnPlayingAtEndDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate OnPlayingFinishedDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate OnRecordingStartedDelegate;//[Offset: 0xe0, Size: 0x10]
	delegate OnRecordingStartFailedDelegate;//[Offset: 0xf0, Size: 0x10]
	delegate OnRecordingFinishedDelegate;//[Offset: 0x100, Size: 0x10]
	UserWidget* WaitingReplayStartUI;//[Offset: 0x150, Size: 0x8]
	void StopRecording();// 0x1493b2d80041
	void StopPlayReplayAndNotifyBackEnd();// 0x1492b2d80041
	void StopPlayReplay();// 0x1491b2d80041
	void StartRecording(FString SessionName, FString UploadUrl, bool bIsToLocal);// 0x1490b2d80041
	void SetTimeDilation(float Dilation);// 0x148fb2d80041
	void SetRequestTryStrategy(float Interval, int Times);// 0x148eb2d80041
	void SetReadyToRecord(bool bIsReady, out const FString[] OBPlayerIDs);// 0x148db2d80041
	void RequestPlayReplayOfCurrentBattle();// 0x148cb2d80041
	void RequestPlayReplay(FString BattleID);// 0x148bb2d80041
	void RequestBattleList(int PageIndex, int PageSize);// 0x148ab2d80041
	void PlayReplayFromServer(FString SessionName, FString DownloadUrl);// 0x1489b2d80041
	void PlayReplayFromLocal(FString ReplayFileName);// 0x1488b2d80041
	void PausePlayReplay();// 0x1487b2d80041
	void OnTryToGetDownloadAddrFailed();// 0x1486b2d80041
	void OnRecordingStartFailedDelegate__DelegateSignature();// 0x1485b2d80041
	void OnRecordingStartedDelegate__DelegateSignature();// 0x1484b2d80041
	void OnRecordingFinishedDelegate__DelegateSignature();// 0x1483b2d80041
	void OnPlayingTryToStartDelegate__DelegateSignature();// 0x1482b2d80041
	void OnPlayingStartFailedDelegate__DelegateSignature();// 0x1481b2d80041
	void OnPlayingStartedDelegate__DelegateSignature();// 0x1480b2d80041
	void OnPlayingLoadLevelsStartedDelegate__DelegateSignature();// 0x147fb2d80041
	void OnPlayingLevelLoadedDelegate__DelegateSignature();// 0x147eb2d80041
	void OnPlayingFinishedDelegate__DelegateSignature();// 0x147db2d80041
	void OnPlayingFinished();// 0x147cb2d80041
	void OnPlayingAtEndDelegate__DelegateSignature();// 0x147bb2d80041
	void OnPlayingAtEnd();// 0x147ab2d80041
	void LuaOnStartFailed();// 0x1479b2d80041
	void LuaOnPostLoadMapWithWorld(FString LevelName);// 0x1478b2d80041
	void LuaBindDelegates();// 0x1477b2d80041
	bool IsVersion135();// 0x1476b2d80041
	bool IsRecording();// 0x1475b2d80041
	bool IsReady();// 0x1474b2d80041
	bool IsPlaying();// 0x1473b2d80041
	bool IsInState(enum CheckState);// 0x1471b2d80041
	void GotoTimeInSecond(float Second);// 0x1470b2d80041
	float GetTotalSessionTimeInSecond();// 0x146fb2d80041
	float GetCurrentSessonTimeInSecond();// 0x146eb2d80041
	FString GetCurrentSessionName();// 0x146db2d80041
	FString GetBattleIDByIndex(int Index);// 0x146cb2d80041
	void EnterSettlementStage();// 0x146bb2d80041
	void DestroyWaitingOBStartUI();// 0x146ab2d80041
	void CreateWaitingOBStartUI();// 0x1469b2d80041
	void ContinuePlayReplay();// 0x1468b2d80041
	void BindPostLoadMapWithWorldDelegate();// 0x1467b2d80041

--------------------------------
Class: GameArgs.Object
	FString[] CommandLineArgs;//[Offset: 0x30, Size: 0x10]
	bool SkipTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ExecGameArgs(FString Args, out FString FailReason);// 0x343eb2d80041

--------------------------------
Class: UIManager.SolarGameManager.Object
	<FString,SolarUserWidget*> WidgetOpenedMap;//[Offset: 0x38, Size: 0x50]
	<FString,int> WidgetCountMap;//[Offset: 0x88, Size: 0x50]
	<int,Texture2D*> SkinTextureCache;//[Offset: 0xd8, Size: 0x50]
	SolarUserWidget*[] TmpRemovedWidgets;//[Offset: 0x128, Size: 0x10]
	LoadingUIBase* LoadingScreenUI;//[Offset: 0x158, Size: 0x8]
	bool bLoadingScreenShouldDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	FString CurrentLoadingUIName;//[Offset: 0x168, Size: 0x10]
	SolarUserWidget* SolarBigMap;//[Offset: 0x188, Size: 0x8]
	delegate[] OnBigMapOpenDelegateGroup;//[Offset: 0x190, Size: 0x10]
	delegate[] OnBigMapVisibilityChangedDelegateGroup;//[Offset: 0x1a0, Size: 0x10]
	DataTable* BattleWidgetSettings;//[Offset: 0x1b0, Size: 0x8]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x1c8, Size: 0x8]
	void UpdateButtonSprite(Button* TargetButton, FString AtlasType, FString NormalSpName, FString PressedSpName, FString HoveredSpName, FString DisableSpName);// 0x470ab2d80041
	void TriggerDelegate();// 0x4709b2d80041
	SolarUserWidget* ShowUIBySubClassWithCount(class SolarUserWidget SubClass, int RootID);// 0x4708b2d80041
	SolarUserWidget* ShowUIBySubClass(class SolarUserWidget SubClass, int RootID);// 0x4707b2d80041
	SolarUserWidget* ShowUIByName(FString InName, int RootID);// 0x4706b2d80041
	void SetWidgetLayout(Widget* InWidget, float Scale, float Opacity, float PositionX, float PositionY);// 0x4705b2d80041
	void SetWidgetChildrenLayout(UserWidget* InRootWidget, out const FName WidgetName, float Scale, float Opacity, float PositionX, float PositionY);// 0x4704b2d80041
	SolarUserWidget* SetUIActive(SolarUserWidget* InWidget, const bool Inactive);// 0x4703b2d80041
	void SetPersistentUserWidgetAndChildren(UserWidget* UserWidget, bool bInPersistent);// 0x4702b2d80041
	void SetMaterialInstanceParams(Image* Image, FString ParamName, float Value);// 0x4701b2d80041
	void SetMaterialInstanceColor(Image* Image, FString ParamName, out const LinearColor Value);// 0x4700b2d80041
	void SetLoadingScreenDisplay(bool bDisplay, bool bSetUIState);// 0x46ffb2d80041
	void SetImageTintColor(Image* IMG, out const LinearColor InColor);// 0x46feb2d80041
	void SetImageTexture(Image* IMG, Texture2D* Texture);// 0x46fdb2d80041
	void SetImageColor(Image* IMG, float R, float G, float B, float A);// 0x46fcb2d80041
	void SetFireInputStyle(FireInputWidget* FireInput, const SlateWidgetStyleAsset* Style);// 0x46fbb2d80041
	void SetCheckedState(CheckBox* Box, const enum State);// 0x46fab2d80041
	void SetCheckboxStyle(CheckBox* CheckBox, const SlateWidgetStyleAsset* Style);// 0x46f9b2d80041
	void SetCheckBoxIsChecked(CheckBox* CheckBox, bool Checked);// 0x46f8b2d80041
	void SetButtonStyle(Button* BTN, const SlateWidgetStyleAsset* Style);// 0x46f7b2d80041
	void RemoveUIFromOpenedMap(FString UIName);// 0x46f6b2d80041
	void RemoveAllWidgets();// 0x46f5b2d80041
	void PreLoadUIAsset(FString MapName);// 0x46f4b2d80041
	void OpenUIGM(FString UIID, int RootID);// 0x46f3b2d80041
	void OpenConfirmUIInLua(int ConfirmID);// 0x46f2b2d80041
	void OnUserWidgetDestroyLuaObject(SolarUserWidget* UserWidget);// 0x46f1b2d80041
	void OnToggleBigMapVisibility(bool bVisible);// 0x46f0b2d80041
	void OnPostLoadMapInitUIRoot(World* InWorld);// 0x46efb2d80041
	void OnGameManagersInitialized();// 0x46eeb2d80041
	void OnClientStartGame();// 0x46edb2d80041
	void OnBigMapOpen();// 0x46ecb2d80041
	void MarkDestroyLuaUserWidgetAndChildren(UserWidget* UserWidget);// 0x46ebb2d80041
	void LuaCloseUIWithCount(FString MapName);// 0x46eab2d80041
	void LuaCloseUI(FString MapName);// 0x46e9b2d80041
	Texture2D* LoadTexture2DBySoftPath(out const SoftObjectPath Path);// 0x46e8b2d80041
	Texture2D* LoadTexture2DByPath(Object* InOuter, FString FullPath);// 0x46e7b2d80041
	Texture2D* LoadTexture2D(Object* InOuter, FString TextureType, FString TexName);// 0x46e6b2d80041
	Texture2D* LoadQualityBG(Object* InOuter, const int InQuality);// 0x46e5b2d80041
	PaperSprite* LoadPaperSpriteByPath(Object* InOuter, FString FullPath);// 0x46e4b2d80041
	PaperSprite* LoadPaperSprite(Object* InOuter, FString AtlasPath, FString SpName);// 0x46e3b2d80041
	MaterialInterface* LoadMaterialInstance(Object* InOuter, FString MaterialType, FString MaterialName);// 0x46e2b2d80041
	bool IsLoadingScreenAvailable();// 0x46e1b2d80041
	void InvalidateWidgetPrepass(Widget* InWidget);// 0x46e0b2d80041
	void InitUIRoot();// 0x46dfb2d80041
	void InitLvlTextWidget(TextBlock* InHeadTextWidget, TextBlock* InTrailTextWidget);// 0x46deb2d80041
	void HandleOpenWidget(const UserWidget* MapName);// 0x46ddb2d80041
	FString GetWeaponTextureFullPath(out FString IconPath);// 0x46dcb2d80041
	UserWidget* GetUIPanel(FString MapName);// 0x46dbb2d80041
	FString GetTexture2DFullPath(out FString PrePath, out FString IconPath);// 0x46dab2d80041
	FString GetQualityBGFullPath(const int InQuality);// 0x46d9b2d80041
	Texture2D* GetPlayerAvatarByID(int PlayerAvatarID);// 0x46d8b2d80041
	bool GetCheckBoxIsChecked(CheckBox* CheckBox);// 0x46d7b2d80041
	CanvasPanelSlot* GetCanvasPanelSlotForWidget(Widget* Widget);// 0x46d6b2d80041
	CustomWidget_TableRow GetBattleWidgetSetting(FString ConfigName);// 0x46d5b2d80041
	UserWidget* GetBattleControlWidget();// 0x46d4b2d80041
	UserWidget* GetBattleBackpackWidget();// 0x46d3b2d80041
	void ExitSpectateMode();// 0x46d2b2d80041
	void ExecuteSetPersistentUserWidget(UserWidget* UserWidget, FString ModuleName, bool bInPersistent);// 0x46d1b2d80041
	void ExecuteDestroyLuaUserWidget(UserWidget* UserWidget, FString ModuleName);// 0x46d0b2d80041
	void EnterSpectateMode();// 0x46cfb2d80041
	ActorMarkBase* CreateWorldPosMark(class ActorMarkBase InActorMarkClass, Vector InPos, PlayerController* Controller);// 0x46ceb2d80041
	LoadingUIBase* CreateNewLoadingScreen(class LoadingUIBase LoadingUIClass);// 0x46cdb2d80041
	ActorMarkBase* CreateActorMark(class ActorMarkBase InActorMarkClass, Actor* InActor, PlayerController* Controller);// 0x46ccb2d80041
	void CloseUIGM(FString UIID);// 0x46cbb2d80041
	void ClearAllOpenedWidget();// 0x46cab2d80041
	void BindWidgetVisibilityChangedEvent(out const delegate VisibilityChangedEvent);// 0x46c9b2d80041
	void BatchRemovedWidgets();// 0x46c8b2d80041
	void AddUIToOpenedMap(FString UIName, SolarUserWidget* Widget);// 0x46c7b2d80041
	void AddBatchRemovedWidget(SolarUserWidget* UserWidget);// 0x46c6b2d80041

--------------------------------
Class: SolarGameManager.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	void ReceiveManagerPostIntialized();// 0x1ae1b2d80041
	void ReceiveManagerIntialized();// 0x1ae0b2d80041
	SolarGameManager* K2_CreateGameManager(SolarGameInstanceBase* Owner, class SolarGameManager Class);// 0x1adfb2d80041

--------------------------------
Class: LoadingUIBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_BG;//[Offset: 0x318, Size: 0x8]
	ProgressBar* LoadProgress;//[Offset: 0x320, Size: 0x8]
	SolarTextBlock* Txt_Percent_Num;//[Offset: 0x328, Size: 0x8]
	SolarTextBlock* Txt_Tips;//[Offset: 0x330, Size: 0x8]
	<FString,Texture2D*> BGImgMap;//[Offset: 0x338, Size: 0x50]
	FString[] TipArray;//[Offset: 0x390, Size: 0x10]
	int CurrentIndex;//[Offset: 0x3a0, Size: 0x4]
	float FakeProgress;//[Offset: 0x3a4, Size: 0x4]
	void SetTips(out const FText InTips);// 0x356cb2d80041
	void SetLoadingProgress(float InPercent);// 0x356bb2d80041
	void SetFakeProgress(float NewProgress);// 0x356ab2d80041
	void SetBGImgFromPath(out const SoftObjectPath Path);// 0x3569b2d80041
	void SetBGImg(FString ImgName);// 0x3568b2d80041
	void OnWidgetReleasedAsLoadingScreen(Object* Outer);// 0x3567b2d80041
	void OnWidgetCreatedAsLoadingScreen(Object* Outer);// 0x3566b2d80041
	void OnLoadingStarted();// 0x3565b2d80041
	void OnLoadingFinished();// 0x3564b2d80041
	void OnLevelPreLoad(FString MapPackageName);// 0x3563b2d80041
	void OnAsyncLoadingFlushUpdate();// 0x3562b2d80041
	void LoadingStarted();// 0x3561b2d80041
	void LoadingFinished();// 0x3560b2d80041

--------------------------------
Class: SolarTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	FText Text;//[Offset: 0x150, Size: 0x18]
	int LocTextID;//[Offset: 0x168, Size: 0x4]
	enum PreviewLang;//[Offset: 0x16c, Size: 0x1]
	Vector2D CalcSize;//[Offset: 0x170, Size: 0x8]
	delegate TextDelegate;//[Offset: 0x178, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x188, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1c0, Size: 0x50]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x210, Size: 0x18]
	SlateBrush StrikeBrush;//[Offset: 0x228, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x2c0, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2c8, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2d8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2e8, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 0x1]
	void SetWrapTextAt(float InWrapTextAt);// 0x449cb2d80041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x449bb2d80041
	void SetText(FText InText);// 0x449ab2d80041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x4499b2d80041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x4498b2d80041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x4497b2d80041
	void SetOpacity(float InOpacity);// 0x4496b2d80041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x4495b2d80041
	void SetMargin(Margin InMargin);// 0x4494b2d80041
	void SetLocLangTextData(FText InText, bool InEnableLocText, int InLocTextID, enum InPreviewLang, SlateFontSizeForLang InSlateFontSizeForLang);// 0x4493b2d80041
	void SetLineHeightPercentage(float InLineHeightPercentage);// 0x4492b2d80041
	void SetFont(SlateFontInfo InFontInfo);// 0x4491b2d80041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x4490b2d80041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x448fb2d80041
	Vector2D GetTextSize();// 0x448eb2d80041
	FText GetText();// 0x448db2d80041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x448cb2d80041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x448bb2d80041

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x128, Size: 0x3]
	byte Justification;//[Offset: 0x12b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x12c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x130, Size: 0x4]
	Margin Margin;//[Offset: 0x134, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x144, Size: 0x4]
	void SetJustification(byte InJustification);// 0x1c02b2d80041

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: SlateFontSizeForLang
	bool bEnableFontForLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int DefaultFontSize;//[Offset: 0x4, Size: 0x4]
	SlateFontSizeLangData[] FontForLangGroup;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SlateFontSizeLangData
	enum SpecialLang;//[Offset: 0x0, Size: 0x1]
	int SpecialFontSize;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarUIRoot.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x140, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x148, Size: 0x2b8]
	LinearColor ColorAndOpacity;//[Offset: 0x400, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x410, Size: 0x10]
	byte ClickMethod;//[Offset: 0x420, Size: 0x1]
	byte TouchMethod;//[Offset: 0x421, Size: 0x1]
	byte PressMethod;//[Offset: 0x422, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 0x1]
	delegate OnClicked;//[Offset: 0x428, Size: 0x10]
	delegate OnPressed;//[Offset: 0x438, Size: 0x10]
	delegate OnReleased;//[Offset: 0x448, Size: 0x10]
	delegate OnHovered;//[Offset: 0x458, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x468, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x1e53b2d80041
	void SetStyle(out const ButtonStyle InStyle);// 0x1e52b2d80041
	void SetPressMethod(byte InPressMethod);// 0x1e50b2d80041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x1e4fb2d80041
	void SetClickMethod(byte InClickMethod);// 0x1e4db2d80041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x1e4cb2d80041
	bool IsPressed();// 0x1e4bb2d80041

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x1e4ab2d80041
	PanelSlot* GetContentSlot();// 0x1e49b2d80041
	Widget* GetContent();// 0x1e48b2d80041

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x98]
	SlateBrush Hovered;//[Offset: 0xa0, Size: 0x98]
	SlateBrush Pressed;//[Offset: 0x138, Size: 0x98]
	SlateBrush Disabled;//[Offset: 0x1d0, Size: 0x98]
	Margin NormalPadding;//[Offset: 0x268, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x278, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x288, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x2a0, Size: 0x18]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: FireInputWidget.Widget.Visual.Object
	SlateBrush JoyStickThumb;//[Offset: 0x128, Size: 0x98]
	SlateBrush JoyStickThumbPress;//[Offset: 0x1c0, Size: 0x98]
	SlateBrush JoyStickIcon;//[Offset: 0x258, Size: 0x98]
	Vector2D VisualSize;//[Offset: 0x2f0, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x2f8, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x300, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x308, Size: 0x8]
	float ActiveOpacity;//[Offset: 0x310, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x314, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x318, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	delegate OnJoystickPressed;//[Offset: 0x330, Size: 0x10]
	delegate OnJoystickRelease;//[Offset: 0x340, Size: 0x10]
	delegate OnInputYawAndPitch;//[Offset: 0x350, Size: 0x10]
	void SetJoyStickThumbBrush(out const ButtonStyle ButtonStyle);// 0x343db2d80041
	void SetJoyStickIcon(out const SlateBrush Icon);// 0x343cb2d80041
	void SetInputScale(Vector2D Scale);// 0x343bb2d80041
	void ResetControlInput();// 0x343ab2d80041

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x139, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x13c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0x610]
	SlateWidgetStyleAsset* Style;//[Offset: 0x760, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x768, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x770, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x778, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x780, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x788, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x790, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x798, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x7a0, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x7a8, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x7b0, Size: 0x1]
	Margin Padding;//[Offset: 0x7b4, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x7c8, Size: 0x28]
	byte ClickMethod;//[Offset: 0x7f0, Size: 0x1]
	byte TouchMethod;//[Offset: 0x7f1, Size: 0x1]
	byte PressMethod;//[Offset: 0x7f2, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f3, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x7f8, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x3aaeb2d80041
	void SetPressMethod(byte InPressMethod);// 0x3aadb2d80041
	void SetIsChecked(bool InIsChecked);// 0x3aacb2d80041
	void SetClickMethod(byte InClickMethod);// 0x3aabb2d80041
	void SetCheckedState(enum InCheckedState);// 0x3aaab2d80041
	bool IsPressed();// 0x3aa9b2d80041
	bool IsChecked();// 0x3aa8b2d80041
	enum GetCheckedState();// 0x3aa7b2d80041

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x98]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xa8, Size: 0x98]
	SlateBrush UncheckedPressedImage;//[Offset: 0x140, Size: 0x98]
	SlateBrush CheckedImage;//[Offset: 0x1d8, Size: 0x98]
	SlateBrush CheckedHoveredImage;//[Offset: 0x270, Size: 0x98]
	SlateBrush CheckedPressedImage;//[Offset: 0x308, Size: 0x98]
	SlateBrush UndeterminedImage;//[Offset: 0x3a0, Size: 0x98]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x438, Size: 0x98]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x4d0, Size: 0x98]
	Margin Padding;//[Offset: 0x568, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x578, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x5a0, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x5c8, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x5e0, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x5f8, Size: 0x18]

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x160, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x170, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x198, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1a8, Size: 0x50]
	SlateBrush StrikeBrush;//[Offset: 0x1f8, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x290, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x298, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2a8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2b8, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 0x1]
	void SetText(FText InText);// 0x4ab3b2d80041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x4ab2b2d80041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x4ab1b2d80041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x4ab0b2d80041
	void SetOpacity(float InOpacity);// 0x4aafb2d80041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x4aaeb2d80041
	void SetFont(SlateFontInfo InFontInfo);// 0x4aadb2d80041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x4aacb2d80041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x4aabb2d80041
	FText GetText();// 0x4aaab2d80041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x4aa9b2d80041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x4aa8b2d80041

--------------------------------
Class: CustomWidget_TableRow.TableRowBase
	SoftObjectPath TeammateState;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath BattleScore;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath SpectatorListPath;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath SafeAreaProgress;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: TableRowBase

--------------------------------
Class: ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Actor* CurrentFollowActor;//[Offset: 0x330, Size: 0x8]
	PlayerController* CurrentPlayerController;//[Offset: 0x338, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x340, Size: 0x8]
	Vector2D MarkPanelSize;//[Offset: 0x348, Size: 0x8]
	void SetUpdateState(bool InShouldUpdateLocation);// 0x32b1b2d80041
	void InitActorMarkBaseByFixedPos(Vector Pos, PlayerController* Controller);// 0x32b0b2d80041
	void InitActorMarkBase(Actor* InActor, PlayerController* Controller);// 0x32afb2d80041
	Vector GetFollowActorLocation();// 0x32aeb2d80041
	float GetDistance();// 0x32adb2d80041
	Actor* GetCurrentFollowActor();// 0x32acb2d80041

--------------------------------
Class: SolarTimerManager.Object
	bool bFullCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void UnPauseTimerInternal(TimerHandle Handle);// 0x44b4b2d80041
	void TimerCallbackToLuaInternal(FString CallbackKey);// 0x44b3b2d80041
	TimerHandle SetTimerForNextTickInternal(FString CallbackKey);// 0x44b2b2d80041
	void PauseTimerInternal(TimerHandle Handle);// 0x44b1b2d80041
	void OnLuaContextCleanup(const bool InBFullCleanup);// 0x44b0b2d80041
	bool IsValidTimerInternal(TimerHandle Handle);// 0x44afb2d80041
	bool IsTimerActiveInternal(TimerHandle Handle);// 0x44aeb2d80041
	void ClearTimerInternal(TimerHandle Handle);// 0x44adb2d80041
	TimerHandle AddTimerInternal(FString CallbackKey, const float Rate, const bool IsLoop, const float InitialStartDelay);// 0x44acb2d80041

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarMainPlayerModel.Object
	void SyncFromPlayerData(int InAccountFlag);// 0x3e92b2d80041
	bool IsAccountFlagOn();// 0x3e91b2d80041

--------------------------------
Class: SolarGameConfigManager.Object
	DataTable* WeaponDTInstance;//[Offset: 0x30, Size: 0x8]
	DataTable* WeaponAppearanceDTInstance;//[Offset: 0x38, Size: 0x8]
	DataTable* ItemActorDTInstance;//[Offset: 0x40, Size: 0x8]
	DataTable* SolarBackpackFXDTInstance;//[Offset: 0x48, Size: 0x8]
	DataTable* CharacterDTInstance;//[Offset: 0x50, Size: 0x8]
	DataTable* ItemResourceDTInstance;//[Offset: 0x58, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfigAsset;//[Offset: 0x60, Size: 0x8]
	GlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;//[Offset: 0x68, Size: 0x8]
	float HeadHitValue;//[Offset: 0x70, Size: 0x4]
	float ShieldReducePhy;//[Offset: 0x74, Size: 0x4]
	float ShieldReduceEn;//[Offset: 0x78, Size: 0x4]
	float ArmorReducePhy;//[Offset: 0x7c, Size: 0x4]
	float ArmorReduceEn;//[Offset: 0x80, Size: 0x4]
	float BaseHeadShotAddit;//[Offset: 0x84, Size: 0x4]
	int BackpackEnergyID;//[Offset: 0x88, Size: 0x4]
	int BackpackExtraEnergyID;//[Offset: 0x8c, Size: 0x4]
	int MedicineItemId;//[Offset: 0x90, Size: 0x4]
	int RadarItemId;//[Offset: 0x94, Size: 0x4]
	int ShieldRechargerItemId;//[Offset: 0x98, Size: 0x4]
	float UnPickupItemTime;//[Offset: 0x9c, Size: 0x4]
	float UnAutoPickupItemTime;//[Offset: 0xa0, Size: 0x4]
	float AutoPickupTime;//[Offset: 0xa4, Size: 0x4]
	float AutoMarkCDTime;//[Offset: 0xa8, Size: 0x4]
	int[] AutoMarkItemTypeList;//[Offset: 0xb0, Size: 0x10]
	float AutoMarkTeammateDistance;//[Offset: 0xc0, Size: 0x4]
	float PickupCapsuleRadius;//[Offset: 0xc4, Size: 0x4]
	float PickupCapsuleHalfHeight;//[Offset: 0xc8, Size: 0x4]
	float MapVoiceSurviveTime;//[Offset: 0xcc, Size: 0x4]
	float MapVoiceDataRefreshTime;//[Offset: 0xd0, Size: 0x4]
	void OnInitialized();// 0x3b68b2d80041
	LinearColor GetLowQualityColorByQuality(int Quality);// 0x3b67b2d80041
	LinearColor GetHUDDecorateColorByQuality(int Quality);// 0x3b66b2d80041
	LinearColor GetHUDColorByQuality(int Quality);// 0x3b65b2d80041
	LinearColor GetHUDBGColorByQuality(int Quality);// 0x3b64b2d80041
	LinearColor GetHighQualityColorByQuality(int Quality);// 0x3b63b2d80041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x3b62b2d80041
	GlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();// 0x3b61b2d80041
	LinearColor GetColorByQuality(int Quality);// 0x3b60b2d80041

--------------------------------
Class: GlobalVehicleWeaponConfig.SolarDataAsset.DataAsset.Object
	AssitLockBoneWeight[] AssistLockBoneWeight;//[Offset: 0x38, Size: 0x10]
	AssitLockBoneWeight[] SortAssistLockBoneWeight;//[Offset: 0x48, Size: 0x10]
	float CoefficientHUD;//[Offset: 0x58, Size: 0x4]
	float CoefficientWorld;//[Offset: 0x5c, Size: 0x4]
	float CoefficientHUDUnlock;//[Offset: 0x60, Size: 0x4]
	float CoefficientWorldUnlock;//[Offset: 0x64, Size: 0x4]
	float HudDistFromAssistLockPawnToSecondReticle;//[Offset: 0x68, Size: 0x4]
	RuntimeFloatCurve AssistLockUIScaleCurve;//[Offset: 0x70, Size: 0x88]

--------------------------------
Class: AssitLockBoneWeight
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float BoneWeight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarLuaHelper.Object
	DataTable* ClassInfoDataTable;//[Offset: 0x30, Size: 0x8]
	DataTable* KeyMappingInfoDataTable;//[Offset: 0x38, Size: 0x8]
	bool WriteFile(FString FilePath, FString Content);// 0x3e8bb2d80041
	void UELogWarning(FString str);// 0x3e8ab2d80041
	void UELogError(FString str);// 0x3e89b2d80041
	void UELog(FString str);// 0x3e88b2d80041
	Object* TryLoadBySoftObjectPath(out const SoftObjectPath ObjectPath);// 0x3e87b2d80041
	void StaticSetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x3e86b2d80041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString InEventName, LatentActionInfo LatentInfo);// 0x3e85b2d80041
	int StaticPostAkEventByName(FString InEventName);// 0x3e84b2d80041
	void SolarSetShadowQuality(int InQuality);// 0x3e83b2d80041
	void SolarSetMSAAEnabled(bool bEnable);// 0x3e82b2d80041
	void SolarSetGraphicsQuality(enum InLevel);// 0x3e81b2d80041
	void SolarSetFrameRate(enum FrameRateLevel);// 0x3e80b2d80041
	void SolarSetColorGrading(enum InTheme);// 0x3e7fb2d80041
	bool SolarGetTextureStreamingEnable();// 0x3e7eb2d80041
	void SolarEnableTextureStreaming(bool bEnable);// 0x3e7db2d80041
	int ShouldEnterLobby();// 0x3e7cb2d80041
	void SetSwitch(SolarAkGameObject* SolarAkGameObject, FString SwitchGroup, FString SwitchState);// 0x3e7bb2d80041
	void SetSkeletalMeshMatFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMatResPath, int ElementIndex);// 0x3e7ab2d80041
	void SetSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMatResPath, int ElementIndex);// 0x3e79b2d80041
	void SetSkeletalMeshFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMeshResPath);// 0x3e78b2d80041
	void SetSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMeshResPath);// 0x3e77b2d80041
	void SetSkeletalAnimBPFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewAnimBPResPath);// 0x3e76b2d80041
	void SetSkeletalAnimBP(SkeletalMeshComponent* SkeletalMeshComponent, FString NewAnimBPResPath);// 0x3e75b2d80041
	void SetRenderBatch(int Mode);// 0x3e74b2d80041
	void SetPlayerSettlementReport(out const SolarPlayerReport[] Reports, out const SolarGameModeInfo GameInfo);// 0x3e73b2d80041
	void SetPatchBuildVersion(FString Version);// 0x3e72b2d80041
	void SetChangeListNumber(FString ChangeListNum);// 0x3e71b2d80041
	Object* ResolveSoftObjectPath(out const SoftObjectPath ObjectPath);// 0x3e70b2d80041
	FString ReadFileContent(FString FilePath);// 0x3e6fb2d80041
	int PostAkEventByName(SolarAkGameObject* SolarAkGameObject, FString InEventName);// 0x3e6eb2d80041
	Object* LoadObject_WithOuter(Object* Outer, FString ObjectName);// 0x3e6db2d80041
	bool IsWorldTearingDown();// 0x3e6cb2d80041
	bool IsLocalBuild();// 0x3e6bb2d80041
	bool HasReviveItemManager(Object* InWorldContext);// 0x3e6ab2d80041
	FString HashMd5(FString InputText);// 0x3e69b2d80041
	FString GetSourceCommitHash();// 0x3e68b2d80041
	FString GetSourceBuildVersion();// 0x3e67b2d80041
	SolarGameState* GetSolarGameState();// 0x3e66b2d80041
	FString GetShortName(FString LongName);// 0x3e65b2d80041
	FString GetServerEnvTag();// 0x3e64b2d80041
	Vector2D GetScreenSizeXY();// 0x3e63b2d80041
	FString GetPatchBuildVersion();// 0x3e62b2d80041
	int GetMonsterDropItemOutcomeID(int MonsterAICharID, int StrengthGrade);// 0x3e61b2d80041
	int GetMonsterDeathBoxID(int MonsterAICharID);// 0x3e60b2d80041
	FString GetLocalText(int InLocalizationID, out const <FString,FString> FormatContext);// 0x3e5fb2d80041
	SolarReplayPlayerController* GetLocalSolarReplayPlayerController();// 0x3e5eb2d80041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x3e5db2d80041
	SolarPlayerController* GetLocalSolarPlayerController();// 0x3e5cb2d80041
	PlayerController* GetLocalPlayerController();// 0x3e5bb2d80041
	Key GetLeftMouseKeyDown();// 0x3e5ab2d80041
	void GetKeyMappingInfoByRowName(FString RowName, out KeyMappingRowInfo OutClassInfo);// 0x3e59b2d80041
	FString GetGameModeParam(int GameModeId, FString Key);// 0x3e58b2d80041
	FString GetExtraCdnUrlPrefix();// 0x3e57b2d80041
	FString GetExtBackdoorUrl();// 0x3e56b2d80041
	FString GetClipboardPasteText();// 0x3e55b2d80041
	void GetClassInfoByID(FString ClassID, out ClassInfo OutClassInfo);// 0x3e54b2d80041
	FString GetChangeListNumber();// 0x3e53b2d80041
	FString GetCdnUrlPrefix();// 0x3e52b2d80041
	FString GetBuildVariation();// 0x3e51b2d80041
	FString GetBuildMode();// 0x3e50b2d80041
	Vector GetBoneLocationByName(SkeletalMeshComponent* SkeletalMeshComponent, FName BoneName, byte Space);// 0x3e4fb2d80041
	FString GetBackdoorUrl();// 0x3e4eb2d80041
	FString GetAndroidPkgName();// 0x3e4db2d80041
	void GetAllKeyMappingInfoFromTable(out KeyMappingRowInfo[] OutKeyMappingInfo);// 0x3e4cb2d80041
	void GetAllClassInfoFromTable(out ClassInfo[] OutAllClassInfo);// 0x3e4bb2d80041
	FString GetActualBuildVersion();// 0x3e4ab2d80041
	Color FromHex(FString HexString);// 0x3e49b2d80041
	void EndOfPlayInEditor(Object* InWorldContext, FString EndReason, bool bPopMsgBox);// 0x3e48b2d80041
	void DoLuaDebug(out const FString[] cmdArray);// 0x3e47b2d80041
	FString DecodeFile(FString InFilePath);// 0x3e46b2d80041
	LevelStreamingDynamic* CreateStreamInstance(World* World, FString PackageName);// 0x3e45b2d80041
	Actor* CreateEmptySkeletalMeshActor();// 0x3e44b2d80041
	MaterialInstanceDynamic* CreateDynamicMaterial(CameraActor* CameraActor, FString TemplateMatResPath, const int RTSizeX, const int RTSizeY, byte RenderTargetFormat);// 0x3e43b2d80041
	void ClipboardCopyText(FString Content);// 0x3e42b2d80041
	void ClearSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent);// 0x3e41b2d80041

--------------------------------
Class: SolarPlayerReport
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	uint64 UserId;//[Offset: 0x10, Size: 0x8]
	FString NickName;//[Offset: 0x18, Size: 0x10]
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int PlayerRank;//[Offset: 0x30, Size: 0x4]
	int Gender;//[Offset: 0x34, Size: 0x4]
	int AccountFlag;//[Offset: 0x38, Size: 0x4]
	int TeamRank;//[Offset: 0x3c, Size: 0x4]
	int TeamID;//[Offset: 0x40, Size: 0x4]
	int PosInTeam;//[Offset: 0x44, Size: 0x4]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int KillNum;//[Offset: 0x4c, Size: 0x4]
	int[] VehicleKillNum_ID;//[Offset: 0x50, Size: 0x10]
	int[] VehicleKillNum_Value;//[Offset: 0x60, Size: 0x10]
	int KillTeammate;//[Offset: 0x70, Size: 0x4]
	int KillInAirNum;//[Offset: 0x74, Size: 0x4]
	int KillDownInAirNum;//[Offset: 0x78, Size: 0x4]
	int WeaponSkillKillNum;//[Offset: 0x7c, Size: 0x4]
	int P_KillStreak;//[Offset: 0x80, Size: 0x4]
	int[] KillStreakHistory;//[Offset: 0x88, Size: 0x10]
	int RevengeNum;//[Offset: 0x98, Size: 0x4]
	int DeathNum;//[Offset: 0x9c, Size: 0x4]
	int KillDownNum;//[Offset: 0xa0, Size: 0x4]
	int KillDownTeammate;//[Offset: 0xa4, Size: 0x4]
	float AccurateDamage;//[Offset: 0xa8, Size: 0x4]
	int AccurateDameageTimes;//[Offset: 0xac, Size: 0x4]
	int AccurateKillTimes;//[Offset: 0xb0, Size: 0x4]
	int AccurateKillDownTimes;//[Offset: 0xb4, Size: 0x4]
	float CauseDamage;//[Offset: 0xb8, Size: 0x4]
	float ReceivedDamage;//[Offset: 0xbc, Size: 0x4]
	int AssistNum;//[Offset: 0xc0, Size: 0x4]
	float CollectEnergy;//[Offset: 0xc4, Size: 0x4]
	int BuyESElectricNum;//[Offset: 0xc8, Size: 0x4]
	int ResurrectionCapsule;//[Offset: 0xcc, Size: 0x4]
	int TeamFriendRevive;//[Offset: 0xd0, Size: 0x4]
	float ReceivedHeal;//[Offset: 0xd4, Size: 0x4]
	float HealSelf;//[Offset: 0xd8, Size: 0x4]
	float TeammateHeal;//[Offset: 0xdc, Size: 0x4]
	int OpenAirBoxNum;//[Offset: 0xe0, Size: 0x4]
	float Lifetime;//[Offset: 0xe4, Size: 0x4]
	int SaveCount;//[Offset: 0xe8, Size: 0x4]
	int FlyCount;//[Offset: 0xec, Size: 0x4]
	int VehicleTime;//[Offset: 0xf0, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0xf4, Size: 0x4]
	int CurCharacterExp;//[Offset: 0xf8, Size: 0x4]
	int CharacterExp;//[Offset: 0xfc, Size: 0x4]
	int AccountExp;//[Offset: 0x100, Size: 0x4]
	int TotalAccountExp;//[Offset: 0x104, Size: 0x4]
	int AccountLevel;//[Offset: 0x108, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x110, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x114, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x118, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x11c, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x120, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x124, Size: 0x4]
	int RankAfterScore;//[Offset: 0x128, Size: 0x4]
	int RankLegend;//[Offset: 0x12c, Size: 0x4]
	byte RankProtectType;//[Offset: 0x130, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	int Zomborg;//[Offset: 0x134, Size: 0x4]
	float MvpScore;//[Offset: 0x138, Size: 0x4]
	float KDA;//[Offset: 0x13c, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 0x1]
	int[] SettlementItems;//[Offset: 0x148, Size: 0x10]
	FString[] StringExtraRewards;//[Offset: 0x158, Size: 0x10]
	int[] SendGiftGold;//[Offset: 0x168, Size: 0x10]
	int[] SendGiftDiamond;//[Offset: 0x178, Size: 0x10]
	FString[] SendGiftPlayerName;//[Offset: 0x188, Size: 0x10]
	FString[] SendGiftPlayerID;//[Offset: 0x198, Size: 0x10]
	int[] WeaponExpIds;//[Offset: 0x1a8, Size: 0x10]
	int[] WeaponLevel;//[Offset: 0x1b8, Size: 0x10]
	int[] CurWeaponExp;//[Offset: 0x1c8, Size: 0x10]
	int[] WeaponExps;//[Offset: 0x1d8, Size: 0x10]
	int[] WeaponKillNum_ID;//[Offset: 0x1e8, Size: 0x10]
	float[] WeaponKillNum_Value;//[Offset: 0x1f8, Size: 0x10]
	int[] WeaponDamage_ID;//[Offset: 0x208, Size: 0x10]
	float[] WeaponDamage_Value;//[Offset: 0x218, Size: 0x10]
	int[] VehicleDamage_ID;//[Offset: 0x228, Size: 0x10]
	float[] VehicleDamage_Value;//[Offset: 0x238, Size: 0x10]
	int[] VehicleDistance_ID;//[Offset: 0x248, Size: 0x10]
	int[] VehicleDistance_Value;//[Offset: 0x258, Size: 0x10]
	int SettlementConfigID;//[Offset: 0x268, Size: 0x4]
	int GameModeSubID;//[Offset: 0x26c, Size: 0x4]
	FString KillerPlayerID;//[Offset: 0x270, Size: 0x10]
	uint64 KillerUserId;//[Offset: 0x280, Size: 0x8]
	FString KillerNickName;//[Offset: 0x288, Size: 0x10]
	FString KillerOS;//[Offset: 0x298, Size: 0x10]
	FString OS;//[Offset: 0x2a8, Size: 0x10]
	int[] CharacterKillNumIDs;//[Offset: 0x2b8, Size: 0x10]
	int[] CharacterKillNumValues;//[Offset: 0x2c8, Size: 0x10]
	int WarmType;//[Offset: 0x2d8, Size: 0x4]
	int[] AchievementIDs;//[Offset: 0x2e0, Size: 0x10]
	int[] AchievementValues;//[Offset: 0x2f0, Size: 0x10]
	int LikeValue;//[Offset: 0x300, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x308, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x318, Size: 0x4]
	int LastUseVehicleID;//[Offset: 0x31c, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x320, Size: 0x10]
	FString[] SavedTeammateNameArr;//[Offset: 0x330, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x340, Size: 0x10]

--------------------------------
Class: SolarGameModeInfo
	int GameModeId;//[Offset: 0x0, Size: 0x4]
	FString MapName;//[Offset: 0x8, Size: 0x10]
	int NumMode;//[Offset: 0x18, Size: 0x4]
	int PlayerCount;//[Offset: 0x1c, Size: 0x4]
	int TeamCount;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SolarPlayerState*[] SolarPlayerStateArray;//[Offset: 0x2a0, Size: 0x10]
	bool IsBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	PlayerState*[] PlayerArray_SameTeam;//[Offset: 0x2b8, Size: 0x10]
	PrePooledBundle[] PrePooledBundles;//[Offset: 0x2e8, Size: 0x10]
	int RemainingPlayersCount;//[Offset: 0x2f8, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x2fc, Size: 0x4]
	int PlayersCount;//[Offset: 0x300, Size: 0x4]
	int TeamCount;//[Offset: 0x304, Size: 0x4]
	int TotalBoardingNum;//[Offset: 0x308, Size: 0x4]
	int CapsulePlayerNum;//[Offset: 0x30c, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x310, Size: 0x4]
	<class Object> LimitMaxReplicatedNumClasses;//[Offset: 0x318, Size: 0x50]
	float BattleTime;//[Offset: 0x36c, Size: 0x4]
	int GameWarmID;//[Offset: 0x3c0, Size: 0x4]
	bool bLuaReportBattleEndServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	GameStartConditionList GameStartConditions;//[Offset: 0x3e0, Size: 0x58]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x438, Size: 0x8]
	void UpdateTeammateRelationship();// 0x1454b2d80041
	void SetTeamLastVehicleLocation(byte InTeamID, out const Vector InVehiclePosition);// 0x1453b2d80041
	void SetSettlementStageConfigID(const int InConfigID);// 0x1452b2d80041
	void OnRep_SettlementStageConfigID();// 0x1451b2d80041
	void OnRep_CapsulePlayerNum();// 0x1450b2d80041
	void OnPlayersNumberChange();// 0x144fb2d80041
	void NotifyBombingEnd(int BombId);// 0x144eb2d80041
	void NotifyBombingBegin(int BombId, const Vector Location, float Radius);// 0x144db2d80041
	bool IsSupportCharacterRole();// 0x144cb2d80041
	bool IsSameTeamWithReferToPlayer(const SolarPlayerState* Other);// 0x144bb2d80041
	float GetWorldStartTimeSeconds();// 0x144ab2d80041
	int GetWatchingPlayerCount(bool IgnoreOffline);// 0x1449b2d80041
	SolarPlayerState* GetTeamPlayerState(const byte InTeamID, const byte InPosInTeam);// 0x1448b2d80041
	int GetTeamNumCount();// 0x1447b2d80041
	byte GetTeammateNum(const byte InTeamID);// 0x1446b2d80041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1445b2d80041
	SolarSafeArea* GetSolarSafeArea();// 0x1444b2d80041
	int GetSettlementStageConfigID();// 0x1443b2d80041
	int GetRemainingTeamCount();// 0x1442b2d80041
	int GetRemainingPlayersCount();// 0x1441b2d80041
	SolarPlayerState* GetReferToPlayerTeamEntry(byte InPosInTeam);// 0x1440b2d80041
	SolarPlayerState*[] GetReferToPlayerTeamArray();// 0x143fb2d80041
	SolarPlayerState* GetReferToPlayerState();// 0x143eb2d80041
	SolarPlayerState*[] GetPlayerStatesInTeam(out const byte InTeamID);// 0x143db2d80041
	int GetPlayersCount();// 0x143cb2d80041
	SolarPlayerState* GetOfflinePlayerState(FString OfflinePlayerId);// 0x143bb2d80041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x143ab2d80041
	float GetBattleTime();// 0x1439b2d80041
	float GetBattleStartTimeSeconds();// 0x1438b2d80041
	void GetAllCharactersExceptTeammate(out SolarCharacter*[] CharacterArray);// 0x1437b2d80041
	int GetAliveSolarPlayersCount(bool IgnoreOffline);// 0x1436b2d80041
	byte GetAlivePlayerNumInTeamExceptDying(const byte InTeamID);// 0x1435b2d80041
	void ClientNotifyShowVictory(byte WinTeamID, float TargetEndTime);// 0x1434b2d80041
	void ClientNotifyMonsterSpawn();// 0x1433b2d80041
	byte CalculateTeamNum();// 0x1432b2d80041
	void BroadcastDeath(FString KillerPlayerID, FString KillerName, FString WeaponType, FString KilledPlayerID, FString KilledName, bool bDie, bool bHeadHit, byte KillerTeamId, byte KilledTeamId, int InWeaponSkinID, int KillerFlag, int KilledFlag);// 0x1431b2d80041

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x27c, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x284, Size: 0x8]
	int ElapsedTime;//[Offset: 0x28c, Size: 0x4]
	void OnRep_MatchState();// 0x1430b2d80041
	void OnRep_ElapsedTime();// 0x142fb2d80041

--------------------------------
Class: SolarPlayerState.PlayerState.Info.Actor.Object
	delegate OnTeammatePlayerStateRepDelegate;//[Offset: 0x328, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;//[Offset: 0x338, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate;//[Offset: 0x348, Size: 0x10]
	delegate OnPlayerChangedGoldsDelegate;//[Offset: 0x358, Size: 0x10]
	int CharacterId;//[Offset: 0x368, Size: 0x4]
	int SkinId;//[Offset: 0x36c, Size: 0x4]
	int BagId;//[Offset: 0x370, Size: 0x4]
	int CapsuleID;//[Offset: 0x374, Size: 0x4]
	int TailFlameID;//[Offset: 0x378, Size: 0x4]
	FString SolarPlayerId;//[Offset: 0x380, Size: 0x10]
	FString NickName;//[Offset: 0x390, Size: 0x10]
	uint32 BattleVoiceId;//[Offset: 0x3a0, Size: 0x4]
	byte TeamID;//[Offset: 0x3a4, Size: 0x1]
	uint64 UserId;//[Offset: 0x3a8, Size: 0x8]
	byte PosInTeam;//[Offset: 0x3b0, Size: 0x1]
	FString Side;//[Offset: 0x3b8, Size: 0x10]
	FString Job;//[Offset: 0x3c8, Size: 0x10]
	int CharacterLevel;//[Offset: 0x3d8, Size: 0x4]
	int AvatarID;//[Offset: 0x3dc, Size: 0x4]
	int Gender;//[Offset: 0x3e0, Size: 0x4]
	int FriendNum;//[Offset: 0x3e4, Size: 0x4]
	int RoleID;//[Offset: 0x3e8, Size: 0x4]
	int RoleUltimateSkillCDState;//[Offset: 0x3ec, Size: 0x4]
	int[] SettlementItems;//[Offset: 0x3f0, Size: 0x10]
	SettlementParam_ExtraRewardInfo[] ExtraRewards;//[Offset: 0x400, Size: 0x10]
	uint32 PlayerNumber;//[Offset: 0x410, Size: 0x4]
	int[] BackpackUnLockGridNumArr;//[Offset: 0x418, Size: 0x10]
	int[] StrategyConditionIDs;//[Offset: 0x428, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x438, Size: 0x4]
	<int,int> VehicleSkinData;//[Offset: 0x440, Size: 0x50]
	float CurrentHealth;//[Offset: 0x490, Size: 0x4]
	float MaxHealth;//[Offset: 0x494, Size: 0x4]
	ShieldInfo CurShieldInfo;//[Offset: 0x498, Size: 0x8]
	byte ReviveItemNum;//[Offset: 0x4a0, Size: 0x1]
	int TalentID;//[Offset: 0x4a4, Size: 0x4]
	enum TalentState;//[Offset: 0x4a8, Size: 0x1]
	bool HasBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1]
	bool HasGroupBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 0x1]
	Vector2D MarkedPointInNavMap;//[Offset: 0x4ac, Size: 0x8]
	Vector SelfLastVehicleLocation;//[Offset: 0x4b4, Size: 0xc]
	Vector TeamLastVehicleLocation;//[Offset: 0x4c0, Size: 0xc]
	byte CurrentPlayerStateInGame;//[Offset: 0x4cc, Size: 0x1]
	byte CurrentCharacterStateInGame;//[Offset: 0x4cd, Size: 0x1]
	WorldMarkData MarkedWorldData;//[Offset: 0x4d0, Size: 0x40]
	int AccountFlag;//[Offset: 0x510, Size: 0x4]
	FString OS;//[Offset: 0x518, Size: 0x10]
	bool bIsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	bool HasReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	float HangUpTime;//[Offset: 0x534, Size: 0x4]
	uint32 Elo;//[Offset: 0x538, Size: 0x4]
	uint32 RankLevel;//[Offset: 0x53c, Size: 0x4]
	uint32 RankLevel2;//[Offset: 0x540, Size: 0x4]
	byte LobbyTeamMemberNum;//[Offset: 0x544, Size: 0x1]
	bool bTeamIDHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	int RepliableMessageID;//[Offset: 0x56c, Size: 0x4]
	float RepliableMessageStartTime;//[Offset: 0x570, Size: 0x4]
	bool bIsOBPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1]
	delegate OnSpectateInfoRep;//[Offset: 0x578, Size: 0x10]
	SolarPlayerState* KillerPlayerState;//[Offset: 0x588, Size: 0x8]
	SolarSpectateInfo* SpectateInfo;//[Offset: 0x590, Size: 0x8]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	bool isPlayerBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 0x1]
	enum NetStateInGame;//[Offset: 0x59a, Size: 0x1]
	int KillNum;//[Offset: 0x59c, Size: 0x4]
	int AssistNum;//[Offset: 0x5a0, Size: 0x4]
	Vector DeathPos;//[Offset: 0x5a4, Size: 0xc]
	int ReconnectNum;//[Offset: 0x5b0, Size: 0x4]
	float MultiKillDurationTime;//[Offset: 0x5c4, Size: 0x4]
	SettlementTempData SettleSyncData;//[Offset: 0x5d0, Size: 0x88]
	SolarPlayerState*[] TeammatesState;//[Offset: 0x658, Size: 0x10]
	int PlayerRank;//[Offset: 0x668, Size: 0x4]
	int TeamRank;//[Offset: 0x66c, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]
	float MvpScore;//[Offset: 0x674, Size: 0x4]
	float KDA;//[Offset: 0x678, Size: 0x4]
	int CharacterExp;//[Offset: 0x680, Size: 0x4]
	int AccountExp;//[Offset: 0x684, Size: 0x4]
	Vector CharacterLocation;//[Offset: 0x688, Size: 0xc]
	int Gold;//[Offset: 0x694, Size: 0x4]
	int Zomborg;//[Offset: 0x698, Size: 0x4]
	int ZomborgExtra;//[Offset: 0x69c, Size: 0x4]
	int WarmId;//[Offset: 0x6a0, Size: 0x4]
	int WarmType;//[Offset: 0x6a4, Size: 0x4]
	int[] CostedGolds;//[Offset: 0x6a8, Size: 0x10]
	int[] ReceivedGolds;//[Offset: 0x6b8, Size: 0x10]
	int InteractValue;//[Offset: 0x6c8, Size: 0x4]
	float LastInteractTime;//[Offset: 0x6cc, Size: 0x4]
	float DamageFactor;//[Offset: 0x6d0, Size: 0x4]
	float VehicleProbability;//[Offset: 0x6d4, Size: 0x4]
	ExposeLocationMap ExposeLocationMap;//[Offset: 0x6f0, Size: 0x58]
	SolarPlayerState*[] ExposeLocationArray;//[Offset: 0x748, Size: 0x10]
	Vector PlayerLocation;//[Offset: 0x758, Size: 0xc]
	SolarPlayerState* ExposeTo;//[Offset: 0x768, Size: 0x8]
	enum SkydivingState;//[Offset: 0x770, Size: 0x1]
	byte SkydivingLeaderPosInTeam;//[Offset: 0x771, Size: 0x1]
	byte SkydivingFollowFormationPos;//[Offset: 0x772, Size: 0x1]
	SolarAchievementComponent* AchievementComponent;//[Offset: 0x778, Size: 0x8]
	int[] PreCompletedAchievementIDs;//[Offset: 0x788, Size: 0x10]
	int PlayerLevel;//[Offset: 0x798, Size: 0x4]
	int PlayerExperience;//[Offset: 0x79c, Size: 0x4]
	bool WillFollowMovementOfSkydivingLeader();// 0x158fb2d80041
	void SynchronizePlayerStateInGame(enum InEPlayerStateInGame, bool InIfOrNot);// 0x158eb2d80041
	void SynchronizeCharacterStateInGame(enum InECharacterStateInGame, bool InIfOrNot);// 0x158db2d80041
	void StatVehicleDriveTypeLuaCall(int DriveType);// 0x158cb2d80041
	void StatVehicleDriveType(int DriveType);// 0x158bb2d80041
	void ShowTeammatesHUD(out const SolarPlayerState*[] TeammateStates, SolarPlayerState* InSpectateTargetPlayerState);// 0x158ab2d80041
	void SetRoleUltimateSkillCDState(const int NewState);// 0x1589b2d80041
	void SetRoleID(const int InRoleID);// 0x1588b2d80041
	void SetPlayerNetStateInGame(enum InPlayerNetStateInGame);// 0x1587b2d80041
	void SetIsSameTeamWithLocalPlayer(bool bIsSameTeam);// 0x1586b2d80041
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);// 0x1585b2d80041
	void ServerUnexposeLocationToOtherOnce(SolarPlayerState* OtherPS);// 0x1584b2d80041
	void ServerUnexposeLocationToOther(SolarPlayerState* OtherPS);// 0x1583b2d80041
	void ServerExposeLocationToOther(SolarPlayerState* OtherPS);// 0x1582b2d80041
	void ServerChangeRoleID(const int InRoleID);// 0x1581b2d80041
	void ReviseWeaponExp(int weaponid, int WeaponExp, int CurLevel, int CurExp);// 0x1580b2d80041
	void ReceiveTeamIdReplicated();// 0x157fb2d80041
	void ReceiveTalentStateSet(enum InState);// 0x157db2d80041
	void ReceiveTalentIDReplication(enum RepType, PlayerState* ClientOwnerPS);// 0x157cb2d80041
	void ReceivePostInitializeComponents();// 0x157bb2d80041
	bool ReceiveGold(const int InReceivedGold, const bool NeedSyncToServer);// 0x157ab2d80041
	void ReceiveClientInitialize(Controller* C);// 0x1579b2d80041
	bool PlayerCanRebirthByReviveItem();// 0x1578b2d80041
	bool PlayerCanRebirthBlueprint();// 0x1577b2d80041
	bool PlayerCanRebirth();// 0x1576b2d80041
	void OnUpdatedPlayerStateLoginData();// 0x1575b2d80041
	void OnTeammatePlayerStateRepDelegate__DelegateSignature();// 0x1574b2d80041
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(out const byte InPosInTeam, bool InIsLastOne);// 0x1573b2d80041
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x1572b2d80041
	void OnSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1571b2d80041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1570b2d80041
	void OnRep_UserId();// 0x156fb2d80041
	void OnRep_TeammatesState();// 0x156eb2d80041
	void OnRep_TeamLastVehicleLocation();// 0x156db2d80041
	void OnRep_TeamId();// 0x156cb2d80041
	void OnRep_TalentID();// 0x156bb2d80041
	void OnRep_SpectateInfo();// 0x156ab2d80041
	void OnRep_SkydivingState();// 0x1569b2d80041
	void OnRep_SkydivingLeaderPosInTeam();// 0x1568b2d80041
	void OnRep_SkinId();// 0x1567b2d80041
	void OnRep_Side();// 0x1566b2d80041
	void OnRep_SelfLastVehicleLocation();// 0x1565b2d80041
	void OnRep_RoleUltimateSkillCDState();// 0x1564b2d80041
	void OnRep_RoleID();// 0x1563b2d80041
	void OnRep_ReviveItemNum();// 0x1562b2d80041
	void OnRep_RepliableMsg();// 0x1561b2d80041
	void OnRep_PosInTeam(out const byte InLastPosInTeam);// 0x1560b2d80041
	void OnRep_PlayerLocation();// 0x155fb2d80041
	void OnRep_PlayerLevel();// 0x155eb2d80041
	void OnRep_NetStateInGame();// 0x155db2d80041
	void OnRep_MaxHealth();// 0x155cb2d80041
	void OnRep_MarkedWorldData();// 0x155bb2d80041
	void OnRep_MarkedPointInNavMap();// 0x155ab2d80041
	void OnRep_KillNum();// 0x1559b2d80041
	void OnRep_Job();// 0x1558b2d80041
	void OnRep_Gold();// 0x1557b2d80041
	void OnRep_ExposeLocationArray();// 0x1556b2d80041
	void OnRep_CurShieldInfo(out const ShieldInfo InLastShieldInfo);// 0x1554b2d80041
	void OnRep_CurrentPlayerStateInGame(out const byte InLastPlayerStateInGame);// 0x1553b2d80041
	void OnRep_CurrentHealth();// 0x1552b2d80041
	void OnRep_CurrentCharacterStateInGame(out const byte InLastCharacterStateInGame);// 0x1551b2d80041
	void OnRep_CharacterId();// 0x1550b2d80041
	void OnRep_BattleVoiceId();// 0x154fb2d80041
	void OnRep_BackpackUnLockGridNumArr();// 0x154eb2d80041
	void OnRep_AccountFlag();// 0x154db2d80041
	void OnRefreshReviveInfo();// 0x154cb2d80041
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x154bb2d80041
	FString OnPlayerUpgrade(int NewLevel, bool bFromServer);// 0x154ab2d80041
	void OnPlayerUpdateStatData(enum InType);// 0x1549b2d80041
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp);// 0x1548b2d80041
	void OnOtherPlayerBeginSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1547b2d80041
	void NotifyUpdateTeamMateLevelUI();// 0x1546b2d80041
	bool NeedPerformSpectateInfoOnSimulate();// 0x1545b2d80041
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1543b2d80041
	bool IsUnfollowShortcutEnabled();// 0x1542b2d80041
	bool IsTeammateWith(const SolarPlayerState* Other);// 0x1541b2d80041
	bool IsSpectatingOtherPlayer();// 0x1540b2d80041
	bool IsSkydivingLeader();// 0x153fb2d80041
	bool IsSkydivingCompleted();// 0x153eb2d80041
	bool IsSkydiving();// 0x153db2d80041
	bool IsSameTeamWithReferToPlayer();// 0x153cb2d80041
	bool IsSameTeamWithLocalPlayer();// 0x153bb2d80041
	bool IsPreStartSkydiving();// 0x153ab2d80041
	bool IsPlayerTeam();// 0x1539b2d80041
	bool IsPlayerOnline();// 0x1538b2d80041
	bool IsPlayerOffline();// 0x1537b2d80041
	bool IsPlayer();// 0x1536b2d80041
	bool IsOfflinePlayer();// 0x1535b2d80041
	bool IsOBPlayer();// 0x1534b2d80041
	bool IsMySkydivingLeader(int LeaderPosInTeam);// 0x1533b2d80041
	bool IsMonster();// 0x1532b2d80041
	bool IsLocalPlayerSpectatingMe();// 0x1531b2d80041
	bool IsForeverPlayerLogout();// 0x1530b2d80041
	bool IsBeingSpectated();// 0x152fb2d80041
	bool IsAIPlayer();// 0x152eb2d80041
	void HideTeammatesHUD(out const SolarPlayerState*[] TeammateStates);// 0x152db2d80041
	bool HasSkydivingLeader();// 0x152cb2d80041
	int GetVehicleSkinID(int VehicleID);// 0x152bb2d80041
	FString GetUserID();// 0x152ab2d80041
	void GetTeammatePlayers(bool bIncludingSelf, out SolarPlayerState*[] OutTeammates);// 0x1529b2d80041
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x1528b2d80041
	SolarGameModeStatisticsComponent* GetStatComponent();// 0x1527b2d80041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1526b2d80041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1525b2d80041
	SolarSpectateInfo* GetSpectateInfo();// 0x1524b2d80041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x1523b2d80041
	SolarPlayerController* GetSolarPlayerController();// 0x1522b2d80041
	SolarCharacter* GetSolarCharacter();// 0x1521b2d80041
	SolarCharacter* GetPossessedCharacter();// 0x1520b2d80041
	PlayerStatisticsData* GetPlayerStatData();// 0x151fb2d80041
	enum GetPlayerNetState();// 0x151db2d80041
	FString GetPlayerNameWithoutUID();// 0x151cb2d80041
	void GetNotSettlementItems(out SolarItemData[] Items);// 0x1519b2d80041
	bool GetIsPlayerBattleEnd();// 0x1518b2d80041
	float GetExpSettleModePunishRatio();// 0x1517b2d80041
	float GetCurrentTalentCDDuration();// 0x1516b2d80041
	float GetCurrentTalentActiveDuration();// 0x1515b2d80041
	Vector GetCharacterLocation();// 0x1514b2d80041
	void GetCanSettlementItems(out int[] Items);// 0x1513b2d80041
	FString[] GetBuyResurrectionSavedTeammateNameArr();// 0x1512b2d80041
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x1511b2d80041
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x1510b2d80041
	bool CostGold(const int InCostedGold, const bool NeedSyncToServer);// 0x150fb2d80041
	void ClientNotifyKillNumChanged(const int KillNumber, const int SpreesNum);// 0x150eb2d80041
	void ClearTeammatesMark();// 0x150db2d80041
	bool CheckIfTeamLastVehicleLocationValid();// 0x150cb2d80041
	bool CheckIfTeamIdValid();// 0x150bb2d80041
	bool CheckIfSelfLastVehicleLocationValid();// 0x150ab2d80041
	bool CheckIfPosInTeamValid();// 0x1509b2d80041
	bool CheckIfMarkedPointInNavMapValid();// 0x1508b2d80041
	bool CheckIfInactive();// 0x1507b2d80041
	bool CheckIfBeInSpecifiedPlayerState(enum InEPlayerStateInGame);// 0x1505b2d80041
	bool CheckIfBeInSpecifiedCharacterState(enum InECharacterStateInGame);// 0x1503b2d80041
	bool CheckIfBattleVoiceIdValid();// 0x1502b2d80041
	bool CheckGoldIsEnough(const int InCostedGold);// 0x1501b2d80041
	bool CanAcceptSkydivingLeaderTransferRequest(const SolarPlayerState* RequesterPlayerState);// 0x1500b2d80041
	bool CanAcceptSkydivingFollowRequest(const SolarPlayerState* RequesterPlayerState);// 0x14ffb2d80041
	bool CanAcceptSkydivingFollowInvitation(const SolarPlayerState* InviterPlayerState);// 0x14feb2d80041
	int CalculateZomborg();// 0x14fdb2d80041
	void CalculateKDA();// 0x14fcb2d80041
	void CalculateItemRewards();// 0x14fbb2d80041
	float CalculateCharacterExp();// 0x14fab2d80041
	float CalculateAccountExp();// 0x14f9b2d80041
	void AssignReplaceTeamPosBySide(FString InSide);// 0x14f8b2d80041
	void AssignPosInTeamBySide();// 0x14f7b2d80041
	void AssignPosInTeam();// 0x14f6b2d80041

--------------------------------
Class: SettlementParam_ExtraRewardInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	FString LocVariable;//[Offset: 0x8, Size: 0x10]
	FString Content;//[Offset: 0x18, Size: 0x10]
	FString ItemList;//[Offset: 0x28, Size: 0x10]
	int Order;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ShieldInfo
	int ShieldID;//[Offset: 0x0, Size: 0x4]
	float CurValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WorldMarkData
	Vector WorldPos;//[Offset: 0x0, Size: 0xc]
	Vector2D ScreenCoordinate;//[Offset: 0xc, Size: 0x8]
	enum Type;//[Offset: 0x14, Size: 0x1]
	int ItemID;//[Offset: 0x18, Size: 0x4]
	int64 ItemInstanceId;//[Offset: 0x20, Size: 0x8]
	int NameLocID;//[Offset: 0x28, Size: 0x4]
	FString IconImg;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SolarSpectateInfo.Actor.Object
	delegate OnBeginUpdateSpectateInfo;//[Offset: 0x230, Size: 0x10]
	delegate OnStopUpdateSpectateInfo;//[Offset: 0x240, Size: 0x10]
	delegate OnOtherPlayerBeginSpectateMe;//[Offset: 0x250, Size: 0x10]
	delegate OnOtherPlayerStopSpectateMe;//[Offset: 0x260, Size: 0x10]
	delegate OnBeforeSpectateTargetChanged;//[Offset: 0x270, Size: 0x10]
	delegate OnSpectateTargetChanged;//[Offset: 0x280, Size: 0x10]
	delegate OnBeginSpectateMode;//[Offset: 0x290, Size: 0x10]
	delegate OnEndSpectateMode;//[Offset: 0x2a0, Size: 0x10]
	delegate OnSwitchSpectateTargetFailed;//[Offset: 0x2b0, Size: 0x10]
	delegate OnSpectatorOfMyTargetChanged;//[Offset: 0x2c0, Size: 0x10]
	delegate OnSpectateInfoOfMyTargetReadied;//[Offset: 0x2d0, Size: 0x10]
	SpectatingOthersInfo SpectatingOthersInfo;//[Offset: 0x2e0, Size: 0x60]
	<SolarPlayerState*> SpectatingMePlayerStates;//[Offset: 0x340, Size: 0x50]
	SolarReplayManager* ReplayManager;//[Offset: 0x390, Size: 0x8]
	int LikeValue;//[Offset: 0x3a0, Size: 0x4]
	<FString,int> SendGiftPlayerMap;//[Offset: 0x3a8, Size: 0x50]
	GiftSenderInfo[] SendGiftPlayerInfo;//[Offset: 0x3f8, Size: 0x10]
	Rotator PlayerCameraRotation;//[Offset: 0x408, Size: 0xc]
	ReplicateItemData[] CharacterBackpackItems;//[Offset: 0x418, Size: 0x10]
	void SetSpectateTargetForPlayingReplay(SolarPlayerState* TargetPlayerState);// 0x14e3b2d80041
	void ServerStopSpectateOtherPlayer_Internal();// 0x14e2b2d80041
	void ServerStopSpectateOtherPlayer();// 0x14e1b2d80041
	void ServerSpectatePreviousPlayer();// 0x14e0b2d80041
	void ServerSpectateNextPlayer();// 0x14dfb2d80041
	void ServerSetSpectateConditions_Internal(const SpectateConditions InSpectateConditions);// 0x14deb2d80041
	void ServerSetSpectateConditions(out const SpectateConditions InSpectateConditions);// 0x14ddb2d80041
	void ServerSetPlayerCameraRotation(const Rotator Rotation);// 0x14dcb2d80041
	void ServerSendGiftAction(const int GiftID, const int Num);// 0x14dbb2d80041
	void ServerChangeLikeValue(const int Value, const int AddInteractValue, enum ActionType);// 0x14dab2d80041
	void ServerBeginSpectateOtherPlayer_Internal(SolarPlayerState* SpecTargetPlayerState);// 0x14d9b2d80041
	void ServerBeginSpectateOtherPlayer(SolarPlayerState* SpecTargetPlayerState);// 0x14d8b2d80041
	void SendGift(const int GiftID, const int Num);// 0x14d7b2d80041
	void OnTargetSpecInfoSetToItsPlayerState(SolarSpectateInfo* TargetSpecInfo);// 0x14d6b2d80041
	void OnSwitchSpectateTargetFailed__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x14d5b2d80041
	void OnStopUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x14d4b2d80041
	void OnStopRecordingReplay();// 0x14d3b2d80041
	void OnStartRecordingReplay();// 0x14d2b2d80041
	void OnSpectatorOfMyTargetChanged__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x14d1b2d80041
	void OnSpectateTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x14d0b2d80041
	void OnSpectateInfoOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x14cfb2d80041
	void OnRep_LikeValue();// 0x14ceb2d80041
	void OnRep_CharacterBackpackItems();// 0x14cdb2d80041
	void OnOtherPlayerStopSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x14ccb2d80041
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x14cbb2d80041
	void OnLikeActionCalled(const int Value, const int AddInteractValue, enum ActionType);// 0x14cab2d80041
	void OnGiftActionCalled(const int GiftID, const int Num);// 0x14c9b2d80041
	void OnEndSpectateMode__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x14c8b2d80041
	void OnBeginUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x14c7b2d80041
	void OnBeginSpectateMode__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x14c6b2d80041
	void OnBeforeSpectateTargetChanged__DelegateSignature(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x14c5b2d80041
	bool NeedUpdateSpectateInfo();// 0x14c4b2d80041
	bool IsSpectatingOtherPlayer();// 0x14c3b2d80041
	bool IsRecordingReplay();// 0x14c2b2d80041
	bool IsLocalPlayerSpectatingMe();// 0x14c1b2d80041
	bool IsBeingSpectated();// 0x14c0b2d80041
	<SolarPlayerState*> GetSpectatorsOfMyTarget();// 0x14bfb2d80041
	<SolarPlayerState*> GetSpectatingMePlayerStates();// 0x14beb2d80041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x14bdb2d80041
	SolarCharacter* GetSpectateTargetCharacter();// 0x14bcb2d80041
	SolarSpectateInfo* GetSpectateInfoOfMyTarget();// 0x14bbb2d80041
	SpectateConditions GetSpectateConditions();// 0x14b9b2d80041
	SolarPlayerState* GetSolarPlayerState();// 0x14b8b2d80041
	void ClientSetSpectatorsOfMyTarget(const SolarPlayerState*[] SpectatorsOfMyTarget);// 0x14b7b2d80041
	void ClientSetSpectatingOthersInfo(SolarPlayerState* TargetPS, SolarCharacter* TargetCharacter, const SolarPlayerState*[] SpectatorsOfMyTarget);// 0x14b6b2d80041
	void ClientSetServerRecording(bool bInServerRecording);// 0x14b5b2d80041
	void ClientSendSwitchSpectateTargetFailed();// 0x14b4b2d80041
	void ClientRemoveSpectatingMePlayer(SolarPlayerState* Player);// 0x14b3b2d80041
	void ClientNotifySelfLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x14b2b2d80041
	void ClientNotifyLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x14b0b2d80041
	void ClientAddSpectatingMePlayer(SolarPlayerState* Player);// 0x14afb2d80041
	bool CanISpectate(const SolarPlayerState* Target);// 0x14aeb2d80041

--------------------------------
Class: SpectatingOthersInfo
	SolarPlayerState* SpectateTargetPlayerState;//[Offset: 0x0, Size: 0x8]
	SolarCharacter* SpectateTargetCharacter;//[Offset: 0x8, Size: 0x8]
	<SolarPlayerState*> SpectatorsOfMyTarget;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: GiftSenderInfo
	int Gold;//[Offset: 0x0, Size: 0x4]
	int Diamond;//[Offset: 0x4, Size: 0x4]
	FString playerName;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SpectateConditions
	bool bCanBeSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanBeSpectateByHostilePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanBeSpectateByFriendlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanISpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: SettlementTempData
	int TotalAccountExp;//[Offset: 0x0, Size: 0x4]
	int AccountLevel;//[Offset: 0x4, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x58, Size: 0x4]
	int CurCharacterExp;//[Offset: 0x5c, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x64, Size: 0x4]
	int RankAfterScore;//[Offset: 0x68, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x6c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x70, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x74, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x78, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x7c, Size: 0x4]
	int RankLegend;//[Offset: 0x80, Size: 0x4]
	byte RankProtectType;//[Offset: 0x84, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]

--------------------------------
Class: ExposeLocationMap
	<SolarPlayerState*,int> InnerMap;//[Offset: 0x0, Size: 0x50]
	SolarPlayerState* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SolarAchievementComponent.ActorComponent.Object
	DataTable* AchievementConfig;//[Offset: 0xb8, Size: 0x8]
	AchievementFormula* AchievementFormula;//[Offset: 0xc0, Size: 0x8]
	class AchievementFormula* AchievementFormulaClass;//[Offset: 0xc8, Size: 0x8]
	<int,AchievementResult> AllStatisticAchievement;//[Offset: 0x1c8, Size: 0x50]
	void UnlockAchievement(int InAchievementID);// 0x37feb2d80041
	void SetAchievementValue(int InAchievementID, int InUpdateValue);// 0x37fdb2d80041
	void NotifyAchievementUpdatedByID(int InAchievementID);// 0x37fcb2d80041
	bool IsAchievementCompleted(int InAchievementID);// 0x37fbb2d80041
	void IncreaseAchievementValue(int InAchievementID, int InUpdateValue);// 0x37fab2d80041
	int GetAchievementValue(int InAchievementID);// 0x37f9b2d80041

--------------------------------
Class: AchievementFormula.Actor.Object
	SolarAchievementComponent* GetAchievementComponent();// 0x37f8b2d80041

--------------------------------
Class: AchievementResult
	int AchievementID;//[Offset: 0x0, Size: 0x4]
	int ProgressValue;//[Offset: 0x4, Size: 0x4]
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum AchievementReportType;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SolarGameModeStatisticsComponent.GameModeCompBase.ActorComponent.Object
	<FString,PlayerStatisticsData*> AllPlayerStatData;//[Offset: 0xe0, Size: 0x50]
	enum[] SpecialFuncTag;//[Offset: 0x130, Size: 0x10]
	int GetWeaponSettlmentExp(int weaponid, PlayerStatisticsData* InPSD, SolarPlayerState* InPS);// 0x3c89b2d80041
	PlayerStatisticsData* GetPlayerStatData(FString InPlayerId);// 0x3c88b2d80041

--------------------------------
Class: GameModeCompBase.ActorComponent.Object
	bool bPreStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bTakeChargeStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bPostStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bPreHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool bTakeChargeHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]
	bool bPostHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bPreRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	bool bTakeChargeRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 0x1]
	bool bPostRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool bPreEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 0x1]
	bool bTakeChargeEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bPostEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	void PreStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x3309b2d80041
	void PreRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x3308b2d80041
	void PreHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x3307b2d80041
	void PreGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x3306b2d80041
	void PreGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x3305b2d80041
	void PreGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x3304b2d80041
	void PreGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x3303b2d80041
	void PreEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x3302b2d80041
	void PostStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x3301b2d80041
	void PostRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x3300b2d80041
	void PostHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x32ffb2d80041
	void PostGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x32feb2d80041
	void PostGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x32fdb2d80041
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x32fcb2d80041
	void PostGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x32fbb2d80041
	void PostEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x32fab2d80041
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x32f9b2d80041
	void OnGameModeRestartPlayer(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x32f8b2d80041
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x32f7b2d80041
	void OnGameModeEndPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x32f6b2d80041
	SolarGameMode* GetGameModeOwner();// 0x32f5b2d80041

--------------------------------
Class: SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate PreStartPlay;//[Offset: 0x318, Size: 0x10]
	delegate CalledStartPlay;//[Offset: 0x328, Size: 0x10]
	delegate PostStartPlay;//[Offset: 0x338, Size: 0x10]
	delegate PreHandleMatchHasStarted;//[Offset: 0x348, Size: 0x10]
	delegate CalledHandleMatchHasStarted;//[Offset: 0x358, Size: 0x10]
	delegate PostHandleMatchHasStarted;//[Offset: 0x368, Size: 0x10]
	delegate PreRestartPlayer;//[Offset: 0x378, Size: 0x10]
	delegate CalledRestartPlayer;//[Offset: 0x388, Size: 0x10]
	delegate PostRestartPlayer;//[Offset: 0x398, Size: 0x10]
	delegate PreEndPlay;//[Offset: 0x3a8, Size: 0x10]
	delegate CalledEndPlay;//[Offset: 0x3b8, Size: 0x10]
	delegate PostEndPlay;//[Offset: 0x3c8, Size: 0x10]
	GameModeCompBase*[] GameModeComponents;//[Offset: 0x3d8, Size: 0x10]
	int GamePlayMode;//[Offset: 0x3ec, Size: 0x4]
	class Actor[] ManagerClasses;//[Offset: 0x3f0, Size: 0x10]
	FString CharacterClassPath;//[Offset: 0x400, Size: 0x10]
	int CharacterIdInTrainningCourse;//[Offset: 0x410, Size: 0x4]
	int SkinIdInTrainningCourse;//[Offset: 0x414, Size: 0x4]
	int BagIdInTrainingCourse;//[Offset: 0x418, Size: 0x4]
	bool bManuallyModifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int SpecifiedCharacterSkinID;//[Offset: 0x420, Size: 0x4]
	bool bManuallyModifyCharacterBagId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int SpecifiedCharacterBagID;//[Offset: 0x428, Size: 0x4]
	bool bManuallyModifyCharacterBagTrailId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	int SpecifiedCharacterBagTrailID;//[Offset: 0x430, Size: 0x4]
	delegate OnPostSpawnDefaultSolarCharacterAtTransform;//[Offset: 0x438, Size: 0x10]
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x448, Size: 0x8]
	SolarGameModeStatisticsComponent* StatComponent;//[Offset: 0x450, Size: 0x8]
	float[] RadarBrokenRadios;//[Offset: 0x458, Size: 0x10]
	void UpdatePlayerState(FString PlayerId, int CharacterId, int SkinId, int CharacterLevel);// 0x1833b2d80041
	void UpdatePlayerDataForBotAI(int AIConfigID, SolarPlayerState* PlayerState);// 0x1832b2d80041
	void UpdatePlayerData(int CharacterSkinID, int CharacterBagID, int CharacterBagTrailID, SolarPlayerState* PlayerState);// 0x1831b2d80041
	void UpdateBackpackData(FString PlayerId, int Grade, int NewUnLockNum);// 0x1830b2d80041
	FString TryKickOutOnlinePlayer(FString PlayerId);// 0x182fb2d80041
	void StartFillUpBotAI();// 0x182eb2d80041
	void SetGamePlayMode(int InGamePlayMode);// 0x182db2d80041
	void SendHitMsgWithBool(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, bool bo);// 0x182cb2d80041
	void SendHitMsg(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, FString Params);// 0x182bb2d80041
	void RestartPlayerTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x182ab2d80041
	void RestartPlayerEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x1829b2d80041
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(Controller* NewPlayer, SolarCharacter* NewCharacter);// 0x1828b2d80041
	void NotifyItemStateChanged(const Actor* Item, const int State);// 0x1827b2d80041
	void KickOutPlayerToLobby(FString InPlayerId);// 0x1826b2d80041
	void KickOutAllPlayerToLobby();// 0x1825b2d80041
	void InitCharacterClassPath(int CharacterId);// 0x1824b2d80041
	FString GetMonsterClassPath(int AICharacterID);// 0x1823b2d80041
	void GetMonsterAISpawnSettings(int inPlayerTeamSize, out MonsterAISpawnSettings outMonsterAISpawnSettings);// 0x1821b2d80041
	int GetGamePlayMode();// 0x1820b2d80041
	GameModeGlobalSetting* GetGameModeSetting(const Object* WorldContextObject);// 0x181fb2d80041
	int GetBotAINumber();// 0x181eb2d80041
	void GameModeComponentTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x181db2d80041
	void GameModeComponentEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection);// 0x181cb2d80041
	void EndPlayTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x181bb2d80041
	void EndPlayEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x181ab2d80041

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2d0, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]
	int NumSpectators;//[Offset: 0x2dc, Size: 0x4]
	int NumPlayers;//[Offset: 0x2e0, Size: 0x4]
	int NumBots;//[Offset: 0x2e4, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2e8, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2ec, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f0, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f8, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x308, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x30c, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	void StartMatch();// 0x1819b2d80041
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x1818b2d80041
	void Say(FString Msg);// 0x1817b2d80041
	void RestartGame();// 0x1816b2d80041
	bool ReadyToStartMatch();// 0x1815b2d80041
	bool ReadyToEndMatch();// 0x1814b2d80041
	void K2_OnSetMatchState(FName NewState);// 0x1813b2d80041
	bool IsMatchInProgress();// 0x1812b2d80041
	bool HasMatchEnded();// 0x1811b2d80041
	FName GetMatchState();// 0x1810b2d80041
	void EndMatch();// 0x180fb2d80041
	void AbortMatch();// 0x180eb2d80041

--------------------------------
Class: SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	class SolarBotAIController* BotAIControllerClass;//[Offset: 0xd8, Size: 0x8]
	class SolarAIControllerBase* OfflinePlayerAIControllerClass;//[Offset: 0xe0, Size: 0x8]
	SolarGameMode* GameModeOwner;//[Offset: 0xe8, Size: 0x8]
	MonsterAISpawnSettings VolumeMonsterSpawnSettings;//[Offset: 0x108, Size: 0x68]
	bool EnableMonsterSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]

--------------------------------
Class: SolarBotAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	SolarBotLootComponent* BotLootComponent;//[Offset: 0x388, Size: 0x8]
	SolarPerceptionComponent* BotPerceptionComponent;//[Offset: 0x390, Size: 0x8]
	NavAgentProperties VehicleAgentProperties;//[Offset: 0x398, Size: 0x30]
	int UniqueSpawnerID;//[Offset: 0x3c8, Size: 0x4]
	BehaviorTree* BattleSubTree;//[Offset: 0x3d0, Size: 0x8]
	GameplayTag BattleSubTreeTag;//[Offset: 0x3d8, Size: 0x8]
	int DefaultDifficultyLevel;//[Offset: 0x3e0, Size: 0x4]
	float CharacterLookAtInterpSpeed;//[Offset: 0x3e4, Size: 0x4]
	float SimulatedCameraInterpSpeed;//[Offset: 0x3e8, Size: 0x4]
	bool bInitDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 0x1]
	int BotDefaultWeaponId;//[Offset: 0x3f0, Size: 0x4]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	BotFireConfig DefaultFireConfig;//[Offset: 0x3f8, Size: 0x10]
	BotFireConfig FireConfigToBot;//[Offset: 0x408, Size: 0x10]
	BotFireConfig VehicleFireConfig;//[Offset: 0x418, Size: 0x10]
	BotFireConfig VehicleFireConfigToBot;//[Offset: 0x428, Size: 0x10]
	float DamageFactorToVehicle;//[Offset: 0x438, Size: 0x4]
	float DamageFactorToBotVehicle;//[Offset: 0x43c, Size: 0x4]
	float BotAIAttackRange;//[Offset: 0x440, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0x444, Size: 0x4]
	bool bSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	BotBonusDropConfig BonusDropConfig;//[Offset: 0x44c, Size: 0x18]
	float MinimumDistanceForRepeatedBoarding;//[Offset: 0x464, Size: 0x4]
	enum BotAIType;//[Offset: 0x468, Size: 0x1]
	int BotFeature;//[Offset: 0x46c, Size: 0x4]
	Vector2D MovementVector;//[Offset: 0x470, Size: 0x8]
	Actor* AITarget;//[Offset: 0x4e8, Size: 0x8]
	SolarWarmTargetComponent* WarmTargetComponent;//[Offset: 0x518, Size: 0x8]
	delegate OnBotAIDeath;//[Offset: 0x520, Size: 0x10]
	SolarCharacter* PossessedCharacer;//[Offset: 0x548, Size: 0x8]
	SolarFollowingComponent* PathFollowingComp;//[Offset: 0x550, Size: 0x8]
	NgaiAIControllerComponent* NgaiComponent;//[Offset: 0x560, Size: 0x8]
	void UpdateDynamicSubtree();// 0x39d2b2d80041
	void UpdateCharacterRotate(float DeltaTime);// 0x39d1b2d80041
	void StopBehaviorTree();// 0x39d0b2d80041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x39cfb2d80041
	bool SetupBotAIDifficulty(int DifficultyLevel);// 0x39ceb2d80041
	void OnReset();// 0x39cdb2d80041
	void OnEnterLanding();// 0x39ccb2d80041
	void InitBotAIConfig();// 0x39cbb2d80041
	Actor* GetTargetEnemy();// 0x39cab2d80041
	SolarCharacter* GetSolarCharacter();// 0x39c9b2d80041
	byte GetMyTeamID();// 0x39c8b2d80041
	bool CanActivateVehicleAbility(int SeatIndex, int AbilityIndex);// 0x39c7b2d80041
	float CalculateScoreForAITarget(const Actor* AITargetActor);// 0x39c6b2d80041

--------------------------------
Class: SolarAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x358, Size: 0x8]
	AISenseConfig_Sight* SightConfig;//[Offset: 0x360, Size: 0x8]
	AISenseConfig_Damage* DamageSenseConfig;//[Offset: 0x368, Size: 0x8]
	int AICharacterID;//[Offset: 0x370, Size: 0x4]
	void DestroyCharacterCorpse();// 0x3827b2d80041

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f8, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f8, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f8, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f8, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x300, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x308, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x310, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x318, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x320, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x328, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x330, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x338, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x3826b2d80041
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3825b2d80041
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x3824b2d80041
	void SetMoveBlockDetection(bool bEnable);// 0x3823b2d80041
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x3822b2d80041
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x3821b2d80041
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x3820b2d80041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x381fb2d80041
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x381eb2d80041
	void K2_SetFocus(Actor* NewFocus);// 0x381db2d80041
	void K2_SetFocalPoint(Vector FP);// 0x381cb2d80041
	void K2_ClearFocus();// 0x381bb2d80041
	bool HasPartialPath();// 0x381ab2d80041
	PathFollowingComponent* GetPathFollowingComponent();// 0x3819b2d80041
	byte GetMoveStatus();// 0x3818b2d80041
	Vector GetImmediateMoveDestination();// 0x3817b2d80041
	Actor* GetFocusActor();// 0x3816b2d80041
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x3815b2d80041
	Vector GetFocalPoint();// 0x3814b2d80041
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x3813b2d80041
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3812b2d80041

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc8, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xf0, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x5443b2d80041
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x5442b2d80041
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x5441b2d80041
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x5440b2d80041
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x543fb2d80041
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x543eb2d80041
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x543db2d80041
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x543cb2d80041
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x543bb2d80041
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x543ab2d80041
	bool IsVectorValueSet(out const FName KeyName);// 0x5439b2d80041
	Vector GetValueAsVector(out const FName KeyName);// 0x5438b2d80041
	FString GetValueAsString(out const FName KeyName);// 0x5437b2d80041
	Rotator GetValueAsRotator(out const FName KeyName);// 0x5436b2d80041
	Object* GetValueAsObject(out const FName KeyName);// 0x5435b2d80041
	FName GetValueAsName(out const FName KeyName);// 0x5434b2d80041
	int GetValueAsInt(out const FName KeyName);// 0x5433b2d80041
	float GetValueAsFloat(out const FName KeyName);// 0x5432b2d80041
	byte GetValueAsEnum(out const FName KeyName);// 0x5431b2d80041
	class Object GetValueAsClass(out const FName KeyName);// 0x5430b2d80041
	bool GetValueAsBool(out const FName KeyName);// 0x542fb2d80041
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x542eb2d80041
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x542db2d80041
	void ClearValue(out const FName KeyName);// 0x542cb2d80041

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc8, Size: 0x8]
	void StopLogic(FString Reason);// 0x5427b2d80041
	void StartLogic();// 0x5426b2d80041
	void RestartLogic();// 0x5425b2d80041
	bool IsRunning();// 0x5424b2d80041
	bool IsPaused();// 0x5423b2d80041

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x5413b2d80041
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x5412b2d80041
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x5411b2d80041
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x5410b2d80041
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x540fb2d80041

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x5420b2d80041
	void AIIgnorePlayers();// 0x541fb2d80041

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x138, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x270, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x542ab2d80041
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x5429b2d80041
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CoolDownDuration, bool bAddToExistingDuration);// 0x5428b2d80041

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x548ab2d80041

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x22d4b2d80041
	Vector[] GetResultsAsLocations();// 0x22d3b2d80041
	Actor*[] GetResultsAsActors();// 0x22d2b2d80041
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x22d1b2d80041
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x22d0b2d80041
	float GetItemScore(int ItemIndex);// 0x22cfb2d80041
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x22cdb2d80041

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x53fdb2d80041

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x5491b2d80041
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x5490b2d80041
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x548fb2d80041
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x548eb2d80041
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x548db2d80041
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x548cb2d80041
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x548bb2d80041

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x541bb2d80041

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector HitLocation;//[Offset: 0x10, Size: 0xc]
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8]
	Actor* Instigator;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SolarBotLootComponent.ActorComponent.Object
	BehaviorTree* LootSubTree;//[Offset: 0xb8, Size: 0x8]
	GameplayTag LootSubTreeTag;//[Offset: 0xc0, Size: 0x8]
	float MoveCostFactor;//[Offset: 0xc8, Size: 0x4]
	float AssualtRifleBaseValue;//[Offset: 0xcc, Size: 0x4]
	float ShotgunBaseValue;//[Offset: 0xd0, Size: 0x4]
	float SubmachinegunBaseValue;//[Offset: 0xd4, Size: 0x4]
	float SniperBaseValue;//[Offset: 0xd8, Size: 0x4]
	float WeaponQualityValue;//[Offset: 0xdc, Size: 0x4]
	float AmmoBaseValue;//[Offset: 0xe0, Size: 0x4]
	float AmmoMatchFactor;//[Offset: 0xe4, Size: 0x4]
	float ShieldBaseValue;//[Offset: 0xe8, Size: 0x4]
	float ShieldQualityValue;//[Offset: 0xec, Size: 0x4]
	float JetpackModuleBaseValue;//[Offset: 0xf0, Size: 0x4]
	float JetpackModuleQualityValue;//[Offset: 0xf4, Size: 0x4]
	float MedkitBaseValue;//[Offset: 0xf8, Size: 0x4]
	float MedkitHPRatioFactor;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: SolarPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	float ThreatUpdateInterval;//[Offset: 0x188, Size: 0x4]
	float AttackTriggerThreshold;//[Offset: 0x18c, Size: 0x4]
	float CancelAttackTriggerThreshold;//[Offset: 0x190, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x194, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x198, Size: 0x4]
	float SwitchTargetDifferenceValue;//[Offset: 0x19c, Size: 0x4]
	float SightIncreaseBase;//[Offset: 0x1a0, Size: 0x4]
	float SightIncreaseDistanceFactor;//[Offset: 0x1a4, Size: 0x4]
	float SightDecreaseBase;//[Offset: 0x1a8, Size: 0x4]
	float SightDecreaseDistanceFactor;//[Offset: 0x1ac, Size: 0x4]
	float SightDecreaseMax;//[Offset: 0x1b0, Size: 0x4]
	float SightMaxValue;//[Offset: 0x1b4, Size: 0x4]
	float HearingAddBase;//[Offset: 0x1b8, Size: 0x4]
	float HearingAddDistanceFactor;//[Offset: 0x1bc, Size: 0x4]
	float HearingDecreasePerTick;//[Offset: 0x1c0, Size: 0x4]
	float HearingMaxValue;//[Offset: 0x1c4, Size: 0x4]
	float BotThreatFactor;//[Offset: 0x1c8, Size: 0x4]
	float PlayerThreatFactor;//[Offset: 0x1cc, Size: 0x4]
	float DeathVergeFactor;//[Offset: 0x1d0, Size: 0x4]
	bool bTargetSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	FName[] ForbiddenTags;//[Offset: 0x1d8, Size: 0x10]
	void UpdateSenseConfig();// 0x3ef6b2d80041
	void SetTargetSelectEnabled(bool bInEnable);// 0x3ef5b2d80041
	void SetForbiddenTags(out const FName[] Tags, bool bCleanExists);// 0x3ef4b2d80041
	void OnBotPercaptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x3ef3b2d80041
	void ClearCurrentThreat(bool bCleanBestTarget);// 0x3ef2b2d80041

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb8, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xe0, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x168, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x178, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x3ef1b2d80041
	void RequestStimuliListenerUpdate();// 0x3ef0b2d80041
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x3eefb2d80041
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x3eeeb2d80041
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3eedb2d80041
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3eecb2d80041
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3eebb2d80041
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x3eeab2d80041
	void ForgetAll();// 0x3ee9b2d80041

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: BotFireConfig
	float ShootDisperse;//[Offset: 0x0, Size: 0x4]
	float HitRate;//[Offset: 0x4, Size: 0x4]
	float ActiveDamageRate;//[Offset: 0x8, Size: 0x4]
	float ActiveDamageFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BotBonusDropConfig
	float ActiveTime;//[Offset: 0x0, Size: 0x4]
	float DeactiveTime;//[Offset: 0x4, Size: 0x4]
	int NumOfAmmo;//[Offset: 0x8, Size: 0x4]
	int KitId;//[Offset: 0xc, Size: 0x4]
	int NumOfKit;//[Offset: 0x10, Size: 0x4]
	int NumOfElectricity;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x108, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x3b5cb2d80041
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3b5bb2d80041
	Vector GetPathDestination();// 0x3b5ab2d80041
	byte GetPathActionType();// 0x3b59b2d80041

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x238, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x240, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2b9, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2bc, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2c0, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb8, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xd0, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xe0, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x549db2d80041
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x549cb2d80041
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x549bb2d80041
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x549ab2d80041

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x5494b2d80041
	void Finish(byte WithResult);// 0x5493b2d80041
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x5492b2d80041

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SolarWarmTargetComponent.ActorComponent.Object
	SolarPlayerController* WarmPlayerController;//[Offset: 0xb8, Size: 0x8]
	bool bEnableWarmClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bEnableWarmDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bExcludeHasEnemyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bExcludeHasEnemyBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bExcludeHasSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: SolarFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bEnableOffmeshDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float MinDetectInterval;//[Offset: 0x2a8, Size: 0x4]
	uint32 MaxDetectIteration;//[Offset: 0x2ac, Size: 0x4]
	Vector InitialOffmeshSolveExtent;//[Offset: 0x2b0, Size: 0xc]
	bool bEnableSolveBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	Actor* VehicleActor;//[Offset: 0x2f8, Size: 0x8]
	float SensorTraceDistance;//[Offset: 0x30c, Size: 0x4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float RightSensorAlpha;//[Offset: 0x314, Size: 0x4]
	float CentralSensorAlpha;//[Offset: 0x318, Size: 0x4]
	float LeftSensorAlpha;//[Offset: 0x31c, Size: 0x4]
	float SteeringAngle;//[Offset: 0x320, Size: 0x4]
	float VehicleSteeringSensitivity;//[Offset: 0x324, Size: 0x4]
	float BrakingForce;//[Offset: 0x328, Size: 0x4]
	float DecelerationDistance;//[Offset: 0x32c, Size: 0x4]
	float VehicleDecelerationSpeed;//[Offset: 0x330, Size: 0x4]
	float VehicleTurningSpeed;//[Offset: 0x334, Size: 0x4]
	float CheckReverseDistance;//[Offset: 0x338, Size: 0x4]
	float HoverCheckBlockSpeed;//[Offset: 0x33c, Size: 0x4]
	float WheeledCheckBlockSpeed;//[Offset: 0x340, Size: 0x4]
	float LeggedVehicleCheckBlockSpeed;//[Offset: 0x344, Size: 0x4]
	float CheckBlockTime;//[Offset: 0x34c, Size: 0x4]
	int TryReverseTimes;//[Offset: 0x358, Size: 0x4]
	float TryReverseDurationTime;//[Offset: 0x35c, Size: 0x4]
	float SolveBlockGoFrontTime;//[Offset: 0x368, Size: 0x4]
	bool bPathFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	void SetVehicle(Actor* VehicleActorIn);// 0x3b5fb2d80041
	void OnUpdatedCharacterLanded(out const HitResult Hit);// 0x3b5eb2d80041

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x270, Size: 0x8]
	Vector CrowdAgentMoveDirection;//[Offset: 0x278, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x3b5db2d80041

--------------------------------
Class: NgaiAIControllerComponent.ActorComponent.Object
	SolarCharacterBase* EnemyCharacterBase;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: MonsterAISpawnSettings
	int MonsterGroupSizeMin;//[Offset: 0x0, Size: 0x4]
	int MonsterGroupSizeMax;//[Offset: 0x4, Size: 0x4]
	int NumberMonsterGroupMin;//[Offset: 0x8, Size: 0x4]
	int NumberOfMonsterGroupMax;//[Offset: 0xc, Size: 0x4]
	float MonsterSpawnCoolDown;//[Offset: 0x10, Size: 0x4]
	float MonsterSpawnStartTime;//[Offset: 0x14, Size: 0x4]
	<int,float> MonsterGroupProbabilities;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: GameModeGlobalSetting.Object
	delegate OnGlobalSettingChanged;//[Offset: 0x28, Size: 0x10]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 0x4]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 0x4]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 0x1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	float MinHPToLock;//[Offset: 0x50, Size: 0x4]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x57, Size: 0x1]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x3478b2d80041
	void SetTeamDamageEnabled(bool bNewValue);// 0x3477b2d80041
	void SetShowVehicleOnMap(bool bNewValue);// 0x3476b2d80041
	void SetMinHPToLock(float NewValue);// 0x3475b2d80041
	void SetMinHPLockEnabled(bool bNewValue);// 0x3474b2d80041
	void SetKillPlayerWhenOut(bool bNewValue);// 0x3473b2d80041
	void SetJetCostEnabled(bool bNewValue);// 0x3472b2d80041
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x3471b2d80041
	void SetGameCanRebirth(bool bNewValue);// 0x3470b2d80041
	void SetEnergyCostEnabled(bool bNewValue);// 0x346fb2d80041
	void SetDamageEnabled(bool bNewValue);// 0x346eb2d80041
	void SetCanVJetInWater(bool bNewValue);// 0x346db2d80041
	void SetCanLoginBattle(bool bNewValue);// 0x346cb2d80041
	void SetCanHJetInWater(bool bNewValue);// 0x346bb2d80041
	void SetBigMapEnabled(bool bNewValue);// 0x346ab2d80041
	void ReceiveSettingChanged();// 0x3469b2d80041
	bool IsVJetCDOverriden();// 0x3468b2d80041
	bool IsTeamDamageEnabled();// 0x3467b2d80041
	bool IsSkydiveFollowMovementEnabled();// 0x3466b2d80041
	bool IsShowVehicleOnMap();// 0x3465b2d80041
	bool IsMinHPLockEnabled();// 0x3464b2d80041
	bool IsKillPlayerWhenOut();// 0x3463b2d80041
	bool IsJetCostEnabledEnabled();// 0x3462b2d80041
	bool IsHJetCDOverriden();// 0x3461b2d80041
	bool IsGameCanRebirth();// 0x3460b2d80041
	bool IsGameCanLoginBattle();// 0x345fb2d80041
	bool IsEnergyCostEnabled();// 0x345eb2d80041
	bool IsDestroyWeaponOnDiscard();// 0x345db2d80041
	bool IsDestroyItemOnDiscard();// 0x345cb2d80041
	bool IsDamageEnabled();// 0x345bb2d80041
	bool IsBigMapEnabled();// 0x345ab2d80041
	enum GetWeaponInfiniteAmmoMode();// 0x3459b2d80041
	float GetOverridenVJetCD();// 0x3458b2d80041
	float GetOverridenHJetCD();// 0x3457b2d80041
	float GetMinHPToLock();// 0x3456b2d80041
	enum GetJetAltitudeLimitationMode();// 0x3455b2d80041
	bool CanVJetInWater();// 0x3454b2d80041
	bool CanHJetInWater();// 0x3453b2d80041

--------------------------------
Class: PlayerStatisticsData.Object
	delegate OnPlayerStatDataUpdate;//[Offset: 0x28, Size: 0x10]
	Vector GetValue_Vector(enum InType);// 0x3c87b2d80041
	void GetValue_MapKeyWithValueInt(enum InType, out int[] OutValue);// 0x3c86b2d80041
	void GetValue_MapKeyWithValueFloat(enum InType, out int[] OutValue);// 0x3c85b2d80041
	int GetValue_IntFromMap(enum InType, int IntKey);// 0x3c84b2d80041
	void GetValue_IntArray(enum InType, out int[] OutResult);// 0x3c83b2d80041
	int GetValue_Int(enum InType);// 0x3c82b2d80041
	float GetValue_FloatFromMap(enum InType, int IntKey);// 0x3c81b2d80041
	void GetValue_FloatArray(enum InType, out float[] OutResult);// 0x3c80b2d80041
	float GetValue_Float(enum InType);// 0x3c7fb2d80041

--------------------------------
Class: SolarReplayPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	class SolarSpectatorPawn* OBModeSpectatorPawnClass;//[Offset: 0x9f8, Size: 0x8]
	class HUD* OBModeHUDClass;//[Offset: 0xa00, Size: 0x8]
	float WaitFirstTeamNumberInputTime;//[Offset: 0xa08, Size: 0x4]
	float WaitTeamNumberInputTime;//[Offset: 0xa0c, Size: 0x4]
	SolarInReplaySpectatorWidget* InReplayWidget;//[Offset: 0xa10, Size: 0x8]
	MaterialInterface* PerspectiveMaterial;//[Offset: 0xa18, Size: 0x8]
	class SolarSpectatorPawn* DirectorModeSpectatorPawnClass;//[Offset: 0xa20, Size: 0x8]
	SolarReplayCameraControlComp* SolarReplayCameraControlComp;//[Offset: 0xa28, Size: 0x8]
	<Actor*,MaterialChangeHandle> CharacterMaterialInfo;//[Offset: 0xa30, Size: 0x50]
	<Actor*,MaterialInterface*> VehicleOriginMaterial;//[Offset: 0xa80, Size: 0x50]
	SolarGameState* SolarGameState;//[Offset: 0xad0, Size: 0x8]
	SolarReplayManager* ReplayManager;//[Offset: 0xad8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xae0, Size: 0x8]
	void StopSpectatePlayer();// 0x410fb2d80041
	void StopPlayReplay();// 0x410eb2d80041
	void SpectatePlayerByPlayerID(FString SolarPlayerId);// 0x410db2d80041
	bool ShowDamageText(out SolarDamageText InDamageText);// 0x410cb2d80041
	void SetPlayerInfoHUDVisible(bool bIsVisible);// 0x410bb2d80041
	void SetDamageTextVisible(bool bIsVisible);// 0x410ab2d80041
	void SetBattleOBHUDType(out const enum Type);// 0x4109b2d80041
	void PauseReplay();// 0x4108b2d80041
	void OnReplayPlayingLevelLoaded();// 0x4107b2d80041
	void OnPlayingFinished();// 0x4106b2d80041
	void OnBattleOBHUDTypeChanged(out const enum CurrentType);// 0x4105b2d80041
	bool IsSpectatingPlayer();// 0x4104b2d80041
	FString GetCurrentSpectatePlayerID();// 0x4103b2d80041
	enum GetBattleOBHUDType();// 0x4102b2d80041
	void ContinueReplay();// 0x4101b2d80041

--------------------------------
Class: SolarDamageText
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bBrokenShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int Damage;//[Offset: 0x4, Size: 0x4]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	Actor* Source;//[Offset: 0x10, Size: 0x8]
	Vector HitLocation;//[Offset: 0x18, Size: 0xc]
	uint32 TargetUniqueID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SolarSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: SolarInReplaySpectatorWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	UserWidget* DamageTextWidget;//[Offset: 0x318, Size: 0x8]
	delegate OnStopPlayReplayEvent;//[Offset: 0x320, Size: 0x10]
	delegate OnSetPlayerInfoHUDVisibleDelegate;//[Offset: 0x330, Size: 0x10]
	delegate OnSetDamageTextVisibleDelegate;//[Offset: 0x340, Size: 0x10]
	void ShowFinishPanel();// 0x1cc7b2d80041
	void SetSpectatePlayerName(FString Name);// 0x1cc6b2d80041
	void SetElapsedTimeString(FString TimeString);// 0x1cc5b2d80041
	void SetAlivePlayerAndTeamNumber(int AlivePlayer, int AliveTeam);// 0x1cc4b2d80041
	void OnStopPlayReplayDelegate__DelegateSignature();// 0x1cc3b2d80041
	void OnSetPlayerInfoHUDVisibleDelegate__DelegateSignature(bool bIsVisible);// 0x1cc2b2d80041
	void OnSetDamageTextVisibleDelegate__DelegateSignature(bool bIsVisible);// 0x1cc1b2d80041

--------------------------------
Class: SolarReplayCameraControlComp.ActorComponent.Object
	float DefaultSpeed;//[Offset: 0xc8, Size: 0x4]
	float MoveSpeedChangeStep;//[Offset: 0xcc, Size: 0x4]
	float MoveSpeedMin;//[Offset: 0xd0, Size: 0x4]
	float MoveSpeedMax;//[Offset: 0xd4, Size: 0x4]
	float SpeedUpScale;//[Offset: 0xd8, Size: 0x4]
	float DefaultTurnRate;//[Offset: 0xdc, Size: 0x4]
	float TurnRateChangeStep;//[Offset: 0xe0, Size: 0x4]
	float TurnSpeedMin;//[Offset: 0xe4, Size: 0x4]
	float TurnSpeedMax;//[Offset: 0xe8, Size: 0x4]
	float DistanceChangeStep;//[Offset: 0xec, Size: 0x4]
	SolarPlayerState* CurrentTarget;//[Offset: 0xf0, Size: 0x8]
	SolarGameState* SolarGameState;//[Offset: 0xf8, Size: 0x8]
	SolarSpectateInfo* ReplayPCSpectateInfo;//[Offset: 0x100, Size: 0x8]
	void OnSpectateInfoRep(SolarSpectateInfo* InSpecInfo);// 0x1b12b2d80041
	void OnReplaySpectateTargetChanged__DelegateSignature(SolarPlayerState* CurTarget);// 0x1b11b2d80041

--------------------------------
Class: MaterialChangeHandle

--------------------------------
Class: PrePooledBundle
	FName ClassPath;//[Offset: 0x0, Size: 0x8]
	int Number;//[Offset: 0x8, Size: 0x4]
	bool bNeedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNeedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: SolarSafeArea.SolarMapElementBase.Actor.Object
	SolarSafeAreaConfig* Config;//[Offset: 0x2a0, Size: 0x8]
	int CurrentIndex;//[Offset: 0x2a8, Size: 0x4]
	float TargetTime;//[Offset: 0x2ac, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x2b0, Size: 0x4]
	Vector TargetLocation;//[Offset: 0x2b4, Size: 0xc]
	Vector BeginLocation;//[Offset: 0x2c0, Size: 0xc]
	enum AreaStatus;//[Offset: 0x2cc, Size: 0x1]
	Vector[] AreaPosArray;//[Offset: 0x310, Size: 0x10]
	bool GMShowAllArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	SafeAreaDrone*[] DroneArray;//[Offset: 0x350, Size: 0x10]
	void updateNextSafeArea();// 0x3accb2d80041
	void StartShrink();// 0x3acbb2d80041
	void ShowEffectInside(bool bInside);// 0x3acab2d80041
	void ShowAllSafeArea(bool IsShow);// 0x3ac9b2d80041
	void ShowAllDrone(bool IsShow);// 0x3ac8b2d80041
	void SetAreaStatus(enum InStatus);// 0x3ac7b2d80041
	void Resume();// 0x3ac6b2d80041
	void RefreshSafeArea();// 0x3ac5b2d80041
	void Pause();// 0x3ac4b2d80041
	void NotifySafeAreaStartShrink();// 0x3ac3b2d80041
	bool IsInSafeArea(Actor* Actor);// 0x3ac2b2d80041
	void GMStartShrinkArea();// 0x3ac1b2d80041
	SafeAreaConfig GetSafeAreaConfig();// 0x3ac0b2d80041
	float GetNextSafeAreaRadius();// 0x3abfb2d80041
	Vector GetNextAreaLocation();// 0x3abeb2d80041
	float GetCurrentSafeAreaRadius();// 0x3abdb2d80041

--------------------------------
Class: SolarSafeAreaConfig.DataAsset.Object
	int StableTime;//[Offset: 0x30, Size: 0x4]
	Vector StartLocation;//[Offset: 0x34, Size: 0xc]
	Vector2D SafeAreaLimitSize;//[Offset: 0x40, Size: 0x8]
	Texture2D* AreaMask;//[Offset: 0x48, Size: 0x8]
	class SafeAreaDrone* DroneClass;//[Offset: 0x50, Size: 0x8]
	float MinSpace;//[Offset: 0x58, Size: 0x4]
	float MaxSpace;//[Offset: 0x5c, Size: 0x4]
	float DroneHeight;//[Offset: 0x60, Size: 0x4]
	float DroneDistance;//[Offset: 0x64, Size: 0x4]
	SafeAreaConfig[] SafeAreaArray;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SafeAreaDrone.Actor.Object
	SolarSafeArea* SafeArea;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* DroneMeshComponent;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: SafeAreaConfig
	float Radius;//[Offset: 0x0, Size: 0x4]
	float PreShrinkTime;//[Offset: 0x4, Size: 0x4]
	float ShrinkTime;//[Offset: 0x8, Size: 0x4]
	float DamageValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 0x20]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 0x20]
	GameStateBase* Owner;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarGameplayConfigComponent.ActorComponent.Object
	GameplayConfigBase* GameplayConfig;//[Offset: 0xb8, Size: 0x8]
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	GameplayConfigBase* TestGameplayConfig;//[Offset: 0xc8, Size: 0x8]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xd0, Size: 0x8]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd8, Size: 0x8]
	GameplayConfigBase* GetConfigs();// 0x33a2b2d80041

--------------------------------
Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: KeyMappingRowInfo.TableRowBase
	FString Label;//[Offset: 0x8, Size: 0x10]
	FString ActionDisplayName;//[Offset: 0x18, Size: 0x10]
	FString ActionName;//[Offset: 0x28, Size: 0x10]
	bool Continuity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float Scale;//[Offset: 0x3c, Size: 0x4]
	FString RealAction;//[Offset: 0x40, Size: 0x10]
	FString[] FirstDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString[] SecondDefaultKeys;//[Offset: 0x60, Size: 0x10]
	FString Description;//[Offset: 0x70, Size: 0x10]
	FString[] RelatedActions;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ClassInfo.TableRowBase
	enum ClassType;//[Offset: 0x8, Size: 0x1]
	int ClassName;//[Offset: 0xc, Size: 0x4]
	SoftObjectPath ClassIcon;//[Offset: 0x10, Size: 0x18]
	SkillConfig* SkillOne;//[Offset: 0x28, Size: 0x8]
	SkillConfig* SkillTwo;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SkillConfig.DataAsset.Object
	int SkillName;//[Offset: 0x30, Size: 0x4]
	int SkillType;//[Offset: 0x34, Size: 0x4]
	int SkillDescription;//[Offset: 0x38, Size: 0x4]
	SoftObjectPath SkillIcon;//[Offset: 0x40, Size: 0x18]
	<int,SkillBPAndExtraConfig*> SkillExtraConfigByPlayerLevel;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: SkillBPAndExtraConfig.DataAsset.Object
	SoftObjectPath SkillBlueprint;//[Offset: 0x30, Size: 0x18]
	int SkillLevel;//[Offset: 0x48, Size: 0x4]
	int SkillItemQuality;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x527fb2d80041
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x527eb2d80041

--------------------------------
Class: SolarAnoHelper.Object
	bool bOpenAnoSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendAntiDataToSsmOnDs(FString AntiDataLog, const SolarPlayerController* PC);// 0x386db2d80041
	void SendAntiDataToSsmOnClientNative(FString ExtraParam, byte AntiType);// 0x386cb2d80041
	void SendAntiDataToSsmOnClient(FString ExtraParam, byte AntiType);// 0x386bb2d80041
	void InitializeBind();// 0x386ab2d80041
	FString GetAntiLogOnClient(const byte Type);// 0x3869b2d80041
	void AnoUnRegisterCallBack();// 0x3868b2d80041
	void AnoSentDataToSvr(AnoSDKAntiData Data);// 0x3867b2d80041
	void AnoSentCoreTimeData(AnoSDKAntiData AntiData);// 0x3866b2d80041
	void AnoSDKSendData(AnoSDKAntiData AntiData);// 0x3865b2d80041
	void AnoSDKResume();// 0x3864b2d80041
	void AnoSDKPause();// 0x3863b2d80041
	void AnoChangeAntiDataFlow(AnoSDKAntiData Data);// 0x3862b2d80041

--------------------------------
Class: AnoSDKAntiData
	int Length;//[Offset: 0x0, Size: 0x4]
	FString AntiData;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarTableManager.Object
	void SetIMInitFlag(bool Flag);// 0x41e0b2d80041
	void SetCurrentLangEnum(enum InLang);// 0x41dfb2d80041
	void SetCurrentLang(FString InLang);// 0x41deb2d80041
	void ReceiveInit();// 0x41ddb2d80041
	bool IsLocalTextIDValid(int ID);// 0x41dcb2d80041
	FString GetLocalTextWithLang(int ID, enum InLang);// 0x41dbb2d80041
	FString GetLocalText(int ID);// 0x41dab2d80041
	bool GetIMInitFlag();// 0x41d9b2d80041
	enum GetCurrentLangEnum();// 0x41d8b2d80041
	FString GetCurrentLang();// 0x41d7b2d80041

--------------------------------
Class: SolarTcpNetworkManager.Object
	bool bIsSsmMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	SolarTCPSocketClient* SocketClient;//[Offset: 0x38, Size: 0x8]
	SCMMatchChannelAction* MatchChannelAction;//[Offset: 0x40, Size: 0x8]
	FString EncryptKeyClientTCPDynamic;//[Offset: 0x48, Size: 0x10]
	bool bEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	delegate DisconnectedDelegate;//[Offset: 0x5c, Size: 0x10]
	delegate ConnectedDelegate;//[Offset: 0x6c, Size: 0x10]
	delegate MessageReceivedDelegate;//[Offset: 0x7c, Size: 0x10]
	SolarPlayerReport MyReport;//[Offset: 0x90, Size: 0x350]
	void UpdateTeamRank(byte TeamID, int Rank);// 0x447db2d80041
	void UpdatePlayerData(FString PlayerId, SolarPlayerState* PlayerState);// 0x447cb2d80041
	void UpdatePlayerBattleInfo(SolarPlayerState* PS);// 0x447bb2d80041
	bool UpdateBotAIData(int AIIndex, SolarPlayerState* PlayerState);// 0x447ab2d80041
	void TryEndBattle();// 0x4479b2d80041
	void SyncSsmDataToGameState();// 0x4478b2d80041
	void SsmDSSendGiftRequest(const int GiftID, const int Num, FString SendPlayerId, FString RecivePlayerId, SolarPlayerState* SendPlayer);// 0x4477b2d80041
	void SsmDSChangeRoleIDRequest(FString InPlayerId, int InRoleID);// 0x4476b2d80041
	void RequestOpenMatchChannel(const int InMatchType, out const int[] InPlayerStructure, const int InMaxMatchTime);// 0x4475b2d80041
	void ReportPlayerBattleInfo(SolarPlayerState* PS);// 0x4474b2d80041
	void RecordLastUsedVehicle();// 0x4473b2d80041
	void PlayerRequireToChangeGold(const int InChangedGoldType, const int InGoldNum, FString InPlayerId, SolarPlayerState* InPlayer);// 0x4472b2d80041
	void OpenSupplement(int MaxSecond);// 0x4471b2d80041
	void OnRecvData(out const byte[] Data);// 0x4470b2d80041
	void OnPlayerLogin(FString PlayerId);// 0x446fb2d80041
	void OnMessageReceived(int ConnId, out const byte[] Message);// 0x446eb2d80041
	void OnDisconnected(int ConnId);// 0x446db2d80041
	void OnConnected(int ConnId);// 0x446cb2d80041
	void NotifyPlayerReward_CustomMode(out const SCustomMode_PlayerReport Report);// 0x446bb2d80041
	void NotifyPlayerReward();// 0x446ab2d80041
	void NotifyPlayerOffline(SolarPlayerController* PC);// 0x4469b2d80041
	void NotifyPlayerEnterBattle(SolarPlayerController* PC);// 0x4468b2d80041
	void NotifyOBPlayersChanged(out FString[] PlayerIds);// 0x4467b2d80041
	void NotifyClientBattleStateFish();// 0x4466b2d80041
	void NotifyBattleGroupResultRequest(byte TeamID, int Rank);// 0x4465b2d80041
	bool IsAllowReconnectGame();// 0x4464b2d80041
	void HandlePlayerLogoutInPreparatoryPhase(Controller* PC);// 0x4463b2d80041
	void HandlePlayerLogoutInBattlePhase(Controller* PC);// 0x4462b2d80041
	void HandlePlayerLogin(Controller* PC);// 0x4461b2d80041
	int GetWarmGameType();// 0x4460b2d80041
	int GetTeamCount();// 0x445fb2d80041
	void GetStartBattleRequestInfo(out StartBattleRequestInfo OutResult);// 0x445eb2d80041
	SolarGameModeInfo GetSolarGameModeInfo();// 0x445db2d80041
	int GetRuleID();// 0x445cb2d80041
	void GetReportWeaponExpIds(out int[] OutWeaponExpIds);// 0x445bb2d80041
	byte[] GetPlayerTeamIDs();// 0x445ab2d80041
	FString[] GetPlayerRoleAndOpenIDs();// 0x4459b2d80041
	int GetPlayerCount();// 0x4458b2d80041
	void GetPlayerBattleRequestInfo(FString InSolarPlayerID, out PlayerBattleRequestInfo OutResult);// 0x4457b2d80041
	int[] GetMLRelatedAIDataMLRatio();// 0x4456b2d80041
	int[] GetMLRelatedAIDataMLFeature();// 0x4455b2d80041
	bool GetMLRelatedAIDataMLClosed();// 0x4454b2d80041
	int GetMaxPlayerNum();// 0x4453b2d80041
	FString GetLocalIPAddress();// 0x4452b2d80041
	bool GetIsCloseMatch();// 0x4451b2d80041
	bool GetHasMonster();// 0x4450b2d80041
	bool GetHasMachineLearning();// 0x444fb2d80041
	int GetEntryID();// 0x444eb2d80041
	FString GetBattleID();// 0x444db2d80041
	int GetAILevel();// 0x444cb2d80041
	int GetAboutToEnterPlayerCount();// 0x444bb2d80041
	bool FillTeamReport(out SolarPlayerReport[] Reports);// 0x444ab2d80041
	void FakePlayerJoin(FString PlayerId, int TeamID);// 0x4449b2d80041
	void CloseSupplement();// 0x4448b2d80041
	bool CheckPlayerLeave(FString PlayerId);// 0x4447b2d80041
	bool CheckJoinToken(FString Token, FString PlayerId);// 0x4446b2d80041
	bool CheckIfPlayerHasJoined(FString PlayerId);// 0x4445b2d80041
	void CheckBattleOver();// 0x4444b2d80041

--------------------------------
Class: SolarTCPSocketClient.Actor.Object
	int SendBufferSize;//[Offset: 0x230, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x234, Size: 0x4]
	float TimeBetweenTicks;//[Offset: 0x238, Size: 0x4]
	bool SendData(int ConnectionId, byte[] Data);// 0x2f4ab2d80041
	void Disconnect(int ConnectionId);// 0x2f49b2d80041
	void Connect(FString IP, int Port, out const delegate OnConnected, out const delegate OnDisconnected, out const delegate OnMessageReceived, out int ConnectionId);// 0x2f48b2d80041

--------------------------------
Class: SCustomMode_PlayerReport.SolarPlayerReport
	<int,int> RewardItems;//[Offset: 0x350, Size: 0x50]

--------------------------------
Class: StartBattleRequestInfo
	int aiNum;//[Offset: 0x0, Size: 0x4]
	int AILevel;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerBattleRequestInfo
	FString NickName;//[Offset: 0x0, Size: 0x10]
	int AccountLevel;//[Offset: 0x10, Size: 0x4]
	PlatformParams PlatformParams;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: PlatformParams
	int64 UserId;//[Offset: 0x0, Size: 0x8]
	FString OpenId;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SCMMatchChannelAction.BlueprintAsyncActionBase.Object
	Object* WorldContextObject;//[Offset: 0x48, Size: 0x8]
	delegate OnMatchChannelChange;//[Offset: 0x50, Size: 0x10]
	SCMMatchChannelAction* OpenMatchChannel(Object* WorldContextObject, const enum MatchType, out const int[] PlayerStructure, const int MaxMatchTime);// 0x369bb2d80041
	void HandleMatchChannelChange(bool InMatchResult, int RPCID);// 0x369ab2d80041

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x2ea0b2d80041

--------------------------------
Class: SolarUDPManager.Object
	int SendBufferSize;//[Offset: 0x30, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x34, Size: 0x4]
	void OnMessageReceived(out const byte[] Data);// 0x4546b2d80041

--------------------------------
Class: SolarAssetManager.AssetManager.Object
	SolarChunkAssignData* ChunkAssignDataCache;//[Offset: 0x440, Size: 0x8]
	<FString,Object*> CachedObjMap;//[Offset: 0x448, Size: 0x50]
	void UnLoadPrimaryAssetByLabelPathForLua(FString PrimaryAssetPath);// 0x3871b2d80041
	void OnBindingActorDestory(Actor* Actor);// 0x3870b2d80041

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: SolarChunkAssignData.DataAsset.Object
	<FString,ChunkAssignRule> Rules;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ChunkAssignRule
	FString FullPath;//[Offset: 0x0, Size: 0x10]
	int ChunkID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarItemManager.Object
	SolarItemRootActor* RootActor;//[Offset: 0x30, Size: 0x8]
	SolarItemSpawner*[] ItemSpawners;//[Offset: 0x88, Size: 0x10]
	SolarItemSpawner*[] NSItemSpanwers;//[Offset: 0x98, Size: 0x10]
	<int,SolarItemSpawner*> ItemSpawnersMap;//[Offset: 0xa8, Size: 0x50]
	<int,SolarAirDropSpawner*> AirDropSpawnersMap;//[Offset: 0xf8, Size: 0x50]
	<int,SolarItemSpawnerArray> NSItemSpawnerMap;//[Offset: 0x148, Size: 0x50]
	<int,OutcomeData> ItemOutcomeDatas;//[Offset: 0x198, Size: 0x50]
	<int,OutcomeDataCollection> OutcomeCollection;//[Offset: 0x1e8, Size: 0x50]
	<int,SimpleDropItemDataCollection> OriginDropItemDatas;//[Offset: 0x238, Size: 0x50]
	<int,FinalDropDataCollection> AirDropItemDatas;//[Offset: 0x288, Size: 0x50]
	<int,int> AirDropChestIndexMap;//[Offset: 0x2d8, Size: 0x50]
	<int,int> UsedAirDropChestIndexMap;//[Offset: 0x328, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0x378, Size: 0x50]
	RandomStream ItemStream;//[Offset: 0x3c8, Size: 0x8]
	float DelaySpawnTime;//[Offset: 0x3d0, Size: 0x4]
	FString[] SubLevelNames;//[Offset: 0x3d8, Size: 0x10]
	bool BInitSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	bool BSpawnerDestoryed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	TimerHandle ItemInitSpawnerHandle;//[Offset: 0x3f0, Size: 0x8]
	float DelayInitSpawnerTime;//[Offset: 0x3f8, Size: 0x4]
	TimerHandle ItemLoopSpawnHandle;//[Offset: 0x400, Size: 0x8]
	float SpawnLoopInterval;//[Offset: 0x408, Size: 0x4]
	float SpawnMinDisSquared;//[Offset: 0x40c, Size: 0x4]
	float VehicleSpawnMinDisSquared;//[Offset: 0x410, Size: 0x4]
	DataTable* ItemResReferenceTable;//[Offset: 0x418, Size: 0x8]
	FString ItemResReferenceTablePath;//[Offset: 0x420, Size: 0x10]
	bool bOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	int FirstSpawnerIndex;//[Offset: 0x46c, Size: 0x4]
	int FirstTBoxIndex;//[Offset: 0x470, Size: 0x4]
	int FirstAirDropIndex;//[Offset: 0x474, Size: 0x4]
	int FirstVehicleIndex;//[Offset: 0x478, Size: 0x4]
	int ChestKeyCode;//[Offset: 0x47c, Size: 0x4]
	<int,enum> ItemID2Types;//[Offset: 0x490, Size: 0x50]
	int64 ThisIdRefCount;//[Offset: 0x4e0, Size: 0x8]
	int64 ServerNowSeconds;//[Offset: 0x4e8, Size: 0x8]
	FString RootActorBpPath;//[Offset: 0x4f0, Size: 0x10]
	float CheckDropRadius;//[Offset: 0x500, Size: 0x4]
	float CheckDropHeight;//[Offset: 0x504, Size: 0x4]
	float DropLineTraceLength;//[Offset: 0x508, Size: 0x4]
	float DropUnitOffset;//[Offset: 0x50c, Size: 0x4]
	SolarMapManager* MapManager;//[Offset: 0x510, Size: 0x8]
	SolarAirDropSpawner*[] ActiveAirDropBox;//[Offset: 0x518, Size: 0x10]
	void UpdateItemParams();// 0x3e04b2d80041
	bool TryDropAtLocation(SolarCharacterBase* Owner, out Vector CheckPos);// 0x3e03b2d80041
	void SpawnTreasureBoxByID(const int TreasureId, Transform trans, SolarItemData[] ItemsToSpawn);// 0x3e02b2d80041
	void SpawnItemsByOutcomeID(const int OutcomeID, out Transform trans);// 0x3e01b2d80041
	void SpawnItems(const int ItemID, const int ItemNum, Transform trans);// 0x3e00b2d80041
	SolarItemData SpawnItemData(int ItemID);// 0x3dffb2d80041
	void SpawnDeathBox(SolarCharacterBase* Owner, out const Rotator Rotator, out const SolarItemData[] DataTarray, out const int DeathBoxId, out const SolarPlayerWeapon*[] DeathBoxWeaponArray, out const float CurrEnergyValue, out const float CurrExtraEnergyValue, out const int MonsterID);// 0x3dfeb2d80041
	void SpawnAirDropByID(const int ChestID, Vector Location, SolarItemData[] ItemsToSpawn);// 0x3dfdb2d80041
	void ResetThisID();// 0x3dfcb2d80041
	bool RefreshOutcomePoolContent(out OutcomeData InOutcomeData);// 0x3dfbb2d80041
	void OnUpdateServerNowSeconds(const int InNowSeconds);// 0x3dfab2d80041
	void OnAsyncLoadTreasureBoxComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Transform trans);// 0x3df9b2d80041
	void OnAsyncLoadItemComplete(SoftClassPath SClassPath, SolarItemData ItemData, Transform trans);// 0x3df8b2d80041
	void OnAsyncLoadDiscardItemComplete(SoftClassPath SClassPath, SolarCharacter* Owner, SolarItemData ItemData);// 0x3df7b2d80041
	void OnAsyncLoadDeathBoxComplete(SoftClassPath SClassPath, SolarCharacterBase* Owner, Rotator Rotator, SolarItemData[] DataTarray, SolarItemData DeathBoxData, SolarPlayerWeapon*[] DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, const int MonsterID);// 0x3df6b2d80041
	void OnAsyncLoadAirdropComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Vector Location);// 0x3df5b2d80041
	void NotifySpawnerDestroy();// 0x3df4b2d80041
	void NetStartAirDrops(const int SpawnerID, const int ChestID);// 0x3df3b2d80041
	bool NetRunSpecOutcome(const int InData, out SolarItemData[] OutItemArray);// 0x3df2b2d80041
	void NetRunGlobalDrop();// 0x3df1b2d80041
	void NetRunDrop();// 0x3df0b2d80041
	bool NetDropOutcomeContent(const int TargetContentID, out OutcomeData OutcomeData, out <int,SimpleDropItemDataCollection> InDropItemDatas, bool fromSpawner, out const Transform trans);// 0x3defb2d80041
	bool NetDropOutcome(out OutcomeData OutcomeData, out int OutTargetContentID);// 0x3deeb2d80041
	void NetDropGlobalOutcome(out GlobalOutcomeData GlobalOutcomeData);// 0x3dedb2d80041
	void LoadSpawnerLevelComplete();// 0x3decb2d80041
	void LoadItemSpawnerLevels();// 0x3debb2d80041
	bool IsInSafeArea(out const Vector Location);// 0x3deab2d80041
	void InitWeaponPartLevel(out SolarItemData InItemData);// 0x3de9b2d80041
	void InitWeaponLevel(out SolarItemData InItemData);// 0x3de8b2d80041
	void InitVehicleSpawnGroupData(out <int,int> VehicleGroupIdToNum);// 0x3de7b2d80041
	void InitItemDataShieldValue(out SolarItemData InItemData);// 0x3de6b2d80041
	int64 IncreaseThisID();// 0x3de5b2d80041
	int GetVehicleIDBySingleSpawnId(const int SpawnID);// 0x3de4b2d80041
	int GetVehicleIDByGroupIDAndIndex(int GroupID, int GroupIndex);// 0x3de3b2d80041
	int GetVehicleGroupIDByVehicleID(int InVehicleID);// 0x3de2b2d80041
	SolarVehicleData GetVehicleConfigData(const int InVehicleID);// 0x3de1b2d80041
	int GetServerNowSeconds();// 0x3de0b2d80041
	int GetRandomIDInMap(const int TotalWeight, out <int,int> WeightIDMap);// 0x3ddfb2d80041
	int GetRandomAirDropIDInMap();// 0x3ddeb2d80041
	int GetOutcomeIdByTreasureBoxId(const int TreasureBoxID);// 0x3dddb2d80041
	OutcomeData GetOutcomeDataByID(const int OutcomeID);// 0x3ddcb2d80041
	OutcomeContentData GetOutcomeContentDataByID(const int ContentID);// 0x3ddbb2d80041
	bool GetItemResReference(int InItemID, out ItemResReference outData);// 0x3ddab2d80041
	int GetItemPrize(const int InItemID);// 0x3dd9b2d80041
	int GetItemMaxPileByID(const int InItemID);// 0x3dd8b2d80041
	bool GetGlobalOutcomeData(const int GamePlayMode, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x3dd7b2d80041
	int GetEntryID();// 0x3dd6b2d80041
	bool GetCurrItemSubLevels(FString InMapName, out FString[] OutSubLevelNames);// 0x3dd5b2d80041
	OutcomeData GetCookedOutcomeDataByID(const int OutcomeID);// 0x3dd4b2d80041
	bool GetChestsFromChestSpawn(const int ChestSpawnID, out int[] ChestIDs);// 0x3dd3b2d80041
	bool GetAirDropChestIDsByGamePlayMode(const int GamePlayMode, out int[] ChestIDs);// 0x3dd2b2d80041
	SolarAirDropSpawner*[] GetActiveAirDropBox();// 0x3dd1b2d80041
	void FindTransformForBoxItem(Actor* TargetActor, out Transform InTrans, bool bUseNewLocation);// 0x3dd0b2d80041
	Rotator FindRotationForDropItem(Actor* TargetActor, out Vector FindTargetPos);// 0x3dcfb2d80041
	bool FindPosForDropItem(SolarCharacterBase* Owner, out Vector FindTargetPos);// 0x3dceb2d80041
	SolarItemData CreateItemDataByKey(const int InItemID);// 0x3dcdb2d80041
	void ConvertOriginDatasToItemDatas();// 0x3dccb2d80041
	void ClearSpawnLoopTimer();// 0x3dcbb2d80041
	void CheckSpawnItemByDis();// 0x3dcab2d80041
	bool CheckPointInCircle(Vector2D Center, float Radius, Vector2D PlayerPoint);// 0x3dc9b2d80041
	void AddVehicleGroupDataSingle(int GroupID, out int[] SingleData);// 0x3dc8b2d80041
	void AddOneDropDataToTempDatas(const int SpawnerID, const int InItemID, const int InItemNum, out <int,SimpleDropItemDataCollection> InDropItemDatas);// 0x3dc7b2d80041

--------------------------------
Class: OutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int[] Contents;//[Offset: 0x8, Size: 0x10]
	enum OutcomeType;//[Offset: 0x18, Size: 0x1]
	<int,int> OutcomePools;//[Offset: 0x20, Size: 0x50]
	<int,int> OutcomeDynamicWeights;//[Offset: 0x70, Size: 0x50]
	<int,int> OutcomeSubWeights;//[Offset: 0xc0, Size: 0x50]
	int PoolTotalWeight;//[Offset: 0x110, Size: 0x4]
	int PoolOutcomeID;//[Offset: 0x114, Size: 0x4]
	int MaxTimes;//[Offset: 0x118, Size: 0x4]
	int MinTimes;//[Offset: 0x11c, Size: 0x4]
	int SpawnerID;//[Offset: 0x120, Size: 0x4]
	int NetSetTimes;//[Offset: 0x124, Size: 0x4]
	int DropedTimes;//[Offset: 0x128, Size: 0x4]
	<int,OutcomeContentData> ContentDatas;//[Offset: 0x130, Size: 0x50]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int GlobalDropTimes;//[Offset: 0x184, Size: 0x4]
	OutcomeTypeLimitData[] LimitTypeDatas;//[Offset: 0x188, Size: 0x10]
	OutcomeIDLimitData[] LimitIDDatas;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: OutcomeContentData
	int ID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int Weight;//[Offset: 0x8, Size: 0x4]
	int[] RandomNums;//[Offset: 0x10, Size: 0x10]
	int MaxTimes;//[Offset: 0x20, Size: 0x4]
	int MinTimes;//[Offset: 0x24, Size: 0x4]
	int RelatedContentID;//[Offset: 0x28, Size: 0x4]
	enum ItemType;//[Offset: 0x2c, Size: 0x4]
	int DropedTimes;//[Offset: 0x30, Size: 0x4]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool IsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: OutcomeTypeLimitData
	enum LimitType;//[Offset: 0x0, Size: 0x4]
	int MinTimes;//[Offset: 0x4, Size: 0x4]
	int MaxTimes;//[Offset: 0x8, Size: 0x4]
	int CurrDropTimes;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: OutcomeIDLimitData
	int[] LimitIDs;//[Offset: 0x0, Size: 0x10]
	int MinTimes;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int CurrDropTimes;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SimpleDropItemDataCollection
	<int,int> Datas;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: GlobalOutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int SingleMaxTimes;//[Offset: 0x4, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x8, Size: 0x4]
	int TotalMinTimes;//[Offset: 0xc, Size: 0x4]
	int NetSetTimes;//[Offset: 0x10, Size: 0x4]
	int DropedTimes;//[Offset: 0x14, Size: 0x4]
	<int,int> ItemIDNumMap;//[Offset: 0x18, Size: 0x50]
	int[] AffectedOutcomes;//[Offset: 0x68, Size: 0x10]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SolarVehicleData
	int VehicleID;//[Offset: 0x0, Size: 0x4]
	FString VehicleBP;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ItemResReference.TableRowBase
	FString Description;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath Icon;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath AbilityBP;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: SolarAirDropSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	int ChestID;//[Offset: 0x3a4, Size: 0x4]

--------------------------------
Class: SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnerID;//[Offset: 0x29c, Size: 0x4]
	enum SpawnerType;//[Offset: 0x2c8, Size: 0x1]
	enum SpawnerLevel;//[Offset: 0x2c9, Size: 0x1]
	int OutcomeID;//[Offset: 0x2cc, Size: 0x4]
	Vector OriginPos;//[Offset: 0x2d0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0x2dc, Size: 0xc]
	Color BoxLineColor;//[Offset: 0x2e8, Size: 0x4]
	bool bNotDrawBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	Box SpawnerBox;//[Offset: 0x2f0, Size: 0x1c]
	float RotateAngleRange;//[Offset: 0x30c, Size: 0x4]
	bool HasSpawnedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bActiveSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	FString SyncItemId;//[Offset: 0x318, Size: 0x10]
	bool bOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float RefreshTime;//[Offset: 0x32c, Size: 0x4]
	bool bUseSpawnerTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	int NumberOfPoints;//[Offset: 0x334, Size: 0x4]
	float fScalarParams;//[Offset: 0x338, Size: 0x4]
	TimerHandle ItemLoadHandle;//[Offset: 0x360, Size: 0x8]
	TimerHandle ItemSpawnHandle;//[Offset: 0x368, Size: 0x8]
	TimerHandle ItemRefreshHandle;//[Offset: 0x370, Size: 0x8]
	void SpawnSingleItem();// 0x383ab2d80041
	void SpawnInNextTick();// 0x3839b2d80041
	void SaveSpawnerRange();// 0x3838b2d80041
	void RandomRotatorForItem(enum ItemType, out Quat TargetRotator);// 0x3837b2d80041
	void RandomPosInBoundingBox(out Vector TargetPos);// 0x3836b2d80041
	void PlaceItemToTheGround(out Vector InOutLocation);// 0x3835b2d80041
	void OnItemSpawned(Actor* Item);// 0x3834b2d80041
	void OnAsyncLoadComplete(SoftClassPath SClassPath, SolarItemData ItemData);// 0x3833b2d80041
	void NetStartSpawnItems(SolarItemRootActor* OwnerActor);// 0x3832b2d80041
	void LoadSingleWeaponAsset(out const SolarItemData ItemData);// 0x3831b2d80041
	void LoadSingleItemAsset();// 0x3830b2d80041
	void LoadInNextTick();// 0x382fb2d80041
	void InitSpawnerBound();// 0x382eb2d80041
	void GetSuitableDropPos(out Vector TargetPos);// 0x382db2d80041
	void GenerateDropPosition();// 0x382cb2d80041
	void ClearUnpickedItems();// 0x382bb2d80041
	void ClearLoopTimer();// 0x382ab2d80041

--------------------------------
Class: SolarItemRootActor.Actor.Object
	int MAX_LOAD_NUM;//[Offset: 0x230, Size: 0x4]
	int MAX_SPAWN_NUM;//[Offset: 0x234, Size: 0x4]
	int CurrLoadNum;//[Offset: 0x238, Size: 0x4]
	int CurrSpawnNum;//[Offset: 0x23c, Size: 0x4]
	int TempFrame;//[Offset: 0x240, Size: 0x4]
	int FrameInterval;//[Offset: 0x244, Size: 0x4]

--------------------------------
Class: SolarItemSpawnerArray
	SolarItemSpawner*[] ItemSpawnerArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: OutcomeDataCollection
	OutcomeData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FinalDropDataCollection
	SolarItemData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarMapManager.SolarGameManager.Object
	MapData MapData;//[Offset: 0x38, Size: 0x3c]
	int CurrentMapID;//[Offset: 0x74, Size: 0x4]
	FString CurrentMapName;//[Offset: 0x78, Size: 0x10]
	float FootMinLength;//[Offset: 0x88, Size: 0x4]
	float FootMaxLength;//[Offset: 0x8c, Size: 0x4]
	float GunMinLength;//[Offset: 0x90, Size: 0x4]
	float GunMaxLength;//[Offset: 0x94, Size: 0x4]
	float VehicleMinLength;//[Offset: 0x98, Size: 0x4]
	float VehicleMaxLength;//[Offset: 0x9c, Size: 0x4]
	<enum,Vector2D> MapVoiceRangeMap;//[Offset: 0xa0, Size: 0x50]
	MapVoiceData WorldLocationToVoiceData(out const enum Type, out const Vector PlayerPos, out const Vector EnemyPos);// 0x3ea9b2d80041
	Vector2D WorldLocationToMiniMap(Vector WorldLocation);// 0x3ea8b2d80041
	float WorldLengthToMiniMap(float WorldLength);// 0x3ea7b2d80041
	void UnInitMapData();// 0x3ea6b2d80041
	void ReceiveInitMapData(int MapID);// 0x3ea5b2d80041
	Vector2D Normal2D(Vector2D VectorToTransForm);// 0x3ea4b2d80041
	Vector MiniMapToWorldLocation(Vector2D PositionXY, float Z);// 0x3ea3b2d80041
	bool IsOutOfBound(Vector2D PlayerNavPos);// 0x3ea2b2d80041
	bool IsMiniMapAirlineDataValid(out const MiniMapAirlineData InData);// 0x3ea1b2d80041
	bool IsCharacterInRange(Vector Pos, enum VoiceType);// 0x3ea0b2d80041
	void InitMapData(int MapID);// 0x3e9fb2d80041
	SolarCharacter* GetViewportFocusedCharacter();// 0x3e9eb2d80041
	bool GetSafeAreaSimpleInfoArray(out SafeAreaSimpleInfo[] OutArray);// 0x3e9db2d80041
	bool GetSafeAreaInfo(out SafeAreaMapInfo OutAreaInfo);// 0x3e9cb2d80041
	bool GetSafeAreaDroneArray(out SafeAreaDrone*[] OutArray);// 0x3e9bb2d80041
	int GetLenegthFromPlayerToMarkPoint(Vector MarkPosRealWorld, Vector CurrentPlayerLocation);// 0x3e9ab2d80041
	bool GetIntersectionOnMapFrame(Vector2D TeamMatePos, Vector2D MapAPos, float MapFrameHeight, float MapFrameWidth, out Vector2D InterSecionList, out enum CrossDirection);// 0x3e99b2d80041
	float GetDistanceToSafeArea(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x3e98b2d80041
	int GetCurrentMapID();// 0x3e97b2d80041
	void GetAllEnemyActions(out MapVoiceDataListMap VoiceDataMap);// 0x3e96b2d80041
	Vector2D FixNavPos(Vector2D PlayerNavPos);// 0x3e95b2d80041
	bool CheckIfMarkedPointValid(out const Vector2D InMarkedPoint);// 0x3e94b2d80041
	float CalculatePoisonDistance(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x3e93b2d80041

--------------------------------
Class: MapVoiceData
	int Direction;//[Offset: 0x0, Size: 0x4]
	float TransparencyPercent;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MiniMapAirlineData
	Vector2D StartPoint;//[Offset: 0x0, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0x8, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x10, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x18, Size: 0x8]
	Vector2D AirlineDir;//[Offset: 0x20, Size: 0x8]
	float AirlineLength;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MapData
	Vector2D MapTopLeftCoord;//[Offset: 0x0, Size: 0x8]
	Vector2D MapRightBottomCoord;//[Offset: 0x8, Size: 0x8]
	Vector2D MapImageSize;//[Offset: 0x10, Size: 0x8]
	int MapImage;//[Offset: 0x18, Size: 0x4]
	float AirlineZ;//[Offset: 0x1c, Size: 0x4]
	float HorizonLineZ;//[Offset: 0x20, Size: 0x4]
	float TopZ;//[Offset: 0x24, Size: 0x4]
	float BottomZ;//[Offset: 0x28, Size: 0x4]
	float AverageZ;//[Offset: 0x2c, Size: 0x4]
	float InitFogZ;//[Offset: 0x30, Size: 0x4]
	float TargetFogZ;//[Offset: 0x34, Size: 0x4]
	float MapFOV;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SafeAreaSimpleInfo

--------------------------------
Class: SafeAreaMapInfo
	Vector CurrentLocation;//[Offset: 0x0, Size: 0xc]
	float CurrentRadius;//[Offset: 0xc, Size: 0x4]
	Vector NextLocation;//[Offset: 0x10, Size: 0xc]
	float NextRadius;//[Offset: 0x1c, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x20, Size: 0x4]
	float TargetShrinkTime;//[Offset: 0x24, Size: 0x4]
	float CurrentConfigRadius;//[Offset: 0x28, Size: 0x4]
	Vector CurrentAreaBeginLocation;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: MapVoiceDataListMap
	<enum,MapVoiceDataList> VoiceMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MapVoiceDataList
	MapVoiceData[] VoiceList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SolarInteractableManager.SolarGameManager.Object
	int ZoneNum;//[Offset: 0x48, Size: 0x4]
	int TotalNum;//[Offset: 0x4c, Size: 0x4]
	RadarStationCollection[] CurrRadarStations;//[Offset: 0x50, Size: 0x10]
	SolarElectricShop*[] CurrElectricShops;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: RadarStationCollection
	int Zone;//[Offset: 0x0, Size: 0x4]
	SolarRadarStation*[] AllRadarStations;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarRadarStation.SolarInteractableActor.Actor.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	int Zone;//[Offset: 0x24c, Size: 0x4]
	float MaxTirggerDistance;//[Offset: 0x250, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x254, Size: 0x4]
	GameplayTag CDTag;//[Offset: 0x258, Size: 0x8]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool bInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	float CoolDownTime;//[Offset: 0x264, Size: 0x4]
	float CostEnergy;//[Offset: 0x268, Size: 0x4]
	float RemainCDTime;//[Offset: 0x26c, Size: 0x4]
	SphereComponent* CollisionComp;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* NormalMesh;//[Offset: 0x278, Size: 0x8]
	SolarObjAbilitySystemComponent* ObjAbilitySystemComp;//[Offset: 0x280, Size: 0x8]
	class SolarObjGameplayAbility* ObjAbilityClass;//[Offset: 0x288, Size: 0x8]
	GameplayAbilitySpecHandle ObjAbilityHandle;//[Offset: 0x290, Size: 0x4]
	bool TryTriggerRadarStation(SolarCharacter* InUser);// 0x4100b2d80041
	void ServerInitailizeAbility();// 0x40ffb2d80041
	void OnResetCD();// 0x40feb2d80041
	void OnRep_Broken();// 0x40fdb2d80041
	void OnRep_BInCD();// 0x40fcb2d80041
	void OnRadarStationCDChanged();// 0x40fbb2d80041
	void OnPlayStartScanEffect();// 0x40fab2d80041
	void OnGameplayTagChanged(GameplayTag Tag, bool bAdd);// 0x40f9b2d80041
	void OnClientStartScan();// 0x40f8b2d80041
	void OnBrokenChanged(bool InBroken);// 0x40f7b2d80041
	void InitailizeAbilityParams();// 0x40f6b2d80041
	float GetAbilityReaminingCD();// 0x40f5b2d80041
	float GetAbilityCostEnergy();// 0x40f4b2d80041
	float GetAbilityCooldown();// 0x40f3b2d80041
	bool CanActivateNow();// 0x40f2b2d80041

--------------------------------
Class: SolarObjAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1310, Size: 0x20]
	GameplayTagContainer RepNotifiedTags;//[Offset: 0x1330, Size: 0x20]
	void OnRep_RepNotifiedTags(out const GameplayTagContainer Previous);// 0x3edfb2d80041

--------------------------------
Class: SolarObjGameplayAbility.GameplayAbility.Object
	class GameplayEffect* ActivateEffect;//[Offset: 0x400, Size: 0x8]
	float CostEnergy;//[Offset: 0x408, Size: 0x4]
	SolarInteractableActor* GetAbilityInstigator();// 0x3eddb2d80041
	Actor* GetAbilityEffectUser();// 0x3edcb2d80041

--------------------------------
Class: SolarPlatformHelper.Object
	SolarPlatformStats* SolarPlatformStats;//[Offset: 0x30, Size: 0x8]
	SolarGameInstanceBase* SolarGameInstanceBase;//[Offset: 0x38, Size: 0x8]
	bool UseRenderThread();// 0x3f70b2d80041
	bool SupportsMultithreading();// 0x3f6fb2d80041
	double Seconds();// 0x3f6eb2d80041
	void ReceiveShutdown();// 0x3f6db2d80041
	void ReceiveInit();// 0x3f6cb2d80041
	bool IsThisApplicationForeground();// 0x3f6bb2d80041
	bool IsRunningOnBattery();// 0x3f6ab2d80041
	bool Is64bitOperatingSystem();// 0x3f69b2d80041
	FString GetUniqueDeviceId();// 0x3f68b2d80041
	FString GetTimeZoneId();// 0x3f67b2d80041
	FString GetSuitableStringWithUnitOfBytes(uint64 NumberOfBytes, FString ExtraUnit);// 0x3f66b2d80041
	SolarPlatformStats* GetSolarPlatformStats();// 0x3f65b2d80041
	int GetSimultaneousInstanceId();// 0x3f64b2d80041
	FString GetPrimaryGPUBrand();// 0x3f63b2d80041
	FString GetPathVarDelimiter();// 0x3f62b2d80041
	void GetOSVersions(out FString out_OSVersionLabel, out FString out_OSSubVersionLabel);// 0x3f61b2d80041
	FString GetOSVersion();// 0x3f60b2d80041
	int GetMaxPathLength();// 0x3f5fb2d80041
	GameUserSettings* GetGameUserSettings();// 0x3f5eb2d80041
	FString GetEnvironmentVariable(FString VariableName);// 0x3f5db2d80041
	Engine* GetEngine();// 0x3f5cb2d80041
	bool GetDiskTotalAndFreeSpace(FString InPath, out uint64 TotalNumberOfBytes, out uint64 NumberOfFreeBytes);// 0x3f5bb2d80041
	float GetDeviceTemperatureLevel();// 0x3f5ab2d80041
	FString GetDeviceMakeAndModel();// 0x3f59b2d80041
	FString GetDefaultDeviceProfileName();// 0x3f58b2d80041
	FString GetCPUVendor();// 0x3f57b2d80041
	uint32 GetCPUInfo();// 0x3f56b2d80041
	FString GetCPUChipset();// 0x3f55b2d80041
	FString GetCPUBrand();// 0x3f54b2d80041
	int GetBatteryLevel();// 0x3f53b2d80041
	FString ClipboardPaste();// 0x3f52b2d80041
	void ClipboardCopy(FString str);// 0x3f51b2d80041

--------------------------------
Class: SolarPlatformStats.Object
	uint64 MaxUsedPhysical;//[Offset: 0x30, Size: 0x8]
	void ReceiveWorldTickStart(World* World, enum LevelTick, float DeltaSeconds);// 0x3f7bb2d80041
	void ReceiveWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0x3f7ab2d80041
	void ReceiveShutdown();// 0x3f79b2d80041
	void ReceivePostWorldInitialization(World* World);// 0x3f78b2d80041
	void ReceiveInit();// 0x3f77b2d80041
	uint64 GetRHIUsedMemory();// 0x3f76b2d80041
	float GetRenderThreadTime();// 0x3f75b2d80041
	int GetNumDrawCalls();// 0x3f74b2d80041
	int GetMinFPS();// 0x3f73b2d80041
	float GetGameThreadTime();// 0x3f72b2d80041
	int GetAverageFPS();// 0x3f71b2d80041

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x4ec5b2d80041
	bool SupportsHDRDisplayOutput();// 0x4ec4b2d80041
	void SetVSyncEnabled(bool bEnable);// 0x4ec3b2d80041
	void SetVisualEffectQuality(int Value);// 0x4ec2b2d80041
	void SetViewDistanceQuality(int Value);// 0x4ec1b2d80041
	void SetToDefaults();// 0x4ec0b2d80041
	void SetTextureQuality(int Value);// 0x4ebfb2d80041
	void SetShadowQuality(int Value);// 0x4ebeb2d80041
	void SetShadingQuality(int Value);// 0x4ebdb2d80041
	void SetScreenResolution(IntPoint Resolution);// 0x4ebcb2d80041
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x4ebbb2d80041
	void SetResolutionScaleValue(int NewScaleValue);// 0x4ebab2d80041
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x4eb9b2d80041
	void SetPostProcessingQuality(int Value);// 0x4eb8b2d80041
	void SetOverallScalabilityLevel(int Value);// 0x4eb7b2d80041
	void SetFullscreenMode(byte InFullscreenMode);// 0x4eb6b2d80041
	void SetFrameRateLimit(float NewLimit);// 0x4eb5b2d80041
	void SetFoliageQuality(int Value);// 0x4eb4b2d80041
	void SetDynamicResolutionEnabled(bool bEnable);// 0x4eb3b2d80041
	void SetBenchmarkFallbackValues();// 0x4eb2b2d80041
	void SetAudioQualityLevel(int QualityLevel);// 0x4eb1b2d80041
	void SetAntiAliasingQuality(int Value);// 0x4eb0b2d80041
	void SaveSettings();// 0x4eafb2d80041
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x4eaeb2d80041
	void RevertVideoMode();// 0x4eadb2d80041
	void ResetToCurrentSettings();// 0x4eacb2d80041
	void LoadSettings(bool bForceReload);// 0x4eabb2d80041
	bool IsVSyncEnabled();// 0x4eaab2d80041
	bool IsVSyncDirty();// 0x4ea9b2d80041
	bool IsScreenResolutionDirty();// 0x4ea8b2d80041
	bool IsHDREnabled();// 0x4ea7b2d80041
	bool IsFullscreenModeDirty();// 0x4ea6b2d80041
	bool IsDynamicResolutionEnabled();// 0x4ea5b2d80041
	bool IsDynamicResolutionDirty();// 0x4ea4b2d80041
	bool IsDirty();// 0x4ea3b2d80041
	int GetVisualEffectQuality();// 0x4ea2b2d80041
	int GetViewDistanceQuality();// 0x4ea1b2d80041
	int GetTextureQuality();// 0x4ea0b2d80041
	int GetSyncInterval();// 0x4e9fb2d80041
	int GetShadowQuality();// 0x4e9eb2d80041
	int GetShadingQuality();// 0x4e9db2d80041
	IntPoint GetScreenResolution();// 0x4e9cb2d80041
	float GetResolutionScaleNormalized();// 0x4e9bb2d80041
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x4e9ab2d80041
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x4e99b2d80041
	float GetRecommendedResolutionScale();// 0x4e98b2d80041
	byte GetPreferredFullscreenMode();// 0x4e97b2d80041
	int GetPostProcessingQuality();// 0x4e96b2d80041
	int GetOverallScalabilityLevel();// 0x4e95b2d80041
	IntPoint GetLastConfirmedScreenResolution();// 0x4e94b2d80041
	byte GetLastConfirmedFullscreenMode();// 0x4e93b2d80041
	GameUserSettings* GetGameUserSettings();// 0x4e92b2d80041
	byte GetFullscreenMode();// 0x4e91b2d80041
	float GetFrameRateLimit();// 0x4e90b2d80041
	int GetFramePace();// 0x4e8fb2d80041
	int GetFoliageQuality();// 0x4e8eb2d80041
	IntPoint GetDesktopResolution();// 0x4e8db2d80041
	IntPoint GetDefaultWindowPosition();// 0x4e8cb2d80041
	byte GetDefaultWindowMode();// 0x4e8bb2d80041
	float GetDefaultResolutionScale();// 0x4e8ab2d80041
	IntPoint GetDefaultResolution();// 0x4e89b2d80041
	int GetCurrentHDRDisplayNits();// 0x4e88b2d80041
	int GetAudioQualityLevel();// 0x4e87b2d80041
	int GetAntiAliasingQuality();// 0x4e86b2d80041
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x4e85b2d80041
	void ConfirmVideoMode();// 0x4e84b2d80041
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x4e83b2d80041
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x4e82b2d80041
	void ApplyNonResolutionSettings();// 0x4e81b2d80041
	void ApplyHardwareBenchmarkResults();// 0x4e80b2d80041

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8]
	SoftClassPath RuntimeAssetsCollectionClassName;//[Offset: 0x2b0, Size: 0x18]
	RuntimeAssetsCollectionBase* RuntimeAssetsCollection;//[Offset: 0x2c8, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2d0, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2f0, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x318, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x338, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x350, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x358, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x370, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x378, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x390, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x398, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3a8, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3b0, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c8, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3d0, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e8, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3f0, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x400, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x408, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x418, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x420, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x430, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x438, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x448, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x450, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x460, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x468, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x480, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x488, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x498, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4a0, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4b0, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b8, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c8, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4d0, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4e0, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e8, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f8, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x500, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x510, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x538, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x540, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x548, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x558, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x560, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x568, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x570, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x590, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5b0, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b8, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5d0, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5e0, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5f0, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x600, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x610, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x620, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x630, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x640, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x650, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x654, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x658, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x65c, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x660, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x668, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x66c, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x670, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x680, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x690, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6a0, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a8, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6c0, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6d0, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6e0, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6f0, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x700, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x708, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x720, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x728, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x740, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x748, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x760, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x768, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x780, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x788, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7a8, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7b0, Size: 0x10]
	int TickCycles;//[Offset: 0x7c0, Size: 0x4]
	int GameCycles;//[Offset: 0x7c4, Size: 0x4]
	int ClientCycles;//[Offset: 0x7c8, Size: 0x4]
	float NearClipPlane;//[Offset: 0x7cc, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7d4, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d8, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d8, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7dc, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7e0, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7f0, Size: 0x8]
	FString SkipLODStripStaticMeshNames;//[Offset: 0x818, Size: 0x10]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4]
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4]
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10]
	enum TransitionType;//[Offset: 0x8e8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10]
	float MeshLODRange;//[Offset: 0x910, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x914, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x918, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x91c, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x920, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x924, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x92c, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x930, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x938, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x948, Size: 0x4]
	float DisplayGamma;//[Offset: 0x94c, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x950, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x954, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x964, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x974, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x984, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x994, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a5, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a5, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a5, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a5, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a8, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9b0, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b4, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9b8, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9c8, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9cc, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9d0, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc20, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc30, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc40, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc50, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc54, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc68, Size: 0x4]

--------------------------------
Class: RuntimeAssetsCollectionBase.Object

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x5391b2d80041
	enum GetSynchronizationState();// 0x5390b2d80041
	QualifiedFrameTime GetQualifiedFrameTime();// 0x538fb2d80041
	FrameRate GetFrameRate();// 0x538eb2d80041
	Timecode GetDelayedTimecode();// 0x538db2d80041
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x538cb2d80041

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WeaponGrowthManager.Object
	FString GetWeaponBpPath(int ID);// 0x4742b2d80041

--------------------------------
Class: IMChatObject.Object
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendPlayerPosToIMServerEveryFrame(out const Vector PlayerPosition);// 0x3534b2d80041

--------------------------------
Class: SolarLuaManager.Object
	SoftObjectPath LuaErrorWidgetPath;//[Offset: 0x40, Size: 0x18]
	LuaErrorWidgetBase* LuaErrorWidget;//[Offset: 0x60, Size: 0x8]
	void SetLuaErrorPopWidget(LuaErrorWidgetBase* Widget);// 0x3e90b2d80041
	void OnLuaContextCleanup(bool bFullCleanup);// 0x3e8fb2d80041
	enum GetBuildConfiguration();// 0x3e8eb2d80041
	void AddToDoNotShowAgainList(FString Msg);// 0x3e8db2d80041

--------------------------------
Class: LuaErrorWidgetBase.UserWidget.Widget.Visual.Object
	void ShowLuaError(out const FString[] LuaErrorMsgs);// 0x3e8cb2d80041

--------------------------------
Class: SolarGameStatistics.Object
	FString PlayerIdName;//[Offset: 0x30, Size: 0x10]
	FString LogTypeName;//[Offset: 0x40, Size: 0x10]
	SolarGameInstanceBase* Owner;//[Offset: 0x50, Size: 0x8]
	SolarGameStatisticsLogHeadInfo LogHeadInfo;//[Offset: 0x58, Size: 0x28]
	SolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo();// 0x3cb4b2d80041
	void SetSwapLogFileSize(int InSize);// 0x3cb3b2d80041
	void SetSwapLogFileInterval(int InInterval);// 0x3cb2b2d80041
	void SetLogValueSeparater(FString InValueSeparater);// 0x3cb1b2d80041
	void SetLogTerminator(FString InTerminator);// 0x3cb0b2d80041
	void SetLogFileNameSuffix(FString InLogFileNameSuffix);// 0x3cafb2d80041
	void SetLogFileNamePrefix(FString InLogFileNamePrefix);// 0x3caeb2d80041
	void SetLogFileExtension(FString InLogFileExtension);// 0x3cadb2d80041
	void SetLogFileDir(FString InLogFileDir);// 0x3cacb2d80041
	void SetLogElementSeparater(FString InElementSeparater);// 0x3cabb2d80041
	void SetLogCheckIntervalMS(int InLogCheckIntervalMS);// 0x3caab2d80041
	void ReceiveShutdown();// 0x3ca9b2d80041
	void ReceiveInit();// 0x3ca8b2d80041
	void NotifyBattleStart(FString InBattleID);// 0x3ca7b2d80041
	void NotifyBattleEnd();// 0x3ca6b2d80041
	void LogInternal(FString InLog);// 0x3ca5b2d80041
	void LogGameStats_KeyValues(FString InKey, out const FString[] InValues);// 0x3ca4b2d80041
	void LogGameStats_KeyValue(FString InKey, FString InValue);// 0x3ca3b2d80041
	void LogGameStats_Key(FString InKey);// 0x3ca2b2d80041
	bool IsUseEmptyHeadData(FString InPlayerId);// 0x3ca1b2d80041
	int GetSwapLogFileSize();// 0x3ca0b2d80041
	int GetSwapLogFileInterval();// 0x3c9fb2d80041
	FString GetSCMLogDataString(const bool bIncludeStatistics, SolarPlayerState* InPS);// 0x3c9eb2d80041
	FString GetProperLogElement(FString InElement);// 0x3c9db2d80041
	FString GetLogValueSeparater();// 0x3c9cb2d80041
	FString GetLogTerminator();// 0x3c9bb2d80041
	SolarGameStatisticsLogHeadInfo GetLogHeadInfo();// 0x3c9ab2d80041
	FString GetLogFileNameSuffix();// 0x3c99b2d80041
	FString GetLogFileNamePrefix();// 0x3c98b2d80041
	FString GetLogFileExtension();// 0x3c97b2d80041
	FString GetLogFileDir();// 0x3c96b2d80041
	FString GetLogElementSeparater();// 0x3c95b2d80041
	FString GetLogDataString(const bool bIncludeStatistics, FString InPlayerId);// 0x3c94b2d80041
	int GetLogCheckIntervalMS();// 0x3c93b2d80041
	FString GetHeadDataString(FString InPlayerId);// 0x3c92b2d80041
	FString GetEmptyHeadDataString();// 0x3c91b2d80041

--------------------------------
Class: SolarGameStatisticsLogHeadInfo
	int BattleInstanceId;//[Offset: 0x0, Size: 0x4]
	int PIEInstance;//[Offset: 0x4, Size: 0x4]
	FString BattleID;//[Offset: 0x8, Size: 0x10]
	FString WorldName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SolarWeaponMergeMeshManager.Object
	WeaponMergeMeshStruct[] MergeMeshArray;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WeaponMergeMeshStruct
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int weaponid;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	int[] Parts;//[Offset: 0x18, Size: 0x10]
	SkeletalMesh* MergeMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CrashReportManager.Object
	void SetUserId(out FString UserId);// 0x3412b2d80041
	void ReportLuaException(FString ErrorMsg, FString Traceback, bool bHandled);// 0x3411b2d80041

--------------------------------
Class: SolarPopPanelManager.SolarGameManager.Object

--------------------------------
Class: SolarApplicationLifetimeManager.SolarGameManager.Object
	int64 AppWillDeactivateTimestamp;//[Offset: 0x38, Size: 0x8]
	int64 AppHasReactivatedTimestamp;//[Offset: 0x40, Size: 0x8]
	void ReceiveOnAppWillDeactivate(int64 InTimestamp);// 0x386fb2d80041
	void ReceiveOnAppHasReactivated(int64 InTimestamp);// 0x386eb2d80041

--------------------------------
Class: SolarHomeActorManager.Object
	<FString,SolarHomeActor*> SpawnedHomeActors;//[Offset: 0x38, Size: 0x50]
	<IntVector,SolarHomeActor*> SpawnedConstructsLocKey;//[Offset: 0x88, Size: 0x50]
	<IntVector,SolarHomeActor*> PreviewConstructsLocKey;//[Offset: 0xd8, Size: 0x50]
	<SolarHomeConnectedGraph*> ConnectedGraphSet;//[Offset: 0x128, Size: 0x50]
	<FString,SolarHomeActor*> ClippingHomeActors;//[Offset: 0x178, Size: 0x50]
	<FString,SolarHomeActor*> InValidHomeActors;//[Offset: 0x1c8, Size: 0x50]
	<FString,SubPoolOfHomeActor*> HomeActorPools;//[Offset: 0x218, Size: 0x50]
	<int,HomeActorStaticData> StaticDataMap;//[Offset: 0x268, Size: 0x50]
	<FString,class Object> HomeActorClassPool;//[Offset: 0x2b8, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> SpawnedSpacesLocKey;//[Offset: 0x378, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> ShowsSpacesLocKey;//[Offset: 0x3c8, Size: 0x50]
	DataTable* HomeObjectTable;//[Offset: 0x470, Size: 0x8]
	SolarHomeShaderConfig* ShaderConfig;//[Offset: 0x478, Size: 0x8]
	DataTable* TextureDataTable;//[Offset: 0x480, Size: 0x8]
	DataTable* IconDataTable;//[Offset: 0x488, Size: 0x8]
	DataTable* PicDataTable;//[Offset: 0x490, Size: 0x8]
	int BuildCountPerFrame;//[Offset: 0x498, Size: 0x4]
	SolarHomeSpaceSpawner* HomeSpaceSpawner;//[Offset: 0x4b0, Size: 0x8]
	SolarHomePlayerController* HomePlayerCtrl;//[Offset: 0x4b8, Size: 0x8]
	SolarWaterActorNew* WaterActor;//[Offset: 0x4e0, Size: 0x8]
	<HomeShaderData,MaterialInstanceDynamic*> HomeObjShadersPool;//[Offset: 0x4e8, Size: 0x50]
	bool bIsConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool IsLoadingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	<SolarHomeDragUI*> CacheDragUIs;//[Offset: 0x5a8, Size: 0x50]
	<SolarHomeDragUI*> UsedDragUIs;//[Offset: 0x5f8, Size: 0x50]
	void UpdateCanSendSaveMsg();// 0x3d26b2d80041
	void UpdateCameraLayer(int NewLayer);// 0x3d25b2d80041
	bool TrySelectHomeActor(out const FString SelectedThisID, bool bSelect);// 0x3d24b2d80041
	bool TrySaveAllHomeActors();// 0x3d23b2d80041
	void TryResetAllHomeActors();// 0x3d22b2d80041
	void TryRemoveHomeActors(out const FString[] RemoveThisID);// 0x3d21b2d80041
	void TryRemoveHomeActor(out const FString RemoveThisID);// 0x3d20b2d80041
	void TryRemoveAllInvalidHomeActors();// 0x3d1fb2d80041
	void TryRemoveAllHomeActors();// 0x3d1eb2d80041
	void TryDyeHomeActor(out const FString DyeThisID, out const FString SlotName, out const FString TexturesID);// 0x3d1db2d80041
	void TryCreateHomeActorsNoLimit(out const HomeBuildReqData[] ReqDataArr);// 0x3d1cb2d80041
	void TryCreateHomeActors(out const HomeBuildReqData[] ReqData);// 0x3d1bb2d80041
	void TryCreateHomeActor(out const HomeBuildReqData ReqData);// 0x3d1ab2d80041
	void TryConfirmHomeActor(out const FString SelectedThisID, bool bCancel);// 0x3d19b2d80041
	void TryCancelHomeActor(out const FString SelectedThisID);// 0x3d18b2d80041
	void SetLastSelectingThisID(out const FString InThisID);// 0x3d17b2d80041
	void SetLastCreateThisID(out const FString InThisID);// 0x3d16b2d80041
	void SetIsConstruct(bool bNewConstruct);// 0x3d15b2d80041
	void SetHomeActorValid(SolarHomeActor* TargetActor, bool bNewValid);// 0x3d14b2d80041
	void SetHoldingType(enum NewType);// 0x3d13b2d80041
	void SetDragUILoc(SolarHomeDragUI* TargetUI, out const Vector NewLoc);// 0x3d12b2d80041
	void SetCurSelectingThisID(out const FString InThisID, bool bSelected);// 0x3d11b2d80041
	void SetCurBuildingID(int NewItemID);// 0x3d10b2d80041
	void SelectHomeActor_Request(out const FString SelectedThisID, bool bSelect);// 0x3d0fb2d80041
	void SelectHomeActor_Other(FString ThisID);// 0x3d0eb2d80041
	void SaveBuilding_Request(bool bSave);// 0x3d0db2d80041
	void RotateHomeActor(SolarHomeActor* TargetHomeActor, int DeltaAngle);// 0x3d0cb2d80041
	void RemoveHomeActors_Request(out const FString[] WillRemoveThisIDs);// 0x3d0bb2d80041
	void RemoveHomeActor_Request(out const FString WillRemoveThisID);// 0x3d0ab2d80041
	void RemoveAllHomeActors_Request();// 0x3d09b2d80041
	void OnSelectingThisIDChanged(bool bSelect, out const FString NewThisID);// 0x3d08b2d80041
	void OnSelectingActorCanSaveChanged(bool bNewCanSave);// 0x3d07b2d80041
	bool OnIsDragChanged(bool bIsDrag);// 0x3d06b2d80041
	void OnInvalidActorsCountChanged(int NewCount);// 0x3d05b2d80041
	void OnHoldingTypeChanged(enum OldType, enum NewType);// 0x3d04b2d80041
	void NotifyWhenWallDevicePutOnOtherPlace();// 0x3d03b2d80041
	void NotifyWhenFloorDevicePutOnOtherPlace();// 0x3d02b2d80041
	void NotifyWhenClickActorOnOtherFloor();// 0x3d01b2d80041
	void NotifyWhenCeilingDevicePutOnOtherPlace();// 0x3d00b2d80041
	void NotifyLoadingUIChanged(bool bShow);// 0x3cffb2d80041
	void MoveDevice(SolarHomeActor* TargetHomeActor, const SolarHomeActor* ParHomeActor, enum HitDir, out const Vector NewLoc);// 0x3cfeb2d80041
	void MoveConstruct(SolarHomeActor* TargetHomeActor, SolarHomeBaseSpace* NewSpace);// 0x3cfdb2d80041
	bool HasFoundation();// 0x3cfcb2d80041
	DataTable* GetTextureDataTable();// 0x3cfbb2d80041
	HomeActorStaticData GetStaticDataByItemID(int ItemID);// 0x3cfab2d80041
	SolarHomeShaderConfig* GetShaderConfig();// 0x3cf9b2d80041
	void GetMeshDefaultMat(int64 InItemID, out BuildMeshSlotData[] outData);// 0x3cf8b2d80041
	FString GetLastCreateThisID();// 0x3cf7b2d80041
	int GetInvalidActorsCount();// 0x3cf6b2d80041
	SolarHomeSpaceSpawner* GetHomeSpaceSpawner();// 0x3cf5b2d80041
	SolarHomePlayerController* GetHomePlayerCtrl();// 0x3cf4b2d80041
	bool GetHomePicConfig(FString Name, out HomePic OutConfig);// 0x3cf3b2d80041
	bool GetHomeObjectConfig(int InItemID, out HomeObject OutConfig);// 0x3cf2b2d80041
	bool GetHomeIconConfig(FString Name, out HomeIcon OutConfig);// 0x3cf1b2d80041
	enum GetHomeActorSecondType(int ItemID);// 0x3cf0b2d80041
	enum GetHomeActorFirstType(int ItemID);// 0x3cefb2d80041
	SolarHomeActor* GetHomeActorByThisID(out const FString InThisID);// 0x3ceeb2d80041
	SolarHomeActor* GetHomeActorByLoc(out const Vector InLoc);// 0x3cedb2d80041
	FString GetCurSelectingThisID();// 0x3cecb2d80041
	enum GetCurHoldingItemType();// 0x3cebb2d80041
	int GetCurBuildingID();// 0x3ceab2d80041
	bool GetActorCanSave(SolarHomeActor* InActor);// 0x3ce9b2d80041
	void DyeingHomeActor_Request(out const FString WillDyeingThisID, out const FString SlotName, out const FString TexturesID);// 0x3ce8b2d80041
	void DeSelectAllHomeActors_Request();// 0x3ce7b2d80041
	void CreateHomeActors_Request(out const HomeBuildReqData[] WillCreateDatas);// 0x3ce6b2d80041
	void CreateHomeActor_Request(out const HomeBuildReqData WillCreateData);// 0x3ce5b2d80041
	void ClientUpdateHomeActor_UseQueue(out const HomeActorServerData UpdateData);// 0x3ce4b2d80041
	void ClientUpdateHomeActor(out const HomeActorServerData UpdateData);// 0x3ce3b2d80041
	void ClientRemoveHomeActor_UseQueue(out const HomeActorServerData RemoveData);// 0x3ce2b2d80041
	void ClientRemoveHomeActor(out const HomeActorServerData RemoveData);// 0x3ce1b2d80041
	void ClientCreateHomeActor_UseQueue(out const HomeActorServerData WillCreateData, enum InLoadingType);// 0x3ce0b2d80041
	bool ClientCreateHomeActor(out const HomeActorServerData WillCreateData, bool InIsConstruct);// 0x3cdfb2d80041
	void Clear();// 0x3cdeb2d80041
	void ChangeCameraLayer(int DeltaLayer);// 0x3cddb2d80041
	bool CanPreviewWithBuilding(int TypeID);// 0x3cdcb2d80041
	bool CanDevicePlace(enum DeviceType, out const SolarHomeActor* HitConstruct, out const enum HitDir);// 0x3cdbb2d80041

--------------------------------
Class: HomeBuildReqData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	BuildMeshSlotData[] MatDataArr;//[Offset: 0x20, Size: 0x10]
	FString ParentThisID;//[Offset: 0x30, Size: 0x10]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: BuildMeshSlotData
	FString SlotName;//[Offset: 0x0, Size: 0x10]
	FString TexturesID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarHomeActor.Actor.Object
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x230, Size: 0x8]
	HomeActorStaticData HomeActorStaticData;//[Offset: 0x238, Size: 0x38]
	HomeActorServerData HomeActorServerData;//[Offset: 0x270, Size: 0x68]
	<FName,HomeOriginalShader> OriginalShaders;//[Offset: 0x2d8, Size: 0x50]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x338, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x340, Size: 0x10]
	<SolarHomeActor*,int> HitHomeActors;//[Offset: 0x350, Size: 0x50]
	SolarHomeConnectedGraph* CurrentConnectedGraph;//[Offset: 0x3a0, Size: 0x8]
	SolarHomeActor*[] NeighborFloors;//[Offset: 0x3a8, Size: 0x10]
	SolarHomeActor*[] NeighborWalls;//[Offset: 0x3b8, Size: 0x10]
	void UpdateHomeActor(out const HomeActorServerData NewServerData);// 0x3cdab2d80041
	void UpdateHitHomeActors(SolarHomeActor* NewActor, bool isAdd);// 0x3cd9b2d80041
	void SetStaticData(out const HomeActorStaticData NewData);// 0x3cd8b2d80041
	void SetServerData(out const HomeActorServerData NewData);// 0x3cd7b2d80041
	void SetMaterial(out const HomeActorServerData InServerData, bool bPlaceable);// 0x3cd6b2d80041
	void OnOverlayEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3cd5b2d80041
	void OnOverlayBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3cd4b2d80041
	void OnOverLap(Actor* OtherActor, bool isHitBegin);// 0x3cd3b2d80041
	void OnCreatedByServer(out const HomeActorStaticData NewStaticData, out const HomeActorServerData NewServerData);// 0x3cd2b2d80041
	void OnCanSaveChanged(bool bNewCanSave);// 0x3cd1b2d80041
	DataTable* GetTextureDataTable();// 0x3cd0b2d80041
	StaticMeshComponent* GetStaticMeshComp();// 0x3ccfb2d80041
	HomeActorStaticData GetStaticData();// 0x3cceb2d80041
	SolarHomeShaderConfig* GetShaderConfig();// 0x3ccdb2d80041
	HomeActorServerData GetServerData();// 0x3cccb2d80041
	bool GetNextLegalRotator(float RotAngle, out Rotator OutNextRot);// 0x3ccbb2d80041
	enum GetHitSurface(out const Vector HitNormal);// 0x3ccab2d80041
	bool GetCanSave();// 0x3cc9b2d80041
	bool CanSelected();// 0x3cc8b2d80041
	bool CanRemove();// 0x3cc7b2d80041

--------------------------------
Class: HomeActorServerData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FString ThisID;//[Offset: 0x8, Size: 0x10]
	enum Owner;//[Offset: 0x18, Size: 0x4]
	bool isPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	Vector CurLocation;//[Offset: 0x20, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x2c, Size: 0xc]
	BuildMeshSlotData[] FacesMatData;//[Offset: 0x38, Size: 0x10]
	FString ParentObject;//[Offset: 0x48, Size: 0x10]
	FString[] ChildObjects;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: HomeActorStaticData
	int64 ItemID;//[Offset: 0x0, Size: 0x8]
	enum FirstType;//[Offset: 0x8, Size: 0x4]
	enum SecondType;//[Offset: 0xc, Size: 0x4]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	FString BpPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: HomeOriginalShader

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x4d0, Size: 0xc]
	float LineThickness;//[Offset: 0x4dc, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x4d4bb2d80041
	Vector GetUnscaledBoxExtent();// 0x4d4ab2d80041
	Vector GetScaledBoxExtent();// 0x4d49b2d80041

--------------------------------
Class: SolarHomeConnectedGraph.Object
	<SolarHomeActor*> ConnectedFloors;//[Offset: 0x28, Size: 0x50]
	<SolarHomeActor*> BaseWalls;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: SolarHomeShaderConfig.DataAsset.Object
	SoftObjectPath EmissiveMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath MaskedMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath TranslucentMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath DeleteEmissiveMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DeleteMaskedMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath DeleteTranslucentMatPath;//[Offset: 0xa8, Size: 0x18]
	LinearColor PrdinaryColor;//[Offset: 0xc0, Size: 0x10]
	LinearColor PlaceableColor;//[Offset: 0xd0, Size: 0x10]
	LinearColor UnPlaceableColor;//[Offset: 0xe0, Size: 0x10]
	LinearColor PlaceableColorOther;//[Offset: 0xf0, Size: 0x10]
	float BreathLightTimeScale;//[Offset: 0x100, Size: 0x4]
	float PlaceableEmissveA;//[Offset: 0x104, Size: 0x4]
	float UnPlaceableEmissveA;//[Offset: 0x108, Size: 0x4]

--------------------------------
Class: SolarHomeDragUI.Actor.Object

--------------------------------
Class: SolarHomeBaseSpace.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x230, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x238, Size: 0x10]
	BaseSpaceData BaseSpaceData;//[Offset: 0x248, Size: 0xc]
	void UpdateHomeSpaceByData(out const BaseSpaceData NewData);// 0x3d2db2d80041
	void ShowBaseSpace();// 0x3d2cb2d80041
	void OnBaseSpaceUnOccupied();// 0x3d2bb2d80041
	void OnBaseSpaceOccupied();// 0x3d2ab2d80041
	void OnBaseSpaceCreated(int Layer, enum BaseSpaceType);// 0x3d29b2d80041
	void HideBaseSpace();// 0x3d28b2d80041
	BaseSpaceData GetData();// 0x3d27b2d80041

--------------------------------
Class: BaseSpaceData
	int Layer;//[Offset: 0x0, Size: 0x4]
	enum BaseSpaceType;//[Offset: 0x4, Size: 0x4]
	bool IsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SolarHomeSpaceSpawner.SolarMapElementBase.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x2a0, Size: 0x8]
	<enum,class Object> TypeClassMap;//[Offset: 0x2a8, Size: 0x50]
	<float,int> LayerMap;//[Offset: 0x2f8, Size: 0x50]
	float FloorUnit;//[Offset: 0x368, Size: 0x4]
	float WallUnit;//[Offset: 0x36c, Size: 0x4]
	float BaseUnit;//[Offset: 0x370, Size: 0x4]
	float RoundOnBase;//[Offset: 0x374, Size: 0x4]
	float RoundOnFloor;//[Offset: 0x378, Size: 0x4]
	float ArrowOnBase;//[Offset: 0x37c, Size: 0x4]
	float ArrowOnFloor;//[Offset: 0x380, Size: 0x4]
	float ArrowToWall;//[Offset: 0x384, Size: 0x4]
	Transform[] BasisFloorsTransArr;//[Offset: 0x390, Size: 0x10]
	bool IsAirWallOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	void OpenAirWall();// 0x3d61b2d80041
	void Init(int InBuildWidth, int InBuildHeight);// 0x3d60b2d80041
	bool GetIsAirWallOpen();// 0x3d5fb2d80041
	void CloseAirWall();// 0x3d5eb2d80041

--------------------------------
Class: SolarHomePlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	InputComponent* ConstructionInputComponent;//[Offset: 0x9f8, Size: 0x8]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0xa00, Size: 0x8]
	SolarHomeActor* DragActor;//[Offset: 0xa08, Size: 0x8]
	float MinCheckDistance;//[Offset: 0xa10, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xa14, Size: 0x4]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0xa18, Size: 0x8]
	bool bIsViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 0x1]
	bool bIsConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa21, Size: 0x1]
	float MoveCheckDis;//[Offset: 0xa30, Size: 0x4]
	float CheckDis;//[Offset: 0xbc8, Size: 0x4]
	SolarHomeCameraManager* CameraManager;//[Offset: 0xc60, Size: 0x8]
	Vector LookAtLocation;//[Offset: 0xc68, Size: 0xc]
	Vector OriginalLookAtLocation;//[Offset: 0xc74, Size: 0xc]
	Actor* CurrentViewTarget;//[Offset: 0xc80, Size: 0x8]
	Actor* OriginalViewTarget;//[Offset: 0xc88, Size: 0x8]
	void StopBuilding();// 0x3d5db2d80041
	void StartFadeOutEffect();// 0x3d5cb2d80041
	void StartBuilding();// 0x3d5bb2d80041
	void SolarGM_Home_ResetLayer(int InLayer);// 0x3d5ab2d80041
	void SolarGM_FillUpHome();// 0x3d59b2d80041
	void ShowBuildMainUI(bool bShow);// 0x3d58b2d80041
	void SetNormalCameraTarget();// 0x3d57b2d80041
	void SetConstructionCameraTarget();// 0x3d56b2d80041
	void SendMoveToBackend(out const ServerMoveData MoveData);// 0x3d55b2d80041
	void ResetConstructionCamera();// 0x3d54b2d80041
	void ResetCameraRotation();// 0x3d53b2d80041
	void OnTouchMove(int Index, out const Vector Location);// 0x3d52b2d80041
	void OnTouchEnd(int Index, out const Vector Location);// 0x3d51b2d80041
	void OnTouchBegin(int Index, out const Vector Location);// 0x3d50b2d80041
	void OnDragBegin(out const Vector Location);// 0x3d4fb2d80041
	void OnCameraRight(const float Value);// 0x3d4eb2d80041
	void OnCameraForward(const float Value);// 0x3d4db2d80041
	bool GetIsConstruction();// 0x3d4cb2d80041
	int GetCameraCurrentLayer();// 0x3d4bb2d80041
	void BindConstructionInput();// 0x3d4ab2d80041
	void BindBattleInput();// 0x3d49b2d80041

--------------------------------
Class: ServerMoveData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	int64 ServerTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector Acceleration;//[Offset: 0x10, Size: 0xc]
	Vector Velocity;//[Offset: 0x1c, Size: 0xc]
	Vector Loction;//[Offset: 0x28, Size: 0xc]
	byte CompressedMoveFlags;//[Offset: 0x34, Size: 0x1]
	byte RollByte;//[Offset: 0x35, Size: 0x1]
	uint32 YawPitchInt;//[Offset: 0x38, Size: 0x4]
	byte MovementMode;//[Offset: 0x3c, Size: 0x1]
	uint32 FullBodyAnimationState;//[Offset: 0x40, Size: 0x4]
	uint32 MontageAnimState;//[Offset: 0x44, Size: 0x4]
	byte JetPackFlag;//[Offset: 0x48, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: SolarHomeCameraManager.ActorComponent.Object
	CameraMovementParameters CameraMovementSetting;//[Offset: 0xc0, Size: 0x68]
	Vector LookAtLocation;//[Offset: 0x13c, Size: 0xc]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x148, Size: 0x8]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0x158, Size: 0x8]
	CameraActor* BuildCamera;//[Offset: 0x160, Size: 0x8]
	Actor* BattleCamera;//[Offset: 0x168, Size: 0x8]
	CameraComponent* BuildCameraComp;//[Offset: 0x170, Size: 0x8]
	void UpdateSliderScaleUI(float InScale);// 0x3d45b2d80041
	void UpdateCameraDistanceUI(float InPercent, float InScale);// 0x3d44b2d80041
	void SetNormalCameraTarget();// 0x3d43b2d80041
	void SetConstructionCameraTarget();// 0x3d42b2d80041
	void RotateCameraSpin(const float Value);// 0x3d41b2d80041
	void RotateCameraPitch(const float Value);// 0x3d40b2d80041
	void MoveCameraRight(const float Value);// 0x3d3fb2d80041
	void MoveCameraForward(const float Value);// 0x3d3eb2d80041
	void MoveCamera(int Index, out const Vector Location, const <int,Vector> FingerLocations);// 0x3d3db2d80041
	bool ChangeCameraMode(enum InMode);// 0x3d3cb2d80041
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);// 0x3d3bb2d80041
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);// 0x3d3ab2d80041

--------------------------------
Class: CameraMovementParameters
	float OneFingerMoveScale;//[Offset: 0x0, Size: 0x4]
	float MouseMoveScale;//[Offset: 0x4, Size: 0x4]
	float OneFingerZoomScale;//[Offset: 0x8, Size: 0x4]
	float MouseZoomScale;//[Offset: 0xc, Size: 0x4]
	float DoubleFingerSpinScale;//[Offset: 0x10, Size: 0x4]
	float DoubleFingerPitchScale;//[Offset: 0x14, Size: 0x4]
	float MouseRotateScale;//[Offset: 0x18, Size: 0x4]
	float LookAtLocationHeigh;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float PanoramicDefaultPitch;//[Offset: 0x28, Size: 0x4]
	float homeCameraBoundary;//[Offset: 0x2c, Size: 0x4]
	CurveFloat* DistanceCurve;//[Offset: 0x30, Size: 0x8]
	float DefultTime;//[Offset: 0x38, Size: 0x4]
	CurveFloat* DistanceCurve_Orthographic;//[Offset: 0x40, Size: 0x8]
	float DefaultTime_Orthographic;//[Offset: 0x48, Size: 0x4]
	CurveFloat* LayerTransitionCurve;//[Offset: 0x50, Size: 0x8]
	CurveFloat* CeilingTransitionCurve;//[Offset: 0x58, Size: 0x8]
	CurveFloat* PanoramicTransitionCurve;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: HomePic.TableRowBase
	SoftObjectPath PicPath;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: HomeObject.TableRowBase
	FString HomeObjectDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath BpPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PreviewBpPath;//[Offset: 0x30, Size: 0x18]
	BuildMeshSlotData[] DefaultMat;//[Offset: 0x48, Size: 0x10]
	bool IsFocusCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsDrawable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool IsRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool IsRotateHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int RotateAngleSingle;//[Offset: 0x60, Size: 0x4]
	SoftObjectPath Build_SFPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath Remove_SFXPath;//[Offset: 0x80, Size: 0x18]
	float FRemove_SFXTime;//[Offset: 0x98, Size: 0x4]
	FString FSBuild_Audio;//[Offset: 0xa0, Size: 0x10]
	FString FSRemove_Audio;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: HomeIcon.TableRowBase
	SoftObjectPath NormalIconPath;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath SelectedIconPath;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: SubPoolOfHomeActor.Object
	SolarHomeActor*[] UseActors;//[Offset: 0x30, Size: 0x10]
	SolarHomeActor*[] UnUseActors;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarWaterActorNew.StaticMeshActor.Actor.Object
	void OnExitWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x457fb2d80041
	void OnEnterWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x457eb2d80041

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x230, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x239, Size: 0x1]
	void SetMobility(byte InMobility);// 0x3ae8b2d80041

--------------------------------
Class: HomeShaderData

--------------------------------
Class: SolarGameplayLogger.Object
	enum[] DefaultChannels;//[Offset: 0x28, Size: 0x10]
	void SolarDebugLog(enum Channel, FString Message);// 0x3c8eb2d80041
	void EnableDebugLogChannel(enum Channel);// 0x3c8db2d80041
	void DisableDebugLogChannel(enum Channel);// 0x3c8cb2d80041

--------------------------------
Class: SolarAttributeSubSystem.SolarGameManager.Object
	<int,SolarAttributeConfig> AttributeDefaultData;//[Offset: 0x38, Size: 0x50]
	<int,SolarAttributeSubModifierGroup*> GlobalModifiers;//[Offset: 0x88, Size: 0x50]
	float CharacterTakeDamage(SolarAttributeSubComponent* AttributeSubComp, out const float Damage);// 0x387eb2d80041
	float CalcWeaponFireDamage(SolarAttributeSubComponent* AttributeSet, out const int ModeIdx);// 0x387db2d80041

--------------------------------
Class: SolarAttributeConfig
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
	float BaseValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarAttributeSubModifierGroup.Object

--------------------------------
Class: SolarAttributeSubComponent.ActorComponent.Object
	<int,SolarAttributeSubData*> AttributeSubs;//[Offset: 0xb8, Size: 0x50]
	SolarAttributeSubReplicateData[] AttributeSubRepData;//[Offset: 0x108, Size: 0x10]
	<int,float> ClientAttributeSubValues;//[Offset: 0x118, Size: 0x50]
	void RemoveModifier(int AttributeSubID, out const FName Name);// 0x387bb2d80041
	void OnRep_AttributeSubRepDatas();// 0x387ab2d80041
	void OnAttributeSubChanged();// 0x3879b2d80041
	float GetValue(int AttributeSubID);// 0x3878b2d80041
	SolarAttributeSubSystem* GetAttributeSubSystem();// 0x3877b2d80041
	SolarAttributeSubComponent* GetAttributeSubComponentFromActor(Actor* InActor);// 0x3876b2d80041
	int AddModifier(int AttributeSubID, byte InOpType, float Magnitude, out const FName Name);// 0x3875b2d80041

--------------------------------
Class: SolarAttributeSubData.Object
	SolarAttributeSubModifierGroup* LocalModifier;//[Offset: 0x28, Size: 0x8]
	SolarAttributeSubModifierGroup* GlobalModifier;//[Offset: 0x30, Size: 0x8]
	int AttributeID;//[Offset: 0x50, Size: 0x4]
	float CurrentValue;//[Offset: 0x54, Size: 0x4]
	float MaxValue;//[Offset: 0x58, Size: 0x4]
	float MinValue;//[Offset: 0x5c, Size: 0x4]
	float BaseValue;//[Offset: 0x60, Size: 0x4]
	void OnModifierChanged();// 0x387cb2d80041

--------------------------------
Class: SolarAttributeSubReplicateData
	int AttributeID;//[Offset: 0x0, Size: 0x4]
	float AttributeValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SCustomizedGameModeManager.Object
	SolarGameMode_JobManager* JobManager;//[Offset: 0x30, Size: 0x8]
	SolarGameMode_DataManager* DataManager;//[Offset: 0x38, Size: 0x8]
	SolarGameMode_PlayerManager* PlayerManager;//[Offset: 0x40, Size: 0x8]
	SolarGameMode_CharacterManager* CharacterManager;//[Offset: 0x48, Size: 0x8]
	SolarGameMode_LevelManager* LevelManager;//[Offset: 0x50, Size: 0x8]
	SolarGameMode_ElementManager* ElementManager;//[Offset: 0x58, Size: 0x8]
	SolarGameMode_EffectJobManager* EffectJobManager;//[Offset: 0x60, Size: 0x8]
	SCustomizedMode_AttributeManager* AttributeManager;//[Offset: 0x68, Size: 0x8]
	SolarGameModeData* GameModeData;//[Offset: 0x70, Size: 0x8]
	void InitModeById(int ModeID);// 0x373eb2d80041

--------------------------------
Class: SolarGameMode_JobManager.Object
	<FString,GameMode_SideData*> SideList;//[Offset: 0x38, Size: 0x50]
	SCustomizedGameMode* CurrentGameMode;//[Offset: 0x88, Size: 0x8]
	DataTable* CurrentModeJobData;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: GameMode_SideData.Object
	<FString,GameMode_JobData*> JobList;//[Offset: 0x28, Size: 0x50]
	SGameMode_Player*[] PlayerList;//[Offset: 0x78, Size: 0x10]
	FString Name;//[Offset: 0x88, Size: 0x10]
	int SideIndex;//[Offset: 0x98, Size: 0x4]
	int MatchCount;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: GameMode_JobData.Object
	SGameMode_Player*[] PlayerList;//[Offset: 0x28, Size: 0x10]
	FString Name;//[Offset: 0x38, Size: 0x10]
	FString[] Tags;//[Offset: 0x48, Size: 0x10]
	GameMode_JobManagerRow JobData;//[Offset: 0x58, Size: 0x120]
	int MatchCount;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: SGameMode_Player.Object
	Controller* Controller;//[Offset: 0x28, Size: 0x8]
	int PlayerId;//[Offset: 0x30, Size: 0x4]
	FString SolarPlayerId;//[Offset: 0x38, Size: 0x10]
	byte SolarTeamId;//[Offset: 0x48, Size: 0x1]
	byte PosInTeam;//[Offset: 0x49, Size: 0x1]
	int Gender;//[Offset: 0x4c, Size: 0x4]
	int AvatarID;//[Offset: 0x50, Size: 0x4]
	FString SideName;//[Offset: 0x58, Size: 0x10]
	FString JobName;//[Offset: 0x68, Size: 0x10]
	FString SolarNickName;//[Offset: 0x78, Size: 0x10]
	FString OS;//[Offset: 0x88, Size: 0x10]
	int UserId;//[Offset: 0x98, Size: 0x4]
	bool bIsAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	enum PlayerState;//[Offset: 0x9d, Size: 0x1]
	void OnRep_PlayerController();// 0x3c7cb2d80041
	SolarPlayerState* GetBindedPlayerState();// 0x3c7bb2d80041
	Pawn* GetBindedPawn();// 0x3c7ab2d80041
	SolarCharacter* GetBindedCharacter();// 0x3c79b2d80041
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x3c78b2d80041
	void ClientCloseUI(FString UIName);// 0x3c77b2d80041
	void BindNewCharacter(SolarCharacter* NewCharacter);// 0x3c76b2d80041

--------------------------------
Class: GameMode_JobManagerRow.TableRowBase
	FString Name;//[Offset: 0x8, Size: 0x10]
	FString Desc;//[Offset: 0x18, Size: 0x10]
	int Count;//[Offset: 0x28, Size: 0x4]
	int MatchCount;//[Offset: 0x2c, Size: 0x4]
	FString Side;//[Offset: 0x30, Size: 0x10]
	FString Job;//[Offset: 0x40, Size: 0x10]
	FString[] Tag;//[Offset: 0x50, Size: 0x10]
	SoftObjectPath BP_Join;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath BP_Deploy;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath BP_Slay;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath BP_Assist;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath BP_Die;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath BP_Hit;//[Offset: 0xd8, Size: 0x18]
	SoftObjectPath BP_GetHit;//[Offset: 0xf0, Size: 0x18]
	SoftObjectPath BP_ControllerLogic;//[Offset: 0x108, Size: 0x18]

--------------------------------
Class: SCustomizedGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SolarGameMode_LogicComponent* ModeLogicComponent;//[Offset: 0x4e0, Size: 0x8]
	SolarGameMode_RewardComponent* ModeRewardComponent;//[Offset: 0x4e8, Size: 0x8]
	SCustomizedGameModeManager* CustomModeManager;//[Offset: 0x4f0, Size: 0x8]
	SolarGameMode_DataManager* CustomModeDataManager;//[Offset: 0x4f8, Size: 0x8]
	class SolarRadarBase* RadarClass;//[Offset: 0x500, Size: 0x8]
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x373cb2d80041
	void OnReceiveBattleStart(PlayerController* PlayerController);// 0x373bb2d80041

--------------------------------
Class: SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	class SolarChargingPile[] ChargingZoneClass;//[Offset: 0x468, Size: 0x10]
	ChargingZone[] ChargingZones;//[Offset: 0x478, Size: 0x10]
	float TimeToEnd;//[Offset: 0x488, Size: 0x4]
	delegate OnPlayerDisconnectedGame;//[Offset: 0x498, Size: 0x10]
	delegate OnPlayerReconnectedGame;//[Offset: 0x4a8, Size: 0x10]
	int SettlementStageConfigID;//[Offset: 0x4d8, Size: 0x4]
	void SettlePlayerBattleData(SolarPlayerState* Player);// 0x1a91b2d80041
	void ReceiveBattleOver();// 0x1a90b2d80041
	void OnPlayerLeaveDSTimeOut(SolarPlayerState* PlayerState);// 0x1a8fb2d80041
	bool IsAutoSettlementWhenKilled();// 0x1a8eb2d80041
	void CalculatePlayerReward(SolarPlayerState* Player);// 0x1a8db2d80041

--------------------------------
Class: ChargingZone
	float Level1;//[Offset: 0x0, Size: 0x4]
	float Level2;//[Offset: 0x4, Size: 0x4]
	float Level3;//[Offset: 0x8, Size: 0x4]
	float Level4;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarGameMode_LogicComponent.ActorComponent.Object
	void OnPlayerQuit(SGameMode_Player* QuitPlayer);// 0x3b9ab2d80041
	void OnPlayerPlacedFinished(SGameMode_Player* Player, FString LevelName);// 0x3b99b2d80041
	void OnPlayerOfflineTimeOut(SGameMode_Player* OfflineTimeoutPlayer);// 0x3b98b2d80041
	void OnPlayerLevelLoaded(SGameMode_Player* Player, FString LevelName);// 0x3b97b2d80041
	void OnPlayerJoin(SGameMode_Player* NewPlayer);// 0x3b96b2d80041
	void OnPlayerJobChange(SGameMode_Player* Player, FString OldSide, FString OldJob, FString NewSide, FString NewJob);// 0x3b95b2d80041
	void OnOpenSupplement();// 0x3b94b2d80041
	void OnMatchEnd(const int RPCID);// 0x3b93b2d80041
	void OnGameModeInit();// 0x3b92b2d80041
	void OnCloseSupplement();// 0x3b91b2d80041
	void OnBotAIDataReady();// 0x3b90b2d80041
	void OnBattleTick(float BattleTime);// 0x3b8fb2d80041
	void OnBattleBegin();// 0x3b8eb2d80041

--------------------------------
Class: SolarGameMode_RewardComponent.ActorComponent.Object
	void OnPlayerOut(SGameMode_Player* Player, enum PlayerOutType);// 0x3b9cb2d80041
	void ClientOnPlayerOut(SGameMode_Player* Player, enum PlayerOutType);// 0x3b9bb2d80041

--------------------------------
Class: SolarGameMode_DataManager.Object
	<enum,SolarGameMode_DataAccessorBase*> Accessors;//[Offset: 0x40, Size: 0x50]
	SolarGameMode_JobManager* JobManager;//[Offset: 0x98, Size: 0x8]
	SCustomizedGameMode* CurrentGameMode;//[Offset: 0xa0, Size: 0x8]
	SCustomizedMode_ModeDataReady* ModeDataReadyAction;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: SolarGameMode_DataAccessorBase.Object
	SolarGameMode_RankManager* RankManager;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SolarGameMode_RankManager.Object
	SolarGameMode_RankData[] NewRanking;//[Offset: 0x30, Size: 0x10]
	SolarGameMode_RankData[] OldRanking;//[Offset: 0x40, Size: 0x10]
	<FString,SolarGameMode_RankDataMap> RankObjectList;//[Offset: 0x50, Size: 0x50]
	void RemoveRangeEvent(FString RankDataName);// 0x3ba5b2d80041
	void BindEvent(FString RankDataName, delegate Delegate);// 0x3ba4b2d80041

--------------------------------
Class: SolarGameMode_RankData
	Object* HostObject;//[Offset: 0x0, Size: 0x8]
	int RankingNumber;//[Offset: 0x8, Size: 0x4]
	int IntValue;//[Offset: 0xc, Size: 0x4]
	float FloatValue;//[Offset: 0x10, Size: 0x4]
	FString RankDataName;//[Offset: 0x18, Size: 0x10]
	FString ValueName;//[Offset: 0x28, Size: 0x10]
	enum DataType;//[Offset: 0x38, Size: 0x1]
	enum HostType;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: SolarGameMode_RankDataMap
	enum RankDataType;//[Offset: 0x0, Size: 0x1]
	SolarGameMode_RankData[] CurrentRanking;//[Offset: 0x8, Size: 0x10]
	<Object*,SolarGameMode_RankData> RankDatas;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: SCustomizedMode_ModeDataReady.BlueprintAsyncActionBase.Object
	delegate OnModeDataReadyComplete;//[Offset: 0x38, Size: 0x10]
	void HandleModeDataReadyComplete();// 0x374db2d80041
	SCustomizedMode_ModeDataReady* BindModeDataReady(Object* WorldContextObject);// 0x374cb2d80041

--------------------------------
Class: SolarRadarBase.Actor.Object
	bool bPublicRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	enum RadarType;//[Offset: 0x231, Size: 0x1]
	enum[] ScanTargetTypes;//[Offset: 0x238, Size: 0x10]
	float EffectRadius;//[Offset: 0x248, Size: 0x4]
	Vector2D EffectSize;//[Offset: 0x24c, Size: 0x8]
	bool bTeamShare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]
	bool bShowTowards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1]
	bool bMarkPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1]
	bool bUniqueExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 0x1]
	bool bNotifyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float DisplayTime;//[Offset: 0x25c, Size: 0x4]
	float ScanFrequency;//[Offset: 0x260, Size: 0x4]
	bool bPerspectiveInScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	MaterialInterface* PerspectiveMaterial;//[Offset: 0x268, Size: 0x8]
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0x2b8, Size: 0x4]
	GameplayTagContainer InhibitionTagContainer;//[Offset: 0x2c0, Size: 0x20]
	Actor*[] PerspectiveedActors;//[Offset: 0x2e0, Size: 0x10]
	<Actor*,PerspectiveActorInfo> ProcessingActors;//[Offset: 0x2f0, Size: 0x50]
	int[] OneTimeScannedPlayerIDs;//[Offset: 0x340, Size: 0x10]
	void ServerOneTimeScanStart();// 0x40e7b2d80041
	void PerspectiveTargetCharacter(SolarCharacter* InTargetCharacter);// 0x40e6b2d80041
	void OnRep_OneTimeScannedPlayerIDs();// 0x40e5b2d80041

--------------------------------
Class: PerspectiveActorInfo

--------------------------------
Class: SolarGameMode_PlayerManager.Object
	SGameMode_Player*[] Players;//[Offset: 0x30, Size: 0x10]
	<Controller*,SGameMode_Player*> ControllerMap;//[Offset: 0x40, Size: 0x50]
	SGameMode_Player* LocalPlayer;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: SolarGameMode_CharacterManager.Object
	SolarCharacter*[] Characters;//[Offset: 0x30, Size: 0x10]
	void PlaceCharacterAtStart(SolarCharacter* Character, PlayerStart* PlayerStart, const bool bClearAllItems, const bool bEmptyEnergy, const bool bReChargeJetToFull, const bool bClearWeapons);// 0x3ba0b2d80041
	void PlaceCharacterAtLocation(SolarCharacter* Character, out const Vector Location);// 0x3b9fb2d80041

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x254, Size: 0x8]

--------------------------------
Class: SolarGameMode_LevelManager.Object
	<FString,SGameMode_LevelConfig> LevelConfigs;//[Offset: 0xc0, Size: 0x50]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x110, Size: 0x50]
	<FString,ElementLevelStreaming> PersistentElementLevelStreamings;//[Offset: 0x1b0, Size: 0x50]
	FString[] LoadingElementLevelNames;//[Offset: 0x200, Size: 0x10]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x210, Size: 0x10]
	void ShowTransitionUI();// 0x3bb5b2d80041
	void SetMinimapFootprintVisible(bool bVisible);// 0x3bb4b2d80041
	void OnStreamingLevelLoaded();// 0x3bb3b2d80041
	void OnLevelLoaded();// 0x3bb2b2d80041
	void OnElementStreamingLevelUnLoaded();// 0x3bb1b2d80041
	void OnElementStreamingLevelLoaded();// 0x3bb0b2d80041
	void HideTransitionUI();// 0x3bafb2d80041

--------------------------------
Class: SGameMode_LevelConfig
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x20, Size: 0x18]
	int MiniMapId;//[Offset: 0x38, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	SolarElementGroupPath[] ElementGroups;//[Offset: 0x40, Size: 0x10]
	class LoadingUIBase* LoadingUI;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SolarElementGroupPath
	FString Name;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ElementLevel;//[Offset: 0x10, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bPersistentLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: ElementLevelStreaming
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bPersistentLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	LevelStreamingDynamic* LevelStreamingDynamic;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarGameMode_ElementManager.Object
	SolarMapElementBase*[] ElementsList;//[Offset: 0x30, Size: 0x10]
	SolarMonster*[] MonsterList;//[Offset: 0x40, Size: 0x10]
	SolarPlayerStart*[] PlayerStartList;//[Offset: 0x50, Size: 0x10]
	<FName,class SolarGameMode_HandleElementRPC> HandleActorRPCBPs;//[Offset: 0x60, Size: 0x50]
	<FString,SolarMapElementBase*> ElementMap;//[Offset: 0xb0, Size: 0x50]
	void OnStimulusActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x3baeb2d80041

--------------------------------
Class: SolarMonster.SolarCharacterBase.Character.Pawn.Actor.Object
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0x5e0, Size: 0x8]
	SolarMBCComponent* SolarMBCComponent;//[Offset: 0x5e8, Size: 0x8]
	WeaponSystemBase* WeaponSystemComponent;//[Offset: 0x5f0, Size: 0x8]
	int MonsterID;//[Offset: 0x5f8, Size: 0x4]
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x3ecbb2d80041
	void SetCurrentHealth(float healthValue);// 0x3ecab2d80041
	void OnMonsterDied();// 0x3ec9b2d80041
	FString GetSoundEventNameSpawn();// 0x3ec8b2d80041
	FString GetSoundEventNameHasEnemy();// 0x3ec7b2d80041
	SolarMonsterAIController* GetMonsterController();// 0x3ec6b2d80041

--------------------------------
Class: SolarMonsterAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	float LoseSightTimeConfig;//[Offset: 0x380, Size: 0x4]
	float LoseEnemyActorConfig;//[Offset: 0x384, Size: 0x4]
	float DamageSenseDistThreshold;//[Offset: 0x388, Size: 0x4]
	SolarAISpawnVolume* OwnerAISpawnVolume;//[Offset: 0x390, Size: 0x8]
	<Actor*,float> DamageStimulusMap;//[Offset: 0x398, Size: 0x50]
	<Actor*> SightStimulusActors;//[Offset: 0x3e8, Size: 0x50]
	int StrengthGrade;//[Offset: 0x438, Size: 0x4]
	float WeaponDamageAttenuation;//[Offset: 0x43c, Size: 0x4]
	<Actor*> IgnoredActors;//[Offset: 0x440, Size: 0x50]
	bool UpdateStrengthGradeCfg(int InStrengthGrade);// 0x3ed1b2d80041
	void SetSightSenseParams(float SightRadius, float LoseSightRadius, float PeripheralVisionHalfAngleDegrees, float MaxAge);// 0x3ed0b2d80041
	void OnTargetUpdateCallBack(Actor* Actor, AIStimulus Stimulus);// 0x3ecfb2d80041
	void OnStimulusActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x3eceb2d80041
	SolarMonster* GetMonster();// 0x3ecdb2d80041
	float GetDamageFactor();// 0x3eccb2d80041

--------------------------------
Class: SolarAISpawnVolume.Volume.Brush.Actor.Object
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x268, Size: 0x8]
	float AISpawnVolumeTetherRadius;//[Offset: 0x2a4, Size: 0x4]

--------------------------------
Class: SolarMBCComponent.ActorComponent.Object
	SolarMonster* MonsterOwner;//[Offset: 0xb8, Size: 0x8]
	SolarMonsterAnimInstance* MonsterAnimInstance;//[Offset: 0xc0, Size: 0x8]
	bool bHasEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	void OnRep_HasEnemy();// 0x3ebbb2d80041
	void NetPlayMontageFromBT();// 0x3ebab2d80041
	void NetAbortMontageFromBT();// 0x3eb9b2d80041

--------------------------------
Class: SolarMonsterAnimInstance.AnimInstance.Object
	SolarMonster* Monster;//[Offset: 0x268, Size: 0x8]
	SolarMBCComponent* BehaviorCtrlComponent;//[Offset: 0x270, Size: 0x8]
	float MoveSpeed;//[Offset: 0x278, Size: 0x4]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	float DamageDirection;//[Offset: 0x280, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x284, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x288, Size: 0x4]
	bool bIsDoingMontageFromAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	void DoPlayMontageFromBT();// 0x3ed4b2d80041
	void DoAbortMontageFromBT();// 0x3ed3b2d80041
	bool CheckAttackStateTransitionOut(float CurrentRatio, float BlendOutRatio, int AttackState);// 0x3ed2b2d80041

--------------------------------
Class: WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	WeaponSystemAutoFire* WeaponSystemAutoFire;//[Offset: 0x2b0, Size: 0x8]
	WeaponSystemAutoScope* WeaponSystemAutoScope;//[Offset: 0x2b8, Size: 0x8]
	WeaponSystemAssistAim* WeaponSystemAssistAim;//[Offset: 0x2c0, Size: 0x8]
	WeaponSystemInteract WeaponSysIneract;//[Offset: 0x2c8, Size: 0x50]
	Actor* MyPossessPawn;//[Offset: 0x318, Size: 0x8]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	bool bPreparePrimaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 0x1]
	bool bPrepareSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 0x1]
	bool bWeaponFireByAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	void WeaponAssistSystemTick(float InDeltaTime);// 0x47cbb2d80041
	bool TryAssistAimApproach(SolarWeapon* InWeapon, const bool InbOpenScope);// 0x47cab2d80041
	void SwitchAutoScopeEnable();// 0x47c9b2d80041
	void SwitchAutoFireEnable();// 0x47c8b2d80041
	void SwitchAutoFire(bool Open);// 0x47c7b2d80041
	void SwitchAssistAim(bool opened);// 0x47c6b2d80041
	void SetCurrentActiveWeapon(SolarWeapon* Weapon);// 0x47c5b2d80041
	void SetCrosshairVisible(bool InVisible);// 0x47c4b2d80041
	void ReceiveMsgFromPlayer(bool bClient, out const PlayerWeaponMsg Msg);// 0x47c3b2d80041
	void OnTouchScreen();// 0x47c2b2d80041
	bool IsPrepareFire();// 0x47c1b2d80041
	WeaponSysStateStruct GetCurrentState();// 0x47c0b2d80041
	bool CheckAutoFire(out bool canfire);// 0x47bfb2d80041
	bool CheckAssistAim(out Rotator Offset);// 0x47beb2d80041
	void AssistAimAdsorb();// 0x47bdb2d80041

--------------------------------
Class: PlayerWeaponMsg
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString MsgDetail;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WeaponSysStateStruct
	int State;//[Offset: 0x0, Size: 0x4]
	FString Parameter;//[Offset: 0x8, Size: 0x10]
	bool bPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WeaponSystemAutoFire.Object
	void OnWeaponFire();// 0x47bcb2d80041

--------------------------------
Class: WeaponSystemAutoScope.Object

--------------------------------
Class: WeaponSystemAssistAim.Object
	SolarWeapon* CurrentWeapon;//[Offset: 0x2c, Size: 0x8]
	SolarCharacter* WeaponHolder;//[Offset: 0x34, Size: 0x8]
	interface class None* HolderAAInterface;//[Offset: 0x40, Size: 0x10]
	SolarCameraComponent* SolarCamera;//[Offset: 0x50, Size: 0x8]
	SolarPlayerController* WeaponHolderController;//[Offset: 0x58, Size: 0x8]
	GlobalWeaponConfig* GlobalWeaponConfig;//[Offset: 0x60, Size: 0x8]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x68, Size: 0x8]
	SolarAssistAimDesc CurrentAssistAimDesc;//[Offset: 0x70, Size: 0x28]
	SolarCharacter* TargetActor;//[Offset: 0x98, Size: 0x8]
	SolarSignificanceManager* SignificanceManager;//[Offset: 0xa0, Size: 0x8]
	SolarAssistAimData CurrentAssistAimData;//[Offset: 0xd0, Size: 0x48]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	void RefreshCurrentWeapon(SolarWeapon* Weapon);// 0x47bbb2d80041
	bool Init(out const interface classNone AAInterface);// 0x47bab2d80041
	bool GetDeltaData(out Rotator OutCameraOffsetRotator);// 0x47b9b2d80041
	bool GetActive();// 0x47b8b2d80041

--------------------------------
Class: SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float ConfigDistanceToTarget;//[Offset: 0x8d0, Size: 0x4]
	Vector ConfigCameraOffset;//[Offset: 0x8d4, Size: 0xc]
	Vector ConfigTargetOffset;//[Offset: 0x8e0, Size: 0xc]
	float ConfigFOV;//[Offset: 0x8ec, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x8f0, Size: 0x4]
	float ViewPitchMin;//[Offset: 0x8f4, Size: 0x4]
	float ViewYawMax;//[Offset: 0x8f8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x8fc, Size: 0x4]
	float CameraOccupiedRoom;//[Offset: 0x900, Size: 0x4]
	bool EnableDistanceSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	bool EnableFOVSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x905, Size: 0x1]
	SolarCameraComponent* GetCameraComponentFromActor(const Actor* InActor);// 0x3a05b2d80041

--------------------------------
Class: SolarSignificanceManager.SignificanceManager.SignificanceManagerBase.Object
	float CalculateSceneActorTickInterval;//[Offset: 0x160, Size: 0x4]
	Actor*[] ManagedSceneActors;//[Offset: 0x178, Size: 0x10]
	<Actor*> ManagedSceneActorSet;//[Offset: 0x188, Size: 0x50]

--------------------------------
Class: SignificanceManager.SignificanceManagerBase.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x148, Size: 0x18]

--------------------------------
Class: SignificanceManagerBase.Object

--------------------------------
Class: SolarAssistAimData
	Vector2D DetectionRange;//[Offset: 0x0, Size: 0x8]
	Vector2D DetectionRangeMinRate;//[Offset: 0x8, Size: 0x8]
	Vector2D DetectionRangeMaxRate;//[Offset: 0x10, Size: 0x8]
	bool bLimitMinDetectionRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName[] DetectionScokets;//[Offset: 0x20, Size: 0x10]
	Vector2D DetectionPoint;//[Offset: 0x30, Size: 0x8]
	Vector2D RealDetectionRange;//[Offset: 0x38, Size: 0x8]
	float DetectionDistanceMinSquared;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: WeaponSystemInteract

--------------------------------
Class: SolarPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x268, Size: 0x4]
	FString Side;//[Offset: 0x270, Size: 0x10]
	FString Job;//[Offset: 0x280, Size: 0x10]
	FString ElementID;//[Offset: 0x290, Size: 0x10]
	enum Type;//[Offset: 0x2a0, Size: 0x1]
	enum State;//[Offset: 0x2a1, Size: 0x1]
	enum Visibility;//[Offset: 0x2a2, Size: 0x1]
	FName ElementTypeName;//[Offset: 0x2a4, Size: 0x8]
	FString GroupKey;//[Offset: 0x2b0, Size: 0x10]
	Vector[] PlayerLocations;//[Offset: 0x2c0, Size: 0x10]
	void SetElementVisibility(const enum NewType);// 0x40c2b2d80041
	enum SetElementState(const enum NewState);// 0x40c1b2d80041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x40c0b2d80041
	void OnElementStateChanged(const enum CurrentState);// 0x40bfb2d80041

--------------------------------
Class: SolarGameMode_EffectJobManager.Object

--------------------------------
Class: SCustomizedMode_AttributeManager.Object

--------------------------------
Class: SolarGameModeData.Object
	int GameModeId;//[Offset: 0x30, Size: 0x4]
	SGameMode_ModeConfig* CurrentModeData;//[Offset: 0x38, Size: 0x8]
	FString ModeConfigPath;//[Offset: 0x40, Size: 0x10]
	FString ModeParamsStr;//[Offset: 0x50, Size: 0x10]
	DataTable* JobDataTable;//[Offset: 0x60, Size: 0x8]
	DataTable* BoardDataTable;//[Offset: 0x68, Size: 0x8]
	DataTable* AttributeDataTable;//[Offset: 0x70, Size: 0x8]
	<FString,FString> ModeParams;//[Offset: 0xa8, Size: 0x50]
	void ReadConfigData();// 0x3ba2b2d80041
	void InitModeParams(FString ParamStr);// 0x3ba1b2d80041

--------------------------------
Class: SGameMode_ModeConfig.DataAsset.Object
	SoftObjectPath BP_Mode;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath BP_Reward;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RewardMap;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath JobStructure;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DataStructure;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath AttributeModifier;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath WellEffectJobRelationTable;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath BadEffectJobRelationTable;//[Offset: 0xd8, Size: 0x18]
	FString UIConfig;//[Offset: 0xf0, Size: 0x10]
	SCustomMode_GameModeSetting GameModeSetting;//[Offset: 0x100, Size: 0x68]
	SGameMode_LevelConfig[] Levels;//[Offset: 0x168, Size: 0x10]
	<FString,FString> Arguments;//[Offset: 0x178, Size: 0x50]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	bool bActiveRadarOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 0x1]
	float AllowJoinBattleLifeTime;//[Offset: 0x1cc, Size: 0x4]
	bool bAllowJoinAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bConsiderPotentialPlayerWhenSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]

--------------------------------
Class: SCustomMode_GameModeSetting
	SoftObjectPath PlayerControllerClass;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath DefaultPawnClass;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PlayerStateClass;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath HUDClass;//[Offset: 0x48, Size: 0x18]
	int SettlementStageConfigID;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SolarRedHintManager.SolarGameManager.Object

--------------------------------
Class: SolarGameModeSelectionManager.SolarGameManager.Object
	SolarGameModeLockSettings* CurGameModeLockSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameModeLockSettings* DefaultGameModeLockSettings;//[Offset: 0x58, Size: 0x8]
	void SaveGameModeLockSettings();// 0x3c7eb2d80041
	void LoadGameModeLockSettings();// 0x3c7db2d80041

--------------------------------
Class: SolarGameModeLockSettings.SaveGame.Object
	<int,bool> GameModeLockStatus;//[Offset: 0x28, Size: 0x50]
	int[] LobbyGameModeRecIDs;//[Offset: 0x78, Size: 0x10]
	int[] GameModeGuideIDs;//[Offset: 0x88, Size: 0x10]
	void CopyFrom(SolarGameModeLockSettings* InLockSettings);// 0x3c75b2d80041

--------------------------------
Class: SolarPingFpsManager.Object
	byte GetPingDS;//[Offset: 0x30, Size: 0x1]
	float GetPingBackend;//[Offset: 0x34, Size: 0x4]
	float FPS;//[Offset: 0x38, Size: 0x4]
	byte GetPingBattleServer();// 0x3f50b2d80041
	float GetPacketsLossRate();// 0x3f4fb2d80041
	float GetAverageFPS();// 0x3f4eb2d80041

--------------------------------
Class: SolarGameUserSettingsMgr.Object
	SolarGameUserSettings* CurGameUserSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameSettingsRange* DefaultGameSettingsRange;//[Offset: 0x30, Size: 0x8]
	bool bIsDefalutSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	ChatOperatorUserSettings TempChatOperatorSettings;//[Offset: 0x39, Size: 0x2]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x40, Size: 0x8]
	void SaveGameSettings();// 0x3cbbb2d80041
	void ResetToDefault(enum SettingPart);// 0x3cbab2d80041
	void RefreshValid(SolarGameInstanceBase* GameInstance, bool SaveIfDirty);// 0x3cb9b2d80041
	void OnSettingConfigSaved();// 0x3cb8b2d80041
	void OnPickupSettingChanged();// 0x3cb7b2d80041
	void InitializeSettings(SolarGameInstanceBase* GameInstance);// 0x3cb6b2d80041
	void Init(SolarGameInstanceBase* GameInstance);// 0x3cb5b2d80041

--------------------------------
Class: SolarGameUserSettings.DeveloperSettings.Object
	PickupUserSettings PickupSettings;//[Offset: 0x38, Size: 0x18]
	GraphicsUserSettings GraphicsSettings;//[Offset: 0x50, Size: 0x80]
	WeaponUserSettings WeaponSettings;//[Offset: 0xd0, Size: 0x10]
	LanguageUserSettings LanguageSettings;//[Offset: 0xe0, Size: 0x1]
	SoundUserSettings SoundSettings;//[Offset: 0xe4, Size: 0x20]
	BasicUserSettings BasicSettings;//[Offset: 0x104, Size: 0x7]
	SensitivityUserSettings SensitivitySettings;//[Offset: 0x10c, Size: 0x70]
	VehicleControlUserSettings DriverSettings;//[Offset: 0x17c, Size: 0x3]
	ChatOperatorUserSettings ChatOperatorSettings;//[Offset: 0x17f, Size: 0x2]
	SoftClassPath DefaultSettingsRangePath;//[Offset: 0x188, Size: 0x18]
	bool bIsSynchronized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	float ConfigVersion;//[Offset: 0x1a4, Size: 0x4]

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: PickupUserSettings
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	PickupItemData[] PickupItemList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PickupItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GraphicsUserSettings
	enum FpsLevel;//[Offset: 0x0, Size: 0x1]
	enum ColorThemeType;//[Offset: 0x1, Size: 0x1]
	bool MSAAIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	FloatValue AdaptationUIValue;//[Offset: 0x4, Size: 0x4]
	enum SelectQualityLevel;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FloatValue
	float Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeaponUserSettings
	bool bAimAssist_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoScope_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bAutoScopeRifle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bAutoScopeShotgun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoScopeSubmachinegun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAutoScopeSniper_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	CurveFloat* HitEffectDistanceToScaleCurve;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LanguageUserSettings
	enum CurLanguage;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoundUserSettings
	ConditionValue Sound_Global;//[Offset: 0x0, Size: 0x8]
	ConditionValue Sound_Action;//[Offset: 0x8, Size: 0x8]
	ConditionValue Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	int MicroPhoneVolume;//[Offset: 0x18, Size: 0x4]
	int LoudSpeakerVolume;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ConditionValue
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int CurValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BasicUserSettings
	bool bOpenUniversalMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOpenQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoOverturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bPowerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOpenRecruitRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum curGyroscpeChooseLevel;//[Offset: 0x5, Size: 0x1]
	enum CurrentDamageTextDisplayMode;//[Offset: 0x6, Size: 0x1]

--------------------------------
Class: SensitivityUserSettings
	FloatValue Sensitivity_Free;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_SecondarySkills;//[Offset: 0x4, Size: 0x4]
	CameraSensitivityData Sensitivity_NoShoot;//[Offset: 0x8, Size: 0x20]
	CameraSensitivityData Sensitivity_Shoot;//[Offset: 0x28, Size: 0x20]
	GyroscopeSensitivityData GyroscopeData;//[Offset: 0x48, Size: 0x20]
	FloatValue Sensitivity_VehicleDriver;//[Offset: 0x68, Size: 0x4]
	FloatValue Sensitivity_VehicleFire;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: CameraSensitivityData
	FloatValue Sensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue Sensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GyroscopeSensitivityData
	FloatValue GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue GyroscopeSensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue GyroscopeSensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: VehicleControlUserSettings
	enum WheeledVehicleDriveType;//[Offset: 0x0, Size: 0x1]
	bool bCanAdjustInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanAutoSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ChatOperatorUserSettings
	enum Speaker;//[Offset: 0x0, Size: 0x1]
	enum Mic;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SolarGameSettingsRange.Object
	SoundSettingsRange SoundSettings;//[Offset: 0x28, Size: 0x18]
	SensitivitySettingsRange SensitivitySettings;//[Offset: 0x40, Size: 0xe0]
	GraphicsSettingsRange GraphicsSettings;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: SoundSettingsRange
	RangeData Sound_Global;//[Offset: 0x0, Size: 0x8]
	RangeData Sound_Action;//[Offset: 0x8, Size: 0x8]
	RangeData Sound_BackGround;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: RangeData
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SensitivitySettingsRange
	RangeData Sensitivity_Free;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_SecondarySkills;//[Offset: 0x8, Size: 0x8]
	CameraSensitivityRangeData Sensitivity_NoShoot;//[Offset: 0x10, Size: 0x40]
	CameraSensitivityRangeData Sensitivity_Shoot;//[Offset: 0x50, Size: 0x40]
	RangeData Sensitivity_VehicleDriver;//[Offset: 0x90, Size: 0x8]
	RangeData Sensitivity_VehicleFire;//[Offset: 0x98, Size: 0x8]
	GyroscopeSensitivityRangeData Sensitivity_GyroscopeData;//[Offset: 0xa0, Size: 0x40]

--------------------------------
Class: CameraSensitivityRangeData
	RangeData Sensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData Sensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData Sensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: GyroscopeSensitivityRangeData
	RangeData GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData GyroscopeSensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData GyroscopeSensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: GraphicsSettingsRange
	RangeData AdaptationUIValue;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarLoginManager.SolarGameManager.Object
	void InitFromLogin();// 0x3e40b2d80041
	void Init(SolarGameInstanceBase* GameInstance);// 0x3e3fb2d80041

--------------------------------
Class: SolarLockSettingsMgr.Object
	SolarLockSettings* CurLockSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	SolarLockSettings* DefaultLockSettings;//[Offset: 0x48, Size: 0x8]
	void SaveLockSettings();// 0x3e3eb2d80041
	void LoadLockSettings();// 0x3e3db2d80041
	void Init(SolarGameInstanceBase* GameInstance);// 0x3e3cb2d80041

--------------------------------
Class: SolarLockSettings.SaveGame.Object
	<int,bool> FeaturesLockStatus;//[Offset: 0x28, Size: 0x50]
	void CopyFrom(SolarLockSettings* InLockSettings);// 0x3e3bb2d80041

--------------------------------
Class: SolarGameProgressManager.SolarGameManager.Object
	delegate OnGameStart;//[Offset: 0x38, Size: 0x10]
	void OnWorldConditionsCompleted();// 0x1aefb2d80041
	void OnStreamingLevelComplete();// 0x1aeeb2d80041
	void OnShadersCompileComplete();// 0x1aedb2d80041
	void OnGameStart__DelegateSignature();// 0x1aecb2d80041
	void K2_ReceiveGlobalConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x1aebb2d80041
	void K2_ReceiveConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x1aeab2d80041
	void K2_OnGlobalConditionCompleted(GameplayTag CompletedCondition);// 0x1ae9b2d80041
	void K2_OnConditionCompleted(World* CurrentWorld, GameplayTag CompletedCondition);// 0x1ae8b2d80041
	bool IsGameStartNeedCondition(const Object* WorldContextObject, out const GameplayTag InCondition);// 0x1ae7b2d80041
	bool IsConditionInList(out const GameplayTag InCondition, World* WorldCheck);// 0x1ae6b2d80041
	bool IsAllStartGameConditionCompleted(World* WorldCheck);// 0x1ae5b2d80041
	bool InitGameStartCondition(World* CurrentWorld, GameplayTagContainer ConditionList);// 0x1ae4b2d80041
	bool HasGameStarted(const Object* WorldContextObject);// 0x1ae3b2d80041
	SolarGameProgressManager* Get(const Object* WorldContextObject);// 0x1ae2b2d80041

--------------------------------
Class: SolarABTestManager.SolarGameManager.Object

--------------------------------
Class: SolarHttpManager.SolarGameManager.Object
	FString ReportURL;//[Offset: 0x40, Size: 0x10]
	FString ReportStr;//[Offset: 0x50, Size: 0x10]
	int ReportRetryTimes;//[Offset: 0x60, Size: 0x4]
	delegate OnImgUploaded;//[Offset: 0x68, Size: 0x10]
	int Jank;//[Offset: 0x94, Size: 0x4]
	int BigJank;//[Offset: 0x98, Size: 0x4]
	float FPS25;//[Offset: 0x9c, Size: 0x4]
	void UploadToHTTP(FString URL, FString str);// 0x1affb2d80041
	void UploadImg(out const int Appid, out const int AppUid, FString AppToken, out const int GameID, out const int UID, FString SourceImgPath);// 0x1afeb2d80041
	FString StringToBase64(FString str);// 0x1afdb2d80041
	void StopRecordJank();// 0x1afcb2d80041
	void StartRecordJank();// 0x1afbb2d80041
	void ReCordOnlineError(FString InStr);// 0x1afab2d80041
	void OnImgUploaded__DelegateSignature(int RespCode, FString RespMsg, FString ImgUrl);// 0x1af9b2d80041
	FString GetHttpReportUrl();// 0x1af8b2d80041
	FString Base64ToMD5(FString str);// 0x1af7b2d80041

--------------------------------
Class: SolarActivityManager.SolarGameManager.Object

--------------------------------
Class: SolarTutorialManager.SolarGameManager.Object
	enum CurrentTutorialStage;//[Offset: 0x42, Size: 0x1]
	delegate OnRegisterEvent;//[Offset: 0x48, Size: 0x10]
	delegate OnStepActionBegan;//[Offset: 0x58, Size: 0x10]
	delegate OnStepActionEnded;//[Offset: 0x68, Size: 0x10]
	delegate OnStepActionReset;//[Offset: 0x78, Size: 0x10]
	delegate OnStepActionDisposed;//[Offset: 0x88, Size: 0x10]
	TutorialGlobalConfig* TutorialGlobalConfig;//[Offset: 0x98, Size: 0x8]
	TutorialTableRow[] TutorialTableRows;//[Offset: 0xa0, Size: 0x10]
	TutorialActionTableRow[] ActionTableRows;//[Offset: 0xb0, Size: 0x10]
	TutorialConditionTableRow[] ConditionTableRows;//[Offset: 0xc0, Size: 0x10]
	<int,Tutorial*> Tutorials;//[Offset: 0xd0, Size: 0x50]
	bool bIsConditionCheckCodeParsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 0x1]
	int64 LastCheckTimestamp;//[Offset: 0x288, Size: 0x8]
	FString TutorialDataTablePath;//[Offset: 0x290, Size: 0x10]
	FString ActionDataTablePath;//[Offset: 0x2a0, Size: 0x10]
	FString ConditionDataTablePath;//[Offset: 0x2b0, Size: 0x10]
	FString TutorialGlobalConfigPath;//[Offset: 0x2c0, Size: 0x10]
	TutorialLevelSaveGame* CurrentTutorialLevelSaveGame;//[Offset: 0x2d0, Size: 0x8]
	void TryToStopTutorialByTutorialID(int InTutorialId);// 0x4545b2d80041
	FString[] TriggerWidgetClicked(out const FString[] Params);// 0x4544b2d80041
	FString[] TriggerWeaponSlotHasSpecifiedItem(out const FString[] Params);// 0x4543b2d80041
	FString[] TriggerUseSpecifiedWeaponAbility(out const FString[] Params);// 0x4542b2d80041
	FString[] TriggerUseSpecifiedVehicleWeapon(out const FString[] Params);// 0x4541b2d80041
	FString[] TriggerUseSpecifiedVehicleAbility(out const FString[] Params);// 0x4540b2d80041
	void TriggerTutorialModuleEvents(enum Module);// 0x453fb2d80041
	FString[] TriggerTutorialLevelDone(out const FString[] Params);// 0x453eb2d80041
	void TriggerTutorialEvents(out enum[] TriggerTypeArrays, bool bPostTrigger);// 0x453db2d80041
	bool TriggerTutorialEventInternal(byte TriggerID);// 0x453cb2d80041
	void TriggerTutorialEvent(enum TriggerType, bool bPostTrigger);// 0x453bb2d80041
	FString[] TriggerSprintingContinuously(out const FString[] Params);// 0x453ab2d80041
	FString[] TriggerShieldNotFull(out const FString[] Params);// 0x4539b2d80041
	FString[] TriggerRunningStep(out const FString[] Params);// 0x4538b2d80041
	FString[] TriggerPlayerLevelGreaterThan(out const FString[] Params);// 0x4537b2d80041
	FString[] TriggerOpenTreasureBox(out const FString[] Params);// 0x4536b2d80041
	FString[] TriggerOpenBigMapUMG(out const FString[] Params);// 0x4535b2d80041
	FString[] TriggerNearAirDropBox(out const FString[] Params);// 0x4534b2d80041
	FString[] TriggerJumpBegin(out const FString[] Params);// 0x4533b2d80041
	FString[] TriggerHasTakenDamage(out const FString[] Params);// 0x4532b2d80041
	FString[] TriggerHasSpecifiedItem(out const FString[] Params);// 0x4531b2d80041
	FString[] TriggerHasSpecifiedEquipmentByType(out const FString[] Params);// 0x4530b2d80041
	FString[] TriggerFunctionUnlock(out const FString[] Params);// 0x452fb2d80041
	void TriggerEvent(enum Module);// 0x452eb2d80041
	FString[] TriggerEquipSpecifiedWeapon(out const FString[] Params);// 0x452db2d80041
	FString[] TriggerBotAIDying(out const FString[] Params);// 0x452cb2d80041
	FString[] TriggerApproachElectronicTreasureBox(out const FString[] Params);// 0x452bb2d80041
	FString[] TriggerAirDropBoxLanded(out const FString[] Params);// 0x452ab2d80041
	void TickActivatedTutorials();// 0x4529b2d80041
	void TestTutorialTipsUI(int ID);// 0x4528b2d80041
	void SetWidgetInteractionFlag(FString InWidgetName, enum InWidgetInteractionFlag);// 0x4527b2d80041
	void SetTutorialTipsUIInteractionFlag(int TutorialID, bool boolChange);// 0x4526b2d80041
	void SetTableFlagBooleanValue(FString InTableName, FString InFlagName, bool InValue);// 0x4525b2d80041
	void SetSignNameBoolChange(FString SignName, bool NboolChangeum);// 0x4524b2d80041
	void SetFlagNameIntCount(FString FlagName, int Num);// 0x4523b2d80041
	void SetAirDropBoxLandedAddOneNum(int Value);// 0x4522b2d80041
	void SaveTutorialLevelSaveGame();// 0x4521b2d80041
	void SaveLevelTutorialID(FString InLevelName, int InTutorialId);// 0x4520b2d80041
	void SaveLevelTutorialHasFinished(FString InLevelName, bool InFinished);// 0x451fb2d80041
	void SaveLevelPlayerStartTag(FString InLevelName, FString InPlayerStartTag);// 0x451eb2d80041
	bool RunTriggerConditionCheck(Tutorial* InTutorial);// 0x451db2d80041
	bool RunConditionCheckByTutorialId(enum InConditionType, int InTutorialId);// 0x451cb2d80041
	bool RunConditionCheckByExpression(FString InConditionalExpression);// 0x451bb2d80041
	void ReceivePostSetupData();// 0x451ab2d80041
	void ReceiveOnSingleTutorialStart(int TutorialID);// 0x4519b2d80041
	void ReceiveOnSingleTutorialFinished(int TutorialID);// 0x4518b2d80041
	void ReceiveOnPostLoadMapWithWorld(FString LevelName);// 0x4517b2d80041
	void ReceiveOnAllTutorialsFinished();// 0x4516b2d80041
	void ReceiveLoadTutorialLevelData();// 0x4515b2d80041
	void ReceiveLoadData();// 0x4514b2d80041
	void ReceiveClearData();// 0x4513b2d80041
	bool PreCheckTutorial(Tutorial* InTutorial);// 0x4512b2d80041
	bool PreCheckSetup(int TutorialID);// 0x4511b2d80041
	void OnPostLoadMap(FString LevelName);// 0x4510b2d80041
	bool IsInTutorialLevel();// 0x450fb2d80041
	enum GetWidgetInteractionFlag(FString InWidgetName);// 0x450eb2d80041
	UserWidget* GetWeightByPanelNameAndChildWeightName(FString PanelName, FString ChildWidgetName);// 0x450db2d80041
	bool GetTutorialTipsUIInteractionFlag(int TutorialID);// 0x450cb2d80041
	TutorialLevelSaveGame* GetTutorialLevelSaveGame();// 0x450bb2d80041
	bool GetTableFlagBooleanValue(FString InTableName, FString InFlagName);// 0x450ab2d80041
	bool GetSignNameBoolChange(FString SignName);// 0x4509b2d80041
	int GetLevelTutorialID(FString InLevelName, int DefaultValue);// 0x4508b2d80041
	bool GetLevelTutorialHasFinished(FString InLevelName, bool DefaultValue);// 0x4507b2d80041
	int GetFlagNameIntCount(FString FlagName);// 0x4506b2d80041
	byte GetCurrentPlayerLevel();// 0x4505b2d80041
	TutorialActionTableRow GetActionDataByID(int ActionDataID);// 0x4504b2d80041
	void EnterTutorialLevel(FString LevelName, int Proficiency);// 0x4503b2d80041
	bool CheckTutorialTipUIOnClick(int TutorialID);// 0x4502b2d80041
	void CheckTutorials(enum InTutorialModule, float InCheckInterval, bool bForceCheck);// 0x4501b2d80041
	bool CheckIfWidgetReleased(FString InWidgetName);// 0x4500b2d80041
	bool CheckIfWidgetPressed(FString InWidgetName);// 0x44ffb2d80041
	bool CheckIfWidgetClicked(FString InWidgetName);// 0x44feb2d80041
	bool CheckIfWeaponSlotHasSpecifiedItem(int InSlot, int InItemID);// 0x44fdb2d80041
	bool CheckIfTutorialLevelDone(FString LevelName);// 0x44fcb2d80041
	bool CheckIfTakeDamage(int InLostHealth);// 0x44fbb2d80041
	bool CheckIfSprintingContinuously(float InTimeOfDuration);// 0x44fab2d80041
	bool CheckIfShieldNotFull();// 0x44f9b2d80041
	bool CheckIfRunningStep(int TutorialID, int ActionID);// 0x44f8b2d80041
	bool CheckIfReloading();// 0x44f7b2d80041
	bool CheckIfRechargingShield();// 0x44f6b2d80041
	bool CheckIfPlayerLevelGreaterThan(byte InSpecifiedLevel);// 0x44f5b2d80041
	bool CheckIfPlayerInTargetScene(byte InPlayStage);// 0x44f4b2d80041
	bool CheckIfOpenBigMapUMG();// 0x44f3b2d80041
	bool CheckIfNearAirDropBox();// 0x44f2b2d80041
	bool CheckIfJumpBegin();// 0x44f1b2d80041
	bool CheckIfJetFlyingVertically();// 0x44f0b2d80041
	bool CheckIfJetFlyingHorizontally();// 0x44efb2d80041
	bool CheckIfInWater();// 0x44eeb2d80041
	bool CheckIfInVehicle();// 0x44edb2d80041
	bool CheckIfInAir();// 0x44ecb2d80041
	bool CheckIfHasSpecifiedItem(int InNum, int InItemID);// 0x44ebb2d80041
	bool CheckIfHasSpecifiedEquipmentByType(enum InItemType);// 0x44eab2d80041
	bool CheckIfHasSpecifiedEquipmentById(int InItemID);// 0x44e9b2d80041
	bool CheckIfHasShield();// 0x44e8b2d80041
	bool CheckIfFunctionUnlock(FString FunctionID);// 0x44e7b2d80041
	bool CheckIfEquipSpecifiedWeapon(int InWeaponID);// 0x44e6b2d80041
	bool CheckIfDying();// 0x44e5b2d80041
	bool CheckIfDead();// 0x44e4b2d80041
	bool CheckIfCurrentWeaponAmmoFull();// 0x44e3b2d80041
	bool CheckIfConsumingMedicine();// 0x44e2b2d80041
	bool CheckIfCanUseSpecifiedWeaponAbility(int InAmmoId);// 0x44e1b2d80041
	bool CheckIfCanUseSpecifiedVehicleWeapon(FString InVehicleWeaponClassName);// 0x44e0b2d80041
	bool CheckIfCanUseSpecifiedVehicleAbility(FString InVehicleAbilityClassName);// 0x44dfb2d80041
	bool CheckIfCanOpenTreasureBox();// 0x44deb2d80041
	bool CheckIfCanJetFlyVertically();// 0x44ddb2d80041
	bool CheckIfCanJetFlyHorizontally();// 0x44dcb2d80041
	bool CheckIfBotAIDying(int UniqueSpawnerID);// 0x44dbb2d80041
	bool CheckIfApproachElectronicTreasureBox();// 0x44dab2d80041
	bool CheckIfAirDropBoxLanded();// 0x44d9b2d80041

--------------------------------
Class: TutorialGlobalConfig.DataAsset.Object
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<FString,enum> MapName2TutorialStage;//[Offset: 0x38, Size: 0x50]
	float SubtitleDisappearTime;//[Offset: 0x88, Size: 0x4]
	float AsyncLoadUIDelayTime;//[Offset: 0x8c, Size: 0x4]
	TutorialLevelConfig TutorialLevelConfig;//[Offset: 0x90, Size: 0x38]
	enum GetTutorialStageByLevelName(FString LevelName);// 0x44d8b2d80041
	FString GetTutorialLevelMainMapPath();// 0x44d7b2d80041
	FString GetTutorialLevelMainMapName();// 0x44d6b2d80041
	TutorialLevelConfigData GetTutorialLevelConfigDataByName(FString LevelName);// 0x44d5b2d80041

--------------------------------
Class: TutorialLevelConfig
	TutorialLevelConfigData[] LevelConfigDatas;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath MainMapPath;//[Offset: 0x10, Size: 0x18]
	int VeteranTutorialID;//[Offset: 0x28, Size: 0x4]
	float RepeatOperationTime;//[Offset: 0x2c, Size: 0x4]
	float WaitToEndTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TutorialLevelConfigData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	int[] TutorialIds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum Type;//[Offset: 0x20, Size: 0x1]
	enum TriggerStage;//[Offset: 0x21, Size: 0x1]
	enum Module;//[Offset: 0x22, Size: 0x1]
	TutorialSoftCondition TriggerCondition;//[Offset: 0x28, Size: 0x28]
	int EndNum;//[Offset: 0x50, Size: 0x4]
	TutorialSoftCondition ForeverClosedCondition;//[Offset: 0x58, Size: 0x28]
	int[] ActionIDs;//[Offset: 0x80, Size: 0x10]
	bool bUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bStartUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]

--------------------------------
Class: TutorialTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TutorialSoftCondition
	FString ConditionStr;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ConditionBP;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: TutorialActionTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	TutorialForceUI TutorialForceUI;//[Offset: 0x20, Size: 0x38]
	TutorialNoticeUI TutorialNoticeUI;//[Offset: 0x58, Size: 0x30]
	TutorialMandatory TutorialMandatory;//[Offset: 0x88, Size: 0x2]
	TutorialTipAndEffectUI TutorialTipAndEffectUI;//[Offset: 0x90, Size: 0x78]
	SoftObjectPath RelatedUIPath;//[Offset: 0x108, Size: 0x18]
	bool IsUsingMadatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool IsUsingMadatoryClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	TutorialSubtitle TutorialSubtitle;//[Offset: 0x128, Size: 0x18]
	bool bRepeatTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	TutorialRepeatTip RepeatTip;//[Offset: 0x148, Size: 0x18]
	TutorialBackgroundMusicTableRow TutorialBackgroundMusic;//[Offset: 0x160, Size: 0x20]
	TutorialSoftCondition EndCondition;//[Offset: 0x180, Size: 0x28]
	TutorialSoftCondition InterruptCondition;//[Offset: 0x1a8, Size: 0x28]
	float WaitTime;//[Offset: 0x1d0, Size: 0x4]
	float MinExecuteTime;//[Offset: 0x1d4, Size: 0x4]
	int[] OpenBehaviors;//[Offset: 0x1d8, Size: 0x10]
	int[] CloseBehaviors;//[Offset: 0x1e8, Size: 0x10]
	int FixedTriggerAreaID;//[Offset: 0x1f8, Size: 0x4]
	int[] BotAISpawnIDs;//[Offset: 0x200, Size: 0x10]
	int[] BotAIDeathIDs;//[Offset: 0x210, Size: 0x10]
	int[] BotAIOnVehicleSpawnIDs;//[Offset: 0x220, Size: 0x10]
	int[] BotAIOnVehicleDeathIDs;//[Offset: 0x230, Size: 0x10]

--------------------------------
Class: TutorialForceUI
	SoftObjectPath TutorialForceUIBPPath;//[Offset: 0x0, Size: 0x18]
	FString NeedTouchOffLinkNodeButton;//[Offset: 0x18, Size: 0x10]
	FString ClickTouchOffLinkNodeButton;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TutorialNoticeUI
	SoftObjectPath NoticeUIBPPath;//[Offset: 0x0, Size: 0x18]
	FString NoticeUISlotAnchorsAndAlignment;//[Offset: 0x18, Size: 0x10]
	int NoticeUILocTextId;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TutorialMandatory
	bool IfMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool MandatoryUIIsRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TutorialTipAndEffectUI
	FString LinkedComponent;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath TutorialExpressionBPPath;//[Offset: 0x10, Size: 0x18]
	SoftObjectPath TutorialEffectBPPath;//[Offset: 0x28, Size: 0x18]
	Vector2D TutorialBPLocation;//[Offset: 0x40, Size: 0x8]
	int LocTextID;//[Offset: 0x48, Size: 0x4]
	float LocTextDuration;//[Offset: 0x4c, Size: 0x4]
	float DelayShowUITime;//[Offset: 0x50, Size: 0x4]
	float WaitUIShowTime;//[Offset: 0x54, Size: 0x4]
	float DelayShowCanCloseUITIme;//[Offset: 0x58, Size: 0x4]
	FString TextUISlotAnchorsAndAlignment;//[Offset: 0x60, Size: 0x10]
	enum UIParent;//[Offset: 0x70, Size: 0x1]
	bool OpenEffectSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]

--------------------------------
Class: TutorialSubtitle
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x0, Size: 0x10]
	float DelayTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TutorialSingleSubtitle
	FString LocalTextID;//[Offset: 0x0, Size: 0x10]
	FString Voice;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialRepeatTip
	float StartTime;//[Offset: 0x0, Size: 0x4]
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TutorialBackgroundMusicTableRow
	FString TutorialPlayMusicName;//[Offset: 0x0, Size: 0x10]
	FString TutorialStopMusicName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialConditionTableRow.TutorialTableRowBase.TableRowBase
	byte TriggerType;//[Offset: 0xc, Size: 0x1]
	FString[] Parameters;//[Offset: 0x10, Size: 0x10]
	FString Description;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: Tutorial.Object
	TutorialTableRow Data;//[Offset: 0x68, Size: 0x98]
	TutorialTriggerCondition* TriggerConditionBP;//[Offset: 0x100, Size: 0x8]
	TutorialTaskSequenceAction* TutorialTask;//[Offset: 0x108, Size: 0x8]
	void Stop();// 0x4678b2d80041
	void ReceiveOnStart();// 0x4677b2d80041
	void ReceiveOnSingleTaskFinish();// 0x4676b2d80041
	void ReceiveOnFinish();// 0x4675b2d80041
	void OnSingleTaskFinish();// 0x4674b2d80041
	TutorialTableRow GetTableRowData();// 0x4673b2d80041
	int GetCurrentFinishNum();// 0x4672b2d80041

--------------------------------
Class: TutorialTriggerCondition.TutorialCondition.Object
	SolarTutorialManager* GetSolarTutorialManager();// 0x469cb2d80041
	bool CheckSatisfy(out const TutorialTableRow InData);// 0x469bb2d80041

--------------------------------
Class: TutorialCondition.Object
	FString GetWorldName();// 0x467ab2d80041
	SolarCharacter* GetPlayer();// 0x4679b2d80041

--------------------------------
Class: TutorialTaskSequenceAction.SequenceNode.ActionNode.Object

--------------------------------
Class: SequenceNode.ActionNode.Object
	ActionNode*[] Nodes;//[Offset: 0x78, Size: 0x10]
	ActionNode*[] ExecutingNodes;//[Offset: 0x88, Size: 0x10]
	int TotalCount();// 0x3788b2d80041
	ActionNode* GetCurrentExecutingNode();// 0x3787b2d80041
	SequenceNode* Append(ActionNode* Node);// 0x3786b2d80041

--------------------------------
Class: ActionNode.Object
	delegate OnBeganCallback;//[Offset: 0x28, Size: 0x10]
	delegate OnEndedCallback;//[Offset: 0x38, Size: 0x10]
	delegate OnResetCallback;//[Offset: 0x48, Size: 0x10]
	delegate OnDisposedCallback;//[Offset: 0x58, Size: 0x10]
	void Reset();// 0x1d03b2d80041
	bool Finished();// 0x1d02b2d80041
	void Finish();// 0x1d01b2d80041
	bool Execute(float DeltaTime);// 0x1d00b2d80041
	bool Disposed();// 0x1cffb2d80041
	void Dispose();// 0x1cfeb2d80041

--------------------------------
Class: TutorialLevelSaveGame.SaveGame.Object
	<FString,TutorialLevelSaveData> TutorialLevelSaveDatas;//[Offset: 0x28, Size: 0x50]
	enum PlayerProficiency;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: TutorialLevelSaveData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	FString PlayerStartTag;//[Offset: 0x10, Size: 0x10]
	bool bTutorialHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int TutorialID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SettlementStageManager.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	int CurStageIndex;//[Offset: 0x38, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x3c, Size: 0x4]
	DataTable* SettlementConfig;//[Offset: 0x40, Size: 0x8]
	SettlementFormula* Formula;//[Offset: 0x48, Size: 0x8]
	void UpdateModeConfig(const int InConfigID);// 0x37a1b2d80041
	void SkipToTarget();// 0x37a0b2d80041
	void ShowNextStage();// 0x379fb2d80041
	void ShowDiePage();// 0x379eb2d80041
	void Init();// 0x379db2d80041
	class SolarUWSettlementBase GetSettlementUIClass();// 0x379cb2d80041
	int GetSettlementStageID();// 0x379bb2d80041
	SettlementConfig GetSettlementConfigRow();// 0x379ab2d80041
	SettlementFormula* GetFormula();// 0x3799b2d80041
	FString GetClassRelativePathName(const class Object InClass);// 0x3798b2d80041
	void CloseDiePage();// 0x3797b2d80041

--------------------------------
Class: SolarUWSettlementBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	SettlementStageManager* SettlementStageManager;//[Offset: 0x318, Size: 0x8]
	void SetStageManager(SettlementStageManager* InStageManager);// 0x4553b2d80041

--------------------------------
Class: SettlementConfig.TableRowBase
	int SettlementID;//[Offset: 0x8, Size: 0x4]
	SettlementStageConfig StageConfig;//[Offset: 0x10, Size: 0x40]
	class SettlementFormula* Formula;//[Offset: 0x50, Size: 0x28]
	bool IsValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SettlementStageConfig
	class SolarUWSettlementBase* Page_Die;//[Offset: 0x0, Size: 0x28]
	int Page_SkipIndex;//[Offset: 0x28, Size: 0x4]
	class SolarUWSettlementBase[] SettlementStage;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SettlementFormula.Actor.Object
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x3796b2d80041
	int GetZomborg(out const SettlementParam_Zomborg InParam);// 0x3795b2d80041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x3794b2d80041
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam);// 0x3793b2d80041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x3792b2d80041
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam);// 0x3791b2d80041
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam);// 0x3790b2d80041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerId, out FString PBName);// 0x378fb2d80041
	float GetKDA(out const SettlementParam_KDA InParam);// 0x378eb2d80041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerId, out FString PBName);// 0x378db2d80041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam);// 0x378cb2d80041
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x378bb2d80041
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x378ab2d80041
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param);// 0x3789b2d80041

--------------------------------
Class: SettlementParam_Zomborg
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float Lifetime;//[Offset: 0x8, Size: 0x4]
	int PlayerRank;//[Offset: 0xc, Size: 0x4]
	float GoldPunishRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SettlementParam_WeaponExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float UseTime;//[Offset: 0x8, Size: 0x4]
	int WeaponKillNum;//[Offset: 0xc, Size: 0x4]
	int WeaponAssitNum;//[Offset: 0x10, Size: 0x4]
	float ExpRatio;//[Offset: 0x14, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SettlementParam_PageParam
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int WeaponExpSettlmentNum;//[Offset: 0x4, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SettlementParam_CommonExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float Lifetime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x24, Size: 0x4]
	float CoinPunishRatio;//[Offset: 0x28, Size: 0x4]
	int RankCorePunish;//[Offset: 0x2c, Size: 0x4]
	int BaseExp;//[Offset: 0x30, Size: 0x4]
	float ExpRatio;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SettlementParam_KDA
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DeathNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SettlementParam_MVP
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float Lifetime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: CGMCrossLevelDataMgr.Object
	<FString,Object*> CrossLevelData;//[Offset: 0x28, Size: 0x50]
	void RegistryCrossLevelData(FString InSoltName, Object* InDataObj);// 0x338ab2d80041
	Object* GetCrossLevelData(FString InSoltName);// 0x3389b2d80041

--------------------------------
Class: SolarGraphicSettings.Object
	uint32 CurrentActiveColorThemeIndex;//[Offset: 0x28, Size: 0x4]
	FrameRateLevelItem FrameRateLevelItem;//[Offset: 0x2c, Size: 0x8]
	<enum,enum> DefaultQualityToDefaultFrameRateLevel;//[Offset: 0x50, Size: 0x50]
	<enum,MaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;//[Offset: 0xa0, Size: 0x50]
	int DefaultMSAALevel;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: FrameRateLevelItem
	enum FrameRateLevel;//[Offset: 0x0, Size: 0x1]
	float FrameRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MaxQualityConfig
	<enum,enum> CurQualityToMaxFrameRateLevel;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SolarAccessLuaDataUtils.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	void GetMatchResult(out MatchResult MatchResult);// 0x37f7b2d80041

--------------------------------
Class: MatchResult
	FString BattleID;//[Offset: 0x0, Size: 0x10]
	FString BattleAddr;//[Offset: 0x10, Size: 0x10]
	FString Token;//[Offset: 0x20, Size: 0x10]
	int ModeID;//[Offset: 0x30, Size: 0x4]
	int RuleID;//[Offset: 0x34, Size: 0x4]
	FString SelfPlayerID;//[Offset: 0x38, Size: 0x10]
	MatchResult_Group[] Groups;//[Offset: 0x48, Size: 0x10]
	FString MapName;//[Offset: 0x58, Size: 0x10]
	SoftObjectPath MapPath;//[Offset: 0x68, Size: 0x18]

--------------------------------
Class: MatchResult_Group
	int GroupID;//[Offset: 0x0, Size: 0x4]
	MatchResult_Player[] Players;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MatchResult_Player
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString playerName;//[Offset: 0x10, Size: 0x10]
	int AvatarID;//[Offset: 0x20, Size: 0x4]
	int fightCharacterID;//[Offset: 0x24, Size: 0x4]
	int fightCharacterSkinID;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath SkinConfigPath;//[Offset: 0x30, Size: 0x18]
	FString CharacterName;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SolarAkSoundManager.SolarGameManager.Object
	void OnAkBankUnloadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x3852b2d80041
	void OnAkBankLoadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x3851b2d80041

--------------------------------
Class: KeyMappingManager.Object
	delegate OnKeyMappingUpdate;//[Offset: 0x120, Size: 0x10]
	delegate OnKeyMappingConfirm;//[Offset: 0x130, Size: 0x10]
	delegate OnKeyboardUpdate;//[Offset: 0x140, Size: 0x10]
	<FString,FString> OccupiedKeyMap;//[Offset: 0x160, Size: 0x50]
	KeyMappingFileMgr* KeyMappingFileMgr;//[Offset: 0x260, Size: 0x8]
	void SwitchKeyMappingPlanIndex(int PlanIndex);// 0x355db2d80041
	void SwitchKeyMapping(FString ActionName, int SettingIndex, bool Enable, bool Force);// 0x355cb2d80041
	void ResetKeyMapping();// 0x355bb2d80041
	bool IsComboKey(FString KeyName);// 0x355ab2d80041
	void ImportKeyMappingSetting();// 0x3559b2d80041
	bool HasKeyModified();// 0x3558b2d80041
	FString[] GetAllActionNames(int PlanIndex);// 0x3557b2d80041
	FString[] GetActionKeyMapping(FString ActionName, int PlanIndex, int SettingIndex);// 0x3556b2d80041
	void ApplyResult();// 0x3555b2d80041

--------------------------------
Class: KeyMappingFileMgr.Object

--------------------------------
Class: SolarSpecialEffectsMgr.Object

--------------------------------
Class: AndroidInputManager.Object
	delegate OnAndroidBackPressed;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: RegistedActorContainer

--------------------------------
Class: SolarOperationUIElement.Object
	OperationUIElement[] CharacterOperationUI;//[Offset: 0x28, Size: 0x10]
	OperationUIElement[] DirectionOperationUI;//[Offset: 0x38, Size: 0x10]
	OperationUIElement[] SteeringOperationUI;//[Offset: 0x48, Size: 0x10]
	OperationUIElement[] JoyStickOperationUI;//[Offset: 0x58, Size: 0x10]
	OperationUIElement[] WheeledJoyStickOperationUI;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: OperationUIElement
	FString PanelName;//[Offset: 0x0, Size: 0x10]
	float CurScale;//[Offset: 0x10, Size: 0x4]
	float MinScale;//[Offset: 0x14, Size: 0x4]
	float MaxScale;//[Offset: 0x18, Size: 0x4]
	float CurOpacity;//[Offset: 0x1c, Size: 0x4]
	float MinOpacity;//[Offset: 0x20, Size: 0x4]
	float MaxOpacity;//[Offset: 0x24, Size: 0x4]
	bool bCanHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bLockAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float minOffsetY;//[Offset: 0x2c, Size: 0x4]
	float maxOffsetY;//[Offset: 0x30, Size: 0x4]
	bool bCannotChangeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bCannotChangeOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	Vector2D Translation;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: PlayerWeaponRecoilComponent.WeaponRecoilComponent.ActorComponent.Object
	enum CurrentCharacterState;//[Offset: 0x238, Size: 0x1]
	enum CurrentPostureType;//[Offset: 0x239, Size: 0x1]

--------------------------------
Class: WeaponRecoilComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0xc0, Size: 0x8]
	bool bHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bVActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool bRActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	SolarWeapon* MyWeaponActor;//[Offset: 0xd0, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* YawCurve;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* RollCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* ScopeRollCurve;//[Offset: 0xf8, Size: 0x8]
	CurveFloat* ScopePitchCurve;//[Offset: 0x100, Size: 0x8]
	RichCurveKey[] OriginalScopePitchKeys;//[Offset: 0x108, Size: 0x10]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x118, Size: 0x8]
	CurveFloat*[] YawCurveArray;//[Offset: 0x1e8, Size: 0x10]
	CurveFloat*[] PitchCurveArray;//[Offset: 0x1f8, Size: 0x10]
	CurveFloat* PitchEndCurve;//[Offset: 0x208, Size: 0x8]
	CurveFloat*[] RollCurveArray;//[Offset: 0x210, Size: 0x10]
	CurveFloat*[] ScopeRollCurveArray;//[Offset: 0x220, Size: 0x10]
	void SetRecoilVActive(bool bActive);// 0x3643b2d80041
	void SetRecoilRActive(bool bActive);// 0x3642b2d80041
	void SetRecoilHActive(bool bActive);// 0x3641b2d80041
	void SetRecoilActive(bool bActive);// 0x3640b2d80041
	bool JudgeHorizontalRecoilDir(out const Vector factorVector, bool bCurrentRight, int instantCout);// 0x363fb2d80041
	bool IsRunning();// 0x363eb2d80041
	CurveFloat* GetYawCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x363db2d80041
	Rotator GetRotatorDelta();// 0x363cb2d80041
	CurveFloat* GetRollCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x363bb2d80041
	CurveFloat* GetPitchCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x363ab2d80041
	void Fire(bool hipfire, bool primary);// 0x3639b2d80041

--------------------------------
Class: WeaponPartClipComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool IsSupportExtract();// 0x4766b2d80041
	Rotator GetHandRotOffset();// 0x4765b2d80041
	Vector GetHandLocOffset();// 0x4764b2d80041
	float GetDropLifeSpan();// 0x4763b2d80041
	FName GetCharacterHandSocket();// 0x4762b2d80041
	FName GetCharacterHandInverseSocket();// 0x4761b2d80041

--------------------------------
Class: WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PartId;//[Offset: 0x54c, Size: 0x4]
	bool bDataAssetInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bMeshAssetsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	WeaponPartDataAsset* OrginDataAsset;//[Offset: 0x558, Size: 0x8]
	WeaponPartDataAsset* SkinPartDataAsset;//[Offset: 0x560, Size: 0x8]
	StaticMesh* MyStaticMesh;//[Offset: 0x568, Size: 0x8]
	WeaponSkinData* WeaponSkin;//[Offset: 0x570, Size: 0x8]
	WeaponSkinPartData SkinMatchedPartData;//[Offset: 0x578, Size: 0x40]
	enum WeaponPartType;//[Offset: 0x5b8, Size: 0x1]
	void SwitchLOD(int LOD);// 0x4760b2d80041
	void SetPartVisibility(bool bVisibility);// 0x475fb2d80041
	void SetPartIDAndPartData(int InPartID);// 0x475eb2d80041
	void ResetSkin();// 0x475db2d80041
	void PartInitializeServer();// 0x475cb2d80041
	void PartInitializeClient();// 0x475bb2d80041
	void PartInitialize(const int InPartID);// 0x475ab2d80041
	void OnLoadSkinDataCompleted();// 0x4759b2d80041
	void OnLoadMeshDataCompleted();// 0x4758b2d80041
	void OnLoadCompletedInternal(bool bSuccess);// 0x4757b2d80041
	void OnLoadCompleted(bool bSuccess);// 0x4756b2d80041
	bool IsValidPart();// 0x4755b2d80041
	bool IsPartEnable();// 0x4754b2d80041
	bool IsOnlyData();// 0x4753b2d80041
	void InitializeMeshLOD();// 0x4752b2d80041
	bool HasInitialized();// 0x4751b2d80041
	SoftObjectPath[] GetSkinNeedLoadAssets(WeaponSkinData* SkinData);// 0x4750b2d80041
	enum GetPartType();// 0x474fb2d80041
	int GetPartID();// 0x474eb2d80041
	WeaponPartDataAsset* GetPartData();// 0x474db2d80041
	SoftObjectPath[] GetClientNeedLoadMesh();// 0x474cb2d80041
	SoftObjectPath[] GetClientNeedLoadAssets();// 0x474bb2d80041

--------------------------------
Class: WeaponPartDataAsset.DataAsset.Object
	bool bOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SoftObjectPath ViewStaticMeshPath;//[Offset: 0x38, Size: 0x18]
	Transform PreviewTransform;//[Offset: 0x50, Size: 0x30]
	SoftObjectPath FightStaticMeshPath;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath PartIcon;//[Offset: 0x98, Size: 0x18]
	<int,Vector> SpecificScaleMap;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: SolarVirtualBulletHitParameter
	AmmoConfig* Ammo;//[Offset: 0x0, Size: 0x8]
	Vector StartLoc;//[Offset: 0x8, Size: 0xc]
	Vector TargetLoc;//[Offset: 0x14, Size: 0xc]
	int ModeIndex;//[Offset: 0x20, Size: 0x4]
	int FireChargePhase;//[Offset: 0x24, Size: 0x4]
	float FireChargeTime;//[Offset: 0x28, Size: 0x4]
	int HitStartIndex;//[Offset: 0x2c, Size: 0x4]
	HitResult[] Hits;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SolarVirtualBulletSpawnParameter
	AmmoConfig* Ammo;//[Offset: 0x0, Size: 0x8]
	Vector StartLoc;//[Offset: 0x8, Size: 0xc]
	Vector TargetLoc;//[Offset: 0x14, Size: 0xc]
	int ModeIndex;//[Offset: 0x20, Size: 0x4]
	int FireChargePhase;//[Offset: 0x24, Size: 0x4]
	float FireChargeTime;//[Offset: 0x28, Size: 0x4]
	SolarVirtualBulletHomingTarget HomingTarget;//[Offset: 0x2c, Size: 0x24]
	FString AntiData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: SolarVirtualBulletHomingTarget
	bool bSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Actor* HomingTargetActor;//[Offset: 0x4, Size: 0x8]
	Vector InitialLoc;//[Offset: 0xc, Size: 0xc]
	Vector CurrentLoc;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: SpawnProjParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	byte Mode;//[Offset: 0x1c, Size: 0x1]
	Actor* Target;//[Offset: 0x20, Size: 0x8]
	bool bTriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float Scale;//[Offset: 0x2c, Size: 0x4]
	byte RocketNum;//[Offset: 0x30, Size: 0x1]
	byte CurRocketNum;//[Offset: 0x31, Size: 0x1]
	FString AntiData;//[Offset: 0x38, Size: 0x10]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: SolarSummonData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	Rotator Orientation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	BulletHitDetailData HitDetailData;//[Offset: 0x14, Size: 0x3c]
	float ServerTimeSeconds;//[Offset: 0x50, Size: 0x4]
	Vector WeaponLocation;//[Offset: 0x54, Size: 0xc]
	float DamageScale;//[Offset: 0x60, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x64, Size: 0x4]
	float LastFireTime;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MutiBulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	BulletHitDetailData[] HitDetailDataArray;//[Offset: 0x18, Size: 0x10]
	float ServerTimeSeconds;//[Offset: 0x28, Size: 0x4]
	Vector WeaponLocation;//[Offset: 0x2c, Size: 0xc]
	float DamageScale;//[Offset: 0x38, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x3c, Size: 0x4]
	float LastFireTime;//[Offset: 0x40, Size: 0x4]
	FString AntiData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: PlaySoundParams
	bool HasSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool InSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int SoundFireAutoCount;//[Offset: 0x4, Size: 0x4]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FireMode
	AmmoConfig* Ammo;//[Offset: 0x0, Size: 0x8]
	int Index;//[Offset: 0x8, Size: 0x4]
	enum HoldAction;//[Offset: 0xc, Size: 0x1]
	int AmmoReserve;//[Offset: 0x14, Size: 0x4]
	int AmmoCapacity;//[Offset: 0x18, Size: 0x4]
	float FireRateAccumulation;//[Offset: 0x1c, Size: 0x4]
	float FireRateAccumulationBurstInterval;//[Offset: 0x20, Size: 0x4]
	ParticleSystemComponent* BeamEffect;//[Offset: 0x50, Size: 0x8]
	ParticleSystemComponent* ChargingEffect;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SolarWeaponProjectileSpline.Actor.Object
	SplineComponent* Spline;//[Offset: 0x230, Size: 0x8]
	SolarSummonPreviewComponent* PreviewComponent;//[Offset: 0x23c, Size: 0x8]
	SplineMeshComponent* SplineMeshComponentCache;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* PreviewedStaticMesh;//[Offset: 0x250, Size: 0x8]
	SkeletalMeshComponent* PreviewedSkeletalMesh;//[Offset: 0x258, Size: 0x8]
	StaticMeshComponent* PreviewedRangeMesh;//[Offset: 0x260, Size: 0x8]
	SceneComponent* PreviewRoot;//[Offset: 0x268, Size: 0x8]
	void ShowHitPointAt(out const Vector Loc);// 0x45efb2d80041
	void SetPreviewTransform(out const Vector PreviewLoc, out const Vector PreviewUpDir, out const Vector PreviewScale);// 0x45eeb2d80041
	void SetPoints(out const Vector[] Points);// 0x45edb2d80041
	void SetNeedUpdateDisplayThrowTrajectory(bool Value);// 0x45ecb2d80041
	bool RequestDisplayPreview(SolarSummonDetectionComponent* InSummonDetectionComponent, out const Vector InSummonLocation, out const Vector InSummonNormal);// 0x45ebb2d80041
	void HideHitPoint();// 0x45eab2d80041
	void HideAllSummonPreview();// 0x45e9b2d80041
	void Hide();// 0x45e8b2d80041
	SplineMeshComponent* GetSplineMeshComponent();// 0x45e7b2d80041
	void DrawSplineMesh(out const Vector[] InPredictPoints);// 0x45e6b2d80041
	void ChangeSummonPreviewAttachParent();// 0x45e5b2d80041

--------------------------------
Class: SolarSummonDetectionComponent.SolarPreviewDetectionComponent.ActorComponent.Object
	SolarQuickSummonProxy* QuickSummonProxy;//[Offset: 0x110, Size: 0x8]
	void ResetQucikSummonTimer();// 0x4162b2d80041
	bool IsWithinQuickSummonTime(const float InDeltaTime);// 0x4161b2d80041

--------------------------------
Class: SolarPreviewDetectionComponent.ActorComponent.Object
	SoftObjectPath DetectionConfigPath;//[Offset: 0xb8, Size: 0x18]
	bool IsAllowPreview(out const Vector InLocation, out const Vector InNormal);// 0x40cbb2d80041
	bool CheckIsPreviewValid(out const SolarSummonData InSummonData, bool InbAccept);// 0x40cab2d80041

--------------------------------
Class: SolarQuickSummonProxy.Object
	SolarSummonDetectionComponent* SummonDetectionComponent;//[Offset: 0x28, Size: 0x8]
	Vector RotateDirection(out const Vector InDirection, out const Vector InNormal);// 0x40e4b2d80041
	bool IsPlaceable(Actor* Summoner);// 0x40e3b2d80041
	bool IsCheckedWorldStatic(Actor* InActor, out const Vector InDirection, out const Vector InCheckOffset, float InLength);// 0x40e2b2d80041
	bool GetImpactPoint(Actor* InSummoner, out const Vector InStart, out const Vector InEndPoint, out Vector OutLocation, out Vector OutNormal);// 0x40e1b2d80041
	bool FindPlaceableSpace(out const Vector InSummonLocation, out const Vector InSummonNormal);// 0x40e0b2d80041

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x550, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x5a8, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x5b4, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x5b8, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x5c8, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x5d0, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d4, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d4, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d4, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x5d5, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x5d8, Size: 0x4]
	void UpdateMesh();// 0x5362b2d80041
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x5361b2d80041
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x5360b2d80041
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x535fb2d80041
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x535eb2d80041
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x535db2d80041
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x535cb2d80041
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x535bb2d80041
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x535ab2d80041
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x5359b2d80041
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x5358b2d80041
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x5357b2d80041
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x5356b2d80041
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x5355b2d80041
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x5354b2d80041
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x5353b2d80041
	Vector GetStartTangent();// 0x5352b2d80041
	Vector2D GetStartScale();// 0x5351b2d80041
	float GetStartRoll();// 0x5350b2d80041
	Vector GetStartPosition();// 0x534fb2d80041
	Vector2D GetStartOffset();// 0x534eb2d80041
	Vector GetSplineUpDir();// 0x534db2d80041
	byte GetForwardAxis();// 0x534cb2d80041
	Vector GetEndTangent();// 0x534bb2d80041
	Vector2D GetEndScale();// 0x534ab2d80041
	float GetEndRoll();// 0x5349b2d80041
	Vector GetEndPosition();// 0x5348b2d80041
	Vector2D GetEndOffset();// 0x5347b2d80041
	float GetBoundaryMin();// 0x5346b2d80041
	float GetBoundaryMax();// 0x5345b2d80041

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SolarSummonPreviewComponent.SolarPreviewComponent.ActorComponent.Object
	bool RequestDisplayPreviewDecalEffect(DecalComponent* InDecalComponent, out const SolarPreviewDecalEffectData InDecalEffectData, FString InDecalMaterialPath, out const Transform InDecalRelativeTransform);// 0x4176b2d80041

--------------------------------
Class: SolarPreviewComponent.ActorComponent.Object
	bool RequestReplacePreviewMesh(MeshComponent* InMeshComponent, FString InPreviewMeshPath);// 0x40c9b2d80041
	bool RequestReplacePreviewMaterial(MeshComponent* InMeshComponent, FString InPreviewMaterialPath);// 0x40c8b2d80041
	bool RequestDisplayPreviewMesh(MeshComponent* InMeshComponent, FString InPreviewMeshPath, FString InPreviewMaterialPath, out const Transform InPreviewRelativeTransform);// 0x40c7b2d80041

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x298, Size: 0x8]
	int SortOrder;//[Offset: 0x2a0, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x2a4, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x2a8, Size: 0x4]
	float FadeDuration;//[Offset: 0x2ac, Size: 0x4]
	float FadeInDuration;//[Offset: 0x2b0, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x2b4, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	Vector DecalSize;//[Offset: 0x2bc, Size: 0xc]
	void SetSortOrder(int Value);// 0x4d94b2d80041
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x4d93b2d80041
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x4d92b2d80041
	void SetFadeIn(float StartDelay, float Duaration);// 0x4d91b2d80041
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x4d90b2d80041
	float GetFadeStartDelay();// 0x4d8fb2d80041
	float GetFadeInStartDelay();// 0x4d8eb2d80041
	float GetFadeInDuration();// 0x4d8db2d80041
	float GetFadeDuration();// 0x4d8cb2d80041
	MaterialInterface* GetDecalMaterial();// 0x4d8bb2d80041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x4d8ab2d80041

--------------------------------
Class: SolarPreviewDecalEffectData
	SoftObjectPath ValidEffectPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath InvalidEffectPath;//[Offset: 0x18, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]
	int SortOrder;//[Offset: 0x60, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x64, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x68, Size: 0x4]
	float FadeDuration;//[Offset: 0x6c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x70, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x74, Size: 0x4]
	Vector DecalSize;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: CameraShakeData
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AttachedEffectParam
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Scale;//[Offset: 0x18, Size: 0xc]
	byte LocationType;//[Offset: 0x24, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x26, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: LocationEffectParam
	Rotator Rotation;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x19, Size: 0x1]
	bool bAutoActivateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: WeaponPartsComponent.ActorComponent.Object
	WeaponPartScopeComp* ScopeComp;//[Offset: 0xe8, Size: 0x8]
	WeaponPartClipComp* ClipComp;//[Offset: 0xf0, Size: 0x8]
	WeaponPartMuzzleComp* MuzzleComp;//[Offset: 0xf8, Size: 0x8]
	WeaponPartGripComp* GripComp;//[Offset: 0x100, Size: 0x8]
	WeaponPartGunStockComp* GunStockComp;//[Offset: 0x108, Size: 0x8]
	WeaponPartRunesComp* RunesComp;//[Offset: 0x110, Size: 0x8]
	StaticMeshComponent* CrossHairPlane;//[Offset: 0x118, Size: 0x8]
	StaticMeshComponent* RedCrosshairPanel;//[Offset: 0x120, Size: 0x8]
	bool bQuickScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	FName ScopeSocket;//[Offset: 0x12c, Size: 0x8]
	FName GripSocket;//[Offset: 0x134, Size: 0x8]
	FName ClipSocket;//[Offset: 0x13c, Size: 0x8]
	FName OldClipSocket;//[Offset: 0x144, Size: 0x8]
	FName MuzzleSocket;//[Offset: 0x14c, Size: 0x8]
	FName GunStockSocket;//[Offset: 0x154, Size: 0x8]
	SolarWeapon* MyWeaponActor;//[Offset: 0x160, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x168, Size: 0x8]
	void UpdateSkin(WeaponSkinData* SkinData);// 0x4782b2d80041
	void UpdateSinglePartHoldView(WeaponPartComp* PartComp, bool bLocal);// 0x4781b2d80041
	void UpdateHoldView(bool bLocal);// 0x4780b2d80041
	bool SinglePartHasInitilized(WeaponPartComp* Part);// 0x477fb2d80041
	void ShowParts(bool show);// 0x477eb2d80041
	void SetSinglePartSkin(WeaponPartComp* Part, WeaponSkinData* SkinData);// 0x477db2d80041
	void ResetSkin();// 0x477cb2d80041
	void ResetPartSkin(WeaponPartComp* Part);// 0x477bb2d80041
	bool OverrideWeaponAmmoConfig(int InFireModeType, int InAmmoId);// 0x477ab2d80041
	bool IsPartExist(int ID);// 0x4779b2d80041
	bool IsDefaultPart(const int PartId);// 0x4778b2d80041
	bool IsAmmoExist(int ID);// 0x4777b2d80041
	void InitEffectData(out const float[] hipV, out const float[] shoulderV, out WeaponPartsNetData Data);// 0x4776b2d80041
	void InitAllPartsEffectData(out WeaponPartsNetData Data);// 0x4775b2d80041
	bool HasInitilizeFinish();// 0x4774b2d80041
	WeaponPartComp*[] GetWeaponParts();// 0x4773b2d80041
	int GetPartsTypeByID(int ID);// 0x4772b2d80041
	FString GetPartsBpByID(int ID);// 0x4771b2d80041
	int GetPartLevelByID(int ID);// 0x4770b2d80041
	WeaponPartsNetData GetNetData();// 0x476fb2d80041
	void AttachToRightSocket(WeaponPartComp* PartComp);// 0x476eb2d80041

--------------------------------
Class: WeaponPartScopeComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	bool bOpenProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	float OpenTime;//[Offset: 0x664, Size: 0x4]
	float CostTime;//[Offset: 0x668, Size: 0x4]
	StaticMesh* LodXStaticMesh;//[Offset: 0x670, Size: 0x8]
	float FovValue;//[Offset: 0x678, Size: 0x4]
	float HipToAdsTime;//[Offset: 0x67c, Size: 0x4]
	CurveFloat* FovChangeCurve;//[Offset: 0x680, Size: 0x8]
	float HitEffectScale;//[Offset: 0x688, Size: 0x4]
	void OpenScope(float Time);// 0x478bb2d80041
	bool IsOpened();// 0x478ab2d80041
	bool IsNeedThermalImage();// 0x4789b2d80041
	int GetScopeType();// 0x4788b2d80041
	Vector GetScopeAimCenterPoint();// 0x4787b2d80041
	Rotator GetFPPRotation();// 0x4786b2d80041
	Vector GetFPPLocation();// 0x4785b2d80041
	float GetDistanceToEyeWhenScope();// 0x4784b2d80041
	void CloseScope();// 0x4783b2d80041

--------------------------------
Class: WeaponPartMuzzleComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool HasSilencer();// 0x4768b2d80041
	bool HasFlameArrester();// 0x4767b2d80041

--------------------------------
Class: WeaponPartGripComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartGunStockComp.WeaponPartComp.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartRunesComp.ActorComponent.Object
	int[] Runes;//[Offset: 0xb8, Size: 0x10]
	void UpdateData(out const int[] Data);// 0x476db2d80041
	void OnInitilizeServer();// 0x476cb2d80041
	void OnInitilizeClient();// 0x476bb2d80041
	bool IsValid();// 0x476ab2d80041
	enum GetPartType();// 0x4769b2d80041

--------------------------------
Class: MultiHitResult.HitResult
	Vector_NetQuantize Start;//[Offset: 0x88, Size: 0xc]
	Vector_NetQuantize End;//[Offset: 0x94, Size: 0xc]
	int Num;//[Offset: 0xa0, Size: 0x4]
	int Seed;//[Offset: 0xa4, Size: 0x4]
	int Mode;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: OverrideBulletStruct
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x0, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarEnergyShield.SummonItemBase.Pawn.Actor.Object
	ParticleSystem* HitEffect;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystem* VehicleWholeShieldBrokenEffect;//[Offset: 0x2e8, Size: 0x28]
	Vector HitEffectScale;//[Offset: 0x310, Size: 0xc]
	byte OwnerTeam;//[Offset: 0x31c, Size: 0x1]
	<Actor*,float> OverlapActorsTimeMap;//[Offset: 0x320, Size: 0x50]
	float OverlapActorIntervalTime;//[Offset: 0x370, Size: 0x4]
	void PlaySkillStartSound();// 0x3b55b2d80041
	void PlaySkillEndSound();// 0x3b54b2d80041
	void PlayHitEffectOnVehicleWholeShield(int IndexToPlayHitEffect, out const Vector HitLocation);// 0x3b53b2d80041
	void PlayHitEffect(out const HitResult HitResult);// 0x3b52b2d80041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3b51b2d80041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b50b2d80041
	void ChangeColor();// 0x3b4fb2d80041

--------------------------------
Class: SummonItemBase.Pawn.Actor.Object
	AkComponent* AkAudioComponent;//[Offset: 0x2a0, Size: 0x8]
	float MaxHealth;//[Offset: 0x2a8, Size: 0x4]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2ac, Size: 0x4]
	SolarCharacter* SourceSummoner;//[Offset: 0x2b0, Size: 0x8]
	float CurrentHealth;//[Offset: 0x2b8, Size: 0x4]
	float ReducedHealth;//[Offset: 0x2bc, Size: 0x4]
	float DelayDestroyTime;//[Offset: 0x2c0, Size: 0x4]
	bool bTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]
	float TimerMaxTime;//[Offset: 0x2c8, Size: 0x4]
	float Timer;//[Offset: 0x2cc, Size: 0x4]
	bool bEnableTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bOnlyOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	void SwitchTimer(bool InbEnable, float InMaxTime);// 0x3b4eb2d80041
	void Suicide();// 0x3b4db2d80041
	bool RequestPlaySoundByTeam(out const <enum,SolarSummonSoundData> InSoundData);// 0x3b4cb2d80041
	bool RequestPlaySound(out const FString[] InSoundData);// 0x3b4bb2d80041
	void ReceiveUpdateTimerEvent(float InTimerRate);// 0x3b4ab2d80041
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate);// 0x3b49b2d80041
	void ReceiveDeathEvent();// 0x3b48b2d80041
	void OnRep_CurrentHealth();// 0x3b47b2d80041
	bool IsDead();// 0x3b46b2d80041
	SolarCharacter* GetSourceSummoner();// 0x3b45b2d80041
	class Object GetClassType();// 0x3b44b2d80041
	Vector GetCenterLocation();// 0x3b43b2d80041

--------------------------------
Class: SolarSummonSoundData
	FString[] SoundNames;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapBase* MapOwner;//[Offset: 0x318, Size: 0x8]
	Vector2D MarkIconRealLoc;//[Offset: 0x320, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x328, Size: 0x8]
	bool IsOnBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	enum MarkerType;//[Offset: 0x331, Size: 0x1]
	bool IsMapObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]
	bool MoveAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 0x1]
	bool SupportEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	bool SupportEdgeWithBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]
	Actor* TargetActorRef;//[Offset: 0x338, Size: 0x8]
	void UpdateIconWithActor(Actor* InTargetActor);// 0x3576b2d80041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x3575b2d80041
	void SetMarkPos(out const Vector Loc);// 0x3574b2d80041
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);// 0x3573b2d80041
	void OnBigMapOpen();// 0x3572b2d80041
	void InitVehicleMarkIcon(int VehicleID);// 0x3571b2d80041
	void InitStaticIcon(int MarkID);// 0x3570b2d80041
	void InitMarkIcon(int MarkID, Actor* InTargetActor, bool InMoveable);// 0x356fb2d80041
	void EdgeFix(Vector2D Pos);// 0x356eb2d80041
	void CleanData();// 0x356db2d80041

--------------------------------
Class: MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MaxPool;//[Offset: 0x318, Size: 0x4]
	<FString,MapMarkElemArray> MapMarkPool;//[Offset: 0x320, Size: 0x50]
	void SetMiniMapFOV(float TargetFOV, float PlayTime, bool WithIconScale);// 0x3599b2d80041
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x3598b2d80041
	void RemoveDotLineOnMap(int DotLineID);// 0x3597b2d80041
	void RemoveAllMapMarks();// 0x3596b2d80041
	bool RecycleMapMark(FString MapMarkName, MapMarkBase* MapMarkToRecycle);// 0x3595b2d80041
	void PlayVoiceOnMiniMap(enum InVoiceType, out const MapVoiceData InVoiceData);// 0x3594b2d80041
	void MapScaleFormat(MapMarkBase* MapMark);// 0x3593b2d80041
	void Lua_MapScaleFormat(MapMarkBase* MapMark);// 0x3592b2d80041
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x3591b2d80041
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder);// 0x3590b2d80041
	void InitMapMarkPool();// 0x358fb2d80041
	MapMarkBase* GetFreeMapMark(FString MapMarkName);// 0x358eb2d80041
	bool EdgeSupportMarkFix(MapMarkBase* InMarkInstance, out Vector2D FixedPos);// 0x358db2d80041
	MapMarkBase* CreateMapMark(FString MapMarkName);// 0x358cb2d80041
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x358bb2d80041

--------------------------------
Class: MapMarkElemArray
	MapMarkElem[] MapMarkElems;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MapMarkElem
	MapMarkBase* MapMark;//[Offset: 0x0, Size: 0x8]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ElectricShopSection
	ElectricShopItem[] Items;//[Offset: 0x0, Size: 0x10]
	float CoolDownDuration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ElectricShopItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Prize;//[Offset: 0x4, Size: 0x4]
	int Num;//[Offset: 0x8, Size: 0x4]
	int ProductID;//[Offset: 0xc, Size: 0x4]
	float CoolDown;//[Offset: 0x10, Size: 0x4]
	int Generation;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ElectricShopCDRecord
	int ProductID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float EndWorldTime;//[Offset: 0x8, Size: 0x4]
	FString BuyerID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PoolRefreshInfo
	int PoolGroupID;//[Offset: 0x0, Size: 0x4]
	float PoolRefreshTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ElectricShopItemDemo.Actor.Object

--------------------------------
Class: ChargingPilePreset
	SoftObjectPath BrokenMeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath BrokenMatPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath RangeRingPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath RangeRingMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath ChargeCirclePath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath ChargeCircleMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ChargeParticleEffectPath;//[Offset: 0x90, Size: 0x18]
	Transform RangeRingTrans;//[Offset: 0xb0, Size: 0x30]
	Transform ChargeCircleTrans;//[Offset: 0xe0, Size: 0x30]
	Vector BeamStartPos;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: SolarBackpackActor.Actor.Object
	SceneComponent* BackpackRoot;//[Offset: 0x230, Size: 0x8]
	BackpackVertAnimMeshComponent* BackpackMesh;//[Offset: 0x238, Size: 0x8]
	SolarCharacter* BackPackActorOwner;//[Offset: 0x240, Size: 0x8]
	SolarBackpackSFX*[] BackpackSFX;//[Offset: 0x248, Size: 0x10]
	SolarBackpackSFX* BackpackOffgasSFX;//[Offset: 0x258, Size: 0x8]
	float OriginScale;//[Offset: 0x26c, Size: 0x4]
	FString TrailBpPath;//[Offset: 0x290, Size: 0x10]
	FString OffgasBpPath;//[Offset: 0x2a0, Size: 0x10]
	class SolarBackpackSFX* TrailClass;//[Offset: 0x2b0, Size: 0x8]
	class SolarBackpackSFX* OffgasClass;//[Offset: 0x2b8, Size: 0x8]
	<ParticleSystemComponent*> ListenSet;//[Offset: 0x2c0, Size: 0x50]
	void SetRenderMode(byte Mode);// 0x3888b2d80041
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int Flag);// 0x3887b2d80041
	void OnMeshEffectFactorChange();// 0x3886b2d80041
	void OnChildPSCompFinish(ParticleSystemComponent* PSComponent);// 0x3885b2d80041
	void OnChildPSCompActive(ActorComponent* Component, bool bReset);// 0x3884b2d80041
	bool IsFly();// 0x3883b2d80041
	bool IsCharging();// 0x3882b2d80041
	bool HasEnergy();// 0x3881b2d80041
	float GetBackpackOrginScale();// 0x3880b2d80041

--------------------------------
Class: BackpackVertAnimMeshComponent.VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VertexAnimInfo DefaultAnimInfo;//[Offset: 0x578, Size: 0x10]
	<byte,VertexAnimInfo> BackPackAnimInfoMap;//[Offset: 0x588, Size: 0x50]
	SolarCharacter* SolarCharacter;//[Offset: 0x5d8, Size: 0x8]
	SolarBackpackActor* BackPackActor;//[Offset: 0x5e0, Size: 0x8]

--------------------------------
Class: VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void PlayInfo(out const VertexAnimInfo InAnimInfo);// 0x3337b2d80041
	void Play(int InStartFrame, int InEndFrame, float InLength, bool InLoop);// 0x3336b2d80041

--------------------------------
Class: VertexAnimInfo
	int StartFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	float Length;//[Offset: 0x8, Size: 0x4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SolarBackpackSFX.Actor.Object
	ParticleSystemComponent* GetTrailEffectComponent();// 0x39a4b2d80041
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x39a3b2d80041
	void BackpackSFXEnd();// 0x39a2b2d80041
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x39a1b2d80041

--------------------------------
Class: BackpackJetPrepelInfo
	bool IsPropelling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int PropellingCounter;//[Offset: 0x4, Size: 0x4]
	byte JetType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GyroscopeConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 0x8]
	DataTable* gyroscopeSensitivityDataTab;//[Offset: 0x38, Size: 0x8]
	DataTable* GyroscopeDeviceModelDataTab;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: CharacterOperationEvent
	enum Name;//[Offset: 0x0, Size: 0x1]
	Object* Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ActorEffect.Object
	class ActorEffectController* ControllerClass;//[Offset: 0x28, Size: 0x8]
	ActorEffectController* Controller;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ActorEffectController.Object

--------------------------------
Class: SolarTeamRescueComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xc0, Size: 0x8]
	float MaxRescureDis;//[Offset: 0xc8, Size: 0x4]
	float MaxRescureAngle;//[Offset: 0xcc, Size: 0x4]
	float RescueRecoveryHp;//[Offset: 0xd0, Size: 0x4]
	float TempTime;//[Offset: 0xd4, Size: 0x4]
	float CheckInterval;//[Offset: 0xd8, Size: 0x4]
	float TempReqTime;//[Offset: 0xdc, Size: 0x4]
	float RequestTimeout;//[Offset: 0xe0, Size: 0x4]
	bool bSendRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	bool bLastRescueBtnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1]
	SolarCharacter* ClosestTarget;//[Offset: 0xe8, Size: 0x8]
	SolarCharacter*[] NearByTeamMates;//[Offset: 0xf0, Size: 0x10]
	void UpdateTeamRescueParams();// 0x448ab2d80041
	void TryRescueClosestTeammateLuaCall(bool IsShow);// 0x4489b2d80041
	void TryRescueClosestTeammate();// 0x4488b2d80041
	void ShowTeamRescueToUI(bool IsShow);// 0x4487b2d80041
	void SetRescueBtnVisibility(bool bIsVisible);// 0x4486b2d80041
	void ReqStartTeamRescue(SolarCharacter* TargetCharacter);// 0x4485b2d80041
	void ReqCompleteTeamRescue();// 0x4484b2d80041
	void ReqCancelTeamRescure();// 0x4483b2d80041
	void OnRescueStateChangeInternal();// 0x4482b2d80041
	void OnRescueStateChange();// 0x4481b2d80041
	void InitTeamRescueParams();// 0x4480b2d80041
	void DetectRescueTeammate(float DeltaTime);// 0x447fb2d80041
	bool CanRescue(SolarCharacter* Player, const bool bStart);// 0x447eb2d80041

--------------------------------
Class: InjectorMeshPreset
	SoftObjectPath InjectorMeshPath;//[Offset: 0x0, Size: 0x18]
	Transform InjectorRelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: WaterEffectPreset
	ParticleSystem* EffectResource;//[Offset: 0x0, Size: 0x28]
	FName DefaultTrackSocket;//[Offset: 0x28, Size: 0x8]
	FName FTrackSocket;//[Offset: 0x30, Size: 0x8]
	FName BTrackSocket;//[Offset: 0x38, Size: 0x8]
	FName LTrackSocket;//[Offset: 0x40, Size: 0x8]
	FName RTrackSocket;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarItemComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb8, Size: 0x8]
	void UseItemRequestLuaCall(int ItemID, int Num);// 0x3dc6b2d80041
	void OnPlayerBackpackItemUpdate();// 0x3dc5b2d80041
	bool CanUseMedicine();// 0x3dc4b2d80041

--------------------------------
Class: SolarPickupComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* OwnerChar;//[Offset: 0x4d8, Size: 0x8]
	float PickUpHighlyThresholdFactor;//[Offset: 0x4e8, Size: 0x4]
	bool bWantedClearItemData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 0x1]
	<enum,SolarPickupHandlerBase*> PickupHandlerMap;//[Offset: 0x4f0, Size: 0x50]
	bool GlobalPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	AirDropTreasureBox* TagetAirDropBox;//[Offset: 0x544, Size: 0x8]
	<enum,ActorArrayMap> PickupItemsMap;//[Offset: 0x558, Size: 0x50]
	Actor*[] ProccessedList;//[Offset: 0x5a8, Size: 0x10]
	bool ItemUIToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	UIManager* UIManager;//[Offset: 0x5c0, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x5c8, Size: 0x8]
	Actor* PendingFirstItemActor;//[Offset: 0x678, Size: 0x8]
	SolarTreasureBoxActor* PendingFirstTreasureBox;//[Offset: 0x680, Size: 0x8]
	SolarTreasureBoxActor* PendingFirstDeathBox;//[Offset: 0x688, Size: 0x8]
	bool GlobalAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	float UnAutoPickupItemTime;//[Offset: 0x694, Size: 0x4]
	float AutoPickupTime;//[Offset: 0x698, Size: 0x4]
	bool StopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	bool GlobalAutoPickupHomeItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 0x1]
	bool bReqPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69e, Size: 0x1]
	SolarGameUserSettings* UserSettings;//[Offset: 0x778, Size: 0x8]
	delegate OnItemDataSet;//[Offset: 0x790, Size: 0x10]
	delegate UpdateCheckBoxesVisibility;//[Offset: 0x7a0, Size: 0x10]
	delegate OnUpdateCheckBoxesHighLight;//[Offset: 0x7b0, Size: 0x10]
	delegate OnUpdateCheckBoxesStates;//[Offset: 0x7c0, Size: 0x10]
	delegate OnPickupListClear;//[Offset: 0x7d0, Size: 0x10]
	delegate OnTogglePickupList;//[Offset: 0x7e0, Size: 0x10]
	delegate OnSelectPickupSightWidget;//[Offset: 0x7f0, Size: 0x10]
	bool ListenFireReslutFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	float DelayedDisplayTime;//[Offset: 0x804, Size: 0x4]
	TimerHandle AutoShowPickupListHandle;//[Offset: 0x808, Size: 0x8]
	TimerHandle DelayProcessFireResultHandle;//[Offset: 0x810, Size: 0x8]
	TimerHandle EnsuredAutoShowHandle;//[Offset: 0x818, Size: 0x8]
	FString[] FireResultMsgs;//[Offset: 0x820, Size: 0x10]
	void UpdateItemUI(bool bForce);// 0x3f4db2d80041
	void UpdateCheckboxSwitchLuaCall(enum PickupType, bool InCheckBoxSwitch);// 0x3f4cb2d80041
	void UpdateCheckboxSwitches(out const <enum,bool> InOpenSwitches);// 0x3f4bb2d80041
	void UpdateBagNearbyData();// 0x3f4ab2d80041
	void TryReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x3f49b2d80041
	void TryPickupTreasureItem(SolarTreasureBoxActor* PickActor, out const SolarItemData ItemData);// 0x3f48b2d80041
	void TryPickupItem(Actor* PickActor);// 0x3f47b2d80041
	bool TryOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x3f46b2d80041
	void TryClearDirtyData(const bool bForce);// 0x3f45b2d80041
	bool TryCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x3f44b2d80041
	void ToggleItemUI(bool Flag);// 0x3f43b2d80041
	void StopListenFireInput(bool bIsInstantlyStop);// 0x3f42b2d80041
	void StopAutoPickupTimer(enum PickupType);// 0x3f41b2d80041
	void StopAutoPickupBoxHomeItemTimer();// 0x3f40b2d80041
	void StartListenFireInput();// 0x3f3fb2d80041
	void StartCheckTutorials(enum TriggerType);// 0x3f3eb2d80041
	void StartAutoPickupTimer(enum PickupType);// 0x3f3db2d80041
	void StartAutoPickupBoxHomeItemTimer();// 0x3f3cb2d80041
	void ShowPickupList(bool Flag);// 0x3f3bb2d80041
	bool ShouldPickupTreasureBoxItem(SolarTreasureBoxActor* InTreasureBox);// 0x3f3ab2d80041
	void SetStopAutoPickupWhenClose(const bool InStopAutoPickupWhenClose);// 0x3f39b2d80041
	void SetPickupSwitchInLua(const bool IsOpen);// 0x3f38b2d80041
	void SetPickupSwitch(const bool IsOpen);// 0x3f37b2d80041
	void SetPickupCapsuleSize(out const Vector Size);// 0x3f36b2d80041
	void SetIsAutoPickupHomeItems(const bool InValue);// 0x3f35b2d80041
	void SetAutoPickupSwitch(const bool InCanAutoPickup);// 0x3f34b2d80041
	void RestartPickupTimer(enum PickupType);// 0x3f33b2d80041
	void ReqPickupWeapon(Actor* WeaponData, bool IsAutoPickup);// 0x3f32b2d80041
	void ReqPickupTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool IsAutoPickup, int TargetIndex, enum InItemType);// 0x3f31b2d80041
	void ReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x3f30b2d80041
	void ReqPickupHomeItemByDrag(SolarItemActor* ItemActor, int Grade, int GridIndex);// 0x3f2fb2d80041
	void ReqPickupBoxHomeItemByDrag(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, int Grade, int GridIndex);// 0x3f2eb2d80041
	void ReqOpenTreasureBox(SolarTreasureBoxActor* TreasureBox);// 0x3f2db2d80041
	void RefreshPickupTimer();// 0x3f2cb2d80041
	void RefreshItemUI();// 0x3f2bb2d80041
	void RecheckPendingActors();// 0x3f2ab2d80041
	void ReceiveFireResult(FString InFireResultMsg);// 0x3f29b2d80041
	void ProcessFireResultMsgs();// 0x3f28b2d80041
	void PickFirstItemFromPickupList();// 0x3f27b2d80041
	void OnWeaponSlotEquip(int InWeaponSlotID, SolarPlayerWeapon* InWeapon);// 0x3f26b2d80041
	void OnUpdateItemUIDataChanged(Object* Object, int OldItemID, int NewItemID);// 0x3f25b2d80041
	void OnTreasureBoxStateChange(int64 ThisID, const enum State);// 0x3f24b2d80041
	void OnPickupSettingChanged();// 0x3f23b2d80041
	void OnPickupConfirmHandle();// 0x3f22b2d80041
	void OnPickupActorEnd(Actor* ItemActor);// 0x3f21b2d80041
	void OnPickupActorBegin(Actor* ItemActor);// 0x3f20b2d80041
	void OnCharacterDeathBegin();// 0x3f1fb2d80041
	void OnActorDestroyed(Actor* Actor);// 0x3f1eb2d80041
	void MarkDirtyForTick();// 0x3f1db2d80041
	bool IsValidItemActor(const Actor* ItemActor);// 0x3f1cb2d80041
	bool IsNeedReplace(const enum InType, out const SolarItemData InItemData);// 0x3f1bb2d80041
	bool IsEquipItem(const enum InType);// 0x3f1ab2d80041
	bool IsCharacterInAir();// 0x3f19b2d80041
	void InitPickupCheckBoxSwitches();// 0x3f18b2d80041
	SolarItemData GetTreasureItemDataByThisID(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID);// 0x3f17b2d80041
	Actor* GetPickupTreasureBoxActor();// 0x3f16b2d80041
	<int,ActorArray> GetItemData(enum PickupItemType);// 0x3f15b2d80041
	int GetItemCount(enum PickupItemType);// 0x3f14b2d80041
	bool GetIsGlobalPickup();// 0x3f13b2d80041
	bool GetIsAutoPickupHomeItems();// 0x3f12b2d80041
	void DoStopOpeningAirDropBox();// 0x3f11b2d80041
	void DoOpenAirDropBox();// 0x3f10b2d80041
	void CloseItemUI();// 0x3f0fb2d80041
	void ClearAutoShowPickupListHandle();// 0x3f0eb2d80041
	void ClearAllTimer();// 0x3f0db2d80041
	void CheckToShowConfirm(out const SolarItemData ItemData);// 0x3f0cb2d80041
	bool CheckIsItemMaximizing(const int ItemID);// 0x3f0bb2d80041
	void CallHUDSetTreasureBoxActor(Actor* InActor);// 0x3f0ab2d80041
	void CallHUDSetAirdropBoxActor(Actor* InActor);// 0x3f09b2d80041
	void CallHUDSetActiveOpenBoxProgress(const bool Inactive);// 0x3f08b2d80041
	void CallHUDSetActiveOpenBoxBtn(const bool Inactive);// 0x3f07b2d80041
	void CallHUDHideOpenBoxUIByThisID(const int64 InThisID);// 0x3f06b2d80041
	void CallHUDHideAirdropBoxUIByThisID(const int64 InThisID);// 0x3f05b2d80041

--------------------------------
Class: SolarItemActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x270, Size: 0xa8]
	float SpawnOffset;//[Offset: 0x318, Size: 0x4]
	SphereComponent* SphereComponent;//[Offset: 0x320, Size: 0x8]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x330, Size: 0x10]
	byte ItemCurrentState;//[Offset: 0x340, Size: 0x1]
	byte[] MarkedTeamIdList;//[Offset: 0x350, Size: 0x10]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x368, Size: 0x8]
	StaticMeshComponent* OutlineMeshComp;//[Offset: 0x370, Size: 0x8]
	MaterialInstanceDynamic*[] NormalMats;//[Offset: 0x378, Size: 0x10]
	MaterialInstanceDynamic*[] OutlineMats;//[Offset: 0x388, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x32d8b2d80041
	void SwitchDiscardMaterials();// 0x32d7b2d80041
	void SetOutlineMeshVisible(bool Visible);// 0x32d6b2d80041
	void SetItemData(out const SolarItemData _ItemData);// 0x32d5b2d80041
	void OnServerPawned();// 0x32d4b2d80041
	void OnRep_ItemDataChange();// 0x32d3b2d80041
	void OnRep_ItemCurrentStateChanged();// 0x32d2b2d80041
	void NotifyThisItemWasPickedUp();// 0x32d1b2d80041
	void MarkThisItem(byte TeamID);// 0x32d0b2d80041
	StaticMeshComponent* GetStaticMeshComp();// 0x32cfb2d80041
	int GetQuality();// 0x32ceb2d80041
	StaticMeshComponent* GetBackgroundFXMeshComp();// 0x32cdb2d80041

--------------------------------
Class: SolarDormantActor.Actor.Object

--------------------------------
Class: SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	enum CurrentState;//[Offset: 0x398, Size: 0x1]
	SolarItemData[] ItemDataList;//[Offset: 0x3a0, Size: 0x10]
	SolarItemData[] SortedGameItemDatas;//[Offset: 0x3b0, Size: 0x10]
	int DataLeng;//[Offset: 0x3d0, Size: 0x4]
	int CostNum;//[Offset: 0x3d4, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x3d8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3e0, Size: 0x8]
	void UpdateTreasureBoxInternal();// 0x32e8b2d80041
	void UpdateOpenBoxUIByState(const enum NewState);// 0x32e7b2d80041
	void UpdateItemDataListInternal();// 0x32e6b2d80041
	void ServerSetState(const enum NewState, SolarCharacter* RequestCharacter);// 0x32e5b2d80041
	void ServerNotifyPlayerOpen(SolarCharacter* RequestCharacter, enum StatisticsType);// 0x32e4b2d80041
	void PlayOpenAnimation();// 0x32e3b2d80041
	void OpenTreasureBoxRequire();// 0x32e2b2d80041
	void OnRep_ItemDataList();// 0x32e1b2d80041
	void OnRep_CurrentState();// 0x32e0b2d80041
	bool IsEmpty();// 0x32dfb2d80041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x32deb2d80041
	int GetNumCost();// 0x32ddb2d80041
	SolarItemData[] GetItemList();// 0x32dcb2d80041
	void ConstructTreasureBoxTest(out int[] itemIdList);// 0x32dbb2d80041
	void ConstructTreasureBox(int dropId);// 0x32dab2d80041
	bool BOpened();// 0x32d9b2d80041

--------------------------------
Class: SolarPickupHandlerBase.Object
	enum Type;//[Offset: 0x28, Size: 0x1]
	SolarPickupComponent* OwnerComponent;//[Offset: 0x30, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	bool bIsOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	float openProgress;//[Offset: 0x3ec, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0x3f0, Size: 0x8]
	float OpenTime;//[Offset: 0x3f8, Size: 0x4]
	float ProtectionTime;//[Offset: 0x3fc, Size: 0x4]
	bool bBoxLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 0x1]
	Rotator TargetRotation;//[Offset: 0x42c, Size: 0xc]
	Vector TargetLocation;//[Offset: 0x438, Size: 0xc]
	ParticleSystem* LandHitEffect;//[Offset: 0x448, Size: 0x8]
	class Actor* WarningEffect;//[Offset: 0x450, Size: 0x8]
	class SolarAbility* RangeAbility;//[Offset: 0x458, Size: 0x8]
	float dropGravity;//[Offset: 0x460, Size: 0x4]
	float maxDropSpeed;//[Offset: 0x464, Size: 0x4]
	float originHeight;//[Offset: 0x468, Size: 0x4]
	float dropOffset;//[Offset: 0x46c, Size: 0x4]
	bool bIsDroping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 0x1]
	bool bIsSeating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47e, Size: 0x1]
	FString SNameAirDropOpen;//[Offset: 0x4b8, Size: 0x10]
	FString SNameLandHit;//[Offset: 0x4c8, Size: 0x10]
	FString SNameStartDrop;//[Offset: 0x4d8, Size: 0x10]
	FString SNameStopDrop;//[Offset: 0x4e8, Size: 0x10]
	FString SNamePlayLandedLoopAudio;//[Offset: 0x4f8, Size: 0x10]
	FString SNameStopLandedLoopAudio;//[Offset: 0x508, Size: 0x10]
	FString SNamePlayStartHackAudio;//[Offset: 0x518, Size: 0x10]
	FString SNameStopStartHackAudio;//[Offset: 0x528, Size: 0x10]
	FString SNamePlayHackingLoopAudio;//[Offset: 0x538, Size: 0x10]
	FString SNameStopHackingLoopAudio;//[Offset: 0x548, Size: 0x10]
	void PlayLandingAnimation();// 0x32f3b2d80041
	bool OpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x32f2b2d80041
	void OnStateChanged();// 0x32f1b2d80041
	void OnRep_TargetLocation();// 0x32f0b2d80041
	void OnRep_OpenProgressChange();// 0x32efb2d80041
	void OnRep_OpenCharacterChange();// 0x32eeb2d80041
	void OnRep_IsOpening();// 0x32edb2d80041
	void OnRep_bBoxLanded();// 0x32ecb2d80041
	bool IsOpenningCharacterOffline();// 0x32ebb2d80041
	bool IsOpeningCharacterInRange();// 0x32eab2d80041
	bool CancelOpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x32e9b2d80041

--------------------------------
Class: ActorArrayMap
	<int,ActorArray> ActorArrayMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ActorArray
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SolarTreatmentComponent.ActorComponent.Object
	delegate OnCharacterHealthLow;//[Offset: 0xc0, Size: 0x10]
	int MedicineItemId;//[Offset: 0xd0, Size: 0x4]
	float DefaultTreatmentDuration;//[Offset: 0xd4, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0xd8, Size: 0x8]
	void TryStopTreatment();// 0x44d4b2d80041
	void TryStatisticsTreatedTimes();// 0x44d3b2d80041
	void TryStartTreatment();// 0x44d2b2d80041
	void StopProgress();// 0x44d1b2d80041
	void StartProgress();// 0x44d0b2d80041
	bool IsMedicineEnough();// 0x44cfb2d80041
	bool IsFullHealth();// 0x44ceb2d80041
	bool IsAbleToContinueTreatment();// 0x44cdb2d80041
	void IncreaseTreatedTimes();// 0x44ccb2d80041
	float GetTreatmentDuration();// 0x44cbb2d80041
	FString GetModuleName_Implementation();// 0x44cab2d80041
	bool CanStartTreatment();// 0x44c9b2d80041
	bool CanBeTreated();// 0x44c8b2d80041

--------------------------------
Class: OperatorMeshPreset
	ParticleSystem* ShieldRepairFXResourceSoft;//[Offset: 0x0, Size: 0x28]
	Vector ShieldRepairFXRelativeLocation;//[Offset: 0x28, Size: 0xc]
	SoftObjectPath ShieldOperatorMeshPath;//[Offset: 0x38, Size: 0x18]
	Transform ShieldOperatorRelativeTrans;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ShieldEffect
	ParticleSystem* ShieldEffect;//[Offset: 0x0, Size: 0x28]
	Vector EffectScale;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ShieldSoundData
	<enum,enum> SoundData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TreasureBoxOperatorMeshPreset
	SoftObjectPath TreasureBoxOperatorMeshPath;//[Offset: 0x0, Size: 0x18]
	Transform TreasureBoxOperatorRelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	float CharacterPickupRange;//[Offset: 0x3e8, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x3ec, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x3f0, Size: 0x4]
	FString PlayerId;//[Offset: 0x3f8, Size: 0x10]
	FString NickName;//[Offset: 0x408, Size: 0x10]
	bool IsPickuped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	BoxChargingInfo[] ChargingChars;//[Offset: 0x430, Size: 0x10]
	void ReceiveSetUIEnable(bool IsShow);// 0x3430b2d80041
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x342fb2d80041
	void ReceiveRefreshExtraEnergy(FString Message);// 0x342eb2d80041
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x342db2d80041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x342cb2d80041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x342bb2d80041
	void OnRep_PickupedChanged();// 0x342ab2d80041
	void OnRep_CurrExtraEnergyValueChanged();// 0x3429b2d80041
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x3428b2d80041

--------------------------------
Class: BoxChargingInfo

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x4d9, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x4da, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x4e0, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x4e8, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 0x1]
	float RedrawTime;//[Offset: 0x4f4, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x500, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x50c, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x516, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x517, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x518, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x520, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x530, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x540, Size: 0x4]
	enum BlendMode;//[Offset: 0x544, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x546, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x548, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x570, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x578, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x580, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x588, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x590, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x598, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x5a0, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x5b0, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x5bc, Size: 0x8]
	int LayerZOrder;//[Offset: 0x5c4, Size: 0x4]
	enum GeometryMode;//[Offset: 0x5c8, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x5cc, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x4affb2d80041
	void SetWindowFocusable(bool bInWindowFocusable);// 0x4afeb2d80041
	void SetWidgetSpace(enum NewSpace);// 0x4afdb2d80041
	void SetWidget(UserWidget* Widget);// 0x4afcb2d80041
	void SetTwoSided(const bool bWantTwoSided);// 0x4afbb2d80041
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x4afab2d80041
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x4af9b2d80041
	void SetRedrawTime(float InRedrawTime);// 0x4af8b2d80041
	void SetPivot(out const Vector2D InPivot);// 0x4af7b2d80041
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x4af6b2d80041
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x4af5b2d80041
	void SetGeometryMode(enum InGeometryMode);// 0x4af4b2d80041
	void SetDrawSize(Vector2D Size);// 0x4af3b2d80041
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x4af2b2d80041
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x4af1b2d80041
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x4af0b2d80041
	void RequestRedraw();// 0x4aefb2d80041
	enum GetWindowVisiblility();// 0x4aeeb2d80041
	bool GetWindowFocusable();// 0x4aedb2d80041
	enum GetWidgetSpace();// 0x4aecb2d80041
	UserWidget* GetUserWidgetObject();// 0x4aebb2d80041
	bool GetTwoSided();// 0x4aeab2d80041
	bool GetTickWhenOffscreen();// 0x4ae9b2d80041
	TextureRenderTarget2D* GetRenderTarget();// 0x4ae8b2d80041
	float GetRedrawTime();// 0x4ae7b2d80041
	Vector2D GetPivot();// 0x4ae6b2d80041
	LocalPlayer* GetOwnerPlayer();// 0x4ae5b2d80041
	MaterialInstanceDynamic* GetMaterialInstance();// 0x4ae4b2d80041
	bool GetManuallyRedraw();// 0x4ae3b2d80041
	enum GetGeometryMode();// 0x4ae2b2d80041
	Vector2D GetDrawSize();// 0x4ae1b2d80041
	bool GetDrawAtDesiredSize();// 0x4ae0b2d80041
	float GetCylinderArcAngle();// 0x4adfb2d80041
	Vector2D GetCurrentDrawSize();// 0x4adeb2d80041

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4]
	int SizeY;//[Offset: 0xc4, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xc8, Size: 0x10]
	byte AddressX;//[Offset: 0xd8, Size: 0x1]
	byte AddressY;//[Offset: 0xd9, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xda, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xda, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xda, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xdb, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0xdd, Size: 0x1]
	byte MipsAddressU;//[Offset: 0xde, Size: 0x1]
	byte MipsAddressV;//[Offset: 0xdf, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: TeammateHUDPreset
	class UserWidget* TeammateHUDClass;//[Offset: 0x0, Size: 0x8]
	bool bUseDesireSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector2D DrawSize;//[Offset: 0xc, Size: 0x8]
	int ZOrder;//[Offset: 0x14, Size: 0x4]
	float DisplayMaxDistance;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RadarScanSoundDataAsset.DataAsset.Object
	FString RadarScan_Loop_Start;//[Offset: 0x30, Size: 0x10]
	FString RadarScan_Loop_End;//[Offset: 0x40, Size: 0x10]
	FString RadarScan_Once_Success;//[Offset: 0x50, Size: 0x10]
	FString RadarScan_Once_Failed;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: SolarRadarComponent.ActorComponent.Object
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0xc0, Size: 0x8]
	class UserWidget* ScannedScreenUIClass;//[Offset: 0xc8, Size: 0x8]
	float ScreenUIDisplayTime;//[Offset: 0xd0, Size: 0x4]
	UserWidget* CreatedScreenUI;//[Offset: 0xd8, Size: 0x8]
	TimerHandle ScreenUITimerHandle;//[Offset: 0xe0, Size: 0x8]
	SolarCharacter* CharacterOwner;//[Offset: 0xe8, Size: 0x8]
	ScannedInfo[] CurrentScanResults;//[Offset: 0xf0, Size: 0x10]
	float CurrentSpanTimer;//[Offset: 0x100, Size: 0x4]
	FName[] ActivedRadarTags;//[Offset: 0x108, Size: 0x10]
	void OnRecivedScanResults();// 0x40f1b2d80041
	void OnRecieveOnceScanStart(int ScanedNum);// 0x40f0b2d80041
	void OnRadarScanStart(out RadarDataSpec RadarDataSpec);// 0x40efb2d80041
	void OnRadarScanEnd(out RadarDataSpec RadarDataSpec);// 0x40eeb2d80041
	void OnExposedByRadar(bool bOnceScan);// 0x40edb2d80041
	void OnceScanSuccessNotifation(int ScanedNum);// 0x40ecb2d80041
	void OnceScanFailedNotifation();// 0x40ebb2d80041
	void MarkedByOnceScanNotifation();// 0x40eab2d80041
	FString GetModuleName_Implementation();// 0x40e9b2d80041
	void ExposedByRadarNotifation();// 0x40e8b2d80041

--------------------------------
Class: RadarDataSpec.FastArraySerializerItem
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0xc, Size: 0x4]
	byte RadarType;//[Offset: 0x10, Size: 0x1]
	Vector2D RadarRange;//[Offset: 0x14, Size: 0x8]
	Pawn* RadarSpawner;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ScannedInfo
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	enum TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector TargetLocation;//[Offset: 0xc, Size: 0xc]
	float TargetToward;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RadarDataSpecContainer.FastArraySerializer
	RadarDataSpec[] Radars;//[Offset: 0x108, Size: 0x10]
	SolarRadarComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: CriticalHitInfo
	SolarPlayerState* Instigator;//[Offset: 0x0, Size: 0x8]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float DamageTime;//[Offset: 0xc, Size: 0x4]
	int LastDamageWeaponID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WorldMarkComponent.ActorComponent.Object
	SolarCharacter* Owner;//[Offset: 0xc0, Size: 0x8]
	uint32 WorldMarkPoolOriginSize;//[Offset: 0xc8, Size: 0x4]
	float MinCheckDistance;//[Offset: 0xcc, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xd0, Size: 0x4]
	void VehicleNotify(int VehicleID, int NameLocID);// 0x4875b2d80041
	void UnMarkItemByIDLuaCall(int64 instanceID);// 0x4874b2d80041
	void ResponseChosenMark();// 0x4873b2d80041
	void NotifyThatToFarToMark();// 0x4872b2d80041
	void MarkWarningOnWorld();// 0x4871b2d80041
	void MarkQuickChatOnWorld(FString IconImg);// 0x4870b2d80041
	void MarkPointOnWorld();// 0x486fb2d80041
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x486eb2d80041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x486db2d80041
	void LuaRelease();// 0x486cb2d80041
	void LuaInit();// 0x486bb2d80041
	void InteractTypeNotify(enum Type);// 0x486ab2d80041
	void Init(SolarCharacter* Character);// 0x4869b2d80041
	HUD_WorldMarkPanel* GetWorldMarkPanel();// 0x4868b2d80041
	void CreateWorldMark(int PosInTeam, out const WorldMarkData InWorldMarkedData);// 0x4867b2d80041
	void CreateWarningWidget(WorldMarkData Data);// 0x4866b2d80041
	void CreateItemMarkWidget(WorldMarkData Data);// 0x4865b2d80041
	void CreateInvalidWidget(WorldMarkData Data, bool bShouldNotify);// 0x4864b2d80041

--------------------------------
Class: HUD_WorldMarkPanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* MarkPanel;//[Offset: 0x318, Size: 0x8]
	FString OnRegisterPositionMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, out const Vector InPosition);// 0x34e8b2d80041
	FString OnRegisterActorMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, Actor* FollowActor);// 0x34e7b2d80041
	HUD_WorldMarkPanel* GetSelf();// 0x34e6b2d80041

--------------------------------
Class: SolarCharacterAbility.SolarAbility.Actor.Object
	enum[] Conditions;//[Offset: 0x310, Size: 0x10]
	enum TriggerType;//[Offset: 0x320, Size: 0x1]
	float CoolDown;//[Offset: 0x324, Size: 0x4]
	int CharacterId;//[Offset: 0x328, Size: 0x4]
	int Level;//[Offset: 0x32c, Size: 0x4]
	int LevelOutside;//[Offset: 0x330, Size: 0x4]
	SolarCharacterAbilityCondition*[] ConditionInsts;//[Offset: 0x338, Size: 0x10]
	void UpdateParamsFromConfig();// 0x3a1ab2d80041
	void UpdateParam(FString ParamKey, float ParamValue);// 0x3a19b2d80041
	void PrepareConfigData();// 0x3a18b2d80041
	void GiveCharacterAbility(class SolarCharacterAbility AbilityClass, SolarCharacter* SolarCharacter);// 0x3a17b2d80041

--------------------------------
Class: SolarCharacterAbilityCondition.Object

--------------------------------
Class: CharacterGameplayTagsConfig.DataAsset.Object
	GameplayTag CruiseAbilityTag;//[Offset: 0x30, Size: 0x8]
	GameplayTag SkydiveFlyAbilityTag;//[Offset: 0x38, Size: 0x8]
	GameplayTag SkydiveLandAbilityTag;//[Offset: 0x40, Size: 0x8]
	GameplayTag CrouchAbilityTag;//[Offset: 0x48, Size: 0x8]
	GameplayTag JumpAbilityTag;//[Offset: 0x50, Size: 0x8]
	GameplayTag SprintAbilityTag;//[Offset: 0x58, Size: 0x8]
	GameplayTag SwimAbilityTag;//[Offset: 0x60, Size: 0x8]
	GameplayTag VaultAbilityTag;//[Offset: 0x68, Size: 0x8]
	GameplayTag JetFlyVertAbilityTag;//[Offset: 0x70, Size: 0x8]
	GameplayTag JetFlyHoriAbilityTag;//[Offset: 0x78, Size: 0x8]
	GameplayTag LaunchAbilityTag;//[Offset: 0x80, Size: 0x8]
	GameplayTag EquipAbilityTag;//[Offset: 0x88, Size: 0x8]
	GameplayTag MeleeAbilityTag;//[Offset: 0x90, Size: 0x8]
	GameplayTag FireAbilityTag;//[Offset: 0x98, Size: 0x8]
	GameplayTag ReloadAbilityTag;//[Offset: 0xa0, Size: 0x8]
	GameplayTag BoltAbilityTag;//[Offset: 0xa8, Size: 0x8]
	GameplayTag OpenScopeAbilityTag;//[Offset: 0xb0, Size: 0x8]
	GameplayTag GetOnVehicleAbilityTag;//[Offset: 0xb8, Size: 0x8]
	GameplayTag GetOffVehicleAbilityTag;//[Offset: 0xc0, Size: 0x8]
	GameplayTag SwitchVehicleSeatAbilityTag;//[Offset: 0xc8, Size: 0x8]
	GameplayTag StickOutOffVehicleAbilityTag;//[Offset: 0xd0, Size: 0x8]
	GameplayTag TreatAbilityTag;//[Offset: 0xd8, Size: 0x8]
	GameplayTag RechargeShieldAbilityTag;//[Offset: 0xe0, Size: 0x8]
	GameplayTag OpenTreasureBoxAbilityTag;//[Offset: 0xe8, Size: 0x8]
	GameplayTag RepairVehicleAbilityTag;//[Offset: 0xf0, Size: 0x8]
	GameplayTag RescueAbilityTag;//[Offset: 0xf8, Size: 0x8]
	GameplayTag AutoPickUpAbilityTag;//[Offset: 0x100, Size: 0x8]
	GameplayTag DeathVergeAbilityTag;//[Offset: 0x108, Size: 0x8]
	GameplayTag DeathAbilityTag;//[Offset: 0x110, Size: 0x8]
	GameplayTag RebirthAbilityTag;//[Offset: 0x118, Size: 0x8]
	GameplayTag CruisingStatusTag;//[Offset: 0x120, Size: 0x8]
	GameplayTag WalkingStatusTag;//[Offset: 0x128, Size: 0x8]
	GameplayTag FallingStatusTag;//[Offset: 0x130, Size: 0x8]
	GameplayTag FlyingStatusTag;//[Offset: 0x138, Size: 0x8]
	GameplayTag SwimmingStatusTag;//[Offset: 0x140, Size: 0x8]
	GameplayTag SkydivingStatusTag;//[Offset: 0x148, Size: 0x8]
	GameplayTag VaultingStatusTag;//[Offset: 0x150, Size: 0x8]
	GameplayTag VaultingAcceptCancelTag;//[Offset: 0x158, Size: 0x8]
	GameplayTag LaunchStatusTag;//[Offset: 0x160, Size: 0x8]
	GameplayTag SprintingStatusTag;//[Offset: 0x168, Size: 0x8]
	GameplayTag MeleeAttackingStatusTag;//[Offset: 0x170, Size: 0x8]
	GameplayTag FiringStatusTag;//[Offset: 0x178, Size: 0x8]
	GameplayTag HiddenFireStatusTag;//[Offset: 0x180, Size: 0x8]
	GameplayTag BoltingStatusTag;//[Offset: 0x188, Size: 0x8]
	GameplayTag ReloadingStatusTag;//[Offset: 0x190, Size: 0x8]
	GameplayTag ScopeOpeningStatusTag;//[Offset: 0x198, Size: 0x8]
	GameplayTag OpeningTreasureBoxStatusTag;//[Offset: 0x1a0, Size: 0x8]
	GameplayTag RechargingShieldStatusTag;//[Offset: 0x1a8, Size: 0x8]
	GameplayTag RescuingStatusTag;//[Offset: 0x1b0, Size: 0x8]
	GameplayTag TreatingStatusTag;//[Offset: 0x1b8, Size: 0x8]
	GameplayTag DeathVergeStatusTag;//[Offset: 0x1c0, Size: 0x8]
	GameplayTag DeathStatusTag;//[Offset: 0x1c8, Size: 0x8]
	GameplayTag InhibitOpenScopeStatusTag;//[Offset: 0x1d0, Size: 0x8]
	GameplayTag InhibitWeaponInputStatusTag;//[Offset: 0x1d8, Size: 0x8]
	GameplayTag InhibitWeaponFireInputStatusTag;//[Offset: 0x1e0, Size: 0x8]
	GameplayTag InhibitMoveStatusTag;//[Offset: 0x1e8, Size: 0x8]
	GameplayTag InhibitUnCrouchStatusTag;//[Offset: 0x1f0, Size: 0x8]
	GameplayTag InhibitLeftHandWeaponAttachTag;//[Offset: 0x1f8, Size: 0x8]
	GameplayTag StartCruiseEventTag;//[Offset: 0x200, Size: 0x8]
	GameplayTag IntoParachuteZoneEventTag;//[Offset: 0x208, Size: 0x8]
	GameplayTag ForceParachuteEventTag;//[Offset: 0x210, Size: 0x8]
	GameplayTag FinishCruiseEventTag;//[Offset: 0x218, Size: 0x8]
	GameplayTag LaunchEventTag;//[Offset: 0x220, Size: 0x8]
	GameplayTag MeleeAttackEventTag;//[Offset: 0x228, Size: 0x8]
	GameplayTag FireEventTag;//[Offset: 0x230, Size: 0x8]
	GameplayTag BoltEventTag;//[Offset: 0x238, Size: 0x8]
	GameplayTag EquipEventTag;//[Offset: 0x240, Size: 0x8]
	GameplayTag PickUpEventTag;//[Offset: 0x248, Size: 0x8]
	GameplayTag AutoPickUpEventTag;//[Offset: 0x250, Size: 0x8]
	GameplayTag RepairVehicleEventTag;//[Offset: 0x258, Size: 0x8]
	GameplayTag DyingEventTag;//[Offset: 0x260, Size: 0x8]
	GameplayTag GottenOnVehicleEventTag;//[Offset: 0x268, Size: 0x8]
	GameplayTag GottenOffVehicleEventTag;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: SolarCharacterMovementComponent.SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x698, Size: 0x8]
	bool bKeepWalkSpeedOnTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a3, Size: 0x1]
	float MinJogSpeedScaleOnBlocked;//[Offset: 0x6a4, Size: 0x4]
	float MinRunSpeedScaleOnBlocked;//[Offset: 0x6a8, Size: 0x4]
	float MinSprintSpeedScaleOnBlocked;//[Offset: 0x6ac, Size: 0x4]
	float MinCrawlSpeedScaleOnBlocked;//[Offset: 0x6b0, Size: 0x4]
	float MinSwimSpeedScaleOnBlocked;//[Offset: 0x6b4, Size: 0x4]
	bool bOverrideFallingGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	float OverriddenFallingGravity;//[Offset: 0x6bc, Size: 0x4]
	float FallingHorizontalSpeedUpperLimit;//[Offset: 0x6c0, Size: 0x4]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x6c4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x6c8, Size: 0x1]
	float MinTimeToCorrectClientAfterForcedUpdate;//[Offset: 0x6cc, Size: 0x4]
	float MaxTimeToKeepCorrectingClientAfterForcedUpdate;//[Offset: 0x6d0, Size: 0x4]
	enum CurrentAirMoveMode;//[Offset: 0x6ee, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x6ef, Size: 0x1]
	CustomJumpParams CustomJumpParams;//[Offset: 0x6f0, Size: 0xc]
	CustomJumpParams CustomLaunchParams;//[Offset: 0x6fc, Size: 0xc]
	JetPackConfig* JetPackConfig;//[Offset: 0x718, Size: 0x8]
	SkydiveConfig* SkydiveConfig;//[Offset: 0x738, Size: 0x8]
	float HinderAngel;//[Offset: 0x774, Size: 0x4]
	float HinderPercent;//[Offset: 0x778, Size: 0x4]
	float HinderZ;//[Offset: 0x77c, Size: 0x4]
	float SwimSpeedWhenSprintLockConfig;//[Offset: 0x780, Size: 0x4]
	float SwimSpeedConfig;//[Offset: 0x784, Size: 0x4]
	float SwimSpeedSmoothSpeed;//[Offset: 0x788, Size: 0x4]
	float SwimMaxFloatingUpSpeed;//[Offset: 0x78c, Size: 0x4]
	float SwimMaxSinkingSpeed;//[Offset: 0x790, Size: 0x4]
	PhysicsVolume* NextPhysicsVolume;//[Offset: 0x794, Size: 0x8]
	bool bWantDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 0x1]
	float DeathVergeHalfHeight;//[Offset: 0x7a4, Size: 0x4]
	void SetHinderZ(float InHinderZ);// 0x349ab2d80041
	void SetHinderAngel(float InHinderAngel);// 0x3499b2d80041
	void OnMovementBaseChanged(Character* Character, PrimitiveComponent* OldBase, PrimitiveComponent* NewBase);// 0x3498b2d80041
	void HinderUphill(out const Vector SlopeNormal, out Vector MoveVelocity);// 0x3497b2d80041
	byte GetSteppedSurfaceType();// 0x3496b2d80041
	enum GetLastWalkMode();// 0x3495b2d80041
	enum GetCurrentWalkMode();// 0x3494b2d80041

--------------------------------
Class: SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float SimStepOptimizedDist;//[Offset: 0x630, Size: 0x4]
	SolarClientAdjustPositionInfo CachedClientAdjustPositionInfo;//[Offset: 0x650, Size: 0x38]

--------------------------------
Class: SolarClientAdjustPositionInfo
	PrimitiveComponent* NewBase;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CustomJumpParams
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float JumpTime;//[Offset: 0x4, Size: 0x4]
	float JumpDelay;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: JetPackConfig.DataAsset.Object
	float AltitudeLimitation;//[Offset: 0x30, Size: 0x4]
	float DashHeightForLimitedAltitude;//[Offset: 0x34, Size: 0x4]
	float SlantDashInputThreshold;//[Offset: 0x38, Size: 0x4]
	float VerticalDashTime;//[Offset: 0x3c, Size: 0x4]
	float VerticalDashHeight;//[Offset: 0x40, Size: 0x4]
	float VerticalDashAngle;//[Offset: 0x44, Size: 0x4]
	float VerticalDashMaxHorizontalEndSpeed;//[Offset: 0x48, Size: 0x4]
	float VerticalDashBreakableTime;//[Offset: 0x4c, Size: 0x4]
	float VerticalDashCameraFadeOutTime;//[Offset: 0x50, Size: 0x4]
	float SlantDashTime;//[Offset: 0x54, Size: 0x4]
	float SlantDashHeight;//[Offset: 0x58, Size: 0x4]
	float SlantDashAngle;//[Offset: 0x5c, Size: 0x4]
	float SlantDashMaxHorizontalEndSpeed;//[Offset: 0x60, Size: 0x4]
	float SlantDashBreakableTime;//[Offset: 0x64, Size: 0x4]
	float SlantDashCameraFadeOutTime;//[Offset: 0x68, Size: 0x4]
	float HorizontalDashTime;//[Offset: 0x6c, Size: 0x4]
	float HorizontalDashDistance;//[Offset: 0x70, Size: 0x4]
	float HorizontalDashAngle;//[Offset: 0x74, Size: 0x4]
	float HorizontalDashEndSpeed;//[Offset: 0x78, Size: 0x4]
	float HorizontalDashBreakableTime;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashCameraFadeOutTime;//[Offset: 0x80, Size: 0x4]
	float UnderWaterHorizontalDashTime;//[Offset: 0x84, Size: 0x4]
	float UnderWaterHorizontalDashDistance;//[Offset: 0x88, Size: 0x4]
	float UnderWaterHorizontalDashBreakableTime;//[Offset: 0x8c, Size: 0x4]
	float UnderWaterHorizontalDashCameraFadeOutTime;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: SkydiveConfig.DataAsset.Object
	float DefaultFallingSpeed;//[Offset: 0x30, Size: 0x4]
	float MinFallingSpeed;//[Offset: 0x34, Size: 0x4]
	float FallingBrakingDeceleration;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve FlyingForwardPitchMappingCurve;//[Offset: 0x40, Size: 0x88]
	RuntimeFloatCurve MaxFlyingForwardSpeedCurve;//[Offset: 0xc8, Size: 0x88]
	float MaxFlyingSidewardSpeed;//[Offset: 0x150, Size: 0x4]
	float MaxFlyingAcceleration;//[Offset: 0x154, Size: 0x4]
	float MinFlyingBrakingDeceleration;//[Offset: 0x158, Size: 0x4]
	float MaxFlyingBrakingDeceleration;//[Offset: 0x15c, Size: 0x4]
	float FlyingRotationSmoothSpeedYaw;//[Offset: 0x160, Size: 0x4]
	float FlyingRotationSmoothSpeedPitch;//[Offset: 0x164, Size: 0x4]
	float FlyingRotationSmoothSpeedYawOnFollowing;//[Offset: 0x168, Size: 0x4]
	float FlyingRotationSmoothSpeedPitchOnFollowing;//[Offset: 0x16c, Size: 0x4]
	float LandingHeight;//[Offset: 0x170, Size: 0x4]
	float LandingFallingSpeed;//[Offset: 0x174, Size: 0x4]
	float LandingFallingBrakingDeceleration;//[Offset: 0x178, Size: 0x4]
	float LandingMaxFlyingSpeed;//[Offset: 0x17c, Size: 0x4]
	float LandingFlyingAcceleration;//[Offset: 0x180, Size: 0x4]
	FName[] LandingIgnoredActorTags;//[Offset: 0x188, Size: 0x10]
	Vector[] FollowFormation;//[Offset: 0x198, Size: 0x10]
	float SmoothTimeToCatchUpWithLeaderOnBeginning;//[Offset: 0x1a8, Size: 0x4]
	CharacterMovementNetworkOptions NetworkOptions;//[Offset: 0x1ac, Size: 0xc]
	CharacterMovementSimulationOptions SimulationOptions;//[Offset: 0x1b8, Size: 0x10]

--------------------------------
Class: CharacterMovementNetworkOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: CharacterMovementSimulationOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x4, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x8, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CruiseAssetSet.DataAsset.Object
	SoftClassPath CapsuleActorClass;//[Offset: 0x30, Size: 0x18]
	SoftClassPath[] CruiseAbilityClasses;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SolarCapsuleRoot.Actor.Object
	SceneComponent* RootComp;//[Offset: 0x238, Size: 0x8]
	WidgetComponent* LocationSign;//[Offset: 0x240, Size: 0x8]
	MiniMapAirlineData MiniMapData;//[Offset: 0x26c, Size: 0x2c]
	UsingAirlineData CurrentAirline;//[Offset: 0x298, Size: 0x40]
	int ForceParachuteWarningTime;//[Offset: 0x2d8, Size: 0x4]
	float MaxAllowedSmoothDistance;//[Offset: 0x2dc, Size: 0x4]
	float ClientSpeedScale;//[Offset: 0x2e0, Size: 0x4]
	float ClientRotationSmoothSpeed;//[Offset: 0x2e4, Size: 0x4]
	CapsuleFormationData* CapsuleFormationData;//[Offset: 0x318, Size: 0x8]
	<Vector,TeamFormationUnit> CruiseFormation;//[Offset: 0x320, Size: 0x50]
	BoarderInfo[] BoardingPlayerList;//[Offset: 0x370, Size: 0x10]
	void ServerUnBoardCharacter(SolarCharacter* Character);// 0x3a16b2d80041
	void OnRep_MiniMapAirline();// 0x3a15b2d80041
	void OnRep_CurrentAirline();// 0x3a14b2d80041
	SolarCapsuleRoot* GetSolarCapsuleRoot(const Object* WorldContextObject);// 0x3a13b2d80041
	float GetCruiseProgress();// 0x3a12b2d80041
	void ClientSmoothMove(float DeltaTime);// 0x3a11b2d80041
	int BoardingCharacter(out const BoarderInfo BoarderInfo);// 0x3a10b2d80041

--------------------------------
Class: BoarderInfo
	SolarCharacter* Boarder;//[Offset: 0x0, Size: 0x8]
	int BoarderTeamID;//[Offset: 0x8, Size: 0x4]
	int BoarderTeamSize;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UsingAirlineData
	int MapID;//[Offset: 0x0, Size: 0x4]
	Vector StartPoint;//[Offset: 0x4, Size: 0xc]
	Vector EndPoint;//[Offset: 0x10, Size: 0xc]
	Vector2D Direction;//[Offset: 0x1c, Size: 0x8]
	float Speed;//[Offset: 0x24, Size: 0x4]
	Vector CanParachutePoint;//[Offset: 0x28, Size: 0xc]
	Vector ForceParachutePoint;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CapsuleFormationData.DataAsset.Object
	<byte,EchelonFormation> TeamFormation;//[Offset: 0x30, Size: 0x50]
	CruiseFormation CruiseFormation;//[Offset: 0x80, Size: 0x10]
	void OverrideTeamFormation(out const <byte,EchelonFormation> InNewFormation);// 0x3361b2d80041
	void ClearTeamFormationData();// 0x3360b2d80041
	void ClearCruiseFormationData();// 0x335fb2d80041
	void AddTeamFormationLocation(const byte InEchelon, out const Vector InLocation);// 0x335eb2d80041
	void AddLocationToTeamFormation(out <byte,EchelonFormation> InFormation, const byte InEchelon, out const Vector InLocation);// 0x335db2d80041
	void AddEchelonFormation(const byte InEchelon, out const EchelonFormation InFormation);// 0x335cb2d80041
	void AddCruiseFormation(out const CruiseFormation InFormation);// 0x335bb2d80041

--------------------------------
Class: EchelonFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CruiseFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TeamFormationUnit
	<byte,EchelonFormationUnit> TeamFormation;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: EchelonFormationUnit
	BoardingSpotInfo[] EchelonFormation;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BoardingSpotInfo
	Vector SpotLocation;//[Offset: 0x0, Size: 0xc]
	SolarPlayerState* BoardingPlayer;//[Offset: 0x10, Size: 0x8]
	SolarPlayerState* LeaderPlayer;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CharacterCruiseComponent.ActorComponent.Object
	SolarCapsuleActor* BoardedCapsulePrivate;//[Offset: 0xb8, Size: 0x8]
	SolarCharacter* GetCharacterOwner();// 0x3403b2d80041

--------------------------------
Class: SolarCapsuleActor.Actor.Object
	SoftObjectPath StartCruisingPath;//[Offset: 0x230, Size: 0x18]
	SoftObjectPath StopCruisingPath;//[Offset: 0x248, Size: 0x18]
	FName CruiseCharacterBindingName;//[Offset: 0x260, Size: 0x8]
	FName CruiseCapsuleBindingName;//[Offset: 0x268, Size: 0x8]
	FName CruiseCameraBindingName;//[Offset: 0x270, Size: 0x8]
	float SequenceCameraBlendDuration;//[Offset: 0x278, Size: 0x4]
	AnimationAsset* CapsuleCruisingLoopAnim;//[Offset: 0x280, Size: 0x8]
	AnimSequence* CharacterCruiseLoopAnim;//[Offset: 0x288, Size: 0x8]
	SoftObjectPath CapsuleCruisingStopAnimPath;//[Offset: 0x290, Size: 0x18]
	AnimSequence* CharacterCruiseEndAnim;//[Offset: 0x2a8, Size: 0x8]
	SkeletalMeshComponent* CapsuleSkeletalMesh;//[Offset: 0x2b0, Size: 0x8]
	StaticMeshComponent*[] AirflowMeshEffects;//[Offset: 0x2b8, Size: 0x10]
	ParticleSystemComponent*[] AirflowParticleEffects;//[Offset: 0x2c8, Size: 0x10]
	LevelSequenceActor* SequenceActor;//[Offset: 0x2d8, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x2e0, Size: 0x8]
	LevelSequence* StartCruisingSequence;//[Offset: 0x2e8, Size: 0x8]
	LevelSequence* StopCruisingSequence;//[Offset: 0x2f0, Size: 0x8]
	AnimationAsset* CapsuleCruisingEndAnim;//[Offset: 0x2f8, Size: 0x8]
	SolarCharacter* BoardedCharacterPrivate;//[Offset: 0x300, Size: 0x8]
	ParticleSystemComponent* CloudParticleComponent;//[Offset: 0x308, Size: 0x8]
	SoftObjectPath CloudParticlePath;//[Offset: 0x310, Size: 0x18]
	ParticleSystem* CloudParticleAsset;//[Offset: 0x348, Size: 0x8]
	void StopCruiseSequenceFinished();// 0x3a0fb2d80041
	void StartCruiseSequenceFinished();// 0x3a0eb2d80041
	void PlayStopCruiseSequence();// 0x3a0db2d80041
	void PlayStopCruiseAnimation();// 0x3a0cb2d80041
	void PlayStartCruiseSequence();// 0x3a0bb2d80041
	void PlayCruiseLoopAnimation();// 0x3a0ab2d80041
	void HideCapsuleAirflowVFX();// 0x3a09b2d80041
	SolarCapsuleActor* CreateCapsuleActorForBoarder(SolarCharacter* InBoarder, class SolarCapsuleActor CapsuleActorClass);// 0x3a08b2d80041

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x240, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x258, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x260, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x278, Size: 0x10]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x288, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x290, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x298, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a0, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a0, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2a8, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2b0, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	void ShowBurnin();// 0x291fb2d80041
	void SetSequence(LevelSequence* InSequence);// 0x291eb2d80041
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x291db2d80041
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x291cb2d80041
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x291bb2d80041
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x291ab2d80041
	void ResetBindings();// 0x2919b2d80041
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x2918b2d80041
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x2917b2d80041
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x2916b2d80041
	void OnLevelSequenceLoaded__DelegateSignature();// 0x2915b2d80041
	LevelSequence* LoadSequence();// 0x2914b2d80041
	void HideBurnin();// 0x2913b2d80041
	LevelSequencePlayer* GetSequencePlayer();// 0x2912b2d80041
	LevelSequence* GetSequence();// 0x2911b2d80041
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x2910b2d80041
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x290fb2d80041
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x290eb2d80041
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x290db2d80041

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x888, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x4c7cb2d80041
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x4c7bb2d80041

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x408, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x418, Size: 0x10]
	delegate OnStop;//[Offset: 0x428, Size: 0x10]
	delegate OnPause;//[Offset: 0x438, Size: 0x10]
	delegate OnFinished;//[Offset: 0x448, Size: 0x10]
	byte Status;//[Offset: 0x458, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x468, Size: 0x4]
	int DurationFrames;//[Offset: 0x46c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x470, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 0x320]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 0x10]
	void StopAtCurrentTime();// 0x30b4b2d80041
	void Stop();// 0x30b3b2d80041
	void SetTimeRange(float StartTime, float Duration);// 0x30b2b2d80041
	void SetPlayRate(float PlayRate);// 0x30b1b2d80041
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x30b0b2d80041
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x30afb2d80041
	void SetFrameRate(FrameRate FrameRate);// 0x30aeb2d80041
	void SetFrameRange(int StartFrame, int Duration);// 0x30adb2d80041
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x30acb2d80041
	void ScrubToSeconds(float TimeInSeconds);// 0x30abb2d80041
	bool ScrubToMarkedFrame(FString InLabel);// 0x30aab2d80041
	void ScrubToFrame(FrameTime NewPosition);// 0x30a9b2d80041
	void Scrub();// 0x30a8b2d80041
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x30a7b2d80041
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x30a6b2d80041
	void PlayToSeconds(float TimeInSeconds);// 0x30a5b2d80041
	bool PlayToMarkedFrame(FString InLabel);// 0x30a4b2d80041
	void PlayToFrame(FrameTime NewPosition);// 0x30a3b2d80041
	void PlayReverse();// 0x30a2b2d80041
	void PlayLooping(int NumLoops);// 0x30a1b2d80041
	void Play();// 0x30a0b2d80041
	void Pause();// 0x309fb2d80041
	void JumpToSeconds(float TimeInSeconds);// 0x309eb2d80041
	void JumpToPosition(float NewPlaybackPosition);// 0x309db2d80041
	bool JumpToMarkedFrame(FString InLabel);// 0x309cb2d80041
	void JumpToFrame(FrameTime NewPosition);// 0x309bb2d80041
	bool IsReversed();// 0x309ab2d80041
	bool IsPlaying();// 0x3099b2d80041
	bool IsPaused();// 0x3098b2d80041
	void GoToEndAndStop();// 0x3097b2d80041
	QualifiedFrameTime GetStartTime();// 0x3096b2d80041
	float GetPlayRate();// 0x3095b2d80041
	float GetPlaybackStart();// 0x3094b2d80041
	float GetPlaybackPosition();// 0x3093b2d80041
	float GetPlaybackEnd();// 0x3092b2d80041
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x3091b2d80041
	float GetLength();// 0x3090b2d80041
	FrameRate GetFrameRate();// 0x308fb2d80041
	int GetFrameDuration();// 0x308eb2d80041
	QualifiedFrameTime GetEndTime();// 0x308db2d80041
	QualifiedFrameTime GetDuration();// 0x308cb2d80041
	bool GetDisableCameraCuts();// 0x308bb2d80041
	QualifiedFrameTime GetCurrentTime();// 0x308ab2d80041
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x3089b2d80041
	void ChangePlaybackDirection();// 0x3088b2d80041

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x4c76b2d80041
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x4c75b2d80041
	Object* FindMetaDataByClass(class Object InClass);// 0x4c74b2d80041
	Object* CopyMetaData(Object* InMetaData);// 0x4c73b2d80041

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x4c77b2d80041

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x250, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x308, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x4c79b2d80041
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x4c78b2d80041

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7d0, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x4b3db2d80041

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x880, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x88c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x898, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x8b0, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x908, Size: 0x4]
	float CurrentAperture;//[Offset: 0x90c, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x910, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x920, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x930, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x940, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0x950, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0x960, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0x970, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x974, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x4b46b2d80041
	void SetFilmbackPresetByName(FString InPresetName);// 0x4b45b2d80041
	void SetCurrentFocalLength(out const float InFocalLength);// 0x4b44b2d80041
	float GetVerticalFieldOfView();// 0x4b43b2d80041
	NamedLensPreset[] GetLensPresetsCopy();// 0x4b42b2d80041
	FString GetLensPresetName();// 0x4b41b2d80041
	float GetHorizontalFieldOfView();// 0x4b40b2d80041
	FString GetFilmbackPresetName();// 0x4b3fb2d80041
	FString GetDefaultFilmbackPresetName();// 0x4b3eb2d80041

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: SkydivingEffectPreset
	ParticleSystem* EffectResource;//[Offset: 0x0, Size: 0x28]
	Transform AttachmentOffset;//[Offset: 0x30, Size: 0x30]
	FName AttachmentSocket;//[Offset: 0x60, Size: 0x8]
	enum Lifetime;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x230, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	void OnRep_bEnabled();// 0x4dd9b2d80041

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableFarlightMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	SLDistanceFogData DistanceFogData_M;//[Offset: 0x298, Size: 0x18]
	SLHeightFogData HeightFogData_M;//[Offset: 0x2b0, Size: 0x10]
	SLDirectionalLightScattering ScatteringData_M;//[Offset: 0x2c0, Size: 0x20]
	LinearColor FogColor_M;//[Offset: 0x2e0, Size: 0x10]
	float FogDensity;//[Offset: 0x2f0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x2f4, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x2f8, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x304, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x318, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x320, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x324, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x334, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x338, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x33c, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x340, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x344, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x354, Size: 0x4]
	float StartDistance;//[Offset: 0x358, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x35c, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x364, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x368, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x36c, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x37c, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x380, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x384, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x4e00b2d80041
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x4dffb2d80041
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x4dfeb2d80041
	void SetVolumetricFogDistance(float NewValue);// 0x4dfdb2d80041
	void SetVolumetricFogAlbedo(Color NewValue);// 0x4dfcb2d80041
	void SetVolumetricFog(bool bNewValue);// 0x4dfbb2d80041
	void SetStartDistance(float Value);// 0x4dfab2d80041
	void SetSecondFogData_FogHeightOffset(float Value);// 0x4df9b2d80041
	void SetSecondFogData_FogHeightFalloff(float Value);// 0x4df8b2d80041
	void SetSecondFogData_FogDensity(float Value);// 0x4df7b2d80041
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x4df6b2d80041
	void SetInscatteringTextureTint(LinearColor Value);// 0x4df5b2d80041
	void SetInscatteringColorCubemapAngle(float Value);// 0x4df4b2d80041
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x4df3b2d80041
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x4df2b2d80041
	void SetFogMaxOpacity(float Value);// 0x4df1b2d80041
	void SetFogInscatteringColor(LinearColor Value);// 0x4df0b2d80041
	void SetFogHeightFalloff(float Value);// 0x4defb2d80041
	void SetFogDensity(float Value);// 0x4deeb2d80041
	void SetFogCutoffDistance(float Value);// 0x4dedb2d80041
	void SetDirectionalInscatteringStartDistance(float Value);// 0x4decb2d80041
	void SetDirectionalInscatteringExponent(float Value);// 0x4debb2d80041
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x4deab2d80041
	void Set_HStartDistance(float _HStartDistance);// 0x4de9b2d80041
	void Set_HMaxFadingDistance(float _HMaxFadingDistance);// 0x4de8b2d80041
	void Set_HFogHeight(float _HFogHeight);// 0x4de7b2d80041
	void Set_HFogFallOff(float _HFogFallOff);// 0x4de6b2d80041
	void Set_FogColor_M(LinearColor _FogColor_M);// 0x4de5b2d80041
	void Set_DStartDistance(float _DStartDistance);// 0x4de4b2d80041
	void Set_DMaxOpacity(float _DMaxOpacity);// 0x4de3b2d80041
	void Set_DMaxDistance(float _DMaxDistance);// 0x4de2b2d80041
	void Set_DirectionalInscatteringStartDistance_M(float _DirectionalInscatteringStartDistance_M);// 0x4de1b2d80041
	void Set_DirectionalInscatteringMaxDistance_M(float _DirectionalInscatteringMaxDistance_M);// 0x4de0b2d80041
	void Set_DirectionalInscatteringGamma_M(float _DirectionalInscatteringGamma_M);// 0x4ddfb2d80041
	void Set_DirectionalInscatteringExponent_M(float _DirectionalInscatteringExponent_M);// 0x4ddeb2d80041
	void Set_DirectionalInscatteringColor_M(LinearColor _DirectionalInscatteringColor_M);// 0x4dddb2d80041
	void Set_DFogHeight(float _DFogHeight);// 0x4ddcb2d80041
	void Set_DFogGamma(float _DFogGamma);// 0x4ddbb2d80041
	void Set_DFogFallOff(float _DFogFallOff);// 0x4ddab2d80041

--------------------------------
Class: SLDistanceFogData
	float DFogHeight;//[Offset: 0x0, Size: 0x4]
	float DFogFallOff;//[Offset: 0x4, Size: 0x4]
	float DMaxDistance;//[Offset: 0x8, Size: 0x4]
	float DFogGamma;//[Offset: 0xc, Size: 0x4]
	float DMaxOpacity;//[Offset: 0x10, Size: 0x4]
	float DStartDistance;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SLHeightFogData
	float HFogHeight;//[Offset: 0x0, Size: 0x4]
	float HFogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float HStartDistance;//[Offset: 0x8, Size: 0x4]
	float HMaxFadingDistance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SLDirectionalLightScattering
	float DirectionalInscatteringExponent_M;//[Offset: 0x0, Size: 0x4]
	float DirectionalInscatteringStartDistance_M;//[Offset: 0x4, Size: 0x4]
	float DirectionalInscatteringMaxDistance_M;//[Offset: 0x8, Size: 0x4]
	LinearColor DirectionalInscatteringColor_M;//[Offset: 0xc, Size: 0x10]
	float DirectionalInscatteringGamma_M;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarPointDamageEvent.PointDamageEvent.DamageEvent
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bIgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float ActualShieldDamage;//[Offset: 0xac, Size: 0x4]
	bool bBreakArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIgnoreArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float ActualArmorDamage;//[Offset: 0xb4, Size: 0x4]
	byte SolarAttributeType;//[Offset: 0xb8, Size: 0x1]
	bool bPreFakeInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	byte HealthChangeType;//[Offset: 0xba, Size: 0x1]
	SolarAbility* DamageAbility;//[Offset: 0xc0, Size: 0x8]
	SolarAbilityEffect* DamageAbilityEffect;//[Offset: 0xc8, Size: 0x8]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCanDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	int UseWeaponID;//[Offset: 0xd4, Size: 0x4]
	enum DamageType;//[Offset: 0xd8, Size: 0x1]
	Actor* DamageCauser;//[Offset: 0xdc, Size: 0x8]
	FString HitBoneName;//[Offset: 0xf0, Size: 0x10]
	bool bHitVehicleWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bHitHumanoidTargetHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	enum BattleState;//[Offset: 0x7a0, Size: 0x1]
	enum PlayerOutType;//[Offset: 0x7a1, Size: 0x1]
	enum PlayerType;//[Offset: 0x7a2, Size: 0x1]
	SCMReplicateHostData[] ReplicateData;//[Offset: 0x7b8, Size: 0x10]
	void UpDateDataManager(const SCMReplicateHostData[] ReplicateData, bool bInit);// 0x36afb2d80041
	void ServerBeginSpectate(SCMPlayerState* TargetPlayer);// 0x36aeb2d80041
	void OnRep_BattleState();// 0x36adb2d80041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x36acb2d80041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x36abb2d80041
	void NotifyUpdateCGMData(FString InDataName);// 0x36aab2d80041
	void NotifyClientUpdateDataManager(bool bInit);// 0x36a9b2d80041
	bool NeedConsiderRepData();// 0x36a8b2d80041
	SCMReplicateHostData[] GetReplicateDataArray();// 0x36a7b2d80041
	SCMPlayerState*[] GetMySidePlayerList();// 0x36a6b2d80041
	SCMPlayerState*[] GetMySideJobPlayerList();// 0x36a5b2d80041

--------------------------------
Class: SCMReplicateHostData
	enum HostType;//[Offset: 0x0, Size: 0x1]
	FString HostID;//[Offset: 0x8, Size: 0x10]
	SCMRepData[] RepDataArray;//[Offset: 0x18, Size: 0x10]
	SCMRepDataArray[] RepArrDataArray;//[Offset: 0x28, Size: 0x10]
	SCMRepDataMap[] RepMapDataArray;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SCMRepData
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum DataChangeType;//[Offset: 0x11, Size: 0x1]
	int VInt;//[Offset: 0x14, Size: 0x4]
	float VFloat;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantize100 VVector;//[Offset: 0x1c, Size: 0xc]
	FString VString;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SCMRepDataArray
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SCMRepDataMap
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	FString[] KeyArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SolarVehiclePawn.Pawn.Actor.Object
	PrimitiveComponent* VehicleRoot;//[Offset: 0x2b8, Size: 0x8]
	SkeletalMeshComponentBudgeted* VehicleMesh;//[Offset: 0x2c0, Size: 0x8]
	bool bVehicleMeshAggregationTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	class SkeletalMeshComponentBudgeted* VehicleStencilClass;//[Offset: 0x2d0, Size: 0x28]
	SkeletalMeshComponentBudgeted* VehicleStencilNew;//[Offset: 0x2f8, Size: 0x8]
	SolarNetMovementComponent* NetMovementComponent;//[Offset: 0x300, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x308, Size: 0x8]
	SolarVehicleAbilitySystemComponent* VehicleAbilitySystem;//[Offset: 0x310, Size: 0x8]
	SolarVehicleSpringArmComponent* SpringArmComponent;//[Offset: 0x318, Size: 0x8]
	SolarVehicleCameraComponent* CameraComponent;//[Offset: 0x320, Size: 0x8]
	SolarVehicleAttributeSet* VehicleAttributeSet;//[Offset: 0x328, Size: 0x8]
	BasedMovement BasedMovement;//[Offset: 0x330, Size: 0x28]
	VehicleSeatSlot[] SeatSlots;//[Offset: 0x358, Size: 0x10]
	int HealthUIID;//[Offset: 0x368, Size: 0x4]
	float VehicleInteractionRadius;//[Offset: 0x36c, Size: 0x4]
	Vector OutVehicleOffset;//[Offset: 0x370, Size: 0xc]
	float WaterDraftDepth;//[Offset: 0x37c, Size: 0x4]
	float CarpadProtectTime;//[Offset: 0x380, Size: 0x4]
	float CarPadAccelerationMultiplier;//[Offset: 0x384, Size: 0x4]
	Vector2D[] DropPassengerOffset;//[Offset: 0x388, Size: 0x10]
	float BottomHeighten;//[Offset: 0x398, Size: 0x4]
	Vector[] DropPassengerLocations;//[Offset: 0x3a0, Size: 0x10]
	Vector DropPassengerAtTop;//[Offset: 0x3b0, Size: 0xc]
	Vector DamageBoxLocation;//[Offset: 0x3bc, Size: 0xc]
	Vector DamageBoxExtent;//[Offset: 0x3c8, Size: 0xc]
	float VehicleMaxSpeedOnUI;//[Offset: 0x3d4, Size: 0x4]
	enum VehicleControlUIType;//[Offset: 0x3d8, Size: 0x1]
	enum VehicleAnimationType;//[Offset: 0x3d9, Size: 0x1]
	VehicleVFX NosCameraVFX;//[Offset: 0x3e0, Size: 0x90]
	float NOSCameraEffectAngle;//[Offset: 0x470, Size: 0x4]
	<byte,ParticleSystem*> RaiseDustEffects;//[Offset: 0x478, Size: 0x50]
	VehicleVFX[] NosVFXes;//[Offset: 0x4c8, Size: 0x10]
	float SpeedThresholdForCollidingDamage;//[Offset: 0x4d8, Size: 0x4]
	float SpeedThresholdForStandingOn;//[Offset: 0x4dc, Size: 0x4]
	float SpeedThresholdForGetOnVehicle;//[Offset: 0x4e0, Size: 0x4]
	ParticleSystem* EnterWaterVFX;//[Offset: 0x4e8, Size: 0x28]
	float SprayVelocity;//[Offset: 0x588, Size: 0x4]
	float HeavyInSpeed;//[Offset: 0x58c, Size: 0x4]
	float CriticalAngle;//[Offset: 0x590, Size: 0x4]
	Vector OffsetBasedVechileLoction;//[Offset: 0x594, Size: 0xc]
	float CollisionSparkThreshold;//[Offset: 0x5a0, Size: 0x4]
	ParticleSystem* CollisionSparkParticle;//[Offset: 0x5a8, Size: 0x28]
	FName CollisionSparkParamNowel;//[Offset: 0x5d0, Size: 0x8]
	FName CollisionSparkParamQuantity;//[Offset: 0x5d8, Size: 0x8]
	float VehicleSpeedThresholdToPlayVFX;//[Offset: 0x5e0, Size: 0x4]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel;//[Offset: 0x5e8, Size: 0x88]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity;//[Offset: 0x670, Size: 0x88]
	VehicleVFX SpeedParticle;//[Offset: 0x700, Size: 0x90]
	VehicleVFXMesh[] DriverOnVFXMeshes;//[Offset: 0x790, Size: 0x10]
	Vector SpawnOffset;//[Offset: 0x7a0, Size: 0xc]
	SeatCameraSetting DefaultCameraSetting;//[Offset: 0x7ac, Size: 0x30]
	RuntimeFloatCurve CameraFovCurve;//[Offset: 0x7e0, Size: 0x88]
	float CameraFovInterpSpeed;//[Offset: 0x868, Size: 0x4]
	RuntimeFloatCurve CameraDistanceMultiplierCurve;//[Offset: 0x870, Size: 0x88]
	float CameraDistanceInterpSpeed;//[Offset: 0x8f8, Size: 0x4]
	bool bCameraFollowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 0x1]
	RuntimeFloatCurve CameraFollowSpeedCurve;//[Offset: 0x900, Size: 0x88]
	float CameraFollowTimeThreshold;//[Offset: 0x988, Size: 0x4]
	float CamearResetFollowSpeed;//[Offset: 0x98c, Size: 0x4]
	float CameraFollowSpeedThreshold;//[Offset: 0x990, Size: 0x4]
	RuntimeFloatCurve CameraZLagSpeedCurve;//[Offset: 0x998, Size: 0x88]
	float CameraZLagMaxDistance;//[Offset: 0xa20, Size: 0x4]
	bool bResetTargetPitchOffsetBasedOnVehicleOnCameralNormalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	float MaxSpeedDecelerationRate;//[Offset: 0xa28, Size: 0x4]
	<enum,SolarVehicleLampData> MapVehicleLampData;//[Offset: 0xa30, Size: 0x50]
	SolarVehicleSoundDataAsset* VehicleSoundDataAsset;//[Offset: 0xa80, Size: 0x8]
	class GameplayEffect* DefaultAttributes;//[Offset: 0xa88, Size: 0x8]
	class GameplayEffect* CanDriveEffect;//[Offset: 0xa90, Size: 0x8]
	class GameplayEffect* CanGetOnEffect;//[Offset: 0xa98, Size: 0x8]
	class GameplayEffect* UnderWaterEffect;//[Offset: 0xaa0, Size: 0x8]
	class SolarAbility* ExplosionAbilityClass;//[Offset: 0xaa8, Size: 0x8]
	VehicleVFX ExplosionVFX;//[Offset: 0xab0, Size: 0x90]
	VehicleVFXMesh VehicleBrokenMesh;//[Offset: 0xb40, Size: 0x70]
	VehicleVFX VehicleDamagedVFXs;//[Offset: 0xbb0, Size: 0x90]
	class GameplayEffect* VehicleDamageStatusEffects;//[Offset: 0xe80, Size: 0x8]
	int MaxLodLevelForUpdateVisual;//[Offset: 0xea8, Size: 0x4]
	VehicleWeakPointSpec[] VehicleWeakPointContainer;//[Offset: 0xeb0, Size: 0x10]
	PrimitiveComponent* PlatformComponent;//[Offset: 0xec0, Size: 0x8]
	bool bCanStandOnPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 0x1]
	float DistanceThresholdForAttachPlatform;//[Offset: 0xecc, Size: 0x4]
	float DegreeThresholdForAttachPlatform;//[Offset: 0xed0, Size: 0x4]
	class SolarAbility* CollideDamageAbility;//[Offset: 0xed8, Size: 0x8]
	bool bHitDamageToSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 0x1]
	float SelfCrashDamageRate;//[Offset: 0xee4, Size: 0x4]
	float PassengerDamageRatio;//[Offset: 0xee8, Size: 0x4]
	float MinPlayerDamageVelocity;//[Offset: 0xeec, Size: 0x4]
	float CollidedCharacterDmgRatio;//[Offset: 0xef0, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0xef4, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0xef8, Size: 0x8]
	float CollidePushUpAngle;//[Offset: 0xf00, Size: 0x4]
	float CharacterProtectTime;//[Offset: 0xf04, Size: 0x4]
	bool bRemoveStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf14, Size: 0x1]
	Vector_NetQuantize RepLocation;//[Offset: 0xf18, Size: 0xc]
	SphereComponent* VehicleInteractionZone;//[Offset: 0xf28, Size: 0x8]
	float WaterLineHeight;//[Offset: 0xf34, Size: 0x4]
	CarPadSpeedData[] CarPadSpeedsDatas;//[Offset: 0xf38, Size: 0x10]
	int MovementForbidPreSpeed;//[Offset: 0xf48, Size: 0x4]
	bool IsLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 0x1]
	delegate OnPlayerGetOnVehicle;//[Offset: 0xf80, Size: 0x1]
	delegate OnPlayerGetOffVehicle;//[Offset: 0xf81, Size: 0x1]
	int[] OccupiedSeats;//[Offset: 0x1090, Size: 0x10]
	Vector_NetQuantizeNormal ReplicatedPlayerInputVector;//[Offset: 0x10a0, Size: 0xc]
	int VehicleID;//[Offset: 0x10ac, Size: 0x4]
	Actor*[] ActorsOnPlatform;//[Offset: 0x1148, Size: 0x10]
	byte CurPlayerInputMask;//[Offset: 0x1179, Size: 0x1]
	byte ReplicatedPlayerInputMask;//[Offset: 0x117a, Size: 0x1]
	int SkinId;//[Offset: 0x1208, Size: 0x4]
	AbilityCooldownTimer[] ActivedAbilityCooldownArray;//[Offset: 0x1220, Size: 0x10]
	byte CurrentDamageStatus;//[Offset: 0x1230, Size: 0x1]
	bool bVehicleBurningStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1231, Size: 0x1]
	void WeakPointStateChanged(byte WeakPointID);// 0x399ab2d80041
	void StatVehicleCollision(Vector PreVelocity, Vector CurVelocity);// 0x3999b2d80041
	void StatVehicleAutoMove(int MoveTime);// 0x3998b2d80041
	void SetWeakPointHealth(byte WeakPointID, float InHealth);// 0x3997b2d80041
	void SetVehicleId(int InID);// 0x3996b2d80041
	void SetPlayerInputVector(bool bFreeLook, out const Vector2D InputVector, float CameraYaw);// 0x3995b2d80041
	void SetCurrentHealth(float InHealth);// 0x3994b2d80041
	void SetCrossCarpad(Actor* InCarpad);// 0x3993b2d80041
	void SetAllWeakPointToNewState(enum NewWeakPointState);// 0x3992b2d80041
	void ServerSetPlayerInputVector(const Vector_NetQuantizeNormal InputVector);// 0x3991b2d80041
	void ServerSetPlayerInputMask(byte InCurPlayerInputMask);// 0x3990b2d80041
	void ServerSendsTransformToEveryoneWithMovementBase(const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x398fb2d80041
	void ServerSendsTransformToEveryone(const byte[] Value);// 0x398eb2d80041
	void ServerSendsTeleportStateToEveryone(const Vector_NetQuantize InLocation, const Vector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp);// 0x398db2d80041
	void ServerDrawActorLocationAndRotationOnClient(const Vector InLocation, const Rotator InRotator);// 0x398cb2d80041
	void ServerApplyVehicleSkin(int InSkinID);// 0x398bb2d80041
	void ServerApplyDamageToVehilceAndPassenger(Actor* OtherActor, float DamageToSelf, float DamageToOther, const Vector HitLocation);// 0x398ab2d80041
	void ServerApplyAbilityDamageToTargets(const Pawn*[] Targets, GameplayAbilitySpecHandle AbilityHandle);// 0x3989b2d80041
	void RemoveSeatSlot(byte SeatIndex);// 0x3988b2d80041
	void ReleaseDamagedStatusVFX(byte InDamagedStatus);// 0x3987b2d80041
	void PlayVehicleEjectSound(SolarCharacter* ejectedCharacter);// 0x3986b2d80041
	void PlaySpeedboardSound();// 0x3985b2d80041
	void PlayDamagedStatusVFX(byte InDamagedStatus);// 0x3984b2d80041
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3983b2d80041
	void OnStencilLoaded();// 0x3982b2d80041
	void OnRep_WeakPointHealthOrStateChanged(VehicleWeakPointSpec[] OldVehicleWeakPointDatas);// 0x3981b2d80041
	void OnRep_WaterLineHeight();// 0x3980b2d80041
	void OnRep_VehicleBurning();// 0x397fb2d80041
	void OnRep_SkinId();// 0x397eb2d80041
	void OnRep_ReplicatedPlayerInputMask(byte OldReplicatedPlayerInputMask);// 0x397db2d80041
	void OnRep_RemoveStencil();// 0x397cb2d80041
	bool IsVehicleFullHealth();// 0x397bb2d80041
	bool IsVehicleDangerous();// 0x397ab2d80041
	bool IsVehicleBroken();// 0x3979b2d80041
	bool IsTeammateWith(const Pawn* Pawn);// 0x3978b2d80041
	bool IsManuallyCancelAbilityActive(byte SeatIndex);// 0x3977b2d80041
	bool IsExistEnemy(const SolarCharacter* Character);// 0x3976b2d80041
	bool IsAbilityActive(byte SeatIndex, byte AbilityIndex);// 0x3975b2d80041
	bool InSameTeam();// 0x3974b2d80041
	bool HasAbilityActive(byte SeatIndex);// 0x3973b2d80041
	VehicleWeakPointSpec[] GetVehicleWeakPoints();// 0x3972b2d80041
	int GetVehicleTypeID();// 0x3971b2d80041
	byte GetVehicleTeamId();// 0x3970b2d80041
	PhysicalMaterial* GetVehicleRootPhysMaterial();// 0x396fb2d80041
	int GetVehicleGroupID();// 0x396eb2d80041
	SolarVehicleAnimInstance* GetVehicleAnimInstance();// 0x396db2d80041
	float GetSpeedInKmh();// 0x396cb2d80041
	float GetSpeed();// 0x396bb2d80041
	Vector GetSpawnOffset();// 0x396ab2d80041
	Vector2D GetPlayerInputVector();// 0x3969b2d80041
	int GetPassengerCount();// 0x3968b2d80041
	int GetNextVacantSeat(int InCurrentSeatIndex);// 0x3967b2d80041
	float GetMaxHealth();// 0x3966b2d80041
	int GetManuallyCancelAbilityIndex(byte SeatIndex);// 0x3965b2d80041
	int GetHealthPercentInt();// 0x3964b2d80041
	SolarCharacter* GetDriverCharacter();// 0x3963b2d80041
	float GetCurrentHealth();// 0x3962b2d80041
	float GetAbilityCostEnergy(byte SeatIndex, byte AbilityIndex);// 0x3961b2d80041
	bool DoesAbilitySatisfyTagRequirements(int CurSeatIndex, byte AbilityIndex);// 0x3960b2d80041
	void DeleteStencilMesh();// 0x395fb2d80041
	void ClientVehicleExplosion();// 0x395eb2d80041
	void ClientVehicleBroken();// 0x395db2d80041
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x395cb2d80041
	void ClientSendsTransformToServer(float DriverLocalTime, const byte[] Value);// 0x395bb2d80041
	bool CheckUpdateVisual();// 0x395ab2d80041
	bool CheckOpenParticleOptimization(int Bias);// 0x3959b2d80041
	bool CanActivateAbility(byte SeatIndex, byte AbilityIndex);// 0x3958b2d80041
	void ApplySkinFromCDO(SolarVehiclePawn* SkinVehiclePawnCDO);// 0x3957b2d80041
	byte AddSeatSlot(out const VehicleSeatSlot SeatSlot);// 0x3956b2d80041

--------------------------------
Class: VehicleWeakPointSpec
	float CurrentHealth;//[Offset: 0x0, Size: 0x4]
	enum CurrentState;//[Offset: 0x4, Size: 0x1]
	byte WeakPointID;//[Offset: 0x5, Size: 0x1]
	enum LastState;//[Offset: 0x6, Size: 0x1]
	FName[] WeakPointSockets;//[Offset: 0x8, Size: 0x10]
	StaticMesh* WeakPointStaticMesh;//[Offset: 0x18, Size: 0x28]
	Transform WeakPointRelativeTransform;//[Offset: 0x40, Size: 0x30]
	SolarVehicleWeakPointComponent* WeakPointMeshComponent;//[Offset: 0x70, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x78, Size: 0x8]
	float MaxWeakPointHealth;//[Offset: 0x80, Size: 0x4]
	float RepairCostEnergy;//[Offset: 0x84, Size: 0x4]
	float RepairDuration;//[Offset: 0x88, Size: 0x4]
	bool bRecoverBoneScaleAfterVFXFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	class GameplayEffect* BrokenEffect;//[Offset: 0xd0, Size: 0x8]
	float FacingAngle;//[Offset: 0xe0, Size: 0x4]
	float DistFromCharacterToWeakPoint;//[Offset: 0xe4, Size: 0x4]

--------------------------------
Class: SolarVehicleWeakPointComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SolarVehicleAnimInstance.AnimInstance.Object
	Rotator VehicleRudderRotator;//[Offset: 0x268, Size: 0xc]
	Vector2D VehicleAnimationPosition;//[Offset: 0x274, Size: 0x8]
	float VehicleAnimationSize;//[Offset: 0x27c, Size: 0x4]
	float VehicleRotationValue;//[Offset: 0x280, Size: 0x4]
	float VehicleRotationPercent;//[Offset: 0x284, Size: 0x4]
	float VehicleCameraYaw;//[Offset: 0x288, Size: 0x4]
	float VehicleCameraPitch;//[Offset: 0x28c, Size: 0x4]
	Rotator VehicleWeaponPitchRot;//[Offset: 0x290, Size: 0xc]
	Rotator VehicleWeaponYawRot;//[Offset: 0x29c, Size: 0xc]
	bool bWithDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool bAbilityActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	float Speed;//[Offset: 0x2ac, Size: 0x4]
	float VelocityDegree;//[Offset: 0x2b0, Size: 0x4]
	AnimMontage* SelfRepairMontage;//[Offset: 0x2b8, Size: 0x8]
	void SetSelfRepairTrigger(bool bTrigger);// 0x3d6cb2d80041

--------------------------------
Class: VehicleSeatSlot
	FName SeatSocketName;//[Offset: 0x0, Size: 0x8]
	FName SeatWeaponSocket;//[Offset: 0x8, Size: 0x8]
	bool bDisplayBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverrideCameraSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	SeatCameraSetting SeatCameraSetting;//[Offset: 0x14, Size: 0x30]
	bool SeatStickOutEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	OutVehicleShootSetting OutVehicleShotSetting;//[Offset: 0x48, Size: 0xc8]
	VehicleSeatAbility[] VechicleAbilities;//[Offset: 0x110, Size: 0x10]
	class SolarVehicleWeapon* VehicleWeaponClass;//[Offset: 0x120, Size: 0x8]
	VehicleSeatWeaponSkinInfo VehicleSeatWeaponSkinInfo;//[Offset: 0x128, Size: 0x20]
	bool bAutoEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	Texture2D* SeatDisplayIcon;//[Offset: 0x150, Size: 0x8]
	Rotator EjectRotation;//[Offset: 0x158, Size: 0xc]
	float EjectForce;//[Offset: 0x164, Size: 0x4]
	SolarCharacter* SeatPassenger;//[Offset: 0x168, Size: 0x8]
	SolarVehicleWeapon* SeatWeapon;//[Offset: 0x170, Size: 0x8]

--------------------------------
Class: SeatCameraSetting
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	Vector OffsetToTarget;//[Offset: 0x4, Size: 0xc]
	Vector OffsetToTargetForTrace;//[Offset: 0x10, Size: 0xc]
	float DefaultPitch;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float MinYaw;//[Offset: 0x28, Size: 0x4]
	float MaxYaw;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: OutVehicleShootSetting
	Vector OutShotCameraOffset;//[Offset: 0x0, Size: 0xc]
	Rotator OutShotCameraRotation;//[Offset: 0xc, Size: 0xc]
	Vector2D OutShotCameraYawLimite;//[Offset: 0x18, Size: 0x8]
	CurveFloat* OutShotPitchLimiteCurve;//[Offset: 0x20, Size: 0x8]
	Vector ShotAimCameraOffset;//[Offset: 0x28, Size: 0xc]
	RuntimeFloatCurve ShotAimCameraFovCurve;//[Offset: 0x38, Size: 0x88]
	float OutShotBlendTime;//[Offset: 0xc0, Size: 0x4]
	float ShotAimBlendTime;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: VehicleSeatAbility
	class SolarVehicleGameplayAbility* AbilityClass;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle ServerOrDriverAbilityHandle;//[Offset: 0x8, Size: 0x4]
	GameplayAbilitySpecHandle SkinPreAbilityHandle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarVehicleGameplayAbility.GameplayAbility.Object
	bool bCancelAfterVacateSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bCancelManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x400, Size: 0x20]
	bool bCheckInstigatorBeforeActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bActivateAbilityOnGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	float DurationTime;//[Offset: 0x424, Size: 0x4]
	class GameplayEffect* ActivateEffect;//[Offset: 0x428, Size: 0x8]
	Texture2D* AbilityIcon;//[Offset: 0x430, Size: 0x28]
	float CostEnergy;//[Offset: 0x458, Size: 0x4]
	float DamageToVehicle;//[Offset: 0x45c, Size: 0x4]
	float DamageToCharacter;//[Offset: 0x460, Size: 0x4]
	SolarVehiclePawn* GetVehiclePawn();// 0x3c8ab2d80041

--------------------------------
Class: SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MaxWeaponPitch;//[Offset: 0x914, Size: 0x4]
	float MinWeaponPitch;//[Offset: 0x918, Size: 0x4]
	float MaxWeaponYaw;//[Offset: 0x91c, Size: 0x4]
	float MinWeaponYaw;//[Offset: 0x920, Size: 0x4]
	float PitchFollowSpeed;//[Offset: 0x924, Size: 0x4]
	float YawFollowSpeed;//[Offset: 0x928, Size: 0x4]
	bool bHasScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92c, Size: 0x1]
	bool bHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92d, Size: 0x1]
	Vector ScopeCameraOffset;//[Offset: 0x930, Size: 0xc]
	float ScopeCameraDistance;//[Offset: 0x93c, Size: 0x4]
	float ScopeBlendTime;//[Offset: 0x940, Size: 0x4]
	float[] ScopeFOVMultipliers;//[Offset: 0x948, Size: 0x10]
	class VehicleWeaponScopeWidget* ScopeUI;//[Offset: 0x958, Size: 0x8]
	float PitchCameraOffset;//[Offset: 0x960, Size: 0x4]
	bool bCameraFocusWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 0x1]
	bool bUseNormalCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x965, Size: 0x1]
	byte FireType;//[Offset: 0x966, Size: 0x1]
	FName FireSocketName;//[Offset: 0x968, Size: 0x8]
	FName[] MuzzleCheckSocketNames;//[Offset: 0x970, Size: 0x10]
	byte FireAixsType;//[Offset: 0x980, Size: 0x1]
	FName TurretVSocketName;//[Offset: 0x984, Size: 0x8]
	FName TurretHSocketName;//[Offset: 0x98c, Size: 0x8]
	FString ReloadSoundName1P;//[Offset: 0x998, Size: 0x10]
	FString ReloadSoundName3P;//[Offset: 0x9a8, Size: 0x10]
	FString ReloadSoundName3PEnemy;//[Offset: 0x9b8, Size: 0x10]
	SolarVehiclePawn* AttachedVehicle;//[Offset: 0x9c8, Size: 0x8]
	SolarCharacter* WeaponOwner;//[Offset: 0x9d8, Size: 0x8]
	bool bVehicleWeaponScopeOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	uint32 RotationYawAndPitchPacket;//[Offset: 0x9e4, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x9f0, Size: 0x8]
	class SkeletalMeshComponent* VehicleStencilClass;//[Offset: 0x9f8, Size: 0x28]
	SkeletalMeshComponent* VehicleStencilNew;//[Offset: 0xa20, Size: 0x8]
	FName AttachBoneName;//[Offset: 0xa28, Size: 0x8]
	SolarCharacter* CahedLastOwner;//[Offset: 0xa30, Size: 0x8]
	bool bUseAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8c, Size: 0x1]
	bool bShowAssistLockUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8c, Size: 0x1]
	Vector2D AssistLockImageSize;//[Offset: 0xd90, Size: 0x8]
	bool bAutoLockSpreadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd98, Size: 0x1]
	float AutoLockSpreadDec;//[Offset: 0xd9c, Size: 0x4]
	float PreSelectProgress;//[Offset: 0xda0, Size: 0x4]
	RuntimeFloatCurve ProgressUpgradeSpeedCurve;//[Offset: 0xda8, Size: 0x88]
	enum AssistLockState;//[Offset: 0xe30, Size: 0x1]
	bool bSimulateWeaponFireSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe31, Size: 0x1]
	bool bUsingCameraRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe32, Size: 0x1]
	float TriggerSmoothReticleDistance;//[Offset: 0xe34, Size: 0x4]
	Vector2D SmoothReticleSpeed;//[Offset: 0xe38, Size: 0x8]
	float WeaponFollowCameraYaw;//[Offset: 0xe40, Size: 0x4]
	float WeaponFollowCameraPitch;//[Offset: 0xe44, Size: 0x4]
	Rotator SimulateWeaponRot;//[Offset: 0xe48, Size: 0xc]
	Transform SimulateMuzzleTransform;//[Offset: 0xe60, Size: 0x30]
	Transform CachedWeaponRelativeTransform;//[Offset: 0xe90, Size: 0x30]
	Rotator SimulateWeaponTargetRotator;//[Offset: 0xec0, Size: 0xc]
	GameplayTagContainer BlockVehicleWeaponFireTags;//[Offset: 0xed0, Size: 0x20]
	void VehicleWeaponOpenScope();// 0x4571b2d80041
	void VehicleWeaponCloseScope();// 0x4570b2d80041
	void UpdateWeaponSimulateTransform(float DeltaTime, bool bInFreeLook);// 0x456fb2d80041
	void ServerUpdateVehicleWeaponRotate(uint32 PackedRotation);// 0x456eb2d80041
	void OnStencilLoaded();// 0x456db2d80041
	void LocallyVehicleWeaponTick(float DeltaTime);// 0x456cb2d80041
	bool IsPlayerLocallyControlledWeapon();// 0x456bb2d80041
	void InitializeVehicleWeapon(SolarVehiclePawn* VehicleWeaponOwner, out const FName WeaponAttachSocket);// 0x456ab2d80041
	Vector GetShotTargetLocation();// 0x4569b2d80041
	byte GetFireType();// 0x4568b2d80041
	bool CheckCanOpenScope();// 0x4567b2d80041
	bool CanEnterFireState();// 0x4566b2d80041
	void CacheActivedMeshData();// 0x4565b2d80041

--------------------------------
Class: VehicleWeaponScopeWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_Vehicle;//[Offset: 0x318, Size: 0x8]
	Image* Img_Weapon;//[Offset: 0x320, Size: 0x8]
	CanvasPanel* Panel_Pitch;//[Offset: 0x328, Size: 0x8]
	CheckBoxGroup* ScopeMutiplerContainer;//[Offset: 0x330, Size: 0x8]
	SolarCheckBox* Btn_Pitch;//[Offset: 0x338, Size: 0x8]
	CanvasPanel* SecondReticlePanel;//[Offset: 0x340, Size: 0x8]
	CanvasPanel* Panel_BG;//[Offset: 0x348, Size: 0x8]
	CanvasPanel* Panel_Border;//[Offset: 0x350, Size: 0x8]
	Image* ReticleDirection;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x360, Size: 0x8]
	CanvasPanelSlot* SecondReticleSlot;//[Offset: 0x368, Size: 0x8]
	CanvasPanelSlot* ReticleDirectionSlot;//[Offset: 0x370, Size: 0x8]
	Image* ProgressImage;//[Offset: 0x378, Size: 0x8]
	WidgetAnimation* ProgressAnima;//[Offset: 0x380, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x388, Size: 0x8]
	void UpdateScopeUI(SolarVehicleWeapon* VehicleWeapon, out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x4736b2d80041
	void SetCurrentScopeIndex(const int CurrentIndex);// 0x4735b2d80041
	void SetChargeProgress(out Image* InProgressImage, out WidgetAnimation* InProgressAnima);// 0x4734b2d80041
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress);// 0x4733b2d80041
	void OnScopeTriggerChanged(bool bChecked);// 0x4732b2d80041
	void OnScopeOpened();// 0x4731b2d80041
	void OnScopeGroupChanged(out const CheckBox*[] ChildChangedArray, const int CheckedChildIndex);// 0x4730b2d80041
	void InitScopeUI(SolarVehiclePawn* InVehicle);// 0x472fb2d80041
	void ApplyWeaponCrossHairToScope(out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x472eb2d80041

--------------------------------
Class: VehicleWeaponCrossHairInfo
	bool bShowCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D CrossHairPosition;//[Offset: 0x4, Size: 0x8]
	float CrossHairOpacity;//[Offset: 0xc, Size: 0x4]
	bool bShowReticleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D ReticleDirectionPosition;//[Offset: 0x14, Size: 0x8]
	float ReticleDirectionAngle;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: CheckBoxGroup.NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object
	delegate OnStateChangedEvent;//[Offset: 0x150, Size: 0x10]
	CheckBox* RevertToCachedChild;//[Offset: 0x160, Size: 0x8]
	CheckBox* LastCheckedChild;//[Offset: 0x168, Size: 0x8]
	PanelWidget* GroupRoot;//[Offset: 0x170, Size: 0x8]
	bool bAllowSwitchOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	enum UseType;//[Offset: 0x179, Size: 0x1]
	CheckBox*[] CheckBoxList;//[Offset: 0x180, Size: 0x10]
	void SetSelectIndex(int Index);// 0x3410b2d80041
	void RevertLastCheck();// 0x340fb2d80041
	bool RemoveGroupChild(CheckBox* Child);// 0x340eb2d80041
	void OnStateChanged(bool bIsChecked);// 0x340db2d80041
	int GetSelectedIndex();// 0x340cb2d80041
	void CleanCheckedState();// 0x340bb2d80041
	CheckBox*[] CheckChildrenState(out int CheckedChildIndex);// 0x340ab2d80041
	bool AddGroupChild(CheckBox* Child);// 0x3409b2d80041

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: SolarCheckBox.CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	Widget* OnGroup;//[Offset: 0x828, Size: 0x8]
	Widget* OffGroup;//[Offset: 0x830, Size: 0x8]
	enum CheckedGroupVisibility;//[Offset: 0x838, Size: 0x1]
	enum UncheckedGroupVisibility;//[Offset: 0x839, Size: 0x1]
	void OnStateChanged(bool bIsChecked);// 0x3ab0b2d80041
	void ManualSetIsChecked(bool InIsChecked);// 0x3aafb2d80041

--------------------------------
Class: VehicleSeatWeaponSkinInfo
	SkeletalMesh* WeaponMesh;//[Offset: 0x0, Size: 0x8]
	class AnimInstance* WeaponMeshAnimClass;//[Offset: 0x8, Size: 0x8]
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x10, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb0, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb0, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb0, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x2c33b2d80041

--------------------------------
Class: SolarNetMovementComponent.ActorComponent.Object
	float InterpolatedBackTime;//[Offset: 0xec, Size: 0x4]
	float ServerBufferCheckTimeInterval;//[Offset: 0xf0, Size: 0x4]
	int ServerBufferCheckCount;//[Offset: 0xf4, Size: 0x4]
	float ServerBufferCheckMinSpeed;//[Offset: 0xf8, Size: 0x4]
	float ServerBufferIgnoreCheckTimer;//[Offset: 0xfc, Size: 0x4]
	float AtRestThresholdCount;//[Offset: 0x100, Size: 0x4]
	enum ExtrapolationMode;//[Offset: 0x104, Size: 0x1]
	bool bUseExtrapolationTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	float ExtrapolationTimeLimit;//[Offset: 0x108, Size: 0x4]
	bool bUseExtrapolationDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	float ExtrapolationDistanceLimit;//[Offset: 0x110, Size: 0x4]
	float SendPositionThreshold;//[Offset: 0x114, Size: 0x4]
	float SendRotationThreshold;//[Offset: 0x118, Size: 0x4]
	float SendVelocityThreshold;//[Offset: 0x11c, Size: 0x4]
	float SendAngularVelocityThreshold;//[Offset: 0x120, Size: 0x4]
	float LinearVelcolityForPositionThreshold;//[Offset: 0x124, Size: 0x4]
	float ReceivedPositionThreshold;//[Offset: 0x128, Size: 0x4]
	float AngularVelocityForRotationThreshold;//[Offset: 0x12c, Size: 0x4]
	float ReceivedRotationThreshold;//[Offset: 0x130, Size: 0x4]
	float PositionSnapThreshold;//[Offset: 0x134, Size: 0x4]
	float RotationSnapThreshold;//[Offset: 0x138, Size: 0x4]
	float PositionLerpSpeed;//[Offset: 0x13c, Size: 0x4]
	float RotationLerpSpeed;//[Offset: 0x140, Size: 0x4]
	enum SyncPosition;//[Offset: 0x144, Size: 0x1]
	enum SyncRotation;//[Offset: 0x145, Size: 0x1]
	enum SyncVelocity;//[Offset: 0x146, Size: 0x1]
	enum SyncAngularVelocity;//[Offset: 0x147, Size: 0x1]
	bool bSyncDesiredYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool isPositionCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	bool isRotationCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]
	bool isVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1]
	bool isAngularVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	float SendRate;//[Offset: 0x150, Size: 0x4]
	float TimeSmoothing;//[Offset: 0x154, Size: 0x4]
	bool bUsingOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool bAlwaysSendOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	GameStateBase* GameState;//[Offset: 0x188, Size: 0x8]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x190, Size: 0x8]
	SceneComponent* RelativeComponent;//[Offset: 0x198, Size: 0x8]
	SolarVehiclePawn* PreviousBaseVehicleActor;//[Offset: 0x1a0, Size: 0x8]
	float AtRestPositionThreshold;//[Offset: 0x4d0, Size: 0x4]
	float AtRestRotationThreshold;//[Offset: 0x4d4, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x4f0, Size: 0x8]

--------------------------------
Class: SolarVehicleAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object

--------------------------------
Class: SolarVehicleSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarVehicleCameraComponent* VehicleCamera;//[Offset: 0x378, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x380, Size: 0x8]

--------------------------------
Class: SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraLocationLagTime;//[Offset: 0x330, Size: 0x4]
	bool HandleTargetOffsetAsRelativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	SolarSpringArmComponent* GetSpringArmComponentFromActor(const Actor* InActor);// 0x3a23b2d80041

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x294, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x298, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x2a4, Size: 0xc]
	float ProbeSize;//[Offset: 0x2b0, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x2b4, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b5, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b5, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b5, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b5, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b5, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b5, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b5, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b5, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b6, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x2b8, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x2bc, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x2c0, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x2c4, Size: 0x4]
	bool IsCollisionFixApplied();// 0x3a22b2d80041
	Vector GetUnfixedCameraPosition();// 0x3a21b2d80041
	Rotator GetTargetRotation();// 0x3a20b2d80041

--------------------------------
Class: SolarVehicleCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarVehiclePawn* Vehicle;//[Offset: 0x940, Size: 0x8]

--------------------------------
Class: SolarVehicleAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData CurrentVehicleHealth;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxVehicleHealth;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData MaxBrokenHealth;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData StealthMaterialPercent;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData SpeedMultiplier;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData CurrentVehicleWholeShield;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData MaxVehicleWholeShield;//[Offset: 0x90, Size: 0x10]
	void OnRep_StealthMaterialPercent(out const GameplayAttributeData OldStealthMaterialPercent);// 0x455bb2d80041
	void OnRep_SpeedMultiplier(out const GameplayAttributeData OldSpeedMultiplier);// 0x455ab2d80041
	void OnRep_MaxVehicleWholeShield(out const GameplayAttributeData OldMaxVehicleWholeShield);// 0x4559b2d80041
	void OnRep_MaxVehicleHealth(out const GameplayAttributeData OldMaxVehicleHealth);// 0x4558b2d80041
	void OnRep_MaxBrokenHealth(out const GameplayAttributeData OldMaxBrokenHealth);// 0x4557b2d80041
	void OnRep_CurrentVehicleWholeShield(out const GameplayAttributeData OldVehicleWholeShield);// 0x4556b2d80041
	void OnRep_CurrentVehicleHealth(out const GameplayAttributeData OldVehicleHealth);// 0x4555b2d80041

--------------------------------
Class: BasedMovement
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: VehicleVFX
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]
	CurveFloat* ActivateCurve;//[Offset: 0x60, Size: 0x8]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: VehicleVFXMesh
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: SolarVehicleLampData
	int8 LampMateriaIndex;//[Offset: 0x0, Size: 0x1]
	float LampOnValue;//[Offset: 0x4, Size: 0x4]
	float LampOffValue;//[Offset: 0x8, Size: 0x4]
	MaterialInstanceDynamic* LampMatInstanceDynamic;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SolarVehicleSoundDataAsset.DataAsset.Object
	FString Engine_3P;//[Offset: 0x30, Size: 0x10]
	FString Engine_3P_Enemy;//[Offset: 0x40, Size: 0x10]
	FString Engine_Down_3P;//[Offset: 0x50, Size: 0x10]
	FString Engine_Down_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Engine_RTPC;//[Offset: 0x70, Size: 0x10]
	FString Engine_Stop_3P;//[Offset: 0x80, Size: 0x10]
	FString Engine_Stop_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Engine_Input_RTPC;//[Offset: 0xa0, Size: 0x10]
	float MaxMoveSpeed;//[Offset: 0xb0, Size: 0x4]
	FString MoveSpeed_Acc_RTPC;//[Offset: 0xb8, Size: 0x10]
	FString Tire_3P;//[Offset: 0xc8, Size: 0x10]
	FString Tire_3P_Enemy;//[Offset: 0xd8, Size: 0x10]
	FString Tire_End_3P;//[Offset: 0xe8, Size: 0x10]
	FString Tire_End_3P_Enemy;//[Offset: 0xf8, Size: 0x10]
	FString Tire_RTPC;//[Offset: 0x108, Size: 0x10]
	FString Tire_Group;//[Offset: 0x118, Size: 0x10]
	<byte,FString> Tire_States;//[Offset: 0x128, Size: 0x50]
	bool bUseEngineRpm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	FString Vehicle_Collision_3P;//[Offset: 0x180, Size: 0x10]
	FString Vehicle_Collision_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Vehicle_Collision_RTPC;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Booster_3P;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Booster_3P_Enemy;//[Offset: 0x1c0, Size: 0x10]
	FString Stop_Booster_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Stop_Booster_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Vehicle_Speedboard_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Vehicle_Speedboard_3P;//[Offset: 0x200, Size: 0x10]
	FString Vehicle_Speedboard_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Vehicle_Eject_1P;//[Offset: 0x220, Size: 0x10]
	FString Vehicle_Eject_3P;//[Offset: 0x230, Size: 0x10]
	FString Vehicle_Eject_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Vehicle_Destroyed;//[Offset: 0x250, Size: 0x10]
	FString Weakpoint_Broken_3P;//[Offset: 0x260, Size: 0x10]
	FString Weakpoint_Broken_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Weakpoint_Fixed_3P;//[Offset: 0x280, Size: 0x10]
	FString Weakpoint_Fixed_3P_Enemy;//[Offset: 0x290, Size: 0x10]
	FString Engine_Start_3P;//[Offset: 0x2a0, Size: 0x10]
	FString Engine_Start_3P_Enemy;//[Offset: 0x2b0, Size: 0x10]
	FString Braking_Loop_RTPC;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Braking_Loop_3P;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Braking_Loop_3P_Enemy;//[Offset: 0x2e0, Size: 0x10]
	FString Stop_Braking_Loop_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Stop_Braking_Loop_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	float BrakingLoopSoundDegree;//[Offset: 0x310, Size: 0x4]
	float BrakingLoopSoundSpeed;//[Offset: 0x314, Size: 0x4]
	FString Play_Reverse_Loop;//[Offset: 0x318, Size: 0x10]
	FString Stop_Reverse_Loop;//[Offset: 0x328, Size: 0x10]
	FString Drift_RTPC;//[Offset: 0x338, Size: 0x10]
	FString Drift_Start;//[Offset: 0x348, Size: 0x10]
	FString Drift_Stop;//[Offset: 0x358, Size: 0x10]
	byte SpeedDifferenceInKmThresholdForHitSound;//[Offset: 0x368, Size: 0x1]
	FString Play_SelfHealing_3P;//[Offset: 0x370, Size: 0x10]
	FString Stop_SelfHealing_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_vehicle_crash_ground_3P;//[Offset: 0x390, Size: 0x10]
	FString Play_vehicle_crash_ground_3P_enemy;//[Offset: 0x3a0, Size: 0x10]
	FString Vehicle_Crash_Ground_RTPC;//[Offset: 0x3b0, Size: 0x10]
	float VehicleCrashGroundRtpcMultiplier;//[Offset: 0x3c0, Size: 0x4]
	FString Play_vehicle_crash_water_3P;//[Offset: 0x3c8, Size: 0x10]
	FString Play_vehicle_crash_water_3P_enemy;//[Offset: 0x3d8, Size: 0x10]
	FString Play_vehicle_fixing_weakpoint_3P;//[Offset: 0x3e8, Size: 0x10]
	FString Stop_vehicle_fixing_weakpoint_3P;//[Offset: 0x3f8, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Start_1P;//[Offset: 0x408, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Loop_1P;//[Offset: 0x418, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Start_3P;//[Offset: 0x428, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Loop_3P;//[Offset: 0x438, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Start_1P;//[Offset: 0x448, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Loop_1P;//[Offset: 0x458, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Start_3P;//[Offset: 0x468, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Loop_3P;//[Offset: 0x478, Size: 0x10]
	FString Play_HitVehicleWholdShield_1P;//[Offset: 0x488, Size: 0x10]
	FString Play_HitVehicleWholdShield_3P;//[Offset: 0x498, Size: 0x10]
	FString HoverJumpOnActive1P;//[Offset: 0x4a8, Size: 0x10]
	FString HoverJumpOnActive3P;//[Offset: 0x4b8, Size: 0x10]
	FString HoverJumpWhileActive1P;//[Offset: 0x4c8, Size: 0x10]
	FString HoverJumpWhileActive3P;//[Offset: 0x4d8, Size: 0x10]
	FString HoverJumpOnRemove1P;//[Offset: 0x4e8, Size: 0x10]
	FString HoverJumpOnRemove3P;//[Offset: 0x4f8, Size: 0x10]
	FString Play_VehicleTrumpet_1P;//[Offset: 0x508, Size: 0x10]
	FString Play_VehicleTrumpet_3P;//[Offset: 0x518, Size: 0x10]
	FString Stop_VehicleTrumpet_1P;//[Offset: 0x528, Size: 0x10]
	FString Stop_VehicleTrumpet_3P;//[Offset: 0x538, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P;//[Offset: 0x548, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x558, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P;//[Offset: 0x568, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x578, Size: 0x10]
	FString Play_Vehicle_UpShift_3P;//[Offset: 0x588, Size: 0x10]
	FString Play_Vehicle_UpShift_3P_Enemy;//[Offset: 0x598, Size: 0x10]
	FString Play_Vehicle_DownShift_3P;//[Offset: 0x5a8, Size: 0x10]
	FString Play_Vehicle_DownShift_3P_Enemy;//[Offset: 0x5b8, Size: 0x10]
	FString Play_IronMan_Laser_Hit;//[Offset: 0x5c8, Size: 0x10]

--------------------------------
Class: CarPadSpeedData
	float Duration;//[Offset: 0x0, Size: 0x4]
	float SpeedMultiplier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AbilityCooldownTimer
	byte CooldownAbilityIndex;//[Offset: 0x0, Size: 0x1]
	float AbilityAppliedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarDestructibleActor.StaticMeshActor.Actor.Object
	byte[] OnHitIgnoreChannels;//[Offset: 0x240, Size: 0x10]
	float AddForceCoefficient;//[Offset: 0x250, Size: 0x4]
	float BrokenDestroyTime;//[Offset: 0x254, Size: 0x4]
	bool bChildDetachOnBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bDestroyedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	void SetDestroyedOnClient();// 0x3aeeb2d80041
	void OnRep_bDestroyedOnClient();// 0x3aedb2d80041
	void OnDestructibleActorHit(Actor* SelfActor, Actor* OtherActor, out const HitResult Hit, float SpeedDifference);// 0x3aecb2d80041
	void OnClientBrokenEffect();// 0x3aebb2d80041
	void OnBroken(SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x3aeab2d80041
	void DestroyWithNetForce();// 0x3ae9b2d80041

--------------------------------
Class: WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0x338, Size: 0x8]
	int CurrentActiveSlot;//[Offset: 0x340, Size: 0x4]
	SolarPlayerWeapon* PackPrimaryWeapon;//[Offset: 0x348, Size: 0x8]
	SolarPlayerWeapon* PackSecondaryWeapon;//[Offset: 0x350, Size: 0x8]
	SolarPlayerWeapon* PackTertiaryWeapon;//[Offset: 0x358, Size: 0x8]
	SolarPlayerWeapon* CurrentWeapon;//[Offset: 0x360, Size: 0x8]
	SolarUnArmWeapon* UnArmWeapon;//[Offset: 0x370, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x378, Size: 0x8]
	bool bVisibleToggleOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	WeaponAction WeaponPickupAction;//[Offset: 0x398, Size: 0x8]
	WeaponAction WeaponSwitchAction;//[Offset: 0x3a0, Size: 0x8]
	WeaponAction WeaponReplaceAction;//[Offset: 0x3a8, Size: 0x8]
	WeaponAction WeaponDropAction;//[Offset: 0x3b0, Size: 0x8]
	WeaponAction WeaponClearAction;//[Offset: 0x3b8, Size: 0x8]
	WeaponAction WeaponDataUpdateAction;//[Offset: 0x3c0, Size: 0x8]
	PlayerWeaponSystemWidgetMgr* SpectateModeWidgetMgrCache;//[Offset: 0x3c8, Size: 0x8]
	PlayerWeaponSystemWidgetMgr* WeaponSystemWidgetMgr;//[Offset: 0x3d0, Size: 0x8]
	void TriggerBoltAnim();// 0x47f7b2d80041
	void SpectateModeTick(float InDeltaTime);// 0x47f6b2d80041
	void SpawnMeleeWeapon(SolarCharacter* Owner);// 0x47f5b2d80041
	void ResetCurrentWeaponFireState();// 0x47f4b2d80041
	void ResetAllWeaponByCache();// 0x47f3b2d80041
	void PostBolt();// 0x47f2b2d80041
	void OpenScopeForSpectator();// 0x47f1b2d80041
	void OnRep_WeaponSwitchAction();// 0x47f0b2d80041
	void OnRep_WeaponReplaceAction();// 0x47efb2d80041
	void OnRep_WeaponPickupAction();// 0x47eeb2d80041
	void OnRep_WeaponDropAction();// 0x47edb2d80041
	void OnRep_WeaponDataUpdateAction();// 0x47ecb2d80041
	void OnRep_WeaponClearAction();// 0x47ebb2d80041
	void OnRep_VisibleToggleOn();// 0x47eab2d80041
	void OnRep_TertiaryWeapon(SolarPlayerWeapon* InLastPlayerWeapon);// 0x47e9b2d80041
	void OnRep_SecondaryWeapon(SolarPlayerWeapon* InLastPlayerWeapon);// 0x47e8b2d80041
	void OnRep_PrimaryWeapon(SolarPlayerWeapon* InLastPlayerWeapon);// 0x47e7b2d80041
	void OnRep_CurrentWeapon();// 0x47e6b2d80041
	void OnOtherPlayerSpectateMyOwner();// 0x47e5b2d80041
	float GetWeaponWeight();// 0x47e4b2d80041
	SolarPlayerWeapon* GetWeaponBySlot(int Slot);// 0x47e3b2d80041
	SolarUnArmWeapon* GetUnArmWeapon();// 0x47e2b2d80041
	SolarPlayerWeapon* GetPackSecondaryWeapon();// 0x47e1b2d80041
	SolarPlayerWeapon* GetPackPrimaryWeapon();// 0x47e0b2d80041
	int GetLastActiveWeaponSlot();// 0x47dfb2d80041
	bool GetIsUnArm();// 0x47deb2d80041
	float GetCurrentWeaponReloadTime(int Mode);// 0x47ddb2d80041
	bool GetCurrentWeaponIsOverloading();// 0x47dcb2d80041
	Texture2D* GetCurrentWeaponIcon();// 0x47dbb2d80041
	float GetCurrentWeaponBoltTime(int Mode);// 0x47dab2d80041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x47d9b2d80041
	float GetCurrentSwitchWeaponTime();// 0x47d8b2d80041
	int GetCurrentActiveSlot();// 0x47d7b2d80041
	StaticMesh* GetClipMeshOfCurrentWeapon();// 0x47d6b2d80041
	void GameStatisticsWeaponSkill(FString Param);// 0x47d5b2d80041
	void CrosshairQuitReload();// 0x47d4b2d80041
	void CrosshairEnterReload();// 0x47d3b2d80041
	void CloseScopeForSpectator();// 0x47d2b2d80041
	void CleanWeaponSlotsUI();// 0x47d1b2d80041
	void ChangeShootingOption();// 0x47d0b2d80041
	void CancelSecondaryFire();// 0x47cfb2d80041

--------------------------------
Class: SolarUnArmWeapon.Actor.Object
	float Angle;//[Offset: 0x238, Size: 0x4]
	byte[] HitDetectableTypes;//[Offset: 0x240, Size: 0x10]
	float Interval;//[Offset: 0x250, Size: 0x4]
	class UserWidget* CrossHair;//[Offset: 0x258, Size: 0x8]
	SoftObjectPath FireIconPath;//[Offset: 0x260, Size: 0x18]
	SlateBrush FireBtnBrush;//[Offset: 0x278, Size: 0x98]
	SolarAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x310, Size: 0x8]
	SolarCharacterBase* AttackTargetCharacter;//[Offset: 0x320, Size: 0x8]
	class SolarAbility* MeleeAbilityClass;//[Offset: 0x328, Size: 0x8]
	class SolarGameplayAbility[] MeleeAbilities;//[Offset: 0x330, Size: 0x10]
	GameplayAbilitySpecHandle[] AbilitySpecHandles;//[Offset: 0x340, Size: 0x10]
	void TryDealMeleeDamage(out const Vector Location, float DetectSphereRadius);// 0x454bb2d80041
	void ServerDealMeleeDamage(SolarCharacterBase* Target);// 0x454ab2d80041
	bool HitAnyCharacters(out SolarCharacterBase* HitTarget, out const Vector Location, out const float DetectSphereRadius);// 0x4549b2d80041
	SlateBrush GetFireButtonBrush();// 0x4548b2d80041
	SolarCharacterBase* GetAttackTargetCharacter();// 0x4547b2d80041

--------------------------------
Class: SolarGameplayAbility.GameplayAbility.Object
	bool bTryActivateWhenGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	enum InputID;//[Offset: 0x3fa, Size: 0x1]
	bool bAllowReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 0x1]
	AbilityMeshMontage[] CurrentAbilityMeshMontages;//[Offset: 0x400, Size: 0x10]
	void RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x33bbb2d80041
	void ReceivingGiven(out const GameplayAbilityActorInfo ActorInfo, out const GameplayAbilitySpec Spec);// 0x33bab2d80041
	void MontageStopForMesh(SkeletalMeshComponent* InMesh, float OverrideBlendOutTime);// 0x33b9b2d80041
	void MontageStopForAllMeshes(float OverrideBlendOutTime);// 0x33b8b2d80041
	void MontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, FName FromSectionName, FName ToSectionName);// 0x33b7b2d80041
	void MontageJumpToSectionForMesh(SkeletalMeshComponent* InMesh, FName SectionName);// 0x33b6b2d80041
	int GetDefaultGrantedLevel(const Actor* InOwner, const Actor* InAvatar);// 0x33b5b2d80041
	AnimMontage* GetCurrentMontageForMesh(SkeletalMeshComponent* InMesh);// 0x33b4b2d80041
	void ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x33b3b2d80041
	void AddGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x33b2b2d80041

--------------------------------
Class: AbilityMeshMontage
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	AnimMontage* Montage;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WeaponAction
	int ActionCount;//[Offset: 0x0, Size: 0x4]
	int ActionParameter;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerWeaponSystemWidgetMgr.WeaponSystemWidgetMgr.Object
	SolarPlayerWeapon* CurrentPlayerWeapon;//[Offset: 0x50, Size: 0x8]
	UserWidget* UnArmWidget;//[Offset: 0x58, Size: 0x8]
	void InitUnarmWidget(SolarUnArmWeapon* UnArmWeapon);// 0x3655b2d80041

--------------------------------
Class: WeaponSystemWidgetMgr.Object
	SolarWeapon* CurrentWeapon;//[Offset: 0x28, Size: 0x8]
	bool bReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	FeedbackWidget* FeedbackWidget;//[Offset: 0x38, Size: 0x8]
	CrossHairWidget* CrossHairWidget;//[Offset: 0x48, Size: 0x8]
	void UpdateClipCapacity(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x3654b2d80041
	void SetVisible(bool Visible);// 0x3653b2d80041
	void SetShootActive(bool bo);// 0x3652b2d80041
	void ReloadTick(float DeltaTime);// 0x3651b2d80041
	void QuitReload(bool InbReloadSuccess, int InReservedAmmo, int InMaxAmmo, int InReloadAmmo);// 0x3650b2d80041
	void PreWeaponFire(int Mode);// 0x364fb2d80041
	void OverloadTick(float DeltaTime);// 0x364eb2d80041
	void Overload(bool bEntry);// 0x364db2d80041
	void OpenScope();// 0x364cb2d80041
	void InitWeaponWidget(SolarWeapon* Weapon);// 0x364bb2d80041
	void EnterReload(int Mode);// 0x364ab2d80041
	void CoolDownTick(float DeltaTime);// 0x3649b2d80041
	void CloseScope();// 0x3648b2d80041
	void Clear();// 0x3647b2d80041

--------------------------------
Class: SkeletalMeshComponentConfig.DataAsset.Object
	SoftObjectPath AnimClass;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkeletalMesh;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: CharacterSkinConfig.DataAsset.Object
	SoftObjectPath SkinIcon;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath DefaultIcon;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath SkinRes;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath CharaSkinRes;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ShieldRes;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath InvincibleMAT;//[Offset: 0xa8, Size: 0x18]
	SoftClassPath AnimBPRes;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath GetSkinRes();// 0x3408b2d80041
	SoftObjectPath GetSkinIcon();// 0x3407b2d80041
	SoftObjectPath GetInvincibleMAT();// 0x3406b2d80041
	SoftObjectPath GetCharaSkinRes();// 0x3405b2d80041
	SoftObjectPath GetAnimBPRes();// 0x3404b2d80041

--------------------------------
Class: SolarWeaponDamageEvent.SolarPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: BackpackStatisticsInfo
	bool IsVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector PlayerStartLocation;//[Offset: 0x4, Size: 0xc]
	Vector PlayerEndLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: RestoreAbilityInfo
	GameplayAbilitySpecHandle Handle;//[Offset: 0x0, Size: 0x4]
	PredictionKey ActivationPredictionKey;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: ScannedInfo_NetQuantize
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	byte TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize TargetLocation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: WeaponSystemPlayer.WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bInitializeWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	float ReloadBlockTimeMax;//[Offset: 0x554, Size: 0x4]
	FString ReceviedReloadMessage;//[Offset: 0x558, Size: 0x10]
	StaticMeshActor* DroppedClip;//[Offset: 0x578, Size: 0x8]
	StaticMeshActor* ExtractedClip;//[Offset: 0x580, Size: 0x8]
	bool bHoldFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	float CheckPickableWeaponRange;//[Offset: 0x58c, Size: 0x4]
	Actor* LastCheckPickableWeapon;//[Offset: 0x590, Size: 0x8]
	float PressOpenScopeTime;//[Offset: 0x5b0, Size: 0x4]
	void TestSetSkin(int SkinId);// 0x481db2d80041
	void TestSafeArea();// 0x481cb2d80041
	void TakeOffEquipAttributes(SolarPlayerWeapon* Weapon);// 0x481bb2d80041
	void SwitchFireMode();// 0x481ab2d80041
	void SwitchChargeUI(bool On, int Mode);// 0x4819b2d80041
	void SetAllEnemyRenderMode(const byte InRenderModeType);// 0x4818b2d80041
	bool ServerPackDropWeapon(int Slot);// 0x4817b2d80041
	void ReplaceUpgradeRoute(int Slot);// 0x4816b2d80041
	void RecieveSafeAreaUpdateMsg(out const int Num);// 0x4815b2d80041
	void RecieveExpPackMsg(int ItemID, int Num);// 0x4814b2d80041
	void RecieveExpMsg(bool bClient, int Type, int Num, int Slot);// 0x4813b2d80041
	void RecieveAssistMsg(enum HitedCharacterType);// 0x4812b2d80041
	void ReceiveWeaponEXP(int InExp);// 0x4811b2d80041
	void PutEquipAttributes(SolarPlayerWeapon* Weapon);// 0x4810b2d80041
	void PrintSensitivityGM();// 0x480fb2d80041
	void PostAddWeaponEXPMessageWhenKill(const int InWeaponSlot, const enum InHitType, const float InDamage, const bool InbKillPlayer);// 0x480eb2d80041
	void PostAddWeaponEXPMessageFromLua(const int InWeaponSlot, const enum InHitType, const float InDamage, const bool InbKillPlayer);// 0x480db2d80041
	void OnPlayerEnergyUpdate();// 0x480cb2d80041
	void OnEnterBattleAction(enum battleType);// 0x480bb2d80041
	bool NeedThermalImage();// 0x480ab2d80041
	bool IsWeaponAmmoUseEnergy(int Slot, int FireMode);// 0x4809b2d80041
	bool IsWeaponAmmoUseBagResource(int Slot, int FireMode);// 0x4808b2d80041
	bool IsReloadBlock();// 0x4807b2d80041
	bool IsOwnUpgradeRoute(int Slot);// 0x4806b2d80041
	bool IsCurrentWeaponTeamDamageValid();// 0x4805b2d80041
	bool IsCurrentWeapon(int ID);// 0x4804b2d80041
	bool InternalReplaceUpgradeRoute(SolarPlayerWeapon* wp);// 0x4803b2d80041
	void InitializeWeaponSystem(SolarCharacter* InOwner);// 0x4802b2d80041
	int GetWeapoonSkin(SolarPlayerWeapon* Weapon);// 0x4801b2d80041
	SolarPlayerWeapon* GetWeaponByItemID(int ItemInstanceId);// 0x4800b2d80041
	SolarPlayerWeapon* GetWeaponByID(int ID);// 0x47ffb2d80041
	int GetSlotByItemID(int ID);// 0x47feb2d80041
	int GetSlotByID(int ID);// 0x47fdb2d80041
	float GetRetrofitCost(int Slot);// 0x47fcb2d80041
	bool CurrentWeaponIsThermalImage();// 0x47fbb2d80041
	void ClearWeapons();// 0x47fab2d80041
	void CheckPickableWeapon();// 0x47f9b2d80041
	bool CanReplaceUpgradeRoute(int Slot);// 0x47f8b2d80041

--------------------------------
Class: WeaponSystemPlayerAI.WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	bool IsCurrentWeapon(int ID);// 0x481fb2d80041
	void ClearWeapons();// 0x481eb2d80041

--------------------------------
Class: WeaponSystemVehicleComponent.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	WeaponSystemInteract WeaponSystemInteract;//[Offset: 0x328, Size: 0x50]
	SolarVehicleWeapon* CurrentWeapon;//[Offset: 0x390, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x398, Size: 0x8]
	WeaponAction WeaponEquipAction;//[Offset: 0x3d0, Size: 0x8]
	WeaponAction WeaponUnequipAction;//[Offset: 0x3d8, Size: 0x8]
	WeaponAction WeaponStartReloadAction;//[Offset: 0x3e0, Size: 0x8]
	VehicleWeaponSystemWidgetMgr* WeaponSystemWidgetMgr;//[Offset: 0x3e8, Size: 0x8]
	void StatVehicleWeaponFire(FString Param);// 0x4827b2d80041
	void OnRep_WeaponUnequipAction();// 0x4826b2d80041
	void OnRep_WeaponStartReloadAction();// 0x4825b2d80041
	void OnRep_WeaponEquipAction();// 0x4824b2d80041
	void OnRep_CurrentWeapon(SolarVehicleWeapon* PreviousWeapon);// 0x4823b2d80041
	SolarVehicleWeapon* GetMyWeapon();// 0x4822b2d80041
	SolarVehicleWeapon* GetCurrentVehicleWeapon();// 0x4821b2d80041
	void FireInput(bool bPress);// 0x4820b2d80041

--------------------------------
Class: VehicleWeaponSystemWidgetMgr.WeaponSystemWidgetMgr.Object
	VehicleWeaponScopeWidget* VehicleWeaponScopeUI;//[Offset: 0x58, Size: 0x8]
	VehicleWeaponCrossHairInfo CachedCrossHairInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: BoardedVehicleInfo
	SolarVehiclePawn* BoardedVehicle;//[Offset: 0x0, Size: 0x8]
	int BoardedSeatIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: VehicleRepairToolMeshPreset
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 0x18]
	Transform RelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: MotionWarpingComponent.ActorComponent.Object
	bool bSearchForWindowsInAnimsWithinMontages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	delegate OnPreUpdate;//[Offset: 0xc0, Size: 0x10]
	Character* CharacterOwner;//[Offset: 0xd0, Size: 0x8]
	RootMotionModifier*[] Modifiers;//[Offset: 0xd8, Size: 0x10]
	<FName,MotionWarpingTarget> WarpTargetMap;//[Offset: 0xe8, Size: 0x50]
	int RemoveWarpTarget(FName WarpTargetName);// 0x2d9db2d80041
	void DisableAllRootMotionModifiers();// 0x2d9cb2d80041
	void AddOrUpdateWarpTargetFromTransform(FName WarpTargetName, Transform TargetTransform);// 0x2d9bb2d80041
	void AddOrUpdateWarpTargetFromLocationAndRotation(FName WarpTargetName, Vector TargetLocation, Rotator TargetRotation);// 0x2d9ab2d80041
	void AddOrUpdateWarpTargetFromLocation(FName WarpTargetName, Vector TargetLocation);// 0x2d99b2d80041
	void AddOrUpdateWarpTargetFromComponent(FName WarpTargetName, const SceneComponent* Component, FName BoneName, bool bFollowComponent);// 0x2d98b2d80041
	void AddOrUpdateWarpTarget(FName WarpTargetName, out const MotionWarpingTarget WarpTarget);// 0x2d97b2d80041

--------------------------------
Class: RootMotionModifier.Object
	AnimSequenceBase* Animation;//[Offset: 0x28, Size: 0x8]
	float StartTime;//[Offset: 0x30, Size: 0x4]
	float EndTime;//[Offset: 0x34, Size: 0x4]
	float PreviousPosition;//[Offset: 0x38, Size: 0x4]
	float CurrentPosition;//[Offset: 0x3c, Size: 0x4]
	float Weight;//[Offset: 0x40, Size: 0x4]
	bool bInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	Transform StartTransform;//[Offset: 0x50, Size: 0x30]
	float ActualStartTime;//[Offset: 0x80, Size: 0x4]
	delegate OnActivateDelegate;//[Offset: 0x84, Size: 0x10]
	delegate OnUpdateDelegate;//[Offset: 0x94, Size: 0x10]
	delegate OnDeactivateDelegate;//[Offset: 0xa4, Size: 0x10]
	enum State;//[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: MotionWarpingTarget
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	SceneComponent* Component;//[Offset: 0x30, Size: 0x8]
	FName BoneName;//[Offset: 0x38, Size: 0x8]
	bool bFollowComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DebugReplicator.Actor.Object

--------------------------------
Class: WidgetInputManager.Object
	delegate OnTouchStartDetected;//[Offset: 0x28, Size: 0x10]
	delegate OnTouchUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnTouchEndDetected;//[Offset: 0x48, Size: 0x10]
	delegate OnPointerStartDetected;//[Offset: 0x58, Size: 0x10]
	delegate OnPointerUpdate;//[Offset: 0x68, Size: 0x10]
	delegate OnPointerEndDetected;//[Offset: 0x78, Size: 0x10]
	<int,Vector2D> TouchedList;//[Offset: 0x90, Size: 0x50]
	<int,Vector2D> PointerList;//[Offset: 0xe0, Size: 0x50]
	Widget* K2_GetManagedWidget();// 0x485bb2d80041
	bool GetWidgetTouchedList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x485ab2d80041
	bool GetWidgetPointerList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x4859b2d80041

--------------------------------
Class: PlayAnimationParams

--------------------------------
Class: BP_DeathBoxCountdownExec_C.BPC_CountdownExec_C.CGMCountdownExecComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf8, Size: 0x8]
	Vector RebirthPos;//[Offset: 0x100, Size: 0xc]
	FString PlayerId;//[Offset: 0x110, Size: 0x10]
	FString GetModuleName();// 0x9d87b3000001
	void CloseUI(PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9d86b3000001
	void ExecuteAfterTheCountdown();// 0x9d85b3000001
	void OnStartStartCountingDownExec(SolarCharacter* InOpeningCharacter);// 0x9d84b3000001
	void ApproachingExec(SolarCharacter* Character);// 0x9d83b3000001
	void LeavingExec(SolarCharacter* Character);// 0x9d82b3000001
	void Lua_PostEvent_StartCountingDownExec(SolarCharacter* Character);// 0x9d81b3000001
	void Lua_PostServerDeductEvent(FString PlayerId);// 0x9d80b3000001
	void Lua_ApproachingExec(SolarCharacter* Character);// 0xffffff8ab2d80002
	void Lua_LeavingExec(SolarCharacter* Character);// 0x9d7eb3000001
	void ExecuteUbergraph_BP_DeathBoxCountdownExec(int EntryPoint, SolarCharacter* K2Node_CustomEvent_Character, bool CallFunc_IsServer_ReturnValue, SolarCharacter* K2Node_Event_InOpeningCharacter, SolarCharacter* K2Node_CustomEvent_Character, SolarCharacter* K2Node_CustomEvent_Character, SolarCharacter* K2Node_CustomEvent_Character, FString K2Node_CustomEvent_PlayerID, SolarCharacter* K2Node_CustomEvent_Character);// 0x1b5b0b2d80041

--------------------------------
Class: BPC_BuyResurrection_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb8, Size: 0x8]
	UI_WorldMark_ReviveTeammates_C* DeathBoxMark;//[Offset: 0xc0, Size: 0x8]
	UI_BuyResurrectionPanel_C* UI_BuyResurrectionPanel;//[Offset: 0xc8, Size: 0x8]
	BP_DI_DeathBoxA_TreasureBox_C* DeathBoxRef;//[Offset: 0xd0, Size: 0x8]
	byte State;//[Offset: 0xd8, Size: 0x1]
	int GoldNum;//[Offset: 0xdc, Size: 0x4]
	int WaitingTime;//[Offset: 0xe0, Size: 0x4]
	float ReturnRatio;//[Offset: 0xe4, Size: 0x4]
	float StartTime;//[Offset: 0xe8, Size: 0x4]
	float[] ReturnRatioList;//[Offset: 0xf0, Size: 0x10]
	int BuyLimitedTime;//[Offset: 0x100, Size: 0x4]
	delegate NewStateChange;//[Offset: 0x108, Size: 0x10]
	int NumberOfApplications;//[Offset: 0x118, Size: 0x4]
	int[] PriceList;//[Offset: 0x120, Size: 0x10]
	bool bDeductedOnlyOnceFalg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int TeammateSalary;//[Offset: 0x134, Size: 0x4]
	int ItemID;//[Offset: 0x138, Size: 0x4]
	SolarCharacter* HelpYourTeammates;//[Offset: 0x140, Size: 0x8]
	UI_MapMark_ReviveTeammates_C*[] UI_MapMark_ReviveTeammatesArr;//[Offset: 0x148, Size: 0x10]
	int CompLimitedTime;//[Offset: 0x158, Size: 0x4]
	int PurchasesNum;//[Offset: 0x15c, Size: 0x4]
	SolarCharacter* TeammatesCountingDown;//[Offset: 0x160, Size: 0x8]
	BP_DeathBoxCountdownExec_C* BP_DeathBoxCountdownExec;//[Offset: 0x168, Size: 0x8]
	SCMPlayerState* WaitingResurrectedPlayer;//[Offset: 0x170, Size: 0x8]
	Vector CharacterFlyOffset;//[Offset: 0x178, Size: 0xc]
	bool DelayFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	TimerHandle DelaySetTimeOutHandle;//[Offset: 0x188, Size: 0x8]
	TimerHandle DelaySetNotBuyHandel;//[Offset: 0x190, Size: 0x8]
	float BP_SI_RebornLine_Life;//[Offset: 0x198, Size: 0x4]
	int SaveTeammatesNum;//[Offset: 0x19c, Size: 0x4]
	int ZomborgNum;//[Offset: 0x1a0, Size: 0x4]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0x1a8, Size: 0x8]
	FString[] SavedTeammateIDArr;//[Offset: 0x1b0, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x1c0, Size: 0x10]
	TimerHandle EndJudgmentHander;//[Offset: 0x1d0, Size: 0x8]
	FString[] SavedTeammateNameArr;//[Offset: 0x1d8, Size: 0x10]
	BP_ReviveItemManger_BattleRoyale_C* ReviveItemManger;//[Offset: 0x1e8, Size: 0x8]
	int Withholding;//[Offset: 0x1f0, Size: 0x4]
	SolarCharacter* NoneVal;//[Offset: 0x1f8, Size: 0x8]
	FString GetModuleName();// 0x9d7bb3000001
	void Judgmenttimeout(out bool IsTimeOut, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x9d7ab3000001
	void Check Condition(bool DetectMoney, out bool IsSatisfy, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Get_Alive_Team_Player_Num_Num, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9d79b3000001
	static void Create Punctuation(Vector InputPin, MapMarkBase*[] CallFunc_RegisterMarkToMap_ReturnValue, int CallFunc_Array_Length_ReturnValue, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, UI_WorldMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, MapMarkBase* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, UI_MapMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_Map_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, MapMarkBase* CallFunc_Array_Get_Item, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x9d78b3000001
	static SCMPlayerState*[] GetTeammatesArr(const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x9d77b3000001
	static void On All Teammates Killed(const FString[] Temp_string_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BeginSpectateOtherPlayer_ReturnValue, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9d76b3000001
	static void Get Alive Team Player Num(SCMPlayerState* OutPlayer, out int Num, int NumberOfSurvivingTeammates, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool CallFunc___A_Is_Player_Reviving_Reviving, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9d75b3000001
	void OnRep_TeammatesCountingDown(bool CallFunc_IsServer_ReturnValue, UI_ResurrectionProgress_C* CallFunc_Get_Local_Resurrection_Progress_UI_UIRef, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc__C_GetLocalCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x9d74b3000001
	void Get the number of purchases(out int PurchasesNum);// 0x9d73b3000001
	void Calculate price and rebate ratio(int[] NewLocalVar, int[] NewLocalVar, float CallFunc_Subtract_FloatFloat_ReturnValue, int[] K2Node_MakeArray_Array, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int[] K2Node_MakeArray_Array, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item);// 0x9d72b3000001
	static void OnRep_State(Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_ObjectToText_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_ReceiveGold_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x9d71b3000001
	void Show Buy Resurrection UI(bool Visible, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_BuyResurrectionPanel_C* K2Node_DynamicCast_AsUI_Buy_Resurrection_Panel, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x9d70b3000001
	void ReceiveBeginPlay();// 0x9d6fb3000001
	void Event_CreatePunctuation(Vector Pos);// 0x9d6eb3000001
	void Event_RebirthCharacter(SolarPlayerState* CostPlayer);// 0xffffffff94461e40
	void Event_SetPlayerEnterOpeningState(bool Opening, SCMPlayerState* TargetPlayer);// 0x9d6cb3000001
	void Event_NotifyTeammatesOfDeath(SolarPlayerState* PlayerState);// 0x9d6bb3000001
	void Event_EnterBuyResurrectionProcess(SolarPlayerState* PlayerState, bool Affordable);// 0x9d6ab3000001
	void Event_OnSuccessfulPurchase();// 0x9d69b3000001
	void Event_EnableBoxRestart(bool UnLockResurrection);// 0x9d68b3000001
	void Event_GiveUpResurrection();// 0x9d67b3000001
	void Evnet_OnAllTeammatesKilled();// 0x9d66b3000001
	void EventApplyResurrectionClick();// 0x9d65b3000001
	void Event_RemovePunctuation();// 0x9d64b3000001
	void Event_NotifTeammatesHelp();// 0x9d63b3000001
	void Event_ClientPlayerMarkAnim();// 0x9d62b3000001
	void Event_SetTeammatesCountingDown(SolarCharacter* TeammatesCountingDown, FString PlayerId);// 0x9d61b3000001
	void Notify Server Deduct(SCMPlayerState* CostPlayer);// 0x9d60b3000001
	void Event_LeaveWhileWaiting();// 0x9dbbb3000001
	void Event_CheckAllDeath();// 0x9d5eb3000001
	void Event_RespondReconnection();// 0x9d5db3000001
	void DelaySetTimeOut();// 0x9d5cb3000001
	void DelaySetNotBuy();// 0x9d5bb3000001
	void Event_NotifRescueSuccessful(int TeammateSalary);// 0x9d5ab3000001
	void BuyResurrectionTimeOut();// 0x9d59b3000001
	void EndJudgment();// 0x9d58b3000001
	void Event_NotificationOverTimeLimit();// 0x9d57b3000001
	void OnDeathboxApproachingExecImpl();// 0x9d56b3000001
	void Event_ApproachingExec(BP_SolarCharacterPlayer_C* Character, BP_DeathBoxCountdownExec_C* BPC_CountdownExec);// 0x9d55b3000001
	void Event_NotifyServerDeduct(FString PlayerId);// 0x9d54b3000001
	void Event_EnterSetTeammatesCountingDown(SolarCharacter* SolarCharacter, FString PlayerId);// 0xffffff8ab2d80002
	void Event_LeavingExec(SolarCharacter* SolarCharacter, BPC_CountdownExec_C* BPC_CountdownExec);// 0x9d52b3000001
	void Refund(BP_SCustomPlayerStateBase_C* Player);// 0xffffffffd94bbf00
	static void ExecuteUbergraph_BPC_BuyResurrection(int EntryPoint, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, WidgetComponent* CallFunc_CreateOverheadHUD_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, bool CallFunc_IsServer_ReturnValue, UI_HUD_Gold_C* K2Node_DynamicCast_AsUI_HUD_Gold, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, Vector K2Node_CustomEvent_Pos, SolarPlayerState* K2Node_CustomEvent_CostPlayer, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_ReceiveGold_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_Opening, SCMPlayerState* K2Node_CustomEvent_TargetPlayer, SolarPlayerState* K2Node_CustomEvent_PlayerState, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SolarPlayerState* K2Node_CustomEvent_PlayerState, bool K2Node_CustomEvent_Affordable, bool K2Node_CustomEvent_UnLockResurrection, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, const enum[] K2Node_MakeArray_Array, float CallFunc_Conv_IntToFloat_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, UI_MapMark_ReviveTeammates_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Add_IntInt_ReturnValue, UI_MapMark_ReviveTeammates_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SolarCharacter* K2Node_CustomEvent_TeammatesCountingDown, FString K2Node_CustomEvent_PlayerID, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_Character_BattleRoyale_C* K2Node_DynamicCast_AsBP_Character_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* K2Node_CustomEvent_CostPlayer, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetPlayerNameWithoutUID_ReturnValue, FString CallFunc_GetUserID_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_CustomEvent_TeammateSalary, FText CallFunc_Conv_IntToText_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, Pawn* CallFunc_GetLocalCharacter_ReturnValue, Controller* CallFunc_GetController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_CustomEvent_Character, BP_DeathBoxCountdownExec_C* K2Node_CustomEvent_BPC_CountdownExec, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_DI_DeathBoxA_TreasureBox_C* K2Node_DynamicCast_AsBP_DI_Death_Box_A_Treasure_Box, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, FString K2Node_CustomEvent_PlayerID, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* K2Node_CustomEvent_SolarCharacter, FString K2Node_CustomEvent_PlayerID, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SolarCharacter* K2Node_CustomEvent_SolarCharacter, BPC_CountdownExec_C* K2Node_CustomEvent_BPC_CountdownExec, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, BP_DI_DeathBoxA_TreasureBox_C* K2Node_DynamicCast_AsBP_DI_Death_Box_A_Treasure_Box, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Add_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_StriStri_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_CustomEvent_Player, bool CallFunc_CostGold_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_ReceiveGold_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, BP_LogicBase_C* K2Node_DynamicCast_AsBP_Logic_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue, int Temp_int_Variable, UI_ResurrectionProgress_C* CallFunc_Get_Local_Resurrection_Progress_UI_UIRef, bool CallFunc_IsValid_ReturnValue, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xb6478e27b2d90214
	void NewStateChange__DelegateSignature(byte State);// 0x9d46b3000001

--------------------------------
Class: UI_WorldMark_ReviveTeammates_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x368, Size: 0x8]
	WidgetAnimation* Occupy_Loop_Anim;//[Offset: 0x370, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x378, Size: 0x8]
	Image* Img_BG;//[Offset: 0x380, Size: 0x8]
	Image* Img_Light;//[Offset: 0x388, Size: 0x8]
	Image* Img_Light;//[Offset: 0x390, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x398, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x3a0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3a8, Size: 0x8]
	int HideDistance;//[Offset: 0x3b0, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x3b8, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x3c8, Size: 0x10]
	FString PlayerId;//[Offset: 0x3d8, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9c66b3000001
	void SetColor(byte Index, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor);// 0x9c65b3000001
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x9c64b3000001
	static FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x9c63b3000001
