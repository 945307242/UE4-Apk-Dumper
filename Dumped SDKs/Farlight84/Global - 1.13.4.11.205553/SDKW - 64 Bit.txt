Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1e0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x650, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6e0, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x53d2a27fb041
	void HandleTimelineScrubbed();// 0x53d1a27fb041

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xe06a27fb031

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x238, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x23c, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23d, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23d, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23d, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23d, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23d, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23d, Size: 0x1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x240, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0x250, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x260, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0x270, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x280, Size: 0x10]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x290, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x290, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x290, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x290, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x291, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x298, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x2a0, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2a8, Size: 0x4]
	float KillZ;//[Offset: 0x2ac, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2b0, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2b8, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2bc, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2c0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c8, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2d0, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2d8, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2e0, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2e4, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2f0, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2f4, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2f8, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x300, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x320, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x344, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x348, Size: 0x8]
	float TimeDilation;//[Offset: 0x350, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x354, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x358, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x35c, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x360, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x364, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x368, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x36c, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3b0, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3b8, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c8, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3d8, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3e0, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3e8, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3f0, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x400, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x4641a27fb041

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x38]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x61, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x62, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x62, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x63, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x63, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x63, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x6a, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x6b, Size: 0x1]
	byte RemoteRole;//[Offset: 0x6c, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x70, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xa4, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa8, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xb0, Size: 0x40]
	Actor* Owner;//[Offset: 0xf0, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf8, Size: 0x8]
	byte Role;//[Offset: 0x100, Size: 0x1]
	byte NetDormancy;//[Offset: 0x101, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x102, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x103, Size: 0x1]
	int InputPriority;//[Offset: 0x104, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x108, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x110, Size: 0x4]
	int NetTag;//[Offset: 0x114, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x118, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x11c, Size: 0x4]
	float NetPriority;//[Offset: 0x120, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x128, Size: 0x8]
	Actor*[] Children;//[Offset: 0x130, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x140, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x148, Size: 0x10]
	FName[] Layers;//[Offset: 0x160, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x170, Size: 0x8]
	FName[] Tags;//[Offset: 0x180, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x190, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x191, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x192, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x193, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x194, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x195, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x196, Size: 0x1]
	delegate OnClicked;//[Offset: 0x197, Size: 0x1]
	delegate OnReleased;//[Offset: 0x198, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x199, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x19a, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x19b, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x19c, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x19d, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x19e, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x19f, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x200, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x210, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x141da27fb041
	void UserConstructionScript();// 0x141ca27fb041
	void TearOff();// 0x141ba27fb041
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x141aa27fb041
	void SetTickGroup(byte NewTickGroup);// 0x1419a27fb041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1418a27fb041
	void SetReplicates(bool bInReplicates);// 0x1417a27fb041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x1416a27fb041
	void SetOwner(Actor* NewOwner);// 0x1415a27fb041
	void SetNetDormancy(byte NewDormancy);// 0x1413a27fb041
	void SetLifeSpan(float InLifespan);// 0x1412a27fb041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x1411a27fb041
	void SetActorTickInterval(float TickInterval);// 0x1410a27fb041
	void SetActorTickEnabled(bool bEnabled);// 0x140fa27fb041
	void SetActorScale3D(Vector NewScale3D);// 0x140ea27fb041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x140da27fb041
	void SetActorHiddenInGame(bool bNewHidden);// 0x140ca27fb041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x140ba27fb041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x140aa27fb041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1409a27fb041
	void ReceiveTick(float DeltaSeconds);// 0x1408a27fb041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1407a27fb041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1406a27fb041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1405a27fb041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1404a27fb041
	void ReceiveDestroyed();// 0x1403a27fb041
	void ReceiveBeginPlay();// 0x1402a27fb041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1401a27fb041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1400a27fb041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x13ffa27fb041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x13fea27fb041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x13fda27fb041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x13fca27fb041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x13fba27fb041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x13faa27fb041
	void ReceiveActorEndCursorOver();// 0x13f9a27fb041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x13f8a27fb041
	void ReceiveActorBeginCursorOver();// 0x13f7a27fb041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x13f6a27fb041
	void OnRep_ReplicateMovement();// 0x13f5a27fb041
	void OnRep_ReplicatedMovement();// 0x13f4a27fb041
	void OnRep_Owner();// 0x13f3a27fb041
	void OnRep_Instigator();// 0x13f2a27fb041
	void OnRep_AttachmentReplication();// 0x13f1a27fb041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x13f0a27fb041
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x13efa27fb041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x13eea27fb041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13eda27fb041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x13eca27fb041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13eba27fb041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13eaa27fb041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e9a27fb041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e8a27fb041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13e7a27fb041
	void K2_OnReset();// 0x13e6a27fb041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x13e5a27fb041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x13e4a27fb041
	SceneComponent* K2_GetRootComponent();// 0x13e3a27fb041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x13e2a27fb041
	Rotator K2_GetActorRotation();// 0x13e1a27fb041
	Vector K2_GetActorLocation();// 0x13e0a27fb041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x13dea27fb041
	void K2_DestroyComponent(ActorComponent* Component);// 0x13dda27fb041
	void K2_DestroyActor();// 0x13dca27fb041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x13dba27fb041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x13d9a27fb041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x13d8a27fb041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x13d6a27fb041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d5a27fb041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d4a27fb041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d3a27fb041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d2a27fb041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d1a27fb041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x13d0a27fb041
	bool IsOverlappingActor(const Actor* Other);// 0x13cfa27fb041
	bool IsChildActor();// 0x13cea27fb041
	bool IsActorTickEnabled();// 0x13cda27fb041
	bool IsActorBeingDestroyed();// 0x13cca27fb041
	bool HasAuthority();// 0x13cba27fb041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x13caa27fb041
	Vector GetVelocity();// 0x13c9a27fb041
	Transform GetTransform();// 0x13c8a27fb041
	bool GetTickableWhenPaused();// 0x13c7a27fb041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x13c6a27fb041
	byte GetRemoteRole();// 0x13c5a27fb041
	ChildActorComponent* GetParentComponent();// 0x13c4a27fb041
	Actor* GetParentActor();// 0x13c3a27fb041
	Actor* GetOwner();// 0x13c2a27fb041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x13c1a27fb041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x13c0a27fb041
	byte GetLocalRole();// 0x13bea27fb041
	float GetLifeSpan();// 0x13bda27fb041
	Controller* GetInstigatorController();// 0x13bca27fb041
	Pawn* GetInstigator();// 0x13bba27fb041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x13baa27fb041
	float GetInputAxisValue(const FName InputAxisName);// 0x13b9a27fb041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x13b8a27fb041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x13b7a27fb041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x13b6a27fb041
	float GetGameTimeSinceCreation();// 0x13b5a27fb041
	float GetDotProductTo(const Actor* OtherActor);// 0x13b4a27fb041
	float GetDistanceTo(const Actor* OtherActor);// 0x13b3a27fb041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x13b2a27fb041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x13b1a27fb041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x13b0a27fb041
	FName GetAttachParentSocketName();// 0x13afa27fb041
	Actor* GetAttachParentActor();// 0x13aea27fb041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x13ada27fb041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x13aca27fb041
	Vector GetActorUpVector();// 0x13aba27fb041
	float GetActorTimeDilation();// 0x13aaa27fb041
	float GetActorTickInterval();// 0x13a9a27fb041
	Vector GetActorScale3D();// 0x13a8a27fb041
	Vector GetActorRightVector();// 0x13a7a27fb041
	Vector GetActorRelativeScale3D();// 0x13a6a27fb041
	Vector GetActorForwardVector();// 0x13a5a27fb041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x13a4a27fb041
	bool GetActorEnableCollision();// 0x13a3a27fb041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x13a2a27fb041
	void ForceNetUpdate();// 0x13a1a27fb041
	void FlushNetDormancy();// 0x13a0a27fb041
	void EnableInput(PlayerController* PlayerController);// 0x139fa27fb041
	void DisableInput(PlayerController* PlayerController);// 0x139ea27fb041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x139da27fb041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x139ca27fb041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x139ba27fb041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x139aa27fb041
	bool ActorHasTag(FName Tag);// 0x1399a27fb041

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xd0, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe8, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x124, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x130, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x13c, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x148, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x154, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x154, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x154, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x154, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x154, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x155, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x155, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x155, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x155, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x155, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x155, Size: 0x1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x155, Size: 0x1]
	byte Mobility;//[Offset: 0x157, Size: 0x1]
	byte DetailMode;//[Offset: 0x158, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x159, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x20a2a27fb041
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x20a1a27fb041
	void SetWorldScale3D(Vector NewScale);// 0x20a0a27fb041
	void SetVisibilityByFlag(bool bNewVisibility, int Flag, bool bPropagateToChildren);// 0x209fa27fb041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x209ea27fb041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x209da27fb041
	void SetRelativeScale3D(Vector NewScale3D);// 0x209ca27fb041
	void SetMobility(byte NewMobility);// 0x209aa27fb041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2099a27fb041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2098a27fb041
	void ResetRelativeTransform();// 0x2097a27fb041
	void OnRep_Visibility(bool OldValue);// 0x2096a27fb041
	void OnRep_Transform();// 0x2095a27fb041
	void OnRep_AttachSocketName();// 0x2094a27fb041
	void OnRep_AttachParent();// 0x2093a27fb041
	void OnRep_AttachChildren();// 0x2092a27fb041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2091a27fb041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2090a27fb041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208fa27fb041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208ea27fb041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208da27fb041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208ca27fb041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208ba27fb041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x208aa27fb041
	Transform K2_GetComponentToWorld();// 0x2089a27fb041
	Vector K2_GetComponentScale();// 0x2088a27fb041
	Rotator K2_GetComponentRotation();// 0x2087a27fb041
	Vector K2_GetComponentLocation();// 0x2086a27fb041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x2085a27fb041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2084a27fb041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x2083a27fb041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2082a27fb041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2081a27fb041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2080a27fb041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207fa27fb041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207ea27fb041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207da27fb041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207ca27fb041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x207ba27fb041
	bool IsVisible();// 0x207aa27fb041
	bool IsSimulatingPhysics(FName BoneName);// 0x2079a27fb041
	bool IsAnySimulatingPhysics();// 0x2078a27fb041
	Vector GetUpVector();// 0x2077a27fb041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x2075a27fb041
	Rotator GetSocketRotation(FName InSocketName);// 0x2074a27fb041
	Quat GetSocketQuaternion(FName InSocketName);// 0x2073a27fb041
	Vector GetSocketLocation(FName InSocketName);// 0x2072a27fb041
	bool GetShouldUpdatePhysicsVolume();// 0x2071a27fb041
	Vector GetRightVector();// 0x2070a27fb041
	Transform GetRelativeTransform();// 0x206fa27fb041
	PhysicsVolume* GetPhysicsVolume();// 0x206ea27fb041
	void GetParentComponents(out SceneComponent*[] Parents);// 0x206da27fb041
	int GetNumChildrenComponents();// 0x206ca27fb041
	Vector GetForwardVector();// 0x206ba27fb041
	Vector GetComponentVelocity();// 0x206aa27fb041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x2069a27fb041
	SceneComponent* GetChildComponent(int ChildIndex);// 0x2068a27fb041
	FName GetAttachSocketName();// 0x2067a27fb041
	SceneComponent* GetAttachParent();// 0x2066a27fb041
	FName[] GetAllSocketNames();// 0x2065a27fb041
	bool DoesSocketExist(FName InSocketName);// 0x2064a27fb041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x2063a27fb041

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x38]
	FName[] ComponentTags;//[Offset: 0x68, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x8c, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x91, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x92, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x92, Size: 0x1]
	enum CreationMethod;//[Offset: 0x94, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x95, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x96, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x98, Size: 0x10]
	void ToggleActive();// 0xe86a27fb041
	void SetTickGroup(byte NewTickGroup);// 0xe84a27fb041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xe83a27fb041
	void SetIsReplicated(bool ShouldReplicate);// 0xe82a27fb041
	void SetComponentTickInterval(float TickInterval);// 0xe81a27fb041
	void SetComponentTickEnabled(bool bEnabled);// 0xe80a27fb041
	void SetAutoActivate(bool bNewAutoActivate);// 0xe7fa27fb041
	void SetActive(bool bNewActive, bool bReset);// 0xe7ea27fb041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xe7da27fb041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xe7ca27fb041
	void ReceiveTick(float DeltaSeconds);// 0xe7ba27fb041
	void ReceiveEndPlay(byte EndPlayReason);// 0xe7aa27fb041
	void ReceiveBeginPlay();// 0xe79a27fb041
	void OnRep_IsActive();// 0xe78a27fb041
	void K2_DestroyComponent(Object* Object);// 0xe77a27fb041
	bool IsComponentTickEnabled();// 0xe76a27fb041
	bool IsBeingDestroyed();// 0xe75a27fb041
	bool IsActive();// 0xe74a27fb041
	Actor* GetOwner();// 0xe73a27fb041
	float GetComponentTickInterval();// 0xe72a27fb041
	void Deactivate();// 0xe71a27fb041
	bool ComponentHasTag(FName Tag);// 0xe70a27fb041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xe6fa27fb041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xe6ea27fb041
	void Activate(bool bReset);// 0xe6da27fb041

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x268, Size: 0x4]
	int Priority;//[Offset: 0x26c, Size: 0x4]
	float FluidFriction;//[Offset: 0x270, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x230, Size: 0x1]
	Color BrushColor;//[Offset: 0x234, Size: 0x4]
	int PolyFlags;//[Offset: 0x238, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1]
	Model* Brush;//[Offset: 0x240, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x248, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x258, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x4b8, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x4c0, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x2a0, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x2a4, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x2a8, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x2ac, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2ad, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x2ae, Size: 0x1]
	enum LightmapType;//[Offset: 0x2af, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b0, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b1, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b1, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b1, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b1, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b1, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b1, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b1, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b1, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b2, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b2, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b2, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b2, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b2, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b2, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b2, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b2, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b3, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b3, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b3, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b3, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b3, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b3, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b3, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b3, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b4, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b4, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b4, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b4, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b4, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b4, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b5, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b5, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b5, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b5, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b5, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b5, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b5, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b5, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b6, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b6, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b6, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b6, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b6, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b6, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b6, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2b8, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x2ba, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2bb, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2bc, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x2c0, Size: 0x4]
	int MainPassDepthStencilValue;//[Offset: 0x2c4, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x2c8, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x2d8, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x2e8, Size: 0x4]
	int VisibilityId;//[Offset: 0x2ec, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2f0, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x300, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x301, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x302, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x303, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x308, Size: 0x4]
	float BoundsScale;//[Offset: 0x314, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x328, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x338, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x358, Size: 0x130]
	delegate OnComponentHit;//[Offset: 0x488, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x489, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x48a, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x48b, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x48c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x48e, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x48f, Size: 0x1]
	delegate OnClicked;//[Offset: 0x490, Size: 0x1]
	delegate OnReleased;//[Offset: 0x491, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x492, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x493, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x494, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x495, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x4b0, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x2398a27fb041
	void WakeRigidBody(FName BoneName);// 0x2397a27fb041
	void WakeAllRigidBodies();// 0x2396a27fb041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x2395a27fb041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x2394a27fb041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2393a27fb041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x2392a27fb041
	void SetSimulatePhysics(bool bSimulate);// 0x2391a27fb041
	void SetRenderMainPassStencil(bool bValue);// 0x2390a27fb041
	void SetRenderInMainPass(bool bValue);// 0x238fa27fb041
	void SetRenderCustomDepth(bool bValue);// 0x238ea27fb041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x238da27fb041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x238ca27fb041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x238ba27fb041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x238aa27fb041
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2389a27fb041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x2388a27fb041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2387a27fb041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2386a27fb041
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2385a27fb041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x2384a27fb041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2383a27fb041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2382a27fb041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2381a27fb041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2380a27fb041
	void SetMassScale(FName BoneName, float InMassScale);// 0x237fa27fb041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x237ea27fb041
	void SetMainPassStencilValue(int Value);// 0x237da27fb041
	void SetLinearDamping(float InDamping);// 0x237ca27fb041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x237ba27fb041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x237aa27fb041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x2379a27fb041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x2378a27fb041
	void SetEnableGravity(bool bGravityEnabled);// 0x2377a27fb041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x2376a27fb041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x2375a27fb041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x2374a27fb041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x2373a27fb041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2372a27fb041
	void SetCustomDepthStencilValue(int Value);// 0x2371a27fb041
	void SetCullDistance(float NewCullDistance);// 0x2370a27fb041
	void SetConstraintMode(byte ConstraintMode);// 0x236fa27fb041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x236ea27fb041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x236da27fb041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x236ca27fb041
	void SetCollisionObjectType(byte Channel);// 0x236ba27fb041
	void SetCollisionEnabled(byte NewType);// 0x236aa27fb041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2369a27fb041
	void SetCastShadow(bool NewCastShadow);// 0x2368a27fb041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x2367a27fb041
	void SetBoundsScale(float NewBoundsScale);// 0x2366a27fb041
	void SetAngularDamping(float InDamping);// 0x2365a27fb041
	void SetAllUseCCD(bool InUseCCD);// 0x2364a27fb041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2363a27fb041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2362a27fb041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x2361a27fb041
	void SetAllMassScale(float InMassScale);// 0x2360a27fb041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x235fa27fb041
	void PutRigidBodyToSleep(FName BoneName);// 0x235ea27fb041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x235da27fb041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x235ca27fb041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x235ba27fb041
	bool K2_IsQueryCollisionEnabled();// 0x235aa27fb041
	bool K2_IsPhysicsCollisionEnabled();// 0x2359a27fb041
	bool K2_IsCollisionEnabled();// 0x2358a27fb041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2357a27fb041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x2356a27fb041
	bool IsOverlappingActor(const Actor* Other);// 0x2355a27fb041
	bool IsGravityEnabled();// 0x2354a27fb041
	bool IsAnyRigidBodyAwake();// 0x2353a27fb041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2352a27fb041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x2351a27fb041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x234fa27fb041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x234ea27fb041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x234da27fb041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x234ca27fb041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x234ba27fb041
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x234aa27fb041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x2349a27fb041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2348a27fb041
	int GetNumMaterials();// 0x2347a27fb041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x2346a27fb041
	MaterialInterface* GetMaterial(int ElementIndex);// 0x2345a27fb041
	float GetMassScale(FName BoneName);// 0x2344a27fb041
	float GetMass();// 0x2343a27fb041
	float GetLinearDamping();// 0x2342a27fb041
	Vector GetInertiaTensor(FName BoneName);// 0x2341a27fb041
	bool GetGenerateOverlapEvents();// 0x2340a27fb041
	byte GetCollisionResponseToChannel(byte Channel);// 0x233fa27fb041
	FName GetCollisionProfileName();// 0x233ea27fb041
	byte GetCollisionObjectType();// 0x233da27fb041
	byte GetCollisionEnabled();// 0x233ca27fb041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x233ba27fb041
	Vector GetCenterOfMass(FName BoneName);// 0x233aa27fb041
	float GetAngularDamping();// 0x2339a27fb041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x2338a27fb041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x2337a27fb041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x2336a27fb041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x2335a27fb041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x2334a27fb041
	void ClearMoveIgnoreComponents();// 0x2333a27fb041
	void ClearMoveIgnoreActors();// 0x2332a27fb041
	bool CanCharacterStepUp(Pawn* Pawn);// 0x2331a27fb041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x2330a27fb041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x232fa27fb041
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x232ea27fb041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x232da27fb041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x232ca27fb041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x232ba27fb041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x232aa27fb041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x2329a27fb041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x2328a27fb041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x2327a27fb041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2326a27fb041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x2325a27fb041
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2324a27fb041

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130]
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x4999a27fb041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x4998a27fb041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x4997a27fb041
	PhysicalMaterial* GetPhysicalMaterial();// 0x4996a27fb041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x4995a27fb041
	Material* GetBaseMaterial();// 0x4994a27fb041

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 0x1]
	byte DepthCompare;//[Offset: 0x200, Size: 0x1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	byte MainPassStencilCompare;//[Offset: 0x202, Size: 0x1]
	byte MainPassStencilRefValue;//[Offset: 0x203, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x204, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x205, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	byte StencilCompare;//[Offset: 0x207, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x208, Size: 0x1]
	byte RefractionMode;//[Offset: 0x209, Size: 0x1]
	int BlendablePriority;//[Offset: 0x20c, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x218, Size: 0x4]
	Guid StateId;//[Offset: 0x21c, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x22c, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10]
	int LODBias;//[Offset: 0x58, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1]
	byte Filter;//[Offset: 0x5d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1]
	byte LODGroup;//[Offset: 0x5f, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte AddressX;//[Offset: 0xc1, Size: 0x1]
	byte AddressY;//[Offset: 0xc2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x4d75a27fb041
	int Blueprint_GetSizeX();// 0x4d74a27fb041

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileCount;//[Offset: 0x34, Size: 0x4]
	int TileSize;//[Offset: 0x38, Size: 0x4]
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4]
	int StreamLowMips;//[Offset: 0x40, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4]
	int GetTileSize();// 0x530ca27fb041
	int GetTileCount();// 0x530ba27fb041
	int GetTileBorderSize();// 0x530aa27fb041
	int GetSize();// 0x5309a27fb041

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 0xc]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	uint32 BuildHash;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 0x1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 0x10]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x9c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 0x8]
	int LODForCollision;//[Offset: 0xa8, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd0, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xfc, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x108, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x124, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x128, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x140, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x5372a27fb041
	int GetNumSections(int InLOD);// 0x5371a27fb041
	int GetNumLODs();// 0x5370a27fb041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x536fa27fb041
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x536ea27fb041
	int GetMaterialIndex(FName MaterialSlotName);// 0x536da27fb041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x536ca27fb041
	BoxSphereBounds GetBounds();// 0x536ba27fb041
	Box GetBoundingBox();// 0x536aa27fb041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x5369a27fb041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x5368a27fb041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x5367a27fb041
	void AddSocket(StaticMeshSocket* Socket);// 0x5366a27fb041
	FName AddMaterial(MaterialInterface* Material);// 0x5365a27fb041

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x4bffa27fb041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x4bfea27fb041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x4bfda27fb041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x4bfca27fb041

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x4bfba27fb041
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x4bfaa27fb041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x4bf9a27fb041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x4bf8a27fb041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x4bf7a27fb041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x4bf6a27fb041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x4bf5a27fb041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x4bf4a27fb041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x4bf3a27fb041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x4bf2a27fb041
	bool IsVertexValid(VertexID VertexID);// 0x4bf1a27fb041
	bool IsVertexOrphaned(VertexID VertexID);// 0x4bf0a27fb041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x4befa27fb041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x4beea27fb041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x4beda27fb041
	bool IsPolygonValid(PolygonID PolygonID);// 0x4beca27fb041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x4beba27fb041
	bool IsEmpty();// 0x4beaa27fb041
	bool IsEdgeValid(EdgeID EdgeID);// 0x4be9a27fb041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x4be8a27fb041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x4be7a27fb041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x4be6a27fb041
	Vector GetVertexPosition(VertexID VertexID);// 0x4be5a27fb041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x4be4a27fb041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x4be3a27fb041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x4be2a27fb041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x4be1a27fb041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x4be0a27fb041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x4bdfa27fb041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x4bdea27fb041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x4bdda27fb041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x4bdca27fb041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x4bdba27fb041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x4bdaa27fb041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x4bd9a27fb041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x4bd8a27fb041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x4bd7a27fb041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x4bd6a27fb041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x4bd5a27fb041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x4bd4a27fb041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x4bd3a27fb041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x4bd2a27fb041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x4bd1a27fb041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x4bd0a27fb041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x4bcfa27fb041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x4bcea27fb041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x4bcda27fb041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x4bcca27fb041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x4bcba27fb041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x4bcaa27fb041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x4bc9a27fb041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x4bc8a27fb041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x4bc7a27fb041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x4bc6a27fb041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x4bc5a27fb041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x4bc4a27fb041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x4bc3a27fb041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x4bc2a27fb041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x4bc1a27fb041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x4bc0a27fb041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x4bbfa27fb041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x4bbea27fb041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x4bbda27fb041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x4bbca27fb041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x4bbba27fb041
	void Empty();// 0x4bbaa27fb041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x4bb9a27fb041
	void DeleteVertex(VertexID VertexID);// 0x4bb8a27fb041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x4bb7a27fb041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x4bb6a27fb041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x4bb5a27fb041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x4bb4a27fb041
	void CreateVertexWithID(VertexID VertexID);// 0x4bb3a27fb041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x4bb2a27fb041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x4bb1a27fb041
	VertexID CreateVertex();// 0x4bb0a27fb041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4bafa27fb041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4baea27fb041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4bada27fb041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x4baca27fb041
	PolygonGroupID CreatePolygonGroup();// 0x4baba27fb041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x4baaa27fb041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x4ba9a27fb041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x4ba8a27fb041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x4ba7a27fb041

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x5294a27fb041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x5293a27fb041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x5292a27fb041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x5291a27fb041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x5290a27fb041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x528fa27fb041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x528ea27fb041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x528da27fb041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x528ca27fb041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x528ba27fb041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x528aa27fb041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x5289a27fb041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x5288a27fb041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x5287a27fb041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x5286a27fb041
	void CopyInterpParameters(MaterialInstance* Source);// 0x5285a27fb041

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x238, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x23c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x240, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x241, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x242, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x248, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x250, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x260, Size: 0x8]
	Controller* Controller;//[Offset: 0x268, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x274, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x280, Size: 0xc]
	void SpawnDefaultController();// 0x15b5a27fb041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x15b4a27fb041
	void ReceiveUnpossessed(Controller* OldController);// 0x15b3a27fb041
	void ReceivePossessed(Controller* NewController);// 0x15b2a27fb041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x15b1a27fb041
	void OnRep_PlayerState();// 0x15b0a27fb041
	void OnRep_Controller();// 0x15afa27fb041
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x15aea27fb041
	Vector K2_GetMovementInputVector();// 0x15ada27fb041
	bool IsPlayerControlled();// 0x15aca27fb041
	bool IsPawnControlled();// 0x15aba27fb041
	bool IsMoveInputIgnored();// 0x15aaa27fb041
	bool IsLocallyControlled();// 0x15a9a27fb041
	bool IsControlled();// 0x15a8a27fb041
	bool IsBotControlled();// 0x15a7a27fb041
	Vector GetPendingMovementInputVector();// 0x15a6a27fb041
	Vector GetNavAgentLocation();// 0x15a5a27fb041
	PawnMovementComponent* GetMovementComponent();// 0x15a4a27fb041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x15a3a27fb041
	Vector GetLastMovementInputVector();// 0x15a2a27fb041
	Rotator GetControlRotation();// 0x15a1a27fb041
	Controller* GetController();// 0x15a0a27fb041
	Rotator GetBaseAimRotation();// 0x159fa27fb041
	void DetachFromControllerPendingDestroy();// 0x159ea27fb041
	Vector ConsumeMovementInputVector();// 0x159da27fb041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x159ca27fb041
	void AddControllerYawInput(float Val);// 0x159ba27fb041
	void AddControllerRollInput(float Val);// 0x159aa27fb041
	void AddControllerPitchInput(float Val);// 0x1599a27fb041

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x238, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x248, Size: 0x10]
	FName StateName;//[Offset: 0x258, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x260, Size: 0x8]
	Character* Character;//[Offset: 0x270, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x278, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2b0, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	void UnPossess();// 0x185da27fb041
	void StopMovement();// 0x185ca27fb041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x185ba27fb041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x185aa27fb041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x1859a27fb041
	void SetControlRotation(out const Rotator NewRotation);// 0x1858a27fb041
	void ResetIgnoreMoveInput();// 0x1857a27fb041
	void ResetIgnoreLookInput();// 0x1856a27fb041
	void ResetIgnoreInputFlags();// 0x1855a27fb041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x1854a27fb041
	void ReceivePossess(Pawn* PossessedPawn);// 0x1853a27fb041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1852a27fb041
	void Possess(Pawn* InPawn);// 0x1851a27fb041
	void OnRep_PlayerState();// 0x1850a27fb041
	void OnRep_Pawn();// 0x184fa27fb041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x184ea27fb041
	Pawn* K2_GetPawn();// 0x184da27fb041
	bool IsPlayerController();// 0x184ca27fb041
	bool IsMoveInputIgnored();// 0x184ba27fb041
	bool IsLookInputIgnored();// 0x184aa27fb041
	bool IsLocalPlayerController();// 0x1849a27fb041
	bool IsLocalController();// 0x1848a27fb041
	Actor* GetViewTarget();// 0x1847a27fb041
	Rotator GetDesiredRotation();// 0x1846a27fb041
	Rotator GetControlRotation();// 0x1845a27fb041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x1844a27fb041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x1843a27fb041
	PlayerController* CastToPlayerController();// 0x1842a27fb041

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x230, Size: 0x4]
	int PlayerId;//[Offset: 0x234, Size: 0x4]
	byte Ping;//[Offset: 0x238, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23a, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23a, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23a, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23a, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23a, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23a, Size: 0x1]
	int StartTime;//[Offset: 0x23c, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x240, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x250, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x260, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x290, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x308, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x14f4a27fb041
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x14f3a27fb041
	void OnRep_UniqueId();// 0x14f2a27fb041
	void OnRep_Score();// 0x14f1a27fb041
	void OnRep_PlayerName();// 0x14f0a27fb041
	void OnRep_PlayerId();// 0x14efa27fb041
	void OnRep_bIsInactive();// 0x14eea27fb041
	FString GetPlayerName();// 0x14eda27fb041

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x290, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x298, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2a0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a8, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d8, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x308, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x30c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x320, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x330, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x334, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x338, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x33c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x340, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x340, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x340, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x340, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x340, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x341, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x341, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x341, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x344, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x348, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x34c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x350, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x354, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x358, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x360, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x380, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x390, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3a0, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3e0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x420, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x430, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x15e6a27fb041
	void StopJumping();// 0x15e5a27fb041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x15e4a27fb041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x15e3a27fb041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x15e2a27fb041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x15e1a27fb041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x15e0a27fb041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x15dfa27fb041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x15dea27fb041
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x15dda27fb041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x15dca27fb041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x15dba27fb041
	void OnRep_RootMotion();// 0x15daa27fb041
	void OnRep_ReplicatedBasedMovement();// 0x15d9a27fb041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x15d8a27fb041
	void OnRep_IsCrouched();// 0x15d7a27fb041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x15d6a27fb041
	void OnLanded(out const HitResult Hit);// 0x15d5a27fb041
	void OnJumped();// 0x15d4a27fb041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x15d3a27fb041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x15d2a27fb041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x15d1a27fb041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x15d0a27fb041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x15cfa27fb041
	void Jump();// 0x15cea27fb041
	bool IsPlayingRootMotion();// 0x15cda27fb041
	bool IsPlayingNetworkedRootMotionMontage();// 0x15cca27fb041
	bool IsJumpProvidingForce();// 0x15cba27fb041
	bool HasAnyRootMotion();// 0x15caa27fb041
	AnimMontage* GetCurrentMontage();// 0x15c9a27fb041
	Vector GetBaseTranslationOffset();// 0x15c8a27fb041
	Rotator GetBaseRotationOffsetRotator();// 0x15c7a27fb041
	float GetAnimRootMotionTranslationScale();// 0x15c6a27fb041
	void Crouch(bool bClientSimulation);// 0x15c5a27fb041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x15c4a27fb041
	void ClientCheatWalk();// 0x15c3a27fb041
	void ClientCheatGhost();// 0x15c2a27fb041
	void ClientCheatFly();// 0x15c1a27fb041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x15bea27fb041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x15bda27fb041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x15bca27fb041
	void ClientAckGoodMove(float Timestamp);// 0x15bba27fb041
	bool CanJumpInternal();// 0x15baa27fb041
	bool CanJump();// 0x15b9a27fb041
	bool CanCrouch();// 0x15b8a27fb041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x15b7a27fb041

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x4ca6a27fb041

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x4ca5a27fb041

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x4d71a27fb041

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x4d70a27fb041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x4d6fa27fb041

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	int TrackIndex;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x3319a27fb041
	FString GetNotifyName();// 0x3318a27fb041

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6f0, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x6f8, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x700, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x708, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x710, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x738, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x744, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x770, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x780, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x790, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x7c0, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x7c4, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x7c5, Size: 0x1]
	byte AnimationMode;//[Offset: 0x7c7, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c9, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c9, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c9, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c9, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c9, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ca, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ca, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ca, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ca, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ca, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cb, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cb, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cb, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cb, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cb, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cb, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cb, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x7d0, Size: 0x2]
	enum MassMode;//[Offset: 0x7d2, Size: 0x1]
	float UniformMass;//[Offset: 0x7d4, Size: 0x4]
	float TotalMass;//[Offset: 0x7d8, Size: 0x4]
	float Density;//[Offset: 0x7dc, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x7e0, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x7e4, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x7e8, Size: 0x4]
	float BendingStiffness;//[Offset: 0x7ec, Size: 0x4]
	float AreaStiffness;//[Offset: 0x7f0, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x7f4, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x7f8, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x7fc, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x800, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x810, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x820, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x830, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x910, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x914, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x920, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x980, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xa50, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x2c32a27fb041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x2c31a27fb041
	void ToggleDisablePostProcessBlueprint();// 0x2c30a27fb041
	void TermBodiesBelow(FName ParentBoneName);// 0x2c2fa27fb041
	void SuspendClothingSimulation();// 0x2c2ea27fb041
	void Stop();// 0x2c2da27fb041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x2c2ca27fb041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x2c2ba27fb041
	void SetTeleportRotationThreshold(float Threshold);// 0x2c2aa27fb041
	void SetTeleportDistanceThreshold(float Threshold);// 0x2c29a27fb041
	void SetPosition(float InPos, bool bFireNotifies);// 0x2c28a27fb041
	void SetPlayRate(float Rate);// 0x2c27a27fb041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x2c26a27fb041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x2c25a27fb041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x2c24a27fb041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x2c23a27fb041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x2c22a27fb041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x2c21a27fb041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x2c20a27fb041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x2c1fa27fb041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x2c1ea27fb041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x2c1da27fb041
	void SetClothMaxDistanceScale(float Scale);// 0x2c1ca27fb041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x2c1ba27fb041
	void SetAnimClass(class Object NewClass);// 0x2c1aa27fb041
	void SetAnimationMode(byte InAnimationMode);// 0x2c19a27fb041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x2c18a27fb041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x2c17a27fb041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x2c16a27fb041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x2c15a27fb041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x2c14a27fb041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2c13a27fb041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2c12a27fb041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x2c11a27fb041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x2c10a27fb041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2c0fa27fb041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x2c0ea27fb041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x2c0da27fb041
	void ResumeClothingSimulation();// 0x2c0ca27fb041
	void ResetClothTeleportMode();// 0x2c0ba27fb041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x2c0aa27fb041
	void ResetAllowedAnimCurveEvaluation();// 0x2c09a27fb041
	void ResetAllBodiesSimulatePhysics();// 0x2c08a27fb041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x2c07a27fb041
	void Play(bool bLooping);// 0x2c06a27fb041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x2c05a27fb041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x2c04a27fb041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x2c03a27fb041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x2c02a27fb041
	bool IsPlaying();// 0x2c01a27fb041
	bool IsClothingSimulationSuspended();// 0x2c00a27fb041
	bool IsBodyGravityEnabled(FName BoneName);// 0x2bffa27fb041
	bool HasValidAnimationInstance();// 0x2bfea27fb041
	float GetTeleportRotationThreshold();// 0x2bfda27fb041
	float GetTeleportDistanceThreshold();// 0x2bfca27fb041
	Vector GetSkeletalCenterOfMass();// 0x2bfba27fb041
	AnimInstance* GetPostProcessInstance();// 0x2bfaa27fb041
	float GetPosition();// 0x2bf9a27fb041
	float GetPlayRate();// 0x2bf8a27fb041
	float GetMorphTarget(FName MorphTargetName);// 0x2bf7a27fb041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x2bf6a27fb041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x2bf5a27fb041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x2bf4a27fb041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x2bf3a27fb041
	bool GetDisablePostProcessBlueprint();// 0x2bf2a27fb041
	bool GetDisableAnimCurves();// 0x2bf1a27fb041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x2bf0a27fb041
	float GetClothMaxDistanceScale();// 0x2befa27fb041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x2beea27fb041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x2beda27fb041
	AnimInstance* GetAnimInstance();// 0x2beca27fb041
	class Object GetAnimClass();// 0x2beba27fb041
	byte GetAnimationMode();// 0x2beaa27fb041
	bool GetAllowRigidBodyAnimNode();// 0x2be9a27fb041
	bool GetAllowedAnimCurveEvaluate();// 0x2be8a27fb041
	void ForceClothNextUpdateTeleportAndReset();// 0x2be7a27fb041
	void ForceClothNextUpdateTeleport();// 0x2be6a27fb041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x2be5a27fb041
	void ClearMorphTargets();// 0x2be4a27fb041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x2be3a27fb041
	void BindClothToMasterPoseComponent();// 0x2be2a27fb041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x2be1a27fb041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x2be0a27fb041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x2bdfa27fb041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2bdea27fb041

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x4e0, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x4e8, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x4f0, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5f8, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x600, Size: 0x4]
	int MinLodModel;//[Offset: 0x604, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x614, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x620, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x654, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x656, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x656, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x656, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x656, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x656, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x656, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x657, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x657, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x657, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x657, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x657, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x657, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x657, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x657, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x658, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x658, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x658, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x658, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x658, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x658, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x659, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x65c, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x670, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x690, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x2bdda27fb041
	void UnHideBoneByName(FName BoneName);// 0x2bdca27fb041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2bdba27fb041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2bdaa27fb041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x2bd9a27fb041
	void ShowAllMaterialSections(int LODIndex);// 0x2bd8a27fb041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x2bd7a27fb041
	bool SetSkinWeightProfile(FName InProfileName);// 0x2bd6a27fb041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x2bd5a27fb041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x2bd4a27fb041
	void SetRenderStatic(bool bNewValue);// 0x2bd3a27fb041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x2bd2a27fb041
	void SetMinLOD(int InNewMinLOD);// 0x2bd1a27fb041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x2bd0a27fb041
	void SetForcedLOD(int InNewForcedLOD);// 0x2bcfa27fb041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x2bcea27fb041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x2bcda27fb041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x2bcca27fb041
	bool IsUsingSkinWeightProfile();// 0x2bcba27fb041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x2bcaa27fb041
	bool IsBoneHiddenByName(FName BoneName);// 0x2bc9a27fb041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x2bc8a27fb041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x2bc7a27fb041
	FName GetSocketBoneName(FName InSocketName);// 0x2bc6a27fb041
	Vector GetRefPosePosition(int BoneIndex);// 0x2bc5a27fb041
	FName GetParentBone(FName BoneName);// 0x2bc4a27fb041
	int GetNumLODs();// 0x2bc3a27fb041
	int GetNumBones();// 0x2bc2a27fb041
	int GetForcedLOD();// 0x2bc1a27fb041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x2bc0a27fb041
	FName GetCurrentSkinWeightProfileName();// 0x2bbfa27fb041
	FName GetBoneName(int BoneIndex);// 0x2bbea27fb041
	int GetBoneIndex(FName BoneName);// 0x2bbda27fb041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x2bbca27fb041
	void ClearVertexColorOverride(int LODIndex);// 0x2bbba27fb041
	void ClearSkinWeightProfile();// 0x2bbaa27fb041
	void ClearSkinWeightOverride(int LODIndex);// 0x2bb9a27fb041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x2bb8a27fb041

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x4b8, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d8, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x23a5a27fb041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x23a4a27fb041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x23a3a27fb041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x23a2a27fb041
	FName[] GetMaterialSlotNames();// 0x23a1a27fb041
	MaterialInterface*[] GetMaterials();// 0x23a0a27fb041
	int GetMaterialIndex(FName MaterialSlotName);// 0x239fa27fb041

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4]
	byte LODGroup;//[Offset: 0x13c, Size: 0x1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x13d, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x13e, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x13f, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x531da27fb041
	int NumSockets();// 0x531ca27fb041
	FString[] K2_GetAllMorphTargetNames();// 0x531ba27fb041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x531aa27fb041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x5319a27fb041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x5318a27fb041
	BoxSphereBounds GetImportedBounds();// 0x5317a27fb041
	BoxSphereBounds GetBounds();// 0x5316a27fb041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x5315a27fb041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x5314a27fb041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x5313a27fb041

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x5323a27fb041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x5322a27fb041

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x3021a27fb041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3020a27fb041
	Pawn* TryGetPawnOwner();// 0x301fa27fb041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x301ea27fb041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x301da27fb041
	void SetRootMotionMode(byte Value);// 0x301ca27fb041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x301ba27fb041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x301aa27fb041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x3019a27fb041
	void SavePoseSnapshot(FName SnapshotName);// 0x3018a27fb041
	void ResetDynamics(enum InTeleportType);// 0x3017a27fb041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x3016a27fb041
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x3015a27fb041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x3014a27fb041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x3013a27fb041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x3012a27fb041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x3011a27fb041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x3010a27fb041
	void Montage_Resume(const AnimMontage* Montage);// 0x300fa27fb041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x300ea27fb041
	void Montage_Pause(const AnimMontage* Montage);// 0x300da27fb041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x300ca27fb041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x300ba27fb041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x300aa27fb041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x3009a27fb041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x3008a27fb041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x3007a27fb041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3006a27fb041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3005a27fb041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3004a27fb041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3003a27fb041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3002a27fb041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3001a27fb041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3000a27fb041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x2fffa27fb041
	bool IsAnyMontagePlaying();// 0x2ffea27fb041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x2ffda27fb041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x2ffca27fb041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x2ffba27fb041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x2ffaa27fb041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x2ff9a27fb041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x2ff8a27fb041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x2ff7a27fb041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x2ff6a27fb041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x2ff5a27fb041
	bool GetPropagateNotifiesToLinkedInstances();// 0x2ff4a27fb041
	SkeletalMeshComponent* GetOwningComponent();// 0x2ff3a27fb041
	Actor* GetOwningActor();// 0x2ff2a27fb041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x2ff1a27fb041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x2ff0a27fb041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x2fefa27fb041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x2feea27fb041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x2feda27fb041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x2feca27fb041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x2feba27fb041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x2feaa27fb041
	float GetInstanceMachineWeight(int MachineIndex);// 0x2fe9a27fb041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x2fe8a27fb041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x2fe7a27fb041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x2fe6a27fb041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x2fe5a27fb041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x2fe4a27fb041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x2fe3a27fb041
	float GetCurveValue(FName CurveName);// 0x2fe2a27fb041
	FName GetCurrentStateName(int MachineIndex);// 0x2fe1a27fb041
	AnimMontage* GetCurrentActiveMontage();// 0x2fe0a27fb041
	void GetAllCurveNames(out FName[] OutNames);// 0x2fdfa27fb041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x2fdea27fb041
	void ClearMorphTargets();// 0x2fdda27fb041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x2fdca27fb041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x2fdba27fb041
	void BlueprintPostEvaluateAnimation();// 0x2fdaa27fb041
	void BlueprintLinkedAnimationLayersInitialized();// 0x2fd9a27fb041
	void BlueprintInitializeAnimation();// 0x2fd8a27fb041
	void BlueprintBeginPlay();// 0x2fd7a27fb041

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x4d7aa27fb041

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x4d73a27fb041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x4d72a27fb041

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x4c04a27fb041
	void PhysicsAssetUpdated();// 0x4c03a27fb041
	void EnableGravityOverride(out const Vector InVector);// 0x4c02a27fb041
	void DisableGravityOverride();// 0x4c01a27fb041
	void ClothConfigUpdated();// 0x4c00a27fb041

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x2d8ca27fb041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2d8ba27fb041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x2d8aa27fb041
	FString GetNotifyName();// 0x2d89a27fb041

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x150, Size: 0x8]
	float GravityScale;//[Offset: 0x158, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x15c, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x160, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x164, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x168, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x16c, Size: 0x4]
	byte MovementMode;//[Offset: 0x170, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x171, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x172, Size: 0x1]
	float GroundFriction;//[Offset: 0x174, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1a0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1a4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x1a8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x1ac, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1b0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1b4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1b8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1bc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1c0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1c4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1c8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1cc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1d0, Size: 0x4]
	float AirControl;//[Offset: 0x1d4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1d8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1dc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1e0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1e4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1e8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1ec, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1f0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1f4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x201, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x202, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x202, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x202, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x202, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x208, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x210, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x214, Size: 0x4]
	float Mass;//[Offset: 0x218, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x21c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x220, Size: 0x4]
	float PushForceFactor;//[Offset: 0x224, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x228, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x22c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x230, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x234, Size: 0x4]
	float RepulsionForce;//[Offset: 0x238, Size: 0x4]
	Vector Acceleration;//[Offset: 0x23c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x260, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x26c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x278, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x27c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x280, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x284, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x290, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x29c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x2ac, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2b0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2b4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2b8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2bc, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2c0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2c4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2c8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2cc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2d0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2d4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2d8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2e0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2e4, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2e8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2ec, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2f0, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2f4, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2f8, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2fc, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x300, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x394, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x395, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x396, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x397, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x397, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x397, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x397, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x397, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x398, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x398, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x398, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x398, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x398, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x398, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x398, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x399, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x399, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x399, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x399, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x399, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x399, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x399, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39a, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39a, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39a, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39a, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39a, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39a, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3ac, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3b0, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3bc, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3c0, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3c4, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3c8, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3cc, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3d0, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x480, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x484, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x488, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x48c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x490, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x494, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x498, Size: 0x38]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4e8, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4f0, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5c0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x600, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x3133a27fb041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x3132a27fb041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x3131a27fb041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x3130a27fb041
	void SetGroupsToIgnore(int GroupFlags);// 0x312fa27fb041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x312ea27fb041
	void SetGroupsToAvoid(int GroupFlags);// 0x312da27fb041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x312ca27fb041
	void SetAvoidanceGroup(int GroupFlags);// 0x312ba27fb041
	void SetAvoidanceEnabled(bool bEnable);// 0x312aa27fb041
	float K2_GetWalkableFloorZ();// 0x3129a27fb041
	float K2_GetWalkableFloorAngle();// 0x3128a27fb041
	float K2_GetModifiedMaxAcceleration();// 0x3127a27fb041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x3126a27fb041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x3125a27fb041
	bool IsWalking();// 0x3124a27fb041
	bool IsWalkable(out const HitResult Hit);// 0x3123a27fb041
	float GetValidPerchRadius();// 0x3122a27fb041
	float GetPerchRadiusThreshold();// 0x3121a27fb041
	PrimitiveComponent* GetMovementBase();// 0x3120a27fb041
	float GetMinAnalogSpeed();// 0x311fa27fb041
	float GetMaxJumpHeightWithJumpTime();// 0x311ea27fb041
	float GetMaxJumpHeight();// 0x311da27fb041
	float GetMaxBrakingDeceleration();// 0x311ca27fb041
	float GetMaxAcceleration();// 0x311ba27fb041
	Vector GetLastUpdateVelocity();// 0x311aa27fb041
	Rotator GetLastUpdateRotation();// 0x3119a27fb041
	Vector GetLastUpdateLocation();// 0x3118a27fb041
	Vector GetImpartedMovementBaseVelocity();// 0x3117a27fb041
	Vector GetCurrentAcceleration();// 0x3116a27fb041
	Character* GetCharacterOwner();// 0x3115a27fb041
	float GetAnalogInputModifier();// 0x3114a27fb041
	void DisableMovement();// 0x3113a27fb041
	void ClearAccumulatedForces();// 0x3112a27fb041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3111a27fb041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x3110a27fb041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x310fa27fb041
	void AddForce(Vector Force);// 0x310ea27fb041

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x138, Size: 0x8]
	Vector K2_GetInputVector();// 0x310da27fb041
	bool IsMoveInputIgnored();// 0x310ca27fb041
	Vector GetPendingInputVector();// 0x310ba27fb041
	Pawn* GetPawnOwner();// 0x310aa27fb041
	Vector GetLastInputVector();// 0x3109a27fb041
	Vector ConsumeInputVector();// 0x3108a27fb041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x3107a27fb041

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf8, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x128, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12c, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x12d, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x130, Size: 0x8]
	void StopMovementKeepPathing();// 0x3106a27fb041
	void StopActiveMovement();// 0x3105a27fb041
	bool IsSwimming();// 0x3104a27fb041
	bool IsMovingOnGround();// 0x3103a27fb041
	bool IsFlying();// 0x3102a27fb041
	bool IsFalling();// 0x3101a27fb041
	bool IsCrouching();// 0x3100a27fb041

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb8, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 0x8]
	Vector Velocity;//[Offset: 0xcc, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xf3, Size: 0x1]
	void StopMovementImmediately();// 0xeb3a27fb041
	void SnapUpdatedComponentToPlane();// 0xeb2a27fb041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xeb1a27fb041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xeb0a27fb041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xeafa27fb041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xeaea27fb041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xeada27fb041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xeaca27fb041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xeaba27fb041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xeaaa27fb041
	float K2_GetModifiedMaxSpeed();// 0xea9a27fb041
	float K2_GetMaxSpeedModifier();// 0xea8a27fb041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xea7a27fb041
	Vector GetPlaneConstraintOrigin();// 0xea6a27fb041
	Vector GetPlaneConstraintNormal();// 0xea5a27fb041
	enum GetPlaneConstraintAxisSetting();// 0xea3a27fb041
	PhysicsVolume* GetPhysicsVolume();// 0xea2a27fb041
	float GetMaxSpeed();// 0xea1a27fb041
	float GetGravityZ();// 0xea0a27fb041
	Vector ConstrainNormalToPlane(Vector Normal);// 0xe9fa27fb041
	Vector ConstrainLocationToPlane(Vector Location);// 0xe9ea27fb041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xe9da27fb041

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x4d0, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x4d4, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x3f04a27fb041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x3f03a27fb041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x3f02a27fb041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3f01a27fb041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3f00a27fb041
	float GetUnscaledCapsuleRadius();// 0x3effa27fb041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x3efea27fb041
	float GetUnscaledCapsuleHalfHeight();// 0x3efda27fb041
	float GetShapeScale();// 0x3efca27fb041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3efba27fb041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3efaa27fb041
	float GetScaledCapsuleRadius();// 0x3ef9a27fb041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x3ef8a27fb041
	float GetScaledCapsuleHalfHeight();// 0x3ef7a27fb041

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x4b8, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x4c0, Size: 0x8]
	Color ShapeColor;//[Offset: 0x4c8, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4cc, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4cc, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4cc, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2c0, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c8, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2d0, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d8, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2e0, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e8, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2f4, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x30c, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x318, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x328, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x33c, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x340, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x34c, Size: 0xc]
	int ClientCap;//[Offset: 0x358, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x360, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x368, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x370, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x378, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f8, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f9, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x438, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x440, Size: 0x8]
	float InputYawScale;//[Offset: 0x454, Size: 0x4]
	float InputPitchScale;//[Offset: 0x458, Size: 0x4]
	float InputRollScale;//[Offset: 0x45c, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x460, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x460, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x460, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x460, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x460, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x464, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x468, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x478, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x479, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x47a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x47b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x47c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x480, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x482, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x510, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x518, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x530, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x588, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x598, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x18efa27fb041
	bool WasInputKeyJustPressed(Key Key);// 0x18eea27fb041
	void ToggleSpeaking(bool bInSpeaking);// 0x18eda27fb041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x18eca27fb041
	void SwitchLevel(FString URL);// 0x18eba27fb041
	void StopHapticEffect(enum Hand);// 0x18eaa27fb041
	void StartFire(byte FireModeNum);// 0x18e9a27fb041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x18e8a27fb041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x18e7a27fb041
	void SetName(FString S);// 0x18e6a27fb041
	void SetMouseLocation(const int X, const int Y);// 0x18e5a27fb041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x18e3a27fb041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x18e2a27fb041
	void SetDisableHaptics(bool bNewDisabled);// 0x18e1a27fb041
	void SetControllerLightColor(Color Color);// 0x18e0a27fb041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x18dfa27fb041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x18dea27fb041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x18dda27fb041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x18dca27fb041
	void ServerViewPrevPlayer();// 0x18dba27fb041
	void ServerViewNextPlayer();// 0x18daa27fb041
	void ServerVerifyViewTarget();// 0x18d9a27fb041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x18d8a27fb041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x18d6a27fb041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x18d5a27fb041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x18d4a27fb041
	void ServerToggleAILogging();// 0x18d3a27fb041
	void ServerShortTimeout();// 0x18d2a27fb041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x18d1a27fb041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x18d0a27fb041
	void ServerRestartPlayer();// 0x18cfa27fb041
	void ServerPause();// 0x18cea27fb041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x18cda27fb041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x18cca27fb041
	void ServerExecRPC(FString Msg);// 0x18cba27fb041
	void ServerExec(FString Msg);// 0x18caa27fb041
	void ServerCheckClientPossessionReliable();// 0x18c9a27fb041
	void ServerCheckClientPossession();// 0x18c8a27fb041
	void ServerChangeName(FString S);// 0x18c7a27fb041
	void ServerCamera(FName NewMode);// 0x18c6a27fb041
	void ServerAcknowledgePossession(Pawn* P);// 0x18c5a27fb041
	void SendToConsole(FString Command);// 0x18c4a27fb041
	void RestartLevel();// 0x18c3a27fb041
	void ResetControllerLightColor();// 0x18c2a27fb041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x18c1a27fb041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x18bfa27fb041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x18bda27fb041
	void Pause();// 0x18bca27fb041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x18bba27fb041
	void LocalTravel(FString URL);// 0x18baa27fb041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x18b9a27fb041
	bool IsInputKeyDown(Key Key);// 0x18b8a27fb041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x18b7a27fb041
	SpectatorPawn* GetSpectatorPawn();// 0x18b6a27fb041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x18b5a27fb041
	Vector GetInputVectorKeyState(Key Key);// 0x18b4a27fb041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x18b3a27fb041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x18b2a27fb041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x18b1a27fb041
	float GetInputKeyTimeDown(Key Key);// 0x18b0a27fb041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x18aea27fb041
	float GetInputAnalogKeyState(Key Key);// 0x18ada27fb041
	HUD* GetHUD();// 0x18aca27fb041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x18aba27fb041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x18aaa27fb041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x18a9a27fb041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x18a8a27fb041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x18a7a27fb041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x18a5a27fb041
	Vector GetFocalLocation();// 0x18a4a27fb041
	void FOV(float NewFOV);// 0x18a3a27fb041
	void EnableCheats();// 0x18a2a27fb041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x18a1a27fb041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x18a0a27fb041
	void ConsoleKey(Key Key);// 0x189fa27fb041
	void ClientWasKicked(const FText KickReason);// 0x189ea27fb041
	void ClientVoiceHandshakeComplete();// 0x189da27fb041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x189ba27fb041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x189aa27fb041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x1899a27fb041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1898a27fb041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1897a27fb041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x1896a27fb041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x1895a27fb041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x1894a27fb041
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x1893a27fb041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x1892a27fb041
	void ClientStartOnlineSession();// 0x1891a27fb041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x1890a27fb041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x188da27fb041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x188ca27fb041
	void ClientSetHUD(class HUD NewHUDClass);// 0x188ba27fb041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x188aa27fb041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x1889a27fb041
	void ClientSetCameraMode(FName NewCamMode);// 0x1888a27fb041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x1887a27fb041
	void ClientSetBlockOnAsyncLoading();// 0x1886a27fb041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x1885a27fb041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x1884a27fb041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x1883a27fb041
	void ClientRestart(Pawn* NewPawn);// 0x1882a27fb041
	void ClientReset();// 0x1881a27fb041
	void ClientRepObjRef(Object* Object);// 0x1880a27fb041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x187fa27fb041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x187ea27fb041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x187da27fb041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x187ca27fb041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x187ba27fb041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x1879a27fb041
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x1878a27fb041
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x1877a27fb041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x1875a27fb041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x1874a27fb041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x1873a27fb041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x1872a27fb041
	void ClientIgnoreLookInput(bool bIgnore);// 0x1871a27fb041
	void ClientGotoState(FName NewState);// 0x1870a27fb041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x186fa27fb041
	void ClientForceGarbageCollection();// 0x186ea27fb041
	void ClientFlushLevelStreaming();// 0x186da27fb041
	void ClientEndOnlineSession();// 0x186ca27fb041
	void ClientEnableNetworkVoice(bool bEnable);// 0x186ba27fb041
	void ClientCommitMapChange();// 0x186aa27fb041
	void ClientClearCameraLensEffects();// 0x1869a27fb041
	void ClientCapBandwidth(int Cap);// 0x1868a27fb041
	void ClientCancelPendingMapChange();// 0x1867a27fb041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x1866a27fb041
	void ClearAudioListenerOverride();// 0x1865a27fb041
	void ClearAudioListenerAttenuationOverride();// 0x1864a27fb041
	bool CanRestartPlayer();// 0x1863a27fb041
	void Camera(FName NewMode);// 0x1862a27fb041
	void AddYawInput(float Val);// 0x1861a27fb041
	void AddRollInput(float Val);// 0x1860a27fb041
	void AddPitchInput(float Val);// 0x185fa27fb041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x185ea27fb041

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x130, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x140, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x150, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x178, Size: 0x10]
	Margin Padding;//[Offset: 0x188, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x198, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1a8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1b8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1c8, Size: 0x8]
	int Priority;//[Offset: 0x1d0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d4, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1e0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1e8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1f0, Size: 0x10]
	void UnregisterInputComponent();// 0x1c98a27fb041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x1c97a27fb041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x1c96a27fb041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x1c95a27fb041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x1c94a27fb041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1c93a27fb041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x1c92a27fb041
	void StopListeningForAllInputActions();// 0x1c91a27fb041
	void StopAnimationsAndLatentActions();// 0x1c90a27fb041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x1c8fa27fb041
	void StopAllAnimations();// 0x1c8ea27fb041
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x1c8da27fb041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x1c8ca27fb041
	void SetPadding(Margin InPadding);// 0x1c8ba27fb041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x1c8aa27fb041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x1c89a27fb041
	void SetInputActionPriority(int NewPriority);// 0x1c88a27fb041
	void SetInputActionBlocking(bool bShouldBlock);// 0x1c87a27fb041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x1c86a27fb041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x1c85a27fb041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x1c84a27fb041
	void SetAnchorsInViewport(Anchors Anchors);// 0x1c83a27fb041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x1c82a27fb041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x1c81a27fb041
	void RemoveFromViewport();// 0x1c80a27fb041
	void RegisterInputComponent();// 0x1c7fa27fb041
	void PreConstruct(bool IsDesignTime);// 0x1c7ea27fb041
	void PlaySound(SoundBase* SoundToPlay);// 0x1c7da27fb041
	void PlayEnterAnim();// 0x1c7ca27fb041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1c7ba27fb041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x1c7aa27fb041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x1c79a27fb041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1c77a27fb041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x1c76a27fb041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c75a27fb041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c74a27fb041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x1c73a27fb041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c72a27fb041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c71a27fb041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x1c70a27fb041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c6fa27fb041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c6ea27fb041
	void OnPaint(out PaintContext Context);// 0x1c6da27fb041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c6ca27fb041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c6ba27fb041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1c6aa27fb041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c69a27fb041
	void OnMouseCaptureLost();// 0x1c68a27fb041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c67a27fb041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c66a27fb041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x1c65a27fb041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x1c63a27fb041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c62a27fb041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c61a27fb041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x1c60a27fb041
	void OnInitialized();// 0x1c5fa27fb041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x1c5ea27fb041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x1c5da27fb041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c5ca27fb041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c5ba27fb041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c5aa27fb041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c59a27fb041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x1c58a27fb041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c57a27fb041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x1c56a27fb041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1c55a27fb041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x1c54a27fb041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x1c52a27fb041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x1c51a27fb041
	bool IsPlayingAnimation();// 0x1c50a27fb041
	bool IsListeningForInputAction(FName ActionName);// 0x1c4fa27fb041
	bool IsInViewport();// 0x1c4ea27fb041
	bool IsInteractable();// 0x1c4da27fb041
	bool IsAnyAnimationPlaying();// 0x1c4ca27fb041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x1c4ba27fb041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x1c4aa27fb041
	Pawn* GetOwningPlayerPawn();// 0x1c49a27fb041
	HUD* GetOwningHUD();// 0x1c48a27fb041
	bool GetIsVisible();// 0x1c47a27fb041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x1c46a27fb041
	Anchors GetAnchorsInViewport();// 0x1c44a27fb041
	Vector2D GetAlignmentInViewport();// 0x1c43a27fb041
	void DoPlayEnterAnim(bool InPlayFlag);// 0x1c42a27fb041
	void Destruct();// 0x1c41a27fb041
	void Construct();// 0x1c40a27fb041
	void CancelLatentActions();// 0x1c3fa27fb041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x1c3ea27fb041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x1c3da27fb041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x1c3ba27fb041
	void AddToViewport(int ZOrder);// 0x1c3aa27fb041
	bool AddToPlayerScreen(int ZOrder);// 0x1c39a27fb041

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x118, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x1b67a27fb041
	void SetUserFocus(PlayerController* PlayerController);// 0x1b66a27fb041
	void SetToolTipText(out const FText InToolTipText);// 0x1b65a27fb041
	void SetToolTip(Widget* Widget);// 0x1b64a27fb041
	void SetRenderTranslation(Vector2D Translation);// 0x1b63a27fb041
	void SetRenderTransformPivot(Vector2D Pivot);// 0x1b62a27fb041
	void SetRenderTransformAngle(float Angle);// 0x1b61a27fb041
	void SetRenderTransform(WidgetTransform InTransform);// 0x1b5fa27fb041
	void SetRenderShear(Vector2D Shear);// 0x1b5ea27fb041
	void SetRenderScale(Vector2D Scale);// 0x1b5da27fb041
	void SetRenderOpacity(float InOpacity);// 0x1b5ca27fb041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x1b5ba27fb041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x1b5aa27fb041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x1b59a27fb041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x1b58a27fb041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x1b57a27fb041
	void SetKeyboardFocus();// 0x1b56a27fb041
	void SetIsEnabled(bool bInIsEnabled);// 0x1b55a27fb041
	void SetFocus();// 0x1b54a27fb041
	void SetCursor(byte InCursor);// 0x1b53a27fb041
	void SetClipping(enum InClipping);// 0x1b52a27fb041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x1b50a27fb041
	void ResetCursor();// 0x1b4fa27fb041
	void RemoveFromParent();// 0x1b4ea27fb041
	EventReply OnReply__DelegateSignature();// 0x1b4da27fb041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1b49a27fb041
	bool IsVisible();// 0x1b48a27fb041
	bool IsHovered();// 0x1b47a27fb041
	void InvalidateLayoutAndVolatility();// 0x1b46a27fb041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x1b45a27fb041
	bool HasUserFocus(PlayerController* PlayerController);// 0x1b44a27fb041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x1b43a27fb041
	bool HasMouseCapture();// 0x1b42a27fb041
	bool HasKeyboardFocus();// 0x1b41a27fb041
	bool HasFocusedDescendants();// 0x1b40a27fb041
	bool HasAnyUserFocus();// 0x1b3fa27fb041
	Widget* GetWidget__DelegateSignature();// 0x1b3ea27fb041
	enum GetVisibility();// 0x1b3da27fb041
	Geometry GetTickSpaceGeometry();// 0x1b3ca27fb041
	FText GetText__DelegateSignature();// 0x1b3ba27fb041
	enum GetSlateVisibility__DelegateSignature();// 0x1b39a27fb041
	SlateColor GetSlateColor__DelegateSignature();// 0x1b38a27fb041
	SlateBrush GetSlateBrush__DelegateSignature();// 0x1b2fa27fb041
	float GetRenderTransformAngle();// 0x1b2ea27fb041
	float GetRenderOpacity();// 0x1b2da27fb041
	PanelWidget* GetParent();// 0x1b2ca27fb041
	Geometry GetPaintSpaceGeometry();// 0x1b2ba27fb041
	PlayerController* GetOwningPlayer();// 0x1b2aa27fb041
	LocalPlayer* GetOwningLocalPlayer();// 0x1b29a27fb041
	byte GetMouseCursor__DelegateSignature();// 0x1b28a27fb041
	LinearColor GetLinearColor__DelegateSignature();// 0x1b27a27fb041
	bool GetIsEnabled();// 0x1b26a27fb041
	int GetInt32__DelegateSignature();// 0x1b25a27fb041
	GameInstance* GetGameInstance();// 0x1b24a27fb041
	float GetFloat__DelegateSignature();// 0x1b23a27fb041
	Vector2D GetDesiredSize();// 0x1b22a27fb041
	enum GetClipping();// 0x1b20a27fb041
	enum GetCheckBoxState__DelegateSignature();// 0x1b1ea27fb041
	Geometry GetCachedGeometry();// 0x1b1ca27fb041
	bool GetBool__DelegateSignature();// 0x1b1ba27fb041
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1b1aa27fb041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1b19a27fb041
	void ForceVolatile(bool bForce);// 0x1b18a27fb041
	void ForceLayoutPrepass();// 0x1b17a27fb041

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x4abea27fb041
	FName GetUserTag();// 0x4abda27fb041

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x4adaa27fb041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x4ad9a27fb041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x4ad8a27fb041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x4ad7a27fb041
	float GetStartTime();// 0x4ad6a27fb041
	float GetEndTime();// 0x4ad5a27fb041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x4ad4a27fb041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x4ad3a27fb041

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x3087a27fb041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x3086a27fb041

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: Geometry

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c]
	float Duration;//[Offset: 0xf4, Size: 0x4]
	float MaxDistance;//[Offset: 0xf8, Size: 0x4]
	float TotalSamples;//[Offset: 0xfc, Size: 0x4]
	float Priority;//[Offset: 0x100, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x5344a27fb041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x5343a27fb041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x5342a27fb041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x5341a27fb041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x5340a27fb041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x533fa27fb041

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 0x8]
	Margin Margin;//[Offset: 0x1c, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x30, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x58, Size: 0x8]
	FName ResourceName;//[Offset: 0x60, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x68, Size: 0x14]
	byte DrawAs;//[Offset: 0x7c, Size: 0x1]
	byte Tiling;//[Offset: 0x7d, Size: 0x1]
	byte Mirroring;//[Offset: 0x7e, Size: 0x1]
	byte ImageType;//[Offset: 0x7f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x128, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x1e47a27fb041
	bool RemoveChild(Widget* Content);// 0x1e46a27fb041
	bool HasChild(Widget* Content);// 0x1e45a27fb041
	bool HasAnyChildren();// 0x1e44a27fb041
	int GetChildrenCount();// 0x1e43a27fb041
	int GetChildIndex(const Widget* Content);// 0x1e42a27fb041
	Widget* GetChildAt(int Index);// 0x1e41a27fb041
	Widget*[] GetAllChildren();// 0x1e40a27fb041
	void ClearChildren();// 0x1e3fa27fb041
	PanelSlot* AddChild(Widget* Content);// 0x1e3ea27fb041

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x3cbea27fb041
	void ShowTitleSafeArea();// 0x3cbda27fb041
	void SetConsoleTarget(int PlayerIndex);// 0x3cbca27fb041

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0xeeaa27fb041
	void ReceiveInit();// 0xee9a27fb041
	void HandleTravelError(byte FailureType);// 0xee7a27fb041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xee5a27fb041
	void DebugRemovePlayer(int ControllerId);// 0xee4a27fb041
	void DebugCreatePlayer(int ControllerId);// 0xee3a27fb041

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x3af1a27fb041
	void Dragged(out const PointerEvent PointerEvent);// 0x3af0a27fb041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3aefa27fb041

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x128, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x3d9ea27fb041
	bool WasControllerKeyJustPressed(Key Key);// 0x3d9da27fb041
	bool IsControllerKeyDown(Key Key);// 0x3d9ca27fb041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3d9ba27fb041
	Vector GetControllerVectorKeyState(Key Key);// 0x3d9aa27fb041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x3d99a27fb041
	float GetControllerKeyTimeDown(Key Key);// 0x3d98a27fb041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3d97a27fb041
	float GetControllerAnalogKeyState(Key Key);// 0x3d96a27fb041

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x3f9fa27fb041
	void SetBind(FName BindName, FString Command);// 0x3f9ea27fb041
	void InvertAxisKey(const Key AxisKey);// 0x3f9da27fb041
	void InvertAxis(const FName AxisName);// 0x3f9ca27fb041
	void ClearSmoothing();// 0x3f9ba27fb041

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x230, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x23c, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x240, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x240, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x248, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x260, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x270, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x280, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x288, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x290, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2a0, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2a8, Size: 0x8]
	void ShowHUD();// 0x1ce5a27fb041
	void ShowDebugToggleSubCategory(FName Category);// 0x1ce4a27fb041
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x1ce3a27fb041
	void ShowDebug(FName DebugType);// 0x1ce2a27fb041
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x1ce1a27fb041
	void RemoveAllDebugStrings();// 0x1ce0a27fb041
	void ReceiveHitBoxRelease(const FName BoxName);// 0x1cdfa27fb041
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x1cdea27fb041
	void ReceiveHitBoxClick(const FName BoxName);// 0x1cdda27fb041
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x1cdca27fb041
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x1cdba27fb041
	Vector Project(Vector Location);// 0x1cdaa27fb041
	void PreviousDebugTarget();// 0x1cd9a27fb041
	void NextDebugTarget();// 0x1cd8a27fb041
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x1cd7a27fb041
	PlayerController* GetOwningPlayerController();// 0x1cd6a27fb041
	Pawn* GetOwningPawn();// 0x1cd5a27fb041
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x1cd4a27fb041
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x1cd3a27fb041
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x1cd1a27fb041
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x1cd0a27fb041
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x1ccfa27fb041
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x1ccea27fb041
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x1ccda27fb041
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x1ccca27fb041
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x1ccba27fb041
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x1ccaa27fb041
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x1cc9a27fb041
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x1cc8a27fb041

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4d69a27fb041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x4d68a27fb041
	Vector K2_Project(Vector WorldLocation);// 0x4d67a27fb041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x4d66a27fb041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4d65a27fb041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x4d64a27fb041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x4d63a27fb041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x4d62a27fb041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x4d61a27fb041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x4d60a27fb041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x4d5fa27fb041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x4d5ea27fb041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x4d5da27fb041

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x230, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x238, Size: 0x8]
	float DefaultFOV;//[Offset: 0x248, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x250, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x258, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x610]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8b0, Size: 0x610]
	TViewTarget ViewTarget;//[Offset: 0xec0, Size: 0x620]
	TViewTarget PendingViewTarget;//[Offset: 0x14e0, Size: 0x620]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1b30, Size: 0x610]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2140, Size: 0x610]
	CameraModifier*[] ModifierList;//[Offset: 0x2750, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2760, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2770, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2774, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2780, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x27a0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x27b0, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x27b8, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x27f8, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2818, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2828, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2838, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2840, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2840, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2840, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2840, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2841, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2844, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2848, Size: 0x4]
	float ViewYawMin;//[Offset: 0x284c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2850, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2854, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2858, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2860, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x3f99a27fb041
	void StopCameraFade();// 0x3f98a27fb041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x3f97a27fb041
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3f96a27fb041
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x3f95a27fb041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x3f94a27fb041
	void StopAllCameraShakes(bool bImmediately);// 0x3f93a27fb041
	void StopAllCameraAnims(bool bImmediate);// 0x3f92a27fb041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x3f91a27fb041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x3f90a27fb041
	void SetGameCameraCutThisFrame();// 0x3f8fa27fb041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x3f8ea27fb041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x3f8da27fb041
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x3f8ca27fb041
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x3f8ba27fb041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x3f8aa27fb041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x3f89a27fb041
	void OnPhotographySessionStart();// 0x3f88a27fb041
	void OnPhotographySessionEnd();// 0x3f87a27fb041
	void OnPhotographyMultiPartCaptureStart();// 0x3f86a27fb041
	void OnPhotographyMultiPartCaptureEnd();// 0x3f85a27fb041
	PlayerController* GetOwningPlayerController();// 0x3f84a27fb041
	float GetFOVAngle();// 0x3f83a27fb041
	Rotator GetCameraRotation();// 0x3f82a27fb041
	Vector GetCameraLocation();// 0x3f81a27fb041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x3f80a27fb041
	void ClearCameraLensEffects();// 0x3f7fa27fb041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x3f7ea27fb041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x3f7da27fb041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3f7ca27fb041

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x4d58a27fb041
	void ReceivePlayShake(float Scale);// 0x4d57a27fb041
	bool ReceiveIsFinished();// 0x4d56a27fb041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x4d55a27fb041

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x570]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5b0, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	byte BloomMethod;//[Offset: 0x17, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x18, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorSaturation;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x190, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1a0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1a4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1a8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1ac, Size: 0x4]
	float FilmSlope;//[Offset: 0x1b0, Size: 0x4]
	float FilmToe;//[Offset: 0x1b4, Size: 0x4]
	float FilmShoulder;//[Offset: 0x1b8, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x1bc, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x1c0, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1d4, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1e4, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1e8, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1ec, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1f0, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x200, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x210, Size: 0x10]
	float FilmContrast;//[Offset: 0x220, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x224, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x228, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x22c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x230, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x240, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x244, Size: 0x4]
	float BloomIntensity;//[Offset: 0x248, Size: 0x4]
	float BloomThreshold;//[Offset: 0x24c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x250, Size: 0x4]
	float Bloom1Size;//[Offset: 0x254, Size: 0x4]
	float Bloom2Size;//[Offset: 0x258, Size: 0x4]
	float Bloom3Size;//[Offset: 0x25c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x260, Size: 0x4]
	float Bloom5Size;//[Offset: 0x264, Size: 0x4]
	float Bloom6Size;//[Offset: 0x268, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x26c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x27c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x28c, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2bc, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2cc, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2d0, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2d8, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2e0, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2e4, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2e8, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2ec, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2f0, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2f8, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2fc, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x30c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x31c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x320, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x328, Size: 0x4]
	float CameraISO;//[Offset: 0x32c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x330, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x334, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x338, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x33c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x340, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x348, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x350, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x358, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x35c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x360, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x364, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x368, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x36c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x370, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x374, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x378, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x37c, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x380, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x390, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x394, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x398, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3a0, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x420, Size: 0x4]
	float GrainJitter;//[Offset: 0x424, Size: 0x4]
	float GrainIntensity;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x434, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x440, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x444, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x448, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x44c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x450, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x454, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x45c, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x464, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x468, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x478, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x47c, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x480, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x484, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x488, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x490, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x498, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x49c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4a0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4a4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4a8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4ac, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4b0, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x4b4, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4b8, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4bc, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4c0, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4c4, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4c8, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4cc, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4d0, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x4d4, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4d8, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4dc, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4e0, Size: 0x4]
	float LPVSize;//[Offset: 0x4e4, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4ec, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4f0, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4f4, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4f8, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4fc, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x500, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x504, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x508, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x50c, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x510, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x514, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x518, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x51c, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x520, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x524, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x528, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x52c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x52e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x530, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x534, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x538, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x53c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x540, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x544, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x548, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x54c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x550, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x558, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x570]
	float BasePostProcessBlendWeight;//[Offset: 0x5d0, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x4d4ea27fb041
	void SetScale(float NewDuration);// 0x4d4da27fb041
	void SetDuration(float NewDuration);// 0x4d4ca27fb041

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x294, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x298, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x29c, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x2a0, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x4d5ca27fb041
	void PlayCameraShake(class CameraShake InCameraShake);// 0x4d5ba27fb041
	void Play();// 0x4d5aa27fb041
	float GetAttenuationFactor(out const Vector Location);// 0x4d59a27fb041

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x4d54a27fb041
	Actor* GetViewTarget();// 0x4d53a27fb041
	void EnableModifier();// 0x4d52a27fb041
	void DisableModifier(bool bImmediate);// 0x4d51a27fb041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x4d50a27fb041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x4d4fa27fb041

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x280, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x288, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x290, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x2a0, Size: 0x30]
	float BaseFOV;//[Offset: 0x2d0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2d8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2e8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x230, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x240, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x250, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x260, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x270, Size: 0x10]
	void ToggleActive();// 0x4dd8a27fb041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4dd7a27fb041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4dd6a27fb041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4dd5a27fb041
	void SetFloatParameter(FName ParameterName, float Param);// 0x4dd4a27fb041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4dd3a27fb041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4dd2a27fb041
	void OnRep_bCurrentlyActive();// 0x4dd1a27fb041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x4dd0a27fb041
	bool IsActive();// 0x4dcfa27fb041
	void Deactivate();// 0x4dcea27fb041
	void Activate();// 0x4dcda27fb041

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x52a2a27fb041

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x4b8, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x4c0, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x4d0, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e1, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e1, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e1, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e1, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4e1, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e2, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e2, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e2, Size: 0x1]
	byte LODMethod;//[Offset: 0x4ed, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x4ee, Size: 0x1]
	float SignificanceValue;//[Offset: 0x4f0, Size: 0x4]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x4f8, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x508, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x518, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x528, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x538, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	Vector OldPosition;//[Offset: 0x54c, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x558, Size: 0xc]
	float WarmupTime;//[Offset: 0x564, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x568, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x570, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x578, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x598, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x5b0, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x608, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x610, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x618, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x619, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x61a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x648, Size: 0x10]
	float LastFrameTickTime;//[Offset: 0x718, Size: 0x4]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2d56a27fb041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2d55a27fb041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2d54a27fb041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x2d53a27fb041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x2d52a27fb041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x2d51a27fb041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x2d50a27fb041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x2d4fa27fb041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x2d4ea27fb041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x2d4da27fb041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x2d4ca27fb041
	int GetNumActiveParticles();// 0x2d4ba27fb041
	MaterialInterface* GetNamedMaterial(FName InName);// 0x2d4aa27fb041
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x2d49a27fb041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x2d48a27fb041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x2d47a27fb041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x2d46a27fb041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x2d45a27fb041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x2d44a27fb041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x2d43a27fb041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x2d42a27fb041
	void EndTrails();// 0x2d41a27fb041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x2d40a27fb041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2d3fa27fb041

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2d3ea27fb041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x2d3da27fb041
	void SetFloatParameter(FName ParameterName, float Param);// 0x2d3ca27fb041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x2d3ba27fb041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2d3aa27fb041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x2d39a27fb041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x2d38a27fb041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2d37a27fb041
	void ReleaseToPool();// 0x2d36a27fb041
	FXSystemAsset* GetFXSystemAsset();// 0x2d35a27fb041

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x600]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x600]
	PlayerState* PlayerState;//[Offset: 0x610, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x230, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x238, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x240, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	float AspectRatio;//[Offset: 0x254, Size: 0x4]
	float FOVAngle;//[Offset: 0x258, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x25c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x570]
	int GetAutoActivatePlayerIndex();// 0x4b3ca27fb041

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x294, Size: 0x4]
	float OrthoWidth;//[Offset: 0x298, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x29c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x2a0, Size: 0x4]
	float AspectRatio;//[Offset: 0x2a4, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x2a9, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2e0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x310, Size: 0x570]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x3a04a27fb041
	void SetProjectionMode(byte InProjectionMode);// 0x3a03a27fb041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x3a02a27fb041
	void SetOrthoWidth(float InOrthoWidth);// 0x3a01a27fb041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x3a00a27fb041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x39ffa27fb041
	void SetFieldOfView(float InFieldOfView);// 0x39fea27fb041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x39fda27fb041
	void SetAspectRatio(float InAspectRatio);// 0x39fca27fb041
	void RemoveBlendable(interface classNone InBlendableObject);// 0x39fba27fb041
	void OnCameraMeshHiddenChanged();// 0x39faa27fb041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x39f9a27fb041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x39f8a27fb041

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x28c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x290, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x298, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x2a0, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	void TurnAtRate(float Rate);// 0x2c89a27fb041
	void MoveUp_World(float Val);// 0x2c88a27fb041
	void MoveRight(float Val);// 0x2c87a27fb041
	void MoveForward(float Val);// 0x2c86a27fb041
	void LookUpAtRate(float Rate);// 0x2c85a27fb041

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x4d0, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x3538a27fb041
	float GetUnscaledSphereRadius();// 0x3537a27fb041
	float GetShapeScale();// 0x3536a27fb041
	float GetScaledSphereRadius();// 0x3535a27fb041

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x4dc, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x4e0, Size: 0x4]
	int MinLOD;//[Offset: 0x4e4, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x4e8, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x4f0, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x4f8, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fc, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4fc, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4fc, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4fc, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4fc, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fd, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4fd, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4fd, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fd, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4fd, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x500, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x504, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x508, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x50c, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x510, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x520, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x530, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x3335a27fb041
	void SetReverseCulling(bool ReverseCulling);// 0x3334a27fb041
	void SetForcedLodModel(int NewForcedLodModel);// 0x3333a27fb041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x3332a27fb041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x3331a27fb041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x3330a27fb041

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x3a83a27fb041
	void ViewSelf();// 0x3a82a27fb041
	void ViewPlayer(FString S);// 0x3a81a27fb041
	void ViewClass(class Actor DesiredClass);// 0x3a80a27fb041
	void ViewActor(FName ActorName);// 0x3a7fa27fb041
	void UpdateSafeArea();// 0x3a7ea27fb041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x3a7da27fb041
	void ToggleServerStatReplicatorClientOverwrite();// 0x3a7ca27fb041
	void ToggleDebugCamera();// 0x3a7ba27fb041
	void ToggleAILogging();// 0x3a7aa27fb041
	void TestCollisionDistance();// 0x3a79a27fb041
	void Teleport();// 0x3a78a27fb041
	void Summon(FString ClassName);// 0x3a77a27fb041
	void StreamLevelOut(FName PackageName);// 0x3a76a27fb041
	void StreamLevelIn(FName PackageName);// 0x3a75a27fb041
	void SpawnServerStatReplicator();// 0x3a74a27fb041
	void Slomo(float NewTimeDilation);// 0x3a73a27fb041
	void SetWorldOrigin();// 0x3a72a27fb041
	void SetMouseSensitivityToDefault();// 0x3a71a27fb041
	void ServerToggleAILogging();// 0x3a70a27fb041
	void ReceiveInitCheatManager();// 0x3a6fa27fb041
	void ReceiveEndPlay();// 0x3a6ea27fb041
	void PlayersOnly();// 0x3a6da27fb041
	void OnlyLoadLevel(FName PackageName);// 0x3a6ca27fb041
	void LogLoc();// 0x3a6ba27fb041
	void InvertMouse();// 0x3a6aa27fb041
	void God();// 0x3a69a27fb041
	void Ghost();// 0x3a68a27fb041
	void FreezeFrame(float Delay);// 0x3a67a27fb041
	void Fly();// 0x3a66a27fb041
	void FlushLog();// 0x3a65a27fb041
	void EnableDebugCamera();// 0x3a64a27fb041
	void DumpVoiceMutingState();// 0x3a63a27fb041
	void DumpPartyState();// 0x3a62a27fb041
	void DumpOnlineSessionState();// 0x3a61a27fb041
	void DumpChatState();// 0x3a60a27fb041
	void DisableDebugCamera();// 0x3a5fa27fb041
	void DestroyTarget();// 0x3a5ea27fb041
	void DestroyServerStatReplicator();// 0x3a5da27fb041
	void DestroyPawns(class Pawn aClass);// 0x3a5ca27fb041
	void DestroyAllPawnsExceptTarget();// 0x3a5ba27fb041
	void DestroyAll(class Actor aClass);// 0x3a5aa27fb041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x3a59a27fb041
	void DebugCapsuleSweepPawn();// 0x3a58a27fb041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x3a57a27fb041
	void DebugCapsuleSweepClear();// 0x3a56a27fb041
	void DebugCapsuleSweepChannel(byte Channel);// 0x3a55a27fb041
	void DebugCapsuleSweepCapture();// 0x3a54a27fb041
	void DebugCapsuleSweep();// 0x3a53a27fb041
	void DamageTarget(float DamageAmount);// 0x3a52a27fb041
	void CheatScript(FString ScriptName);// 0x3a51a27fb041
	void ChangeSize(float F);// 0x3a50a27fb041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x3a4fa27fb041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x3a4ea27fb041
	void BugIt(FString ScreenShotDescription);// 0x3a4da27fb041

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ad, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ad, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5ad, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5ad, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5ad, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5ad, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5ad, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5ad, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5b0, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5b8, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5c0, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5c8, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x650, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x658, Size: 0x8]
	float SpeedScale;//[Offset: 0x660, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x664, Size: 0x4]
	float InitialAccel;//[Offset: 0x668, Size: 0x4]
	float InitialDecel;//[Offset: 0x66c, Size: 0x4]
	void ToggleDisplay();// 0x4d86a27fb041
	void ShowDebugSelectedInfo();// 0x4d85a27fb041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x4d84a27fb041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x4d83a27fb041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x4d82a27fb041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x4d81a27fb041
	Actor* GetSelectedActor();// 0x4d80a27fb041

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x4b8, Size: 0x4]
	float FrustumAngle;//[Offset: 0x4bc, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x4c0, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x4c4, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x4c8, Size: 0x4]
	Texture* Texture;//[Offset: 0x4d0, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x168, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1528, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1a48, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f0, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x230, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x240, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x248, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x250, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x258, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x260, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x268, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x270, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x278, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x280, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x288, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x290, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x298, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x2a0, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	void StartPlay();// 0x180da27fb041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x180ca27fb041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x180ba27fb041
	bool ShouldReset(Actor* ActorToReset);// 0x180aa27fb041
	void ReturnToMainMenuHost();// 0x1809a27fb041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x1808a27fb041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x1807a27fb041
	void RestartPlayer(Controller* NewPlayer);// 0x1806a27fb041
	void ResetLevel();// 0x1805a27fb041
	bool PlayerCanRestart(PlayerController* Player);// 0x1804a27fb041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x1803a27fb041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1802a27fb041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1801a27fb041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1800a27fb041
	void K2_OnLogout(Controller* ExitingController);// 0x17ffa27fb041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x17fea27fb041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x17fda27fb041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x17fca27fb041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x17fba27fb041
	bool HasMatchStarted();// 0x17faa27fb041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x17f9a27fb041
	int GetNumSpectators();// 0x17f8a27fb041
	int GetNumPlayers();// 0x17f7a27fb041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x17f6a27fb041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x17f5a27fb041
	Actor* ChoosePlayerStart(Controller* Player);// 0x17f4a27fb041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x17f3a27fb041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x17f2a27fb041

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x230, Size: 0x4]
	int MaxPlayers;//[Offset: 0x234, Size: 0x4]
	int MaxPartySize;//[Offset: 0x238, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x23c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1]
	FName SessionName;//[Offset: 0x240, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x230, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x238, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x240, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x248, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x25c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x260, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x264, Size: 0x4]
	void OnRep_SpectatorClass();// 0x142ea27fb041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x142da27fb041
	void OnRep_ReplicatedHasBegunPlay();// 0x142ca27fb041
	void OnRep_GameModeClass();// 0x142ba27fb041
	bool HasMatchStarted();// 0x142aa27fb041
	bool HasBegunPlay();// 0x1429a27fb041
	float GetServerWorldTimeSeconds();// 0x1428a27fb041
	float GetPlayerStartTime(Controller* Controller);// 0x1427a27fb041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x1426a27fb041

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	uint32 Channels;//[Offset: 0x234, Size: 0x4]
	uint32 InRate;//[Offset: 0x238, Size: 0x4]
	uint32 OutRate;//[Offset: 0x23c, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x244, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x248, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x24c, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x250, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x254, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x258, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x25c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x260, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x264, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x268, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x26c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x270, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x274, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x278, Size: 0x4]
	uint32 InPackets;//[Offset: 0x27c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x280, Size: 0x4]
	uint32 InBunches;//[Offset: 0x284, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x288, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x28c, Size: 0x4]
	uint32 InLoss;//[Offset: 0x290, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x294, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x298, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x29c, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x2a0, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2a4, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2a8, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d8, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2dc, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2e0, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2e4, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2e8, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2ec, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x230, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x234, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x238, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x23c, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x240, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x244, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x248, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x24c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x250, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x258, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x25c, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x260, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x264, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x268, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x26c, Size: 0x4]
	float MoveRepSize;//[Offset: 0x270, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x274, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x278, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x27c, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x280, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x284, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x288, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x28c, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x298, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x29c, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2a0, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2a4, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a8, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2b0, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2b4, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2c4, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c8, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2cc, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x230, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x238, Size: 0x8]
	float PlayRate;//[Offset: 0x240, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x248, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x24c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x250, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x258, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x270, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x280, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	float InterpPosition;//[Offset: 0x294, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x29c, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2a0, Size: 0x10]
	delegate OnStop;//[Offset: 0x2b0, Size: 0x10]
	delegate OnPause;//[Offset: 0x2c0, Size: 0x10]
	void Stop();// 0x529ca27fb041
	void SetPosition(float NewPosition, bool bJump);// 0x529ba27fb041
	void SetLoopingState(bool bNewLooping);// 0x529aa27fb041
	void Reverse();// 0x5299a27fb041
	void Play();// 0x5298a27fb041
	void Pause();// 0x5297a27fb041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x5296a27fb041
	void ChangePlaybackDirection();// 0x5295a27fb041

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x298, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x2a0, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x2a8, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x4d6ea27fb041

--------------------------------
Class: Interface.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x4d0, Size: 0x8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x5271a27fb041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x5270a27fb041
	bool RemoteEvent(FName EventName);// 0x526fa27fb041
	void LevelReset();// 0x526ea27fb041

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x240, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x248, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x4b8, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c0, Size: 0x1]
	float ScreenSize;//[Offset: 0x4c4, Size: 0x4]
	float U;//[Offset: 0x4c8, Size: 0x4]
	float UL;//[Offset: 0x4cc, Size: 0x4]
	float V;//[Offset: 0x4d0, Size: 0x4]
	float VL;//[Offset: 0x4d4, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x4cd8a27fb041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x4cd7a27fb041
	void SetSprite(Texture2D* NewSprite);// 0x4cd6a27fb041

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x120, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x130, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 0x8]
	bool ShouldBeLoaded();// 0x527da27fb041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x527ca27fb041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x527ba27fb041
	void SetPriority(int NewPriority);// 0x527aa27fb041
	void SetLevelLODIndex(int LODIndex);// 0x5279a27fb041
	bool IsStreamingStatePending();// 0x5278a27fb041
	bool IsLevelVisible();// 0x5277a27fb041
	bool IsLevelLoaded();// 0x5276a27fb041
	FName GetWorldAssetPackageFName();// 0x5275a27fb041
	Level* GetLoadedLevel();// 0x5274a27fb041
	LevelScriptActor* GetLevelScriptActor();// 0x5273a27fb041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x5272a27fb041

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x268, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x279, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x848, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc5c, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xc90, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xcf8, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x4cd5a27fb041
	int GetObjectCount();// 0x4cd4a27fb041
	int GetNewAvoidanceUID();// 0x4cd3a27fb041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x4cd2a27fb041

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 0x4]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 0x10]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x53d3a27fb041

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapID;//[Offset: 0x408, Size: 0x4]
	FName PreloadAssets;//[Offset: 0x40c, Size: 0x8]
	class SolarPostProcessSettingItem* PostProcessItemClass;//[Offset: 0x418, Size: 0x8]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x420, Size: 0x8]
	int CurrentActiveColorThemeIndex;//[Offset: 0x428, Size: 0x4]
	int SolarMapTypeValue;//[Offset: 0x42c, Size: 0x4]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]

--------------------------------
Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 0x580]

--------------------------------
Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 0x1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 0x570]

--------------------------------
Class: BP_LobbyMode_C.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2d0, Size: 0x8]

--------------------------------
Class: NewLogin_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 0x8]
	void ReceiveBeginPlay();// 0xffffffc1a27fb000
	void ExecuteUbergraph_NewLogin(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Actor* CallFunc_Array_Get_Item);// 0x269a27fb2e2

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: BP_LobbyGameState_C.SolarGameStateBase.GameStateBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e8, Size: 0x8]

--------------------------------
Class: SolarGameStateBase.GameStateBase.Info.Actor.Object
	GameStartConditionList GameStartConditions;//[Offset: 0x288, Size: 0x58]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 0x20]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 0x20]
	GameStateBase* Owner;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarGameplayConfigComponent.ActorComponent.Object
	GameplayConfigBase* GameplayConfig;//[Offset: 0xb8, Size: 0x8]
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	GameplayConfigBase* TestGameplayConfig;//[Offset: 0xc8, Size: 0x8]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xd0, Size: 0x8]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd8, Size: 0x8]
	GameplayConfigBase* GetConfigs();// 0x33a2a27fb041

--------------------------------
Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: GameModeGlobalSetting.Object
	delegate OnGlobalSettingChanged;//[Offset: 0x28, Size: 0x10]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 0x4]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 0x4]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 0x1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	float MinHPToLock;//[Offset: 0x50, Size: 0x4]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x57, Size: 0x1]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x3478a27fb041
	void SetTeamDamageEnabled(bool bNewValue);// 0x3477a27fb041
	void SetShowVehicleOnMap(bool bNewValue);// 0x3476a27fb041
	void SetMinHPToLock(float NewValue);// 0x3475a27fb041
	void SetMinHPLockEnabled(bool bNewValue);// 0x3474a27fb041
	void SetKillPlayerWhenOut(bool bNewValue);// 0x3473a27fb041
	void SetJetCostEnabled(bool bNewValue);// 0x3472a27fb041
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x3471a27fb041
	void SetGameCanRebirth(bool bNewValue);// 0x3470a27fb041
	void SetEnergyCostEnabled(bool bNewValue);// 0x346fa27fb041
	void SetDamageEnabled(bool bNewValue);// 0x346ea27fb041
	void SetCanVJetInWater(bool bNewValue);// 0x346da27fb041
	void SetCanLoginBattle(bool bNewValue);// 0x346ca27fb041
	void SetCanHJetInWater(bool bNewValue);// 0x346ba27fb041
	void SetBigMapEnabled(bool bNewValue);// 0x346aa27fb041
	void ReceiveSettingChanged();// 0x3469a27fb041
	bool IsVJetCDOverriden();// 0x3468a27fb041
	bool IsTeamDamageEnabled();// 0x3467a27fb041
	bool IsSkydiveFollowMovementEnabled();// 0x3466a27fb041
	bool IsShowVehicleOnMap();// 0x3465a27fb041
	bool IsMinHPLockEnabled();// 0x3464a27fb041
	bool IsKillPlayerWhenOut();// 0x3463a27fb041
	bool IsJetCostEnabledEnabled();// 0x3462a27fb041
	bool IsHJetCDOverriden();// 0x3461a27fb041
	bool IsGameCanRebirth();// 0x3460a27fb041
	bool IsGameCanLoginBattle();// 0x345fa27fb041
	bool IsEnergyCostEnabled();// 0x345ea27fb041
	bool IsDestroyWeaponOnDiscard();// 0x345da27fb041
	bool IsDestroyItemOnDiscard();// 0x345ca27fb041
	bool IsDamageEnabled();// 0x345ba27fb041
	bool IsBigMapEnabled();// 0x345aa27fb041
	enum GetWeaponInfiniteAmmoMode();// 0x3459a27fb041
	float GetOverridenVJetCD();// 0x3458a27fb041
	float GetOverridenHJetCD();// 0x3457a27fb041
	float GetMinHPToLock();// 0x3456a27fb041
	enum GetJetAltitudeLimitationMode();// 0x3455a27fb041
	bool CanVJetInWater();// 0x3454a27fb041
	bool CanHJetInWater();// 0x3453a27fb041

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x238, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x240, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2b9, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2bc, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2c0, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
