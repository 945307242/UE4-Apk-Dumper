//Dumped by Mody#9999

//Global Offsets and Pointers Used to Dump:
//GWorld - 0x6512120
//GNames - 0x67D7900

Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 0x4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 0x4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 0x4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 0x4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 0x4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 0x4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 0xc]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 0xc]
	Actor*[] LevelSequenceActors;//[Offset: 0x54, Size: 0xc]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x60, Size: 0xc]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x6c, Size: 0x1c]
	FString StreamingLevelsPrefix;//[Offset: 0x88, Size: 0xc]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x94, Size: 0x4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x98, Size: 0x4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x9c, Size: 0x4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xa0, Size: 0x4]
	WorldRegionManager RegionManager;//[Offset: 0xa4, Size: 0x148]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x1ec, Size: 0x4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x204, Size: 0x4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x208, Size: 0x4]
	GameStateBase* GameState;//[Offset: 0x20c, Size: 0x4]
	AISystemBase* AISystem;//[Offset: 0x210, Size: 0x4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x214, Size: 0x4]
	Level*[] Levels;//[Offset: 0x218, Size: 0xc]
	LevelCollection[] LevelCollections;//[Offset: 0x224, Size: 0xc]
	MaterialLodManager* MaterialLodManager;//[Offset: 0x234, Size: 0x4]
	GameInstance* OwningGameInstance;//[Offset: 0x23c, Size: 0x4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x240, Size: 0xc]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x24c, Size: 0x4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x250, Size: 0x4]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x2a4, Size: 0xc]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2b0, Size: 0xc]
	WorldComposition* WorldComposition;//[Offset: 0x554, Size: 0x4]
	WorldPSCPool PSCPool;//[Offset: 0x604, Size: 0x44]
	WorldSettings* K2_GetWorldSettings();// 0x47d8cc4
	void HandleTimelineScrubbed();// 0x47d8cec

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x2ce6f18

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x1d4, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x1d8, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d9, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d9, Size: 0x1]
	float StreamingDistanceUnloadCompensation;//[Offset: 0x1dc, Size: 0x4]
	bool bIsOpenDynamicPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e0, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e0, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e0, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e0, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e0, Size: 0x1]
	bool bForceNoStaticShadowDepthMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e0, Size: 0x1]
	bool bClipLQTexture;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e0, Size: 0x1]
	bool bOptimizeLQLightmap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1e0, Size: 0x1]
	bool bUseBrightestColorInSmallMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e1, Size: 0x1]
	bool bForceUseBC6H;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e1, Size: 0x1]
	bool bLimitToPackedLightAndShadowMapTextureSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e1, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e1, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e1, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e1, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x1e4, Size: 0x4]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x1e8, Size: 0x4]
	float WorldToMeters;//[Offset: 0x1ec, Size: 0x4]
	float KillZ;//[Offset: 0x1f0, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x1f4, Size: 0x4]
	float WorldGravityZ;//[Offset: 0x1f8, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x1fc, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x200, Size: 0x4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x204, Size: 0x4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x208, Size: 0x4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x20c, Size: 0x4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x210, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x214, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x220, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x224, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x228, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x22c, Size: 0x14]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x240, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x264, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x268, Size: 0x4]
	float TimeDilation;//[Offset: 0x26c, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x270, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x274, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x278, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x27c, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x280, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x284, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x288, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x2c8, Size: 0x4]
	NetViewer[] ReplicationViewers;//[Offset: 0x2cc, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x2d8, Size: 0xc]
	PlayerState* PauserPlayerState;//[Offset: 0x2e4, Size: 0x4]
	int MaxNumberOfBookmarks;//[Offset: 0x2e8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x2ec, Size: 0x4]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x2f0, Size: 0xc]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x2fc, Size: 0x4]
	void OnRep_WorldGravityZ();// 0x24b8cd4

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x20, Size: 0x3c]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5c, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5c, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5d, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5d, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5e, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5e, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5e, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5e, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5e, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5e, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	byte RemoteRole;//[Offset: 0x61, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x64, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x98, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0x9c, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa4, Size: 0x34]
	Actor* Owner;//[Offset: 0xd8, Size: 0x4]
	FName NetDriverName;//[Offset: 0xdc, Size: 0x8]
	byte Role;//[Offset: 0xe4, Size: 0x1]
	byte NetDormancy;//[Offset: 0xe5, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xe6, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xe7, Size: 0x1]
	int InputPriority;//[Offset: 0xe8, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0xec, Size: 0x4]
	float NetCullDistanceSquared;//[Offset: 0xf0, Size: 0x4]
	float ReplayNetCullDistanceSquared;//[Offset: 0xf4, Size: 0x4]
	int NetTag;//[Offset: 0xf8, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0xfc, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x100, Size: 0x4]
	float NetPriority;//[Offset: 0x104, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x10c, Size: 0x4]
	Actor*[] Children;//[Offset: 0x110, Size: 0xc]
	SceneComponent* RootComponent;//[Offset: 0x11c, Size: 0x4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x120, Size: 0xc]
	FName[] Layers;//[Offset: 0x138, Size: 0xc]
	ChildActorComponent* ParentComponent;//[Offset: 0x144, Size: 0x8]
	FName[] Tags;//[Offset: 0x14c, Size: 0xc]
	delegate OnTakeAnyDamage;//[Offset: 0x158, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x159, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x15a, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x15b, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x15c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x15d, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x15e, Size: 0x1]
	delegate OnClicked;//[Offset: 0x15f, Size: 0x1]
	delegate OnReleased;//[Offset: 0x160, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x161, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x162, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x163, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x164, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x165, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x166, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x167, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1b0, Size: 0xc]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x1bc, Size: 0xc]
	bool WasRecentlyRendered(float Tolerance);// 0x4631070
	void UserConstructionScript();// 0x2ce6f18
	void TearOff();// 0x1014170
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x4631ddc
	bool ShouldCollectedByApex();// 0x3d60eb0
	void SetTickGroup(byte NewTickGroup);// 0x46310f0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4631a88
	void SetReplicates(bool bInReplicates);// 0x4634cd0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x264e82c
	void SetOwner(Actor* NewOwner);// 0x264fa00
	void SetNetDormancy(byte NewDormancy);// 0x46314b4
	void SetLifeSpan(float InLifespan);// 0x46317b8
	void SetActorTickIntervalAndCooldown(float TickInterval);// 0x46315f0
	void SetActorTickInterval(float TickInterval);// 0x4631668
	void SetActorTickEnabled(bool bEnabled);// 0x4631708
	void SetActorScale3D(Vector NewScale3D);// 0x4633e3c
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x4632940
	void SetActorHiddenInGame(bool bNewHidden);// 0x4632870
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x46327f0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xf46fc0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xf47040
	void ReceiveTick(float DeltaSeconds);// 0x2ce6f18
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x2ce6f18
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x2ce6f18
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x2ce6f18
	void ReceiveEndPlay(byte EndPlayReason);// 0x2ce6f18
	void ReceiveDestroyed();// 0x2ce6f18
	void ReceiveBeginPlay();// 0x2ce6f18
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2ce6f18
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x2ce6f18
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x2ce6f18
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x2ce6f18
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x2ce6f18
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x2ce6f18
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x2ce6f18
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x2ce6f18
	void ReceiveActorEndCursorOver();// 0x2ce6f18
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x2ce6f18
	void ReceiveActorBeginCursorOver();// 0x2ce6f18
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x4630f40
	void OnRep_ReplicateMovement();// 0xfe936c
	void OnRep_ReplicatedMovement();// 0x27bdf74
	void OnRep_Owner();// 0xfbc1bc
	void OnRep_Instigator();// 0xfe5dc0
	void OnRep_AttachmentReplication();// 0x4634c7c
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x4630a38
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x4631a08
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x4631270
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x46333d0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x463407c
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x46329b0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4632bbc
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4632d38
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4633eac
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4634524
	void K2_OnReset();// 0x2ce6f18
	void K2_OnEndViewTarget(PlayerController* PC);// 0x2ce6f18
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x2ce6f18
	SceneComponent* K2_GetRootComponent();// 0x4634198
	Rotator K2_GetActorRotation();// 0x4634420
	Vector K2_GetActorLocation();// 0x46346a4
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4631c5c
	void K2_DestroyComponent(ActorComponent* Component);// 0x4632514
	void K2_DestroyActor();// 0x46327b4
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x46321d8
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4631e9c
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4632080
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x46323bc
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x46335f0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x46337fc
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4633978
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4632ec0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x46330cc
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4633248
	bool IsOverlappingActor(const Actor* Other);// 0x463152c
	bool IsChildActor();// 0x4631478
	bool IsActorTickEnabled();// 0x46316e0
	bool IsActorBeingDestroyed();// 0x46319c0
	bool HasAuthority();// 0x463278c
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x4633bf4
	Vector GetVelocity();// 0x4634148
	Transform GetTransform();// 0x4634704
	bool GetTickableWhenPaused();// 0x4631b08
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x4633cf4
	byte GetRemoteRole();// 0x4634c98
	ChildActorComponent* GetParentComponent();// 0x4631360
	Actor* GetParentActor();// 0x4631338
	Actor* GetOwner();// 0x46315ac
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x4631838
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x46318d8
	byte GetLocalRole();// 0x4634cb4
	float GetLifeSpan();// 0x4631788
	Controller* GetInstigatorController();// 0x4634798
	Pawn* GetInstigator();// 0x46347c0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x46347e8
	float GetInputAxisValue(const FName InputAxisName);// 0x4634b78
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x46349b8
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x4633af4
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x4633c74
	float GetGameTimeSinceCreation();// 0x46319e0
	float GetDotProductTo(const Actor* OtherActor);// 0x4633b74
	float GetDistanceTo(const Actor* OtherActor);// 0x4633d74
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x4630bd8
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x4630d04
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x4630de0
	FName GetAttachParentSocketName();// 0x4631208
	Actor* GetAttachParentActor();// 0x4631248
	void GetAttachedActors(out Actor*[] OutActors);// 0x4631168
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x4631388
	Vector GetActorUpVector();// 0x4634348
	float GetActorTimeDilation();// 0x4631bb0
	float GetActorTickInterval();// 0x46315c8
	Vector GetActorScale3D();// 0x4633df4
	Vector GetActorRightVector();// 0x46342dc
	Vector GetActorRelativeScale3D();// 0x46328f8
	Vector GetActorForwardVector();// 0x46343b4
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x4630e60
	bool GetActorEnableCollision();// 0x46327d0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x46341b4
	void ForceNetUpdate();// 0x4631054
	void FlushNetDormancy();// 0x46314a0
	void EnableInput(PlayerController* PlayerController);// 0x4634bfc
	void DisableInput(PlayerController* PlayerController);// 0x2687e44
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x4631d5c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4631b30
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xf47184
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x4632590
	bool ActorHasTag(FName Tag);// 0x4631bd8

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x1c, Size: 0x14]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	float DamageImpulse;//[Offset: 0x20, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 0x4]
	float DamageFalloff;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x1f8, Size: 0x4]
	int Priority;//[Offset: 0x1fc, Size: 0x4]
	float FluidFriction;//[Offset: 0x200, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x1d0, Size: 0x1]
	Color BrushColor;//[Offset: 0x1d4, Size: 0x4]
	int PolyFlags;//[Offset: 0x1d8, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1dc, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1dc, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1dc, Size: 0x1]
	Model* Brush;//[Offset: 0x1e0, Size: 0x4]
	BrushComponent* BrushComponent;//[Offset: 0x1e4, Size: 0x4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e8, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x1ec, Size: 0xc]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x45c, Size: 0x4]
	BodySetup* BrushBodySetup;//[Offset: 0x460, Size: 0x4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	PrimitiveComponent* MergeAggreDestComponent;//[Offset: 0x1f0, Size: 0x4]
	bool EnableScreenSizeCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1]
	float MinDrawDistance;//[Offset: 0x1f8, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x1fc, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x200, Size: 0x4]
	float MinScreenSize;//[Offset: 0x204, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x208, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x209, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x20a, Size: 0x1]
	enum LightmapType;//[Offset: 0x20b, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20c, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20c, Size: 0x1]
	Texture* DitherMaskTexture;//[Offset: 0x210, Size: 0x4]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 0x1]
	bool bDisableTranslucentOptimization;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 0x1]
	bool bNotRenderInTranslucentOptimizationPass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 0x1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x216, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x217, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x217, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x217, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x217, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x217, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x217, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x217, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1]
	bool bEnableCSMForLowEndDevice;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x219, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x219, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x219, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x219, Size: 0x1]
	bool bUseSkySH;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x219, Size: 0x1]
	bool bKeepOutLinePass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x219, Size: 0x1]
	bool bEnemyMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21a, Size: 0x1]
	bool bHideHotZone;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21a, Size: 0x1]
	bool bOutlineMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21a, Size: 0x1]
	bool bVisibleMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21a, Size: 0x1]
	bool bDisableIOSAsyncPSO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 0x1]
	bool bILCSampleWorldPosition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21a, Size: 0x1]
	enum RenderPass;//[Offset: 0x21b, Size: 0x1]
	ExtraRenderPassConfig ExtraRenderPassConfig;//[Offset: 0x21c, Size: 0x60]
	float ILCSampleScalar;//[Offset: 0x27c, Size: 0x4]
	float ILCSampleLerpSkyLightWeight;//[Offset: 0x280, Size: 0x4]
	byte bHasCustomNavigableGeometry;//[Offset: 0x285, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x287, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x288, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x289, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x28c, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x290, Size: 0xc]
	Vector4 GlobalSH;//[Offset: 0x2a0, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x2b0, Size: 0x4]
	int VisibilityId;//[Offset: 0x2b4, Size: 0x4]
	int ReflectionCaptureIndex;//[Offset: 0x2b8, Size: 0x4]
	FString ReflectionCaptureName;//[Offset: 0x2bc, Size: 0xc]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2c8, Size: 0xc]
	int VirtualTextureLodBias;//[Offset: 0x2d4, Size: 0x4]
	int VirtualTextureCullMips;//[Offset: 0x2d8, Size: 0x4]
	int VirtualTextureMinCoverage;//[Offset: 0x2dc, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x2e0, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x2e8, Size: 0x4]
	bool bSkipOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	float BoundsScale;//[Offset: 0x2f8, Size: 0x4]
	float OCBoundsScale;//[Offset: 0x2fc, Size: 0x4]
	int OCBoundsExtent;//[Offset: 0x300, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x310, Size: 0xc]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x31c, Size: 0xc]
	BodyInstance BodyInstance;//[Offset: 0x334, Size: 0xe8]
	delegate OnComponentHit;//[Offset: 0x41c, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x434, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x435, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x436, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x437, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x439, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x43a, Size: 0x1]
	delegate OnClicked;//[Offset: 0x43b, Size: 0x1]
	delegate OnReleased;//[Offset: 0x43c, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x43d, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x43e, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x43f, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x440, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x450, Size: 0x4]
	SceneComponent* ClusterParentPrimitive;//[Offset: 0x454, Size: 0x4]
	byte PhysicalMode;//[Offset: 0x458, Size: 0x1]
	byte PhysicalSurface;//[Offset: 0x459, Size: 0x1]
	void WakeRigidBody(FName BoneName);// 0x47887f0
	void WakeAllRigidBodies();// 0x2492948
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x478a2c4
	void SetVisibleMask(bool bInVisibleMask);// 0x4786fe0
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x4786474
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x4788474
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x47884ec
	void SetSimulatePhysics(bool bSimulate);// 0x478a23c
	void SetRenderPass(enum NewRenderPass);// 0x478ac18
	void SetRenderInMainPass(bool bValue);// 0x4786ee8
	void SetRenderCustomDepth(bool bValue);// 0x47872d8
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x47883f4
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x4786278
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4788b18
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4788c30
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4788c30
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x4789200
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4788e9c
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4788d58
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4788d58
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x478866c
	void SetOutlineMask(bool bInOutlineMask);// 0x4787060
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x47885ec
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x47886ec
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x478a6dc
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2585be4
	void SetMassScale(FName BoneName, float InMassScale);// 0x47868ac
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x4786704
	void SetLinearDamping(float InDamping);// 0x274616c
	void SetKeepOutLinePass(bool bInKeepOutLinePass);// 0x47871e0
	void SetILCSampleScalar(float F);// 0x47882fc
	void SetILCSampleLerpSkyLightWeight(float F);// 0x4788284
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x478b31c
	void SetExtraRenderPassConfig(out const ExtraRenderPassConfig Config);// 0x478a7b0
	void SetEnemyMask(bool bInEnemyMask);// 0x4787160
	void SetEnableScreenSizeCull(const bool bEnableScreenCull);// 0x47861f8
	void SetEnableGravity(bool bGravityEnabled);// 0x47869a8
	void SetDitherMaskTexture(Texture* NewDitherMaskTexture);// 0x478b2a4
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x478ac90
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x478ad80
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x478ae40
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x478aef4
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x4786f68
	void SetCustomDepthStencilValue(int Value);// 0x4787260
	void SetCullDistance(float NewCullDistance);// 0x4786180
	void SetConstraintMode(byte ConstraintMode);// 0x478a1bc
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x47862f8
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x25980a4
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x4788180
	void SetCollisionObjectType(byte Channel);// 0x47880c0
	void SetCollisionEnabled(byte NewType);// 0x4788204
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x4788874
	void SetCastShadow(bool NewCastShadow);// 0x478856c
	void SetCanUseSkylightSH(bool bNewUseSkylightSH);// 0x4788374
	void SetBoundsScale(float NewBoundsScale);// 0x478a918
	void SetAngularDamping(float InDamping);// 0x27e2138
	void SetAllUseCCD(bool InUseCCD);// 0x47863ec
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x4788fbc
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x4786a30
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x4786b0c
	void SetAllMassScale(float InMassScale);// 0x2492624
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x4786548
	void PutRigidBodyToSleep(FName BoneName);// 0x4788774
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x47879f8
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4787358
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4787d80
	bool K2_IsQueryCollisionEnabled();// 0x4786cdc
	bool K2_IsPhysicsCollisionEnabled();// 0x4786c9c
	bool K2_IsCollisionEnabled();// 0x4786d1c
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4787680
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x478ab98
	bool IsOverlappingActor(const Actor* Other);// 0x478ab18
	bool IsGravityEnabled();// 0x24928e8
	bool IsAnyRigidBodyAwake();// 0x47863bc
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x478b074
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x478b1e0
	void HideHotZone(bool bInHideHotZone);// 0x47870e0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x478a364
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x4789088
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x4789168
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x47889d0
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x4788a68
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x4788a68
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x478a990
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x478aa30
	int GetNumMaterials();// 0x4786eb8
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x478a390
	MaterialInterface* GetMaterial(int ElementIndex);// 0x478a890
	float GetMassScale(FName BoneName);// 0x4786820
	float GetMass();// 0x47866d4
	float GetLinearDamping();// 0x27bc524
	Vector GetInertiaTensor(FName BoneName);// 0x4786634
	bool GetGenerateOverlapEvents();// 0x478b39c
	byte GetCollisionResponseToChannel(byte Channel);// 0x4786c14
	FName GetCollisionProfileName();// 0x4788140
	byte GetCollisionObjectType();// 0x26d8c7c
	byte GetCollisionEnabled();// 0x4786d54
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x4786d84
	Vector GetCenterOfMass(FName BoneName);// 0x4788938
	float GetAngularDamping();// 0x4786978
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x478a46c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x478a588
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x478a654
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x478afe0
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x478b14c
	void ClearMoveIgnoreComponents();// 0x478afb0
	void ClearMoveIgnoreActors();// 0x478b138
	void ClearExtraRenderPassConfig();// 0xf4c250
	bool CanCharacterStepUp(Pawn* Pawn);// 0x47860f8
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x4789460
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x4789320
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x4789460
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4789a6c
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x478957c
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x4789c10
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x478a0a0
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x4789720
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x4789838
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x4789950
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x4789e68
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x4789d28
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4789f84

--------------------------------
Class: SceneComponent.ActorComponent.Object
	bool bApplyParentSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float DitherFactor;//[Offset: 0xac, Size: 0x4]
	bool UseParentDitherFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUIFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bSkipBasePitchRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x4]
	FName AttachSocketName;//[Offset: 0xc4, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xcc, Size: 0xc]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xd8, Size: 0xc]
	bool bRebaseRelativeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	Vector RelativeLocation;//[Offset: 0x110, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x11c, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x128, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x134, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x140, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x140, Size: 0x1]
	bool bHiddenEnterVoidInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x140, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x141, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x141, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x141, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x141, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x141, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x141, Size: 0x1]
	byte Mobility;//[Offset: 0x143, Size: 0x1]
	bool bMovableForStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 0x1]
	byte DetailMode;//[Offset: 0x145, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x146, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x479c0c8
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x479c904
	void SetWorldScale3D(Vector NewScale);// 0x479d93c
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x479c160
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x479eb94
	void SetRelativeScale3D(Vector NewScale3D);// 0x479e4ac
	void SetMobility(byte NewMobility);// 0x479bab4
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x479bff4
	void SetDitherFactor(float NewDitherFactor, bool bPropagateToChildren);// 0x479ec38
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x479bcf0
	void ResetRelativeTransform();// 0x479e524
	void OnRep_Visibility(bool OldValue);// 0x479eac4
	void OnRep_Transform();// 0x479eb80
	void OnRep_RelativeLocation();// 0x479eb6c
	void OnRep_AttachSocketName();// 0x479eb44
	void OnRep_AttachParent();// 0x479eb44
	void OnRep_AttachChildren();// 0x479eb58
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479d730
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479d9ac
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479bb34
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479db28
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479e5c0
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479e7cc
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479be10
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479e948
	Transform K2_GetComponentToWorld();// 0x479d0c0
	Vector K2_GetComponentScale();// 0x479d148
	Rotator K2_GetComponentRotation();// 0x479d190
	Vector K2_GetComponentLocation();// 0x479d1d8
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x479c6dc
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x479c9cc
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x479cbb8
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479d220
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479d42c
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479d5a8
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479e1b4
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479e330
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479dcb0
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479debc
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x479e038
	bool IsVisible();// 0x479c234
	bool IsSimulatingPhysics(FName BoneName);// 0x479cfa4
	bool IsAnySimulatingPhysics();// 0x479cf74
	Vector GetUpVector();// 0x479d078
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x479c520
	Rotator GetSocketRotation(FName InSocketName);// 0x479c3e0
	Quat GetSocketQuaternion(FName InSocketName);// 0x479c340
	Vector GetSocketLocation(FName InSocketName);// 0x479c480
	bool GetShouldUpdatePhysicsVolume();// 0x479ec14
	Vector GetRightVector();// 0x479d030
	Transform GetRelativeTransform();// 0x479e538
	PhysicsVolume* GetPhysicsVolume();// 0x479bfcc
	void GetParentComponents(out SceneComponent*[] Parents);// 0x479ceb0
	int GetNumChildrenComponents();// 0x479ce88
	Vector GetForwardVector();// 0x476de18
	Vector GetComponentVelocity();// 0x479c264
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x479cd18
	SceneComponent* GetChildComponent(int ChildIndex);// 0x479ce08
	FName GetAttachSocketName();// 0x479cf50
	SceneComponent* GetAttachParent();// 0x3187fec
	FName[] GetAllSocketNames();// 0x479c648
	bool DoesSocketExist(FName InSocketName);// 0x479c2b4
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x479c82c

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 0x3c]
	FName[] ComponentTags;//[Offset: 0x5c, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x6c, Size: 0xc]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 0x1]
	float NetUpdateFrequency;//[Offset: 0x80, Size: 0x4]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e, Size: 0x1]
	enum CreationMethod;//[Offset: 0x90, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x91, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x92, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x94, Size: 0xc]
	void ToggleActive();// 0x255c594
	void SetTickGroup(byte NewTickGroup);// 0x4638c8c
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4631a88
	void SetIsReplicated(bool ShouldReplicate);// 0x4638ebc
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x46315f0
	void SetComponentTickInterval(float TickInterval);// 0x4631668
	void SetComponentTickEnabled(bool bEnabled);// 0x23fbb20
	void SetAutoActivate(bool bNewAutoActivate);// 0x4638f3c
	void SetActive(bool bNewActive, bool bReset);// 0x4638fc4
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x27be02c
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x27bdfac
	void ReceiveTick(float DeltaSeconds);// 0x2ce6f18
	void ReceiveEndPlay(byte EndPlayReason);// 0x2ce6f18
	void ReceiveBeginPlay();// 0x2ce6f18
	void PauseNetUpdate(bool bPause);// 0x4638dac
	void OnRep_IsActive();// 0x1014170
	void K2_DestroyComponent(Object* Object);// 0x4638d04
	bool IsComponentTickEnabled();// 0x4638d7c
	bool IsBeingDestroyed();// 0x46391c4
	bool IsActive();// 0x2602164
	Actor* GetOwner();// 0x46391a8
	float GetComponentTickInterval();// 0x46315c8
	void ForceNetUpdateWithOwner(bool bForceOwner);// 0x4638e34
	void ForceNetUpdate();// 0x4631054
	void Deactivate();// 0x255c4f8
	bool ComponentHasTag(FName Tag);// 0x4639124
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4638b8c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4638c0c
	void Activate(bool bReset);// 0x463909c

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x44, Size: 0x10]
	int LODBias;//[Offset: 0x54, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x58, Size: 0x1]
	byte Filter;//[Offset: 0x59, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5a, Size: 0x1]
	byte LODGroup;//[Offset: 0x5b, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bNotUsedInUltraQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5c, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5c, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x20, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x28, Size: 0x4]
	int StreamingIndex;//[Offset: 0x2c, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x30, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x34, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x35, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x35, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x35, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x35, Size: 0x1]
	float LoadPriorityFactor;//[Offset: 0x38, Size: 0x4]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 0x40]
	FName BoneName;//[Offset: 0x5c, Size: 0x8]
	byte PhysicsType;//[Offset: 0x64, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x65, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x65, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x65, Size: 0x1]
	bool bPutBodiesInAggregation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x66, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x67, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x68, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x6c, Size: 0x4]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x70, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0xd0, Size: 0xe8]
	Vector BuildScale3D;//[Offset: 0x1bc, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0xc]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 0xc]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 0xc]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 0xc]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x20, Size: 0xc]
	float Radius;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x4, Size: 0x4]
	FName Name;//[Offset: 0x8, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x20, Size: 0xc]
	Rotator Rotation;//[Offset: 0x2c, Size: 0xc]
	float X;//[Offset: 0x38, Size: 0x4]
	float Y;//[Offset: 0x3c, Size: 0x4]
	float Z;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x20, Size: 0xc]
	Rotator Rotation;//[Offset: 0x2c, Size: 0xc]
	float Radius;//[Offset: 0x38, Size: 0x4]
	float Length;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x20, Size: 0xc]
	Box ElemBox;//[Offset: 0x2c, Size: 0x1c]
	Transform Transform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x20, Size: 0xc]
	Rotator Rotation;//[Offset: 0x2c, Size: 0xc]
	float Radius0;//[Offset: 0x38, Size: 0x4]
	float Radius1;//[Offset: 0x3c, Size: 0x4]
	float Length;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	float Restitution;//[Offset: 0x24, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float Density;//[Offset: 0x2c, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x34, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x38, Size: 0x4]
	byte SurfaceType;//[Offset: 0x3c, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x40, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x4]
	float FrictionScale;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x2c]
	float MaxDepenetrationVelocity;//[Offset: 0x54, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x58, Size: 0x4]
	float LinearDamping;//[Offset: 0x64, Size: 0x4]
	float AngularDamping;//[Offset: 0x68, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x6c, Size: 0xc]
	Vector COMNudge;//[Offset: 0x78, Size: 0xc]
	float MassScale;//[Offset: 0x84, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x88, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x9c, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xac, Size: 0x4]
	float MaxAngularVelocity;//[Offset: 0xb0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xb4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xb8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x5, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	float TickInterval;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x4]
	FName MemberName;//[Offset: 0x4, Size: 0x8]
	Guid MemberGuid;//[Offset: 0xc, Size: 0x10]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x24, Size: 0x4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x30, Size: 0x14]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x48, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x54, Size: 0xc]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x4748144
	PhysicalMaterial* GetPhysicalMaterial();// 0x2667064
	Material* GetBaseMaterial();// 0x47482ac

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x4]
	ScalarMaterialInput Metallic;//[Offset: 0x64, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0x78, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x8c, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0xa0, Size: 0xc]
	byte MaterialDomain;//[Offset: 0xb4, Size: 0x1]
	byte BlendMode;//[Offset: 0xb5, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0xb6, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0xb7, Size: 0x1]
	byte ShadingModel;//[Offset: 0xb8, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0xba, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0xbc, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0xc4, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0xd8, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0xec, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x104, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x118, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12c, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12c, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12c, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12c, Size: 0x1]
	bool WireAA;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12c, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12c, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12d, Size: 0x1]
	float WireAARadius;//[Offset: 0x130, Size: 0x4]
	int NumCustomizedUVs;//[Offset: 0x134, Size: 0x4]
	int ExtraMaterialFlags;//[Offset: 0x138, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x13c, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x140, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x148, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x14c, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x150, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x154, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x158, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x15c, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x16c, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x170, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x170, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x170, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x170, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x170, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x170, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x170, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x171, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x171, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x171, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x171, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x171, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x171, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x171, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x171, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x172, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x172, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x172, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x172, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x172, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x172, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x172, Size: 0x1]
	bool bUsedWithMultiProbe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x172, Size: 0x1]
	bool bUsedWithILC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x173, Size: 0x1]
	bool bUsedWithExtremeMeshProbes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x173, Size: 0x1]
	bool bUsedWithLocalVertexFactory;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x173, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x173, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x173, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x173, Size: 0x1]
	bool bUsingIn3DUIPass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x173, Size: 0x1]
	bool bDisableIBLSpecular;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x173, Size: 0x1]
	bool bUseInstanceSHVertexLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 0x1]
	bool bCSMHardBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x174, Size: 0x1]
	bool bForcePCFOneX;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174, Size: 0x1]
	bool bDynamicLightScalar;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x174, Size: 0x1]
	bool bDynamicLightScalarPrimitiveData;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x174, Size: 0x1]
	bool bAdditiveFadeBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x174, Size: 0x1]
	bool bISMMobilityStationary;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x174, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x174, Size: 0x1]
	bool bSpecularAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x175, Size: 0x1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x175, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x175, Size: 0x1]
	bool bUseLightmapDirectionalInTangent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x175, Size: 0x1]
	bool bUseFPPZoffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x175, Size: 0x1]
	bool bUseDither;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x175, Size: 0x1]
	bool bUseDitherMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x175, Size: 0x1]
	bool bUsedWithMobileBentNormalGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x175, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x176, Size: 0x1]
	bool bTranslucencyOptimization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x176, Size: 0x1]
	bool bUsesMobileDynamicPointLights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x176, Size: 0x1]
	bool bWS3DUIUseACESFit;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x176, Size: 0x1]
	bool bMixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x176, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x176, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x176, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x176, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x177, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x178, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x178, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x17c, Size: 0x4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1]
	byte ShadingRate;//[Offset: 0x181, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x182, Size: 0x1]
	MaterialExpression*[] Expressions;//[Offset: 0x184, Size: 0xc]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x190, Size: 0xc]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x19c, Size: 0xc]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a8, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a8, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a8, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a8, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a8, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a8, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a8, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a9, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a9, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a9, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x1ac, Size: 0x4]
	byte BlendableLocation;//[Offset: 0x1b0, Size: 0x1]
	int BlendablePriority;//[Offset: 0x1b4, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b9, Size: 0x1]
	byte StencilCompare;//[Offset: 0x1ba, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x1bb, Size: 0x1]
	byte RefractionMode;//[Offset: 0x1bc, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x1c0, Size: 0x4]
	Guid StateID;//[Offset: 0x1c4, Size: 0x10]
	bool[] CachedQualityLevelsUsed;//[Offset: 0x1d8, Size: 0xc]
	Object*[] ExpressionTextureReferences;//[Offset: 0x238, Size: 0xc]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 0x4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 0x4]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x30, Size: 0xc]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bFunctionUseFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x40, Size: 0xc]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateID;//[Offset: 0x1c, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateID;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateID;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateID;//[Offset: 0x1c, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 0xc]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 0x50]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x24, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x34, Size: 0x4]
	float NormalScale;//[Offset: 0x38, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x3c, Size: 0x4]
	float IOR;//[Offset: 0x40, Size: 0x4]
	float Roughness0;//[Offset: 0x44, Size: 0x4]
	float Roughness1;//[Offset: 0x48, Size: 0x4]
	float LobeMix;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bUseGlobalBakeTextureDiffuseValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]
	bool bOverrideUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ExtraRenderPassConfig
	<enum,ExtraRenderPassConfigItem> PassList;//[Offset: 0x0, Size: 0x3c]
	ExtraRenderPassConfigItem[] Passes;//[Offset: 0x3c, Size: 0xc]
	ExtraRenderPassConfigItem[] EnemyPasses;//[Offset: 0x48, Size: 0xc]
	ExtraRenderPassConfigItem[] BetterOutlinePasses;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: ExtraRenderPassConfigItem
	int PassFlags;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* PassMaterial;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x47470bc
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x4747900
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x474718c
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x4747800
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x4746e14
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x4746ea8
	float K2_GetScalarParameterValue(FName ParameterName);// 0x4746f2c
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x474773c
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x474764c
	void CopyInterpParameters(MaterialInstance* Source);// 0x47476c4

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x4]
	MaterialInterface* Parent;//[Offset: 0x64, Size: 0x4]
	MaterialParameterCollection* OverridedParameterCollection;//[Offset: 0x68, Size: 0x4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x7c, Size: 0xc]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x88, Size: 0xc]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x94, Size: 0xc]
	FontParameterValue[] FontParameterValues;//[Offset: 0xa0, Size: 0xc]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xac, Size: 0x10]
	Object*[] PermutationTextureReferences;//[Offset: 0xc4, Size: 0xc]
	StaticParameterSet StaticParameters;//[Offset: 0xd0, Size: 0x30]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x4]
	int FontPage;//[Offset: 0x14, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 0xc]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 0xc]
	int IsRemapped;//[Offset: 0x3c, Size: 0x4]
	float EmScale;//[Offset: 0x40, Size: 0x4]
	float Ascent;//[Offset: 0x44, Size: 0x4]
	float Descent;//[Offset: 0x48, Size: 0x4]
	float Leading;//[Offset: 0x4c, Size: 0x4]
	int Kerning;//[Offset: 0x50, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 0x90]
	int NumCharacters;//[Offset: 0xe4, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 0xc]
	float ScalingFactor;//[Offset: 0xf4, Size: 0x4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 0x4]
	FName LegacyFontName;//[Offset: 0xfc, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x104, Size: 0x28]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xac, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xb0, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	byte AddressX;//[Offset: 0xb5, Size: 0x1]
	byte AddressY;//[Offset: 0xb6, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xb8, Size: 0x8]
	int Blueprint_GetSizeY();// 0x47cca90
	int Blueprint_GetSizeX();// 0x47ccab8

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0xc]
	float Height;//[Offset: 0xc, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	byte CharacterSet;//[Offset: 0x11, Size: 0x1]
	FString Chars;//[Offset: 0x14, Size: 0xc]
	FString UnicodeRange;//[Offset: 0x20, Size: 0xc]
	FString CharsFilePath;//[Offset: 0x2c, Size: 0xc]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 0xc]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 0x4]
	int XPadding;//[Offset: 0x64, Size: 0x4]
	int YPadding;//[Offset: 0x68, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	int Kerning;//[Offset: 0x80, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0xc]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0xc, Size: 0x10]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath FontSoftPath;//[Offset: 0x20, Size: 0x14]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0xc]
	enum Hinting;//[Offset: 0xc, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x10, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0xc]
	float ScalingFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x10, Size: 0xc]
	Int32Range[] CharacterRangesCache;//[Offset: 0x1c, Size: 0xc]
	FString Cultures;//[Offset: 0x28, Size: 0xc]
	FString JustCultures;//[Offset: 0x34, Size: 0xc]
	FString CommonFlag;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_UseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool UseAsEarlyZ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_TranslucencyOptimization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool TranslucencyOptimization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_MixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bMixCSMWithStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ExtraMaterialFlags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	byte BlendMode;//[Offset: 0x3, Size: 0x1]
	byte ShadingModel;//[Offset: 0x4, Size: 0x1]
	byte ShadingRate;//[Offset: 0x5, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]
	int ExtraMaterialFlags;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0xc]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0xc, Size: 0xc]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x18, Size: 0xc]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: StaticSwitchParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: StaticTerrainLayerWeightParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	MaterialLayersFunctions Value;//[Offset: 0x10, Size: 0x30]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0xc]
	MaterialFunctionInterface*[] Blends;//[Offset: 0xc, Size: 0xc]
	bool[] LayerStates;//[Offset: 0x18, Size: 0xc]
	FString KeyString;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d4, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d4, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d4, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x1d8, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x1dc, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x1dd, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x1de, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x1e0, Size: 0x4]
	PlayerState* PlayerState;//[Offset: 0x1e4, Size: 0x4]
	Controller* LastHitBy;//[Offset: 0x1ec, Size: 0x4]
	Controller* Controller;//[Offset: 0x1f0, Size: 0x4]
	Vector ControlInputVector;//[Offset: 0x1f8, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x204, Size: 0xc]
	void SpawnDefaultController();// 0x2588ca0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x4766950
	void ReceiveUnpossessed(Controller* OldController);// 0x2ce6f18
	void ReceivePossessed(Controller* NewController);// 0x2ce6f18
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x4766b10
	void OnRep_PlayerState();// 0xf4b0f4
	void OnRep_Controller();// 0x46b47b0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x47664e0
	Vector K2_GetMovementInputVector();// 0x4766498
	bool IsPlayerControlled();// 0x47668a0
	bool IsMoveInputIgnored();// 0x2493040
	bool IsLocallyControlled();// 0x47668d0
	bool IsControlled();// 0x4766a70
	bool IsBotControlled();// 0x4766870
	Vector GetPendingMovementInputVector();// 0x4766498
	Vector GetNavAgentLocation();// 0x4766900
	PawnMovementComponent* GetMovementComponent();// 0x255622c
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x4766a98
	Vector GetLastMovementInputVector();// 0x47666c4
	Rotator GetControlRotation();// 0x4766a20
	Controller* GetController();// 0x2444814
	Rotator GetBaseAimRotation();// 0x4766820
	void DetachFromControllerPendingDestroy();// 0x2588c70
	Vector ConsumeMovementInputVector();// 0x4766674
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x476670c
	void AddControllerYawInput(float Val);// 0x46a57c0
	void AddControllerRollInput(float Val);// 0x47665f4
	void AddControllerPitchInput(float Val);// 0x2765cf8

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x1d4, Size: 0x4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x1e0, Size: 0xc]
	FName StateName;//[Offset: 0x1ec, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x1f4, Size: 0x4]
	Character* Character;//[Offset: 0x200, Size: 0x4]
	SceneComponent* TransformComponent;//[Offset: 0x204, Size: 0x4]
	Rotator ControlRotation;//[Offset: 0x21c, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void UnPossess();// 0x46847f0
	void StopMovement();// 0x2696960
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x4684c68
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x4684768
	void SetIgnoreLookInput(bool bNewLookInput);// 0x46846b0
	void SetControlRotation(out const Rotator NewRotation);// 0x4684d48
	void ResetIgnoreMoveInput();// 0x2493488
	void ResetIgnoreLookInput();// 0x249340c
	void ResetIgnoreInputFlags();// 0x2493070
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x2ce6f18
	void ReceivePossess(Pawn* PossessedPawn);// 0x2ce6f18
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x2ce6f18
	void Possess(Pawn* InPawn);// 0x4684804
	void OnRep_PlayerState();// 0x15687c0
	void OnRep_Pawn();// 0x244d62c
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x4684b4c
	Pawn* K2_GetPawn();// 0x24839c0
	bool IsPlayerController();// 0x46848f0
	bool IsMoveInputIgnored();// 0x4684738
	bool IsLookInputIgnored();// 0x4684680
	bool IsLocalPlayerController();// 0x46848ac
	bool IsLocalController();// 0x468487c
	Actor* GetViewTarget();// 0x4684960
	Rotator GetDesiredRotation();// 0x4684910
	Rotator GetControlRotation();// 0x4684dd4
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x4684990
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x4684a5c
	PlayerController* CastToPlayerController();// 0x4684b24

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x1d0, Size: 0x4]
	int PlayerID;//[Offset: 0x1d4, Size: 0x4]
	byte ping;//[Offset: 0x1d8, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1da, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1da, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1da, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1da, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1da, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1da, Size: 0x1]
	int StartTime;//[Offset: 0x1dc, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x1e0, Size: 0x4]
	FString SavedNetworkAddress;//[Offset: 0x1ec, Size: 0xc]
	UniqueNetIdRepl UniqueID;//[Offset: 0x1f8, Size: 0x18]
	Pawn* PawnPrivate;//[Offset: 0x218, Size: 0x4]
	FString PlayerNamePrivate;//[Offset: 0x268, Size: 0xc]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x2ce6f18
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x2ce6f18
	void OnRep_UniqueId();// 0x24364ac
	void OnRep_Score();// 0x2540c04
	void OnRep_PlayerName();// 0x24b8cd4
	void OnRep_PlayerId();// 0x24a0b20
	void OnRep_bIsInactive();// 0x24a0b3c
	FString GetPlayerName();// 0x477f81c

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x210, Size: 0x4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x214, Size: 0x4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x218, Size: 0x4]
	BasedMovementInfo BasedMovement;//[Offset: 0x220, Size: 0x2c]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x24c, Size: 0x2c]
	float AnimRootMotionTranslationScale;//[Offset: 0x278, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x27c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x290, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x2a0, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x2a4, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x2a8, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x2ac, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b0, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b0, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b1, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b1, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b1, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x2b4, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x2b8, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x2bc, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x2c0, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x2c4, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x2c8, Size: 0x4]
	bool EnableTestNameID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	delegate OnReachedJumpApex;//[Offset: 0x2d8, Size: 0xc]
	delegate MovementModeChangedDelegate;//[Offset: 0x2f0, Size: 0xc]
	delegate OnCharacterMovementUpdated;//[Offset: 0x2fc, Size: 0xc]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x308, Size: 0x8c]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3a0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x3e0, Size: 0xc]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x3ec, Size: 0xd8]
	void UnCrouch(bool bClientSimulation);// 0x467776c
	void StopJumping();// 0x27e0fe8
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x4677ab8
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x4678ab4
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x4679a40
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x4679104
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4678bf8
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4679534
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4679cc4
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x46776b8
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x4677b38
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x46777f4
	void OnRep_RootMotion();// 0x46776a4
	void OnRep_ReplicatedBasedMovement();// 0x2492db0
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x4677d80
	void OnRep_IsCrouched();// 0x4677cdc
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2ce6f18
	void OnLanded(out const HitResult Hit);// 0x2ce6f18
	void OnJumped();// 0x24928b0
	void OnCallUpdateBaseMovement();// 0x4677e5c
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4677974
	void K2_UpdateCustomMovement(float DeltaTime);// 0x2ce6f18
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2ce6f18
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x2ce6f18
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2ce6f18
	void Jump();// 0x2492c10
	bool IsPlayingRootMotion();// 0x467767c
	bool IsPlayingNetworkedRootMotionMontage();// 0x467762c
	bool IsJumpProvidingForce();// 0x4677c54
	bool HasAnyRootMotion();// 0x4677654
	AnimMontage* GetCurrentMontage();// 0x4677a90
	Vector GetBaseTranslationOffset();// 0x4677d5c
	Rotator GetBaseRotationOffsetRotator();// 0x4677cf8
	float GetAnimRootMotionTranslationScale();// 0x4677604
	void Crouch(bool bClientSimulation);// 0x2674fe8
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4678570
	void ClientCheatWalk();// 0x4677750
	void ClientCheatGhost();// 0x2492084
	void ClientCheatFly();// 0x24921c8
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4677e70
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4678248
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x46787b0
	void ClientAckGoodMove(float Timestamp);// 0x4678a3c
	bool CanJumpInternal();// 0x4677c84
	bool CanJump();// 0x4677cb4
	bool CanCrouch();// 0x2628254
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x4677d94

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x5e4, Size: 0x4]
	class AnimInstance* AnimClass;//[Offset: 0x5e8, Size: 0x4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x5ec, Size: 0x4]
	AnimInstance*[] SubInstances;//[Offset: 0x5f0, Size: 0xc]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x5fc, Size: 0x4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x600, Size: 0x10]
	Vector RootBoneTranslation;//[Offset: 0x61c, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x628, Size: 0xc]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x648, Size: 0xc]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x654, Size: 0xc]
	float GlobalAnimRateScale;//[Offset: 0x674, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x678, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x679, Size: 0x1]
	byte AnimationMode;//[Offset: 0x67b, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67d, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67d, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x67d, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x67d, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x67d, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67e, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67e, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67e, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x67e, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x67e, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67f, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67f, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67f, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x67f, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x67f, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x67f, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x67f, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x680, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x680, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x680, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x680, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x680, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x680, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x680, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x680, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x681, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x681, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x681, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x681, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x681, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x681, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x681, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x681, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x682, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x682, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x682, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x684, Size: 0x2]
	float ClothBlendWeight;//[Offset: 0x688, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x68c, Size: 0x4]
	float BendingStiffness;//[Offset: 0x690, Size: 0x4]
	float AreaStiffness;//[Offset: 0x694, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x698, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x69c, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x6a0, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x6a4, Size: 0xc]
	BodySetup* BodySetup;//[Offset: 0x6b0, Size: 0x4]
	delegate OnConstraintBroken;//[Offset: 0x6bc, Size: 0xc]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x6c8, Size: 0x4]
	float TeleportDistanceThreshold;//[Offset: 0x790, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x794, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x7a0, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x7f8, Size: 0x4]
	delegate OnAnimInitialized;//[Offset: 0x890, Size: 0xc]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x47a8d5c
	void ToggleDisablePostProcessBlueprint();// 0x47a9b80
	void TermBodiesBelow(FName ParentBoneName);// 0x47a7e40
	void SuspendClothingSimulation();// 0x47a8e40
	void Stop();// 0x47a94e4
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x47a8f1c
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x2414b2c
	void SetTeleportRotationThreshold(float Threshold);// 0x47a89d0
	void SetTeleportDistanceThreshold(float Threshold);// 0x47a8930
	void SetPosition(float InPos, bool bFireNotifies);// 0x47a93f8
	void SetPlayRate(float Rate);// 0x47a9358
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x47a7d48
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x47a870c
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x47a9074
	void SetLayerOverlay(class AnimInstance InClass);// 0x47a9878
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x47a7cc8
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x47a849c
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x47a8640
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x47a9ad8
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x47a8cdc
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x47a72bc
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x47a7388
	void SetClothMaxDistanceScale(float Scale);// 0x47a8e7c
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x47a8834
	void SetAnimClass(class Object NewClass);// 0x47793e8
	void SetAnimationMode(byte InAnimationMode);// 0x47a96dc
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x47a9578
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x47a6fd0
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x47a8a48
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x47a8c38
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x47a75f0
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x47a7710
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x47a74a0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x47a7dc0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x47a7ac4
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x47a7b9c
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x47a7950
	void ResumeClothingSimulation();// 0x47a8e2c
	void ResetClothTeleportMode();// 0x47a8df0
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x47a9754
	void ResetAllowedAnimCurveEvaluation();// 0x47a8b38
	void ResetAllBodiesSimulatePhysics();// 0x47a7b88
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x47a95f0
	void Play(bool bLooping);// 0x47a94f8
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x47a9188
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x47a82b0
	bool IsPlaying();// 0x47a94bc
	bool IsClothingSimulationSuspended();// 0x47a8e04
	bool IsBodyGravityEnabled(FName BoneName);// 0x47a85bc
	bool HasValidAnimationInstance();// 0x47a97cc
	float GetTeleportRotationThreshold();// 0x47a89a8
	float GetTeleportDistanceThreshold();// 0x47a89a8
	void GetSubInstancesByTag(FName InTag, out AnimInstance*[] OutSubInstances);// 0x47a98f0
	AnimInstance* GetSubInstanceByTag(FName InTag);// 0x47a99dc
	Vector GetSkeletalCenterOfMass();// 0x47a8194
	AnimInstance* GetPostProcessInstance();// 0x47a9a60
	float GetPosition();// 0x47a93d0
	float GetPlayRate();// 0x47a9330
	float GetMorphTarget(FName MorphTargetName);// 0x47a8fdc
	AnimInstance* GetLayerSubInstanceByGroup(FName InGroup);// 0x47a97f4
	bool GetDisablePostProcessBlueprint();// 0x47a9b58
	bool GetDisableAnimCurves();// 0x47a8cb8
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x47a6e48
	float GetClothMaxDistanceScale();// 0x47a8ef4
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x47a8908
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x47a81dc
	AnimInstance* GetAnimInstance();// 0x47a9a88
	class Object GetAnimClass();// 0x47a9ab0
	byte GetAnimationMode();// 0x47a96b4
	bool GetAllowedAnimCurveEvaluate();// 0x47a8c18
	void ForceClothNextUpdateTeleportAndReset();// 0x47a8e54
	void ForceClothNextUpdateTeleport();// 0x47a8e68
	FName FindConstraintBoneName(int ConstraintIndex);// 0x47a7234
	void ClearMorphTargets();// 0x47a9060
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x47a7124
	void BindClothToMasterPoseComponent();// 0x47a8ddc
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x47a8b4c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x47a7ebc
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x47a8028
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x47a7830

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x48c, Size: 0x4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x490, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x554, Size: 0x4]
	int ForcedLodModel;//[Offset: 0x558, Size: 0x4]
	int MinLodModel;//[Offset: 0x55c, Size: 0x4]
	int ShadowLodBias;//[Offset: 0x560, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x56c, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x578, Size: 0xc]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5a0, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a2, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a2, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a2, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a2, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a2, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a2, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a3, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a3, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a3, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a3, Size: 0x1]
	bool bUseAnimScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a3, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a3, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a3, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a3, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a4, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a4, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a4, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a4, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a4, Size: 0x1]
	bool bTickPoseOnDS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a4, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a4, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a5, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a5, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5a8, Size: 0x4]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x5b8, Size: 0x1c]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x47ae4b4
	void UnHideBoneByName(FName BoneName);// 0x47adc10
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x47ae088
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x47adec8
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);// 0x47ada80
	void ShowAllMaterialSections(int LODIndex);// 0x47ada08
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x47ae79c
	bool SetSkinWeightProfile(FName InProfileName);// 0x47ae544
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x47ae640
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReInitPose);// 0x47aeb68
	void SetRenderStatic(bool bNewValue);// 0x47ad8c4
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x47af088
	void SetMinLOD(int InNewMinLOD);// 0x47aefe8
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x47ae3ac
	void SetForcedLOD(int InNewForcedLOD);// 0x47aef70
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x47aee70
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x47aeef0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x47aedf8
	bool IsUsingSkinWeightProfile();// 0x47ae470
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x47ad944
	bool IsBoneHiddenByName(FName BoneName);// 0x47adb8c
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x47adc8c
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x47ae880
	FName GetSocketBoneName(FName InSocketName);// 0x47aec34
	Vector GetRefPosePosition(int BoneIndex);// 0x47ae248
	FName GetParentBone(FName BoneName);// 0x47aead8
	int GetNumLODs();// 0x47af060
	int GetNumBones();// 0x47aedd0
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x47ae9b8
	FName GetCurrentSkinWeightProfileName();// 0x47ae490
	FName GetBoneName(int BoneIndex);// 0x47aecc4
	int GetBoneIndex(FName BoneName);// 0x47aed4c
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x47add50
	void ClearVertexColorOverride(int LODIndex);// 0x47ae724
	void ClearSkinWeightProfile();// 0x47ae530
	void ClearSkinWeightOverride(int LODIndex);// 0x47ae5c8
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x47ae2d8

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x45c, Size: 0xc]
	int TargetLodLevel;//[Offset: 0x468, Size: 0x4]
	bool bUseCustomDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46c, Size: 0x1]
	float[] DistanceArray;//[Offset: 0x470, Size: 0xc]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x474aa50
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x474ab18
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x474abdc
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x474acf0
	FName[] GetMaterialSlotNames();// 0x474ad7c
	MaterialInterface*[] GetMaterials();// 0x474aea4
	int GetMaterialIndex(FName MaterialSlotName);// 0x474ae18

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x1c, Size: 0x4]
	byte RootMotionMode;//[Offset: 0x20, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x24, Size: 0xc]
	delegate OnMontageStarted;//[Offset: 0x30, Size: 0xc]
	delegate OnMontageEnded;//[Offset: 0x3c, Size: 0xc]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x48, Size: 0xc]
	AnimNotifyQueue NotifyQueue;//[Offset: 0xb8, Size: 0x54]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x10c, Size: 0xc]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x4640738
	Pawn* TryGetPawnOwner();// 0x4642dc8
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x464272c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4642c7c
	void SetSubInstanceClassByTag(FName InTag, class AnimInstance InClass);// 0x46418f8
	void SetRootMotionMode(byte Value);// 0x4641784
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x46409cc
	void SetLayerOverlay(class AnimInstance InClass);// 0x4641880
	void SavePoseSnapshot(FName SnapshotName);// 0x4642d44
	void ResetDynamics(enum InTeleportType);// 0x46402ac
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x46427ec
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x4642a68
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x4642408
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x4641cfc
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x4641fc0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x464207c
	void Montage_Resume(const AnimMontage* Montage);// 0x4642318
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x46424c4
	void Montage_Pause(const AnimMontage* Montage);// 0x4642390
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x4642190
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x4642254
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x4641ec0
	bool Montage_IsActive(const AnimMontage* Montage);// 0x4641f40
	float Montage_GetPosition(const AnimMontage* Montage);// 0x4641db8
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x4641b7c
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x4641c7c
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x4641e38
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x4641bfc
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x4640808
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x46403c0
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x4642664
	bool IsAnyMontagePlaying();// 0x4641b54
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x4640534
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x4640608
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x4640324
	void GetSubInstancesByTag(FName InTag, out AnimInstance*[] OutSubInstances);// 0x46419bc
	AnimInstance* GetSubInstanceByTag(FName InTag);// 0x4641aa8
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x4640f6c
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x4641030
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x4640d20
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x4640de4
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x4640ea8
	SkeletalMeshComponent* GetOwningComponent();// 0x2792f68
	Actor* GetOwningActor();// 0x4642c54
	AnimInstance* GetLayerSubInstanceByGroup(FName InGroup);// 0x46417fc
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x46410f4
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x46411b8
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x464127c
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x46413c0
	float GetInstanceMachineWeight(int MachineIndex);// 0x4641484
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x4641340
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x4641504
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x4641584
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x4641604
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x4641684
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x4641704
	float GetCurveValue(FName CurveName);// 0x4640c9c
	FName GetCurrentStateName(int MachineIndex);// 0x4640a90
	AnimMontage* GetCurrentActiveMontage();// 0x4641b2c
	void GetAllCurveNames(out FName[] OutNames);// 0x4640b18
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x4640bb8
	void ClearMorphTargets();// 0x46409b8
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x46408d8
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x2ce6f18
	void BlueprintPostEvaluateAnimation();// 0x2ce6f18
	void BlueprintInitializeAnimation();// 0x2ce6f18
	void BlueprintBeginPlay();// 0x2ce6f18

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x24, Size: 0xc]
	Transform[] RefLocalPoses;//[Offset: 0x30, Size: 0xc]
	Guid VirtualBoneGuid;//[Offset: 0x110, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x120, Size: 0xc]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x12c, Size: 0xc]
	SmartNameContainer SmartNames;//[Offset: 0x174, Size: 0x3c]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1cc, Size: 0xc]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1d8, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x27c, Size: 0xc]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x1c, Size: 0x8]
	FName BoneName;//[Offset: 0x24, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x2c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x38, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x44, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x47ac718
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x47ac824

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 0x4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0xc]
	FName[] BoneNames;//[Offset: 0xc, Size: 0xc]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 0x8]
	FName SnapshotName;//[Offset: 0x20, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x60, Size: 0xc]
	float SequenceLength;//[Offset: 0x6c, Size: 0x4]
	float RateScale;//[Offset: 0x70, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x74, Size: 0xc]
	float GetPlayLength();// 0xf44a34

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x24, Size: 0x4]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 0x4]
	FName NotifyName;//[Offset: 0x34, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x3c, Size: 0x4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x40, Size: 0x4]
	float Duration;//[Offset: 0x44, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x48, Size: 0x24]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	byte MontageTickType;//[Offset: 0x6d, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x70, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x74, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x78, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]
	int TrackIndex;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 0x4]
	int SlotIndex;//[Offset: 0x8, Size: 0x4]
	int SegmentIndex;//[Offset: 0xc, Size: 0x4]
	byte LinkMethod;//[Offset: 0x10, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 0x4]
	float SegmentLength;//[Offset: 0x18, Size: 0x4]
	float LinkValue;//[Offset: 0x1c, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2ce6f18
	FString GetNotifyName();// 0x10695f0

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x2ce6f18
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2ce6f18
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x2ce6f18
	FString GetNotifyName();// 0x10695f0

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x80, Size: 0x28]
	float BlendInTime;//[Offset: 0xa8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 0x28]
	float BlendOutTime;//[Offset: 0xd4, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0xd8, Size: 0x4]
	FName SyncGroup;//[Offset: 0xdc, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0xe4, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0xe8, Size: 0x18]
	CompositeSection[] CompositeSections;//[Offset: 0x100, Size: 0xc]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x10c, Size: 0xc]
	BranchingPoint[] BranchingPoints;//[Offset: 0x118, Size: 0xc]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x127, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x128, Size: 0xc]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x134, Size: 0xc]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x140, Size: 0x20]
	FName TimeStretchCurveName;//[Offset: 0x160, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x3aba138

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x4]
	float BlendTime;//[Offset: 0x4, Size: 0x4]
	enum BlendOption;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 0x60]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float GetFloatValue(float InTime);// 0x46869e4

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x468624c
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x468632c

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: RealCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x4c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x4d, Size: 0x1]
	float DefaultValue;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 0x48]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x24, Size: 0x8]
	float StartTime;//[Offset: 0x2c, Size: 0x4]
	FName NextSectionName;//[Offset: 0x30, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x4]
	float StartPos;//[Offset: 0x4, Size: 0x4]
	float AnimStartTime;//[Offset: 0x8, Size: 0x4]
	float AnimEndTime;//[Offset: 0xc, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x10, Size: 0x4]
	int LoopingCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x24, Size: 0x8]
	float DisplayTime;//[Offset: 0x2c, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0xc]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x60]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0xc, Size: 0xc]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x18, Size: 0x3c]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 0x4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x30, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x4c, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0x68, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x74, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0x80, Size: 0xc]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x8c, Size: 0xc]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x98, Size: 0xc]
	PerPlatformInt MinLOD;//[Offset: 0xe0, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0xe4, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0xe5, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0xe6, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe7, Size: 0x1]
	bool bUseVertexCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe7, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe7, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe7, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe7, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe7, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0xe8, Size: 0x4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xec, Size: 0x4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xf0, Size: 0x4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xf4, Size: 0xc]
	MorphTarget*[] MorphTargets;//[Offset: 0x100, Size: 0xc]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x220, Size: 0x4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x224, Size: 0xc]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x230, Size: 0x24]
	AssetUserData*[] AssetUserData;//[Offset: 0x254, Size: 0xc]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x260, Size: 0xc]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x278, Size: 0xc]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x12b5f38
	int NumSockets();// 0x47a4b20
	FString[] K2_GetAllMorphTargetNames();// 0x47a4ebc
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x47a49d4
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x47a4aa0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x47a4fa8
	BoxSphereBounds GetImportedBounds();// 0x47a5028
	BoxSphereBounds GetBounds();// 0x47a507c
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x47a4b50
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x47a4d5c
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x47a4e38
	int[] CheckSkinnedBoneSectionNum(int Threshold);// 0x255f860
	int[] CheckExtraBoneReferences();// 0x3949324

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x20, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x24, Size: 0x1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0xc, Size: 0xc]
	FName[] BonesToPrioritize;//[Offset: 0x18, Size: 0xc]
	float WeightOfPrioritization;//[Offset: 0x24, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x28, Size: 0x4]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x80, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x84, Size: 0xc]
	float StreamableFirstChunkSize;//[Offset: 0x90, Size: 0x4]
	float StreamableFollowingChunkSize;//[Offset: 0x94, Size: 0x4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xb4, Size: 0x4]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xb8, Size: 0x4]
	byte AdditiveAnimType;//[Offset: 0x104, Size: 0x1]
	byte RefPoseType;//[Offset: 0x105, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x108, Size: 0x4]
	int RefFrameIndex;//[Offset: 0x10c, Size: 0x4]
	FName RetargetSource;//[Offset: 0x110, Size: 0x8]
	bool bDisableRetargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	enum Interpolation;//[Offset: 0x119, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x11b, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x120, Size: 0xc]
	AnimStreameableFrameGroup StreamableFrameGroups;//[Offset: 0x13c, Size: 0x8]
	float ClosestScreenPercentage;//[Offset: 0x144, Size: 0x4]
	bool AlwaysHighestForAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	int GetRawTrackNum();// 0x464e744
	void BPSwitchFidelity(enum inFidelity);// 0x464e6cc

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimStreameableFrameGroup
	FName FrameGroupName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 0x4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x44, Size: 0x4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x48, Size: 0xc]
	TimelineTemplate*[] Timelines;//[Offset: 0x54, Size: 0xc]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x60, Size: 0x4]
	byte BlueprintType;//[Offset: 0x64, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x68, Size: 0x4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 0x4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 0x4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 0xc]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 0xc]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 0x4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 0x4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x24, Size: 0x38]
	FName AttachToName;//[Offset: 0x5c, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x64, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x6c, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0x78, Size: 0xc]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x84, Size: 0xc]
	Guid VariableGuid;//[Offset: 0x90, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 0x4]
	byte LengthMode;//[Offset: 0x20, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 0xc]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 0xc]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 0xc]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 0xc]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 0xc]
	Guid TimelineGuid;//[Offset: 0x60, Size: 0x10]
	FName VariableName;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0x80, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x10, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x4, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 0x60]
	Vector GetVectorValue(float InTime);// 0x468815c

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 0x60]
	float AdjustHue;//[Offset: 0x1a0, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x1a4, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x1a8, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x1ac, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x1b0, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x1b4, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x1b8, Size: 0x4]
	Quat GetRotationValue(float InTime);// 0x4686ddc
	LinearColor GetLinearColorValue(float InTime);// 0x4686f00
	LinearColor GetClampedLinearColorValue(float InTime);// 0x4686e6c

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 0xc]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 0x4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 0x1c]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x24, Size: 0x38]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x4]
	FName SCSVariableName;//[Offset: 0x4, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0xc, Size: 0x10]

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x1c, Size: 0x3c]
	<FName,NodeItem> TargetItems;//[Offset: 0x58, Size: 0x3c]
	<FName,FName> SourceToTarget;//[Offset: 0x94, Size: 0x3c]
	Object* SourceAsset;//[Offset: 0xd0, Size: 0x20]
	Object* TargetAsset;//[Offset: 0xf0, Size: 0x20]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x4]
	FName MaterialSlotName;//[Offset: 0x4, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0xc, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0xc]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x14, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x50, Size: 0xc]
	BoneReference[] BonesToPrioritize;//[Offset: 0x5c, Size: 0xc]
	float WeightOfPrioritization;//[Offset: 0x68, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x6c, Size: 0x4]
	AnimSequence* BakePoseOverride;//[Offset: 0x70, Size: 0x4]
	FString SourceImportFilename;//[Offset: 0x74, Size: 0xc]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x20, Size: 0xc]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x2c, Size: 0xc]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x38, Size: 0xc]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xc0, Size: 0x4]
	BodySetup*[] BodySetup;//[Offset: 0xc4, Size: 0xc]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x1d0, Size: 0xc]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x1c, Size: 0x198]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1b4, Size: 0xc]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1c0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0xc, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x14, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x1c, Size: 0x8]
	Vector Pos1;//[Offset: 0x24, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x30, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector Pos2;//[Offset: 0x48, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x54, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x60, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x6c, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x80, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 0xc]
	Guid AssetGuid;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0xc]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0xc, Size: 0x18]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0xc]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0xc]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationInteractor.Object
	void PhysicsAssetUpdated();// 0x106b010
	void ClothConfigUpdated();// 0xfe936c

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	float SavedPosition;//[Offset: 0x8, Size: 0x4]
	float SavedPlayRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x11c, Size: 0x4]
	float GravityScale;//[Offset: 0x120, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x124, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x128, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x12c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x130, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x134, Size: 0x4]
	bool EnableSimulationOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool EnableDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool EnableFastDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	float UseDRAcceleration;//[Offset: 0x13c, Size: 0x4]
	float UseDRRotationSpeed;//[Offset: 0x140, Size: 0x4]
	bool NetNeedDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool bLastHasBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	Vector LastNotZeroDRVelocity;//[Offset: 0x148, Size: 0xc]
	Vector DRVelocity;//[Offset: 0x154, Size: 0xc]
	Vector DRAcceleration;//[Offset: 0x160, Size: 0xc]
	Quat DRRotationSpeed;//[Offset: 0x170, Size: 0x10]
	float DRLerpTime;//[Offset: 0x1a8, Size: 0x4]
	float DRSimulateTime;//[Offset: 0x1ac, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x1b0, Size: 0x4]
	bool bAllForDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	bool bDRFindFllor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 0x1]
	float DRFindFloorInterval;//[Offset: 0x1b8, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x1bc, Size: 0x4]
	PrimitiveComponent* DRBase;//[Offset: 0x1c4, Size: 0x4]
	FName DRBoneName;//[Offset: 0x1c8, Size: 0x8]
	bool DRLocationReach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]
	int NeedMovementLodNum;//[Offset: 0x1f4, Size: 0x4]
	byte MovementMode;//[Offset: 0x208, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x209, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x20a, Size: 0x1]
	float GroundFriction;//[Offset: 0x20c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x22c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x230, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x234, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x238, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x23c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x240, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x244, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x248, Size: 0x4]
	float BrakingFriction;//[Offset: 0x24c, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x250, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x254, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x258, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x25c, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x260, Size: 0x4]
	float AirControl;//[Offset: 0x264, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x268, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x26c, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x270, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x274, Size: 0x4]
	float Buoyancy;//[Offset: 0x278, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x27c, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x280, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x284, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x290, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x290, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x290, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x291, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x291, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x291, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x291, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x291, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x291, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x291, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x292, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x292, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x292, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x292, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x292, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x292, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x292, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x293, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x294, Size: 0x4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x298, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x29c, Size: 0x4]
	float Mass;//[Offset: 0x2a0, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x2a4, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x2a8, Size: 0x4]
	float PushForceFactor;//[Offset: 0x2ac, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x2b0, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x2b4, Size: 0x4]
	float MinTouchForce;//[Offset: 0x2b8, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x2bc, Size: 0x4]
	float RepulsionForce;//[Offset: 0x2c0, Size: 0x4]
	Vector Acceleration;//[Offset: 0x2c4, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x2d0, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x2e0, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x2ec, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2f8, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x2fc, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x300, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x304, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x310, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x31c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x32c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x330, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x334, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x338, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x33c, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x340, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x344, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x348, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x34c, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x350, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x354, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x358, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x35c, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x360, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x364, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x368, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x36c, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x370, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x374, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x378, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x37c, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x380, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x414, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x415, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x416, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x417, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x417, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x417, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x417, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x417, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x417, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x417, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x417, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x418, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x418, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x418, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x418, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x418, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x418, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x418, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x419, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x419, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x419, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x419, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x419, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x419, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x419, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41a, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41a, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41a, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41a, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41a, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41a, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x42c, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x430, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x43c, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x440, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x444, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x448, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x44c, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x450, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x500, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x504, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x508, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x50c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x510, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x514, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x518, Size: 0x3c]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x564, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x56c, Size: 0x8c]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x690, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x6d0, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x467cddc
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x467ce7c
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x467d4ac
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x467d5f0
	void SetGroupsToIgnore(int GroupFlags);// 0x467d674
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x467d6ec
	void SetGroupsToAvoid(int GroupFlags);// 0x467d770
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x467d7e8
	void SetAvoidanceGroup(int GroupFlags);// 0x467d86c
	void SetAvoidanceEnabled(bool bEnable);// 0x467d570
	float K2_GetWalkableFloorZ();// 0x467ce54
	float K2_GetWalkableFloorAngle();// 0x467cef4
	float K2_GetModifiedMaxAcceleration();// 0x467d248
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x467ccf4
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x467cb34
	bool IsWalking();// 0x467d47c
	bool IsWalkable(out const HitResult Hit);// 0x467cf1c
	float GetValidPerchRadius();// 0x467cfc8
	float GetPerchRadiusThreshold();// 0x467cff0
	PrimitiveComponent* GetMovementBase();// 0x467d454
	float GetMinAnalogSpeed();// 0x467d278
	float GetMaxJumpHeightWithJumpTime();// 0x2467c84
	float GetMaxJumpHeight();// 0x2467cb4
	float GetMaxBrakingDeceleration();// 0x467d1e8
	float GetMaxAcceleration();// 0x467d218
	Vector GetLastUpdateVelocity();// 0x467d8e4
	Rotator GetLastUpdateRotation();// 0x467d908
	Vector GetLastUpdateLocation();// 0x467d94c
	Vector GetImpartedMovementBaseVelocity();// 0x467d404
	Vector GetCurrentAcceleration();// 0x467d1a0
	Character* GetCharacterOwner();// 0x4634198
	float GetAnalogInputModifier();// 0x467d178
	void DisableMovement();// 0x24a0b20
	void ClearAccumulatedForces();// 0x467d15c
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x467c930
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x467d2a8
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x467d090
	void AddForce(Vector Force);// 0x467d018

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x110, Size: 0x4]
	Vector K2_GetInputVector();// 0x4767cf8
	bool IsMoveInputIgnored();// 0x4767d68
	Vector GetPendingInputVector();// 0x4767cf8
	Pawn* GetPawnOwner();// 0x4767d40
	Vector GetLastInputVector();// 0x4767de8
	Vector ConsumeInputVector();// 0x4767d98
	void AddInputVector(Vector WorldVector, bool bForce);// 0x4767e30

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xdc, Size: 0x28]
	float FixedPathBrakingDistance;//[Offset: 0x104, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x109, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x10c, Size: 0x4]
	void StopMovementKeepPathing();// 0x4751610
	void StopActiveMovement();// 0xf4cc10
	bool IsSwimming();// 0x4751580
	bool IsMovingOnGround();// 0x467d47c
	bool IsFlying();// 0x4751550
	bool IsFalling();// 0x47515b0
	bool IsCrouching();// 0x47515e0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xa8, Size: 0x4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xac, Size: 0x4]
	Vector Velocity;//[Offset: 0xb4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xc0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xcc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xdb, Size: 0x1]
	void StopMovementImmediately();// 0x2583874
	void SnapUpdatedComponentToPlane();// 0x258525c
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x2708bc4
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x474d718
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x474d858
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x474d790
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x26e2000
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x474d8ec
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xf52eec
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x474d96c
	float K2_GetModifiedMaxSpeed();// 0x26160e0
	float K2_GetMaxSpeedModifier();// 0x2616140
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x474db60
	Vector GetPlaneConstraintOrigin();// 0x474d6b0
	Vector GetPlaneConstraintNormal();// 0x474d6e4
	enum GetPlaneConstraintAxisSetting();// 0x474d8d0
	PhysicsVolume* GetPhysicsVolume();// 0x474db30
	float GetMaxSpeed();// 0x250c5a0
	float GetGravityZ();// 0x277749c
	Vector ConstrainNormalToPlane(Vector Normal);// 0x474d4dc
	Vector ConstrainLocationToPlane(Vector Location);// 0x474d578
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x474d614

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x7d, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x14, Size: 0x14]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x46c, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x470, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x467677c
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x46766b4
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x46765ec
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x46760c0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x46761ac
	float GetUnscaledCapsuleRadius();// 0x46762dc
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x4676290
	float GetUnscaledCapsuleHalfHeight();// 0x46762c0
	float GetShapeScale();// 0x4676078
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x46762f8
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4676428
	float GetScaledCapsuleRadius();// 0x46765b4
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x4676538
	float GetScaledCapsuleHalfHeight();// 0x4676588

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x45c, Size: 0x4]
	Color ShapeColor;//[Offset: 0x460, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x464, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x468, Size: 0x4]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x4]
	float Timestamp;//[Offset: 0x4, Size: 0x4]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x4, Size: 0xd8]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 0x4]
	float Position;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 0x4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 0x8c]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc0, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xcc, Size: 0xc]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x268, Size: 0x4]
	Pawn* AcknowledgedPawn;//[Offset: 0x26c, Size: 0x4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x270, Size: 0x4]
	HUD* MyHUD;//[Offset: 0x274, Size: 0x4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x278, Size: 0x4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x27c, Size: 0x4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	byte TargetViewRotationPitch;//[Offset: 0x281, Size: 0x1]
	uint16 TargetViewRotationYaw;//[Offset: 0x282, Size: 0x2]
	byte TargetViewRotationRoll;//[Offset: 0x284, Size: 0x1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2a0, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x2ac, Size: 0xc]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x2b8, Size: 0xc]
	float LastSpectatorStateSynchTime;//[Offset: 0x2c8, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x2cc, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x2d8, Size: 0xc]
	int ClientCap;//[Offset: 0x2e4, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x2e8, Size: 0x4]
	class CheatManager* CheatClass;//[Offset: 0x2ec, Size: 0x4]
	PlayerInput* PlayerInput;//[Offset: 0x2f0, Size: 0x4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x2f4, Size: 0xc]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34c, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x34d, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x37c, Size: 0x4]
	NetConnection* NetConnection;//[Offset: 0x380, Size: 0x4]
	float InputYawScale;//[Offset: 0x390, Size: 0x4]
	float InputPitchScale;//[Offset: 0x394, Size: 0x4]
	float InputRollScale;//[Offset: 0x398, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39c, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39c, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39c, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39c, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39c, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x3a0, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x3a4, Size: 0xc]
	byte DefaultMouseCursor;//[Offset: 0x3b0, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x3b1, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x3b2, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x3b3, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x3b4, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x3b8, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x3ba, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x428, Size: 0x4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x42c, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x438, Size: 0x4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x4a0, Size: 0x4]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x4ac, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x4773884
	bool WasInputKeyJustPressed(Key Key);// 0x4773a44
	void ToggleSpeaking(bool bInSpeaking);// 0x4778420
	void SwitchLevel(FString URL);// 0x477929c
	void StopHapticEffect(enum Hand);// 0x47755ac
	void StartFire(byte FireModeNum);// 0x4778530
	void SetVirtualJoystickVisibility(bool bVisible);// 0x4772c3c
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x47729fc
	void SetName(FString S);// 0x4779334
	void SetMouseLocation(const int X, const int Y);// 0x47785b0
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x4776064
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x47754ac
	void SetDisableHaptics(bool bNewDisabled);// 0x4775424
	void SetControllerLightColor(Color Color);// 0x47753b4
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x477260c
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x47728f0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x477281c
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x4774114
	void ServerViewPrevPlayer();// 0x47741ec
	void ServerViewNextPlayer();// 0x4774248
	void ServerVerifyViewTarget();// 0x47742a4
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x4774300
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x47743b8
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x4774478
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x4777c9c
	void ServerToggleAILogging();// 0x4773f44
	void ServerShortTimeout();// 0x477457c
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x47797d4
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x4774690
	void ServerRestartPlayer();// 0x47747a8
	void ServerPause();// 0x4774804
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x4774860
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x4778050
	void ServerCheckClientPossessionReliable();// 0x47745d8
	void ServerCheckClientPossession();// 0x4774634
	void ServerChangeName(FString S);// 0x4774908
	void ServerCamera(FName NewMode);// 0x47749d0
	void ServerAcknowledgePossession(Pawn* P);// 0x4774a88
	void SendToConsole(FString Command);// 0x477756c
	void RestartLevel();// 0x4779694
	void ResetControllerLightColor();// 0x47753a0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x477866c
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x4775624
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x4775774
	void Pause();// 0x47793cc
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x4772584
	void OnRep_TargetViewRotationYaw();// 0x47798b0
	void OnRep_TargetViewRotationRoll();// 0x477989c
	void OnRep_TargetViewRotationPitch();// 0x47798c4
	void LocalTravel(FString URL);// 0x47795fc
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x4775bdc
	bool IsInputKeyDown(Key Key);// 0x4773c04
	void InitVirtualJoystickBySetting();// 0x4772c20
	void GetViewportSize(out int SizeX, out int SizeY);// 0x4776148
	SpectatorPawn* GetSpectatorPawn();// 0x4772568
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x4773108
	Vector GetInputVectorKeyState(Key Key);// 0x47734f4
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4773374
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x4772e68
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x47731f0
	float GetInputKeyTimeDown(Key Key);// 0x4772f48
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4772d44
	float GetInputAnalogKeyState(Key Key);// 0x47736c4
	HUD* GetHUD();// 0x4776120
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4778a28
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4778bd0
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4778d4c
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4778ec8
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x477902c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4779164
	Vector GetFocalLocation();// 0x4772518
	void FOV(float NewFOV);// 0x47796b0
	void EnableCheats();// 0x4779730
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection, bool bRebasing);// 0x477878c
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x4778948
	void ConsoleKey(Key Key);// 0x4777604
	void ClientWasKicked(const FText KickReason);// 0x4774d54
	void ClientVoiceHandshakeComplete();// 0x4778404
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x4774e50
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x4774ee8
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x47777c4
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x47750a8
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x477522c
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x4773fa0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x4775a3c
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x4775d8c
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x4775e58
	void ClientStartOnlineSession();// 0x2491b44
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4775ef4
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x4775f74
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x477974c
	void ClientSetHUD(class HUD NewHUDClass);// 0x4776228
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x4764f2c
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x47762a8
	void ClientSetCameraMode(FName NewCamMode);// 0x4776424
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x47764a8
	void ClientSetBlockOnAsyncLoading();// 0x477664c
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x4779468
	void ClientReturnToMainMenu(FString ReturnReason);// 0x4779564
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x4774cd4
	void ClientRestart(Pawn* NewPawn);// 0x4776668
	void ClientReset();// 0x47766e8
	void ClientRepObjRef(Object* Object);// 0x47793e8
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x4774b3c
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x4776704
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x4776860
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x4776988
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x4776adc
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x4775b04
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4776be4
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x4776d38
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x4777a30
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x4777008
	void ClientIgnoreMoveInput(bool bIgnore);// 0x4777134
	void ClientIgnoreLookInput(bool bIgnore);// 0x47771bc
	void ClientGotoState(FName NewState);// 0x4777244
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x47772c8
	void ClientForceGarbageCollection();// 0x4777394
	void ClientFlushLevelStreaming();// 0x47773b0
	void ClientEndOnlineSession();// 0x2491b60
	void ClientEnableNetworkVoice(bool bEnable);// 0x47784a8
	void ClientCommitMapChange();// 0x25e0c9c
	void ClientClearCameraLensEffects();// 0x4775ed8
	void ClientCapBandwidth(int Cap);// 0x47773c4
	void ClientCancelPendingMapChange();// 0x4777444
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x4777460
	void ClearAudioListenerOverride();// 0x47728dc
	void ClearAudioListenerAttenuationOverride();// 0x4772808
	bool CanRestartPlayer();// 0x47727d8
	void Camera(FName NewMode);// 0x4772b9c
	void AddYawInput(float Val);// 0x4773e44
	void AddRollInput(float Val);// 0x4773dc4
	void AddPitchInput(float Val);// 0x4773ec4
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x4772cc4

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 0x4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x1d0, Size: 0x4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d4, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d4, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x1d8, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1dc, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1dc, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x1e0, Size: 0xc]
	FName[] DebugDisplay;//[Offset: 0x1f4, Size: 0xc]
	FName[] ToggledDebugCategories;//[Offset: 0x200, Size: 0xc]
	Canvas* Canvas;//[Offset: 0x20c, Size: 0x4]
	Canvas* DebugCanvas;//[Offset: 0x210, Size: 0x4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x214, Size: 0xc]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x220, Size: 0x4]
	Actor* ShowDebugTargetActor;//[Offset: 0x224, Size: 0x4]
	void ShowHUD();// 0x2540c04
	void ShowDebugToggleSubCategory(FName Category);// 0x46bb3d4
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x46bb35c
	void ShowDebug(FName DebugType);// 0x46bb450
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x46baec0
	void RemoveAllDebugStrings();// 0x46baf84
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2ce6f18
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x2ce6f18
	void ReceiveHitBoxClick(const FName BoxName);// 0x2ce6f18
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2ce6f18
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2ce6f18
	Vector Project(Vector Location);// 0x46b96fc
	void PreviousDebugTarget();// 0xf4af64
	void NextDebugTarget();// 0xf4b0f4
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x46bacf0
	PlayerController* GetOwningPlayerController();// 0x46b91a8
	Pawn* GetOwningPawn();// 0x46b9180
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x46b936c
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x46ba114
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x46ba2ac
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x46baaa4
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x46ba724
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x46b9790
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x46b9b14
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x46b9d3c
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x46ba8c0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x46b9598
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x46b91d0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x46baf98

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 0x4]
	float OrgY;//[Offset: 0x20, Size: 0x4]
	float ClipX;//[Offset: 0x24, Size: 0x4]
	float ClipY;//[Offset: 0x28, Size: 0x4]
	Color DrawColor;//[Offset: 0x2c, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	int SizeX;//[Offset: 0x34, Size: 0x4]
	int SizeY;//[Offset: 0x38, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x40, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 0x4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 0x4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 0x4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4673a04
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x4673b30
	Vector K2_Project(Vector WorldLocation);// 0x4673d30
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x4674088
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4674e78
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x4674830
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x4673dc4
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x4673f58
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x4674c60
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x467514c
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x46741b8
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x4674310
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x4673c14

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 0xc]
	FString DebugText;//[Offset: 0x1c, Size: 0xc]
	float TimeRemaining;//[Offset: 0x28, Size: 0x4]
	float Duration;//[Offset: 0x2c, Size: 0x4]
	Color TextColor;//[Offset: 0x30, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 0xc]
	Font* Font;//[Offset: 0x44, Size: 0x4]
	float FontScale;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x1d0, Size: 0x4]
	SceneComponent* TransformComponent;//[Offset: 0x1d4, Size: 0x4]
	float DefaultFOV;//[Offset: 0x1e0, Size: 0x4]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x1e8, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x1f0, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x1f8, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x240, Size: 0x6a0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8e0, Size: 0x6a0]
	TViewTarget ViewTarget;//[Offset: 0xf80, Size: 0x6b0]
	TViewTarget PendingViewTarget;//[Offset: 0x1630, Size: 0x6b0]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1d00, Size: 0x6a0]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x23a0, Size: 0x6a0]
	CameraModifier*[] ModifierList;//[Offset: 0x2a40, Size: 0xc]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2a4c, Size: 0xc]
	float FreeCamDistance;//[Offset: 0x2a58, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2a5c, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2a68, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2a84, Size: 0xc]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2a90, Size: 0x4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2a94, Size: 0x4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2ab4, Size: 0xc]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2acc, Size: 0xc]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2ad8, Size: 0xc]
	CameraActor* AnimCameraActor;//[Offset: 0x2ae4, Size: 0x4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ae8, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ae8, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ae8, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ae8, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ae9, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2aec, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2af0, Size: 0x4]
	float ViewYawMin;//[Offset: 0x2af4, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2af8, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2afc, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2b00, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2b08, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4770f04
	void StopCameraFade();// 0x2492c2c
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x47705f4
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x4770e38
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x47706c0
	void StopAllCameraShakes(bool bImmediately);// 0x4770db0
	void StopAllCameraAnims(bool bImmediate);// 0x27e1e6c
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x4770bc4
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x4770ab0
	void SetGameCameraCutThisFrame();// 0x47705d0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x4771460
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x46a57c0
	void PlayShakeCamera(CameraShake* CameraShake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x477112c
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4770fd0
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x477078c
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x4771570
	void OnPhotographySessionStart();// 0x24a0b20
	void OnPhotographySessionEnd();// 0x24a0b3c
	void OnPhotographyMultiPartCaptureStart();// 0x24b8cd4
	void OnPhotographyMultiPartCaptureEnd();// 0x2540c04
	PlayerController* GetOwningPlayerController();// 0x278ca2c
	float GetFOVAngle();// 0x4771430
	Rotator GetCameraRotation();// 0x47713e0
	Vector GetCameraLocation();// 0x4771390
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x47714e8
	CameraShake* CreateShakeCamera(class CameraShake ShakeClass);// 0x4771280
	void ClearCameraLensEffects();// 0x2493070
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x2ce6f18
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0xf42758
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4771308

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float OscillationDuration;//[Offset: 0x20, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x80, Size: 0x4]
	float AnimScale;//[Offset: 0x84, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 0x4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 0x4]
	float ShakeScale;//[Offset: 0x134, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 0x4]
	void ReceiveStopShake(bool bImmediately);// 0x2ce6f18
	void ReceivePlayShake(float Scale);// 0x2ce6f18
	bool ReceiveIsFinished();// 0xfe933c
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x2ce6f18

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 0x4]
	float AnimLength;//[Offset: 0x20, Size: 0x4]
	Box BoundingBox;//[Offset: 0x24, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	float BaseFOV;//[Offset: 0x44, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 0x600]
	float BasePostProcessBlendWeight;//[Offset: 0x650, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 0xc]
	FName GroupName;//[Offset: 0x2c, Size: 0x8]
	Color GroupColor;//[Offset: 0x34, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 0xc]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 0x4]
	byte ActiveCondition;//[Offset: 0x34, Size: 0x1]
	FString TrackTitle;//[Offset: 0x38, Size: 0xc]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_ACESFitParam;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_WhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_ColorGradingParam2;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_ColorGradingParam3;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_Brightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMaxHeight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRClampNumMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRClampNumMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMinBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRMaxBrightness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLDRBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_Fog_FogColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_Fog_DistanceNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DistanceFar;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_Density;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_MinFogHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_MaxFogHeight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bOverride_Fog_DirectionalInscatteringStartDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	byte BloomMethod;//[Offset: 0x1b, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x1c, Size: 0x1]
	float WhiteTemp;//[Offset: 0x20, Size: 0x4]
	float WhiteTint;//[Offset: 0x24, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float FilmSlope;//[Offset: 0x180, Size: 0x4]
	float FilmToe;//[Offset: 0x184, Size: 0x4]
	float FilmShoulder;//[Offset: 0x188, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x18c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x190, Size: 0x4]
	Vector4 ACESFitParam;//[Offset: 0x1a0, Size: 0x10]
	float WhitePoint;//[Offset: 0x1b0, Size: 0x4]
	Vector4 ColorGradingParam2;//[Offset: 0x1c0, Size: 0x10]
	Vector2D ColorGradingParam3;//[Offset: 0x1d0, Size: 0x8]
	LinearColor FilmWhitePoint;//[Offset: 0x1d8, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1e8, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1f8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1fc, Size: 0x4]
	float FilmSaturation;//[Offset: 0x200, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x204, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x214, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x224, Size: 0x10]
	float FilmContrast;//[Offset: 0x234, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x238, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x23c, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x240, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x244, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x254, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x258, Size: 0x4]
	float Brightness;//[Offset: 0x25c, Size: 0x4]
	float LDRBrightness;//[Offset: 0x260, Size: 0x4]
	float BloomIntensity;//[Offset: 0x268, Size: 0x4]
	float BloomThreshold;//[Offset: 0x26c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x270, Size: 0x4]
	float Bloom1Size;//[Offset: 0x274, Size: 0x4]
	float Bloom2Size;//[Offset: 0x278, Size: 0x4]
	float Bloom3Size;//[Offset: 0x27c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x280, Size: 0x4]
	float Bloom5Size;//[Offset: 0x284, Size: 0x4]
	float Bloom6Size;//[Offset: 0x288, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x28c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2cc, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2dc, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2ec, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2f0, Size: 0x4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2f4, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2fc, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x300, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x304, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x308, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x30c, Size: 0x4]
	float BloomDirtMaskIntensity;//[Offset: 0x310, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x314, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x324, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x334, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x338, Size: 0x4]
	float CameraShutterSpeed;//[Offset: 0x33c, Size: 0x4]
	float CameraISO;//[Offset: 0x340, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x344, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x348, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x34c, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x350, Size: 0x4]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x354, Size: 0x4]
	float AutoExposureLowPercent;//[Offset: 0x358, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x35c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x360, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x364, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x368, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x36c, Size: 0x4]
	float AutoExposureLDRMaxHeight;//[Offset: 0x370, Size: 0x4]
	int AutoExposureLDRClampNumMin;//[Offset: 0x374, Size: 0x4]
	int AutoExposureLDRClampNumMax;//[Offset: 0x378, Size: 0x4]
	float AutoExposureLDRMinBrightness;//[Offset: 0x37c, Size: 0x4]
	float AutoExposureLDRMaxBrightness;//[Offset: 0x380, Size: 0x4]
	float AutoExposureLDRBias;//[Offset: 0x384, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x388, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x390, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x394, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x398, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3a8, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3ac, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3b0, Size: 0x4]
	LinearColor LensFlareTints;//[Offset: 0x3b4, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x434, Size: 0x4]
	float GrainJitter;//[Offset: 0x438, Size: 0x4]
	float GrainIntensity;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x440, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x444, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x448, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44c, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x450, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x454, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x45c, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x460, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x464, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x468, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x46c, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x470, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x474, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x478, Size: 0x4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x47c, Size: 0x10]
	float SRTIndirectLightingIntensity;//[Offset: 0x48c, Size: 0x4]
	float SRTMaxOcclusionDistance;//[Offset: 0x490, Size: 0x4]
	float SRTOcclusionContrast;//[Offset: 0x494, Size: 0x4]
	float SRTOcclusionExponent;//[Offset: 0x498, Size: 0x4]
	float SRTMinOcclusion;//[Offset: 0x49c, Size: 0x4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x4a0, Size: 0x4]
	float SRTSpecularMinOcclusion;//[Offset: 0x4a4, Size: 0x4]
	LinearColor SRTOcclusionTint;//[Offset: 0x4a8, Size: 0x10]
	float SRTFilterSmoothness;//[Offset: 0x4b8, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x4bc, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4cc, Size: 0x4]
	bool RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4d4, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4d8, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x4dc, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4e0, Size: 0x4]
	float DepthOfFieldSensorWidth;//[Offset: 0x4e4, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x4e8, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4ec, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4f0, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4f4, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4f8, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4fc, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x500, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x504, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x508, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x50c, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x510, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x514, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x518, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x51c, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x520, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x524, Size: 0x4]
	float LPVIntensity;//[Offset: 0x528, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x52c, Size: 0x4]
	float LPVSize;//[Offset: 0x530, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x534, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x538, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x53c, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x540, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x544, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x548, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x54c, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x550, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x554, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x558, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x55c, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x560, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x564, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x568, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x56c, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x570, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x574, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x578, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x579, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x57c, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x580, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x584, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x588, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x589, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x58c, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x590, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x594, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x598, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x59c, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x5a0, Size: 0xc]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x5ac, Size: 0x4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x5b0, Size: 0x4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x5b4, Size: 0x4]
	LinearColor Fog_FogColor;//[Offset: 0x5b8, Size: 0x10]
	float Fog_DistanceNear;//[Offset: 0x5c8, Size: 0x4]
	float Fog_DistanceFar;//[Offset: 0x5cc, Size: 0x4]
	float Fog_Density;//[Offset: 0x5d0, Size: 0x4]
	float Fog_MinFogHeight;//[Offset: 0x5d4, Size: 0x4]
	float Fog_MaxFogHeight;//[Offset: 0x5d8, Size: 0x4]
	LinearColor Fog_DirectionalInscatteringColor;//[Offset: 0x5dc, Size: 0x10]
	float Fog_DirectionalInscatteringExponent;//[Offset: 0x5ec, Size: 0x4]
	float Fog_DirectionalInscatteringStartDistance;//[Offset: 0x5f0, Size: 0x4]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 0x4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 0x4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 0x4]
	byte PlaySpace;//[Offset: 0x58, Size: 0x1]
	void Stop(bool bImmediate);// 0x467052c
	void SetScale(float NewDuration);// 0x467043c
	void SetDuration(float NewDuration);// 0x46704b4

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 0x4]
	Actor* GroupActor;//[Offset: 0x20, Size: 0x4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 0x14]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 0x14]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 0xc]
	FName LookAtGroupName;//[Offset: 0x7c, Size: 0x8]
	float LinCurveTension;//[Offset: 0x84, Size: 0x4]
	float AngCurveTension;//[Offset: 0x88, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c, Size: 0x1]
	byte RotMode;//[Offset: 0x8d, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x20, Size: 0x4]
	float DesiredFOV;//[Offset: 0x24, Size: 0x4]
	float OrthoWidth;//[Offset: 0x28, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 0x4]
	float AspectRatio;//[Offset: 0x34, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x39, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x600]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x640, Size: 0x8]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	byte Priority;//[Offset: 0x1d, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 0x4]
	float AlphaInTime;//[Offset: 0x24, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x28, Size: 0x4]
	float Alpha;//[Offset: 0x2c, Size: 0x4]
	bool IsDisabled();// 0x255c4c8
	Actor* GetViewTarget();// 0x46719a0
	void EnableModifier();// 0x255c594
	void DisableModifier(bool bImmediate);// 0x4671918
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x2ce6f18
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x2ce6f18

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x208, Size: 0x4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x20c, Size: 0x4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x210, Size: 0x4]
	Transform RelativeTransform;//[Offset: 0x220, Size: 0x30]
	float BaseFOV;//[Offset: 0x250, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x258, Size: 0xc]
	float DistFromCamera;//[Offset: 0x264, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x1d0, Size: 0x4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d4, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d4, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x1d8, Size: 0xc]
	delegate OnParticleBurst;//[Offset: 0x1e4, Size: 0xc]
	delegate OnParticleDeath;//[Offset: 0x1f0, Size: 0xc]
	delegate OnParticleCollide;//[Offset: 0x1fc, Size: 0xc]
	void ToggleActive();// 0x46944e0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x469432c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x24b2bd0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x46940d4
	void SetFloatParameter(FName ParameterName, float Param);// 0x46943f4
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x469425c
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4694198
	void OnRep_bCurrentlyActive();// 0x24b8cd4
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x25540b8
	bool IsActive();// 0x46944b8
	void Deactivate();// 0x46944f4
	void Activate();// 0x4694508

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x45c, Size: 0x4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x460, Size: 0xc]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x46c, Size: 0xc]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x479, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x479, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x479, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x479, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47a, Size: 0x1]
	byte LODMethod;//[Offset: 0x485, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x486, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x488, Size: 0xc]
	delegate OnParticleSpawn;//[Offset: 0x494, Size: 0xc]
	delegate OnParticleBurst;//[Offset: 0x4a0, Size: 0xc]
	delegate OnParticleDeath;//[Offset: 0x4ac, Size: 0xc]
	delegate OnParticleCollide;//[Offset: 0x4b8, Size: 0xc]
	Vector OldPosition;//[Offset: 0x4c4, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x4d0, Size: 0xc]
	float WarmupTime;//[Offset: 0x4dc, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x4e0, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x4e8, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x4f0, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x510, Size: 0xc]
	float CustomTimeDilation;//[Offset: 0x524, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x568, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x570, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x578, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x579, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x57a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x5a4, Size: 0xc]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4763f80
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4764274
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x47642ec
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x47643b0
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x4764d14
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x4764c0c
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x4764e20
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x4765034
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x4764f2c
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x4765140
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x476524c
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x47654b4
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4765310
	void ReleaseToPool();// 0x4763f6c
	int GetNumActiveParticles();// 0x476424c
	MaterialInterface* GetNamedMaterial(FName InName);// 0x4763e0c
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x47645a4
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x4764484
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x47646c0
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x47648fc
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x47647dc
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x4764a18
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x4764b34
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x4763c6c
	void EndTrails();// 0x47640dc
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x4763e98
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x47640f0

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4763760
	void SetFloatParameter(FName ParameterName, float Param);// 0x4763834
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4763688
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x47635bc

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 0x4]
	float WarmupTime;//[Offset: 0x28, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 0xc]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 0x4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bEnableTranslucentOptimization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bRenderingInFullResolution;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	bool bCalCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	float CoverageBoundScale;//[Offset: 0x48, Size: 0x4]
	float OverDrawScale;//[Offset: 0x4c, Size: 0x4]
	float LODDistanceCheckTime;//[Offset: 0x50, Size: 0x4]
	byte LODMethod;//[Offset: 0x54, Size: 0x1]
	float[] LODDistances;//[Offset: 0x58, Size: 0xc]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x68, Size: 0xc]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0x78, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0x94, Size: 0x4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x98, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x98, Size: 0x1]
	float Delay;//[Offset: 0x9c, Size: 0x4]
	float DelayLow;//[Offset: 0xa0, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa8, Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xac, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xb0, Size: 0x4]
	enum MaxSignificanceLevel;//[Offset: 0xb4, Size: 0x1]
	uint32 MaxPoolSize;//[Offset: 0xb8, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xbc, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xc8, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0xcc, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0xd0, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xec, Size: 0xc]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0xc]
	FName[] Tags;//[Offset: 0x108, Size: 0xc]
	bool ContainsEmitterType(class Object TypeData);// 0x47623f0

--------------------------------
Class: FXSystemAsset.Object

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x1c, Size: 0x8]
	bool bSupportMergedCrossEmitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	int SubUVDataOffset;//[Offset: 0x28, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x2d, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x34, Size: 0xc]
	int PeakActiveParticles;//[Offset: 0x40, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x48, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 0x4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 0xc]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 0x4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 0x4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 0x4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 0xc]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 0xc]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 0xc]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 0xc]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 0xc]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x24, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x30, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x3c, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	byte SortMode;//[Offset: 0x49, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a, Size: 0x1]
	float EmitterDuration;//[Offset: 0x4c, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x50, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	int EmitterLoops;//[Offset: 0x58, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c, Size: 0x28]
	byte ParticleBurstMethod;//[Offset: 0x84, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x88, Size: 0xc]
	float EmitterDelay;//[Offset: 0x94, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0x98, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0x9d, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xa0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xa4, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	float RandomImageTime;//[Offset: 0xac, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xb0, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xb8, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xc4, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	int MaxDrawCount;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0xd4, Size: 0x4]
	byte BoundingMode;//[Offset: 0xd8, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xd9, Size: 0x1]
	float AlphaThreshold;//[Offset: 0xdc, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0xe0, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xe4, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0xf0, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x100, Size: 0xc]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	byte LODValidity;//[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 0x4]
	float MaxValue;//[Offset: 0x20, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x1c]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0xc, Size: 0xc]
	byte LockFlag;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20, Size: 0x28]
	RawDistributionFloat RateScale;//[Offset: 0x48, Size: 0x28]
	byte ParticleBurstMethod;//[Offset: 0x70, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x74, Size: 0xc]
	RawDistributionFloat BurstScale;//[Offset: 0x80, Size: 0x28]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24, Size: 0x40]
	OrbitOptions OffsetOptions;//[Offset: 0x64, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x68, Size: 0x40]
	OrbitOptions RotationOptions;//[Offset: 0xa8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac, Size: 0x40]
	OrbitOptions RotationRateOptions;//[Offset: 0xec, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 0x4]
	float MaxValue;//[Offset: 0x20, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x24, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x30, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f, Size: 0x1]
	FName EventName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 0xc]
	int ActiveTab;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0xc]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 0xc]
	float ViewStartInput;//[Offset: 0x18, Size: 0x4]
	float ViewEndInput;//[Offset: 0x1c, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x20, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x4]
	Color CurveColor;//[Offset: 0x4, Size: 0x4]
	FString CurveName;//[Offset: 0x8, Size: 0xc]
	int bHideCurve;//[Offset: 0x14, Size: 0x4]
	int bColorCurve;//[Offset: 0x18, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 0x4]
	int bClamp;//[Offset: 0x20, Size: 0x4]
	float ClampLow;//[Offset: 0x24, Size: 0x4]
	float ClampHigh;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x690]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x690]
	PlayerState* PlayerState;//[Offset: 0x6a0, Size: 0x4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x30, Size: 0xc]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x3c, Size: 0x3c]
	float SplitScreenShakeScale;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x1d0, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x1d4, Size: 0x4]
	SceneComponent* SceneComponent;//[Offset: 0x1d8, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1]
	float AspectRatio;//[Offset: 0x1e8, Size: 0x4]
	float FOVAngle;//[Offset: 0x1ec, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x1f0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x200, Size: 0x600]
	int GetAutoActivatePlayerIndex();// 0x466ff44

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1ec, Size: 0x4]
	float OrthoWidth;//[Offset: 0x1f0, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x1f4, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x1f8, Size: 0x4]
	float AspectRatio;//[Offset: 0x1fc, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bUseLODTransimitFOV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	float LODTransimitFOV;//[Offset: 0x204, Size: 0x4]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x209, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x600]
	void SetUseLODTransimitFOV(bool bInUseLODTransimitFOV);// 0x4671064
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x46710ec
	void SetProjectionMode(byte InProjectionMode);// 0x4670f7c
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4670f08
	void SetOrthoWidth(float InOrthoWidth);// 0x46712e4
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4671270
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x46711fc
	void SetLODTransimitFOV(float InLODTransimitFOV);// 0x4670ff0
	void SetFieldOfView(float InFieldOfView);// 0x27102d8
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x4671174
	void SetAspectRatio(float InAspectRatio);// 0x2801888
	void RemoveBlendable(interface class                                                                                                                                                                                                                      InBlendableObject);// 0x4670b34
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x4670d50
	void FrustumCullActors(out Actor*[] InActorList, byte AxisConstraint, bool bIntersectPoint);// 0x4670a00
	void AddOrUpdateBlendable(interface class                                                                                                                                                                                                                      InBlendableObject, float InWeight);// 0x4670c1c

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 0x4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 0x4]
	void Walk();// 0x255c594
	void ViewSelf();// 0xfe5dc0
	void ViewPlayer(FString S);// 0x467fae8
	void ViewClass(class Actor DesiredClass);// 0x3c156dc
	void ViewActor(FName ActorName);// 0x467fa64
	void UpdateSafeArea();// 0x467f088
	void ToggleServerStatReplicatorUpdateStatNet();// 0x467f09c
	void ToggleServerStatReplicatorClientOverwrite();// 0x467f0b0
	void ToggleDebugCamera();// 0x467f8bc
	void ToggleAILogging();// 0x467f8a0
	void TestCollisionDistance();// 0x2776058
	void Teleport();// 0x25094f0
	void Summon(FString ClassName);// 0x467fb80
	void StreamLevelOut(FName PackageName);// 0x467f8d8
	void StreamLevelIn(FName PackageName);// 0x467f9e0
	void SpawnServerStatReplicator();// 0x467f0d8
	void Slomo(float NewTimeDilation);// 0x106cf10
	void SetWorldOrigin();// 0x467f1d0
	void SetMouseSensitivityToDefault();// 0xf43824
	void ServerToggleAILogging();// 0x467f844
	void ReceiveInitCheatManager();// 0x2ce6f18
	void ReceiveEndPlay();// 0x2ce6f18
	void PlayersOnly();// 0x2775a10
	void OnlyLoadLevel(FName PackageName);// 0x467f95c
	void LogLoc();// 0xf43840
	void InvertMouse();// 0xf43808
	void God();// 0x106cef4
	void Ghost();// 0x4634c7c
	void FreezeFrame(float Delay);// 0x264e71c
	void Fly();// 0xfbc1bc
	void FlushLog();// 0x467f1e4
	void EnableDebugCamera();// 0x467f06c
	void DumpVoiceMutingState();// 0x467f624
	void DumpPartyState();// 0x277613c
	void DumpOnlineSessionState();// 0x467f640
	void DumpChatState();// 0x2776158
	void DisableDebugCamera();// 0x467f050
	void DestroyTarget();// 0x27757c0
	void DestroyServerStatReplicator();// 0x467f0c4
	void DestroyPawns(class Pawn aClass);// 0x467fc18
	void DestroyAllPawnsExceptTarget();// 0x467fc98
	void DestroyAll(class Actor aClass);// 0x132e410
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x467f780
	void DebugCapsuleSweepPawn();// 0x2775f6c
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x467f678
	void DebugCapsuleSweepClear();// 0x467f65c
	void DebugCapsuleSweepChannel(byte Channel);// 0x467f700
	void DebugCapsuleSweepCapture();// 0x2775f50
	void DebugCapsuleSweep();// 0x2775ee0
	void DamageTarget(float DamageAmount);// 0xfbc4d8
	void ClearUnloadLevelKeyword();// 0xfd338c
	void CheatScript(FString ScriptName);// 0x467f0ec
	void ChangeSize(float F);// 0x2562cb4
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x467f200
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x467f444
	void BugIt(FString ScreenShotDescription);// 0x467f3ac
	void AddUnloadLevelKeyword(FString Keyword);// 0x258630c

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c1, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c1, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c1, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c1, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c1, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c1, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c1, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c1, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x4c4, Size: 0x4]
	Actor* SelectedActor;//[Offset: 0x4c8, Size: 0x4]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x4cc, Size: 0x4]
	HitResult SelectedHitPoint;//[Offset: 0x4d0, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x558, Size: 0x4]
	Player* OriginalPlayer;//[Offset: 0x55c, Size: 0x4]
	float SpeedScale;//[Offset: 0x560, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x564, Size: 0x4]
	float InitialAccel;//[Offset: 0x568, Size: 0x4]
	float InitialDecel;//[Offset: 0x56c, Size: 0x4]
	void ToggleDisplay();// 0x468a38c
	void ShowDebugSelectedInfo();// 0x247c36c
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x468a2ec
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x2ce6f18
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x2ce6f18
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x2ce6f18
	Actor* GetSelectedActor();// 0x468a364

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x45c, Size: 0x4]
	float FrustumAngle;//[Offset: 0x460, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x464, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x468, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x46c, Size: 0x4]
	Texture* Texture;//[Offset: 0x470, Size: 0x4]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0xf8, Size: 0xc]
	FName[] InvertedAxis;//[Offset: 0x128, Size: 0xc]
	void SetMouseSensitivity(const float Sensitivity);// 0x477f07c
	void SetBind(FName BindName, FString Command);// 0x477efa0
	void InvertAxisKey(const Key AxisKey);// 0x477ede8
	void InvertAxis(const FName AxisName);// 0x477ed6c
	void ClearSmoothing();// 0x477ed58

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x10]
	FString Command;//[Offset: 0x10, Size: 0xc]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd4, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe4, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0xf4, Size: 0x1c]
	delegate ForegroundColorDelegate;//[Offset: 0x110, Size: 0x10]
	Margin Padding;//[Offset: 0x120, Size: 0x10]
	bool bIsOpenSoftResLoader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x134, Size: 0xc]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x140, Size: 0xc]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x14c, Size: 0xc]
	WidgetTree* WidgetTree;//[Offset: 0x158, Size: 0x4]
	int Priority;//[Offset: 0x15c, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x160, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x160, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x160, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x160, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x160, Size: 0x1]
	bool bUseRenderTransformOnDrag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x160, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x161, Size: 0x1]
	enum TickFrequency;//[Offset: 0x16c, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x170, Size: 0x4]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x174, Size: 0xc]
	void UnregisterInputComponent();// 0x3c1470c
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3c15bb0
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3c15958
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x3c15b38
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x3c158e0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2ce6f18
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x3c14748
	void StopListeningForAllInputActions();// 0x3c14734
	void StopAnimationsAndLatentActions();// 0x3c15d90
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x3c14e68
	void StopAllAnimations();// 0x3c14e54
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x3c1606c
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3c14b34
	void SetPadding(Margin InPadding);// 0x3c153dc
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x3c15de0
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x3c14bf0
	void SetInputActionPriority(int NewPriority);// 0x3c14610
	void SetInputActionBlocking(bool bShouldBlock);// 0x3c14590
	void SetForegroundColor(SlateColor InForegroundColor);// 0x3c15470
	void SetDesiredSizeInViewport(Vector2D Size);// 0x3c15ffc
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3c15660
	void SetAnchorsInViewport(Anchors Anchors);// 0x3c15f74
	void SetAlignmentInViewport(Vector2D Alignment);// 0x3c15f04
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x3c14abc
	void RemoveFromViewport();// 0x3c1612c
	void RegisterInputComponent();// 0x3c14720
	void PreConstruct(bool IsDesignTime);// 0x2ce6f18
	void PlaySound(SoundBase* SoundToPlay);// 0x3c149c4
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3c15068
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3c14ee0
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3c14fa4
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3c15244
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x3c14dd4
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2ce6f18
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2ce6f18
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x2ce6f18
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2ce6f18
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2ce6f18
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x2ce6f18
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2ce6f18
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2ce6f18
	void OnPaint(out PaintContext Context);// 0x2ce6f18
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2ce6f18
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2ce6f18
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x2ce6f18
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2ce6f18
	void OnMouseCaptureLost();// 0x2ce6f18
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2ce6f18
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2ce6f18
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x2ce6f18
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x2ce6f18
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2ce6f18
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2ce6f18
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x2ce6f18
	void OnInitialized();// 0x2ce6f18
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x2ce6f18
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2ce6f18
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2ce6f18
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2ce6f18
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2ce6f18
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2ce6f18
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x2ce6f18
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2ce6f18
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x2687e44
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x3c156dc
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x2ce6f18
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x2ce6f18
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x3c1480c
	bool IsPlayingAnimation();// 0x3c1499c
	bool IsListeningForInputAction(FName ActionName);// 0x3c14688
	bool IsInViewport();// 0x3c15e58
	bool IsInteractable();// 0x2ce6f18
	bool IsAnyAnimationPlaying();// 0x3c14cac
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x3c14a3c
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3c14cd4
	Pawn* GetOwningPlayerPawn();// 0x3c15db8
	bool GetIsVisible();// 0x3c15e58
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x3c14d54
	Anchors GetAnchorsInViewport();// 0x3c15ec0
	Vector2D GetAlignmentInViewport();// 0x3c15e80
	void Destruct();// 0x2ce6f18
	void Construct();// 0x2ce6f18
	void CancelLatentActions();// 0x3c15da4
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3c15ca0
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3c15a48
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x3c1575c
	void AddToViewport(int ZOrder);// 0x3c161c0
	bool AddToPlayerScreen(int ZOrder);// 0x3c16140

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 0x4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 0x10]
	FText ToolTipText;//[Offset: 0x30, Size: 0xc]
	delegate ToolTipTextDelegate;//[Offset: 0x3c, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x4c, Size: 0x4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x50, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x60, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x70, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0x8c, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0x98, Size: 0x4]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	byte UsedLayerPolicy;//[Offset: 0x9d, Size: 0x1]
	byte PreservedLayerNum;//[Offset: 0x9e, Size: 0x1]
	byte Cursor;//[Offset: 0x9f, Size: 0x1]
	enum Clipping;//[Offset: 0xa0, Size: 0x1]
	enum Visibility;//[Offset: 0xa1, Size: 0x1]
	float RenderOpacity;//[Offset: 0xa4, Size: 0x4]
	bool DisablePixelSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	WidgetNavigation* Navigation;//[Offset: 0xac, Size: 0x4]
	enum FlowDirectionPreference;//[Offset: 0xb0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc4, Size: 0xc]
	bool UseDefaultLayerPolicy();// 0x3c1fe00
	void SetVisibility(enum InVisibility);// 0xfe9388
	void SetUserFocus(PlayerController* PlayerController);// 0x3c200dc
	void SetToolTipText(out const FText InToolTipText);// 0x3c206e0
	void SetToolTip(Widget* Widget);// 0x3c20668
	void SetRenderTranslation(Vector2D Translation);// 0x3c2090c
	void SetRenderTransformPivot(Vector2D Pivot);// 0x3c2089c
	void SetRenderTransformAngle(float Angle);// 0x3c209a4
	void SetRenderTransform(WidgetTransform InTransform);// 0x3c20afc
	void SetRenderShear(Vector2D Shear);// 0x3c20a1c
	void SetRenderScale(Vector2D Scale);// 0x3c20a8c
	void SetRenderOpacity(float InOpacity);// 0x3c204ec
	void SetPreservedLayerNum(byte InPreservedLayerNum);// 0x3c1fd6c
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x3c1fea8
	void SetKeyboardFocus();// 0x3c202a4
	void SetIsEnabled(bool bInIsEnabled);// 0x3c207ec
	void SetCursor(byte InCursor);// 0x3c205f0
	void SetClipping(enum InClipping);// 0x3c2044c
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x3c1ffb4
	void ResetCursor();// 0x3c205dc
	void RemoveFromParent();// 0x255c4f8
	EventReply OnReply__DelegateSignature();// 0x2ce6f18
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2ce6f18
	bool IsVisible();// 0x3c205b4
	bool IsHovered();// 0x255c4c8
	void InvalidateLayoutAndVolatility();// 0x3c200b4
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x3c20154
	bool HasUserFocus(PlayerController* PlayerController);// 0x3c20224
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x3c202b8
	bool HasMouseCapture();// 0x3c2037c
	bool HasKeyboardFocus();// 0x3c203a4
	bool HasFocusedDescendants();// 0x3c201d4
	bool HasAnyUserFocus();// 0x3c201fc
	Widget* GetWidget__DelegateSignature();// 0x2ce6f18
	enum GetVisibility();// 0x3c2058c
	FText GetText__DelegateSignature();// 0x2ce6f18
	enum GetSlateVisibility__DelegateSignature();// 0x2ce6f18
	SlateColor GetSlateColor__DelegateSignature();// 0x2ce6f18
	SlateBrush GetSlateBrush__DelegateSignature();// 0x2ce6f18
	float GetRenderTransformAngle();// 0x3c2097c
	float GetRenderOpacity();// 0x3c20564
	byte GetPreservedLayerNum();// 0x3c1fde4
	PanelWidget* GetParent();// 0x3c1fe80
	PlayerController* GetOwningPlayer();// 0x3c1fd14
	LocalPlayer* GetOwningLocalPlayer();// 0x3c1fce4
	byte GetMouseCursor__DelegateSignature();// 0x2ce6f18
	LinearColor GetLinearColor__DelegateSignature();// 0x2ce6f18
	bool GetIsEnabled();// 0x3c20874
	int GetInt32__DelegateSignature();// 0x2ce6f18
	GameInstance* GetGameInstance();// 0x3c1fd44
	float GetFloat__DelegateSignature();// 0x2ce6f18
	Vector2D GetDesiredSize();// 0x3c20074
	enum GetClipping();// 0x3c204c4
	enum GetCheckBoxState__DelegateSignature();// 0x2ce6f18
	Geometry GetCachedGeometry();// 0x3c1fe50
	bool GetBool__DelegateSignature();// 0x2ce6f18
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x2ce6f18
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x2ce6f18
	void ForceVolatile(bool bForce);// 0x3c203cc
	void ForceLayoutPrepass();// 0x3c200c8
	void EnableLayerPolicy();// 0x3c1fe3c
	void DisableLayerPolicy();// 0x3c1fe28

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 0x4]
	Widget* Content;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xd0, Size: 0xc]
	bool RemoveChildAt(int Index);// 0x3c04ee0
	bool RemoveChild(Widget* Content);// 0x3c04de0
	bool HasChild(Widget* Content);// 0x3c04f60
	bool HasAnyChildren();// 0x3c04db8
	int GetChildrenCount();// 0x132e490
	int GetChildIndex(const Widget* Content);// 0x3c04fe0
	Widget* GetChildAt(int Index);// 0x3c050f4
	Widget*[] GetAllChildren();// 0x3c05060
	void ClearChildren();// 0x3c04d9c
	PanelSlot* AddChild(Widget* Content);// 0x3c04e60

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* UsingMovieScene;//[Offset: 0x288, Size: 0x4]
	MovieScene* MovieScene;//[Offset: 0x28c, Size: 0x4]
	MovieScene*[] LQMovieScenes;//[Offset: 0x290, Size: 0xc]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x29c, Size: 0xc]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x2ac, Size: 0xc]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3c21e04
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3c21bac
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x3c21d8c
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x3c21b34
	float GetStartTime();// 0x3c2200c
	float GetEndTime();// 0x3c21fe4
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3c21ef4
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3c21c9c

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x40, Size: 0x244]
	enum DefaultCompletionMode;//[Offset: 0x284, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 0xc]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 0xc]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 0xc]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 0xc]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 0x4]
	MovieSceneFrameRange SelectionRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0x84, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x94, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x9c, Size: 0x8]
	enum EvaluationType;//[Offset: 0xa4, Size: 0x1]
	enum ClockSource;//[Offset: 0xa5, Size: 0x1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0xa8, Size: 0xc]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0xc]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	Guid Guid;//[Offset: 0x40, Size: 0x10]
	FString Name;//[Offset: 0x50, Size: 0xc]
	Object* ObjectTemplate;//[Offset: 0x5c, Size: 0x4]
	Guid[] ChildPossessables;//[Offset: 0x60, Size: 0xc]
	enum Ownership;//[Offset: 0x6c, Size: 0x1]
	FName LevelName;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0xc]
	Guid Guid;//[Offset: 0xc, Size: 0x10]
	FString Name;//[Offset: 0x1c, Size: 0xc]
	class Object* PossessedObjectClass;//[Offset: 0x28, Size: 0x4]
	Guid ParentGuid;//[Offset: 0x2c, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0xc]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x3c]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 0x24]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 0x78]
	Guid SequenceSignature;//[Offset: 0x114, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x124, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x128, Size: 0x7c]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x1a4, Size: 0x50]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x1f4, Size: 0x50]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x14, Size: 0x18]
	MovieSceneTrack* SourceTrack;//[Offset: 0x2c, Size: 0x4]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x30, Size: 0x50]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x80, Size: 0xc]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x90, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xc8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0xc]
	MovieSceneSegment[] SortedSegments;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0xc]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 0xc]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0xc]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0xc]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 0xc]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x18, Size: 0x3c]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x3c]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 0x3c]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x14]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x14, Size: 0xc]
	FrameRate TickResolution;//[Offset: 0x20, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x28, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x2c, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x3c, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x4c, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x5c, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x60, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0x80, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x90, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x4, Size: 0x3c]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Geometry

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x328, Size: 0x4]
	void SetUserTag(FName InUserTag);// 0x3c12ec4
	FName GetUserTag();// 0x3c12f40

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x1d, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x1e, Size: 0x1]
	FText AccessibleText;//[Offset: 0x20, Size: 0xc]
	delegate AccessibleTextDelegate;//[Offset: 0x2c, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x3c, Size: 0xc]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x1c, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x40, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x64, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x88, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xac, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xd0, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 0x18]
	FName DestinationProperty;//[Offset: 0x3c, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0xc]
	Function* CachedFunction;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: EventReply

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 0x8]
	Margin Margin;//[Offset: 0xc, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x1c, Size: 0x1c]
	Object* ResourceObject;//[Offset: 0x38, Size: 0x4]
	FName ResourceName;//[Offset: 0x3c, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x44, Size: 0x14]
	byte DrawAs;//[Offset: 0x58, Size: 0x1]
	byte Tiling;//[Offset: 0x59, Size: 0x1]
	byte Mirroring;//[Offset: 0x5a, Size: 0x1]
	byte ImageType;//[Offset: 0x5b, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x48, Size: 0x4]
	byte AspectRatioAxisConstraint;//[Offset: 0x68, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x6c, Size: 0x4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	int ControllerId;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x2c, Size: 0x4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x3c, Size: 0xc]
	World* World;//[Offset: 0x5c, Size: 0x4]
	GameInstance* GameInstance;//[Offset: 0x60, Size: 0x4]
	void SSSwapControllers();// 0x106b010
	void ShowTitleSafeArea();// 0xfe936c
	void SetConsoleTarget(int PlayerIndex);// 0x264e71c

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x28, Size: 0x4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x2c, Size: 0x4]
	Texture2D* DefaultTexture_White;//[Offset: 0x30, Size: 0x4]
	FString[] HistoryBuffer;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x4]
	class Object* WithinClass;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x24, Size: 0xc]
	OnlineSession* OnlineSession;//[Offset: 0x30, Size: 0x4]
	Object*[] ReferencedObjects;//[Offset: 0x34, Size: 0xc]
	void ReceiveShutdown();// 0x2ce6f18
	void ReceiveInit();// 0x2ce6f18
	void HandleTravelError(byte FailureType);// 0x2ce6f18
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x2ce6f18
	void DebugRemovePlayer(int ControllerId);// 0x132e410
	void DebugCreatePlayer(int ControllerId);// 0x285cec0

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 0x4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x21, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x28, Size: 0x3c]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x64, Size: 0x1c]
	float Duration;//[Offset: 0x80, Size: 0x4]
	float MaxDistance;//[Offset: 0x84, Size: 0x4]
	float TotalSamples;//[Offset: 0x88, Size: 0x4]
	float Priority;//[Offset: 0x8c, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x90, Size: 0x4]
	SoundModulation Modulation;//[Offset: 0x94, Size: 0xc]
	SoundSubmix* SoundSubmixObject;//[Offset: 0xa0, Size: 0x4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0xa4, Size: 0xc]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0xb0, Size: 0x4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0xb4, Size: 0xc]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0xc0, Size: 0xc]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 0x28]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 0xc]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 0xc]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float StereoBleed;//[Offset: 0x8, Size: 0x4]
	float LFEBleed;//[Offset: 0xc, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	byte OutputTarget;//[Offset: 0x25, Size: 0x1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float EQPriority;//[Offset: 0x20, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 0x38]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 0xc]
	float InitialDelay;//[Offset: 0x6c, Size: 0x4]
	float FadeInTime;//[Offset: 0x70, Size: 0x4]
	float Duration;//[Offset: 0x74, Size: 0x4]
	float FadeOutTime;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4]
	float Gain0;//[Offset: 0xc, Size: 0x4]
	float Bandwidth0;//[Offset: 0x10, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4]
	float Gain1;//[Offset: 0x18, Size: 0x4]
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4]
	float Gain2;//[Offset: 0x24, Size: 0x4]
	float Bandwidth2;//[Offset: 0x28, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4]
	float Gain3;//[Offset: 0x30, Size: 0x4]
	float Bandwidth3;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 0x4]
	float PitchAdjuster;//[Offset: 0x8, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 0x1c]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 0x244]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x84, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x84, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0x86, Size: 0x1]
	enum AbsorptionMethod;//[Offset: 0x87, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0x88, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0x89, Size: 0x1]
	float OmniRadius;//[Offset: 0x8c, Size: 0x4]
	float StereoSpread;//[Offset: 0x90, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0x94, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0x98, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0x9c, Size: 0x64]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x100, Size: 0x64]
	float LPFFrequencyAtMin;//[Offset: 0x164, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x168, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x16c, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x170, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x174, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x178, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x17c, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x180, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x184, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x188, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x18c, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x190, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x194, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x198, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x19c, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x1a0, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x1a4, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x1b8, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1bc, Size: 0x64]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x220, Size: 0x24]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x5, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0x8, Size: 0x4]
	Vector AttenuationShapeExtents;//[Offset: 0xc, Size: 0xc]
	float ConeOffset;//[Offset: 0x18, Size: 0x4]
	float FalloffDistance;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x20, Size: 0x64]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x60]
	CurveFloat* ExternalCurve;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0xc]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0xc, Size: 0xc]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 0xc]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 0x4]
	enum ChannelFormat;//[Offset: 0x2c, Size: 0x1]
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x30, Size: 0xc]
	AmbisonicsSubmixSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x3c, Size: 0x4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x40, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x44, Size: 0x4]
	float OutputVolume;//[Offset: 0x48, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x4c, Size: 0xc]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x47b8cfc
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x47b8c0c
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x47b8f18
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x47b8c84
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x47b8a4c
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x47b8b08

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0xcc, Size: 0x4]
	int StreamingPriority;//[Offset: 0xd0, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0xd4, Size: 0x1]
	byte SoundGroup;//[Offset: 0xd6, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd7, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd7, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd7, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0xdc, Size: 0xc]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0xe8, Size: 0xc]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0xf4, Size: 0xc]
	FString SpokenText;//[Offset: 0x110, Size: 0xc]
	float SubtitlePriority;//[Offset: 0x11c, Size: 0x4]
	float Volume;//[Offset: 0x120, Size: 0x4]
	float Pitch;//[Offset: 0x124, Size: 0x4]
	int NumChannels;//[Offset: 0x128, Size: 0x4]
	int SampleRate;//[Offset: 0x12c, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x130, Size: 0xc]
	CurveTable* Curves;//[Offset: 0x13c, Size: 0x4]
	CurveTable* InternalCurves;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0xc]
	float TimeSec;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0xc]
	float Time;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: AmbisonicsSubmixSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 0x4]
	float SendLevel;//[Offset: 0x8, Size: 0x4]
	float MinSendLevel;//[Offset: 0xc, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendDistance;//[Offset: 0x14, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x18, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x1c, Size: 0x64]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 0xc]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 0x4]
	float SendLevel;//[Offset: 0x8, Size: 0x4]
	float MinSendLevel;//[Offset: 0xc, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendDistance;//[Offset: 0x14, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x18, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x1c, Size: 0x64]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x204, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x208, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 0xc]
	Object* Payload;//[Offset: 0x28, Size: 0x4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 0x4]
	enum Pivot;//[Offset: 0x30, Size: 0x1]
	Vector2D Offset;//[Offset: 0x34, Size: 0x8]
	delegate OnDrop;//[Offset: 0x3c, Size: 0xc]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 0xc]
	delegate OnDragged;//[Offset: 0x54, Size: 0xc]
	void Drop(out const PointerEvent PointerEvent);// 0x3bf7044
	void Dragged(out const PointerEvent PointerEvent);// 0x3bf6d1c
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3bf6eb0

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0xfc, Size: 0xc]
	bool WasControllerKeyJustReleased(Key Key);// 0x46c0634
	bool WasControllerKeyJustPressed(Key Key);// 0x46c0634
	bool IsControllerKeyDown(Key Key);// 0x46c0634
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x46c02e4
	Vector GetControllerVectorKeyState(Key Key);// 0x46c0464
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x46c0044
	float GetControllerKeyTimeDown(Key Key);// 0x46c0124
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x46bff20
	float GetControllerAnalogKeyState(Key Key);// 0x46c0124

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x4]
	delegate Delegate;//[Offset: 0x4, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x14, Size: 0x1]
	FName UserTag;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 0xc]
	float Duration;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 0x64]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x210, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x214, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x218, Size: 0x4]
	SphereComponent* CollisionComponent;//[Offset: 0x21c, Size: 0x4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x220, Size: 0x4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	void TurnAtRate(float Rate);// 0x468be5c
	void MoveUp_World(float Val);// 0x468bedc
	void MoveRight(float Val);// 0x468bf5c
	void MoveForward(float Val);// 0x468bfdc
	void LookUpAtRate(float Rate);// 0x468bddc

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x46c, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x47ba69c
	float GetUnscaledSphereRadius();// 0x46762c0
	float GetShapeScale();// 0x4676078
	float GetScaledSphereRadius();// 0x47ba644

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PreviousLODLevel;//[Offset: 0x48c, Size: 0x4]
	float LODBoundScale;//[Offset: 0x490, Size: 0x4]
	int MinLOD;//[Offset: 0x494, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x498, Size: 0x4]
	Color WireframeColorOverride;//[Offset: 0x4a4, Size: 0x4]
	bool bReuseLightMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a8, Size: 0x1]
	MapBuildDataRegistry* MapBuildDataRegistry;//[Offset: 0x4ac, Size: 0x4]
	MapBuildDataRegistry* OwnerBuildDataRegistry;//[Offset: 0x4b0, Size: 0x4]
	OrientedBox OrientedBox;//[Offset: 0x4b4, Size: 0x3c]
	Guid MeshCompGuid;//[Offset: 0x4f0, Size: 0x10]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x500, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x500, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x500, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x500, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x500, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x500, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x500, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x500, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x501, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x501, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x501, Size: 0x1]
	bool bMeshProbesLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x501, Size: 0x1]
	float MeshProbesVisibilityFraction;//[Offset: 0x504, Size: 0x4]
	float MeshProbesIntensity;//[Offset: 0x508, Size: 0x4]
	int OverriddenLightMapRes;//[Offset: 0x50c, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x510, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x514, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x518, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x51c, Size: 0xc]
	Guid[] CachedMapBuildId;//[Offset: 0x528, Size: 0xc]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x534, Size: 0xc]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x540, Size: 0x18]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x558, Size: 0x18]
	float BakedProbeIntensityScalar;//[Offset: 0x570, Size: 0x4]
	void SharedSHToOtherStaticMeshComponent(StaticMeshComponent* Other);// 0x47c6464
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x11cbdc8
	void SetReverseCulling(bool ReverseCulling);// 0x47c6294
	void SetLODBoundScale(float NewLODBoundScale);// 0x47c621c
	void SetForcedLodModel(int NewForcedLodModel);// 0x12b5f38
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x47c63ec
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x47c64dc
	bool IsSharedSHSample();// 0x2414c90
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x47c6314
	bool CompareSharedSH(StaticMeshComponent* Other);// 0x24942b4

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformFloat ScreenSizeMid;//[Offset: 0x50, Size: 0x4]
	PerPlatformFloat ScreenSizeLow;//[Offset: 0x70, Size: 0x4]
	bool bUseOrientedBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x9c, Size: 0x4]
	byte ShadowLodBias;//[Offset: 0xa0, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0xa4, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0xa8, Size: 0xc]
	float LightmapUVDensity;//[Offset: 0xb4, Size: 0x4]
	int LightMapResolution;//[Offset: 0xb8, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0xbc, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xc0, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xc4, Size: 0x4]
	int LODForCollision;//[Offset: 0xc8, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0xcc, Size: 0x4]
	float MinScreenSize;//[Offset: 0xd0, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd4, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd4, Size: 0x1]
	bool bUseVertexCompress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd4, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd4, Size: 0x1]
	StaticMesh*[] LODResourceOverride;//[Offset: 0xe0, Size: 0xc]
	Guid MeshGuid;//[Offset: 0xfc, Size: 0x10]
	StaticMeshSocket*[] Sockets;//[Offset: 0x10c, Size: 0xc]
	Vector PositiveBoundsExtension;//[Offset: 0x120, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x12c, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x138, Size: 0x1c]
	OrientedBox ExtendedOrientedBox;//[Offset: 0x154, Size: 0x3c]
	float OrientedBoxSphereRadius;//[Offset: 0x190, Size: 0x4]
	int ElementToIgnoreForTexFactor;//[Offset: 0x194, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x198, Size: 0xc]
	Object* EditableMesh;//[Offset: 0x1a8, Size: 0x4]
	Object*[] EditableMeshLODs;//[Offset: 0x1ac, Size: 0xc]
	StaticMesh* ComplexCollisionMesh;//[Offset: 0x1b8, Size: 0x4]
	NavCollisionBase* NavCollision;//[Offset: 0x1bc, Size: 0x4]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x47c4b84
	int GetNumSections(int InLOD);// 0x47c4dfc
	int GetNumLODs();// 0x47c4f24
	int GetMaterialIndex(FName MaterialSlotName);// 0x47c4cf8
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x47c4d7c
	BoxSphereBounds GetBounds();// 0x47c4ed0
	Box GetBoundingBox();// 0x47c4e7c
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x47c4bfc
	void AddSocket(StaticMeshSocket* Socket);// 0x47c4c80

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x1c, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x24, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x30, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x3c, Size: 0xc]
	FString Tag;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x4]
	FName MaterialSlotName;//[Offset: 0x4, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0xc, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x14, Size: 0x14]

--------------------------------
Class: OrientedBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector AxisX;//[Offset: 0xc, Size: 0xc]
	Vector AxisY;//[Offset: 0x18, Size: 0xc]
	Vector AxisZ;//[Offset: 0x24, Size: 0xc]
	float ExtentX;//[Offset: 0x30, Size: 0x4]
	float ExtentY;//[Offset: 0x34, Size: 0x4]
	float ExtentZ;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bUseUnwrapMaterialExport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bStaticMeshUseIdeaAO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 0x4]
	float LightmapBoost;//[Offset: 0x4, Size: 0x4]
	float MaxLuminance;//[Offset: 0x8, Size: 0x4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0xc, Size: 0x4]
	float SunIntensity;//[Offset: 0x10, Size: 0x4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 0xc]
	float ActiveOpacity;//[Offset: 0x28, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x34, Size: 0x4]
	float ActivationDelay;//[Offset: 0x38, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float StartupDelay;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: TouchInputControl
	bool IsUseAtlas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D AtlasSize;//[Offset: 0x4, Size: 0x8]
	IntPoint Image1Pos;//[Offset: 0xc, Size: 0x8]
	IntPoint Image1Size;//[Offset: 0x14, Size: 0x8]
	IntPoint Image2Pos;//[Offset: 0x1c, Size: 0x8]
	IntPoint Image2Size;//[Offset: 0x24, Size: 0x8]
	Texture2D* Image1;//[Offset: 0x2c, Size: 0x4]
	Texture2D* Image2;//[Offset: 0x30, Size: 0x4]
	Vector2D Center;//[Offset: 0x34, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x3c, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x44, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x4c, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x54, Size: 0x8]
	Key MainInputKey;//[Offset: 0x5c, Size: 0x10]
	Key AltInputKey;//[Offset: 0x6c, Size: 0x10]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 0xc]
	NetDriver* Driver;//[Offset: 0x3c, Size: 0x4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 0x4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 0x4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 0xc]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 0xc]
	Actor* ViewTarget;//[Offset: 0x60, Size: 0x4]
	Actor* OwningActor;//[Offset: 0x64, Size: 0x4]
	bool bObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int MaxPacket;//[Offset: 0x6c, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xf8, Size: 0x18]
	double LastReceiveTime;//[Offset: 0x160, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x12dc, Size: 0xc]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1728, Size: 0x4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 0xc]
	FString ReplicationDriverClassName;//[Offset: 0x2c, Size: 0xc]
	int MaxDownloadSize;//[Offset: 0x38, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x40, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x44, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x48, Size: 0x4]
	int MaxClientRate;//[Offset: 0x4c, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x50, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x54, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x58, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x5c, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x60, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x64, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x68, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x70, Size: 0x4]
	NetConnection*[] ClientConnections;//[Offset: 0x74, Size: 0xc]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0xc8, Size: 0x4]
	World* World;//[Offset: 0xe8, Size: 0x4]
	Package* WorldPackage;//[Offset: 0xec, Size: 0x4]
	class Object* NetConnectionClass;//[Offset: 0x100, Size: 0x4]
	class Object* ReplicationDriverClass;//[Offset: 0x104, Size: 0x4]
	FName NetDriverName;//[Offset: 0x110, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x138, Size: 0xc]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x144, Size: 0x3c]
	FilteredActorSetting[] FilteredActorSettings;//[Offset: 0x180, Size: 0xc]
	FilteredActorSetting[] FilteredActorSettingsRuntime;//[Offset: 0x18c, Size: 0xc]
	Channel*[] ActorChannelPool;//[Offset: 0x19c, Size: 0xc]
	float Time;//[Offset: 0x1ac, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x5a0, Size: 0x4]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x4]
	int StaticChannelIndex;//[Offset: 0x14, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: FilteredActorSetting
	FName ClassName;//[Offset: 0x0, Size: 0x8]
	class Object* FilteredClass;//[Offset: 0x8, Size: 0x4]
	FName BudgetType;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x1c, Size: 0x4]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int Size;//[Offset: 0x24, Size: 0x4]
	int TileSize;//[Offset: 0x28, Size: 0x4]
	int TileBorderSize;//[Offset: 0x2c, Size: 0x4]
	int RemoveLowMips;//[Offset: 0x30, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 0x4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x1d0, Size: 0xc]
	class GameSession* GameSessionClass;//[Offset: 0x1dc, Size: 0x4]
	class GameStateBase* GameStateClass;//[Offset: 0x1e0, Size: 0x4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x1e4, Size: 0x4]
	class PlayerState* PlayerStateClass;//[Offset: 0x1e8, Size: 0x4]
	class HUD* HUDClass;//[Offset: 0x1ec, Size: 0x4]
	class Pawn* DefaultPawnClass;//[Offset: 0x1f0, Size: 0x4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x1f4, Size: 0x4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x1f8, Size: 0x4]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x1fc, Size: 0x4]
	GameSession* GameSession;//[Offset: 0x200, Size: 0x4]
	GameStateBase* GameState;//[Offset: 0x204, Size: 0x4]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x208, Size: 0x4]
	FText DefaultPlayerName;//[Offset: 0x20c, Size: 0xc]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1]
	void StartPlay();// 0x1565a60
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x46a54cc
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x46a5370
	bool ShouldReset(Actor* ActorToReset);// 0x46a5c98
	void ReturnToMainMenuHost();// 0x46a5c7c
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x46a55a0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x46a56fc
	void RestartPlayer(Controller* NewPlayer);// 0x46a57c0
	void ResetLevel();// 0x258857c
	bool PlayerCanRestart(PlayerController* Player);// 0x2658440
	bool MustSpectate(PlayerController* NewPlayerController);// 0x2688d5c
	void K2_PostLogin(PlayerController* NewPlayer);// 0x2ce6f18
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x2ce6f18
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x2ce6f18
	void K2_OnLogout(Controller* ExitingController);// 0x2ce6f18
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x2ce6f18
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x46a5840
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x46a52a8
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x25540b8
	bool HasMatchStarted();// 0x46a5d20
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0xf42a8c
	int GetNumSpectators();// 0x2767144
	int GetNumPlayers();// 0x4684960
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x46a5d50
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x46a591c
	Actor* ChoosePlayerStart(Controller* Player);// 0x46a5a00
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x46a5a88
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x46a5bb0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x1d0, Size: 0x4]
	int MaxPlayers;//[Offset: 0x1d4, Size: 0x4]
	int MaxPartySize;//[Offset: 0x1d8, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x1dc, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 0x1]
	FName SessionName;//[Offset: 0x1e0, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x1d0, Size: 0x4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1d4, Size: 0x4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x1d8, Size: 0x4]
	PlayerState*[] PlayerArray;//[Offset: 0x1dc, Size: 0xc]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x1ec, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x1f0, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x1f4, Size: 0x4]
	void OnRep_SpectatorClass();// 0x15687c0
	void OnRep_ReplicatedWorldTimeSeconds();// 0xf4af64
	void OnRep_ReplicatedHasBegunPlay();// 0x46b47b0
	void OnRep_GameModeClass();// 0x244d62c
	bool HasMatchStarted();// 0x135c9e0
	bool HasBegunPlay();// 0x2556338
	float GetServerWorldTimeSeconds();// 0x255622c
	float GetPlayerStartTime(Controller* Controller);// 0x46b4854
	float GetPlayerRespawnDelay(Controller* Controller);// 0x46b47cc

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	uint32 Channels;//[Offset: 0x1d4, Size: 0x4]
	uint32 InRate;//[Offset: 0x1d8, Size: 0x4]
	uint32 OutRate;//[Offset: 0x1dc, Size: 0x4]
	uint32 OutSaturation;//[Offset: 0x1e0, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x1e4, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x1e8, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x1ec, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x1f0, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x1f4, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x1f8, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x1fc, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x200, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x204, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x208, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x20c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x210, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x214, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x218, Size: 0x4]
	uint32 InPackets;//[Offset: 0x21c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x220, Size: 0x4]
	uint32 InBunches;//[Offset: 0x224, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x228, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x22c, Size: 0x4]
	uint32 InLoss;//[Offset: 0x230, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x234, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x238, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x23c, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x240, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x244, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x248, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x24c, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x250, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x254, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x258, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x25c, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x260, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x264, Size: 0x4]
	uint32 NumActors;//[Offset: 0x268, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x26c, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x270, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x274, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x278, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x27c, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x280, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x284, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x288, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x28c, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x290, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x1d0, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x1d4, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x1d8, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x1dc, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x1e0, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x1e4, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x1e8, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x1ec, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x1f0, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f4, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x1f8, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x1fc, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x200, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x204, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x208, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x20c, Size: 0x4]
	float MoveRepSize;//[Offset: 0x210, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x214, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x218, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x21c, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x220, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x224, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x228, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x22c, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x230, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x234, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x238, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x23c, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x240, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x244, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x248, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x250, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x254, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x258, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x260, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x264, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x268, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x26c, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1ec, Size: 0x4]
	Actor* ChildActor;//[Offset: 0x1f0, Size: 0x4]
	Actor* ChildActorTemplate;//[Offset: 0x1f4, Size: 0x4]
	void SetChildActorClass(class Actor InClass);// 0x46812e0

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 0xc]
	FName AttachSocket;//[Offset: 0x28, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x1d0, Size: 0x4]
	FName MatineeControllerName;//[Offset: 0x1d4, Size: 0x8]
	float PlayRate;//[Offset: 0x1dc, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e0, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e0, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x1e4, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e8, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e8, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e8, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e8, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e8, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e8, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e8, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1e8, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x1ec, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x1f4, Size: 0xc]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x204, Size: 0xc]
	CameraCutInfo[] CameraCuts;//[Offset: 0x210, Size: 0xc]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21c, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21c, Size: 0x1]
	float InterpPosition;//[Offset: 0x220, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x228, Size: 0x1]
	delegate OnPlay;//[Offset: 0x22c, Size: 0xc]
	delegate OnStop;//[Offset: 0x238, Size: 0xc]
	delegate OnPause;//[Offset: 0x244, Size: 0xc]
	void Stop();// 0x24a0b3c
	void SetPosition(float NewPosition, bool bJump);// 0x4749864
	void SetLoopingState(bool bNewLooping);// 0x47497dc
	void Reverse();// 0x24a0b20
	void Play();// 0x24b8cd4
	void Pause();// 0x24364ac
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x47496a8
	void ChangePlaybackDirection();// 0x24a0adc

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 0x4]
	float PathBuildTime;//[Offset: 0x20, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 0xc]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 0x4]
	float EdSectionStart;//[Offset: 0x34, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x38, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 0x4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 0x4]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x8, Size: 0x4]
	float Volume;//[Offset: 0xc, Size: 0x4]
	float FadeTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 0x4]
	float Diffusion;//[Offset: 0x20, Size: 0x4]
	float Gain;//[Offset: 0x24, Size: 0x4]
	float GainHF;//[Offset: 0x28, Size: 0x4]
	float DecayTime;//[Offset: 0x2c, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x30, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 0x4]
	float LateGain;//[Offset: 0x3c, Size: 0x4]
	float LateDelay;//[Offset: 0x40, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x4]
	Actor* InViewer;//[Offset: 0x4, Size: 0x4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 0x4]
	Vector ViewLocation;//[Offset: 0xc, Size: 0xc]
	Vector ViewDir;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 0x4]
	Model* Model;//[Offset: 0x8c, Size: 0x4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 0xc]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 0x4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 0x4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 0x4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 0x4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 0xc]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 0xc]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 0xc]
	Guid LevelBuildDataId;//[Offset: 0x154, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x164, Size: 0x4]
	IntVector LightBuildLevelOffset;//[Offset: 0x168, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x174, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x174, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x174, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x1c0, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1c8, Size: 0xc]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x1e0, Size: 0xc]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x468, Size: 0x4]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x2ce6f18
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x472cbc4
	bool RemoteEvent(FName EventName);// 0x472cd90
	void LevelReset();// 0x2ce6f18

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x1d4, Size: 0x4]
	BillboardComponent* GoodSprite;//[Offset: 0x1d8, Size: 0x4]
	BillboardComponent* BadSprite;//[Offset: 0x1dc, Size: 0x4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e0, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x45c, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	float ScreenSize;//[Offset: 0x464, Size: 0x4]
	float MaxScreenScaling;//[Offset: 0x468, Size: 0x4]
	float U;//[Offset: 0x46c, Size: 0x4]
	float UL;//[Offset: 0x470, Size: 0x4]
	float V;//[Offset: 0x474, Size: 0x4]
	float VL;//[Offset: 0x478, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x465e628
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x465e490
	void SetSprite(Texture2D* NewSprite);// 0x465e778

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x1c, Size: 0x20]
	FName PackageNameToLoad;//[Offset: 0x3c, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x44, Size: 0xc]
	Transform LevelTransform;//[Offset: 0x60, Size: 0x30]
	int LevelLODIndex;//[Offset: 0x98, Size: 0x4]
	int StreamingPriority;//[Offset: 0x9c, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa2, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa2, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa2, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa2, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa2, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa3, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa3, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xa4, Size: 0x10]
	int DeviceGradeLevel;//[Offset: 0xb4, Size: 0x4]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xb8, Size: 0xc]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xc4, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xcc, Size: 0xc]
	delegate OnLevelUnloaded;//[Offset: 0xd8, Size: 0xc]
	delegate OnLevelUnloadedWithParams;//[Offset: 0xe4, Size: 0xc]
	delegate OnLevelShown;//[Offset: 0xf0, Size: 0xc]
	delegate OnLevelHidden;//[Offset: 0xfc, Size: 0xc]
	Level* LoadedLevel;//[Offset: 0x108, Size: 0x4]
	Level* PendingUnloadLevel;//[Offset: 0x10c, Size: 0x4]
	bool ShouldBeLoaded();// 0xfbbe9c
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x472d808
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x24d8e20
	void SetPriority(int NewPriority);// 0x472d718
	void SetLevelLODIndex(int LODIndex);// 0x472d790
	void LevelStreamingUnLoaded__DelegateSignature(LevelStreaming* LevelStreaming);// 0x2ce6f18
	bool IsStreamingStatePending();// 0x472d648
	bool IsLevelVisible();// 0x472d694
	bool IsLevelLoaded();// 0x472d670
	FName GetWorldAssetPackageFName();// 0x472d6d8
	Level* GetLoadedLevel();// 0x472d6bc
	LevelScriptActor* GetLevelScriptActor();// 0x472d588
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x472d5b0

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x1f8, Size: 0xc]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x205, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x6a4, Size: 0x3c]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9b0, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0x9d8, Size: 0xc]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0x9e8, Size: 0xc]
	GameInstance* CacheGameInstance;//[Offset: 0xcf0, Size: 0x4]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x4]
	Level* Level;//[Offset: 0x24, Size: 0x4]
	Object*[] ObjReferences;//[Offset: 0x6c, Size: 0xc]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0xc]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: WorldRegionManager
	World* World;//[Offset: 0x7c, Size: 0x4]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_Static;//[Offset: 0x80, Size: 0x3c]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_NonStatic;//[Offset: 0xbc, Size: 0x3c]
	<Object*,RegionID> ObjectToRegionID_NonStatic;//[Offset: 0xf8, Size: 0x3c]

--------------------------------
Class: RegionObjectItemList
	RegionObjectItem[] List;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: RegionObjectItem
	Object* Target;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: RegionID

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x1c, Size: 0x14]
	FName AISystemModuleName;//[Offset: 0x30, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x34, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x465deb8
	int GetObjectCount();// 0x465dfa4
	int GetNewAvoidanceUID();// 0x465df7c
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x465de28

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 0x4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 0x4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 0x4]
	<Level*> Levels;//[Offset: 0x14, Size: 0x3c]

--------------------------------
Class: MaterialLodManager.Object
	SoftClassPath MaterialLodManagerClassName;//[Offset: 0x1c, Size: 0x14]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x40, Size: 0xc]
	double TilesStreamingTimeThreshold;//[Offset: 0x50, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x5c, Size: 0x4]
	bool bStreamingLevelsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0xc]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0xc, Size: 0xc]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ApexWorldSettings.WorldSettings.Info.Actor.Object
	ReplicationGraphSettings ReplicationGraphSettings;//[Offset: 0x300, Size: 0x2c]

--------------------------------
Class: ReplicationGraphSettings
	bool bEnableReplicationGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float DefaultGridCellSize;//[Offset: 0x4, Size: 0x4]
	Box DefaultGridBounds;//[Offset: 0x8, Size: 0x1c]
	float PickUpActorGridCellSizeOverride;//[Offset: 0x24, Size: 0x4]
	float CharacterGridCellSizeOverride;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 0x600]
	float Priority;//[Offset: 0x800, Size: 0x4]
	float BlendRadius;//[Offset: 0x804, Size: 0x4]
	float BlendWeight;//[Offset: 0x808, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80c, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4782a18

--------------------------------
Class: FireRangeZone_Multi_Main_C.LevelScriptActor.Actor.Object

--------------------------------
Class: CustomCollisionChecker.Actor.Object
	CustomCollisionSubSystem* CollisionSubSystem;//[Offset: 0x1d0, Size: 0x4]

--------------------------------
Class: CustomCollisionSubSystem.ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	CustomCollisionChecker* CollisionChecker;//[Offset: 0x64, Size: 0x4]
	<PrimitiveComponent*,CheckTimer> CollisionList;//[Offset: 0x68, Size: 0x3c]

--------------------------------
Class: ApexWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool bCreateInDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bCreateInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	<FName> CreateFrontendStates;//[Offset: 0x24, Size: 0x3c]

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: CheckTimer

--------------------------------
Class: MainTownPlayerController_BP_C.MainTownPlayerController.PlayerController_TeamMultiLevel.ApexPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc68, Size: 0x4]
	static void ReceiveBeginPlay();// 0x2ce6f18
	void ExecuteUbergraph_MainTownPlayerController_BP(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue);// 0x2ce6f18

--------------------------------
Class: MainTownPlayerController.PlayerController_TeamMultiLevel.ApexPlayerController.PlayerController.Controller.Actor.Object
	FireRangeShootGameComponent* FireRangeShootGame;//[Offset: 0xbc0, Size: 0x4]
	MainTownFreeBattleComponent* FreeBattleComponent;//[Offset: 0xbc4, Size: 0x4]
	enum MainTownGameType;//[Offset: 0xbc8, Size: 0x1]
	ApexPlayerState*[] OutlineOverridePlayers;//[Offset: 0xbcc, Size: 0xc]
	int OutlineOverrideId;//[Offset: 0xbd8, Size: 0x4]
	bool bReloadNotReduceAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbdc, Size: 0x1]
	void WhenBulletHit(Controller* Shooter, out const BulletHitInfoUploadData BulletHitInfoUploadData, int BulletType);// 0x2696e4c
	void SetReloadNotReduceAmmo(bool NewValue);// 0x26975a8
	void SetGameRemainTime(float Time);// 0x12b5f38
	void RPCOverrideWeaponAttachment(ItemDefineID WeaponDefineID, int AttachmentID);// 0x2696f98
	void RPC_ServerRemoveItemToServerWithState(const ItemDefineID DefineID, int count);// 0x269706c
	void RPC_ServerAddItemToServerWithState(int ItemID, int count);// 0x2697204
	void RemoveItemToServer(const ItemDefineID DefineID, int count);// 0x2697384
	void PlayerOperatorToServer(enum OperatorType);// 0x2697528
	void OnRep_ReloadNotReduceAmmo();// 0x2697630
	void OnRep_OutlineOverrideId(int PreOutlineOverrideId);// 0x2697644
	void ClientUseSwitchWeaponToServer();// 0x269750c
	void ClientRemoveItemToServer(out const ItemDefineID DefineID, int count);// 0x2697130
	void ClientAddItemToServer(int ItemID, int count);// 0x26972c8
	void AddItemToServer(int ItemID, int count);// 0x2697448

--------------------------------
Class: PlayerController_TeamMultiLevel.ApexPlayerController.PlayerController.Controller.Actor.Object
	bool bMultiLevelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb6c, Size: 0x1]
	IntVector WorldOriginShift;//[Offset: 0xb70, Size: 0xc]
	ReplicatedLevelInstanceActor* LevelInstance;//[Offset: 0xb7c, Size: 0x4]
	class UserWidget* DsInfoWidget;//[Offset: 0xb90, Size: 0x4]
	void WhenNotStaticSublevelUnloaded(LevelStreaming* LevelStreaming);// 0x2718a30
	void ShowDsInfoWidget();// 0x2718abc
	void ReloadNotStaticSublevelComplete__DelegateSignature();// 0x2ce6f18
	void ReloadNotStaticSublevel();// 0x2718aa8
	void ReceiveWhenGameReady();// 0x2ce6f18
	void OnRep_WorldOriginShift();// 0x2718ad0
	void ClientSetStartLocation(const Vector NewLocation, const Rotator NewRotation);// 0x271897c

--------------------------------
Class: ApexPlayerController.PlayerController.Controller.Actor.Object
	MPBattleResult MPResult;//[Offset: 0x518, Size: 0x2c]
	MsgAssistantCompoent* MsgAssitantComp;//[Offset: 0x544, Size: 0x4]
	bool isGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	bool isGameOverSend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1]
	FName PlayerType;//[Offset: 0x55c, Size: 0x8]
	FString PlayerName;//[Offset: 0x564, Size: 0xc]
	int PlayerKey;//[Offset: 0x570, Size: 0x4]
	int TeamID;//[Offset: 0x574, Size: 0x4]
	uint64 UID;//[Offset: 0x578, Size: 0x8]
	int CampID;//[Offset: 0x580, Size: 0x4]
	bool bIsPureSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]
	enum GameViewType;//[Offset: 0x585, Size: 0x1]
	enum ServerPCStateType;//[Offset: 0x586, Size: 0x1]
	int64 BanOBEndTime;//[Offset: 0x588, Size: 0x8]
	FString BanOBReasonText;//[Offset: 0x590, Size: 0xc]
	int64 BanChatEndTime;//[Offset: 0x5a0, Size: 0x8]
	int64 BanChatNoPerceptionEndTime;//[Offset: 0x5a8, Size: 0x8]
	bool bAllAutoActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool bIsMainController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	enum CurPCStateType;//[Offset: 0x5b2, Size: 0x1]
	enum TargetPCStateType;//[Offset: 0x5b3, Size: 0x1]
	StateMachineComponent* StateMachineComp;//[Offset: 0x5b4, Size: 0x4]
	ControllerMagmaComponent* ControllerMagmaComp;//[Offset: 0x5bc, Size: 0x4]
	ApexPostProcessComponent* ApexPostProcessComponent;//[Offset: 0x5c0, Size: 0x4]
	DrugRecommendComponent* DrugRecommendComponent;//[Offset: 0x5c4, Size: 0x4]
	QuickItemComponent* QuickItemComponent;//[Offset: 0x5c8, Size: 0x4]
	HUDManagerComponent* HUDManagerComponent;//[Offset: 0x5cc, Size: 0x4]
	DataReportComponent* DataReportComponent;//[Offset: 0x5d0, Size: 0x4]
	UIStateMgr* UIStateMgr;//[Offset: 0x5d4, Size: 0x4]
	ApLUTComponent* LUTComponent;//[Offset: 0x5d8, Size: 0x4]
	DirectionalLightComponent* DirectionalLightComponent;//[Offset: 0x5dc, Size: 0x4]
	ViewAssistComponent* ViewAssistComponent;//[Offset: 0x5e0, Size: 0x4]
	FiniteBattleBehStateMachine* FiniteBattleBehStateMachine;//[Offset: 0x5e4, Size: 0x4]
	PlayerNetStaticComponent* NetStaticComponent;//[Offset: 0x5e8, Size: 0x4]
	CharacterTeamItemUseTipComponent* CharacterTeamItemUseTipComponent;//[Offset: 0x5ec, Size: 0x4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x5f0, Size: 0x4]
	InGameRecoverItemGuidInfo[] InGameRecoverItemGuidInfoList;//[Offset: 0x5f4, Size: 0xc]
	InGameRecoverPropGuid* InGameRecoverPropGuid;//[Offset: 0x600, Size: 0x4]
	CrossHairDampingComponent* CrossHairDampingComponent;//[Offset: 0x604, Size: 0x4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x608, Size: 0x4]
	float UpdateInputTimeInterval;//[Offset: 0x60c, Size: 0x4]
	float InputDeActiveThreshold;//[Offset: 0x610, Size: 0x4]
	SimpleBattleResultData BattleResultData;//[Offset: 0x620, Size: 0x5c]
	Actor*[] DeathBoxArray;//[Offset: 0x67c, Size: 0xc]
	float DeathBoxFovCheckRate;//[Offset: 0x688, Size: 0x4]
	float DeathBoxFovCheckTime;//[Offset: 0x68c, Size: 0x4]
	int MaxRotationDataCacheNumber;//[Offset: 0x6b0, Size: 0x4]
	DamageTipComponent* WarningIndicatorComponent;//[Offset: 0x6c0, Size: 0x4]
	CharacterAvatar_WearInfo PlayerWearInfo;//[Offset: 0x6c4, Size: 0x18]
	bool bIsPCHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 0x1]
	float JoystickSprintDis;//[Offset: 0x6ec, Size: 0x4]
	float JoystickSprintAngle;//[Offset: 0x6f0, Size: 0x4]
	float JoystickSprintDisAuto;//[Offset: 0x6f4, Size: 0x4]
	float JoystickSprintAngleAuto;//[Offset: 0x6f8, Size: 0x4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 0x1]
	byte LeftOperateMode;//[Offset: 0x6fe, Size: 0x1]
	byte RightOperateMode;//[Offset: 0x6ff, Size: 0x1]
	float DoubleClickInterval;//[Offset: 0x700, Size: 0x4]
	float DoubleClickGeometryDist;//[Offset: 0x704, Size: 0x4]
	float DoubleClickScreenDist;//[Offset: 0x708, Size: 0x4]
	CurveFloat* DistCurve;//[Offset: 0x70c, Size: 0x4]
	delegate OnScreenTouchBegin;//[Offset: 0x724, Size: 0xc]
	delegate OnScreenTouchEnd;//[Offset: 0x730, Size: 0xc]
	HitEffectComponent* HitEffectComponent;//[Offset: 0x7e4, Size: 0x4]
	AkSoundBankMgr* SoundBankMgr;//[Offset: 0x7e8, Size: 0x4]
	<byte,class CameraShake> FPPDamageCameraShakeMap;//[Offset: 0x808, Size: 0x3c]
	<byte,class CameraShake> TPPDamageCameraShakeMap;//[Offset: 0x844, Size: 0x3c]
	float RescuingDistanceMeter;//[Offset: 0x880, Size: 0x4]
	uint32 CurRecoverBannerPlayerKey;//[Offset: 0x884, Size: 0x4]
	float PickBannerHorizonMeter;//[Offset: 0x888, Size: 0x4]
	float PickBannerVerticalMeter;//[Offset: 0x88c, Size: 0x4]
	bool PickBannerInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 0x1]
	bool CapturedRespawnDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 0x1]
	RespawnOperateComponent* RespawnOperateComponent;//[Offset: 0x894, Size: 0x4]
	bool DebugSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 0x1]
	int DebugSpectatorIndex;//[Offset: 0x89c, Size: 0x4]
	BackpackComponent* BackpackComponent;//[Offset: 0x8a0, Size: 0x4]
	PingManagerComponent* PingManagerComponent;//[Offset: 0x8a4, Size: 0x4]
	EmojiGiveALikeMgr* EmojiGiveALikeMgr;//[Offset: 0x8a8, Size: 0x4]
	PlayerEventFlowManager* PlayerEventFlowManager;//[Offset: 0x8ac, Size: 0x4]
	bool EnableLifeLineRobotRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]
	ControllerCheatHelper* ControllerCheatHelper;//[Offset: 0x8c8, Size: 0x4]
	bool bIsDSEnableGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 0x1]
	OBManagerNoReplay* OBNoReplayComponent;//[Offset: 0x8d0, Size: 0x4]
	delegate PlayerControllerLostDelegate;//[Offset: 0x8d4, Size: 0xc]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0x8e0, Size: 0xc]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0x8ec, Size: 0xc]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0x8f8, Size: 0xc]
	delegate PlayerControllerPostReconnectedDelegate;//[Offset: 0x904, Size: 0xc]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0x910, Size: 0xc]
	delegate PlayerControllerPreGameEndDelegate;//[Offset: 0x91c, Size: 0xc]
	delegate PlayerControllerGameEndDelegate;//[Offset: 0x928, Size: 0xc]
	delegate PlayerControllerPawnChangedDelegate;//[Offset: 0x950, Size: 0xc]
	bool bDoNotDestroyOnNetCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	int PlayerReconnectedCount;//[Offset: 0x964, Size: 0x4]
	float DefaultConnectionlessTimeout;//[Offset: 0x970, Size: 0x4]
	LineTrace* LineTrace;//[Offset: 0x980, Size: 0x4]
	ProxySyncComponent* ProxySyncComponent;//[Offset: 0x984, Size: 0x4]
	FString TeamMateDownAudio;//[Offset: 0x9c8, Size: 0xc]
	FString TeamMateDeathAudio;//[Offset: 0x9d4, Size: 0xc]
	InGameChatContainer* ChatContainer;//[Offset: 0x9e0, Size: 0x4]
	DSPingComponent* PingComponent;//[Offset: 0x9e4, Size: 0x4]
	PlayerStatisticsManager* PlayerStatisticsManager;//[Offset: 0x9f0, Size: 0x4]
	TrackerManager* TrackerManager;//[Offset: 0x9f4, Size: 0x4]
	ApexTreasureDoor* TreasureDoor;//[Offset: 0x9f8, Size: 0x4]
	InputComponent* AIDebugInputComponent;//[Offset: 0xa00, Size: 0x4]
	ApexDebugAIComponent* ApexDebugAIComponent;//[Offset: 0xa08, Size: 0x4]
	InGameGuideComponent* InGameGuideComp;//[Offset: 0xa14, Size: 0x4]
	float FinisherHorizontalAngle;//[Offset: 0xa18, Size: 0x4]
	float FinisherVerticalAngle;//[Offset: 0xa1c, Size: 0x4]
	float FinisherValidZ;//[Offset: 0xa20, Size: 0x4]
	float ValidFinisherRange;//[Offset: 0xa24, Size: 0x4]
	float FinisherValidSpaceCheckDistance;//[Offset: 0xa28, Size: 0x4]
	AIHostComponent* AIHostComponent;//[Offset: 0xa2c, Size: 0x4]
	ApgamePlayerStateRollbackComponent* RollbackComponent;//[Offset: 0xa30, Size: 0x4]
	ApgameDeathRecallComponent* DeathRecallComponent;//[Offset: 0xa34, Size: 0x4]
	float ReportIntervalOfViewingDeadRecord;//[Offset: 0xa38, Size: 0x4]
	SplineComponent* GuideSpineComp;//[Offset: 0xa48, Size: 0x4]
	<ApexCharacterBase*> SubCharacters;//[Offset: 0xa4c, Size: 0x3c]
	float StartRespawnTimeSecond;//[Offset: 0xa88, Size: 0x4]
	float EndRespawnTimeSecond;//[Offset: 0xa8c, Size: 0x4]
	byte StopForbiddenZoneTipSign;//[Offset: 0xa90, Size: 0x1]
	<enum,byte> Type2Priorities;//[Offset: 0xaa0, Size: 0x3c]
	uint32 ViewTargetMask;//[Offset: 0xadc, Size: 0x4]
	Actor* GamePlayViewTarget;//[Offset: 0xae0, Size: 0x4]
	Actor* ClientViewTarget;//[Offset: 0xae4, Size: 0x4]
	Actor* GMViewTarget;//[Offset: 0xae8, Size: 0x20]
	<byte,enum> Priority2Types;//[Offset: 0xb08, Size: 0x3c]
	ApgameBattleUIUpdater* BattleUIUpdater;//[Offset: 0xb44, Size: 0x4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 0x1]
	ApgamePickupFloatingManager* PickupFloatingMgr;//[Offset: 0xb58, Size: 0x4]
	ApexSentence* VoiceoverSentence;//[Offset: 0xb5c, Size: 0x4]
	MirageTutorialComponent* TutorialComponent;//[Offset: 0xb68, Size: 0x4]
	void UseViewTargetByTypeAtServer(enum InType, bool NewUse);// 0x247c920
	void UploadDebugMsg(enum MsgType, FString Msg);// 0x247ec64
	void UpdateMicroStatus(bool IsOpen);// 0x2484608
	void UnPossessSubCharacter(ApexCharacterBase* InPawn);// 0x247d23c
	void TouchPing(Vector Location);// 0x2482b48
	void SwitchDebugAI();// 0x247def8
	void StopVoiceoverDispatchableSentence_NetMulticast();// 0x247c388
	void StopVoiceoverDispatchableSentence();// 0x247c468
	void ShutdownServer(FString AreYouSure);// 0x248012c
	void ShowReviveSelfOperation(bool bShow);// 0x2481484
	void ShowReviveOperation(bool bShow, uint32 InPlayerKey);// 0x2481594
	void ShowPointsInternal(const Vector[] Points, const Color Color, bool bPersistentLines, float LifeTime);// 0x247ffa4
	void ShowPickRecoverBanner(bool bShow, uint32 InPlayerKey);// 0x24813b4
	void ShowOperateRecoverBanner(bool bShow);// 0x2481290
	void ShowMovePath(const Vector[] Path, const Color Color, bool bPersistentLines, float LifeTime);// 0x247fe38
	void ShowFinisherCancelOperation(bool bShow);// 0x247dcc8
	void ShowDamageValueToClient(Actor* HitTarget, float DamageAmount, const Vector HitImpact, bool bHeadShot);// 0x24805a0
	void ShowArrow(const Vector LineStart, const Vector LineEnd, float ArrowSize, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x247fbd8
	void SetStopForbiddenZoneTipSign();// 0x247cf5c
	void SetSkillProfilerStatue(bool Enable, bool CastUltimate);// 0x247dd48
	void SetServerPCStateType(enum NewServerPCStateType);// 0x2484ba0
	void SetScreenRightOperateMode(byte mode);// 0x2482bb8
	void SetScreenPosition(enum TaskOverType, const Vector2D ScreenPosition, const Vector2D Size);// 0x247dbb0
	void SetScreenLeftOperateMode(byte mode);// 0x2482c30
	void SetPrintContructStackTraceOpen();// 0x2482a9c
	void SetPlayerReconnectedCount(int NewPlayerReconnectedCount);// 0x247ed54
	void SetPlayerNameVisible(int InPlayerKey, bool Visble);// 0x2480254
	void SetPlayerName(FString NewName);// 0x24850d8
	void SetPlayerKey(int NewPlayerKey);// 0x2485064
	void SetPlayerExitMidJoinState();// 0x247ede4
	void SetOpenningTreasureDoor(ApexTreasureDoor* Door);// 0x247dfe8
	void SetNeedUploadRotation(bool NewEnable);// 0x24849b0
	void SetMPResult(MPBattleResult theMPResult);// 0x2485464
	void SetJoystickThumbVisible(bool Visible);// 0x2482e40
	void SetJoystickSprintDisAuto(float Dis);// 0x2482d20
	void SetJoystickSprintDis(float Dis);// 0x2482ca8
	void SetJoyStickScale(float JSScale);// 0x2482f00
	void SetJoyStickOpacity(float JSOpacity);// 0x2482f78
	void SetJoystickCenterVisible(bool Visible);// 0x2482dc0
	void SetJoyStickCenter(Vector2D Center);// 0x24830f0
	void SetIsPureSpectator(bool NewIsPureSpectator);// 0x2484fb8
	void SetHiddenJoyStickBySource(const Object* WorldContext, enum HiddenSource, bool NewHidden);// 0x248299c
	void SetGameViewType(enum NewGameViewType);// 0x2484c30
	void SetGameplayViewTarget(Actor* NewGameplayViewTarget);// 0x247cda8
	void SetClientAIHostSetting(byte bEnableAIHost);// 0x247d700
	void SetBanOB(int64 EndUTCTime, FString BanReasonText);// 0x2484db8
	void SetBanNoPerceptionChat(int64 EndUTCTime);// 0x2484cc0
	void SetBanChat(int64 EndUTCTime);// 0x2484d3c
	void ServerUseViewTargetByType(enum InType, bool NewUse);// 0x247cc98
	void ServerUploadControlRotationPitchYaw(uint32 Timestamp, uint32 NewView);// 0x24847e4
	void ServerUploadControlRotation(uint32 Timestamp, uint32 NewView, byte NewRoll);// 0x24848a8
	void ServerUploadControlRoll(uint32 Timestamp, byte NewRoll);// 0x2484720
	void ServerUpdateRespawnTimer(float RespawnTime);// 0x24844f4
	void ServerSwitchTrainState();// 0x2484378
	void ServerStopHttpRecordingReplay();// 0x247c538
	void ServerStopCompleteRecordingReplay();// 0x247c5f0
	void ServerStartHttpRecordingReplay();// 0x247c594
	void ServerStartCompleteRecordingReplay();// 0x247c64c
	void ServerSpawnPawn(Transform T);// 0x247f700
	void ServerSetMonitorState(MonitorActor* Monitor, bool bControl);// 0x2484268
	void ServerSetControlRotation(const Rotator NewRotation);// 0x247d010
	void ServerRespawnSelfPlayer();// 0x2484574
	void ServerReportTimesOfViewingDeadRecord(byte InDeltaTimes);// 0x247d354
	void ServerQuickChat();// 0x247f290
	void ServerPickRecoverBanner(uint32 InPlayerKey);// 0x2481318
	void ServerOperateRecoverBanner(enum OperateCode, ApexRespawnBeacon* CapturedBeacon);// 0x248114c
	void ServerOperateKnockdownShield(enum OperateCode);// 0x24817a8
	void ServerOperateKnockdownRevive(enum OperateCode, uint32 InPlayerKey);// 0x2481664
	void ServerMirageCall(MiragePhoneActor* thePhone);// 0x2483d04
	void ServerHandleMsg(enum Msg, enum StateSource);// 0x2483e7c
	void ServerEnableReplayReplicationGraph(bool bIsEnable);// 0x247c6a8
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x2482420
	void ServerDeactiveAllTrainingField();// 0x247c36c
	void ServerCMD_RPC(FString Cmd);// 0x247f5a4
	void ServerCMD(FString Cmd);// 0x247f66c
	void ServerCloseFlagDynamicOutLine(int InPlayerKey);// 0x247d888
	void ServerCancelOpenTreasureDoor();// 0x247dfb0
	void ServerActiveAllTrainingField();// 0x241b530
	void SelectLegendStageEnd();// 0x247f380
	void SaveEquipData(out const ItemDefineID WeaponID, out const ItemDefineID AttachID, int WeaponIndex);// 0x2481f2c
	void RPCServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x248253c
	void RPCServerSwapAttachmentByTwoAttach(ItemDefineID AttachDefineIDA, ItemDefineID AttachDefineIDB);// 0x24820d4
	void RPCServerSwapAttachment(ItemDefineID WeaponDataDefineID, ItemDefineID AttachmentDataDefineID);// 0x2482210
	void RPCServerStopContinuousUseRecoverItem();// 0x24826f8
	void RPCServerOpenHandleActionActor(InGameHandleActionActor* ActionActor);// 0x2481db0
	void RPCServerOpenCarePackage(CarePackage* CarePackage, Controller* Controller);// 0x2481e30
	void RPCServerDropItem(ItemDefineID DefineID, int count, enum Reason);// 0x2482728
	void RPCServerDeleteCommonSign(const int Index);// 0x247e3bc
	void RPCServerCreateCommonSign(CommonSignData SignData);// 0x247e564
	void RPCNotifyEnterOBResult(bool CanEnter);// 0x247f0e8
	void RPCClientResetMiniMap();// 0x247dcac
	void RPCClientDeleteCommonSign(const int Index);// 0x247e33c
	void RPCClientCreateCommonSign(CommonSignData SignData);// 0x247e43c
	void RPC_TestSendBattleResult(FString EndReason, int GameModeType);// 0x2483174
	void RPC_PossessPawn(Pawn* PosPawn);// 0x24832e0
	void RPC_OpenResultWindow(FString EndReason, int GameModeType);// 0x24834ec
	void RPC_NotifyPawnChange();// 0x2483284
	void RPC_NotifyGameStart();// 0x248393c
	void RPC_NotifyGameEnd(FString EndReason, bool bSurvivorsAreAI);// 0x2483818
	void RPC_NotifyBattleResultData(const SimpleBattleResultData SimpleResultData, FString EndReason, bool bSurvivorsAreAI);// 0x2483600
	void RPC_ExitGame(FString EndReason);// 0x2483424
	void RPC_BroadcastDamageToClient(Actor* HitTarget, float DamageAmount, bool bIsHeadShot, bool bIsFatalHealthCost, uint32 ShootID, byte PelletID, float AimPercent, byte AimChargeLevel);// 0x2480320
	void RespawnParachute(Transform SpawnTransform);// 0x247ce30
	void RemoveFromAllAITarget(ApexCharacter* Self);// 0x247f890
	void RefreshItemUsable(ItemDefineID DefineID);// 0x248234c
	void ReChooseLegend(int LegendId);// 0x247f510
	void ReceiveWhenClientGameReady();// 0x2ce6f18
	void ReceiveUnPossessSubCharacter(Pawn* PossessedPawn);// 0x2ce6f18
	void ReceivePossessSubCharacter(Pawn* PossessedPawn);// 0x2ce6f18
	void ProcessGMUIInput(FString Cmd);// 0x24801c4
	void PostPlayerGameEndEvent();// 0x2483160
	void PossessSubCharacter(ApexCharacterBase* InPawn);// 0x247d2b4
	void PlayVoiceoverDispatchableSentence_NetMulticast(int LegendId, ApexSentence* Sentence);// 0x247c3a4
	void PlayVoiceoverDispatchableSentence(int LegendId, ApexSentence* Sentence);// 0x247c47c
	void PlayInstigatorSound(enum PlayerAudioType, int InWeaponSkinID);// 0x2481c1c
	void PlayerDropItem(ItemDefineID DefineID, int count, enum Reason);// 0x248288c
	void PingSomeThingOnServer(enum PingType);// 0x24808e4
	void PingSomeThingOnClient(enum PingType);// 0x2480964
	void PingFromFiger(Vector2D Location);// 0x2482ab0
	void PickRecoverBanner();// 0x2481398
	void OperateRecoverBanner(enum OperateCode);// 0x2481210
	void OperateKnockdownShield(enum OperateCode);// 0x2481828
	void OperateKnockdownRevive(enum OperateCode);// 0x2481728
	void OnUserInputUseReplicator();// 0x2481cf4
	void OnUserInputOutUseReplicator();// 0x2481ce0
	void OnUserInputOpenDoor(bool IsOpen);// 0x2481d30
	void OnUserInputOpenBin();// 0x2481d1c
	void OnUserInputExtract();// 0x2481d08
	void OnUnPossessSubCharacterForClient(ApexCharacterBase* NewPawn);// 0x247d0bc
	void OnTouchStartCallback();// 0x2482b34
	void OnTouchEndCallback();// 0x2482b20
	void OnSwitchCameraSide();// 0x2484474
	void OnStateChanged();// 0x2484af8
	void OnSettingChanged(FString[] PropertyNames);// 0x247d57c
	void OnSelectLegendStageEnd();// 0x2ce6f18
	void OnRep_StopForbiddenZoneTipSign();// 0x247cf70
	void OnRep_ServerStateType();// 0x2480d6c
	void OnRep_RespawnTime();// 0x247cf84
	void OnRep_GamePlayViewTarget(const Actor* LastViewTarget);// 0x247c880
	void OnRep_bIsDSEnableGM();// 0x247f1c4
	void OnPossessSubCharacterForClient(ApexCharacterBase* NewPawn);// 0x247d13c
	void OnPlayerInputStateChange(bool NewIsActive);// 0x2484a30
	void OnOBTargetPlayerViewTargetChange(Controller* TargetController, Actor* LastVT, Actor* NewVT, enum NewVTType);// 0x247ef84
	void OnMeleePressed(int InSkillID);// 0x24843fc
	void OnJumpReleased();// 0x24844b0
	void OnJumpPressed();// 0x24844c4
	void OnItemRemoved(ItemDefineID DefineID);// 0x2480ac4
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int count);// 0x2480b4c
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x2480c5c
	void OnHitKnockdownShield(float DamageAmount, ApexCharacter* AttackCharacter, ApexCharacter* VictimCharacter, int VictimPlayerKey);// 0x24818a8
	void OnCrouchReleased();// 0x2484488
	void OnCrouchPressed();// 0x248449c
	void OnConnectionlessTimeOut();// 0x247ed40
	void OnClientFovUnNormal(float DesireFov, float CurrentFov);// 0x2484ef4
	void OnCameraModePressed();// 0x24843e8
	void OnBoardingVehiclePressed();// 0x24843d4
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0x2480fd8
	void OnAPEvent_AutoUseItem(ItemDefineID ItemID);// 0x2480a3c
	void ObserveBot();// 0x2480110
	void NotifyOBTargetSkillStop(int SkillIndex, enum StopReason);// 0x247e278
	void NotifyOBTargetSkillCoolDownStart(int SkillIndex);// 0x247e1f8
	void NotifyClientPlayerIsValid();// 0x247f2e4
	void NotifyCantDrop();// 0x2482714
	void LuaSwapAttachment(int WeaponIndex);// 0x248205c
	void LogTrainFlash(FString FlashLog);// 0x247e084
	void LogMovementRecord(uint32 InPlayerKey, FString InReason);// 0x247e11c
	void LocalUseViewTargetWithTime(Actor* NewViewTarget, float BlendTime);// 0x247cbdc
	void LocalUseViewTarget(Actor* NewViewTarget, ViewTargetTransitionParams TransitionParams);// 0x247ca7c
	void LocalUnUseViewTargetWithTime(float BlendTime);// 0x247cb64
	void LocalUnUseViewTarget(ViewTargetTransitionParams TransitionParams);// 0x247c9e4
	void LeaveOBNoReplay();// 0x247f0d4
	bool IsSubCharacter(ApexCharacterBase* CheckCharacter);// 0x247d1bc
	bool IsPureSpectator();// 0x2485034
	bool IsPlayerReconnected();// 0x247ee20
	bool IsPlayerMidJoin();// 0x247edf8
	bool IsOffScreen(Actor* InActor, float DetectionDist, float InnerRadius);// 0x2480ed0
	bool IsJoyStickCanAutoSprit();// 0x2482d98
	bool IsInPlane();// 0x2483a7c
	bool IsInInitial();// 0x2483b34
	bool IsInFight();// 0x2483a48
	bool IsDemoRecSpectator();// 0x247c798
	bool IsDemoPlaySpectator();// 0x247c7c0
	bool InPawnState(enum TargetState);// 0x2483aac
	void HandleMsg(enum Msg, enum StateSource);// 0x2483f78
	void GuideTipRespawnBeacon();// 0x247da08
	void GuideRescueTeamMate(Actor* TargetTeamMate);// 0x247da9c
	void GuidePickTeamMateRespawnBanner(Actor* TargetMapFlag);// 0x247da24
	void GuideFindTombBox(Actor* TargetTombBox);// 0x247db14
	void GuideFindRespawnBeacon(Actor* TargetRespawnBeacon);// 0x247d988
	void GMSetViewTarget(Actor* NewViewTarget, bool NewUse);// 0x132e4b8
	UIStateMgr* GetUIStateMgr();// 0x2484b78
	enum GetTargetPCStateType();// 0x24839e8
	enum GetServerPCStateType();// 0x2484c14
	ApgamePlayerStateRollbackComponent* GetRollbackComponent();// 0x247d560
	RespawnOperateComponent* GetRespawnOperateComponent();// 0x248109c
	ApexCharacter* GetReplayViewCharacter();// 0x247c770
	QuickItemComponent* GetQuickItemComponent();// 0x2484b28
	int GetPlayerReconnectedCount();// 0x247edc8
	FString GetPlayerName();// 0x2485200
	PingManagerComponent* GetPingManagerComponent();// 0x24809dc
	ApexCharacter* GetOwnedApexCharacter();// 0x2483998
	MPBattleResult GetMPResult();// 0x2485354
	Vector2D GetJoyStickVisualSize();// 0x2482ec0
	Vector2D GetJoyStickVisualCenter();// 0x2483070
	Vector2D GetJoyStickLocaltion();// 0x2482ff0
	Vector2D GetJoystickCorrectedCenter();// 0x2483030
	Vector2D GetJoyStickCenter();// 0x24830b0
	InGameGuideComponent* GetInGameGuideComp();// 0x247db94
	enum GetGameViewType();// 0x2484ca4
	FiniteBattleBehStateMachine* GetFiniteBattleBehStateMachine();// 0x2484b0c
	EmojiGiveALikeMgr* GetEmojiGiveALikeMgr();// 0x24808b4
	DirectionalLightComponent* GetDirectionalLightComponent();// 0x2484b50
	ApgameDeathRecallComponent* GetDeathRecallComponent();// 0x247d544
	enum GetCurrentUseGameplayType();// 0x247c8f8
	enum GetCurrentStateType();// 0x2483a18
	void GetCurrentScreenMiddenPosition(out Vector Pint, out Vector Dir);// 0x247de20
	Pawn* GetCurPawn();// 0x24839c0
	Rotator GetClientControlRotation(float Timestamp);// 0x2484690
	InGameChatContainer* GetChatContainer();// 0x241a644
	CharacterNaviGuideComponent* GetCharacterNaviGuideComp();// 0x247d32c
	BackpackComponent* GetBackPackComponent();// 0x2480a0c
	void ForceNetCleanup(FString ErrorMessage);// 0x247ee48
	void ExitGame(FString EndReason);// 0x2483394
	void ExecutePerSecond();// 0x24858b4
	void EnterOBNoReplay();// 0x247f1b0
	void EnablePhoneOrientation(bool NewEnable);// 0x24841d4
	void EnableGreyScreenPostProcess(bool Enabled);// 0x2481a80
	void EnableDebugAI(uint32 DebugPlayerKey);// 0x247df30
	void EnableCloseEyePostProcess(bool Enabled, byte TimeSec, float StartAtTime);// 0x2481b08
	void EnableArcPostProcess(bool Enabled);// 0x24819f8
	void DrawDebugStringWithActor(const Vector TextLocation, FString Text, Actor* TestBaseActor, const Color TextColor, float Duration);// 0x247fa38
	void DoParachuteExpression(int ID);// 0x247d408
	void DisplayDamageCameraShake(byte DmgType, int DmgValue);// 0x2ce6f18
	void DispatchPlayerReconnectedEvent();// 0x247ef40
	void DispatchPlayerLostEvent();// 0x247ef54
	void DispatchPlayerExitEvent();// 0x247ef2c
	void DisableDeathBoxSignal(Actor* DeathBox);// 0x247d908
	void DebugOrientation();// 0x2484254
	void DebugCryptoDrone();// 0x247df14
	void ConfirmLegend(bool IsRepick, bool ImmediatelyChange);// 0x247f3b8
	void ClientUnEquipPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative);// 0x247e96c
	void ClientTrackTrigger(const ChapterType_TrackLink[] Tracks, ChapterParams theChapterParams);// 0x2483b68
	void ClientSwitchSpectatorUI(bool bShow);// 0x2480d80
	void ClientStartRespawnTimer(float RespawnTime);// 0x2484590
	void ClientSetWidgetVisibilityByIdEx(FName IdName, bool Visible);// 0x248070c
	void ClientSetWidgetVisibilityById(FName IdName, bool Visible);// 0x24807e0
	void ClientSetEncryptData(int KeyA, int KeyB, int KeyIndex, int KeyC, int KeyD);// 0x248403c
	void ClientSetCurrentLocation(Vector Location, Rotator Rotator);// 0x2480e08
	void ClientSetControlRotation(const Rotator NewRotation);// 0x247cf98
	void ClientReceiveBroadcastMsg(ApexCharacter* InCharacter, BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0x247e70c
	void ClientReceiveBroadcastAudio(enum PlayerAudioType);// 0x247e68c
	void ClientNotifyReconnectedSuccessfully();// 0x247ef68
	void ClientHideAllWidget();// 0x24806f0
	void ClientHandleMsg(enum Msg, enum StateSource);// 0x2483db8
	void ClientFadeOutPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0x247e814
	void ClientEquipPropsWeapon(ApexCharacter* InCharacter, enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative);// 0x247eb0c
	void ClientEnterStageFight_Notify();// 0x2ce6f18
	void ClientEnterStageFight();// 0x24844d8
	void Client_ShowTips(const int[] NewIDs);// 0x247c7e8
	void ClearHiddenActor();// 0x24852c8
	void ChooseLegendSkin(int SkinId);// 0x247f300
	void ChooseLegend(int LegendId);// 0x247f490
	bool CheckRespawnBeacon(ApexRespawnBeacon* RespawnBeacon);// 0x24810c4
	bool CheckRescuing(uint32 InPlayerKey);// 0x248150c
	void CancelOpenTreasureDoor();// 0x247dfcc
	void CancelConfirmLegend();// 0x247f39c
	void CallOnRep_PlayerStateFromLua();// 0x247f590
	void BRViewSkill();// 0x247f2c8
	void BRSlideSkin();// 0x247f274
	void BRSendChat();// 0x247f2ac
	void BRForeground();// 0x247f1d8
	void BreakOpenTreasureDoor();// 0x247e068
	void BRBackground(byte CurrentState);// 0x247f1f4
	void BRApplyLegend();// 0x241e0e4
	void BPHandleGameEnd(bool IsWin);// 0x2ce6f18
	void AirParachute();// 0x247ce1c
	void AIHostFunc(int FuncIdx, int TeammatePlayerKey, int CurrentValue);// 0x247d780
	void AddTimesOfViewingDeadRecord(int InTimes, bool bInNow);// 0x247d480
	void AddOnScreenMsg(uint64 Key, FString Msg, float TimeToDis);// 0x247f908
	void AddHiddenActor(Actor* Actor);// 0x24852dc

--------------------------------
Class: ApexCharacterBase.Character.Pawn.Actor.Object
	<enum,ActorComponent*> CharacterComponentMaps;//[Offset: 0x4ec, Size: 0x3c]
	bool NativeRingDisPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52a, Size: 0x1]
	bool LeftSideTPPCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52b, Size: 0x1]
	Vector DefaultTPPArmInGameLocation;//[Offset: 0x550, Size: 0xc]
	SceneComponent* TPPContainer;//[Offset: 0x55c, Size: 0x4]
	SceneComponent* FPPContainer;//[Offset: 0x560, Size: 0x4]
	delegate OnTPPMeshVisibilityChange;//[Offset: 0x578, Size: 0xc]
	delegate OnFPPMeshVisibilityChange;//[Offset: 0x584, Size: 0xc]
	NotifyAudioComponent* NotifyAudioComponent;//[Offset: 0x590, Size: 0x4]
	bool bIsInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	<MeshComponent*,bool> MeshInvisibleData;//[Offset: 0x5c0, Size: 0x3c]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x5fc, Size: 0x4]
	bool EnableLogState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	bool IsNeedShowEnemyOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 0x1]
	bool IsNeedShowEnemyFillingColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x602, Size: 0x1]
	bool IsEnableCharacterOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x603, Size: 0x1]
	FString RimClothEffectMaterialName;//[Offset: 0x604, Size: 0xc]
	FString RimHairEffectMaterialName;//[Offset: 0x610, Size: 0xc]
	bool bEnableOutlineEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61c, Size: 0x1]
	byte OutlineIdOverride;//[Offset: 0x61d, Size: 0x1]
	MaterialInstanceDynamic*[] CharacterEffectMaterials;//[Offset: 0x620, Size: 0xc]
	<int,PrimitiveComponent*> OutlineMap;//[Offset: 0x62c, Size: 0x3c]
	FName HeadParentBoneName;//[Offset: 0x668, Size: 0x8]
	FName BodyParentBoneName;//[Offset: 0x670, Size: 0x8]
	FName ThighLParentBoneName;//[Offset: 0x678, Size: 0x8]
	FName ThighRParentBoneName;//[Offset: 0x680, Size: 0x8]
	FName ArmLParentBoneName;//[Offset: 0x688, Size: 0x8]
	FName ArmRParentBoneName;//[Offset: 0x690, Size: 0x8]
	FName HeadHitBoneName;//[Offset: 0x698, Size: 0x8]
	FName BodyHitBoneName;//[Offset: 0x6a0, Size: 0x8]
	FName LeftArmHitBoneName;//[Offset: 0x6a8, Size: 0x8]
	FName RightArmHitBoneName;//[Offset: 0x6b0, Size: 0x8]
	FName LeftThighHitBoneName;//[Offset: 0x6b8, Size: 0x8]
	FName RightThighHitBoneName;//[Offset: 0x6c0, Size: 0x8]
	float StandHalfHeight;//[Offset: 0x6c8, Size: 0x4]
	float CrouchHalfHeight;//[Offset: 0x6cc, Size: 0x4]
	float DyingHalfHeight;//[Offset: 0x6d0, Size: 0x4]
	float StandRadius;//[Offset: 0x6d4, Size: 0x4]
	float CrouchRadius;//[Offset: 0x6d8, Size: 0x4]
	float DyingRadius;//[Offset: 0x6dc, Size: 0x4]
	float DyingFPPOffsetZ;//[Offset: 0x6e0, Size: 0x4]
	bool bCanJumpFromPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e4, Size: 0x1]
	Actor* AttachedPlane;//[Offset: 0x6e8, Size: 0x4]
	float PerkAimingSpeed;//[Offset: 0x6ec, Size: 0x4]
	GameplayTagContainer GameplayTagContainer;//[Offset: 0x6f0, Size: 0x18]
	bool BloodHoundHuntingOutlineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 0x1]
	ParticleSystemComponent*[] SpawnedFootprints;//[Offset: 0x720, Size: 0xc]
	SubObjectsReplicationConfig SubObjectsReplicationConfig;//[Offset: 0x72c, Size: 0x10]
	class ApexAIController* AIControllerSoftClass;//[Offset: 0x748, Size: 0x20]
	float SoundCheckInterval;//[Offset: 0x774, Size: 0x4]
	float SoundCheckDownDistance;//[Offset: 0x778, Size: 0x4]
	float SoundCheckUpDistance;//[Offset: 0x77c, Size: 0x4]
	GrapplingHookMovement* GrappleHookMoveComp;//[Offset: 0x780, Size: 0x8]
	void UseMeshMode(enum MeshUseSource, bool NewUse, enum MeshMode, float LerpTime, bool ForceInit);// 0x2431960
	void UpdateBloodHoundHuntingOutline(bool Enable);// 0x242f7e0
	bool SetTPPMeshHidden(enum HiddenSource, bool NewHidden, float DelayTime);// 0x2431238
	void SetSwitchForCharacter(enum SoundType, FName SwitchGroup, FName SwitchState);// 0x2430e5c
	void SetRTPCForCharacter(enum SoundType, FName RTPC, float Value, int InterpolationTimeMs);// 0x2430f7c
	void SetRegionForCharacter(enum SoundType);// 0x2430ddc
	bool SetMeshHidden(enum HiddenSource, bool SetFPP, bool SetTPP, bool FPPNewHidden, bool TPPNewHidden);// 0x2431470
	void SetInvisible(const bool Invisible);// 0x2430c1c
	bool SetFPPMeshHidden(enum HiddenSource, bool NewHidden, float DelayTime);// 0x2431354
	void SetEnableOutlineEffect(bool Enable);// 0x242fdac
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x2430640
	void SetActorOutlineEffectEnable(Actor* OutlineTarget, bool Enable);// 0x242fce0
	void ServerLeavePlane();// 0x242f888
	void RemoveOutlineEffectWithMesh(MeshComponent* SkeMesh);// 0x243027c
	void RemoveOutlineEffectWithId(enum SourceType, int EffectID);// 0x2430004
	void RemoveOutLineEffect(enum SourceType, enum OutlineType);// 0x24301c0
	void RemoveComponentDitherBlackList(PrimitiveComponent* Component);// 0x12b5f38
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor);// 0x243094c
	void RefreshCurrentOutlineEffect(MeshComponent* SkeMesh);// 0x24304b0
	void ReceiveUnPossessedSubCharacterBy(ApexPlayerController* InController);// 0x2ce6f18
	void ReceivePossessedSubCharacterBy(ApexPlayerController* InController);// 0x2ce6f18
	void OnSwitchCrouch();// 0x2ce6f18
	void OnSprintOverSpeed(bool Enter);// 0x24316e8
	void OnRep_OutlineIdOverride();// 0x242fccc
	void OnRep_EnableOutlineEffect();// 0x242fe34
	void OnRep_CanJump();// 0x242f860
	void OnRep_AttachedPlane();// 0x242f874
	void OnJump();// 0x2ce6f18
	void LateUpdateAnimationInstanceData(AnimInstance* AnimInstance);// 0x242f680
	bool IsTPPHiddenFromSource(enum HiddenSource);// 0x2431128
	bool IsTPPHidden();// 0x24310d8
	bool IsTeammate(const Pawn* Other, bool bCheckHostile);// 0x2430cb8
	bool IsSameTeam(Actor* Other);// 0x24307e8
	bool IsObedInCurrentClient();// 0x2430dac
	bool IsInvisible();// 0x2430c9c
	bool IsFPPHiddenFromSource(enum HiddenSource);// 0x24311b0
	bool IsFPPHidden();// 0x2431100
	bool IsAiming();// 0x2431c1c
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x2430870
	int GetTeamIndex();// 0x2418f88
	int GetTeamId();// 0x2430d84
	SpringArmComponent* GetSpringArmComp(enum CameraMode);// 0x24317f0
	void GetSilencedByRevenant(float Duration);// 0x242f730
	enum GetServerCameraMode();// 0x2431b0c
	SceneComponent* GetNodeComponent(enum Tag);// 0x2431660
	Vector GetNameDisplayLocation();// 0x242f590
	enum GetMeshMode();// 0x2431930
	Vector GetHeadLocation(bool bUseHeadBone);// 0x242f5e0
	SkeletalMeshComponent* GetCurrentMesh();// 0x2431878
	enum GetCurrentCameraMode();// 0x2431b3c
	float GetControllerYawOffset();// 0x2431638
	SceneComponent* GetContainer(enum CameraMode);// 0x2431768
	CharacterParachuteComponent* GetCharacterParachuteComponent();// 0x242f700
	enum GetCharacterCameraPoseType();// 0x2431b6c
	SkeletalMeshComponent* GetCameraModeMesh(enum CameraMode);// 0x24318a8
	float GetBuffExpiry(FName BuffName);// 0x24305b4
	ApexBuff* GetBuffByName(FName BuffName);// 0x2430528
	Actor* GetAttachedPlane();// 0x242f8a4
	SkeletalMeshComponent* GetActiveMesh();// 0x242f7b0
	void ChangeCharacterRimEffect(bool IsShow);// 0x242fe48
	void ChangeAiming(bool NewIsAiming);// 0x2431b94
	void BroadcastClientsSimulateDamage(ApexCharacter* Victim, float Damage, int DamageType, Pawn* Attacker, enum AvatarDamagePosition, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken, uint32 ShootID, byte PelletID, float AimPercent, byte AimChargeLevel);// 0x242f8cc
	void BP_LateUpdateAnimationInstanceData(AnimInstance* AnimInstance);// 0x2ce6f18
	bool AddOutlineEffectWithTeam(MeshComponent* SkeMesh, int TeamID);// 0x242fec8
	void AddOutlineEffectWithNoMesh(enum SourceType, enum EffectType);// 0x24302f4
	void AddOutlineEffectWithId(MeshComponent* SkeMesh, enum SourceType, int EffectID);// 0x24300c0
	void AddOutLineEffect(MeshComponent* SkeMesh, enum SourceType, enum EffectType);// 0x24303b0
	void AddComponentDitherBlackList(PrimitiveComponent* Component);// 0x12b5f38
	void AddCharacterOutlineEffect(int TeamID);// 0x242ff8c
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x2430714
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x2430ab8

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1ec, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x1f0, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x1fc, Size: 0xc]
	float ProbeSize;//[Offset: 0x208, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x20c, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20d, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20d, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20d, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20d, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20d, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20d, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20e, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x210, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x214, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x218, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x21c, Size: 0x4]
	bool IsCollisionFixApplied();// 0x47c3e54
	Vector GetUnfixedCameraPosition();// 0x47c3e7c
	Rotator GetTargetRotation();// 0x47c3ec4

--------------------------------
Class: NotifyAudioComponent.ApexSoundSpeakerComponent.ActorComponent.Object
	CharacterSoundMap* SoundMap;//[Offset: 0xb4, Size: 0x4]
	float StateCheckTime;//[Offset: 0xb8, Size: 0x4]
	<class ApexAnimNotifySound,ApexAnimNotifySound*> AnimNotifyMap;//[Offset: 0xbc, Size: 0x3c]
	ApexPlayerController* FirstPC;//[Offset: 0x10c, Size: 0x4]
	ApexCharacterBase* ApexCharacter;//[Offset: 0x110, Size: 0x4]
	ApexCharacterMovementComponent* MovementComponent;//[Offset: 0x114, Size: 0x4]
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x26c2454
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x26c2554
	void OnPoseStateChanged(enum NewState, enum PrevState);// 0x26c2398
	void OnMovementModeChanged(byte PreviousMovementMode, byte PreviousCustomMode, byte MovementMode, byte CustomMovementMode);// 0x26c2250

--------------------------------
Class: ApexSoundSpeakerComponent.ActorComponent.Object
	bool Muted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	AkComponent* AkComponentWeakPtr;//[Offset: 0xac, Size: 0x8]
	void StopSoundByType();// 0x24b04fc
	void StopSoundById(int PlayingID, int Duration);// 0x24b0440
	void SetSwitchByType(FName SwitchGroup, FName SwitchState);// 0x24b09d8
	void SetState(FName StateGroup, FName State);// 0x24b0bc4
	void SetRTPCValueByType(FName RTPC, float Value, int InterpolationTimeMs);// 0x24b0ab0
	void SetRegionByType();// 0x24051f0
	int PlaySoundByName(FString AkEventName, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool StopWhenOwnerDestroyed);// 0x24b0510
	int PlaySound(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool StopWhenOwnerDestroyed);// 0x24b0780

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x1f0, Size: 0x4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x1f4, Size: 0xc]
	int EarlyReflectionOrder;//[Offset: 0x200, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x204, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x208, Size: 0x4]
	byte OcclusionCollisionChannel;//[Offset: 0x20c, Size: 0x1]
	bool EnableOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	float roomReverbAuxBusGain;//[Offset: 0x218, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x21c, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x220, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x224, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x228, Size: 0x1]
	bool EnableTickOptimize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x228, Size: 0x1]
	bool DistanceDelay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x228, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x22c, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x230, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x238, Size: 0x4]
	FString EventName;//[Offset: 0x23c, Size: 0xc]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x1435e94
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x1435c9c
	void Stop();// 0x1436634
	void SetUseSpatialAudio(const bool bNewValue);// 0x14370f0
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x1436034
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x1435fb4
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x14364c8
	void SetOutputBusVolume(float BusVolume);// 0x1435c24
	void SetListeners(out const AkComponent*[] Listeners);// 0x1435f14
	void SetAttenuationScalingFactor(float Value);// 0x1435bac
	void PostTrigger(FString Trigger);// 0x14361c8
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x1436ddc
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x1436f38
	void PostAkEventForTimerCallbackWithName(FString in_EventName);// 0x1436648
	void PostAkEventForTimerCallback(FString in_EventName, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x14366d8
	int PostAkEventByName(FString in_EventName);// 0x14368e8
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x1436980
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x1436b7c
	void PlayEvent();// 0x1435b5c
	void GetRTPCValue(FString RTPC, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType);// 0x14362ac
	float GetAttenuationRadius();// 0x1435b84
	void ForceRefreshOcclusion();// 0x1435b70

--------------------------------
Class: AkAuxBus.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: AkAudioBank.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	void OnCompleteAkBankUnload(enum res);// 0x1434878
	void OnCompleteAkBankLoad(enum res);// 0x14348f0

--------------------------------
Class: AkAudioEvent.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x20, Size: 0x4]
	float MaxAttenuationRadius;//[Offset: 0x24, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float MinimumDuration;//[Offset: 0x2c, Size: 0x4]
	float MaximumDuration;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0xc]
	enum CodecID;//[Offset: 0xc, Size: 0x1]
	FString Filename;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: CharacterSoundMap.DataAsset.Object
	<enum,StateAudioMap> SoundSetting;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: StateAudioMap
	FName SoundName;//[Offset: 0x0, Size: 0x8]
	class ApexAnimNotifySound* AnimNotifyClass;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApexAnimNotifySound.AnimNotify.Object
	FName SoundName;//[Offset: 0x34, Size: 0x8]
	PreviewAudioParam PreviewAudioParam;//[Offset: 0x3c, Size: 0x4]
	bool bStopByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	ApexAnimNotifySoundMap* SoundMapDataAsset;//[Offset: 0x44, Size: 0x20]
	int PlaySound(ApexAnimNotifySoundSetting* SoundSetting, Actor* Actor);// 0x24000d0
	void OnSoundPlayVO(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x2400014
	void Notify(Actor* Actor, FName InSoundName);// 0x2400214
	ApexAnimNotifySoundSetting* GetSoundSettingByActor(Actor* Actor);// 0x2400194

--------------------------------
Class: ApexAnimNotifySoundSetting.Object
	ApexAnimNotifySoundAkFinder* AkFinder;//[Offset: 0x1c, Size: 0x4]
	ApexAnimNotifySoundModule*[] Modules;//[Offset: 0x20, Size: 0xc]
	ApexAnimNotifyPicker*[] StopAnimNotices;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: ApexAnimNotifySoundAkFinder.Object

--------------------------------
Class: ApexAnimNotifySoundModule.Object

--------------------------------
Class: ApexAnimNotifyPicker.Object
	class ApexAnimNotifySound* NotifyClass;//[Offset: 0x1c, Size: 0x4]
	ApexAnimNotifySound* Notify;//[Offset: 0x20, Size: 0x4]
	FName SoundName;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: PreviewAudioParam
	enum SoundPlayType;//[Offset: 0x0, Size: 0x1]
	enum LegendType;//[Offset: 0x1, Size: 0x1]
	enum WeaponType;//[Offset: 0x2, Size: 0x1]
	enum PawnState;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ApexAnimNotifySoundMap.DataAsset.Object
	<FName,ApexAnimNotifySoundGroup*> SoundMap;//[Offset: 0x20, Size: 0x3c]
	<FName,int> LegendVOSoundNameMap;//[Offset: 0x5c, Size: 0x3c]
	ApexAnimNotifySoundDefaultSoundGroup_VO* DefaultVOSoundMap;//[Offset: 0x98, Size: 0x4]
	<enum,ApexAnimNotifySoundLegendSoundGroup_VO*> LegendVOSoundMap;//[Offset: 0x9c, Size: 0x3c]
	FName SearchSoundName;//[Offset: 0xd8, Size: 0x8]
	enum DeleteLegendType;//[Offset: 0xe0, Size: 0x1]
	void SearchSound();// 0xfd338c
	void ImportExcel();// 0xfd338c
	void ExportExcel();// 0xfd338c
	void DeleteSearchSound();// 0xfd338c
	void DeleteLegendSound();// 0xfd338c

--------------------------------
Class: ApexAnimNotifySoundGroup.Object

--------------------------------
Class: ApexAnimNotifySoundDefaultSoundGroup_VO.Object
	<FName,CharacterVOAudioData> SoundMap;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: CharacterVOAudioData
	<enum,VOAudioData> CharacterVO;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: VOAudioData
	FString AudioEvent;//[Offset: 0x0, Size: 0xc]
	VOData[] VOData;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: VOData
	FString ExternalSrc;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ApexAnimNotifySoundLegendSoundGroup_VO.DataAsset.Object
	CharacterVOAudioData[] SoundMap;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: ApexCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool EnableSTDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	bool EnableSTDRPhysCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709, Size: 0x1]
	float STDRPhysCorrectionStartTime;//[Offset: 0x70c, Size: 0x4]
	PrimitiveComponent* LastBase;//[Offset: 0x710, Size: 0x4]
	int MovingInputRate;//[Offset: 0x714, Size: 0x4]
	bool bServerUseClientMoveRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 0x1]
	float AppendMoveDuration;//[Offset: 0x73c, Size: 0x4]
	int AppendOneMoveThreshold;//[Offset: 0x740, Size: 0x4]
	int AppendTwoMoveThreshold;//[Offset: 0x744, Size: 0x4]
	float SpeedValue;//[Offset: 0x75c, Size: 0x4]
	float KnockDownSpeedValue;//[Offset: 0x760, Size: 0x4]
	float DeathSpeedZeroTime;//[Offset: 0x764, Size: 0x4]
	float SpeedScale;//[Offset: 0x768, Size: 0x4]
	float SpeedDynamicScale;//[Offset: 0x76c, Size: 0x4]
	int SkillForbidSprint;//[Offset: 0x770, Size: 0x4]
	bool EnableLogMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 0x1]
	float ValidClientDistanceDiff;//[Offset: 0x778, Size: 0x4]
	float SmoothAdjustionWorldLocationSpeed;//[Offset: 0x77c, Size: 0x4]
	float MaxSmoothAdjustionWorldLocationOffset;//[Offset: 0x780, Size: 0x4]
	bool EnableSmoothAdjustionWorldLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 0x1]
	bool bPreExternalAccel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x796, Size: 0x1]
	MovementTagAttributeDataAsset* TagAttributeTable;//[Offset: 0x798, Size: 0x4]
	bool bCloseMovingOnGroundSlideWallAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 0x1]
	float SlideWallHeightAdjust;//[Offset: 0x7a0, Size: 0x4]
	int PenetratingUpCheckNum;//[Offset: 0x7a4, Size: 0x4]
	float ZeroPenetrationDepthAdjustLength;//[Offset: 0x7ac, Size: 0x4]
	bool ForbidMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 0x1]
	float ApexPerchRadiusThreshold;//[Offset: 0x7e0, Size: 0x4]
	float ApexPerchHeight;//[Offset: 0x7e4, Size: 0x4]
	float CharacterMaxSpeed;//[Offset: 0x818, Size: 0x4]
	CurveFloat* MovingAccelerationCurve;//[Offset: 0x81c, Size: 0x4]
	float WalkingFriction;//[Offset: 0x820, Size: 0x4]
	float WalkingBaseSpeed;//[Offset: 0x824, Size: 0x4]
	float WalkingStopSpeed;//[Offset: 0x828, Size: 0x4]
	float WalkingAccel;//[Offset: 0x82c, Size: 0x4]
	float[] StepHeightSection;//[Offset: 0x830, Size: 0xc]
	float WalkSlideWallRate;//[Offset: 0x83c, Size: 0x4]
	float SlideAlongSurfaceNoMoveAngle;//[Offset: 0x840, Size: 0x4]
	float AfterSlideAlongSurfaceNoMoveAngle;//[Offset: 0x844, Size: 0x4]
	float SlideAlongSurfaceCheckDistance;//[Offset: 0x848, Size: 0x4]
	float SlideAlongSurfaceVelocityChangeAngle;//[Offset: 0x84c, Size: 0x4]
	float WalkingSpeedModify;//[Offset: 0x850, Size: 0x4]
	float ForceFindFloorTime;//[Offset: 0x854, Size: 0x4]
	float ForceFindFloorDist;//[Offset: 0x858, Size: 0x4]
	MovementCameraState[] EnterSprintCameraState;//[Offset: 0x85c, Size: 0xc]
	float WalkSlopeAngle;//[Offset: 0x878, Size: 0x4]
	float WalkSlopeNormalZ;//[Offset: 0x87c, Size: 0x4]
	float WalkSlopeTime;//[Offset: 0x880, Size: 0x4]
	float WalkSlopeCD;//[Offset: 0x884, Size: 0x4]
	float WalkSlopeControlAngleLimit;//[Offset: 0x888, Size: 0x4]
	float FallingLandSoundDistance;//[Offset: 0x898, Size: 0x4]
	bool bUseLandingStiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 0x1]
	float FallingLandParticleDistance;//[Offset: 0x91c, Size: 0x4]
	MovementStiffCurveDataAsset* StiffCurveTable;//[Offset: 0x920, Size: 0x4]
	MovementLandingHardDataAsset* LandingHardTable;//[Offset: 0x924, Size: 0x4]
	float JumpHeight;//[Offset: 0x928, Size: 0x4]
	Vector2D SecondJumpHeightScale;//[Offset: 0x92c, Size: 0x8]
	Vector2D SecondJumpTimeRange;//[Offset: 0x934, Size: 0x8]
	float AirSpeedCap;//[Offset: 0x93c, Size: 0x4]
	float AirAcceleRate;//[Offset: 0x940, Size: 0x4]
	Vector4 CollisionMoveVelocity;//[Offset: 0x950, Size: 0x10]
	float CollisionMoveForwardVelocity;//[Offset: 0x960, Size: 0x4]
	float CollisionMoveTime;//[Offset: 0x964, Size: 0x4]
	float FallingDownSoundSpeed;//[Offset: 0x968, Size: 0x4]
	float FallingImpactMaxSpeed;//[Offset: 0x96c, Size: 0x4]
	HitEffectDataAsset* LandingLightFX;//[Offset: 0x970, Size: 0x20]
	HitEffectDataAsset* LandingHardFX;//[Offset: 0x990, Size: 0x20]
	ParticleSystemComponent* LandingFXComponent;//[Offset: 0x9b0, Size: 0x4]
	float MovingGravityScale;//[Offset: 0x9d0, Size: 0x4]
	float JumpingGravityScale;//[Offset: 0x9d4, Size: 0x4]
	float SlidingGravityScale;//[Offset: 0x9d8, Size: 0x4]
	float ClimbingGravityScale;//[Offset: 0x9dc, Size: 0x4]
	float SlideGuideCountdownInit;//[Offset: 0x9e0, Size: 0x4]
	int SlideJumpGuideCountdownInit;//[Offset: 0x9e4, Size: 0x4]
	int BigJumpGuideCountdownInit;//[Offset: 0x9e8, Size: 0x4]
	int SprintGuideID;//[Offset: 0x9ec, Size: 0x4]
	int SlideGuideID;//[Offset: 0x9f0, Size: 0x4]
	int ClimbGuideID;//[Offset: 0x9f4, Size: 0x4]
	int SlideJumpGuideID;//[Offset: 0x9f8, Size: 0x4]
	int BigJumpGuideID;//[Offset: 0x9fc, Size: 0x4]
	float SlideGuideCDInit;//[Offset: 0xa00, Size: 0x4]
	float SlideJumpGuideCDInit;//[Offset: 0xa04, Size: 0x4]
	float ClimbGuideCDInit;//[Offset: 0xa08, Size: 0x4]
	float SprintWithGunCDInit;//[Offset: 0xa0c, Size: 0x4]
	float ValidServerDistance;//[Offset: 0xa2c, Size: 0x4]
	float ClimbStartSpeed;//[Offset: 0xa30, Size: 0x4]
	float ClimbEndSpeed;//[Offset: 0xa34, Size: 0x4]
	float ClimbAcceleration;//[Offset: 0xa38, Size: 0x4]
	float ClimbDeceleration;//[Offset: 0xa3c, Size: 0x4]
	float ClimbHorizontalAcceleration;//[Offset: 0xa40, Size: 0x4]
	float ClimbHorizontalAccelerationScale;//[Offset: 0xa44, Size: 0x4]
	float ClimbFriction;//[Offset: 0xa48, Size: 0x4]
	float ClimbMinFrictionSpeed;//[Offset: 0xa4c, Size: 0x4]
	float ClimbLimitHeight;//[Offset: 0xa50, Size: 0x4]
	float FinalJumpHeight;//[Offset: 0xa54, Size: 0x4]
	float FinalJumpExtraSpeed;//[Offset: 0xa58, Size: 0x4]
	float FinalJumpDcc;//[Offset: 0xa5c, Size: 0x4]
	float FaceRotationTime;//[Offset: 0xa60, Size: 0x4]
	float MaxClimbSpeed;//[Offset: 0xa64, Size: 0x4]
	float MaxClimbStepHeight;//[Offset: 0xa68, Size: 0x4]
	float MaxClimbAngle;//[Offset: 0xa6c, Size: 0x4]
	float MaxClimbZNormalValue;//[Offset: 0xa70, Size: 0x4]
	float MaxFacingWallAngle;//[Offset: 0xa74, Size: 0x4]
	float MaxVelocityWallAngle;//[Offset: 0xa78, Size: 0x4]
	float FallingToClimbOverDistance;//[Offset: 0xa7c, Size: 0x4]
	float ClimbControlAngleLimit;//[Offset: 0xa80, Size: 0x4]
	bool bFallingWhenZeroAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa84, Size: 0x1]
	bool bClimbUseTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa85, Size: 0x1]
	CurveFloat* ClimbAnimVelocityCurve;//[Offset: 0xa88, Size: 0x4]
	float ClimbBoxCheckHeight;//[Offset: 0xa8c, Size: 0x4]
	float ClimbBoxCheckDistance;//[Offset: 0xa90, Size: 0x4]
	bool bClimbCancelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa94, Size: 0x1]
	float TimeForHold;//[Offset: 0xa98, Size: 0x4]
	float TimeOfHideMesh;//[Offset: 0xa9c, Size: 0x4]
	float RotateBackThreshold;//[Offset: 0xaa0, Size: 0x4]
	float RotateBackAngle;//[Offset: 0xaa4, Size: 0x4]
	float RotateBackSpeed;//[Offset: 0xaa8, Size: 0x4]
	bool bRotateBackOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaac, Size: 0x1]
	int ClimbFailCount;//[Offset: 0xab0, Size: 0x4]
	int ClimbSuccessCount;//[Offset: 0xab4, Size: 0x4]
	byte ClimbTipsType;//[Offset: 0xab8, Size: 0x1]
	float ClimbTipsCD;//[Offset: 0xabc, Size: 0x4]
	class Actor* ClimbTipsActorPath;//[Offset: 0xac0, Size: 0x20]
	float ClimbTipsLength;//[Offset: 0xae0, Size: 0x4]
	float ClimbTipsCheckDistFPP;//[Offset: 0xae4, Size: 0x4]
	float ClimbTipsCheckDistTPP;//[Offset: 0xae8, Size: 0x4]
	float ClimbTipsDisappearDistFPP;//[Offset: 0xaec, Size: 0x4]
	float ClimbTipsDisappearDistTPP;//[Offset: 0xaf0, Size: 0x4]
	float ClimbTipsToWallDist;//[Offset: 0xaf4, Size: 0x4]
	float ClimbTipsHeightOffset;//[Offset: 0xaf8, Size: 0x4]
	float ClimbTipsNotShowHeight;//[Offset: 0xafc, Size: 0x4]
	bool bOpenClimbTipsHeightCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 0x1]
	bool bOpenClimbTipsHeightCheckWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 0x1]
	SoftObjectPath ClimbTipsLineMaterialForTPP;//[Offset: 0xb04, Size: 0x14]
	SoftObjectPath ClimbTipsLineMaterialForFPP;//[Offset: 0xb18, Size: 0x14]
	MaterialInterface* ClimbTipsLineMaterialInstanceForTPP;//[Offset: 0xb2c, Size: 0x4]
	MaterialInterface* ClimbTipsLineMaterialInstanceForFPP;//[Offset: 0xb30, Size: 0x4]
	Actor* ClimbTipsActor;//[Offset: 0xb34, Size: 0x4]
	StaticMeshComponent* ClimbTipsActorMesh;//[Offset: 0xb38, Size: 0x4]
	bool IsLittleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 0x1]
	Vector4 ClimbOverDuration;//[Offset: 0xd60, Size: 0x10]
	float ClimbOverHorizontalCheckDistance;//[Offset: 0xd70, Size: 0x4]
	float ClimbOverNextHorizontalCheckDistance;//[Offset: 0xd74, Size: 0x4]
	float ClimbOverVerticalCheckDistance;//[Offset: 0xd78, Size: 0x4]
	float ClimbOverOverDistance;//[Offset: 0xd7c, Size: 0x4]
	Vector ClimbOverAnimHeightRange;//[Offset: 0xd80, Size: 0xc]
	float HangingDuration;//[Offset: 0xdbc, Size: 0x4]
	float CheckHangingDuration;//[Offset: 0xdc0, Size: 0x4]
	float HangingVerticalDistance;//[Offset: 0xdc4, Size: 0x4]
	bool bShowClimbOverCheckDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde1, Size: 0x1]
	bool bShowWallNormalDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde2, Size: 0x1]
	bool bShowClimbNormalDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde3, Size: 0x1]
	bool bAutoClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde4, Size: 0x1]
	float AutoClimbMaxFacingWallAngle;//[Offset: 0xde8, Size: 0x4]
	float AutoClimbMaxVelocityWallAngle;//[Offset: 0xdec, Size: 0x4]
	float OneKeyClimbWalkingHorizontalCheck;//[Offset: 0xdf0, Size: 0x4]
	float OneKeyClimbFallingHorizontalCheck;//[Offset: 0xdf4, Size: 0x4]
	float OneKeyClimbBackCheck;//[Offset: 0xdf8, Size: 0x4]
	float ClimbBigJumpScreenDis;//[Offset: 0xdfc, Size: 0x4]
	float ClimbBigJumpScreenAngle;//[Offset: 0xe00, Size: 0x4]
	float ClimbBigJumpAngle;//[Offset: 0xe04, Size: 0x4]
	CurveFloat* ClimbBigJumpNormalVelocityCurve;//[Offset: 0xe08, Size: 0x4]
	CurveFloat* ClimbBigJumpVerticalVelocityCurve;//[Offset: 0xe0c, Size: 0x4]
	CurveFloat* SlideJumptoClimbBigJumpNormalVelocityCurve;//[Offset: 0xe10, Size: 0x4]
	CurveFloat* SlideJumptoClimbBigJumpVerticalVelocityCurve;//[Offset: 0xe14, Size: 0x4]
	float HangingClimbBigJumpNormalVelocity;//[Offset: 0xe18, Size: 0x4]
	float HangingClimbBigJumpVerticalVelocity;//[Offset: 0xe1c, Size: 0x4]
	float ClimbInAirBigJumpCD;//[Offset: 0xe20, Size: 0x4]
	float ClimbBigJumpControlCD;//[Offset: 0xe24, Size: 0x4]
	float ClimbBigJumpControlAccel;//[Offset: 0xe28, Size: 0x4]
	float ClimbBigJumpEndZSpeed;//[Offset: 0xe2c, Size: 0x4]
	float ClimbBigJumpPreJumpTime;//[Offset: 0xe30, Size: 0x4]
	bool bAutoJumpClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4f, Size: 0x1]
	bool bAutoJumpClimbEnterClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe50, Size: 0x1]
	float ClimbBigJumpToleranceJumpTime;//[Offset: 0xe54, Size: 0x4]
	float ClimbBigJumpHoldTime;//[Offset: 0xe58, Size: 0x4]
	float ClimbBigJumpCancelForwardLimitAngle;//[Offset: 0xe5c, Size: 0x4]
	bool BCheckSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe67, Size: 0x1]
	float EnterSlideRequiredSpeed;//[Offset: 0xe6c, Size: 0x4]
	float SlidingJumpScreenVeerAngle;//[Offset: 0xe70, Size: 0x4]
	float SlidingJumpScreenVeerLeftRightAngle;//[Offset: 0xe74, Size: 0x4]
	float EnterSlideRequiredSpeedAir;//[Offset: 0xe78, Size: 0x4]
	float EnterSlideRequiredTotalSpeed;//[Offset: 0xe7c, Size: 0x4]
	float SlideBoostSpeed;//[Offset: 0xe80, Size: 0x4]
	float SlideBoostSpeedCap;//[Offset: 0xe84, Size: 0x4]
	float SlideBoostSpeedCD;//[Offset: 0xe88, Size: 0x4]
	float StandToSlideTime;//[Offset: 0xe94, Size: 0x4]
	float SlideAccel;//[Offset: 0xe9c, Size: 0x4]
	float SlideAccelAngle;//[Offset: 0xea0, Size: 0x4]
	float SlidingVelocityDecay;//[Offset: 0xea4, Size: 0x4]
	CurveFloat* SlidingVelocityDecayCurve;//[Offset: 0xea8, Size: 0x4]
	CurveFloat* SlidingVelocityDecayCurveNoSlideBoost;//[Offset: 0xeac, Size: 0x4]
	float SlidingDeceleration;//[Offset: 0xeb0, Size: 0x4]
	float SlidingStopSpeed;//[Offset: 0xeb4, Size: 0x4]
	float SlidingMaxStopSpeed;//[Offset: 0xeb8, Size: 0x4]
	float SlidingWantToStopSpeed;//[Offset: 0xebc, Size: 0x4]
	float PlayerControlAffectDirNeedSpeed;//[Offset: 0xec0, Size: 0x4]
	float PlayerControlAffectDirSpeed;//[Offset: 0xec4, Size: 0x4]
	enum[] FormulaSequence;//[Offset: 0xec8, Size: 0xc]
	float MaxSlidingStepHeight;//[Offset: 0xed4, Size: 0x4]
	float SlidingStepHeightDeceleration;//[Offset: 0xed8, Size: 0x4]
	float SlidingJumpHeight;//[Offset: 0xedc, Size: 0x4]
	CurveFloat* SlidingVelocityJumpAngleCurve;//[Offset: 0xee0, Size: 0x4]
	float MaxSlidingJumpSpeed;//[Offset: 0xee4, Size: 0x4]
	float SlideJumpHeightRatio;//[Offset: 0xee8, Size: 0x4]
	float SlideJumpTime;//[Offset: 0xeec, Size: 0x4]
	float SlidingJumpScreenDis;//[Offset: 0xef0, Size: 0x4]
	float SlidingJumpScreenAngle;//[Offset: 0xef4, Size: 0x4]
	bool bSlideJumpMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 0x1]
	HitEffectDataAsset* SlidingFX;//[Offset: 0xf08, Size: 0x20]
	ParticleSystem* LastSlidingFX;//[Offset: 0xf28, Size: 0x4]
	ParticleSystemComponent*[] SlidingFXComponents;//[Offset: 0xf2c, Size: 0xc]
	Vector SlidingFXLocation;//[Offset: 0xf38, Size: 0xc]
	MovementCameraState[] EnterSlidingCameraState;//[Offset: 0xf44, Size: 0xc]
	int LittleJumpMotionAssetID;//[Offset: 0xf58, Size: 0x4]
	delegate DelegateOnMotionMovementEnd;//[Offset: 0xf5c, Size: 0xc]
	bool EnableMotionMovementLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 0x1]
	bool RuntimeWarpingPointWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf69, Size: 0x1]
	Vector WarpingEndLocation;//[Offset: 0xf6c, Size: 0xc]
	Vector[] RuntimeWarpingPointLocationArrayEditor;//[Offset: 0xf78, Size: 0xc]
	Vector[] RuntimeWarpingSocketArray;//[Offset: 0xf84, Size: 0xc]
	MotionWarpingDataAsset* CurrentMotionMovementData;//[Offset: 0xf94, Size: 0x4]
	RepMotionData RepMotionData;//[Offset: 0xf98, Size: 0x48]
	float RepMotionMovementTime;//[Offset: 0xfe0, Size: 0x4]
	bool bOpenHitSlowly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 0x1]
	bool bUseSlowdownPlan2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1079, Size: 0x1]
	CurveFloat* HitRateCurve;//[Offset: 0x107c, Size: 0x4]
	float HitRateCD2;//[Offset: 0x1080, Size: 0x4]
	float ToHitRateCD2;//[Offset: 0x1084, Size: 0x4]
	SurfaceFloatDataAsset* SurfaceDecayDataAsset;//[Offset: 0x1088, Size: 0x4]
	float SyncLaunchTimeOut;//[Offset: 0x108c, Size: 0x4]
	bool bControllerLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ce, Size: 0x1]
	float DSAdjustOverDistance;//[Offset: 0x12d8, Size: 0x4]
	float DSAdjustLargeVelocity;//[Offset: 0x12dc, Size: 0x4]
	float SimulatedForceUpdateLocationTime;//[Offset: 0x12e0, Size: 0x4]
	bool bOpenSimulatedPredicting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308, Size: 0x1]
	float SimulateServerTimeStamp;//[Offset: 0x1310, Size: 0x4]
	PrimitiveComponent* DRNetLastBase;//[Offset: 0x1358, Size: 0x4]
	float DRLinceTraceLength;//[Offset: 0x1360, Size: 0x4]
	bool bSimulatedTickOptimizationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1364, Size: 0x1]
	bool bShowSimulatedTickAngelLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1365, Size: 0x1]
	float SimulatedTickDistance;//[Offset: 0x1368, Size: 0x4]
	float SimulatedTickAngelLimit;//[Offset: 0x136c, Size: 0x4]
	float SimulatedTickAngelLimitBuffer;//[Offset: 0x1374, Size: 0x4]
	bool bServerPredictMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137d, Size: 0x1]
	float RTTToleranceRate;//[Offset: 0x13f4, Size: 0x4]
	float LagTolerance;//[Offset: 0x13f8, Size: 0x4]
	float PredictInterval;//[Offset: 0x13fc, Size: 0x4]
	int PerFrameUsePacket;//[Offset: 0x1400, Size: 0x4]
	bool bOnlyLosePredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1404, Size: 0x1]
	float LosePredictTime;//[Offset: 0x1408, Size: 0x4]
	bool bServerTrustClientMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1411, Size: 0x1]
	MovementAntiDataAsset* MovementAntiDataAsset;//[Offset: 0x1414, Size: 0x4]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142c, Size: 0x1]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x1430, Size: 0x4]
	float ClientAdjustPassWallCheckDistance;//[Offset: 0x1440, Size: 0x4]
	ReconnectSyncData ReconnectSyncData;//[Offset: 0x1474, Size: 0x10]
	bool bOpenReconnectSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1484, Size: 0x1]
	float ReconnectCheckDistance;//[Offset: 0x1488, Size: 0x4]
	float ReconnectDistanceTolerance;//[Offset: 0x148c, Size: 0x4]
	float ReconnectCheckTime;//[Offset: 0x1490, Size: 0x4]
	int ReceivePacketFiveSecond;//[Offset: 0x14a4, Size: 0x4]
	int ServerAdjustCount;//[Offset: 0x14c4, Size: 0x4]
	Vector2D ServerCapsuleSize;//[Offset: 0x1578, Size: 0x8]
	float AISlidingMinSpeed;//[Offset: 0x1594, Size: 0x4]
	float AISlidingMaxSpeed;//[Offset: 0x1598, Size: 0x4]
	float AISlidingTime;//[Offset: 0x159c, Size: 0x4]
	AIPhySimuPoint[] AIPhysPointsSeq;//[Offset: 0x15a0, Size: 0xc]
	Vector2D AIClimbHelper;//[Offset: 0x15ac, Size: 0x8]
	int AIPhysPointIndex;//[Offset: 0x15b4, Size: 0x4]
	Vector NavLinkStartLocation;//[Offset: 0x15b8, Size: 0xc]
	Vector NavLinkEndLocation;//[Offset: 0x15c4, Size: 0xc]
	bool ClimbOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d0, Size: 0x1]
	float AIRemainDelta;//[Offset: 0x15d4, Size: 0x4]
	float MaxAIJumpZVelocity;//[Offset: 0x15d8, Size: 0x4]
	float AIClimbPawnRadiusScale;//[Offset: 0x15dc, Size: 0x4]
	float MaxAIJumpHeight;//[Offset: 0x15e0, Size: 0x4]
	float AIClimbVelocity;//[Offset: 0x15e4, Size: 0x4]
	float AIJumpVelocity;//[Offset: 0x15e8, Size: 0x4]
	void SyncLaunch(out const Vector InVelocity, bool bXYOverride, bool bZOverride, enum Action, Actor* Actor);// 0x24390f0
	void StopSlide();// 0x24382c0
	void StartMotionMovementByData(MotionWarpingDataAsset* InMotionMovementData);// 0x2439f3c
	void StartMotionMovement(int NewMotionMovementID);// 0x2439fb4
	void SetOpenSlideJump(bool bOpen);// 0x243a344
	void ServerUpdateSimulatedReport(int InSimulatedAdjustCount, int InSnapshotAvoidAdjustCount, int InSnapshotForceAdjustCount, int InSimulatedLongTimeCount, int InSimulatedLongTimeAdjustCount, int InSimulatedLongDistanceAdjustCount, int InSimulatedDynamicAdjustCount, int InSimulatedManyPacketCount, int InSimulatedLargeVelocityAdjustCount);// 0x24384b0
	void ServerSyncLaunchAck(int InClientLaunchAck);// 0x2438f24
	void ServerSyncLaunch(const Vector InVelocity, enum Action, Actor* Actor, double ClientTimeStamp);// 0x2438fa4
	void ServerStartMotionMovementNoBaseByData(const Vector StartLocation, const Rotator StartRotation, MotionWarpingDataAsset* InMotionMovementData, const Vector NewWarpingEndLocation, const Vector[] NewRuntimeWarpingPointLocationArrayEditor, const Vector[] NewRuntimeWarpingSocketArray);// 0x2439af4
	void ServerStartMotionMovementByData(PrimitiveComponent* Base, const Vector StartLocation, const Rotator StartRotation, MotionWarpingDataAsset* InMotionMovementData, const Vector NewWarpingEndLocation, const Vector[] NewRuntimeWarpingPointLocationArrayEditor, const Vector[] NewRuntimeWarpingSocketArray);// 0x2439cec
	void ServerSlidingToAir();// 0x243a0c4
	void ServerSlideFailProcess(float DeltaTime, int Iterations, enum EnterState);// 0x243a1e8
	void ServerSetAutoJumpClimb(bool bEnable);// 0x243bbf8
	void ServerReportClimb(int ClimbMultiJumpTimes, int ClimbMultiJumpCount);// 0x24387b4
	void ServerReportAutoRun(float AutoSprintDistance, float AutoSprintDTime);// 0x2438878
	void ServerPingClientSyncTimeStamp(float ServerTimeStamp, float ClientTimeStamp);// 0x243836c
	void ServerMoveWithoutRotation(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x243c5b8
	void ServerMoveTri(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float TimeStamp1, Vector_NetQuantize10 InAccel1, byte PendingFlags1, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x243c174
	void ServerMoveDualWithoutRotation(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x243c7f4
	void ServerMoveDualHybridRootMotionWithoutRotation(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x243cb40
	void ServerMove_ServerUseClientMove(float Timestamp, Vector_NetQuantize10 InVelocity, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x243ce8c
	void ServerLittleJumpNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x243b688
	void ServerLittleJump(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x243b750
	void ServerEnterOneKeyClimb(bool bNeedJump);// 0x243b2a4
	void ServerEnterHangingNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, Vector_NetQuantize100 InHangingPosition);// 0x243a754
	void ServerEnterHanging(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, Vector_NetQuantize100 InHangingPosition);// 0x243a86c
	void ServerEnterClimbOverNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, byte ClimbOverFrom);// 0x243ac20
	void ServerEnterClimbOver(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, byte ClimbOverFrom);// 0x243ad2c
	void ServerEnterClimbNoBase(Vector_NetQuantize100 RelativeLoc, uint16 ActorRotationYaw);// 0x243b04c
	void ServerEnterClimb(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, uint16 ActorRotationYaw);// 0x243b110
	void ServerEndMotionMovementNoBase(Vector NewLocation, Rotator NewRotation);// 0x24394f0
	void ServerEndMotionMovement(PrimitiveComponent* Base, Vector NewLocation, Rotator NewRotation);// 0x24395b8
	void ServerEnableCheckSliding(bool NewEnable);// 0x243a3dc
	void ServerClimbFailProcessNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x243ba28
	void ServerClimbFailProcess(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x243baf0
	void ServerClimbBigJump(const Vector WallNormal, const float VelFrac);// 0x243b3fc
	void ServerAddForce(const Vector Force, bool IsImpulse, bool StopMovementFirst, bool ImpulseRelToMass);// 0x243893c
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x243bfb8
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x243c0b8
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x243be34
	void OnRep_ServerControllerLost();// 0x2438764
	void OnRep_RepMotionMovementTime();// 0x24392f8
	void OnRep_RepMotionData();// 0x243930c
	void OnRep_NeedWaitLevelStreaming();// 0x2438358
	void OnRecoverOnServer();// 0x243878c
	void OnPreReconnectOnServer();// 0x24387a0
	void OnControllerLost();// 0x2438778
	bool IsUseSlidingButtonVeer();// 0x243a3c0
	bool IsSlideJumpMode();// 0x243a30c
	bool IsOpenSlideJump();// 0x243a328
	void FlushHitCD();// 0x24392a4
	void EnterOneKeyClimb();// 0x243b32c
	void EndMotionMovement();// 0x2439f28
	void EnableCheckSliding(bool NewEnable);// 0x243a464
	void ClinetAddForce(const Vector Force, bool IsImpulse, bool StopMovementFirst, bool ImpulseRelToMass);// 0x2438aa4
	void ClientSyncLaunch(int InClientLaunchAck, const Vector InVelocity, enum Action);// 0x2438e24
	void ClientPingClientSyncTimeStamp(float ServerTimeStamp);// 0x2438430
	void BrocastStartMotionMovementNoBaseByData(const Vector StartLocation, const Rotator StartRotation, MotionWarpingDataAsset* InMotionMovementData, const Vector NewWarpingEndLocation, const Vector[] NewRuntimeWarpingPointLocationArrayEditor, const Vector[] NewRuntimeWarpingSocketArray);// 0x24396c0
	void BrocastStartMotionMovementByData(PrimitiveComponent* Base, const Vector StartLocation, const Rotator StartRotation, MotionWarpingDataAsset* InMotionMovementData, const Vector NewWarpingEndLocation, const Vector[] NewRuntimeWarpingPointLocationArrayEditor, const Vector[] NewRuntimeWarpingSocketArray);// 0x24398b8
	void BrocastSlidingToAir();// 0x243a0a8
	void BrocastSlideFailProcess(float DeltaTime, int Iterations, enum EnterState);// 0x243a0e0
	void BrocastPadJump(Vector PushVelocity, bool XYOverride, bool ZOverride, float ContinueTime, bool bEnterRunaway);// 0x243bc80
	void BrocastLittleJumpNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x243b4b8
	void BrocastLittleJump(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x243b580
	void BrocastExitFlying();// 0x24392c0
	void BrocastEnterSlide();// 0x243a2f0
	void BrocastEnterOneKeyClimb(bool bNeedJump);// 0x243b21c
	void BrocastEnterHangingNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, Vector_NetQuantize100 InHangingPosition);// 0x243a4e4
	void BrocastEnterHanging(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, Vector_NetQuantize100 InHangingPosition);// 0x243a5fc
	void BrocastEnterFlying();// 0x24392dc
	void BrocastEnterClimbOverNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, byte ClimbOverFrom);// 0x243a9c4
	void BrocastEnterClimbOver(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 InClimbOverEndLocation, byte ClimbOverFrom);// 0x243aad0
	void BrocastEnterClimbNoBase(Vector_NetQuantize100 RelativeLoc, uint16 ActorRotationYaw);// 0x243ae7c
	void BrocastEnterClimb(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, uint16 ActorRotationYaw);// 0x243af40
	void BrocastEndMotionMovementNoBase(Vector NewLocation, Rotator NewRotation);// 0x2439320
	void BrocastEndMotionMovement(PrimitiveComponent* Base, Vector NewLocation, Rotator NewRotation);// 0x24393e8
	void BrocastClimbFailProcessNoBase(Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x243b858
	void BrocastClimbFailProcess(PrimitiveComponent* ClimbBase, Vector_NetQuantize100 RelativeLoc, Vector_NetQuantize100 CurrentVelocity);// 0x243b920
	void BrocastClimbBigJump(const Vector WallNormal, const float VelFrac);// 0x243b340
	void ApplyConsumeTimeStamp(float NewConsumeTimeStamp);// 0x243a02c
	void AIStartSliding(out const Vector InVelocity);// 0x24382d4
	void AddForceEx(out const Vector Force, bool IsImpulse, bool StopMovementFirst, bool ImpulseRelToMass, bool SentRPC, out const Vector Pos);// 0x2438c0c

--------------------------------
Class: MovementTagAttributeDataAsset.DataAsset.Object
	<FName,MovementTagAttribute> TagAttributeMap;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: MovementTagAttribute
	float ClimbNormalAngel;//[Offset: 0x0, Size: 0x4]
	float ClimbNormalZ;//[Offset: 0x4, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x8, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MotionWarpingDataAsset.MotionExtractorDataAsset.DataAsset.Object
	AnimMontage* FPPMotionMontage;//[Offset: 0x28, Size: 0x4]
	AnimMontage* TPPMotionMontage;//[Offset: 0x2c, Size: 0x4]
	byte MotionMovementWarpingType;//[Offset: 0x30, Size: 0x1]
	byte MotionMovementLocationProcessingType;//[Offset: 0x31, Size: 0x1]
	byte MotionMovementMode;//[Offset: 0x32, Size: 0x1]
	enum MovementNetMode;//[Offset: 0x33, Size: 0x1]
	enum SimulateMode;//[Offset: 0x34, Size: 0x1]
	float MotionMovementStepUpHeight;//[Offset: 0x38, Size: 0x4]
	bool EnableWarpingEndLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float[] MarkingWarpingPointTimeStampArrayEditor;//[Offset: 0x40, Size: 0xc]
	bool BForbiddenViewControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool EnableMotionMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	FString Desc;//[Offset: 0x50, Size: 0xc]
	bool bNoChangeMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: MotionExtractorDataAsset.DataAsset.Object
	CurveVector* MotionMovementCurve;//[Offset: 0x20, Size: 0x4]
	float EndRotationYaw;//[Offset: 0x24, Size: 0x4]
	void ImportCurve();// 0xfd338c
	void ExportCurve();// 0xfd338c

--------------------------------
Class: MovementCameraState
	float EnterVelocity;//[Offset: 0x0, Size: 0x4]
	float LeaveVelocity;//[Offset: 0x4, Size: 0x4]
	StateLerpArrayInfos EnterCameraState;//[Offset: 0x8, Size: 0x3c]
	StateLerpArrayInfos LeaveCameraState;//[Offset: 0x44, Size: 0x3c]

--------------------------------
Class: StateLerpArrayInfos
	<enum,StateLerpInfo> Infos;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: StateLerpInfo
	byte Priority;//[Offset: 0x0, Size: 0x1]
	enum ModifyType;//[Offset: 0x1, Size: 0x1]
	float DelayTime;//[Offset: 0x4, Size: 0x4]
	bool UseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector FPPTargetValue;//[Offset: 0xc, Size: 0xc]
	Vector TPPTargetValue;//[Offset: 0x18, Size: 0xc]
	float LerpTime;//[Offset: 0x24, Size: 0x4]
	CurveVector* LerpCurve;//[Offset: 0x28, Size: 0x4]
	Vector CurveScale;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: MovementStiffCurveDataAsset.DataAsset.Object
	<enum,CurveFloat*> StiffCurveTable;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: MovementLandingHardDataAsset.DataAsset.Object
	<enum,float> LandingHardTable;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: HitEffectDataAsset.DataAsset.Object
	ParticleSystem* DefaultFX;//[Offset: 0x20, Size: 0x4]
	ParticleSystem* ConcreteFX;//[Offset: 0x24, Size: 0x4]
	ParticleSystem* DirtFX;//[Offset: 0x28, Size: 0x4]
	ParticleSystem* WaterFX;//[Offset: 0x2c, Size: 0x4]
	ParticleSystem* MetalFX;//[Offset: 0x30, Size: 0x4]
	ParticleSystem* WoodFX;//[Offset: 0x34, Size: 0x4]
	ParticleSystem* GlassFX;//[Offset: 0x38, Size: 0x4]
	ParticleSystem* GrassFX;//[Offset: 0x3c, Size: 0x4]
	ParticleSystem* FleshFX;//[Offset: 0x40, Size: 0x4]
	ParticleSystem* FleshFX1V3;//[Offset: 0x44, Size: 0x4]
	ParticleSystem* FleshFX3V1;//[Offset: 0x48, Size: 0x4]
	ParticleSystem* FleshFX3V3;//[Offset: 0x4c, Size: 0x4]
	ParticleSystem* AutonomousFleshFX;//[Offset: 0x50, Size: 0x4]
	ParticleSystem* SteelFX;//[Offset: 0x54, Size: 0x4]
	ParticleSystem* SandbagFX;//[Offset: 0x58, Size: 0x4]
	ParticleSystem* SandFX;//[Offset: 0x5c, Size: 0x4]
	ParticleSystem* ClothFX;//[Offset: 0x60, Size: 0x4]
	ParticleSystem* PlasticFX;//[Offset: 0x64, Size: 0x4]
	ParticleSystem* LeatherFX;//[Offset: 0x68, Size: 0x4]
	ParticleSystem* CeramicsFX;//[Offset: 0x6c, Size: 0x4]
	ParticleSystem* PaperFX;//[Offset: 0x70, Size: 0x4]
	ParticleSystem* StoneFX;//[Offset: 0x74, Size: 0x4]
	ParticleSystem* SnowFX;//[Offset: 0x78, Size: 0x4]
	ParticleSystem* PopCanFX;//[Offset: 0x7c, Size: 0x4]
	ParticleSystem* PyreflyFX;//[Offset: 0x80, Size: 0x4]
	ParticleSystem* LeafFX;//[Offset: 0x84, Size: 0x4]
	ParticleSystem* CarFX;//[Offset: 0x88, Size: 0x4]
	ParticleSystem* AsphaltFX;//[Offset: 0x8c, Size: 0x4]
	ParticleSystem* IceFX;//[Offset: 0x90, Size: 0x4]
	ParticleSystem* ShieldFX;//[Offset: 0x94, Size: 0x4]
	ParticleSystem* HitShieldFX1V3;//[Offset: 0x98, Size: 0x4]
	ParticleSystem* HitShieldFX3V1;//[Offset: 0x9c, Size: 0x4]
	ParticleSystem* HitShieldFX3V3;//[Offset: 0xa0, Size: 0x4]
	ParticleSystem* EnemyEnergyShieldFX;//[Offset: 0xa4, Size: 0x4]
	ParticleSystem* TeammateEnergyShieldFX;//[Offset: 0xa8, Size: 0x4]
	FName ShieldColorName;//[Offset: 0xac, Size: 0x8]
	ParticleSystem* BreakShieldFX;//[Offset: 0xb4, Size: 0x4]
	ParticleSystem* BreakShieldFX1V3;//[Offset: 0xb8, Size: 0x4]
	ParticleSystem* BreakShieldFX3V1;//[Offset: 0xbc, Size: 0x4]
	ParticleSystem* BreakShieldFX3V3;//[Offset: 0xc0, Size: 0x4]
	ParticleSystem* FatalHealthFX;//[Offset: 0xc4, Size: 0x4]
	ParticleSystem* FatalHealthFX1V3;//[Offset: 0xc8, Size: 0x4]
	ParticleSystem* FatalHealthFX3V1;//[Offset: 0xcc, Size: 0x4]
	ParticleSystem* FatalHealthFX3V3;//[Offset: 0xd0, Size: 0x4]
	ParticleSystem* ArmorFX;//[Offset: 0xd4, Size: 0x4]
	ParticleSystem* TargetFX;//[Offset: 0xd8, Size: 0x4]
	ParticleSystem* MetalNoDecalFX;//[Offset: 0xdc, Size: 0x4]
	ParticleSystem* DefaultTeammateFleshFX;//[Offset: 0xe0, Size: 0x4]
	ParticleSystem* DefaultTeammateShieldFX;//[Offset: 0xe4, Size: 0x4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0xec, Size: 0x3c]
	AkAudioEvent* HitWorldSound;//[Offset: 0x128, Size: 0x4]
	AkAudioEvent* HitTeammateSound;//[Offset: 0x12c, Size: 0x4]
	AkAudioEvent* HitBeepSound;//[Offset: 0x130, Size: 0x4]
	AkAudioEvent* DefaultSound3V1;//[Offset: 0x134, Size: 0x4]
	AkAudioEvent* HitShieldSound3V1;//[Offset: 0x138, Size: 0x4]
	AkAudioEvent* BreakShieldSound3V1;//[Offset: 0x13c, Size: 0x4]
	AkAudioEvent* HeadShotSound3V1;//[Offset: 0x140, Size: 0x4]
	AkAudioEvent* HeadShotFatalSound3V1;//[Offset: 0x144, Size: 0x4]
	AkAudioEvent* KnockDownShieldSound3V1;//[Offset: 0x148, Size: 0x4]
	AkAudioEvent* FatalHealthSound3V1;//[Offset: 0x14c, Size: 0x4]
	AkAudioEvent* DefaultSound1V3;//[Offset: 0x150, Size: 0x4]
	AkAudioEvent* HitShieldSound1V3;//[Offset: 0x154, Size: 0x4]
	AkAudioEvent* BreakShieldSound1V3;//[Offset: 0x158, Size: 0x4]
	AkAudioEvent* HeadShotSound1V3;//[Offset: 0x15c, Size: 0x4]
	AkAudioEvent* HeadShotFatalSound1V3;//[Offset: 0x160, Size: 0x4]
	AkAudioEvent* FatalHealthSound1V3;//[Offset: 0x164, Size: 0x4]
	AkAudioEvent* KnockDownShieldSound1V3;//[Offset: 0x168, Size: 0x4]
	AkAudioEvent* DefaultSound3V3;//[Offset: 0x16c, Size: 0x4]
	AkAudioEvent* HitShieldSound3V3;//[Offset: 0x170, Size: 0x4]
	AkAudioEvent* BreakShieldSound3V3;//[Offset: 0x174, Size: 0x4]
	AkAudioEvent* HeadShotSound3V3;//[Offset: 0x178, Size: 0x4]
	AkAudioEvent* HeadShotFatalSound3V3;//[Offset: 0x17c, Size: 0x4]
	AkAudioEvent* FatalHealthSound3V3;//[Offset: 0x180, Size: 0x4]
	AkAudioEvent* KnockDownShieldSound3V3;//[Offset: 0x184, Size: 0x4]
	AkAudioEvent* BulletFlySound;//[Offset: 0x188, Size: 0x4]
	AkAudioEvent* ChargeRifleFinalHit;//[Offset: 0x18c, Size: 0x4]
	DecalData DefaultDecal;//[Offset: 0x190, Size: 0x20]
	DecalData ConcreteDecal;//[Offset: 0x1b0, Size: 0x20]
	DecalData DirtDecal;//[Offset: 0x1d0, Size: 0x20]
	DecalData WaterDecal;//[Offset: 0x1f0, Size: 0x20]
	DecalData MetalDecal;//[Offset: 0x210, Size: 0x20]
	DecalData WoodDecal;//[Offset: 0x230, Size: 0x20]
	DecalData GrassDecal;//[Offset: 0x250, Size: 0x20]
	DecalData GlassDecal;//[Offset: 0x270, Size: 0x20]
	DecalData FleshDecal;//[Offset: 0x290, Size: 0x20]
	DecalData FleshDecalAutomonous;//[Offset: 0x2b0, Size: 0x20]
	DecalData TeammateDecal;//[Offset: 0x2d0, Size: 0x20]
	DecalData SteelDecal;//[Offset: 0x2f0, Size: 0x20]
	DecalData SandbagDecal;//[Offset: 0x310, Size: 0x20]
	DecalData SandDecal;//[Offset: 0x330, Size: 0x20]
	DecalData ClothDecal;//[Offset: 0x350, Size: 0x20]
	DecalData PlasticDecal;//[Offset: 0x370, Size: 0x20]
	DecalData LeatherDecal;//[Offset: 0x390, Size: 0x20]
	DecalData CeramicsDecal;//[Offset: 0x3b0, Size: 0x20]
	DecalData PaperDecal;//[Offset: 0x3d0, Size: 0x20]
	DecalData StoneDecal;//[Offset: 0x3f0, Size: 0x20]
	DecalData SnowDecal;//[Offset: 0x410, Size: 0x20]
	DecalData PopCanDecal;//[Offset: 0x430, Size: 0x20]
	DecalData PyreflyDecal;//[Offset: 0x450, Size: 0x20]
	DecalData LeafDecal;//[Offset: 0x470, Size: 0x20]
	DecalData CarDecal;//[Offset: 0x490, Size: 0x20]
	DecalData AsphaltDecal;//[Offset: 0x4b0, Size: 0x20]
	DecalData IceDecal;//[Offset: 0x4d0, Size: 0x20]
	DecalData ShieldDecal;//[Offset: 0x4f0, Size: 0x20]
	DecalData ArmorDecal;//[Offset: 0x510, Size: 0x20]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 0x4]
	float LifeSpan;//[Offset: 0x4, Size: 0x4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 0x4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 0x4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 0x4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 0x4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 0x4]
	float DecalFadeScreenSize;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: RepMotionData
	bool bUseMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	PrimitiveComponent* Base;//[Offset: 0x4, Size: 0x4]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Rotator StartRotation;//[Offset: 0x14, Size: 0xc]
	Vector WarpingEndLocation;//[Offset: 0x20, Size: 0xc]
	Vector[] RuntimeWarpingPointLocationArrayEditor;//[Offset: 0x2c, Size: 0xc]
	Vector[] RuntimeWarpingSocketArray;//[Offset: 0x38, Size: 0xc]
	MotionWarpingDataAsset* MotionMovementAsset;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: SurfaceFloatDataAsset.DataAsset.Object
	<byte,float> SurfaceTable;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: MovementAntiDataAsset.DataAsset.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bPassWallSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	int MaxTotalPassWallTimes;//[Offset: 0x24, Size: 0x4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0x28, Size: 0x4]
	bool SimpleMoveSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	float NormalWalkingSpeed;//[Offset: 0x30, Size: 0x4]
	float WholeWalkingSpeed;//[Offset: 0x34, Size: 0x4]
	float NormalSlidingSpeed;//[Offset: 0x38, Size: 0x4]
	float WholeSlidingSpeed;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* MovePunishInterval;//[Offset: 0x40, Size: 0x4]
	CurveFloat* MoveCheckInterval;//[Offset: 0x44, Size: 0x4]
	CurveFloat* TolerateDistanceFactor;//[Offset: 0x48, Size: 0x4]
	CurveFloat* PunishTime;//[Offset: 0x4c, Size: 0x4]
	bool ZMoveSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	CurveFloat* JumpTolerateFactor;//[Offset: 0x54, Size: 0x4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool FallingCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bIsForceAdjustZWhenFallingCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	float FallingCheckInterval;//[Offset: 0x5c, Size: 0x4]
	float FallingCheckDistance;//[Offset: 0x60, Size: 0x4]
	float FallingCheckTolerateFactor;//[Offset: 0x64, Size: 0x4]
	bool TimeSpeedCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float TimeSpeedCheckInterval;//[Offset: 0x6c, Size: 0x4]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x70, Size: 0x4]
	CurveFloat* DecideTimeSpeedGearToTimes;//[Offset: 0x74, Size: 0x4]
	float DefaultMaxDeltaTime;//[Offset: 0x78, Size: 0x4]
	float TimeSpeedMaxClientDeltaTime;//[Offset: 0x7c, Size: 0x4]
	int TimeSpeedFilterTimes;//[Offset: 0x80, Size: 0x4]
	bool LaunchCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	float LaunchCheckInterval;//[Offset: 0x88, Size: 0x4]
	int MaxLaunchCount;//[Offset: 0x8c, Size: 0x4]
	int MaxCheatLaunchCount;//[Offset: 0x90, Size: 0x4]
	float MaxLaunchCheatSpeed;//[Offset: 0x94, Size: 0x4]
	bool ClientPacketTimeOutCheckSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bLogClientPacketTimeOutCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	float ClientPacketTimeOut;//[Offset: 0x9c, Size: 0x4]
	bool PowerSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bPowerPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float PowerPunishTime;//[Offset: 0xa4, Size: 0x4]
	float PowerPunishInterval;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ReconnectSyncData
	bool bNeedWaitLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector_NetQuantize100 ServerLineTraceLocation;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: AIPhySimuPoint

--------------------------------
Class: ApexBuffSystemComponent.ActorComponent.Object
	BuffInstancedItem*[] AllBuffs;//[Offset: 0xac, Size: 0xc]
	Actor* PawnOwner;//[Offset: 0xb8, Size: 0x8]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float RepDelayIgnoreTime;//[Offset: 0xf0, Size: 0x4]
	BuffStructure MainBuffStructure;//[Offset: 0x108, Size: 0x18]
	BuffStructure LocalBuffStructure;//[Offset: 0x120, Size: 0x18]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x240f650
	void ResetBuff();// 0x240fa38
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0x240fba4
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor, bool bForceRemoveAll);// 0x240ff8c
	void OnRep_MainBuffStructure();// 0x240f524
	bool IsBufferMutexed(FName NewBuffName);// 0x24104c4
	void InitModifier(Actor* TempPawn);// 0x24108fc
	bool HasMoreThanOneBuff(FName BuffName);// 0x240fa4c
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x240fad0
	FName GetBuffName(int BuffID);// 0x24107f0
	int GetBuffID(FName BuffName);// 0x2410878
	float GetBuffExpiry(FName BuffName);// 0x240f5cc
	ApexBuff* GetBuffByName(FName BuffName);// 0x240f8b4
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* CauserActor);// 0x240fe6c
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x2410368
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* CauserActor);// 0x240fd4c
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x241020c
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x2410140
	void ClearDeBuff(bool ForceCleanUp);// 0x240f938
	void ClearBuff(bool ForceCleanUp);// 0x240f9b8
	bool CheckBuffStatus(class ApexBuffStatusType Status);// 0x240f54c
	void CameraModeSwitchCallback();// 0x240f538
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x240f7e8
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x240f71c
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x2410548
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x2410698

--------------------------------
Class: BuffInstancedItem.Object
	int BuffID;//[Offset: 0x1c, Size: 0x4]
	ApexBuff* Buff;//[Offset: 0x20, Size: 0x8]
	int LayerCount;//[Offset: 0x28, Size: 0x4]
	Controller* CauserPawnController;//[Offset: 0x2c, Size: 0x4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float Expiry;//[Offset: 0x34, Size: 0x4]
	Actor* Target;//[Offset: 0x38, Size: 0x4]
	int BuffIndex;//[Offset: 0x3c, Size: 0x4]
	Actor* CauserPawnActor;//[Offset: 0x40, Size: 0x4]
	Actor*[] AttackerStack;//[Offset: 0x44, Size: 0xc]
	bool bPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool[] BuffActionHadDoList;//[Offset: 0x54, Size: 0xc]
	bool[] EventBuffActionHadDoList;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: ApexBuff.Object
	FName BuffName;//[Offset: 0x20, Size: 0x8]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bAddAttackerStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	int LayerMax;//[Offset: 0x30, Size: 0x4]
	int InitialLayerCount;//[Offset: 0x34, Size: 0x4]
	float ValidityTime;//[Offset: 0x38, Size: 0x4]
	ApexBuffCondition*[] BuffConditions;//[Offset: 0x3c, Size: 0xc]
	StatusChange[] StatusChanges;//[Offset: 0x48, Size: 0xc]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bCheckConsistency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	byte SimulateAddBuffRole;//[Offset: 0x57, Size: 0x1]
	enum ViewTargetAddBuffRole;//[Offset: 0x58, Size: 0x1]
	FName[] MutexBuffers;//[Offset: 0x5c, Size: 0xc]
	BuffActionItem[] BuffActions;//[Offset: 0x68, Size: 0xc]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0x74, Size: 0xc]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x84, Size: 0x3c]
	int InstancedNodesTotalSize;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: ApexBuffCondition.ApexBuffAction.ActorComponent.Object
	bool IsOK(ActorComponent* BuffManagerComponent);// 0x240cfe4

--------------------------------
Class: ApexBuffAction.ActorComponent.Object
	BuffInstancedItem* OwnerBuffInstancePtr;//[Offset: 0xac, Size: 0x4]
	Actor* BuffTargetActor;//[Offset: 0xb0, Size: 0x4]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0xb4, Size: 0x4]
	bool OnlyPlayOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool StopActionWhenBuffAllRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool OnlyActiveForPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	byte ActionActiveType;//[Offset: 0xbb, Size: 0x1]
	enum[] LegendTypeList;//[Offset: 0xbc, Size: 0xc]
	bool IsBlueprintAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void UpdateActionBP(float DeltaSeconds);// 0x2405170
	void UpdateAction_Internal(float DeltaSeconds);// 0xf4bebc
	void UndoActionBP();// 0x24051f0
	void UndoAction_Internal();// 0x24052d8
	bool RealDoActionBP();// 0x240520c
	bool RealDoAction_Internal();// 0x24052f4
	void OnLayerDeattached(int Layer);// 0x2405258
	void OnLayerAttached(int Layer);// 0xf4bf3c
	ApexBuffSystemComponent* GetOwnerBuffSystem();// 0x2405324
	BuffInstancedItem* GetOwnerBuffInstance();// 0x2405374
	ApexBuff* GetOwnerBuff();// 0x240534c
	void CameraModeChangedEventBP();// 0x2405154
	void CameraModeChangedEvent_Internal();// 0x240523c

--------------------------------
Class: StatusChange
	class ApexBuffStatusType* StatusName;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ApexBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	ApexBuffAction* BuffAction;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BuffEventActionItem
	ApexBuffEventType* EventType;//[Offset: 0x0, Size: 0x4]
	ApexBuffAction* BuffEventAction;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ApexBuffEventType.Object

--------------------------------
Class: BuffStructure
	double ModifyTime;//[Offset: 0x0, Size: 0x8]
	BuffLayer[] InfoList;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: BuffLayer
	FName BuffName;//[Offset: 0x0, Size: 0x8]
	BuffInnerInfo[] InfoList;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: BuffInnerInfo
	Controller* BuffCauser;//[Offset: 0x0, Size: 0x8]
	Actor* CauserActor;//[Offset: 0x8, Size: 0x8]
	int TeamID;//[Offset: 0x10, Size: 0x4]
	int CampID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	ParachuteStartInfo ParachuteStartInfo;//[Offset: 0xd4, Size: 0x2]
	ApexCharacterBase*[] ParachuteTeamCharacterBases;//[Offset: 0xd8, Size: 0xc]
	float ServerPredictPercent;//[Offset: 0x110, Size: 0x4]
	byte CurParachuteState;//[Offset: 0x114, Size: 0x1]
	FString LastParachuteTriggerObjectIDName;//[Offset: 0x118, Size: 0xc]
	bool IsShowRespawnTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	ParachuteInputInfo ReplicatedParachuteInputInfo;//[Offset: 0x128, Size: 0xc]
	ReplicatedMoveState ReplicatedMoveState;//[Offset: 0x140, Size: 0x2c]
	float MoveForwardInputValue;//[Offset: 0x170, Size: 0x4]
	float MoveRightInputValue;//[Offset: 0x174, Size: 0x4]
	ParachuteOverrideConfig CurParachuteConf;//[Offset: 0x178, Size: 0xc]
	ParachuteAttachmentInfo ParachuteAttachmentInfo;//[Offset: 0x188, Size: 0x8]
	Actor*[] TempFollowers;//[Offset: 0x190, Size: 0xc]
	ParticleEffectSetCfg CurActiveParachuteEffectIDSet;//[Offset: 0x19c, Size: 0x3c]
	int JumpTailID;//[Offset: 0x20c, Size: 0x4]
	int[] JumpExpressionID;//[Offset: 0x210, Size: 0xc]
	int UseExpressionID;//[Offset: 0x21c, Size: 0x4]
	delegate EventOnChangeParachuteState;//[Offset: 0x228, Size: 0xc]
	bool bUseDRSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float DRLerpTime;//[Offset: 0x290, Size: 0x4]
	float DRSimulateTime;//[Offset: 0x294, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x298, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x29c, Size: 0x4]
	float MaxSmoothNetUpdateDist;//[Offset: 0x2a0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2a4, Size: 0x4]
	void UpdateParachuteTransform(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x256b8b0
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput);// 0x256c1b0
	void SwitchCommanderAtDS();// 0x256bae4
	void StopDoExpressionDelay(float DelayTime);// 0x256ace8
	void StopDoExpression();// 0x256acd4
	void SetSingleParachuteStatusAtDS(bool NewSingleParachuteStatus);// 0x256bc08
	void SetParachuteState(enum NewState);// 0x256b3b0
	void SetParachuteCorrectedLocAndQuat(Vector NewLoc, Rotator NewQuat);// 0x256b4a4
	void ServerUpdateParachuteInputInfo(float InThrottleInput, float InSteeringInput, byte State);// 0x256b7a8
	void ServerStopParachute(Vector ClientLandLocation);// 0x256bddc
	void ServerStartParachute(enum TriggerReason, ApexCharacterBase* LeaderCharacter, byte ParachuteIndex);// 0x256be54
	void ServerSetSingleParachuteStatus(bool NewSingleParachuteStatus);// 0x256bb80
	void ServerReportParachuteSecurityData(SecJumpFlow ClientJumpFlow);// 0x256aecc
	void ServerDoExpression(int ID);// 0x2405170
	void Server_OverrideParachuteConfig(ParachuteOverrideConfig Conf);// 0x256b140
	void SendClientMoveToServerUnreliaby(float Timestamp, const Vector Position, const Vector WorldVelocity);// 0x256b6b0
	void ResetParachuteDataRecord();// 0x256b428
	void ResetClientPositionOnParachute(Vector NewLocation);// 0x256b638
	void ReqSwitchParachuteCommander(const Object* WorldContext);// 0x143834c
	void ReqLeaveParachuteTeam(const Object* WorldContext);// 0x256ba74
	void ReqJoinParachuteTeam(const Object* WorldContext);// 0x256ba04
	void ReportParachuteFlowData();// 0x256b010
	void ReportParachuteData();// 0x256b024
	void PostParachute();// 0x256bdc8
	void OverrideParachuteConfig(ParachuteOverrideConfig Conf);// 0x256b268
	void OnRep_UseExpressionID();// 0x256ad98
	void OnRep_ReplicatedParachuteInfo();// 0xfd338c
	void OnRep_ReplicatedMoveState();// 0x256b5ac
	void OnRep_ParachuteState(byte LastState);// 0x256b5c0
	void OnRep_ParachuteStartInfo();// 0x256bf5c
	void OnRep_FollowerInfo();// 0x256b12c
	void OnParachuteStateChanged(enum LastState, enum NewState);// 0x256b2f4
	void LookAtTargetPoint(Vector TargetPoint);// 0x256b04c
	bool IsParachuting();// 0x256bf70
	bool IsParachuteExpression();// 0x256ad60
	bool IsLocalPlayerIsSingleParachute(const Object* WorldContext);// 0x256bcd8
	bool IsLocalPlayerIsCommander(const Object* WorldContext);// 0x256bd50
	Vector2D GetSpeedRange();// 0x256b43c
	Vector GetParachuteWorldVelocity();// 0x256b564
	float GetParachuteSpeedLength();// 0x256b47c
	enum GetCurrentParachuteReason();// 0x256bf98
	void EndAutoParachute();// 0x256b038
	bool EnableSwitchSingleParachuteStatus(bool NewSingleParachuteStatus);// 0x256baf8
	void ClientMulticastStartParachuteEmote(int EmoteID);// 0x23f62a4
	void Client_OverrideParachuteConfig(ParachuteOverrideConfig Conf);// 0x256b1d4
	void ChangeParachuteStateDelegate__DelegateSignature(CharacterParachuteComponent* InComp);// 0x2ce6f18
	bool CanUseJumpEmoteWithID(int InJumpTailID);// 0x256adac
	bool CanUseJumpEmote();// 0x256ae2c
	bool CanReJoinParachuteTeam();// 0x256bcb0
	bool CanLocalCharacterUseJumpEmote(const Object* WorldContext);// 0x256ae54
	bool CanLeaveParachuteTeam();// 0x256bc88
	void BeginAutoParachute(Vector TargetPoint);// 0x256b0bc
	void ApplyParachuteCompData(CharacterParachuteComponent* Other);// 0x256c2b0
	void ApexStopParachute(ApexCharacterBase* TargetCharacter);// 0x256bfb4
	void ApexStartParachute(ApexCharacterBase* TargetCharacter, enum TriggerReason, ApexCharacterBase* LeaderCharacter, byte ParachuteIndex, bool IsForceJump);// 0x256c024

--------------------------------
Class: SecJumpFlow.SecBasic
	int GameStartTime;//[Offset: 0x30, Size: 0x4]
	int StartJumpTime;//[Offset: 0x34, Size: 0x4]
	int EndJumpTime;//[Offset: 0x38, Size: 0x4]
	int PlayerJumpTime;//[Offset: 0x3c, Size: 0x4]
	int PlayerLandTime;//[Offset: 0x40, Size: 0x4]
	int PlayerSpeedMax1;//[Offset: 0x44, Size: 0x4]
	int PlayerSpeedMax2;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SecBasic
	FString dtEventTime;//[Offset: 0x0, Size: 0xc]
	FString SecReportData;//[Offset: 0xc, Size: 0xc]
	FString RoleID;//[Offset: 0x18, Size: 0xc]
	FString ClientStartTime;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: ParachuteOverrideConfig
	bool bForceHorizontalRotationAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ParachuteNoControlTimeSinceStart;//[Offset: 0x4, Size: 0x4]
	float InitSpeedLength;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParachuteStartInfo
	bool bIsStartOrStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	enum ParachuteReason;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ParachuteInputInfo
	float ThrottleInput;//[Offset: 0x0, Size: 0x4]
	float SteerInput;//[Offset: 0x4, Size: 0x4]
	byte ParachuteState;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ReplicatedMoveState
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector WorldVelocity;//[Offset: 0x18, Size: 0xc]
	float SpeedLength;//[Offset: 0x24, Size: 0x4]
	float SimulateServerTimeStamp;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParachuteAttachmentInfo
	ApexCharacterBase* AttachedParent;//[Offset: 0x0, Size: 0x4]
	int8 ParachuteTeamIndex;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ParticleEffectSetCfg
	<enum,ParticleSystem*> ParachuteEffects;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	UnmannedBody* UnmanedBase;//[Offset: 0x8f8, Size: 0x4]
	CharacterConfigDataAsset* ConfigData;//[Offset: 0x900, Size: 0x4]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x920, Size: 0xc]
	GameInitControllerComponent* GameInitController;//[Offset: 0x92c, Size: 0x4]
	SoftObjectPath InitDataAsset;//[Offset: 0x930, Size: 0x14]
	CharacterComponentCreateData[] ComponentCreateDatas;//[Offset: 0x950, Size: 0xc]
	delegate OnDamageByMissileFragGrenaedeDelegate;//[Offset: 0x95c, Size: 0xc]
	delegate EnterRescueDelegate;//[Offset: 0x968, Size: 0xc]
	delegate LeaveRescueDelegate;//[Offset: 0x974, Size: 0xc]
	FName EmojiAnimationID;//[Offset: 0x994, Size: 0x8]
	bool bForbidEmojiAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 0x1]
	float RealtimeForbidEmojiAnimationTime;//[Offset: 0x9a0, Size: 0x4]
	AnimMontage* CurrentAutonomousActiveMontage;//[Offset: 0x9b4, Size: 0x4]
	int CareerNumberTips;//[Offset: 0x9b8, Size: 0x4]
	bool bReSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc, Size: 0x1]
	int ReSpawnNumber;//[Offset: 0x9c0, Size: 0x4]
	int SkillBpKey;//[Offset: 0x9c4, Size: 0x4]
	GameModeReSpawn* ServerReSpawnCompoent;//[Offset: 0x9c8, Size: 0x4]
	int PawnBackpackCapacity;//[Offset: 0x9cc, Size: 0x4]
	float HeadDamageReduce;//[Offset: 0x9d0, Size: 0x4]
	float ShieldValue;//[Offset: 0x9d4, Size: 0x4]
	float ShieldValueMax;//[Offset: 0x9d8, Size: 0x4]
	int ShieldLevel;//[Offset: 0x9dc, Size: 0x4]
	int HelmetLevel;//[Offset: 0x9e0, Size: 0x4]
	int KnockDownShieldLevel;//[Offset: 0x9e4, Size: 0x4]
	int BackpackLevel;//[Offset: 0x9e8, Size: 0x4]
	float TreatmentMul;//[Offset: 0x9ec, Size: 0x4]
	float DefaultCapsuleRadius;//[Offset: 0x9f0, Size: 0x4]
	float DyingCapsuleRadius;//[Offset: 0x9f4, Size: 0x4]
	float ProjectAntiCheatSpeedRatio;//[Offset: 0x9f8, Size: 0x4]
	<enum,StateLerpArrayInfos> StateInLerpInfo;//[Offset: 0x9fc, Size: 0x3c]
	<enum,StateLerpArrayInfos> StateOutLerpInfo;//[Offset: 0xa38, Size: 0x3c]
	SceneComponent* TPPComponentContainer;//[Offset: 0xaa0, Size: 0x4]
	bool bFaceRotationLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 0x1]
	float FaceRotationLerpSpeed;//[Offset: 0xac4, Size: 0x4]
	float DeathFadeOutTotalDeltaTime;//[Offset: 0xad4, Size: 0x4]
	bool bOnDeathFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 0x1]
	MaterialInstanceDynamic* DeathMatInstDynamicWeak;//[Offset: 0xadc, Size: 0x8]
	float OffScreenDist;//[Offset: 0xae4, Size: 0x4]
	float TickOptimizeDist;//[Offset: 0xae8, Size: 0x4]
	bool bOffScreenOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 0x1]
	bool bSniperAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaed, Size: 0x1]
	RepBloodHoundHunting BloodHoundHunting;//[Offset: 0xaf0, Size: 0x10]
	float BloodHoundHuntingFOVFadeTime;//[Offset: 0xb00, Size: 0x4]
	float BloodHoundHuntingProlongTime;//[Offset: 0xb04, Size: 0x4]
	bool BloodHoundDetectDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb08, Size: 0x1]
	int HuntLegendID;//[Offset: 0xb48, Size: 0x4]
	ApexCharacterAnimationComponent* AnimationComponent;//[Offset: 0xb58, Size: 0x4]
	CameraComponent* MainCamera;//[Offset: 0xb5c, Size: 0x4]
	UAECharacterAnimListComponent* AnimationListComponent;//[Offset: 0xb60, Size: 0x4]
	UAECharacterAnimListComponent* WeaponAnimationListComponent;//[Offset: 0xb64, Size: 0x4]
	byte RemoteViewYaw;//[Offset: 0xcb0, Size: 0x1]
	SkeletalMeshComponent* FPPMeshComp;//[Offset: 0xcb4, Size: 0x4]
	bool CharacterCameraModeIsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcfc, Size: 0x1]
	enum CharacterMeshMode;//[Offset: 0xcfd, Size: 0x1]
	bool ServerCharacterCameraModeIsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcfe, Size: 0x1]
	PickupTipActor* PickupTipActor;//[Offset: 0xd00, Size: 0x4]
	PickupTipInfo PickupTipInfo;//[Offset: 0xd04, Size: 0xc]
	EnmityEntity* EnmityEntity;//[Offset: 0xd10, Size: 0x4]
	RecoverPropComponent* RecoverPropComponent;//[Offset: 0xd14, Size: 0x4]
	ActionFilterComponent* ActionFilterComponent;//[Offset: 0xd18, Size: 0x4]
	int InsideHeatShield;//[Offset: 0xd34, Size: 0x4]
	Actor* CurrentInsideHeatShieldWeak;//[Offset: 0xd38, Size: 0x8]
	float CheckInsideHeatShieldTime;//[Offset: 0xd40, Size: 0x4]
	delegate BattleStateChangedEvent;//[Offset: 0xd44, Size: 0xc]
	Vector FindAITargetLoc;//[Offset: 0xd68, Size: 0xc]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd74, Size: 0x1]
	bool bIsMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd75, Size: 0x1]
	bool bIsDecoy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd76, Size: 0x1]
	FName HeadBoneName;//[Offset: 0xd7c, Size: 0x8]
	float NameHightOffset;//[Offset: 0xd84, Size: 0x4]
	delegate OnCharacterByDamageCauser;//[Offset: 0xd8c, Size: 0xc]
	delegate OnCharacterEnterLootZone;//[Offset: 0xd98, Size: 0xc]
	delegate OnCharacterLeaveLootZone;//[Offset: 0xda4, Size: 0xc]
	delegate OnOpenBinTest;//[Offset: 0xdb0, Size: 0xc]
	delegate OnOpenCarePackage;//[Offset: 0xdbc, Size: 0xc]
	delegate OnJumpTrain;//[Offset: 0xdc8, Size: 0xc]
	delegate OnSkillEvent;//[Offset: 0xdd4, Size: 0xc]
	delegate OnCharacterDying;//[Offset: 0xe08, Size: 0xc]
	delegate OnCharacterRescue;//[Offset: 0xe14, Size: 0xc]
	delegate OnCharacterBeRescue;//[Offset: 0xe20, Size: 0xc]
	delegate OnCharacterRescueFinished;//[Offset: 0xe2c, Size: 0xc]
	delegate OnBeaconRescueStart;//[Offset: 0xe38, Size: 0xc]
	delegate OnBeaconRescueEnd;//[Offset: 0xe44, Size: 0xc]
	byte CurrentAnimRescueType;//[Offset: 0xe50, Size: 0x1]
	delegate OnHealthShieldChangedWithoutMidRecommandDelegate;//[Offset: 0xe54, Size: 0xc]
	FSM* FSMConfig;//[Offset: 0xe7c, Size: 0x4]
	float AtkOwnMemoryTime;//[Offset: 0xe80, Size: 0x4]
	UAECharacterAnimListComponent* _characterAnimationListComponent;//[Offset: 0xec0, Size: 0x4]
	PawnStateManager* StateManagerComponent;//[Offset: 0xec4, Size: 0x4]
	CharacterInputComponent* CharacterInputComponent;//[Offset: 0xec8, Size: 0x4]
	FName CurrentSkinId;//[Offset: 0xecc, Size: 0x8]
	enum FireMode;//[Offset: 0xed4, Size: 0x1]
	AuraComponent* AuraComponent;//[Offset: 0xed8, Size: 0x4]
	FString MyName;//[Offset: 0xedc, Size: 0xc]
	FString OtherName;//[Offset: 0xee8, Size: 0xc]
	LevelSequence* FatalitySequence;//[Offset: 0xef4, Size: 0x4]
	MovieSceneSequencePlaybackSettings FatalitySettings;//[Offset: 0xef8, Size: 0x24]
	LevelSequence* DeathSequence;//[Offset: 0xf1c, Size: 0x4]
	MovieSceneSequencePlaybackSettings DeathSettings;//[Offset: 0xf20, Size: 0x24]
	UAESkillManagerComponent* SkillManagerComponent;//[Offset: 0xf44, Size: 0x4]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xf68, Size: 0xc]
	delegate OnDeathEvent;//[Offset: 0xf74, Size: 0xc]
	delegate OnCharacterDeathEvent;//[Offset: 0xf80, Size: 0xc]
	int DroneConnectNum;//[Offset: 0xf8c, Size: 0x4]
	CarePackage* NearPackagePtr;//[Offset: 0xf90, Size: 0x4]
	bool bIsDefenseSlowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf94, Size: 0x1]
	float BangaloreBombTime;//[Offset: 0xf98, Size: 0x4]
	bool bCryptoDroneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9c, Size: 0x1]
	int SmokeEffectCount;//[Offset: 0xfa0, Size: 0x4]
	int SurveyTokenCount;//[Offset: 0xfa4, Size: 0x4]
	AudioEventAsync* CurPlayingEventForWraithTrigger;//[Offset: 0xfa8, Size: 0x4]
	GamblingMachine* ClientSelectGamblingMachine;//[Offset: 0xfac, Size: 0x4]
	FString ClientSelectGamblingMachineBoxName;//[Offset: 0xfb0, Size: 0xc]
	int[] ClientSelectGamblingMachineSelectItem;//[Offset: 0xfbc, Size: 0xc]
	int[] ClientSelectGamblingMachineSelectItemCount;//[Offset: 0xfc8, Size: 0xc]
	GamblingMachine* GamblingMachineOwner;//[Offset: 0xfd4, Size: 0x4]
	RepRevenantSilence RepRevenantSilence;//[Offset: 0xfdc, Size: 0x8]
	RepDeathTotemProtection DeathTotemProtection;//[Offset: 0xff0, Size: 0x14]
	RepDeathTotemRangeTest DeathTotemRangeTest;//[Offset: 0x1004, Size: 0x8]
	DeathTotem* CachedDeathTotem;//[Offset: 0x100c, Size: 0x8]
	bool TotemRecallOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1014, Size: 0x1]
	Vector ZiplineHandGrabLoc;//[Offset: 0x1034, Size: 0xc]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x1040, Size: 0x4]
	float ConfigBaseEyeHeight;//[Offset: 0x108c, Size: 0x4]
	float DyingEyeHeight;//[Offset: 0x1090, Size: 0x4]
	bool PadJumpPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1095, Size: 0x1]
	bool PadDoubleJumpPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1096, Size: 0x1]
	CharacterParachuteComponent* CharacterParachuteComponent;//[Offset: 0x1098, Size: 0x4]
	CharacterMagmaRiseComponent* CharacterMagmaRiseComponent;//[Offset: 0x109c, Size: 0x4]
	APAttributeSet* AttributeSet;//[Offset: 0x10a0, Size: 0x4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x10a4, Size: 0x4]
	CharacterDeathInfo CharacterDeathInfo;//[Offset: 0x10a8, Size: 0x8]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 0x1]
	float Health;//[Offset: 0x10b4, Size: 0x4]
	float HealthMax;//[Offset: 0x10b8, Size: 0x4]
	bool bBeakBackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10bc, Size: 0x1]
	FName PlayerType;//[Offset: 0x10c0, Size: 0x8]
	int LegendId;//[Offset: 0x10c8, Size: 0x4]
	FString PlayerName;//[Offset: 0x10cc, Size: 0xc]
	int PlayerKey;//[Offset: 0x10d8, Size: 0x4]
	enum LegendType;//[Offset: 0x10dc, Size: 0x1]
	int LegendGeniusMask;//[Offset: 0x10e0, Size: 0x4]
	float SimulatedHealth;//[Offset: 0x10e4, Size: 0x4]
	float SimulatedShield;//[Offset: 0x10e8, Size: 0x4]
	float HealthHealing;//[Offset: 0x10f8, Size: 0x4]
	float ShieldHealing;//[Offset: 0x10fc, Size: 0x4]
	byte HealthStatus;//[Offset: 0x1178, Size: 0x1]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1179, Size: 0x1]
	float InvincibleStartTime;//[Offset: 0x117c, Size: 0x4]
	float InvincibleEndTime;//[Offset: 0x1180, Size: 0x4]
	bool bIgnoreBeTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1184, Size: 0x1]
	float ShieldValueBeforeCustomRadialDamage;//[Offset: 0x1188, Size: 0x4]
	bool IsNeedSpawnTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118c, Size: 0x1]
	DispatchingActionCollection ActionCollection;//[Offset: 0x1198, Size: 0xc]
	ApexSentence* SpeakingSentence;//[Offset: 0x11b8, Size: 0x4]
	Apex_NPC_Component* NPC_Component;//[Offset: 0x11c8, Size: 0x4]
	bool bIsKeepAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11cc, Size: 0x1]
	bool bReloadNotReduceAmmo;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11cc, Size: 0x1]
	ApexCharacter* LookAtTarget;//[Offset: 0x11d0, Size: 0x4]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d4, Size: 0x1]
	Vector HintCenterOffset;//[Offset: 0x11d8, Size: 0xc]
	Vector MeshContainerOffset;//[Offset: 0x11e4, Size: 0xc]
	enum MoveIgnoreFlags;//[Offset: 0x11f0, Size: 0x1]
	ApgameWeaponCoreComponent* MainWeaponCoreComp1;//[Offset: 0x1204, Size: 0x4]
	ApgameWeaponCoreComponent* MainWeaponCoreComp2;//[Offset: 0x1208, Size: 0x4]
	ApgameWeaponCoreComponent* MainWeaponCoreComp3;//[Offset: 0x120c, Size: 0x4]
	bool bBackpackOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 0x1]
	uint64 PropsWeaponFakeIndex;//[Offset: 0x1218, Size: 0x8]
	int PropsWeaponIndex;//[Offset: 0x1220, Size: 0x4]
	Actor* CurrentPropsWeapon;//[Offset: 0x1224, Size: 0x4]
	bool bAimThrowableProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1228, Size: 0x1]
	bool bHoldThrowableProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1229, Size: 0x1]
	bool bHoldHeatShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122a, Size: 0x1]
	BasePropsWeaponAttrModifier* PropsWeaponAttrModifier;//[Offset: 0x122c, Size: 0x4]
	delegate OnCharacterEquipAttachment;//[Offset: 0x1230, Size: 0xc]
	TimerHandle LaterPropsWeaponTh;//[Offset: 0x1240, Size: 0x8]
	bool bInCancelPropsWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1248, Size: 0x1]
	<uint64,Actor*> FakeMissilePropsWeaponMap;//[Offset: 0x124c, Size: 0x3c]
	enum CurrentPropsWeaponType;//[Offset: 0x129c, Size: 0x1]
	float LastSpawnMissileWeaponTime;//[Offset: 0x12a0, Size: 0x4]
	float MinMissileSpawnInterval;//[Offset: 0x12a4, Size: 0x4]
	byte PropsThrowMode;//[Offset: 0x12a8, Size: 0x1]
	bool bDeathInForbiddenZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a9, Size: 0x1]
	int InForbiddenZoneNum;//[Offset: 0x12ac, Size: 0x4]
	int8 ForbiddenZoneLeftTime;//[Offset: 0x12b0, Size: 0x1]
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c0, Size: 0x1]
	float ShoulderAimingMeshRotStrength;//[Offset: 0x12c4, Size: 0x4]
	float CacheHealthMax;//[Offset: 0x12c8, Size: 0x4]
	KnockdownShieldReplicate CurrentKnockdownShield;//[Offset: 0x12cc, Size: 0xc]
	byte BreakKnockdownShield;//[Offset: 0x12d8, Size: 0x1]
	AkAudioEvent* BreakKnockdownShieldAudio;//[Offset: 0x12dc, Size: 0x8]
	uint64 AICallKnockdownShieldTime;//[Offset: 0x12e8, Size: 0x8]
	ApexKnockdownShield* ApexKnockdownShield;//[Offset: 0x12f0, Size: 0x4]
	byte AircraftRespawnVisibility;//[Offset: 0x1390, Size: 0x1]
	bool IsAllowInterruptedSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1391, Size: 0x1]
	bool bCauseKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a8, Size: 0x1]
	bool bCauseSelfKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a9, Size: 0x1]
	float CauseKnockdownTime;//[Offset: 0x13ac, Size: 0x4]
	float KnockdownTimePoint;//[Offset: 0x13b0, Size: 0x4]
	bool KnockdownWithKnockdownShieldLevel4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 0x1]
	uint32 KillAudioCallCycles;//[Offset: 0x13b8, Size: 0x4]
	float BattleStateDuration;//[Offset: 0x13bc, Size: 0x4]
	float ExitEnterBattleStateTime;//[Offset: 0x13c0, Size: 0x4]
	bool bTickPoseOnDSCachedFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c4, Size: 0x1]
	bool bTickPoseOnDSCachedTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c5, Size: 0x1]
	int UpGradeableArmorCurrentExp;//[Offset: 0x1474, Size: 0x4]
	int UpGradeableArmorMaxExp;//[Offset: 0x1478, Size: 0x4]
	int UpGradeableArmorCurrentLevel;//[Offset: 0x147c, Size: 0x4]
	int UpGradeableArmorUpLevel;//[Offset: 0x1480, Size: 0x4]
	int DisplayNormalArmorLevel;//[Offset: 0x1484, Size: 0x4]
	bool bOnUpGradeableArmorIncreaseExp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1488, Size: 0x1]
	bool bAlwaysUpGradeableArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1489, Size: 0x1]
	bool bOnPickUpGradeableArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148a, Size: 0x1]
	MainHandComponent* MainHandComponent;//[Offset: 0x1490, Size: 0x4]
	CharacterBuffManager* CharacterBuffMgr;//[Offset: 0x1494, Size: 0x4]
	EffectViewManager* EffectViewMgr;//[Offset: 0x1498, Size: 0x4]
	ApexMirageManagerComponent* ApexMirageManagerComponent;//[Offset: 0x149c, Size: 0x4]
	bool bFireLightFXOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a0, Size: 0x1]
	VehicleComponent* VehicleComponent;//[Offset: 0x14a4, Size: 0x4]
	CharacterFinisherComponent* CharacterFinisherComponent;//[Offset: 0x14a8, Size: 0x4]
	GameActionComponent* GameActionComponent;//[Offset: 0x14ac, Size: 0x4]
	SkeletalMeshComponent* LobbySkeletalMeshComponent;//[Offset: 0x14b0, Size: 0x4]
	ApexCharacter* CacheFinisherTarget;//[Offset: 0x14b4, Size: 0x4]
	float ShowFinisherMapFlagDistance;//[Offset: 0x14b8, Size: 0x4]
	ApexCharacterMapFlags* FinisherMapFlag;//[Offset: 0x14bc, Size: 0x4]
	bool bFinisherTimerIsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c0, Size: 0x1]
	TimerHandle FinisherTimeOutTimerHandle;//[Offset: 0x14c8, Size: 0x8]
	bool bIsLongThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1530, Size: 0x1]
	CharacterAddBuffSelfComponent* CharacterAddBuffSelfComponent;//[Offset: 0x1534, Size: 0x4]
	APPerkManagerComponent* PerkManagerComponent;//[Offset: 0x1538, Size: 0x4]
	bool IsSubCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153c, Size: 0x1]
	WeaponManagerComponent* WeaponManagerComp;//[Offset: 0x1540, Size: 0x4]
	Rotator SimulateScopeControlRotation;//[Offset: 0x1550, Size: 0xc]
	ApgameInspectWeaponLogic* InspectWeaponLogic;//[Offset: 0x1574, Size: 0x4]
	AkAudioEvent* FPPAudioEvent;//[Offset: 0x1578, Size: 0x20]
	AkAudioEvent* TPPAudioEvent;//[Offset: 0x1598, Size: 0x20]
	bool CanOpenBlueBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15cc, Size: 0x1]
	ParticleSystemComponent* ZiplineTempParticleBack_L_F;//[Offset: 0x15d0, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_R_F;//[Offset: 0x15d8, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_L_E;//[Offset: 0x15e0, Size: 0x8]
	ParticleSystemComponent* ZiplineTempParticleBack_R_E;//[Offset: 0x15e8, Size: 0x8]
	ZiplineComponent* ZiplineCurrentZiplinePtr;//[Offset: 0x160c, Size: 0x4]
	ZiplineComponent* ZiplineLastRideZiplineLine;//[Offset: 0x1610, Size: 0x8]
	ZiplineComponent* ZiplineRidedZiplinePtr;//[Offset: 0x1618, Size: 0x4]
	ZiplineComponent* ZiplineSwitchLastZipline;//[Offset: 0x161c, Size: 0x4]
	Transform ZiplineBodyMeshTransform_TPP;//[Offset: 0x1620, Size: 0x30]
	ZiplinePlayerFlowData ZiplineFlowData;//[Offset: 0x1694, Size: 0x44]
	SkillModifierInfo ZiplineSkillModifier;//[Offset: 0x16d8, Size: 0x20]
	SkillModifierInfo ZiplineOverrideStateSkillModifier;//[Offset: 0x16f8, Size: 0x20]
	HandStateData ZiplineHandData;//[Offset: 0x171c, Size: 0x34]
	Vector ZiplineRidePos;//[Offset: 0x1754, Size: 0xc]
	bool bZiplineNeedShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1760, Size: 0x1]
	bool bZiplineIsRideButtonUseable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1761, Size: 0x1]
	bool bZiplineIsRiding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1762, Size: 0x1]
	bool bZiplineIsZiplineOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1763, Size: 0x1]
	bool bZiplineIsCurZiplineVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1764, Size: 0x1]
	bool bZiplineIsRidedZiplineVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1765, Size: 0x1]
	bool bZiplineIsVerticalZiplineUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1767, Size: 0x1]
	int ZiplineVerticalZiplineForceDir;//[Offset: 0x1768, Size: 0x4]
	bool bZiplinePlayerHasJumpToZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176c, Size: 0x1]
	ZiplineMagnetic* ZiplineMagnetic;//[Offset: 0x1770, Size: 0x4]
	int ZiplineFlow_ButtonState;//[Offset: 0x1778, Size: 0x4]
	bool RideZiplineIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177c, Size: 0x1]
	Vector DirOrPoint;//[Offset: 0x1780, Size: 0xc]
	enum PlayerAddForceType;//[Offset: 0x178c, Size: 0x1]
	float ForceValue;//[Offset: 0x1790, Size: 0x4]
	float MaxForceSpeed;//[Offset: 0x17a0, Size: 0x4]
	float ForceAcceleration;//[Offset: 0x17a4, Size: 0x4]
	enum UseReplicatorState;//[Offset: 0x17d4, Size: 0x1]
	Workbench* OperateWorkbench;//[Offset: 0x17ec, Size: 0x4]
	AnimMontage* CurrentUseFPPAnimMontage;//[Offset: 0x17f0, Size: 0x4]
	AnimMontage* CurrentUseTPPAnimMontage;//[Offset: 0x17f4, Size: 0x4]
	Actor*[] IgnoreActors;//[Offset: 0x17f8, Size: 0xc]
	void ZiplineSetShowUI(bool bIsShow);// 0x2412ef4
	void ZiplineSetMagnetAndParticleVisible(bool bIsVisible);// 0x2412ba8
	void ZiplineServerRideZipline(ZiplineComponent* Zipline, float T, float t1, int ButtonState);// 0x2413adc
	void ZiplineServerDownZipline(Vector Velocity, float BlockUpperZ, float ForceDownT, int MidwayJump, int LeaveType);// 0x24135d0
	void ZiplineServerAltDir(ZiplineComponent* Zipline, float T, bool bIsToUP);// 0x241387c
	void ZiplineRideZipline();// 0x24131d8
	void ZiplineRideVerticalZipline(bool bIsUp);// 0x24131ec
	void ZiplineResumeEnterOverrideStateRuntime(int SkillIndex, bool bEnterNewState, enum NewState, enum NewOverrideState);// 0x2412c28
	void ZiplineRefreshAutoRideZiplineSetting();// 0x24132f4
	void ZiplineOnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x2413308
	void ZiplineOnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x2413408
	Transform ZiplineGetTppMeshWorldTransform();// 0x241326c
	float ZiplineGetRidingZiplineTime();// 0x2412e7c
	ZiplineComponent* ZiplineGetRidingZipline();// 0x2412ecc
	bool ZiplineGetCurrentOnZipline();// 0x2412ea4
	void ZiplineDownZipline(bool bIsJump, bool bIsZeroStop, int MidwayJump, int LeaveType);// 0x2413078
	void ZiplineDoCameraShake(out const Vector Velocity);// 0x2412f74
	void ZiplineChangeEnterOverrideStateRuntime(int SkillIndex, enum NewState, enum NewOverrideState);// 0x2412d7c
	void ZiplineBroadcastRideZipline(ZiplineComponent* Zipline, float T, float t1, float ServerTime);// 0x241398c
	void ZiplineBroadcastDownZipline(Vector Velocity, float BlockUpperZ, float ForceDownT);// 0x24134c4
	void ZiplineBroadcastAltDir(ZiplineComponent* Zipline, float T, bool bIsToUP);// 0x241376c
	void ZiplineAltRideDirection(bool bIsToUP);// 0x2412ff8
	void VictoryRevive();// 0x24158c4
	bool UseRespawnBeaconComplete(int8 Index);// 0x24157a0
	void UseReplicator(Workbench* InWorkbench, int InSide);// 0x241258c
	void UsePropsWeaponNoTarget(enum PropsWeaponType, ItemDefineID DefineID, enum Reason, bool bFastThrow);// 0x2417418
	void UsePropsWeapon(enum PropsWeaponType, ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason, bool bFastThrow);// 0x241757c
	void UnUseReplicator(enum Reason);// 0x241250c
	void UnRegisterHandleStackPropsWeapon();// 0x2417a50
	void UnEquipPropsWeapon(enum PropsWeaponType, enum Reason);// 0x2417e70
	ApexAIController* TryGetAIController();// 0x241ce14
	void TickForbiddenZone();// 0x24165c4
	void TargetLeaveRobotRescuing(enum Reason);// 0x2415a2c
	void TargetEnterRobotRescuing(SkeletalMeshComponent* RobotSkeletalMesh);// 0x2415aac
	void TargetBreakRobotRescuing();// 0x2415a10
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x24193a8
	void SwitchTeamLeader(int TeamID, uint32 NewLeaderKey);// 0x241875c
	void SwitchSlidingJump(Vector2D ScreenLocation, Vector2D CenterLocation);// 0x241aa94
	void SwitchOnDeathTotemProtection(const DeathTotem* inDeathTotem);// 0x241b1a8
	void SwitchOffDeathTotemProtection(const DeathTotem* inDeathTotem, bool OffByConsumption, out const ApexCharacterReviveInfo ReviveInfo);// 0x241b000
	void SwitchCrouch();// 0x241ab48
	void SwitchClimbJump(Vector2D ScreenLocation, Vector2D CenterLocation);// 0x241a9e0
	void SwitchCameraMode(enum NewMainCameraMode, float LerpTime, bool FromButton);// 0x241d668
	void SwitchBloodHoundDetectable(bool EnableDetect);// 0x241d9b0
	bool StuckInto(Actor* InActor);// 0x241dec8
	void StopInspectWeapon();// 0x2413c70
	void StopForbiddenZoneTimer();// 0x24165d8
	void StopDispatchableSentence_NetMulticast();// 0x2418c44
	void StopDispatchableSentence();// 0x2418ce0
	void StopDispatchableMontage_NetMulticast();// 0x2418d6c
	void StartInspectWeapon();// 0x2413c84
	void StartForbiddenZoneTimer();// 0x24165ec
	void SpawnMissilePropsWeapon(uint64 FakeID, enum PropsWeaponType, Vector InLoc, Vector InVel, Rotator InRot, float LeftTime);// 0x24168fc
	void SpawnFakeMissilePropsWeapon(enum PropsWeaponType, Vector InLoc, Vector InVel, Rotator InRot, float LeftTime);// 0x2416b10
	void SpawnDynamicRespawnBeacon(Transform InTransform, int ItemID);// 0x2416cb0
	void ShowFinisherHeadFlag(Vector AuthLocation);// 0x2414794
	void ShowFinisherCancelOperation(bool bShow, ApexCharacter* Target);// 0x2414804
	void SeverLocationSample(const Vector ClientLocation, const Vector ClientRebaseLocationOffset);// 0x241e478
	void SetTickPoseOnDS(bool bActive);// 0x2414ff8
	void SetRescueSelfSoundId(int SoundId);// 0x241adbc
	void SetPlayerTransform(Vector NewLocation, Rotator NewControlRotation);// 0x241e340
	void SetIsInvincible(bool NewState);// 0x2419740
	void SetIsAI(bool IsAI);// 0x241cb9c
	void SetInvincibleStartTime(float InTime);// 0x24196c8
	void SetInvincibleEndTime(float InTime);// 0x2419650
	void SetInHeatShield(bool bInside, enum InOutHeatShieldReason);// 0x241d354
	void SetGameOver(bool bFlag);// 0x2416528
	void SetEnableRootMotion(bool Enable);// 0x2418bb0
	void SetDyingAnimParam(bool bDying, bool ImmediatelyKnockdownPose);// 0x2416150
	void SetDeadAnimType(enum DeadType);// 0x24160d0
	void SetCharacterShieldMax(out const float NewValue);// 0x241a39c
	void SetCharacterShieldLevel(out const int NewValue);// 0x241a28c
	void SetCharacterShieldHealing(out const float NewValue);// 0x241a314
	void SetCharacterShield(out const float NewValue);// 0x241a424
	void SetCharacterInVoidState(bool bState);// 0x241b3fc
	void SetCharacterHelmetLevel(out const int NewValue);// 0x241a204
	void SetCharacterHealthMax(out const float NewValue);// 0x241a534
	void SetCharacterHealthHealing(out const float NewValue);// 0x241a4ac
	void SetCharacterHealth(out const float NewValue);// 0x241a5bc
	void SetCharacterAttrModifierEnable(FString ModifierName, bool IsEnable);// 0x2419524
	void SetBackpackUIIsOpen(bool bNewValue);// 0x2413c98
	void SetBackpackOpening(bool Value);// 0x2418910
	void SetAnimRescueType(enum AnimRescueType);// 0x241cb24
	void SetAllCollisionEnabled(bool bEnabled);// 0x2ce6f18
	void ServerUseEmoji(enum EmojiType, FName EmojiId);// 0x241f118
	void ServerUse3DEmojiWithLocation(FName EmojiId, bool NewUse, Vector Location, float DestroyDelay);// 0x241ec74
	void ServerUnEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative);// 0x2417f2c
	void ServerTriggerJump();// 0x241ab64
	void ServerSetSkinId(FName NewSkinId);// 0x241c908
	void ServerSetPropsThrowMode(byte ThrowGrenadeMode);// 0x2416650
	void ServerSetMaxHealth(float AddHealth);// 0x2418e7c
	void ServerSetFireMode(enum NewFireMode);// 0x241c640
	void ServerSetCurrentCameraMode(enum NewCameraMode, bool FromButton);// 0x241d494
	void ServerSetBackpackOpening(bool Value);// 0x2418858
	void ServerPreStartTransfer(VoidDoorActor* DoorActor, bool bReversal);// 0x241b960
	void ServerPickupGrenade(ItemDefineID DefineID);// 0x24171bc
	void ServerOperateFinisher(bool bEnter, ApexCharacter* FinisherTarget);// 0x2414630
	void ServerHandleSkillCheckBoxOverlapEvent(const FName InAction, Actor* InEventActor);// 0x241c238
	void ServerGmUpdateNearAILocation();// 0x241d010
	void ServerFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0x2417ba4
	void ServerEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative);// 0x24183a8
	void ServerBroadcastMsg(BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0x24170d0
	void SendPlayerTo(Transform Trans);// 0x241ce80
	void RPCServerEnableDeathTotemProtection(DeathTotem* inDeathTotem);// 0x241b2c0
	void RPCQueryServerInfo(ApexCharacter* Acotr);// 0x241cc48
	void RPCMultiThrowPickUpWrapper();// 0x2413c2c
	void RPC_ClientClearFakePropsWeapon(uint64 FakeID);// 0x24166f8
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x2413d88
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x2413eac
	void ResumeRescueSelf();// 0x241cb10
	void ResumeHandleStackPropsWeapon();// 0x24178fc
	void RestoreTickPoseOnDS();// 0x2414fe4
	class Object RescueIndiviByRobot();// 0x2415958
	class Object RescueIndivi(ApexCharacter* Target);// 0x2415988
	bool RequireFootprintsDuringHunting();// 0x241d988
	void ReportThrowingFlow(enum PropsWeaponType, Actor* ThrowableActor);// 0x2416840
	void ReportDecoyFlowTLOG(int decoyType, int controlTime, int EndType);// 0x241ccc8
	void ReplaceAttrShieldValueMax(float CurrentShieldValue, float ReplaceShieldValueMax);// 0x241a784
	void RemoveShieldHealing(FName SourceName);// 0x2419e54
	void RemovePropsWeaponEvent();// 0x2416e40
	void RemoveHealthHealing(FName SourceName);// 0x2419fb4
	void ReleaseRecoverBanner();// 0x2415828
	bool RegisterSkillStateEvent2SkillManager();// 0x241ba2c
	void RegisterPlayerPickUpList();// 0x241ae5c
	void RegisterHandleStackPropsWeapon();// 0x2417a64
	void RefreshBattleState();// 0x24151ac
	void RefreshBackpackDisplay();// 0x2418a20
	QueryPlayerInfo QueryCharacterInfo();// 0x241402c
	void PutonEquipmentTest();// 0x241d46c
	void PushDrugVoice(const int VoiceID);// 0x241e400
	void PropsWeaponEndPlay(enum Reason);// 0x2417a78
	void PropsWeaponAimExplode(enum PropsWeaponType, Vector InLoc);// 0x241677c
	void PlayVictimSound(enum PlayerAudioType, int InWeaponSkinID);// 0x2415670
	void PlayTotemRecallTrailSFX_NetMulticast(const Vector StartPosition, const Vector EndPosition);// 0x241aed4
	void PlaySingleSequence(LevelSequence* TargetSequence, MovieSceneSequencePlaybackSettings Settings);// 0x241c4a8
	void PlayRespawnOperateAudio(enum AudioType);// 0x24154b4
	void PlayInstigatorSound(enum PlayerAudioType, int InWeaponSkinID);// 0x24155ac
	void PlayFatalitySkill(ApexCharacter* TargetActor);// 0x241c5c8
	void PlayerRelicateItem(int SelectIndex);// 0x241248c
	void PlayDoubleSequence(LevelSequence* TargetSequence, Actor* Other, MovieSceneSequencePlaybackSettings Settings);// 0x241c338
	void PlayDispatchableSentence_NetMulticast(ApexSentence* Sentence);// 0x2418c60
	void PlayDispatchableSentence(ApexSentence* Sentence);// 0x2418cf4
	void PlayDispatchableMontage_NetMulticast(AnimMontage* MontageToPlay);// 0x2418dc8
	void PlayBackpackSwitchGunAnim(float Alpha, float TimeSec);// 0x24153f0
	void OverlapMirage(MirageActor* Mirage);// 0x241f394
	void OperateFinisher(bool bEnter);// 0x2414700
	void OnWeaponPutOnEnd();// 0x24150f0
	void OnWeaponPutOffEnd(int WeaponID);// 0x2415078
	void OnUpGradeableArmorDisplayLoad(Transform SpawnTransform, int Level);// 0x2414d50
	void OnTakeDamage(float Damage, int DamageType, enum DamagePos, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x2412770
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x241e920
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x241ea28
	void OnStateBlockCheck(enum TimeOutState, enum TimeOutOverrideState, enum BlockState, enum BlockOverrideState, out bool bNeedExitState);// 0x241f1f4
	void OnStartSkillFailed(int SkillIndex, enum StopReason, int SkillHandleID);// 0x241be48
	void OnSkinChanged(Character* TargetCharacter, bool Success, FName SkinId);// 0x241d770
	void OnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x241bf50
	void OnSkillStartCD(int SkillIndex);// 0x241bcfc
	void OnSkillStart(int SkillIndex, int SkillHandleID);// 0x241c160
	void OnSkillReleased(int SkillIndex, bool bReleased);// 0x241bd7c
	void OnSkillJumpPhase(int SkillIndex, int PhaseIndex, bool Result);// 0x241bb6c
	void OnSkillCDModify(int SkillIndex);// 0x241bc7c
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x241c6c0
	void OnRepPropsThrowMode();// 0x24166e4
	void OnRep_UpGradeableArmorUpLevel();// 0x2414ee4
	void OnRep_UpGradeableArmorMaxExp();// 0x2414f0c
	void OnRep_UpGradeableArmorCurrentLevel();// 0x2414ef8
	void OnRep_UpGradeableArmorCurrentExp();// 0x2414f0c
	void OnRep_SkinId(FName PreSkinId);// 0x241c88c
	void OnRep_ShieldValueMax();// 0x2418a98
	void OnRep_ShieldValue();// 0x2418aac
	void OnRep_ShieldLevel();// 0x2418a84
	void OnRep_ShieldHealing();// 0x2418b4c
	void OnRep_ServerCharacterCameraMode();// 0x241d480
	void OnRep_RevenantSilenceEffect();// 0x241b340
	void OnRep_RepUseReplicatorState();// 0x2412478
	void OnRep_ReloadNotReduceAmmo();// 0x2418c30
	void OnRep_PickupTipItem();// 0x241d444
	void OnRep_OnUpGradeableArmorIncreaseExp();// 0x2414ebc
	void OnRep_OnPickUpGradeableArmor();// 0x2414cb8
	void OnRep_MoveIgnoreFlags();// 0x2418b9c
	void OnRep_MaxHealth();// 0x2418b74
	void OnRep_KnockDownShieldLevel();// 0x2418a48
	void OnRep_KnockdownShield(KnockdownShieldReplicate Outdated);// 0x2416040
	void OnRep_IsInvincible();// 0x2418a34
	void OnRep_IsDefenseSlowed();// 0x241ae98
	void OnRep_HelmetLevel();// 0x2418a70
	void OnRep_HealthStatusChanged(byte prevStatus);// 0x2418ac0
	void OnRep_HealthHealing();// 0x2418b60
	void OnRep_Health();// 0x2418b88
	void OnRep_ForbiddenZoneLeftTime();// 0x24165b0
	void OnRep_DisplayNormalArmorLevel();// 0x2414ed0
	void OnRep_DeathTotemRangeTest();// 0x241aeac
	void OnRep_DeathTotemProtection();// 0x241aec0
	void OnRep_CurrentInsideHeatShield();// 0x241d340
	void OnRep_CharacterDeathInfo();// 0x2418b38
	void OnRep_BreakKnockdownShield();// 0x241602c
	void OnRep_BloodHoundHunting();// 0x241da30
	void OnRep_BackpackLevel();// 0x2418a5c
	void OnRep_AircraftRespawnVisibility();// 0x2415778
	void OnReconnectedPropsWeapon();// 0x2416e2c
	void OnPropsWeaponReleased(bool bRightBtn);// 0x241777c
	void OnPropsWeaponPressed(bool bRightBtn);// 0x24177fc
	void OnPlayTotemRecallTrailSFX(out const Vector StartPosition, out const Vector EndPosition);// 0x2ce6f18
	void OnPlayerNetLost();// 0x241275c
	void OnPlayerMoving(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x2412650
	void OnOverrideStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x241e818
	void OnObPlayerListChangedAtServer(const Controller*[] PlayerList);// 0x2414bac
	void OnObedStatusChangedAtServer(bool IsAnyOneObed);// 0x2414b2c
	void OnObedStatusChangeAtClient(bool NewIsOBed, PlayerController* PC);// 0x2414a64
	void OnNormalArmorDisplayLoad(int Level);// 0x2414ccc
	void OnMirageDecoySwitchPlayControllerWithLeaveInAir(enum State, enum Reason, enum InterruptedBy);// 0x24141bc
	void OnLeavlOB(Actor* Target);// 0x241493c
	void OnHealthStatusChanged(byte PrevHealthStatus, byte CurrentHealthStatus);// 0x24197c0
	void OnHandSyringeClassLoad();// 0x241ae48
	void OnFinisherTimerOut();// 0x2414540
	void OnEnterVoid(bool bIsEnter, bool bNeedSetCollision);// 0x2ce6f18
	void OnEnterOB(Actor* Target);// 0x241493c
	void OnEmojiMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x241ebb0
	void OnEmoji3DMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x241eaec
	void OnDeathMatLoadComplete(SoftObjectPath MatSoftObject);// 0x241dfd8
	void OnCharacterEnterCausticGas();// 0x241435c
	void OnBPIsInvincibleChange();// 0x2ce6f18
	void OnBeenSilencedByRevenant(bool IsSilenced);// 0x2ce6f18
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0x2414f20
	void NotifyRecycleToServer(Actor* ActorToRecycle);// 0x24143f0
	void NotifyPickupSkillItem(SkillActorBase* ActorToPickup);// 0x2414370
	void NotifyHealthShieldChangeWithoutMidRecommand(bool IsHp, float ChangedValue, enum CausedType);// 0x2419074
	void NetMultiUseEmojiAnimation(FName EmojiId, bool NewUse);// 0x241f044
	void NetMultiUseEmoji3D(FName EmojiId, bool NewUse);// 0x241ef70
	void NetMultiUseEmoji2D(FName EmojiId, bool NewUse);// 0x241ee9c
	void NetMulticastEnterRescue(ApexCharacter* Target);// 0x2415e80
	void MultiCastSwitchCameraMode(enum NewMainCameraMode, float LerpTime);// 0x241d5a4
	void MulticastLaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x241f4d8
	void LookAtTargetPoint(Vector TargetPoint);// 0x241e2d0
	void LogTouch(bool Value);// 0x2418998
	void LoadPropsWeaponAttrModifier();// 0x24171a8
	void LeavingForbiddenZone();// 0x2416600
	void LeaveServerState_Inner(enum State);// 0x241d25c
	void LeaveRobotRescuing(ApexCharacter* Source, enum Reason);// 0x2415c34
	void LeaveRescuing(ApexCharacter* Source, enum Reason);// 0x2415cf8
	void LeaveRescue(ApexCharacter* Target, enum Reason);// 0x2415dbc
	bool IsUnderDomeShield();// 0x241b354
	bool IsTotemRecallFinished();// 0x241af88
	bool IsTeamMateById(int InTeamId, int InCampId);// 0x2418fb0
	bool IsSilenced();// 0x241b3a4
	bool IsReplayViewTarget();// 0x2413d38
	bool IsProtectedByDeathTotem();// 0x241afd8
	bool IsInVoid();// 0x241b3cc
	bool IsInspectingWeapon();// 0x2413c48
	bool IsInGrappling();// 0x241a960
	bool IsInBattleState();// 0x24151c0
	bool IsInBattle();// 0x241d41c
	bool IsInAir();// 0x241a990
	bool IsHeirloomOn();// 0x241abf0
	bool IsGrapplingCDPending();// 0x241a938
	bool IsFrisking();// 0x241872c
	bool IsFPP();// 0x241ac18
	bool IsDying();// 0x241991c
	bool IsDecoy();// 0x241cdc8
	bool IsDeathTotemProtectionFinishByConsumption();// 0x241afb0
	bool IsCanClamb(out const HitResult Hit);// 0x24129e4
	bool IsByAIHosting();// 0x241ce44
	bool IsBloodHoundHunting(out float LeftSeconds);// 0x241da44
	bool IsAnyoneObedInDS();// 0x2414c90
	bool IsAlive();// 0x2419944
	bool IsAIControllerd();// 0x241cde4
	bool IsAI();// 0x241cc18
	void InterruptedSkill();// 0x2415734
	void InitPlayerProperty(ApexPlayerState* InPlayerState);// 0x241996c
	void ImmediatelyDisposePropsWeapon();// 0x2416e68
	void HuntLegendByIDServer(int HuntLegendIDIn);// 0x241d908
	void HuntLegendByIDMulticast(int HuntLegendIDIn);// 0x241d888
	void HoldRecoverBanner(uint32 RecoverBannerPlayerKey);// 0x2415844
	void HideFinisherHeadFlag();// 0x2414780
	void HealActor(Actor* TargetActor);// 0x24158d8
	bool HasPawnState(enum State);// 0x241edf4
	void HandleStackPropsWeapon(out const HandStateData HandStateData, bool bPush);// 0x2417910
	void HandleOnCharAnimLoadingFinished();// 0x241e0e4
	void HandleConsumeItemSkillBreak();// 0x241c224
	void HandleBothLeaveRescue(ApexCharacter* Source, ApexCharacter* Target, enum Reason);// 0x2415b2c
	void GotoDying(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x24163a8
	WeaponManagerComponent* GetWeaponManagerComponent();// 0x241f644
	Actor* GetViewTargetActor();// 0x24149b4
	float GetViewScrollSpeedScale();// 0x2419cb4
	Rotator GetViewRotationIgnoreSmallEye();// 0x241f5f4
	float GetUltimateSkillCDThresholdScale();// 0x2419a44
	float GetUltimateSkillCDScale();// 0x2419aa4
	float GetUltimateSkillCDCastScale();// 0x24199e4
	int GetTeamIdx();// 0x2418f88
	float GetTacticsSkillCDThresholdScale();// 0x2419a74
	float GetTacticsSkillCDScale();// 0x2419ad4
	float GetTacticsSkillCDCastScale();// 0x2419a14
	float GetSpreadScale();// 0x2419c84
	float GetSpeedScale();// 0x2419e04
	float GetSkillDamageScale();// 0x2419d44
	int GetSimOBBulletNum(int AmmoID);// 0x24149e4
	float GetShoulderAimingMeshAngle();// 0x2416500
	enum GetShieldLevel();// 0x2419608
	float GetShieldHealing();// 0x2419e34
	float GetRescueSelfMultiplier();// 0x2419c24
	float GetRescueMultiplier();// 0x2419c54
	float GetRealRescureSelfTimeSec();// 0x2415184
	float GetRealRescuingTimeSec(ApexCharacter* TargetCharacter);// 0x2415104
	byte GetPropsThrowMode();// 0x2416628
	FString GetPlayerNameSafety();// 0x241e6bc
	FString GetPlayerLogName();// 0x241e620
	int GetPlayerKey();// 0x2418f30
	ApexPlayerController* GetPlayerControllerInReplay();// 0x2413d60
	APPerkManagerComponent* GetPerkManagerComp();// 0x241433c
	PawnStateManager* GetPawnStateManager();// 0x241d310
	Actor* GetMyEmoji3DActor();// 0x241ee74
	Vector GetMovingVelocity();// 0x241e758
	float GetMoveShowDistanceScale();// 0x2419bc4
	ShootWeapon* GetMeshOwnerShootWeapon(SkeletalMeshComponent* InMeshComponent);// 0x24142bc
	float GetMeleeAttackDamageScale();// 0x2419ce4
	float GetMaxWalkSpeedLimit();// 0x2419dd4
	MainHandComponent* GetMainHandComp();// 0x241491c
	enum GetLegendType();// 0x241ca68
	int GetLegendID();// 0x241ca98
	float GetKnockdownSpeedScale();// 0x2419d74
	bool GetIsInvincible();// 0x2419630
	bool GetIsIndiviRescue();// 0x2419bf4
	int GetInEnemyCausticGasNumFor(ApexCharacter* TargetCharacter);// 0x2414498
	int GetInEnemyCausticGasNum();// 0x2414518
	int GetInCausticGasNum();// 0x2414470
	int GetHeirloomID();// 0x241abc0
	byte GetHealthStatus();// 0x24198f4
	float GetHealthHealing();// 0x2419f94
	Vector GetGroundActorLocation();// 0x241c844
	float GetFireShowDistanceScale();// 0x2419b94
	bool GetEnableOpenCloseBackpack();// 0x2413d18
	EffectViewManager* GetEffectViewManager();// 0x24148cc
	bool GetDisableSprint();// 0x2419da4
	DataReportComponent* GetDataReportComponent();// 0x241ae70
	int GetCurAimType();// 0x24164d8
	float GetConsumeShowDistanceScale();// 0x2419b64
	Actor* GetCircleActor();// 0x241b37c
	UAECharacterAnimListComponent* GetCharacterWeaponAnimListComponent();// 0x241e130
	float GetCharacterShieldMax();// 0x241a6bc
	int GetCharacterShieldLevel();// 0x241a66c
	float GetCharacterShieldHealing();// 0x241a694
	float GetCharacterShield();// 0x241a6e4
	int GetCharacterHelmetLevel();// 0x241a644
	float GetCharacterHealthMax();// 0x241a734
	float GetCharacterHealthHealing();// 0x241a70c
	float GetCharacterHealth();// 0x241a75c
	CharacterBuffManager* GetCharacterBuffManager();// 0x24148f4
	UAECharacterAnimListComponent* GetCharacterAnimListComponent();// 0x241e160
	ApexCharacterAnimationComponent* GetCharacterAnimationComponent();// 0x241e100
	byte GetCfgRespawnTeammateTimeSec();// 0x2415750
	int GetCampID();// 0x2418f60
	Rotator GetCachedRotation();// 0x241cac8
	bool GetBackpackOpening();// 0x24188e0
	AuraComponent* GetAuraComponent();// 0x241ca40
	void GetAPCharacterCameraViewPoint(out Vector Location, out Rotator Rotation, bool IsFPP, bool UseCameraLocationAtClient);// 0x241ac40
	float GetAIDamageScale();// 0x2419d14
	int GenPropsWeaponIndex();// 0x24186dc
	uint64 GenPropsWeaponFakeId();// 0x2418704
	void GamblingMachine_ServerPlayGameEnd();// 0x241b530
	void GamblingMachine_ServerPlayGameCheck(GamblingMachine* GamblingMachine, FString BoxName);// 0x241b784
	void GamblingMachine_ServerPlayGame(const int[] ListID, const int[] ListNum);// 0x241b5cc
	void GamblingMachine_ClientPlayGameStart(GamblingMachine* GamblingMachine, enum MesssageType);// 0x241b6c0
	void GamblingMachine_ClientPlayGameEnd(enum MessageType);// 0x241b54c
	void ForbidEmojiAnimationMoment();// 0x241ede0
	void FirePropsWeapon();// 0x2417768
	void FadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams);// 0x2417af0
	void EquipPropsWeapon(enum PropsWeaponType, out bool bResult);// 0x24182dc
	void EnterSimulatedState(enum State);// 0x241d02c
	void EnterServerState_Inner(enum State);// 0x241d1a8
	void EnteredForbiddenZone();// 0x2416614
	bool EnableVisualSound();// 0x2419b34
	void EnableKnockdownShield(bool bEnable);// 0x2415fa4
	bool EnableImmuneHitSlowly();// 0x2419b04
	void EnableFPPZOffset(bool NewEnable);// 0x241c9c0
	void EnableExplosionTimeTips(bool bEnable, float RealExplosionTime, float Percent);// 0x24152e4
	void DyingToRevive();// 0x2415f00
	void DyingTimeout(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, bool bFollowTeamDead);// 0x2416228
	void DisableAnimBudget();// 0x241f1e0
	void DetectorBeFinisherTeammate(const float Duration, const ApexCharacter* BeFinisher);// 0x241dc2c
	void DeathFadeOut();// 0x241e0d0
	void ConsumePropsWeapon(int ItemID);// 0x24173a0
	bool ConsumeDeathTotemProtection(out float ResultHealth);// 0x241b228
	void ClientUnEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, enum Reason, bool ServerInitiative);// 0x2418084
	void ClientSwitchThrowMode();// 0x24166d0
	void ClientStartTransferSucceed(VoidDoorActor* DoorActor);// 0x241b860
	void ClientStartTransferFailed(VoidDoorActor* DoorActor);// 0x241b8e0
	void ClientSetPlayerTransform(Vector NewLocation, Rotator NewControlRotation);// 0x241e208
	void ClientSetPlayerRotation(Rotator NewControlRotation);// 0x241e190
	void ClientSentWraithTipToTeammate(const AkAudioEvent* AudioEvent);// 0x241b47c
	void ClientReceiveBroadcastMsg(BroadcastMsgData BroadcastMsgData, bool ServerInitiative);// 0x2417014
	void ClientPostMessageItem(FName InItemKey, float InDuration, FName InMessageKey, const FString[] Args);// 0x241dcf0
	void ClientOnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x241c058
	void ClientOnSkillJumpPhase(int SkillIndex, int PhaseIndex, bool Result);// 0x241ba5c
	void ClientOnInflictDamage(float DamageAmount, const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamageTarget);// 0x2419200
	void ClientFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams, bool ServerInitiative);// 0x2417cb4
	void ClientEquipPropsWeapon(enum PropsWeaponType, int NetPropsWeaponIndex, bool ServerInitiative);// 0x24184b8
	void ClientChangePoseState(enum InState);// 0x241a840
	void ClientAckGoodMoveWithPendingCount(float Timestamp, byte PendingCount);// 0x241f414
	void ClearPropsWeapon();// 0x2417194
	void ClearFinisherTimerOut();// 0x2414554
	void Clear(bool bClearSkillActor);// 0x2419180
	enum CheckResumePropsWeaponType(enum PropsWeaponType);// 0x241787c
	void CharacterRescueBackLocalLocation();// 0x241ae34
	void ChangePoseState(enum InState);// 0x241a8c0
	void ChangeHealthStatus(byte NextHealthStatus);// 0x241987c
	bool CanSwitchFppTpp();// 0x241dea0
	bool CanStuckInto(Actor* InActor);// 0x241df50
	bool CanEnterSlide();// 0x241a9b8
	void CancelPropsWeapon();// 0x2417754
	void CallServerLocationSample();// 0x241e564
	void CalcVelocity(out Vector Velocity, out const Vector Acceleration, float DeltaTime);// 0x2412a88
	void BroadcastTeamMateAudio(enum PlayerAudioType);// 0x2415534
	void BroadcastKilledEffect(uint32 InKillerKey, int InWeaponSkinID);// 0x24151e8
	void BPSyncPawnStateMask();// 0x241d458
	void BloodHoundHuntingCastInterrupted();// 0x241db54
	void BloodHoundEnterHunting(float HuntingDuration, bool bAlwaysUseNewDuration);// 0x241db68
	void BloodHoundBreakHunting(bool bImmediateBreak);// 0x241dad4
	bool BackpackHasPropsWeapon(enum PropsWeaponType, out int ResultItemId);// 0x24172cc
	void AutonomousUnEquipPropsWeapon(enum PropsWeaponType, enum Reason, bool ServerInitiative);// 0x24181d4
	void AutonomousPickupGrenade(ItemDefineID DefineID);// 0x2417244
	void AutonomousFadeOutPropsWeapon(enum PropsWeaponType, PropsWeaponFadeOutParams FadeOutParams);// 0x2417dbc
	void AutonomousEquipPropsWeapon(enum PropsWeaponType, out bool bResult, bool ServerInitiative);// 0x24185c0
	void APReceiveAnyDamage(float Damage, byte DamageType, Actor* Attacker);// 0x2ce6f18
	void APOnTakeDamage(float Damage, int DamageType, Pawn* Attacker, enum AvatarDamagePosition, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken);// 0x2ce6f18
	void AircraftRespawnExitHatchDone();// 0x241578c
	void AIFirePropsWeapon(enum PropsWeaponType, Vector LaunchVelocity, Vector LaunchLocation);// 0x2416e7c
	void AIEquipPropsWeapon(enum PropsWeaponType);// 0x2416f9c
	bool AIEnableKnockdownShield(bool bEnable);// 0x2415f1c
	void AIAimPropsWeapon();// 0x2416f88
	void AddShieldHealing(FName SourceName, float Value);// 0x2419ed0
	void AddPropsWeaponEvent();// 0x2416e54
	void AddPlayerTrainFlow(bool bOn);// 0x241d0e0
	void AddNoWarningState(enum State);// 0x241e7a0
	void AddHealthHealing(FName SourceName, float Value);// 0x241a030
	void AddFinisherTimerOut(bool bIsTarget, float Time);// 0x2414568
	void AddCharacterShield(out const float AddValue);// 0x241a0f4
	void AddCharacterHealth(out const float AddValue);// 0x241a17c

--------------------------------
Class: UnmannedBody.Actor.Object
	float BodyLength;//[Offset: 0x214, Size: 0x4]
	FString ID;//[Offset: 0x218, Size: 0xc]
	StaticMeshComponent* MainMesh;//[Offset: 0x224, Size: 0x4]
	float SimulatedMoveDistance;//[Offset: 0x228, Size: 0x4]
	float SimulatedTickAngelLimit;//[Offset: 0x22c, Size: 0x4]
	bool bEnableAggregate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	float OffsetToHead;//[Offset: 0x238, Size: 0x4]
	Actor*[] AttachActorList;//[Offset: 0x23c, Size: 0xc]
	ApexCharacter*[] Passengers;//[Offset: 0x248, Size: 0xc]
	int BodyIndex;//[Offset: 0x254, Size: 0x4]
	void RemoveAttachActor(Actor* RemoveActor);// 0x27f58c8
	bool IsOn(Actor* theActor);// 0x27f5848
	bool GetApplyMoveState();// 0x27f5a38
	void EnableAggregate(bool bEnable);// 0x27f59b8
	void AddAttachActor(Actor* AddActor);// 0x27f5940

--------------------------------
Class: CharacterConfigDataAsset.DataAsset.Object
	byte CfgRespawnTimeoutSec;//[Offset: 0x20, Size: 0x1]
	byte CfgRespawnTeammateTimeSec;//[Offset: 0x21, Size: 0x1]
	float DeathFadeOutTime;//[Offset: 0x24, Size: 0x4]
	float ForbidEmojiAnimationTime;//[Offset: 0x28, Size: 0x4]
	float CfgDrugVoiceCDTime;//[Offset: 0x2c, Size: 0x4]
	float CheckInsideHeatShieldFrequency;//[Offset: 0x30, Size: 0x4]
	float CfgTotemRecallHealthMax;//[Offset: 0x34, Size: 0x4]
	float DeathDestroyTime;//[Offset: 0x38, Size: 0x4]
	float OffScreenDistance;//[Offset: 0x3c, Size: 0x4]
	float OffScreenInnerRadius;//[Offset: 0x40, Size: 0x4]
	float CfgDyingHealthMax;//[Offset: 0x44, Size: 0x4]
	float CfgDyingInvincible;//[Offset: 0x48, Size: 0x4]
	float CfgRescuingTimeSec;//[Offset: 0x4c, Size: 0x4]
	float CfgRescueSelfTimeSec;//[Offset: 0x50, Size: 0x4]
	float KillAudioCd;//[Offset: 0x54, Size: 0x4]
	float KnockdownShieldOnSpeedScale;//[Offset: 0x58, Size: 0x4]
	float InspectHandsAnim1Weight;//[Offset: 0x5c, Size: 0x4]
	float InspectHandsAnim2Weight;//[Offset: 0x60, Size: 0x4]
	CurveFloat* DeathFadeOutCurve;//[Offset: 0x64, Size: 0x4]
	class PlayerTombBox* TombBoxClass;//[Offset: 0x68, Size: 0x4]
	FString KnockdownInstigatorAudio;//[Offset: 0x6c, Size: 0xc]
	FString KnockdownVictimAudio;//[Offset: 0x78, Size: 0xc]
	FString DeathInstigatorAudio;//[Offset: 0x84, Size: 0xc]
	FString DeathVictimAudio;//[Offset: 0x90, Size: 0xc]
	FString InstigatorKillAudio;//[Offset: 0x9c, Size: 0xc]
	FString BodyFallHumanAudio;//[Offset: 0xa8, Size: 0xc]
	FString BodyFallAndroidAudio;//[Offset: 0xb4, Size: 0xc]
	FString EnemyTeamKillAudio;//[Offset: 0xc0, Size: 0xc]
	FString TeamKillAudio;//[Offset: 0xcc, Size: 0xc]
	uint16[] CfgDyingTimeoutSec;//[Offset: 0xd8, Size: 0xc]
	FName[] MaterialParameterNames;//[Offset: 0xe4, Size: 0xc]
	DeathRagDollParams DeathRagDollParams;//[Offset: 0xf0, Size: 0x18]
	<enum,bool> AndroidDefine;//[Offset: 0x108, Size: 0x3c]
	<enum,float> RescueAlongNormalOffset;//[Offset: 0x144, Size: 0x3c]
	<enum,UseReplicatorAnimMontageData> UseRelicatorLegendConfig;//[Offset: 0x180, Size: 0x3c]
	UseReplicatorAnimMontageData DefaultUseRelicatorLegendConfig;//[Offset: 0x1bc, Size: 0x40]
	FName IdleMontageSectionName;//[Offset: 0x1fc, Size: 0x8]
	float FPPBlendOutTime;//[Offset: 0x204, Size: 0x4]
	float TPPBlendOutTime;//[Offset: 0x208, Size: 0x4]
	float StartOperateLength;//[Offset: 0x20c, Size: 0x4]
	int FilterID;//[Offset: 0x210, Size: 0x4]
	float InterpToPostionTime;//[Offset: 0x214, Size: 0x4]
	int UpGradeExp;//[Offset: 0x218, Size: 0x4]
	AkAudioEvent* UseReplicatorSound1P;//[Offset: 0x21c, Size: 0x4]
	AkAudioEvent* UseReplicatorSound3P;//[Offset: 0x220, Size: 0x4]

--------------------------------
Class: PlayerTombBox.DynamicMovementActor.Actor.Object
	BoxComponent* RootBox;//[Offset: 0x234, Size: 0x4]
	WidgetComponent* BannerWidget;//[Offset: 0x238, Size: 0x4]
	UIWidgetRes UIWidgetRes;//[Offset: 0x240, Size: 0x50]
	AkAudioEvent* TombBoxAkEvent;//[Offset: 0x290, Size: 0x4]
	TombBoxWidgetComponent* TombBoxWidgetComponent;//[Offset: 0x294, Size: 0x4]
	Vector HostVelocity;//[Offset: 0x298, Size: 0xc]
	HitResult UnrealHit;//[Offset: 0x2a4, Size: 0x88]
	ApexPlayerState* WeakApexPlayerState;//[Offset: 0x32c, Size: 0x8]
	uint32[] DisableSignalPkArray;//[Offset: 0x334, Size: 0xc]
	bool bNeedSignalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	enum RegionType;//[Offset: 0x341, Size: 0x1]
	bool bHaveAuthRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	bool bRespawnBannerExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1]
	bool bInitIsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 0x1]
	FName TombName;//[Offset: 0x348, Size: 0x8]
	uint32 TargetPlayerKey;//[Offset: 0x350, Size: 0x4]
	uint32 TeamIdx;//[Offset: 0x354, Size: 0x4]
	ApexCharacter* DamageCauser;//[Offset: 0x358, Size: 0x4]
	int DeadTime;//[Offset: 0x35c, Size: 0x4]
	int Quality;//[Offset: 0x360, Size: 0x4]
	uint32 FlagId;//[Offset: 0x364, Size: 0x4]
	bool bNeedDestroyCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x36c, Size: 0x4]
	int TombBoxInstanceID;//[Offset: 0x370, Size: 0x4]
	ParticleSystem* DestroyEffectTemplate;//[Offset: 0x374, Size: 0x4]
	float DestroyDelay;//[Offset: 0x378, Size: 0x4]
	float ForceMoveEndTime;//[Offset: 0x37c, Size: 0x4]
	Vector FindNearestNavMeshPointExtent;//[Offset: 0x380, Size: 0xc]
	TimerHandle ForceMoveEndTimerHandle;//[Offset: 0x390, Size: 0x8]
	MaterialInstanceDynamic*[] TombBoxQualityEffectMaterials;//[Offset: 0x398, Size: 0xc]
	FString QualityEffectMaterialName;//[Offset: 0x3a4, Size: 0xc]
	Color[] QualityEffectColor;//[Offset: 0x3b0, Size: 0xc]
	float OutlineFillDist;//[Offset: 0x3bc, Size: 0x4]
	bool bOutlineFill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	int[] OutlineIdArray;//[Offset: 0x3c4, Size: 0xc]
	int[] OutlineFillIdArray;//[Offset: 0x3d0, Size: 0xc]
	class TargetPoint* LeviathanTargetPointClass;//[Offset: 0x3dc, Size: 0x4]
	float LeviathanRadius;//[Offset: 0x3e0, Size: 0x4]
	float StopPhysicsLinearVelocitySquared;//[Offset: 0x3e4, Size: 0x4]
	float TotalDeltaTime;//[Offset: 0x3e8, Size: 0x4]
	float OverlapTime;//[Offset: 0x3ec, Size: 0x4]
	uint32[] OverlapIndexArray;//[Offset: 0x3f0, Size: 0xc]
	bool bPawnBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	DynamicMovementComponent_Projetile* Projetile;//[Offset: 0x400, Size: 0x4]
	float FallMaxSpeed;//[Offset: 0x404, Size: 0x4]
	float RandomMaxYaw;//[Offset: 0x408, Size: 0x4]
	float RandomMaxPitch;//[Offset: 0x40c, Size: 0x4]
	float GroundFreezeDelay;//[Offset: 0x410, Size: 0x4]
	PickUpListWrapperActor* SeekerPickupListWrapper;//[Offset: 0x414, Size: 0x4]
	int SeekerLegendId;//[Offset: 0x418, Size: 0x4]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x41c, Size: 0x4]
	float ImpulseForce;//[Offset: 0x428, Size: 0x4]
	void UpdateOutline();// 0x2722f44
	void UpdateBeaconLocation();// 0x2723984
	void UnRegisterToAIController(ApexAIController* AIC);// 0x272366c
	void ThrowOutTombBox(ApexCharacter* TargetCharacter);// 0x2723464
	void ThrowOut(ApexCharacter* TargetCharacter);// 0x27239ac
	void SetUIWidgetVisibility(bool IsShow);// 0x2723904
	void ServerLaunchTombBox(Vector LaunchVelocity);// 0x2722c8c
	void RPCMulticastShowTombBoxDestroy();// 0x24b8cd4
	void OnTombBoxMoveEnd(out const HitResult Hit, bool bServer, Actor* HitOwner);// 0x2723164
	void OnRepQuality();// 0x2722f58
	void OnRepPlayerState();// 0x2723998
	void OnRep_RegionType();// 0x2723630
	void OnRep_InitIsEmpty();// 0x2722f1c
	void OnPickupListWrapper(int ItemDataIndex, int LeftCount);// 0x272330c
	void OnInsertPickupData(int ItemDataIndex);// 0x2723294
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x272279c
	void OnGotRecoverBannerEvent(uint32 InPlayerKey, uint32 RecoverBannerPlayerKey);// 0x2722f6c
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2722948
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2722a90
	void OnBattleBehStateChanged(enum PrevState, enum CurState);// 0x2723028
	void InitUIWidget();// 0x27238f0
	PickUpListWrapperActor* InitTombBoxPickUpList(out const PickUpItemData[] ItemDataList, bool bIsSeekerPickUpList);// 0x27234dc
	void InitTombBox(ApexCharacter* TargetPlayer, out const PickUpItemData[] ItemDataList, enum Reason);// 0x27236e4
	void ImpactGround(int8 SurfaceType);// 0x27230e4
	void HandleMoveCompStop(out const HitResult HitInfo);// 0x27233c8
	int GetTargetPlayerKey();// 0x2722f00
	Vector GetNearestMapEdgePoint(Vector BasePoint);// 0x2722cfc
	Vector GetGroundPosition(Vector StartOrigin, Vector EndOrigin);// 0x2722e24
	Vector GetClosetAirdropPoint(Vector BaseOrigin);// 0x2722d90
	void ForceMoveEnd();// 0x2722f30
	void DisableSignal();// 0x2723658
	void CheckDisableSignal();// 0x2723644
	bool CanShowUIWidget(int TargetTeamIdx);// 0x2723870

--------------------------------
Class: DynamicMovementActor.Actor.Object
	SceneComponent* SmoothContainer;//[Offset: 0x1d0, Size: 0x4]
	ApexCharacter* OwnerApexCharacter;//[Offset: 0x1d4, Size: 0x8]
	DynamicMovementComponent* CurrentMovementComponent;//[Offset: 0x1dc, Size: 0x4]

--------------------------------
Class: ApexAIController.AIController.Controller.Actor.Object
	bool IsAIFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool IsMirageTutorialAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	bool IsAICanCastSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 0x1]
	bool IsAICanMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b, Size: 0x1]
	bool IsAICanAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	bool CanOpenBinTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	float TotalWeight;//[Offset: 0x32c, Size: 0x4]
	BTTaskStartFireMemory Memory;//[Offset: 0x330, Size: 0x10]
	Vector TargetLocation;//[Offset: 0x340, Size: 0xc]
	AIBehaviorRules BehaviorRules;//[Offset: 0x35c, Size: 0x10]
	BackpackComponent* BackpackCompoent;//[Offset: 0x36c, Size: 0x4]
	PingManagerComponent* PingManagerComponent;//[Offset: 0x370, Size: 0x4]
	EmojiGiveALikeMgr* EmojiGiveALikeMgr;//[Offset: 0x374, Size: 0x4]
	FiniteBattleBehStateMachine* FiniteBattleBehStateMachine;//[Offset: 0x378, Size: 0x4]
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x37c, Size: 0x4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x380, Size: 0x4]
	ApexAIPerceptionComponent* AIPerceptionComp;//[Offset: 0x384, Size: 0x4]
	ApexAIComponent* AIComp;//[Offset: 0x388, Size: 0x4]
	PickupManagerComponent* PickupManagerComp;//[Offset: 0x38c, Size: 0x4]
	StateMachineComponent* StateMachineComp;//[Offset: 0x390, Size: 0x4]
	DrugRecommendComponent* DrugRecommendComp;//[Offset: 0x394, Size: 0x4]
	enum MaxShieldMode;//[Offset: 0x398, Size: 0x1]
	float SetMaxShieldValue;//[Offset: 0x39c, Size: 0x4]
	bool DestroyWhenPawnGoDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	CharacterTeamItemUseTipComponent* CharacterTeamItemUseTipComponent;//[Offset: 0x3ac, Size: 0x4]
	enum ServerStateType;//[Offset: 0x3b0, Size: 0x1]
	DataReportComponent* DataReportComponent;//[Offset: 0x3b4, Size: 0x4]
	MsgAssistantCompoent* MsgAssitantComp;//[Offset: 0x3b8, Size: 0x4]
	ModifyAttributeData* RealCustomSpeed;//[Offset: 0x3d8, Size: 0x4]
	float MemoryTargetSeekerTime;//[Offset: 0x3e8, Size: 0x4]
	float LastDelayToClearDeadBodyTime;//[Offset: 0x3ec, Size: 0x4]
	Vector MemoryTargetTime;//[Offset: 0x3f0, Size: 0xc]
	Vector DiffTargetTime;//[Offset: 0x3fc, Size: 0xc]
	float DiffHearTargetTime;//[Offset: 0x408, Size: 0x4]
	Vector2D CurFireRecoilTarget;//[Offset: 0x40c, Size: 0x8]
	Vector2D ShootWeaponAddLocation;//[Offset: 0x414, Size: 0x8]
	bool DebugShootWeaponAddLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	bool DebugShootLeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 0x1]
	bool ShootLeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 0x1]
	Vector2D BodyEdgeAddLocation;//[Offset: 0x420, Size: 0x8]
	float BodyEdgeAddFoot;//[Offset: 0x428, Size: 0x4]
	float BodyEdgeShootKeepTime;//[Offset: 0x42c, Size: 0x4]
	float ParachuteJumpForwardInput;//[Offset: 0x430, Size: 0x4]
	bool ParachuteJumpInputStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 0x1]
	int FollowerIndex;//[Offset: 0x438, Size: 0x4]
	int AIIndex;//[Offset: 0x43c, Size: 0x4]
	int AIType;//[Offset: 0x440, Size: 0x4]
	bool AlreadyEquipmentGeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	Actor* CurTarget;//[Offset: 0x448, Size: 0x4]
	<Actor*,EnemyInfo> EnemyInfoList;//[Offset: 0x44c, Size: 0x3c]
	Actor*[] EnemySeenInfoList;//[Offset: 0x488, Size: 0xc]
	<Actor*> EnemyList;//[Offset: 0x494, Size: 0x3c]
	<Actor*,float> MemoryList;//[Offset: 0x4d0, Size: 0x3c]
	<Actor*> SeenList;//[Offset: 0x50c, Size: 0x3c]
	double WhoAttackMeTimestamp;//[Offset: 0x550, Size: 0x8]
	bool TargetInsight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1]
	FString[] ListofSightBlock;//[Offset: 0x55c, Size: 0xc]
	Vector AILandLocation;//[Offset: 0x568, Size: 0xc]
	int[] YouHaveBeentoPointVec;//[Offset: 0x574, Size: 0xc]
	int CurLootArea;//[Offset: 0x580, Size: 0x4]
	float EnterTargetPointSpendTime;//[Offset: 0x584, Size: 0x4]
	<PlayerTombBox*> TombBoxs;//[Offset: 0x588, Size: 0x3c]
	ApexAITeamController* TeamManager;//[Offset: 0x5c4, Size: 0x4]
	float UpdateBeenSeenInterval;//[Offset: 0x614, Size: 0x4]
	<byte,float> TakeDamageReduceScale;//[Offset: 0x618, Size: 0x3c]
	bool IsCheckTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 0x1]
	float YawChangeSpeed;//[Offset: 0x658, Size: 0x4]
	bool EnableLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]
	bool EnableJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65d, Size: 0x1]
	float AILevelRatio;//[Offset: 0x660, Size: 0x4]
	int MaxAILevel;//[Offset: 0x664, Size: 0x4]
	int RelativeLevelLimit;//[Offset: 0x668, Size: 0x4]
	int NotKillAILevel;//[Offset: 0x66c, Size: 0x4]
	<int> NotKillWeaponIds;//[Offset: 0x670, Size: 0x3c]
	int AILevel;//[Offset: 0x6b0, Size: 0x4]
	enum CurrentPhase;//[Offset: 0x6bc, Size: 0x1]
	bool IsShowMoveTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 0x1]
	float SuperJumpHight;//[Offset: 0x6c0, Size: 0x4]
	bool IsDebugLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 0x1]
	DynamicDmgCurve DynamicDmgCurve;//[Offset: 0x6dc, Size: 0x324]
	HitPositionConfig[] HitPositionConfigVec;//[Offset: 0xa00, Size: 0xc]
	float OnlyUpperBodyDist;//[Offset: 0xa0c, Size: 0x4]
	bool DrawAIDebugShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	float ExpIncreaseScale;//[Offset: 0xa14, Size: 0x4]
	SVONNavigationComponent* SVONComponent;//[Offset: 0xd40, Size: 0x4]
	Vector DebugAILandLocation;//[Offset: 0xd4c, Size: 0xc]
	ApexTreasureDoor* TreasureDoor;//[Offset: 0xd68, Size: 0x4]
	double UnreachableValidTime;//[Offset: 0xdb8, Size: 0x8]
	bool EnableMultiClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 0x1]
	bool EnableRepath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc1, Size: 0x1]
	bool EnableMove2DynamicTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc2, Size: 0x1]
	bool EnableShiftPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc3, Size: 0x1]
	int8 AICfgForbiddenZoneTime;//[Offset: 0xdc4, Size: 0x1]
	float AIFocusCanSprintAngle;//[Offset: 0xdc8, Size: 0x4]
	bool EnableAIHandleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcc, Size: 0x1]
	bool DisableRaycastPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcd, Size: 0x1]
	bool EnableJumpBlockOnFirstSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdce, Size: 0x1]
	FString AIHostFuncKeyStart;//[Offset: 0xdf4, Size: 0xc]
	int AIHostFuncNum;//[Offset: 0xe00, Size: 0x4]
	bool PickBannerInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe04, Size: 0x1]
	uint32 CurRecoverBannerPlayerKey;//[Offset: 0xe08, Size: 0x4]
	bool PingSelfBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 0x1]
	float TeammateEnemyExtent;//[Offset: 0xe1c, Size: 0x4]
	float SelfEnemyExtent;//[Offset: 0xe20, Size: 0x4]
	float PingInterval;//[Offset: 0xe24, Size: 0x4]
	float IntervalFloat;//[Offset: 0xe28, Size: 0x4]
	void TriggerSkill(int SkillID);// 0x23f7ebc
	void TriggerAIHostFuncBy(ApexPlayerController* Target, int FuncIdx, int CurrentValue);// 0x23f75c0
	void StopAILogic(bool StopTick);// 0x23f7540
	void SetWhoAttackMe(Controller* CharacterByDamageCauser, float Damage);// 0x23f809c
	void SetOpenningTreasureDoor(ApexTreasureDoor* Door);// 0x23f76c8
	void ServerHandleMsg(enum Msg, enum StateSource);// 0x23f7b28
	void ResumeAILogic();// 0x23f752c
	void OperateRespawnBeacon(enum OperateCode, ApexRespawnBeacon* RespawnBeacon);// 0x23f7468
	void OnSkillEvent(int SkillID, byte SkillStopReason);// 0x23f7d88
	void OnOpenCarePackage(CarePackage* Actor);// 0x23f7f34
	void OnOpenBinTest(BinActor* Door);// 0x23f7fac
	void MovementInput(float DeltaTime);// 0x23f7e44
	bool IsOnZipline();// 0x23f7764
	bool IsInTacticalMomentForbiddenVolume();// 0x23f77b4
	bool IsClimbing();// 0x23f778c
	void HandleMsg(enum Msg, enum StateSource);// 0x23f7c24
	void HandleMessage(enum Phase);// 0x23f7ce8
	ApexAITeamController* GetTeamManager();// 0x23f79c4
	PingManagerComponent* GetPingManagerComponent();// 0x23f81ac
	enum GetPhase();// 0x23f7d60
	MetaAIController* GetMetaAIManager();// 0x23f799c
	FiniteBattleBehStateMachine* GetFiniteBattleBehStateMachine();// 0x23f8160
	EmojiGiveALikeMgr* GetEmojiGiveALikeMgr();// 0x23f817c
	BlackboardComponent* GetBlackboardComp();// 0x23f8220
	BackpackComponent* GetBackPackComponent();// 0x23f81dc
	void GetAllEnemy(bool OnlPlayer, out Actor*[] OutActors);// 0x23f7898
	void DoDeathEvent();// 0x23f820c
	void DelTombBox(PlayerTombBox* Box);// 0x23f8024
	void DelAIMoveState(enum Reason);// 0x23f79ec
	void ClientHandleMsg(enum Msg, enum StateSource);// 0x23f7a64
	void ClientEnterStageFight_AICanJump();// 0x23f7988
	bool CheckRespawnBeacon(ApexRespawnBeacon* RespawnBeacon);// 0x23f73e8
	void ChangeDynamicDmgCurve(enum CurveType, CurveFloat* ExternalCurve);// 0x23f77dc
	void BreakOpenTreasureDoor();// 0x23f7748
	void AIUseSkillByBlueprint(int SkillID);// 0x23f7370

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x288, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x288, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x28c, Size: 0x4]
	BrainComponent* BrainComponent;//[Offset: 0x290, Size: 0x4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x294, Size: 0x4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x298, Size: 0x4]
	BlackboardComponent* Blackboard;//[Offset: 0x29c, Size: 0x4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x2a0, Size: 0x4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x2a4, Size: 0x4]
	delegate ReceiveMoveCompleted;//[Offset: 0x2a8, Size: 0xc]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x4ac4a58
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4ac4968
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x4ac45f0
	void SetMoveBlockDetection(bool bEnable);// 0x4ac4bb4
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x4ac4b2c
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x2ce6f18
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x4ac46a0
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4ac4ccc
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4ac4f74
	void K2_SetFocus(Actor* NewFocus);// 0x4ac47a0
	void K2_SetFocalPoint(Vector FP);// 0x4ac4818
	void K2_ClearFocus();// 0x4ac4764
	bool HasPartialPath();// 0x4ac4c7c
	PathFollowingComponent* GetPathFollowingComponent();// 0x4ac4684
	byte GetMoveStatus();// 0x4ac4ca4
	Vector GetImmediateMoveDestination();// 0x4ac4c34
	Actor* GetFocusActor();// 0x4ac4778
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x4ac4888
	Vector GetFocalPoint();// 0x4ac4920
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x4ac4668
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4ac49e0

--------------------------------
Class: ApexTreasureDoor.ApexImpusleDoor.ApexDoor.SignificanceManagedActor.Actor.Object
	int TreasureDoorID;//[Offset: 0x3d0, Size: 0x4]
	float OpenDuringTime;//[Offset: 0x3d4, Size: 0x4]
	float FXTime;//[Offset: 0x3d8, Size: 0x4]
	ItemDefineID KeyItemID;//[Offset: 0x3e0, Size: 0x10]
	int VaultOpenedEventID;//[Offset: 0x3f0, Size: 0x4]
	int NoVaultKeyPingID;//[Offset: 0x3f4, Size: 0x4]
	int SelfHaveVaultKeyPingID;//[Offset: 0x3f8, Size: 0x4]
	int TeammateHaveVaultKeyPingID;//[Offset: 0x3fc, Size: 0x4]
	CommonBtnComponent* TriggeredBtnComponent;//[Offset: 0x400, Size: 0x4]
	bool IsAlreadyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	bool IsOpenning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 0x1]
	PrimitiveComponent* LockComp;//[Offset: 0x420, Size: 0x4]
	ParticleSystemComponent* DoorLockAlarmParticle;//[Offset: 0x424, Size: 0x4]
	ParticleSystemComponent* LightAlarmParticle;//[Offset: 0x428, Size: 0x4]
	float AlarmInterval;//[Offset: 0x42c, Size: 0x4]
	int AlarmCountPerExcute;//[Offset: 0x430, Size: 0x4]
	FName TreasureDoorAlarmSound;//[Offset: 0x434, Size: 0x8]
	Vector AlarmLocation;//[Offset: 0x43c, Size: 0xc]
	int CurAlarmCount;//[Offset: 0x448, Size: 0x4]
	BoxComponent* ForbiddenBox;//[Offset: 0x458, Size: 0x4]
	bool bDebugAreadlyOpenForbidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	float ForbiddenCheckInterval;//[Offset: 0x460, Size: 0x4]
	Vector ForbiddenTransLocation;//[Offset: 0x464, Size: 0xc]
	enum[] ForbiddenTransStates;//[Offset: 0x470, Size: 0xc]
	ApexCharacter*[] NeedCheckForbiddenInPlayers;//[Offset: 0x47c, Size: 0xc]
	void SetLockPrimitiveComp(PrimitiveComponent* Comp);// 0x24b4cc0
	void ProcessTreasurePickups();// 0x24b4b84
	void OnTreasurePicked(Actor* PickByActor);// 0x24b4b0c
	void OnRep_RepIsAlreadyOpen();// 0x24b4b98
	void OnRep_CurAlarmCount();// 0x24b4af8
	void OnProgress(enum State);// 0x24b4d5c
	void OnForbiddenIn(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x24b48fc
	void OnDropKey(Controller* Controller, ItemDefineID ItemDefineID, int count);// 0x24b4bac
	bool IsOpend();// 0x24b4d34
	void CheckForForbiddenOut();// 0x24b48e8
	void BP_TreasureDoorOnProgress(enum State);// 0x2ce6f18
	void BP_TreasureDoorFXStart_Event();// 0x2ce6f18

--------------------------------
Class: ApexImpusleDoor.ApexDoor.SignificanceManagedActor.Actor.Object
	float OpenDoorImpusle;//[Offset: 0x3bc, Size: 0x4]
	float BulletImpusleRate;//[Offset: 0x3c0, Size: 0x4]
	float OpenDoorImpusleMin;//[Offset: 0x3c4, Size: 0x4]
	void NetMulticastApplyImpusleEx(Vector Impusle, int Sequence);// 0x246bc5c
	void NetMulticastApplyImpusle(Vector Impusle, int Sequence);// 0x246bd20

--------------------------------
Class: ApexDoor.SignificanceManagedActor.Actor.Object
	bool bHisPenetratingAvaliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bBackDoorChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	enum DoorType;//[Offset: 0x24e, Size: 0x1]
	enum DoorDataRepTyp;//[Offset: 0x24f, Size: 0x1]
	bool CanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	enum[] DisableOpenPawnStates;//[Offset: 0x254, Size: 0xc]
	float InteractingCD;//[Offset: 0x260, Size: 0x4]
	bool HasCloseOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	float MinAutoOpenSpeedSquared;//[Offset: 0x268, Size: 0x4]
	float NeedTraceDist;//[Offset: 0x26c, Size: 0x4]
	float NoBtnNeedTraceTime;//[Offset: 0x270, Size: 0x4]
	float DoorHalfThickness;//[Offset: 0x274, Size: 0x4]
	float CanInteractDistance;//[Offset: 0x278, Size: 0x4]
	float AutoOpenAngle;//[Offset: 0x27c, Size: 0x4]
	bool UseCameraToFindObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	float DistanceToIgnoreObstable;//[Offset: 0x284, Size: 0x4]
	float MaxOverlapRadius;//[Offset: 0x288, Size: 0x4]
	bool CanBeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float MaxHP;//[Offset: 0x290, Size: 0x4]
	float HP;//[Offset: 0x294, Size: 0x4]
	float HPEx;//[Offset: 0x298, Size: 0x4]
	float CommonDamageValue;//[Offset: 0x29c, Size: 0x4]
	float KickDamageValue;//[Offset: 0x2a0, Size: 0x4]
	class Actor* BrokenEffect;//[Offset: 0x2a4, Size: 0x4]
	AnimationAsset* BrokenAnimationToPlay;//[Offset: 0x2a8, Size: 0x4]
	float BrokenFindFloorDist;//[Offset: 0x2ac, Size: 0x4]
	DoorDamageType[] CanDamageTypeList;//[Offset: 0x2b0, Size: 0xc]
	float DestroyBrokenTime;//[Offset: 0x2bc, Size: 0x4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	int DoorState;//[Offset: 0x2c4, Size: 0x4]
	int DoorStateEx;//[Offset: 0x2c8, Size: 0x4]
	int DoorBrokenState;//[Offset: 0x2cc, Size: 0x4]
	int DoorBrokenStateEx;//[Offset: 0x2d0, Size: 0x4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	ApexCharacter* InteractingCharacter;//[Offset: 0x2ec, Size: 0x4]
	uint32 InteractingTeamId;//[Offset: 0x2f0, Size: 0x4]
	<uint32,float> InteractingTeamActiveTimes;//[Offset: 0x2f4, Size: 0x3c]
	ApexCharacter* Autonomous_NearDoorCharacter;//[Offset: 0x330, Size: 0x4]
	StaticMeshComponent* DoorModel;//[Offset: 0x334, Size: 0x4]
	StaticMeshComponent* DoorModelEx;//[Offset: 0x338, Size: 0x4]
	BoxComponent* DoorCollisionBox;//[Offset: 0x33c, Size: 0x4]
	BoxComponent* DoorCollisionBoxEx;//[Offset: 0x340, Size: 0x4]
	MaterialInterface*[] SavedDoorModelMaterials;//[Offset: 0x344, Size: 0xc]
	MaterialInterface*[] SavedDoorModelMaterialsEx;//[Offset: 0x350, Size: 0xc]
	SceneComponent* DoorModelWrapper;//[Offset: 0x35c, Size: 0x4]
	SceneComponent* DoorModelWrapperEx;//[Offset: 0x360, Size: 0x4]
	PrimitiveComponent*[] Accessories;//[Offset: 0x364, Size: 0xc]
	PrimitiveComponent*[] AccessoriesEx;//[Offset: 0x370, Size: 0xc]
	BoxComponent* InteractionBox;//[Offset: 0x37c, Size: 0x4]
	BoxComponent* AutoOpenInteractionBox;//[Offset: 0x380, Size: 0x4]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x384, Size: 0x4]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x388, Size: 0x4]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	DoorOverlapingActor[] NearDoorActors;//[Offset: 0x3b0, Size: 0xc]
	void TriggerOpenDoor();// 0x244d62c
	void TriggerDoor(Vector Point, bool bIsOpen);// 0x244d648
	void TriggerCloseDoor();// 0x15687c0
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x24193a8
	bool StuckInto(Actor* InActor);// 0x244ca94
	void SetDoorBroken(bool bExtraDoor, Actor* brokenCauser);// 0x244d418
	void SetCanOpenDoor(bool bInCanOpen);// 0x244d814
	void SetCanDamageDoor(bool bCanDamage);// 0x244d714
	void SetCanCloseDoor(bool bInCanClose);// 0x244d794
	void RPC_MulticastReset();// 0x244d3a8
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor);// 0x244cd08
	void RefreshUIOnClient();// 0x244d404
	void OnRep_RepInteractCharacter();// 0xfd338c
	void OnRep_RepDoorStateEx();// 0x244d000
	void OnRep_RepDoorState();// 0x244d014
	void OnRep_RepDoorHPEx();// 0x244cfd8
	void OnRep_RepDoorHP();// 0x244cfec
	void OnRep_RepDoorBrokenEx();// 0x244d380
	void OnRep_RepDoorBroken();// 0x244d394
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x244d028
	void OnDoorRPC(Character* Character, bool bIsOpen);// 0x244d4e0
	void OnDoorAniFinsihDelegate__DelegateSignature(ApexDoor* Door);// 0x2ce6f18
	void OnCharacterDead();// 0x244d36c
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x244d170
	bool IsSameTeam(Actor* Other);// 0x244cba4
	void InitAccessories(PrimitiveComponent*[] InAccessories, PrimitiveComponent*[] InAccessoriesEx);// 0x244d894
	void Init(BoxComponent* InInteractionBox, BoxComponent* InAutoOpenInteractionBox, SceneComponent* InDoorModelWrapper, SceneComponent* InDoorModelWrapperEx);// 0x244da28
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x244cc2c
	int GetPointOnDoorDirection(Vector Point);// 0x244d5ac
	bool CanStuckInto(Actor* InActor);// 0x244cb1c
	void BP_DoorBroken_Callback(bool bExtraDoor);// 0x2ce6f18
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x2ce6f18
	void BP_DoorBlockedOpening_Callback();// 0x2ce6f18
	void BP_DoorBlockedClosing_Callback();// 0x2ce6f18
	void BP_DoorBinOpenDone_Callback();// 0x2ce6f18
	void BP_DoorBinOpen_Callback();// 0x2ce6f18
	void BP_DoorBinCloseDone_Callback();// 0x2ce6f18
	void BP_DoorBinClose_Callback();// 0x2ce6f18
	void BP_DoorBeAttacked_Callback(StaticMeshComponent* HitDoorMesh);// 0x2ce6f18
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x244ce74

--------------------------------
Class: SignificanceManagedActor.Actor.Object
	FName SignificanceTag;//[Offset: 0x1d4, Size: 0x8]
	enum SignificanceByType;//[Offset: 0x1dc, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0x1dd, Size: 0x1]
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0x2760504

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x46c, Size: 0xc]
	float LineThickness;//[Offset: 0x478, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x466e1c4
	Vector GetUnscaledBoxExtent();// 0x466e140
	Vector GetScaledBoxExtent();// 0x466e16c

--------------------------------
Class: DoorDamageType
	byte DamageType;//[Offset: 0x0, Size: 0x1]
	int SkillDamageTypeID;//[Offset: 0x4, Size: 0x4]
	float DamageRate;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: OutlineAndFillComponent.SignificanceManagedActorComponent.ActorComponent.Object
	bool bMaskable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	<PrimitiveComponent*> MarkerComps;//[Offset: 0xc0, Size: 0x3c]
	void SubtractEffectTallyWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x26c9e1c
	void SubtractEffectTally(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x26c9d14
	void SetMarkerCompEnemyMask(bool bInEnemyMask);// 0x26c9c14
	void RemoveMarkerComps(out const PrimitiveComponent*[] Comps, bool bIsOccluder);// 0x26ca554
	void RemoveMarkerComp(PrimitiveComponent* Comp, bool bIsOccluder);// 0x26ca644
	void RemoveEffectWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x26ca23c
	void RemoveEffect(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x26ca134
	void RemoveAllEffects(bool bIsOccluder);// 0x26c9c94
	void PlusEffectTallyWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x26ca02c
	void PlusEffectTally(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x26c9f24
	bool IsOutlineSeenThroughSmoke();// 0x26c9a64
	bool HasEffect(enum SourceType, int ConfigIdx);// 0x26c9a8c
	int GetCountTally(enum SourceType, int ConfigIdx);// 0x26c9b50
	bool AddMarkerCompsNotRefresh(out const PrimitiveComponent*[] Comps);// 0x26ca8bc
	void AddMarkerComps(out const PrimitiveComponent*[] Comps, bool bIsOccluder);// 0x26ca708
	bool AddMarkerCompNotRefresh(PrimitiveComponent* Comp);// 0x26ca964
	void AddMarkerComp(PrimitiveComponent* Comp, bool bIsOccluder);// 0x26ca7f8
	void AddEffectWithType(enum SourceType, enum OutlineType, bool bIsOccluder);// 0x26ca44c
	void AddEffect(enum SourceType, int ConfigIdx, bool bIsOccluder);// 0x26ca344

--------------------------------
Class: SignificanceManagedActorComponent.ActorComponent.Object
	FName SignificanceTag;//[Offset: 0xac, Size: 0x8]
	enum SignificanceByType;//[Offset: 0xb4, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0xb5, Size: 0x1]
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0x25bed74

--------------------------------
Class: DoorOverlapingActor
	Actor* TargetActor;//[Offset: 0x0, Size: 0x4]
	Vector CollisionCenterOffset;//[Offset: 0x4, Size: 0xc]
	float CollisionRadius;//[Offset: 0x10, Size: 0x4]
	float CollisionHalfHeight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 0x4]
	int TypeSpecificID;//[Offset: 0x4, Size: 0x4]
	int64 InstanceID;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	ApexDoor* TriggeredDoor;//[Offset: 0xac, Size: 0x4]
	BinActor* TriggeredBin;//[Offset: 0xb4, Size: 0x4]
	HarvesterActor* TriggerHarvester;//[Offset: 0xc8, Size: 0x4]
	Workbench* TriggerWorkbench;//[Offset: 0xcc, Size: 0x4]
	int TriggerWorkbenchSide;//[Offset: 0xd0, Size: 0x4]
	void UIClickReplicatorUse();// 0x2578ea4
	void UIClickReplicatorOutUse();// 0xf4a07c
	void UIClickOpenExtract();// 0x240523c
	void UIClickOpenBin();// 0x2517b18
	void UIClick(bool bIsOpen);// 0x25790f8
	void ServerUseReplicator(Workbench* WorkbenchActor, int UseSide);// 0x2578da8
	void ServerOutUseReplicator(Workbench* WorkbenchActor);// 0x2578cf4
	void ServerOpenBin(BinActor* BinActor);// 0x2578f74
	void ServerExtract(HarvesterActor* HarvesterActor);// 0x2578ec0
	FString GetModuleName();// 0x25072e0
	void DoorRequireRPC(ApexDoor* actionDoor, bool bIsOpen);// 0x2579180
	void ClientStartOpeningProgress(bool bShow, float TotalTime);// 0x2579028
	void BP_ShowTreasureDoorOpeningProgress(bool bShow, float TotalTime);// 0x1255bf8
	void BP_ShowExtractBtn(bool bShow);// 0x1255bf8
	void BP_ShowDoorBtn(bool bShow, bool bOpen, bool bHasAuto, int DoorType);// 0x1255bf8

--------------------------------
Class: Workbench.Actor.Object
	bool IsSideOpening1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	bool IsSideOpening2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 0x1]
	bool IsSideOpening3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x226, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x228, Size: 0x4]
	delegate OnWorkbenchStateChange;//[Offset: 0x22c, Size: 0xc]
	FString LinkGuid;//[Offset: 0x238, Size: 0xc]
	HarvesterActor*[] SubHarvesterActorArray;//[Offset: 0x244, Size: 0xc]
	SkeletalMeshComponent* Mesh;//[Offset: 0x250, Size: 0x4]
	ParticleSystemComponent* HeadIcon;//[Offset: 0x254, Size: 0x4]
	ParticleSystemComponent* ReplicateCompleteLight;//[Offset: 0x258, Size: 0x4]
	ParticleSystemComponent* SdieSmoke1;//[Offset: 0x25c, Size: 0x4]
	ParticleSystemComponent* SdieSmoke2;//[Offset: 0x260, Size: 0x4]
	ParticleSystemComponent* SdieSmoke3;//[Offset: 0x264, Size: 0x4]
	ParticleSystemComponent* SdieWindowLight1;//[Offset: 0x268, Size: 0x4]
	ParticleSystemComponent* SdieWindowLight2;//[Offset: 0x26c, Size: 0x4]
	ParticleSystemComponent* SdieWindowLight3;//[Offset: 0x270, Size: 0x4]
	BoxComponent* CheckBox1;//[Offset: 0x274, Size: 0x4]
	BoxComponent* CheckBox2;//[Offset: 0x278, Size: 0x4]
	BoxComponent* CheckBox3;//[Offset: 0x27c, Size: 0x4]
	BoxComponent* CheckBox1;//[Offset: 0x280, Size: 0x4]
	BoxComponent* CheckBox2;//[Offset: 0x284, Size: 0x4]
	BoxComponent* CheckBox3;//[Offset: 0x288, Size: 0x4]
	SceneComponent* OperatingPoint1;//[Offset: 0x28c, Size: 0x4]
	SceneComponent* OperatingPoint2;//[Offset: 0x290, Size: 0x4]
	SceneComponent* OperatingPoint3;//[Offset: 0x294, Size: 0x4]
	int MiniMapIndex;//[Offset: 0x298, Size: 0x4]
	bool CanReplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	enum WorkbenchType;//[Offset: 0x2a4, Size: 0x1]
	float MeshAnimationTime;//[Offset: 0x2a8, Size: 0x4]
	float NormalMashInterval;//[Offset: 0x2ac, Size: 0x4]
	<int,int> PlayerKeySideMap;//[Offset: 0x2b0, Size: 0x3c]
	CarePackageItemSocketDataAsset* RelicatorItemSocketDataAsset;//[Offset: 0x2ec, Size: 0x4]
	FName ReplicateEffectColorParamName;//[Offset: 0x2f0, Size: 0x8]
	<int,Vector> ReplicateEffectColorConfig;//[Offset: 0x2f8, Size: 0x3c]
	UseAngleConfigData[] UseAngleConfig;//[Offset: 0x334, Size: 0xc]
	int ReplicatorSideIndex1;//[Offset: 0x340, Size: 0x4]
	int ReplicatorSideIndex2;//[Offset: 0x344, Size: 0x4]
	int ReplicatorSideIndex3;//[Offset: 0x348, Size: 0x4]
	<int,Vector> ReplicateEffectUIPosConfig;//[Offset: 0x34c, Size: 0x3c]
	float PlayerCanInteractionDistSqr;//[Offset: 0x388, Size: 0x4]
	float PlayerCanInteractionHight;//[Offset: 0x38c, Size: 0x4]
	float ReplicateTime;//[Offset: 0x390, Size: 0x4]
	float ReplicateLimitPlayerTime;//[Offset: 0x394, Size: 0x4]
	int BtnGuideID;//[Offset: 0x398, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x39c, Size: 0xc]
	AkComponent* OwnedAudioEffectManager;//[Offset: 0x3a8, Size: 0x4]
	AkAudioEvent* LoopSound;//[Offset: 0x3ac, Size: 0x20]
	AkAudioEvent* DoorOpenSound;//[Offset: 0x3cc, Size: 0x20]
	AkAudioEvent* DoorCloseSound;//[Offset: 0x3ec, Size: 0x20]
	AkAudioEvent* ReplicateStartSound;//[Offset: 0x40c, Size: 0x20]
	AkAudioEvent* ReplicateCompleteSound;//[Offset: 0x42c, Size: 0x20]
	AkAudioEvent* ReplicateWarningToEnd;//[Offset: 0x44c, Size: 0x20]
	float TimeToEndWaring;//[Offset: 0x46c, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	bool IsOperatingSide1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1]
	bool IsOperatingSide2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 0x1]
	bool IsOperatingSide3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x473, Size: 0x1]
	ReplicatingRepStateData ReplicatingStateSide1;//[Offset: 0x474, Size: 0x8]
	ReplicatingRepStateData ReplicatingStateSide2;//[Offset: 0x47c, Size: 0x8]
	ReplicatingRepStateData ReplicatingStateSide3;//[Offset: 0x484, Size: 0x8]
	TimerHandle SideReplicateTimer1;//[Offset: 0x490, Size: 0x8]
	TimerHandle SideReplicateTimer2;//[Offset: 0x498, Size: 0x8]
	TimerHandle SideReplicateTimer3;//[Offset: 0x4a0, Size: 0x8]
	TimerHandle SideSoundTimer1;//[Offset: 0x4a8, Size: 0x8]
	TimerHandle SideSoundTimer2;//[Offset: 0x4b0, Size: 0x8]
	TimerHandle SideSoundTimer3;//[Offset: 0x4b8, Size: 0x8]
	<uint64,int> WorkbenchItemSideCacheMap;//[Offset: 0x4c0, Size: 0x3c]
	<int,int> WorkbenchSideItemCount;//[Offset: 0x4fc, Size: 0x3c]
	<int,int> WorkbenchSignMap;//[Offset: 0x538, Size: 0x3c]
	AudioEventAsync* AudioEventSide1;//[Offset: 0x574, Size: 0x4]
	AudioEventAsync* AudioEventSide2;//[Offset: 0x578, Size: 0x4]
	AudioEventAsync* AudioEventSide3;//[Offset: 0x57c, Size: 0x4]
	TimerHandle MeshTickIntervalToNormalHandle;//[Offset: 0x580, Size: 0x8]
	void ReplicateItems(const int InPlayerKey, const int SideIndex, const int[] Items, const bool IsShield, const int AppendExp);// 0x283963c
	void PlayWaringToEndSound();// 0x2839848
	void OnRep_RepOperatingSide3();// 0x2839898
	void OnRep_RepOperatingSide2();// 0x28398ac
	void OnRep_RepOperatingSide1();// 0x28398c0
	void OnRep_ReplicatingStateSide3();// 0x283985c
	void OnRep_ReplicatingStateSide2();// 0x2839870
	void OnRep_ReplicatingStateSide1();// 0x2839884
	void OnPickUpBePicked(PickUpItemData InItemData, int InCount);// 0x283941c

--------------------------------
Class: HarvesterActor.SignificanceManagedActor.Actor.Object
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x238, Size: 0x4]
	bool bIsHideMarkIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	FString LinkGuid;//[Offset: 0x254, Size: 0xc]
	SkeletalMeshComponent* Mesh;//[Offset: 0x260, Size: 0x4]
	CapsuleComponent* Capsule;//[Offset: 0x264, Size: 0x4]
	SphereComponent* CheckSphere;//[Offset: 0x268, Size: 0x4]
	SphereComponent* AutoCheckSphere;//[Offset: 0x26c, Size: 0x4]
	AkComponent* OwnedAudioEffectManager;//[Offset: 0x270, Size: 0x4]
	bool CanExtract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	int MaterialNum;//[Offset: 0x278, Size: 0x4]
	float ServerCheckDist;//[Offset: 0x27c, Size: 0x4]
	Vector UIFollowPos;//[Offset: 0x280, Size: 0xc]
	int BtnGuideID;//[Offset: 0x28c, Size: 0x4]
	int MiniMapIndex;//[Offset: 0x290, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x298, Size: 0xc]
	AnimationAsset* ExtractAnimation;//[Offset: 0x2a4, Size: 0x4]
	int[] ExtractPlayerKeys;//[Offset: 0x2a8, Size: 0xc]
	bool IsAutomousExtracted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	AkAudioEvent* LoopSound;//[Offset: 0x2b8, Size: 0x20]
	AkAudioEvent* ExtractSound;//[Offset: 0x2d8, Size: 0x20]
	void Reset();// 0x2585ca8
	void OnRep_RepExtractPlayerKeys();// 0x263f410

--------------------------------
Class: CarePackageItemSocketDataAsset.DataAsset.Object
	<int,CarePackageSocketData> CarePackageSocketDataMap;//[Offset: 0x20, Size: 0x3c]
	FName GetSocketName(int SlotIndex, int ItemID, int ItemIndex);// 0x255797c

--------------------------------
Class: CarePackageSocketData
	FName DefaultSocket;//[Offset: 0x0, Size: 0x8]
	<int,CarePackageIndexToSocketName> ItemTypeToSocketData;//[Offset: 0x8, Size: 0x3c]
	<int,CarePackageIndexToSocketName> ItemSubTypeToSocketData;//[Offset: 0x44, Size: 0x3c]
	<int,CarePackageIndexToSocketName> ItemIDToSocketData;//[Offset: 0x80, Size: 0x3c]

--------------------------------
Class: CarePackageIndexToSocketName
	FName[] IndexToSocketName;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x10]
	int count;//[Offset: 0x10, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x14, Size: 0xc]
	int Index;//[Offset: 0x20, Size: 0x4]
	int InsertTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: BattleItemAdditionalData
	enum DataType;//[Offset: 0x0, Size: 0x1]
	float FloatData;//[Offset: 0x4, Size: 0x4]
	int IntData;//[Offset: 0x8, Size: 0x4]
	int[] IntArray;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: UseAngleConfigData
	float StartAngle;//[Offset: 0x0, Size: 0x4]
	float EndAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicatingRepStateData
	enum State;//[Offset: 0x0, Size: 0x1]
	int Level;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AudioEventAsync.AsyncLoaderBase.Object
	Actor* _RoleActor;//[Offset: 0x24, Size: 0x4]
	Actor* _AttachActor;//[Offset: 0x28, Size: 0x4]
	AkComponent* _AkComponent;//[Offset: 0x2c, Size: 0x4]
	Object* _WorldContextObject;//[Offset: 0x50, Size: 0x4]
	void StopEvent();// 0x250199c
	int GetPlayingID();// 0x2501974

--------------------------------
Class: AsyncLoaderBase.Object
	Object* Context;//[Offset: 0x1c, Size: 0x4]
	void Reset();// 0x106b010

--------------------------------
Class: BinActor.SignificanceManagedActor.Actor.Object
	enum eZoneType;//[Offset: 0x240, Size: 0x1]
	LootZoneTypeInfo LootZoneTypeInfo;//[Offset: 0x244, Size: 0x10]
	enum eBuildingType;//[Offset: 0x254, Size: 0x1]
	SceneComponent* BinWrapper;//[Offset: 0x258, Size: 0x4]
	StaticMeshComponent* BinCover;//[Offset: 0x25c, Size: 0x4]
	StaticMeshComponent* BinLight;//[Offset: 0x260, Size: 0x4]
	StaticMeshComponent* BinBottom;//[Offset: 0x264, Size: 0x4]
	StaticMeshComponent* BinTray;//[Offset: 0x268, Size: 0x4]
	StaticMeshComponent* BinBase;//[Offset: 0x26c, Size: 0x4]
	MaterialInterface* BlueMat;//[Offset: 0x270, Size: 0x4]
	MaterialInterface* BlueLightMat;//[Offset: 0x274, Size: 0x4]
	ParticleSystemComponent* ParticleSys;//[Offset: 0x278, Size: 0x4]
	CapsuleComponent* KillBox;//[Offset: 0x27c, Size: 0x4]
	float KillBoxActiveTime;//[Offset: 0x280, Size: 0x4]
	BinDetectedBox[] Boxs;//[Offset: 0x284, Size: 0xc]
	BinDetectedBox AutoOpenBox;//[Offset: 0x290, Size: 0x18]
	float NeedTraceDist;//[Offset: 0x2a8, Size: 0x4]
	float NoBtnNeedTraceTime;//[Offset: 0x2ac, Size: 0x4]
	float Duration;//[Offset: 0x2b0, Size: 0x4]
	CurveVector* VectorCurve;//[Offset: 0x2b4, Size: 0x4]
	CurveFloat* FloatCurve;//[Offset: 0x2b8, Size: 0x4]
	Vector RotateAxis;//[Offset: 0x2bc, Size: 0xc]
	bool HasCloseOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool CanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	bool IsAICanOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 0x1]
	float TriggerOutDist;//[Offset: 0x2cc, Size: 0x4]
	Vector PropNotOpenOffset;//[Offset: 0x2d0, Size: 0xc]
	int NotOpenShowPropLevel;//[Offset: 0x2dc, Size: 0x4]
	float PropHeight;//[Offset: 0x2e0, Size: 0x4]
	<int,int> PropCount2TotalWidth;//[Offset: 0x2e4, Size: 0x3c]
	float DefaultTotalWidth;//[Offset: 0x320, Size: 0x4]
	float GenerateDelay;//[Offset: 0x324, Size: 0x4]
	bool bIsDynamicSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	int MaterialNum;//[Offset: 0x32c, Size: 0x4]
	int[] ItemsList;//[Offset: 0x330, Size: 0xc]
	FName ZoneVolumeID;//[Offset: 0x340, Size: 0x8]
	FName SpawnItemTableName;//[Offset: 0x348, Size: 0x8]
	int MaxSpawnItemRetryCount;//[Offset: 0x350, Size: 0x4]
	int SpawnItemCount;//[Offset: 0x354, Size: 0x4]
	int MiniSpawnItemCount;//[Offset: 0x358, Size: 0x4]
	FName OpenBinSoundName;//[Offset: 0x35c, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x364, Size: 0x4]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	int OpenBottomEventID;//[Offset: 0x380, Size: 0x4]
	TimelineComponent* MoveTimeline;//[Offset: 0x384, Size: 0x4]
	TimelineComponent* RotateTimeline;//[Offset: 0x388, Size: 0x4]
	byte MoveTimelineDirection;//[Offset: 0x38c, Size: 0x1]
	byte RotateTimelineDirection;//[Offset: 0x38d, Size: 0x1]
	bool IsAlreadyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	Vector TimelineVector;//[Offset: 0x3a8, Size: 0xc]
	float TimelineRotate;//[Offset: 0x3b4, Size: 0x4]
	Vector TrayTimelineVector;//[Offset: 0x3b8, Size: 0xc]
	float TrayTimelineRotate;//[Offset: 0x3c4, Size: 0x4]
	PickUpWrapperActor*[] PickUpList;//[Offset: 0x3c8, Size: 0xc]
	SceneComponent* BinBottomWrapper;//[Offset: 0x3d4, Size: 0x4]
	SceneComponent* BinTrayWrapper;//[Offset: 0x3d8, Size: 0x4]
	ParticleSystemComponent* BottomParticleSys;//[Offset: 0x3dc, Size: 0x4]
	int[] Heros;//[Offset: 0x3e0, Size: 0xc]
	float BottomDuration;//[Offset: 0x3ec, Size: 0x4]
	CurveVector* TrayVectorCurve;//[Offset: 0x3f0, Size: 0x4]
	CurveFloat* BottomFloatCurve;//[Offset: 0x3f4, Size: 0x4]
	Vector BottomRotateAxis;//[Offset: 0x3f8, Size: 0xc]
	Vector[] BottomPropPos;//[Offset: 0x404, Size: 0xc]
	float BottomGenerateDelay;//[Offset: 0x410, Size: 0x4]
	bool bIsBottomDynamicSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	int[] BottomItemsList;//[Offset: 0x418, Size: 0xc]
	FName BottomSpawnItemTableName;//[Offset: 0x424, Size: 0x8]
	int BottomSpawnItemCount;//[Offset: 0x42c, Size: 0x4]
	TimelineComponent* TrayMoveTimeline;//[Offset: 0x430, Size: 0x4]
	TimelineComponent* BottomRotateTimeline;//[Offset: 0x434, Size: 0x4]
	byte TrayMoveTimelineDirection;//[Offset: 0x438, Size: 0x1]
	byte BottomRotateTimelineDirection;//[Offset: 0x439, Size: 0x1]
	bool IsBottomOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	bool IsBlueBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1]
	MaterialInterface* RedMat;//[Offset: 0x454, Size: 0x4]
	MaterialInterface* RedLightMat;//[Offset: 0x458, Size: 0x4]
	int GroupID;//[Offset: 0x45c, Size: 0x4]
	bool IsSpatialGroupBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	FName SpatialGroupName;//[Offset: 0x464, Size: 0x8]
	int ID;//[Offset: 0x46c, Size: 0x4]
	enum[] DisableOpenPawnStates;//[Offset: 0x474, Size: 0xc]
	TimerHandle KillBoxActiveTimer;//[Offset: 0x488, Size: 0x8]
	float MinAdditinalSpeed;//[Offset: 0x4a8, Size: 0x4]
	float MaxAdditinalSpeed;//[Offset: 0x4ac, Size: 0x4]
	float TreasureSpawnDely;//[Offset: 0x4b0, Size: 0x4]
	enum IceBinState;//[Offset: 0x4b4, Size: 0x1]
	enum BinType;//[Offset: 0x4b5, Size: 0x1]
	int IceCoinItemID;//[Offset: 0x4b8, Size: 0x4]
	int MinIceCoinNum;//[Offset: 0x4bc, Size: 0x4]
	int MaxIceCoinNum;//[Offset: 0x4c0, Size: 0x4]
	int IceGrenadeItemID;//[Offset: 0x4c4, Size: 0x4]
	int MinIceGrenadeNum;//[Offset: 0x4c8, Size: 0x4]
	int MaxIceGrenadeNum;//[Offset: 0x4cc, Size: 0x4]
	float IceUnFreezeTime;//[Offset: 0x4d0, Size: 0x4]
	float IceUnFreezeValue;//[Offset: 0x4d4, Size: 0x4]
	float MiniMapWarningTime;//[Offset: 0x4d8, Size: 0x4]
	FName IceFreezeParamName;//[Offset: 0x4dc, Size: 0x8]
	FName IceFreezeMatParamName;//[Offset: 0x4e4, Size: 0x8]
	FString IceBinBankName;//[Offset: 0x4ec, Size: 0xc]
	FName IceMeltSoundName;//[Offset: 0x4f8, Size: 0x8]
	FString IceBoxSpawnBankName;//[Offset: 0x500, Size: 0xc]
	FName IceBoxSpawnSoundName;//[Offset: 0x50c, Size: 0x8]
	Vector IceBoxSpawnOffset;//[Offset: 0x514, Size: 0xc]
	bool IsNeedShowIceBinLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	StaticMeshComponent* IceMesh;//[Offset: 0x524, Size: 0x4]
	ParticleSystemComponent* IceEffect;//[Offset: 0x528, Size: 0x4]
	MaterialInstanceDynamic* DynamicLightMeshMatrial;//[Offset: 0x52c, Size: 0x4]
	void TrayMoveTimelineCallback(Vector Val);// 0x253e38c
	void StartUnFreeze();// 0x253e14c
	void SetID(int InID, enum InReason);// 0x253e1b0
	void SetCanOpen(bool bCanOpen);// 0x253e5a0
	void RotateTimelineCallback(float Val);// 0x253e490
	void PlayTimeline(bool bReverse);// 0x253e410
	void PlaySpawnSound();// 0x2436300
	void OnRep_RepIsBottomOpen();// 0x253e280
	void OnRep_RepIsBlueBin();// 0x253e26c
	void OnRep_RepIsAlreadyOpen();// 0x253e3fc
	void OnRep_IsFreeze();// 0x253e160
	void MoveTimelineCallback(Vector Val);// 0x253e508
	bool IsFreeze();// 0x253e174
	bool IsCanOpen();// 0x253e578
	void DynamicBinEarlyGenerate();// 0x253e19c
	void BP_OnServerOpen(Character* OpenCharacter);// 0x2ce6f18
	void BP_BinOpen_Callback();// 0x2ce6f18
	void BP_BinBottomOpen_Callback();// 0x2ce6f18
	void BottomRotateTimelineCallback(float Val);// 0x253e314
	void BottomPlayTimeline(bool bReverse);// 0x253e294

--------------------------------
Class: LootZoneTypeInfo
	enum LootZoneType;//[Offset: 0x0, Size: 0x1]
	FString CustomZoneType;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: BinDetectedBox
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xa8, Size: 0x7c]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	void Stop();// 0x47cfa70
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x47cf40c
	void SetTimelineLengthMode(byte NewLengthMode);// 0x47cf634
	void SetTimelineLength(float NewLength);// 0x47cf6ac
	void SetPlayRate(float NewRate);// 0x47cf7ec
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x47cf90c
	void SetNewTime(float NewTime);// 0x47cf74c
	void SetLooping(bool bNewLooping);// 0x47cf88c
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x47cf34c
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x47cf5b4
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x47cf4cc
	void ReverseFromEnd();// 0x47cfa84
	void Reverse();// 0x47cfa98
	void PlayFromStart();// 0x47cfaac
	void Play();// 0x47cfac0
	void OnRep_Timeline();// 0x47cf338
	bool IsReversing();// 0x47cfa20
	bool IsPlaying();// 0x47cfa48
	bool IsLooping();// 0x47cf864
	float GetTimelineLength();// 0x47cf724
	float GetPlayRate();// 0x47cf7c4
	float GetPlaybackPosition();// 0x2553a0c
	bool GetIgnoreTimeDilation();// 0x47cf58c

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0xc]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x1c, Size: 0xc]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x28, Size: 0xc]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x34, Size: 0xc]
	delegate TimelinePostUpdateFunc;//[Offset: 0x40, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x50, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x60, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x4]
	delegate InterpFunc;//[Offset: 0x4, Size: 0x10]
	FName TrackName;//[Offset: 0x14, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x4]
	delegate InterpFunc;//[Offset: 0x4, Size: 0x10]
	FName TrackName;//[Offset: 0x14, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x4]
	delegate InterpFunc;//[Offset: 0x4, Size: 0x10]
	FName TrackName;//[Offset: 0x14, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: PickUpWrapperActor.DynamicMovementActor.Actor.Object
	bool bClientHasPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	ParticleSystemComponent* PickupEffectComp;//[Offset: 0x2b0, Size: 0x4]
	ParticleSystemComponent*[] PickupParitcleComps;//[Offset: 0x2b8, Size: 0xc]
	int PickUpOutlineID;//[Offset: 0x2c8, Size: 0x4]
	int PickUpOutlineIDPing;//[Offset: 0x2cc, Size: 0x4]
	int[] WholeWeaponOutline;//[Offset: 0x2d0, Size: 0xc]
	int[] WholeWeaponOutlinePing;//[Offset: 0x2dc, Size: 0xc]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2e8, Size: 0x4]
	bool bIsAimPickUpWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool bIsPingPickUpWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	ItemDefineID DefineID;//[Offset: 0x310, Size: 0x10]
	int PickCount;//[Offset: 0x320, Size: 0x4]
	int DeriveID;//[Offset: 0x324, Size: 0x4]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	float TrainingModePickUpColdCD;//[Offset: 0x32c, Size: 0x4]
	bool bUseCustomTrainingModePickUpColdCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	enum SpawnReason;//[Offset: 0x331, Size: 0x1]
	float SpawnTimeSecond;//[Offset: 0x334, Size: 0x4]
	bool bApplyPickUpEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	uint32 DropByPlayerId;//[Offset: 0x33c, Size: 0x4]
	int DropTime;//[Offset: 0x340, Size: 0x4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x344, Size: 0xc]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	bool bEnableTrainingModeImpactGroundLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float TrainingModeImpactGroundLifeTime;//[Offset: 0x394, Size: 0x4]
	bool bEnableTrainingModeDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	ParticleSystem* TrainingModeDestroyEffect;//[Offset: 0x39c, Size: 0x20]
	DynamicMovementComponent_Projetile* Projectile;//[Offset: 0x3bc, Size: 0x4]
	ThrowProps ThrowProps;//[Offset: 0x3c0, Size: 0x38]
	bool bImpactGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	TimerHandle ScatterTimerHandle;//[Offset: 0x400, Size: 0x8]
	bool IsBlockCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	float ImpulseValue;//[Offset: 0x40c, Size: 0x4]
	Vector ImpulseOffset;//[Offset: 0x410, Size: 0xc]
	float MassOffset;//[Offset: 0x41c, Size: 0x4]
	Vector BoxRootSize;//[Offset: 0x420, Size: 0xc]
	Vector BoxLoundSize;//[Offset: 0x42c, Size: 0xc]
	float SimulatePhysicsTime;//[Offset: 0x438, Size: 0x4]
	float SimulatePhysicsStartTime;//[Offset: 0x43c, Size: 0x4]
	bool bForceSimulatePhysics_Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bEnableSimulatePhysics_Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	BoxComponent* BoxRootComponent;//[Offset: 0x444, Size: 0x4]
	FName PickUpProfileName;//[Offset: 0x448, Size: 0x8]
	FName PingCheckProfileName;//[Offset: 0x450, Size: 0x8]
	FName EffectMeshProfileName;//[Offset: 0x458, Size: 0x8]
	StaticMesh* StaticMeshPtr;//[Offset: 0x460, Size: 0x20]
	MaterialInterface*[] MaterialInterfacesPtr;//[Offset: 0x480, Size: 0xc]
	Transform StaticMeshTransform;//[Offset: 0x490, Size: 0x30]
	StaticMeshComponent* DynamicStaticMeshComponent;//[Offset: 0x4c0, Size: 0x4]
	bool bUseMultiMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	<int,int> MeshLevelMap;//[Offset: 0x4c8, Size: 0x3c]
	int[] CountMesh;//[Offset: 0x504, Size: 0xc]
	DataTable* PickupMeshTable;//[Offset: 0x510, Size: 0x20]
	DataTable* MeshTablePtr;//[Offset: 0x530, Size: 0x4]
	PickUpShowParticleConfig[] ShowParticleConfigs;//[Offset: 0x534, Size: 0xc]
	float PingCheckSphereRadius;//[Offset: 0x540, Size: 0x4]
	SphereComponent* PingCheck;//[Offset: 0x544, Size: 0x4]
	float LoadDelayTime;//[Offset: 0x548, Size: 0x4]
	StaticMeshComponent* EffectComponent;//[Offset: 0x59c, Size: 0x4]
	StaticMesh* MeshEffect;//[Offset: 0x5a0, Size: 0x4]
	bool bInfinitePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	byte FloatingRotAxis;//[Offset: 0x5b1, Size: 0x1]
	PrimitiveComponent* FloatingTargetComp;//[Offset: 0x5f0, Size: 0x4]
	PickupLockData PickupLockData;//[Offset: 0x620, Size: 0xc]
	bool bTeamPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	enum RegionType;//[Offset: 0x62d, Size: 0x1]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62e, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62f, Size: 0x1]
	bool bInLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 0x1]
	float RemainingBatterySync;//[Offset: 0x634, Size: 0x4]
	void UseMeshTable();// 0x26fd408
	void StopScatterTimer();// 0x26fd4bc
	void StartScatterTimer();// 0x26fd4d0
	void ShowPickUpWrapperActor();// 0x26fe214
	void SetPingPickUpWrapper(bool bIsPing);// 0x26fdd10
	void SetPickUpWrapperLifeSpan(float LifeTime);// 0x26fdb64
	void SetPickupDeriveID(int DID, bool IsInitData);// 0x26fe03c
	void SetIsTeamPickItem(bool InValue);// 0x26fcda4
	void SetInLand(bool InValue);// 0x26fcc7c
	void SetHighLightEffect(bool Enable);// 0x26fde38
	void SetbInfinitePickup(bool IsInfinite);// 0x26fd08c
	void SetApplyPickupTrace(bool InValue);// 0x26fcd24
	void SetAimPickUpWrapper(bool bIsAim);// 0x26fddb8
	void ServerLockPickupOwner(uint32 InOwnerKey, float LockTime, enum InReason);// 0x26fcf14
	void ScatterAttachment(out PickUpItemData[] PropsItemArray, out const Vector Center, out const Vector Direction);// 0x26fd4e4
	void RPCNetMulticastShowPickUpActor();// 0x26fe228
	void RPCNetMulticastModifyPickCount(int Count_New);// 0x26fe338
	void RPCNetMulticastHideActorForSomeTime(float Time);// 0x26fe284
	void ResetPickUpActorState();// 0x26fe188
	void ResetClientHasPickup();// 0x26fdee8
	void RegisterToPlayerPickUpList();// 0x26fded4
	void RegisterInGameRegion();// 0x26fd028
	void ParseOutDeriveIDByData();// 0x26fdfb0
	void OnWrapperPicked__DelegateSignature(PickUpItemData PickUpItemData, int LeftCount);// 0x2ce6f18
	void OnRep_TrainingModeDestroyEffect();// 0x26fdbdc
	void OnRep_RemainingBatterySync();// 0x26fdefc
	void OnRep_RegionType();// 0x26fd03c
	void OnRep_PickupLockData();// 0x26fd014
	void OnRep_DropTime();// 0x26fdf10
	void OnRep_DropByPlayerId();// 0x26fdf24
	void OnRep_CanPickupByBinSync();// 0x26fd050
	void OnProjectileStop_Weapon();// 0x24b8cd4
	void OnProjectileStop(out const HitResult Hit, bool bServer, Actor* HitOwner);// 0x26fd904
	void OnProjectileLand(out const HitResult Hit);// 0x26fd860
	void OnProjectileBounce(out const HitResult Hit, out const Vector Velocity, bool bServer, int BounceNum, Actor* HitOwner);// 0x26fd68c
	void OnPlayerBackpackPicked__DelegateSignature(ApexCharacter* PickPlayer, int PickCount);// 0x2ce6f18
	void OnLoadMeshEffectFinished(FName AttachPoint, SoftObjectPath EffectPath);// 0x26fd120
	void NonImpactScatter();// 0x26fd4a8
	void MulticastTrainingModeDestroyEffect();// 0x24a0b3c
	void ModifyCount(int count);// 0x26fe3ec
	void MeshTableReady();// 0x26fd3f4
	void MarkIsDropedByPlayerOnServer(uint32 PlayerID);// 0x26fdf38
	void LoadWholeWeaponData(int DID);// 0x26fdfc4
	void LoadPickupLineEffectFinished();// 0x26fdec0
	void LoadMeshEffect(FName RowName);// 0x26fd26c
	void LaunchProjectile(out const Vector Direction, out const Vector BaseVelocity, float AdditionalSpeed);// 0x26fda3c
	bool IsPingPickUpWrapper();// 0x26fdce8
	bool IsLocked(uint32 PlayerKey);// 0x26fce3c
	bool IsAimPickUpWrapper();// 0x26fdd90
	void InitPickUpOutLine(PrimitiveComponent* Comp);// 0x26fdbf0
	void InitPickupMesh();// 0x26fd2e8
	void HidePickUpWrapperActor(float Time);// 0x26fe19c
	void HandleMultiMeshes(int Level);// 0x26fd2fc
	int GetPickupOutlineID(enum POT);// 0x26fdc68
	enum GetPickupLockedReason();// 0x26fcebc
	PickUpItemData GetPickupData();// 0x26fe100
	float GetLockTime();// 0x26fced8
	bool GetIsTeamPickItem();// 0x26fce20
	bool GetInLand();// 0x26fccfc
	bool GetbInfinitePickup();// 0x26fd064
	void CreateEffectComponent();// 0x26fd10c
	void ClearPickupLocker();// 0x26fcf00
	int8 CheckImpactGround(out const Vector ImpactPoint);// 0x26fd41c
	int CalcMeshLevel(int count);// 0x26fd374

--------------------------------
Class: DynamicMovementComponent_Projetile.DynamicMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnDynamicBounce;//[Offset: 0x244, Size: 0xc]
	delegate OnDynamicStop;//[Offset: 0x250, Size: 0xc]
	delegate OnDynamicOnLand;//[Offset: 0x25c, Size: 0xc]
	float InitialSpeed;//[Offset: 0x284, Size: 0x4]
	float MaxSpeed;//[Offset: 0x288, Size: 0x4]
	float ProjectileGravityScale;//[Offset: 0x28c, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x290, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x290, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x294, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x298, Size: 0xc]
	float Bounciness;//[Offset: 0x2a4, Size: 0x4]
	float Friction;//[Offset: 0x2a8, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x2ac, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x2b0, Size: 0x4]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	float MaxSimulationTimeStep;//[Offset: 0x2b8, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2bc, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x2c0, Size: 0x4]
	ProjectilePendingData ProjectilePendingData;//[Offset: 0x2c4, Size: 0x2c]
	bool bSyncServerBounceEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bSyncServerStopEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	bool bSyncSimulationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	float ImpactSlideMinVelocity;//[Offset: 0x2f4, Size: 0x4]
	bool bImpactStopCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	float ImpactCheckDist;//[Offset: 0x2fc, Size: 0x4]
	DynamicMovementComponent_Projetile* NetMovementComponent;//[Offset: 0x314, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x25b6954
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x25b69f8
	void ServerStopSyncMovement(const Vector OwnerOffset, const Rotator Rotator);// 0x25b6c68
	void ServerSetStopResult(const ImpactResult ImpactResult);// 0x25b6d1c
	void ServerSetImpactResult(const ImpactResult ImpactResult);// 0x25b6dac
	void ServerProjectileSyncPosition(const ProjectilePositionData PositionData);// 0x25b6eb4
	void OnRep_SimulationEnabled(bool OldSimulationEnabled);// 0x25b68cc
	void OnDynamicStopDelegate__DelegateSignature(out const HitResult ImpactResult, bool bServer, Actor* Owner);// 0x2ce6f18
	void OnDynamicOnLandDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2ce6f18
	void OnDynamicBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* Owner);// 0x2ce6f18
	void NetBroadcastStopEvent(HitResult Hit);// 0x25b6ac0
	void NetBroadcastBounceEvent(HitResult Hit);// 0x25b6b94
	bool IsVelocityUnderSimulationThreshold();// 0x25b6a70
	void BroadcastProjectileSyncPosition(const ProjectilePositionData PositionData);// 0x25b6e3c
	void BroadcastLaunch(const ProjectileLaunchData ProjectileLaunchData);// 0x25b6f2c

--------------------------------
Class: DynamicMovementComponent.MovementComponent.ActorComponent.Object
	SceneComponent* SimulationSmoothContainer;//[Offset: 0xdc, Size: 0x4]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	bool bExistAutonomous;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe0, Size: 0x1]
	bool bNeedSimulationPerformMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe0, Size: 0x1]
	bool bNeedAutonomousPerformMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe0, Size: 0x1]
	bool bSkipReceiveLocationAndRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe0, Size: 0x1]
	bool bAutonomousSkipReceiveLocationAndRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe0, Size: 0x1]
	bool bDeactivateWhenStop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe0, Size: 0x1]
	bool bActiveUseOwnerBase;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe0, Size: 0x1]
	float ValidClientToOwnerDistanceDiff;//[Offset: 0xe4, Size: 0x4]
	float ValidClientDistanceDiff;//[Offset: 0xe8, Size: 0x4]
	float DRBlendingSpeed;//[Offset: 0xec, Size: 0x4]
	float MaxSmoothNetUpdateDist;//[Offset: 0xf0, Size: 0x4]
	float NoSmoothNetUpdateDist;//[Offset: 0xf4, Size: 0x4]
	bool bEnableDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float DRLerpTime;//[Offset: 0xfc, Size: 0x4]
	float DRVelocityCompatibility;//[Offset: 0x100, Size: 0x4]
	float DRStopSimulateTime;//[Offset: 0x104, Size: 0x4]
	DynamicBasedMovementInfo BasedMovement;//[Offset: 0x114, Size: 0x28]
	DynamicBasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x13c, Size: 0x28]
	float SimulateServerTimeStamp;//[Offset: 0x164, Size: 0x4]
	bool bApplyGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 0x1]
	PrimitiveComponent* DRBase;//[Offset: 0x1f4, Size: 0x4]
	void SaveBaseLocation();// 0x25b53fc
	void OnRep_ReplicatedBasedMovement();// 0x25b5410
	void OnCallUpdateBaseMovement();// 0x25b53e8
	Vector LimitVelocity(Vector NewVelocity);// 0x25b5354
	PrimitiveComponent* GetBase();// 0x25b5424

--------------------------------
Class: DynamicBasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x4]
	FName BoneName;//[Offset: 0x4, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]

--------------------------------
Class: ImpactResult
	Vector Velocity;//[Offset: 0x0, Size: 0xc]
	Vector OwnerOffset;//[Offset: 0xc, Size: 0xc]
	Rotator Rotator;//[Offset: 0x18, Size: 0xc]
	HitResult Hit;//[Offset: 0x24, Size: 0x88]
	PrimitiveComponent* MovementBase;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: ProjectilePositionData
	Rotator Rotator;//[Offset: 0x0, Size: 0xc]
	Vector OwnerOffset;//[Offset: 0xc, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x18, Size: 0x4]
	Vector BaseOffset;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: ProjectileLaunchData
	float InitialSpeed;//[Offset: 0x0, Size: 0x4]
	Vector Velocity;//[Offset: 0x4, Size: 0xc]
	ProjectilePositionData PositionData;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: ProjectilePendingData
	bool bDiscardBounceWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bOneStopSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	float PendingBounceDeltaTime;//[Offset: 0x24, Size: 0x4]
	float PendingStopDeltaTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ThrowProps
	PickUpItemData MainItem;//[Offset: 0x0, Size: 0x28]
	PickUpItemData[] AttachItem;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 0x4]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: PickUpShowParticleConfig
	ParticleSystem* ParticleSystemPrt;//[Offset: 0x0, Size: 0x20]
	StaticMesh* EffectMeshPrt;//[Offset: 0x20, Size: 0x20]
	Transform Transform;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: PickupLockData
	enum Reason;//[Offset: 0x0, Size: 0x1]
	float LockTime;//[Offset: 0x4, Size: 0x4]
	uint32 LockPlayerKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApexRespawnBeacon.Actor.Object
	byte RespawnCount;//[Offset: 0x224, Size: 0x1]
	bool bHasBeenUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 0x1]
	int Index;//[Offset: 0x230, Size: 0x4]
	Transform AircraftOffset;//[Offset: 0x240, Size: 0x30]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	byte CanRespawnNum;//[Offset: 0x275, Size: 0x1]
	float Radius;//[Offset: 0x278, Size: 0x4]
	byte ClearEffectCount;//[Offset: 0x27c, Size: 0x1]
	ParticleSystemComponent* UseableEffect;//[Offset: 0x280, Size: 0x4]
	ParticleSystemComponent* EffectTrigger;//[Offset: 0x284, Size: 0x4]
	ParticleSystem* TriggerActivate;//[Offset: 0x288, Size: 0x4]
	ParticleSystem* TriggerDeactivate;//[Offset: 0x28c, Size: 0x4]
	bool bAllowInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x294, Size: 0x4]
	WidgetComponent* WidgetComponent;//[Offset: 0x298, Size: 0x4]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x29c, Size: 0x4]
	int OutLineId;//[Offset: 0x2a0, Size: 0x4]
	bool UseComplete();// 0x24a0b58
	bool Useable();// 0x24a0b80
	void SetOffset(Transform Offset);// 0x24a0980
	void SetIndex(int InIndex);// 0xf42c0c
	void OnRep_RespawnCount();// 0x24a0b3c
	void OnRep_ClearEffectCount();// 0x24a0af8
	void OnRep_Activate();// 0x24a0b0c
	void OnDelayHasBeenUsed();// 0x24a085c
	void NotifyUseComplete();// 0x2ce6f18
	void NotifyDeactivate();// 0x24a0adc
	void NotifyActivate();// 0x24364ac
	Transform GetOffset();// 0x24a08f0
	int GetIndex();// 0x24a0aac
	void EnableInteractive(bool bEnable);// 0x24a0870
	void CheckUseable();// 0x24a0b20

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x494, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x495, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x498, Size: 0x4]
	IntPoint DrawSize;//[Offset: 0x49c, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 0x1]
	float RedrawTime;//[Offset: 0x4a8, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x4b8, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x4cc, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x4d6, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d7, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x4d8, Size: 0x4]
	LinearColor BackgroundColor;//[Offset: 0x4dc, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x4ec, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x4fc, Size: 0x4]
	enum BlendMode;//[Offset: 0x500, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 0x1]
	bool bWS3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 0x1]
	float WS3DUIBaseOffset;//[Offset: 0x504, Size: 0x4]
	bool bDraw3DUIAfterPostProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x50c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x520, Size: 0x4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x524, Size: 0x4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x528, Size: 0x4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x52c, Size: 0x4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x530, Size: 0x4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x534, Size: 0x4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x538, Size: 0x4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x53c, Size: 0x4]
	TextureRenderTarget2D* WS3DUIRenderTarget;//[Offset: 0x540, Size: 0x4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x544, Size: 0x4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x54c, Size: 0x8]
	int LayerZOrder;//[Offset: 0x554, Size: 0x4]
	enum GeometryMode;//[Offset: 0x558, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x55c, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x3c29e38
	void SetWindowFocusable(bool bInWindowFocusable);// 0x3c29ecc
	void SetWidgetSpace(enum NewSpace);// 0x3c2a088
	void SetWidget(UserWidget* Widget);// 0x245cda0
	void SetTwoSided(const bool bWantTwoSided);// 0x3c2a480
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x3c2a2f0
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x3c2a3e8
	void SetRedrawTime(float InRedrawTime);// 0x3c2a118
	void SetPivot(out const Vector2D InPivot);// 0x3c2a240
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x3c2a6dc
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x3c2a640
	void SetGeometryMode(enum InGeometryMode);// 0x3c29ff8
	void SetDrawSize(Vector2D Size);// 0x3c2a528
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x3c2a1a8
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x3c29f68
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x3c2a36c
	void RequestRedraw();// 0x245cc20
	enum GetWindowVisiblility();// 0x3c29eb0
	bool GetWindowFocusable();// 0x3c29f4c
	enum GetWidgetSpace();// 0x3c2a0fc
	UserWidget* GetUserWidgetObject();// 0x3c2a7a4
	bool GetTwoSided();// 0x3c2a500
	bool GetTickWhenOffscreen();// 0x3c2a464
	TextureRenderTarget2D* GetRenderTarget();// 0x3c2a77c
	float GetRedrawTime();// 0x3c2a18c
	Vector2D GetPivot();// 0x3c2a2cc
	LocalPlayer* GetOwnerPlayer();// 0x3c2a618
	MaterialInstanceDynamic* GetMaterialInstance();// 0x3c2a754
	bool GetManuallyRedraw();// 0x3c2a6c0
	enum GetGeometryMode();// 0x3c2a06c
	Vector2D GetDrawSize();// 0x3c2a5d8
	bool GetDrawAtDesiredSize();// 0x3c2a224
	float GetCylinderArcAngle();// 0x3c29fdc
	Vector2D GetCurrentDrawSize();// 0x3c2a598

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xb4, Size: 0x4]
	int SizeY;//[Offset: 0xb8, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xbc, Size: 0x10]
	byte AddressX;//[Offset: 0xcc, Size: 0x1]
	byte AddressY;//[Offset: 0xcd, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xce, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xce, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xce, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xcf, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0xd1, Size: 0x1]
	byte MipsAddressU;//[Offset: 0xd2, Size: 0x1]
	byte MipsAddressV;//[Offset: 0xd3, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xd4, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xcc, Size: 0x4]
	NavigationData* MyNavData;//[Offset: 0xd8, Size: 0x4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x4ae3388
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x4ae3470
	Vector GetPathDestination();// 0x4ae3400
	byte GetPathActionType();// 0x4ae3448

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x1d4, Size: 0x4]
	NavDataConfig NavDataConfig;//[Offset: 0x1d8, Size: 0x58]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x230, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x230, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x231, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x234, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x238, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x2c4, Size: 0xc]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x28, Size: 0x8]
	Color Color;//[Offset: 0x30, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x34, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x40, Size: 0x4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x44, Size: 0x14]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0xc]
	int AreaID;//[Offset: 0xc, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CarePackage.Actor.Object
	enum[] ForbiddenPawnState;//[Offset: 0x230, Size: 0xc]
	int ID;//[Offset: 0x23c, Size: 0x4]
	int Level;//[Offset: 0x240, Size: 0x4]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x244, Size: 0x4]
	enum CarePackageLootType;//[Offset: 0x248, Size: 0x1]
	CarePackageItemSocketDataAsset* CarePackageItemSocketDataAsset;//[Offset: 0x24c, Size: 0x4]
	CarePackageLootPerSide[] LootZoneTypeInfos;//[Offset: 0x250, Size: 0xc]
	FString[] LootZoneTypeInfoAEs;//[Offset: 0x25c, Size: 0xc]
	<int,CarePackageItemIDGroupData> ItemIDGroupDataMap;//[Offset: 0x268, Size: 0x3c]
	bool bEnableLootConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	bool bEnableLootAEConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1]
	<int,CarePackage_PickupInfo> DropList1;//[Offset: 0x2a8, Size: 0x3c]
	<int,CarePackage_PickupInfo> DropList2;//[Offset: 0x2e4, Size: 0x3c]
	<int,CarePackage_PickupInfo> DropList3;//[Offset: 0x320, Size: 0x3c]
	float LootRange;//[Offset: 0x35c, Size: 0x4]
	float NotOpenLootOffset;//[Offset: 0x360, Size: 0x4]
	bool bHasLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool bHasOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	ApexCharacter*[] PlayerInRange;//[Offset: 0x368, Size: 0xc]
	int CreateTime;//[Offset: 0x380, Size: 0x4]
	<int,int> ReportDropItemInfo;//[Offset: 0x384, Size: 0x3c]
	Controller* OpenPackageController;//[Offset: 0x3c0, Size: 0x8]
	bool bEnableTickTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	bool bTriggerFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]
	float CarePackageTickTime;//[Offset: 0x3cc, Size: 0x4]
	int TickTriggerIndex;//[Offset: 0x3d0, Size: 0x4]
	int PreTickTriggerIndex;//[Offset: 0x3d4, Size: 0x4]
	CarePackageTickTriggerData[] TickTriggerDataArray;//[Offset: 0x3d8, Size: 0xc]
	CarePackageCustomDoor[] LifelineCustomDoorList;//[Offset: 0x3e4, Size: 0xc]
	PickUpWrapperActor*[] CarePackagePickUpList;//[Offset: 0x3f0, Size: 0xc]
	void SetLootZoneTypeInfos(out const LootZoneTypeInfo[] InLootZoneTypeInfos);// 0x2556520
	void SetLifelineCustomDoor(CarePackageCustomDoor[] TmpList);// 0x2555f9c
	void SetCarePackageLootType(enum InCarePackageLootType);// 0x25564a8
	void ReportCarePackageFlow();// 0x2556218
	void ReportCarePackageDropFlow();// 0x2556204
	void OnTickTriggerEvent(int TriggerIndex);// 0x25540b8
	void OnServerOpened();// 0x25565ec
	void OnServerLanded();// 0x24a0b20
	void OnRep_HasOpened();// 0x2556628
	void OnRep_HasLanded();// 0x255663c
	void OnRep_Array();// 0xfd338c
	void OnPickUpBeenPicked(ApexCharacter* PickPlayer, int PickCount);// 0x2556148
	void OnCarePackageRealOpen();// 0x2556614
	int GetSoundBankItemId();// 0x255622c
	enum GetItemSpawnReason();// 0x2556338
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x255625c
	void CreateDropItem();// 0x2556600
	void ClearItemIDGroupData();// 0x2556368
	void BP_OnSpawnItem(PickUpWrapperActor* dropItem1, PickUpWrapperActor* dropItem2, PickUpWrapperActor* dropItem3, FString socket1, FString socket2, FString socket3);// 0x2ce6f18
	void BP_OnOpenPackage();// 0x2ce6f18
	void BP_OnLandedPackage();// 0x2ce6f18
	void AddItemIDGroupData(int SlotIndex, int[] ItemIDGroup);// 0x255637c

--------------------------------
Class: CarePackageLootPerSide
	CarePackageLootTypeInfo[] LootItemsPerSide;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: CarePackageLootTypeInfo
	int RandomCount;//[Offset: 0x0, Size: 0x4]
	float ChosenProbability;//[Offset: 0x4, Size: 0x4]
	LootZoneTypeInfo[] LootItems;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: CarePackageItemIDGroupData
	int[] ItemIDGroup;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: CarePackage_PickupInfo
	float Weight;//[Offset: 0x0, Size: 0x4]
	FString SocketName;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: CarePackageTickTriggerData
	float TriggerTime;//[Offset: 0x0, Size: 0x4]
	int TriggerIndex;//[Offset: 0x4, Size: 0x4]
	FName TriggerName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CarePackageCustomDoor
	enum DoorType;//[Offset: 0x0, Size: 0x1]
	FString TargetTableName;//[Offset: 0x4, Size: 0xc]
	FString BackUpTableName;//[Offset: 0x10, Size: 0xc]
	FString OtherTableName0;//[Offset: 0x1c, Size: 0xc]
	FString OtherTableName1;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ApexAITeamController.AIController.Controller.Actor.Object
	enum[] NoLeaderPhase;//[Offset: 0x2cc, Size: 0xc]
	void UpdateLeader();// 0x23f9fc4
	void ReceiveTeamLeaderChanged(ApexAIController* NewLeader);// 0x2ce6f18
	ApexAIController*[] GetTeammateControllers(ApexAIController* Except);// 0x23f9fd8
	ApexAIController* GetTeamLeaderController();// 0x23fa0b4

--------------------------------
Class: PingManagerComponent.ActorComponent.Object
	delegate ItemCreateCallback;//[Offset: 0xb8, Size: 0xc]
	delegate ItemDeleteCallback;//[Offset: 0xc4, Size: 0xc]
	delegate ItemResponseCallback;//[Offset: 0xd0, Size: 0xc]
	delegate ItemCreateTempCallback;//[Offset: 0xdc, Size: 0xc]
	delegate ItemClearByPlayerIDCallback;//[Offset: 0xe8, Size: 0xc]
	delegate ItemHideCallback;//[Offset: 0xf4, Size: 0xc]
	delegate ItemMarkReverseCallback;//[Offset: 0x100, Size: 0xc]
	delegate ItemResetCallback;//[Offset: 0x10c, Size: 0xc]
	delegate ItemClearAllCallback;//[Offset: 0x118, Size: 0xc]
	delegate PickUpWrapCallback;//[Offset: 0x124, Size: 0xc]
	delegate ItemSkillResetCallback;//[Offset: 0x130, Size: 0xc]
	delegate ItemSkillCoollingResetCallback;//[Offset: 0x13c, Size: 0xc]
	delegate EnterADSEnemyCallback;//[Offset: 0x148, Size: 0xc]
	delegate OnPingItemThroughBlock;//[Offset: 0x154, Size: 0xc]
	class PingAttributeDelare* AttributeDelareTemp;//[Offset: 0x160, Size: 0x4]
	PingAttributeDelare* AtrributeDelare;//[Offset: 0x164, Size: 0x4]
	uint64[] WaitToDeleteItemPingList_Server;//[Offset: 0x228, Size: 0xc]
	HitResult[] AllHitResults;//[Offset: 0x234, Size: 0xc]
	SiglePingInfo RecentlyLocalPingInfo;//[Offset: 0x248, Size: 0x98]
	bool IsAutoPingEnemyOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	ApexDoor* TmpDoor;//[Offset: 0x2e8, Size: 0x8]
	PrimitiveComponent* TmpDoorComp;//[Offset: 0x2f0, Size: 0x8]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2f8, Size: 0x4]
	PingDataReporter* DataReporter;//[Offset: 0x2fc, Size: 0x4]
	SiglePingInfo[] ServerPingList;//[Offset: 0x300, Size: 0xc]
	<int,SimpleServerPingInfo> ServerSimpleList;//[Offset: 0x30c, Size: 0x3c]
	<int,SimpleClientPingInfo> ClientPingMap;//[Offset: 0x348, Size: 0x3c]
	<uint32,AutoMarkInfo> AutoMarkPlayerList;//[Offset: 0x384, Size: 0x3c]
	<uint64,float> ItemHasMarkTimerMap;//[Offset: 0x3d8, Size: 0x3c]
	AsynServerPingPositionInfo[] AyncServerPingPositionList;//[Offset: 0x4e8, Size: 0xc]
	UAEDataTable* PingDataTable;//[Offset: 0x500, Size: 0x4]
	UAEDataTable* WholeWeaponDataTable;//[Offset: 0x504, Size: 0x4]
	UAEDataTable* ItemToPingDataTable;//[Offset: 0x508, Size: 0x4]
	UAEDataTable* APGameItemDataTable;//[Offset: 0x50c, Size: 0x4]
	PingAimedInfo PingAimedInfo;//[Offset: 0x510, Size: 0xc]
	enum CurrentButtonState;//[Offset: 0x51c, Size: 0x1]
	ApexCharacterMapFlags* MapFlags;//[Offset: 0x520, Size: 0x8]
	<uint32,AutoMarkInfo> ADSEnemyPlayerList;//[Offset: 0x528, Size: 0x3c]
	bool bIsInADSMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	bool bIsOpenADSFromGameHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 0x1]
	bool bIsOpenADSFromSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x566, Size: 0x1]
	bool StartTraceBlock(int PingType, int FromType, bool UseQueue);// 0x2709f44
	int StartPingItemToTargetPoint(const Vector EndPos);// 0x2709bb0
	int StartPingItemFromItemIDByDS(int ItemID, int64 ItemUUID);// 0x2709900
	int StartPingItemFromActorByDS(Actor* WeakActor, int PingType, float TotalTime, bool bIgnorePlayAudio);// 0x27097a8
	bool StartPingItemByTombBox(PlayerTombBox* TombBox);// 0x2709728
	int StartPingItemByPickUpActor_DS(PickUpWrapperActor* PickActor, out const PickUpItemData PickUpData);// 0x27095f0
	void StartPingItemByMiniMap(Vector WorldPosition);// 0x2709ed4
	bool StartPingItemByItemUUID(int64 ItemUUID, bool IsAuto);// 0x27099c8
	void StartPingItemByInteract(Vector WorldPosition, int ItemID, int64 ItemUUID);// 0x2709aa0
	void StartPingItemByEnemy(ApexCharacter* Target);// 0x2709c28
	int StartPingItemByDS(Vector WorldPosition, int PingType);// 0x2709d5c
	void StartPingItem_Client(const Vector WorldPosition, const int PingType);// 0x2709e1c
	void ShowDyingOrRespawnInfomation(ApexCharacterMapFlags* TmpMapFlag, const enum StatusMapFlags);// 0x2706114
	void SetPickUpNearListOpenState(const bool bIsOpen);// 0x2706d7c
	void SetPickUpListOpenState(const bool bIsOpen);// 0x2706dfc
	void SetPickUpDeathBoxListOpenState(const bool bIsOpen);// 0x2706cfc
	void SetCustomHitResult(out const HitResult HitResult);// 0x2706b4c
	void RPCServerSetAutoMark(bool IsAutoMark);// 0x25c44dc
	void RPCServerResponsePing(SiglePingInfo SingleInfo);// 0x2708120
	void RPCServerResetCooling(float RemainTime, int PingIndex);// 0x2563ea8
	void RPCServerMakePing(SiglePingInfo SingleInfo);// 0x2709210
	void RPCServerDeletePing(SiglePingInfo SingleInfo);// 0x2708c50
	void RPCServerDelayPing(SiglePingInfo SingleInfo);// 0x27088f0
	void RPCServerClearPingByPlayerID(SiglePingInfo Info);// 0x2707cf0
	void RPCServerCancelReservePing(SiglePingInfo SingleInfo);// 0x2708550
	void RPCClientSetPingVisible(int PingIndex, bool IsShow);// 0x26be020
	void RPCClientResponsePing(int PingIndex, const int PingType, int DingType, uint32 SourcePlayerKey);// 0x2707fc4
	void RPCClientResetCooling(float RemainTime, int PingIndex);// 0x2707c24
	void RPCClientMakePing(SiglePingInfo Info);// 0x2708f30
	void RPCClientDeletePing(int PingIndex);// 0x2708bc4
	void RPCClientDelayPing(int PingIndex, uint32 PlayerKey);// 0x2708824
	void RPCClientCancelReservePing(int PingIndex, int PingType, int DingType, uint32 SourcePlayerKey);// 0x27083f4
	void ResetSkillCoolingDown(float RemainTime, int PingIndex);// 0x2706c2c
	void PlaySurviveAudio();// 0x2706a4c
	void PlayPingUISound(const enum UIActionType);// 0x2706a60
	void PlayMapFlagsOKAnim();// 0x2706088
	void PlayClaimItemAudio(const FString ItemAudioKey);// 0x2706968
	void OnUIStateEnterChangeCallback(enum UIState, bool bIsEnter);// 0x2705fc4
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x2706470
	void OnSendClickPingDing(const enum PingType, int PingIndex, enum DingType, bool bLeftBubble);// 0x270630c
	void OnRep_PingListUpdate();// 0x27067d4
	void OnRep_AsynServerPingPosition();// 0x270645c
	void OnGameDataLoaded(SoftClassPath SoftPath);// 0x270a054
	void OnClickPingDing(const enum PingButtonState);// 0x27061d0
	void OnClickPingCallback(const enum PingType, bool UseQueue);// 0x2706248
	bool LocalResponsePing(int PingType, int PingIndex, int DingType, const bool bLeftBubble);// 0x2707600
	bool LocalMakePing(SiglePingInfo SingleInfo);// 0x2707960
	bool LocalDeletePing(int PingIndex);// 0x27078e0
	bool LocalDelayPing(int PingType, int PingIndex);// 0x270781c
	bool LocalClearPingByPlayerID(int FromType, int PingType);// 0x270753c
	bool LocalCancelReservePing(int PingType, int PingIndex);// 0x2707758
	bool IsTeammate(const int PlayerKey);// 0x2706868
	bool IsSkill(int PingType);// 0x27068e8
	bool IsRealEnemy(int Index);// 0x2706e7c
	bool IsMarkByMySelf(const int PingIndex);// 0x27073c8
	bool IsItemExist(const int PingIndex);// 0x2707348
	bool IsEnemySkill(const int PingIndex);// 0x27067e8
	bool IsCurrentAimedState(int64 ItemUUID);// 0x2707240
	void HideMapFlagsInfo();// 0x2706088
	void HideDyingOrRespawnInfomation(ApexCharacterMapFlags* TmpMapFlag);// 0x270609c
	Vector GetVectorByIndex(int Index);// 0x2706efc
	Vector GetTempItemActorVector(int64 ItemUUID);// 0x2706f8c
	void GetPingInfoByIndex(int PingIndex, out SiglePingInfo Info);// 0x2706600
	bool GetHitResult(out HitResult TraceHitInfo, const Vector StartPos, const Vector EndPos);// 0x2707024
	HitResult GetCustomHitResult();// 0x2706ad8
	void GetCurrentTraceLinePosition(out Vector WorldPostion);// 0x27072c4
	bool GetCurrentHitReuslt(out HitResult TraceHitInfo, float LineDist);// 0x2707158
	void DeletePingItemByDS(int PingType, int PingIndex);// 0x2709ca0
	void CreateItemPingWithActor_Client(Actor* WeakActor, const int ItemID, const int64 ItemUUID);// 0x27094e4
	void ClearAutoMarkItemInDeathBox();// 0x2706ce8
	void CheckPickUpWrapHadDestroy(int64 ItemUUID);// 0x2707448
	bool CheckIsInEllipse(Vector2D ScreenPosition);// 0x27074c4
	void AfterTickCheck_Client(float DeltaTime, out const Vector ViewLocation, out const Rotator ViewRotation);// 0x270a14c

--------------------------------
Class: PingAttributeDelare.Object
	float DelayTimeT1;//[Offset: 0x1c, Size: 0x4]
	float DelayTimeT2;//[Offset: 0x20, Size: 0x4]
	float DelayTimeT3;//[Offset: 0x24, Size: 0x4]
	float AvailbleItemRange;//[Offset: 0x28, Size: 0x4]
	float LobaAvailbleItemRange;//[Offset: 0x2c, Size: 0x4]
	float DoubleClickAvailbleItemRange;//[Offset: 0x30, Size: 0x4]
	float PlayerAudioInterval;//[Offset: 0x34, Size: 0x4]
	float EllipticalConstValueX;//[Offset: 0x38, Size: 0x4]
	float EllipticalConstValueY;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* MakeEnemyCurve;//[Offset: 0x40, Size: 0x4]
	float OpenEnemyCurve;//[Offset: 0x44, Size: 0x4]
	FString OpenEnemyCompName;//[Offset: 0x48, Size: 0xc]
	float EnemyPingCheckRange;//[Offset: 0x54, Size: 0x4]
	float NormalItemRange;//[Offset: 0x58, Size: 0x4]
	float WeaponItemRange;//[Offset: 0x5c, Size: 0x4]
	float LookBelowItemRange;//[Offset: 0x60, Size: 0x4]
	float NormalItemRangeForAim;//[Offset: 0x64, Size: 0x4]
	float WeaponItemRangeForAim;//[Offset: 0x68, Size: 0x4]
	float LookBelowItemRangeForAim;//[Offset: 0x6c, Size: 0x4]
	float ZiplineRadius;//[Offset: 0x70, Size: 0x4]
	FString OpenPingUIAudioStr;//[Offset: 0x74, Size: 0xc]
	FString CancelPingUIAudioStr;//[Offset: 0x80, Size: 0xc]
	FString HoverPingUIAudioStr;//[Offset: 0x8c, Size: 0xc]
	FString ConformPingUIAudioStr;//[Offset: 0x98, Size: 0xc]
	int DingWeaponEventID;//[Offset: 0xa4, Size: 0x4]
	int DingNormalItemEventID;//[Offset: 0xa8, Size: 0x4]
	int SurviveEventID;//[Offset: 0xac, Size: 0x4]
	int FirstAidEventID;//[Offset: 0xb0, Size: 0x4]
	int RespawnEventID;//[Offset: 0xb4, Size: 0x4]
	float AutoPingEnemyCD;//[Offset: 0xb8, Size: 0x4]
	float PingDoorDistLimit;//[Offset: 0xbc, Size: 0x4]
	float BoundsScreenRadius;//[Offset: 0xc0, Size: 0x4]
	float BoundsScreenPerc;//[Offset: 0xc4, Size: 0x4]
	float BoundsScreenStayTimer;//[Offset: 0xc8, Size: 0x4]
	float ADSBoundsScreenStayTimer;//[Offset: 0xcc, Size: 0x4]
	float ADSEnterEnemyDist;//[Offset: 0xd0, Size: 0x4]
	float WaitIntervalTimer;//[Offset: 0xd4, Size: 0x4]
	float IntervalTimer;//[Offset: 0xd8, Size: 0x4]
	float CheckRadius;//[Offset: 0xdc, Size: 0x4]
	float CheckDegreen;//[Offset: 0xe0, Size: 0x4]
	float SameItemAutoMarkInterval;//[Offset: 0xe4, Size: 0x4]
	int QuickAutoMarkNum;//[Offset: 0xe8, Size: 0x4]
	float QuickAutoMarkInterval;//[Offset: 0xec, Size: 0x4]
	float QuickAutoMarkCooling;//[Offset: 0xf0, Size: 0x4]
	float LeaveAutoMarkItemDist;//[Offset: 0xf4, Size: 0x4]
	float LeaveAutoMarkItemDegreen;//[Offset: 0xf8, Size: 0x4]
	float LeaveAutoMarkItemStayDuration;//[Offset: 0xfc, Size: 0x4]
	float MarkItemGuideDuration;//[Offset: 0x100, Size: 0x4]
	float GlassToDist;//[Offset: 0x104, Size: 0x4]
	int NotOpenShowPropLevel;//[Offset: 0x108, Size: 0x4]
	float AutoMarkItemExpireTime;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: ApexCharacterMapFlags.Actor.Object
	uint32 FlagId;//[Offset: 0x220, Size: 0x4]
	StatusHeadFlagsWidgetComponent* StatusHeadFlagsComponent;//[Offset: 0x224, Size: 0x4]
	uint16 TimeoutSec;//[Offset: 0x228, Size: 0x2]
	uint16 LeftSec;//[Offset: 0x22a, Size: 0x2]
	uint16 ShownLeftSec;//[Offset: 0x22c, Size: 0x2]
	float TickDeltaSec;//[Offset: 0x230, Size: 0x4]
	int DistanceMeter;//[Offset: 0x234, Size: 0x4]
	enum CurrentFlagType;//[Offset: 0x238, Size: 0x1]
	Vector AuthLocation;//[Offset: 0x23c, Size: 0xc]
	float InterpSpeed;//[Offset: 0x248, Size: 0x4]
	bool bNeedInterpSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	Vector2D CurScreenSize;//[Offset: 0x250, Size: 0x8]
	uint32 OwnerPlayerKey;//[Offset: 0x258, Size: 0x4]
	float RescuingDistanceMeter;//[Offset: 0x25c, Size: 0x4]
	float PickBannerHorizonMeter;//[Offset: 0x260, Size: 0x4]
	float PickBannerVerticalMeter;//[Offset: 0x264, Size: 0x4]
	bool bInScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	int OwnerLegendId;//[Offset: 0x26c, Size: 0x4]
	float FinisherHorizontalAngle;//[Offset: 0x270, Size: 0x4]
	float FinisherVerticalAngle;//[Offset: 0x274, Size: 0x4]
	float FinisherValidZ;//[Offset: 0x278, Size: 0x4]
	float ValidFinisherRange;//[Offset: 0x27c, Size: 0x4]
	float FinisherValidSpaceCheckDistance;//[Offset: 0x280, Size: 0x4]
	float FinisherLogInterval;//[Offset: 0x284, Size: 0x4]
	float CurrentFinisherLogInterval;//[Offset: 0x288, Size: 0x4]
	void ShowStatusHeadFlags(enum FlagType, uint16 InitTimeoutSec, uint16 InitShownTimeoutSec, int InLegendId, int InPlayerKey);// 0x24364c8
	void ShowReviveUI(bool bShow);// 0x2436218
	void ShowGetBeaconUI(bool bShow);// 0x2436190
	void ShowFinisherUI(bool bShow);// 0x2436080
	void SetRealTimeLocation(out const Vector Location);// 0x243631c
	void SetInvisible(bool bInvisible);// 0x2436108
	void SetFlagsLocation(float Alpha);// 0x243642c
	void SetAuthLocation(out const Vector Location);// 0x24363a0
	void PlayInformationOut();// 0xf4af64
	void PlayInformationIn();// 0xf4b0f4
	void PlayAnimationOK();// 0x1565a60
	bool PawnStateCheck();// 0x24362a0
	bool LineVisableTraceCheck();// 0x24362d0
	void HideStatusHeadFlags();// 0x24364ac
	void HideMapFlagsInfo();// 0x2436064
	uint32 GetFlagId();// 0x2436690
	int DistanceToAutonomous();// 0x2436660
	void CloseFlagDynamicOutLine();// 0x2436050
	void CheckOperate();// 0x2436300

--------------------------------
Class: StatusHeadFlagsWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector2D CurrentScreenPos;//[Offset: 0x600, Size: 0x8]
	int CurrentPlayerKey;//[Offset: 0x608, Size: 0x4]
	enum CurrentFlagType;//[Offset: 0x60c, Size: 0x1]
	void UpdateTipInfo(enum FlagType, uint16 LeftSec, int Meter, float Progress);// 0x2789e04
	void UnRegisterScreenTouchEndEvent();// 0x2789d80
	void SetScreenPos(Vector2D ScreenPos);// 0x2789d94
	void SetPlayerKey(int PlayerKey);// 0x2789c38
	void SetHeadTex(int LegendId);// 0x2789fd4
	void SetFlagsType(enum FlagType);// 0x2789f54
	void OnScreenTouchEnd(float LocationX, float LocationY);// 0x2789cc4
	void IsInCrossRange(const Vector2D ScreenPos);// 0x2789bc8
	void CloseDynamicOutLine();// 0x2789cb0

--------------------------------
Class: SiglePingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int PingType;//[Offset: 0x4, Size: 0x4]
	int DingType;//[Offset: 0x8, Size: 0x4]
	int FromType;//[Offset: 0xc, Size: 0x4]
	uint64 CreateTime;//[Offset: 0x10, Size: 0x8]
	uint32 SourcePlayerID;//[Offset: 0x18, Size: 0x4]
	uint32 ReservePlayerID;//[Offset: 0x1c, Size: 0x4]
	Vector SourcePosition;//[Offset: 0x20, Size: 0xc]
	FString PlayerName;//[Offset: 0x2c, Size: 0xc]
	int TeamColor;//[Offset: 0x38, Size: 0x4]
	bool bIsTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int ItemID;//[Offset: 0x40, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x48, Size: 0x8]
	int ItemDeriveID;//[Offset: 0x50, Size: 0x4]
	Actor* ReferenceActor;//[Offset: 0x54, Size: 0x8]
	PrimitiveComponent* PriComp;//[Offset: 0x5c, Size: 0x8]
	Vector PositionOffset;//[Offset: 0x64, Size: 0xc]
	bool IsEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	uint32 SkillOwnerPlayerKey;//[Offset: 0x74, Size: 0x4]
	FString SkillOwnerPlayerName;//[Offset: 0x78, Size: 0xc]
	enum ReportType;//[Offset: 0x84, Size: 0x1]
	bool IsItemAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool IsAutoMarkEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	bool bSkillAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1]
	float SkillCooling;//[Offset: 0x88, Size: 0x4]
	uint32 MapFlagsPlayerKey;//[Offset: 0x8c, Size: 0x4]
	bool bIsRecommendItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bIsPingThroughBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]

--------------------------------
Class: PingDataReporter.Object

--------------------------------
Class: SimpleServerPingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	float LiveEndTime;//[Offset: 0x4, Size: 0x4]
	float VisibleEndTime;//[Offset: 0x8, Size: 0x4]
	bool IsPingVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	uint64 ItemUUID;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SimpleClientPingInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x8, Size: 0x8]
	Actor* ReferenceActor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: AutoMarkInfo
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float DistanceSquared;//[Offset: 0x8, Size: 0x4]
	ApexCharacterBase* Char;//[Offset: 0xc, Size: 0x8]
	bool bIsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: AsynServerPingPositionInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	Vector ActorPosition;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FName,nameToProperty(FieldPathProperty)> nameToProperty;//[Offset: 0x8c, Size: 0x3c]
	bool BP_ToDerivedRowDataQuery(out AETableDerivedRowDataQueryBP IoDerivedQuery, out const AETableRowDataQueryBP InQuery, FName InParentRowColumnName);// 0x285e130
	bool BP_MakeRowDataQuery(out AETableRowDataQueryBP OutQuery, UAEDataTable* InTable, FName InRowName);// 0x285e310
	bool BP_MakeDerivedRowDataQueryWithColumnName(out AETableDerivedRowDataQueryBP IoDerivedQuery, UAEDataTable* InTable, FName InRowName, FName InParentRowColumnName);// 0x285de60
	bool BP_GetCellValueFromQuery(out TableRowBase OutValue, out const AETableRowDataQueryBP InQuery, FName InColumnName);// 0x285ec60
	bool BP_GetCellValueFromDerivedQuery(out TableRowBase OutValue, out const AETableDerivedRowDataQueryBP InQuery, FName InColumnName);// 0x285e9f0
	bool BP_GetCellArrayValueFromQuery(out int[] OutArray, out const AETableRowDataQueryBP InQuery, FName InColumnName);// 0x285e860
	bool BP_GetCellArrayValueFromDerivedQuery(out int[] OutArray, out const AETableDerivedRowDataQueryBP InQuery, FName InColumnName);// 0x285e650

--------------------------------
Class: AETableDerivedRowDataQueryBP

--------------------------------
Class: AETableRowDataQueryBP

--------------------------------
Class: TableRowBase

--------------------------------
Class: PingAimedInfo
	enum PingType;//[Offset: 0x0, Size: 0x1]
	int PingIndex;//[Offset: 0x4, Size: 0x4]
	bool bIsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum ButtonState;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: MetaAIController.AIController.Controller.Actor.Object
	AIJumpScheduleComponent* JumpScheduler;//[Offset: 0x338, Size: 0x4]
	float TickInterval;//[Offset: 0x378, Size: 0x4]
	<FName,int> CounterLimit;//[Offset: 0x37c, Size: 0x3c]
	void RemoveConcurrency(FName CounterTag, Object* Controller, Object* VictimObject);// 0x269a9b8
	void OnTakeDamage(Controller* Damaged, float DamageAmount, Controller* DamageInstigator, Actor* Causer);// 0x269a528
	void OnServiceTick(AIController* BotController, out const MetaAICounterWatchItem[] CounterWatches, Object* VictimObject);// 0x2ce6f18
	void OnPlayerTakeDamage(Controller* AttackerPlayerController, Controller* VictimController);// 0x2ce6f18
	void OnJumpSchedule(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] AIControllers, out const ParachutePoint*[] ParachutePoints);// 0x2ce6f18
	void OnEndOverload(out const FName[] CounterTags, Object* VictimObject);// 0x2ce6f18
	void OnBotLeaveSubtree(out const FName[] CounterTags, AIController* BotController, Object* VictimObject);// 0x2ce6f18
	void OnBotEnterSubtree(out const FName[] CounterTags, AIController* BotController, Object* VictimObject);// 0x2ce6f18
	void OnBeginOverload(out const FName[] CounterTags, Object* VictimObject);// 0x2ce6f18
	bool HasPlayerInConcurrency(FName CounterTag, Object* VictimObject);// 0x269a670
	<Object*> GetOverloadedSet(FName CounterTag, Object* VictimObject);// 0x269aca0
	Object*[] GetConcurrency(FName CounterTag, Object* VictimObject);// 0x269a73c
	void DelayedRemoveConcurrency(FName CounterTag, Object* Controller, Object* VictimObject, float Delay);// 0x269a864
	bool CanAddConcurrency(FName CounterTag, Object* VictimObject);// 0x269abd0
	void AddConcurrency(FName CounterTag, Object* Controller, Object* VictimObject);// 0x269aac4

--------------------------------
Class: AIJumpScheduleComponent.ActorComponent.Object
	<ApexAIController*,ParachutePoint*> JumpPlan;//[Offset: 0xa8, Size: 0x3c]
	<ApexAIController*,ParachutePoint*> SimpleRandomScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float ExtraDistance, float MaxDistance);// 0x23ed9d0
	void FinishJumpSchedule(out const <ApexAIController*,ParachutePoint*> Result);// 0x23edd70
	<ApexAIController*,ParachutePoint*> ChannelBasedScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float MaxDistance);// 0x23ed290
	<ApexAIController*,ParachutePoint*> AreaBasedScheduler(Vector PlaneStart, Vector PlaneEnd, out const ApexAIController*[] InAIControllers, out const ParachutePoint*[] InParachutePoints, float ExtraDistance, float MaxDistance, int MaxUses);// 0x23ed5f0

--------------------------------
Class: ParachutePoint.TargetPoint.Actor.Object
	int Channel;//[Offset: 0x1d0, Size: 0x4]
	int ChannelMaxUses;//[Offset: 0x1d4, Size: 0x4]

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: MetaAICounterWatchItem
	FName CounterTag;//[Offset: 0x0, Size: 0x8]
	BlackboardKeySelector OutValue;//[Offset: 0x8, Size: 0x1c]

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0xc]
	FName SelectedKeyName;//[Offset: 0xc, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x14, Size: 0x4]
	byte SelectedKeyID;//[Offset: 0x18, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: FiniteBattleBehStateMachine.ActorComponent.Object
	bool bStateInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	<enum,AbstractState*> BattleBehStateMap;//[Offset: 0xac, Size: 0x3c]
	AbstractState* CurrentState;//[Offset: 0xe8, Size: 0x4]
	byte Role;//[Offset: 0xec, Size: 0x1]

--------------------------------
Class: AbstractState.Object
	byte Role;//[Offset: 0x1c, Size: 0x1]
	Actor* Owner;//[Offset: 0x20, Size: 0x4]
	void SetOwner(byte InRole, Actor* InOwner);// 0x25c9c14
	Actor* GetOwner();// 0x25c9be4

--------------------------------
Class: EmojiGiveALikeMgr.ActorComponent.Object
	float TickTimerInterval;//[Offset: 0xa8, Size: 0x4]
	float CheckDist;//[Offset: 0xac, Size: 0x4]
	Emoji3DActor* CurrentEmojiActor;//[Offset: 0xb4, Size: 0x8]
	void SetEmojiOK();// 0x25bd754
	void RPCServerSetEmojiOK(Emoji3DActor* EmojiActor);// 0x23f62a4
	void AfterTickCheck_Client(float DeltaTime, out const Vector ViewLocation, out const Rotator ViewRotation);// 0x25bd768

--------------------------------
Class: Emoji3DActor.MissilePropsWeapon.DynamicMovementActor.Actor.Object
	CapsuleComponent* Emoji3DRootCapsule;//[Offset: 0x2c0, Size: 0x4]
	SceneComponent* EmojiInfoUIRoot;//[Offset: 0x2c4, Size: 0x4]
	StaticMeshComponent* Emoji3DBaseMesh;//[Offset: 0x2c8, Size: 0x4]
	ParticleSystemComponent* Emoji3DParticle;//[Offset: 0x2cc, Size: 0x4]
	ParticleSystemComponent* DestroyPsc;//[Offset: 0x2d0, Size: 0x4]
	AkComponent* EmojiAkComponent;//[Offset: 0x2d4, Size: 0x4]
	WidgetComponent* WidgetComp;//[Offset: 0x2d8, Size: 0x4]
	UserWidget* UIWidget;//[Offset: 0x2dc, Size: 0x4]
	FName NormalThrowSound;//[Offset: 0x2e0, Size: 0x8]
	FName NormalLandSound;//[Offset: 0x2e8, Size: 0x8]
	FName NormalActiveSound;//[Offset: 0x2f0, Size: 0x8]
	FName SpecialThrowSound;//[Offset: 0x2f8, Size: 0x8]
	FName SpecialLandSound;//[Offset: 0x300, Size: 0x8]
	FName SpecialActiveSound;//[Offset: 0x308, Size: 0x8]
	float DestroyFadeOutTime;//[Offset: 0x310, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x314, Size: 0x4]
	FName EmojiId;//[Offset: 0x318, Size: 0x8]
	bool IsLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	Vector LandedImpactNormal;//[Offset: 0x324, Size: 0xc]
	FString OwnerCharName;//[Offset: 0x330, Size: 0xc]
	int OwnerCharTeamID;//[Offset: 0x33c, Size: 0x4]
	int OwnerCharTeamIdx;//[Offset: 0x340, Size: 0x4]
	bool bDisplayDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	float DestroyFadeOutTotalDeltaTime;//[Offset: 0x348, Size: 0x4]
	int[] GiveALikePlayerList;//[Offset: 0x34c, Size: 0xc]
	Vector OwnerAimedPosition;//[Offset: 0x358, Size: 0xc]
	void ShowEmojiInfo(bool Show);// 0x2588840
	void SetDisplayInfo(bool bIsAimed, const bool bShowInAnim);// 0x25baffc
	void OnRepDisplayDestroy();// 0x25bae58
	void OnRep_OwnerCharTeamIdx();// 0xfd338c
	void OnRep_OwnerCharTeamID();// 0xfd338c
	void OnRep_OwnerCharName();// 0xfd338c
	void OnRep_LandedImpactNormal();// 0x25bb1a8
	void OnRep_IsLanded();// 0x25bb1bc
	void OnRep_EmojiID();// 0x25bb1d0
	void OnRep_EmojiGiveALike();// 0x25bafe8
	void OnAimedAtClient(bool NewIsAimed, Vector AimedPosition);// 0x25bb0d4
	bool IsSelfEmojiActor();// 0x25baec8
	bool IsExistInGiveALikeList(const int PlayerKey);// 0x25baef0
	Vector GetUIRootPosition();// 0x25bae80
	void EnterDestroy();// 0x25bae6c
	void DisplayDestroy();// 0x2ce6f18
	void AddGiveALikePlayer(const int PlayerKey);// 0x25baf70

--------------------------------
Class: MissilePropsWeapon.DynamicMovementActor.Actor.Object
	bool bIsFake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	bool bHasFake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 0x1]
	DynamicMovementComponent_Projetile* MovementComponent;//[Offset: 0x1e8, Size: 0x4]
	bool HasBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	bool bMoveStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 0x1]
	bool bImpacted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 0x1]
	bool TempHasBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 0x1]
	AkAudioEvent* BounceAudio;//[Offset: 0x1f0, Size: 0x4]
	AkAudioEvent* ExplosionAudio;//[Offset: 0x1f4, Size: 0x4]
	ParticleSystem* ExplosionPs;//[Offset: 0x1f8, Size: 0x4]
	float TailFxDelayHideTime;//[Offset: 0x1fc, Size: 0x4]
	float ExplosionTime;//[Offset: 0x200, Size: 0x4]
	float LaunchDelayTime;//[Offset: 0x204, Size: 0x4]
	bool bDebugProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	float RealExplosionTime;//[Offset: 0x20c, Size: 0x4]
	bool bRealExplosionTimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	TimerHandle ExplosionTh;//[Offset: 0x218, Size: 0x8]
	TimerHandle LaunchDelayTh;//[Offset: 0x220, Size: 0x8]
	bool DoneExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	int TeamID;//[Offset: 0x22c, Size: 0x4]
	int CampID;//[Offset: 0x230, Size: 0x4]
	Actor*[] TeamMateArray;//[Offset: 0x234, Size: 0xc]
	ApexPlayerState* OwnerPs;//[Offset: 0x240, Size: 0x8]
	float HintRadius;//[Offset: 0x248, Size: 0x4]
	int ExplosionHintId;//[Offset: 0x24c, Size: 0x4]
	int ExplosionHintInstId;//[Offset: 0x250, Size: 0x4]
	int ItemID;//[Offset: 0x254, Size: 0x4]
	bool NeedDynamicScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float DynamicScaleFactor;//[Offset: 0x25c, Size: 0x4]
	int IndicatorMaxNum;//[Offset: 0x260, Size: 0x4]
	class WarningActor* ExplosionIndicatorBp;//[Offset: 0x264, Size: 0x4]
	WarningActor* ExplosionIndicator;//[Offset: 0x268, Size: 0x4]
	float ExplosionIndicatorDelay;//[Offset: 0x26c, Size: 0x4]
	float BeginPlayTime;//[Offset: 0x270, Size: 0x4]
	FName AttachSocketName;//[Offset: 0x280, Size: 0x8]
	float LeftTime;//[Offset: 0x288, Size: 0x4]
	bool bTimingExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	bool bEnableDamageHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 0x1]
	uint64 FakeID;//[Offset: 0x290, Size: 0x8]
	MissilePropsWeapon* LinkMissilePropsWeaponWeak;//[Offset: 0x298, Size: 0x8]
	SkeletalMeshComponent* MissileSkeletalMesh;//[Offset: 0x2a0, Size: 0x4]
	void OnRepImpacted();// 0x26b11e4
	void OnRepDoneExplosion();// 0x26b11d0
	void OnMoveEventStop(out const HitResult ImpactResult, bool bServer, Actor* InOwner);// 0x26b11f8
	void OnMoveEventBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity, bool bServer, int BounceNum, Actor* InOwner);// 0x26b1328

--------------------------------
Class: ApexPlayerState.PlayerState.Info.Actor.Object
	uint32[] ForceAllowDamagePlayerKeys;//[Offset: 0x298, Size: 0xc]
	float Perc2Opacity;//[Offset: 0x2a4, Size: 0x4]
	enum CacheCameraMode;//[Offset: 0x2a8, Size: 0x1]
	FName PlayerType;//[Offset: 0x2ac, Size: 0x8]
	int PlayerKey;//[Offset: 0x2b4, Size: 0x4]
	uint64 UID;//[Offset: 0x2b8, Size: 0x8]
	BackpackItemInfo[] PlayerItemInfos;//[Offset: 0x2c0, Size: 0xc]
	bool IsMicroOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	int TeamID;//[Offset: 0x2d0, Size: 0x4]
	int TeamIdx;//[Offset: 0x2d4, Size: 0x4]
	FString CorpsName;//[Offset: 0x2d8, Size: 0xc]
	FString CorpsNickName;//[Offset: 0x2e4, Size: 0xc]
	int LegendId;//[Offset: 0x2f0, Size: 0x4]
	FString ZoneID;//[Offset: 0x2f4, Size: 0xc]
	BannerData CurrentBannerData;//[Offset: 0x300, Size: 0x3c]
	BannerData[] LegendBannerDataArray;//[Offset: 0x33c, Size: 0xc]
	delegate OnLegendIdChange;//[Offset: 0x348, Size: 0xc]
	int LegendSkin;//[Offset: 0x354, Size: 0x4]
	<int,int> DefaultLegendSkinMap;//[Offset: 0x358, Size: 0x3c]
	<int,LegendEmotePaintingInfo> EmotePaintData;//[Offset: 0x394, Size: 0x3c]
	int[] CurrentEmotePaintingData;//[Offset: 0x3d0, Size: 0xc]
	bool bSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 0x1]
	bool bIsUseSecIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de, Size: 0x1]
	MpWeaponInfo MpWeaponInfo;//[Offset: 0x3e0, Size: 0x24]
	LegendSkinData[] ValidSkinArray;//[Offset: 0x408, Size: 0xc]
	int LegendLevel;//[Offset: 0x414, Size: 0x4]
	int CampID;//[Offset: 0x418, Size: 0x4]
	int CampIdx;//[Offset: 0x41c, Size: 0x4]
	bool bIsRobot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bIsSingleParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	int[] ValidLegendArray;//[Offset: 0x424, Size: 0xc]
	int[] LimitValidLegendArray;//[Offset: 0x430, Size: 0xc]
	PlayerEquipSkinInfo[] EquipSkinArray;//[Offset: 0x43c, Size: 0xc]
	int ChooseLegendID;//[Offset: 0x448, Size: 0x4]
	int ConfirmLegendID;//[Offset: 0x44c, Size: 0x4]
	Vector ServerLocation;//[Offset: 0x450, Size: 0xc]
	GameModePlayerBattleInfoGroup BattleInfoGroup;//[Offset: 0x45c, Size: 0x14]
	int SegmentLevel;//[Offset: 0x470, Size: 0x4]
	int Rating;//[Offset: 0x474, Size: 0x4]
	int WarmScore;//[Offset: 0x478, Size: 0x4]
	int KDERAverage;//[Offset: 0x47c, Size: 0x4]
	int KDERNum;//[Offset: 0x480, Size: 0x4]
	int AILevel;//[Offset: 0x484, Size: 0x4]
	BrilliantInfo BrilliantInfo;//[Offset: 0x488, Size: 0x24]
	bool bSubJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	FString IPcountry;//[Offset: 0x4b0, Size: 0xc]
	FString VoiceID;//[Offset: 0x4bc, Size: 0xc]
	int ReplaceUID;//[Offset: 0x4cc, Size: 0x4]
	int DailyWinTime;//[Offset: 0x4d0, Size: 0x4]
	int FinisherID;//[Offset: 0x4d4, Size: 0x4]
	<int,int> LegendToFinisherID;//[Offset: 0x4d8, Size: 0x3c]
	int DefaultEquipIndex;//[Offset: 0x514, Size: 0x4]
	int LoadoutID;//[Offset: 0x518, Size: 0x4]
	int GameNum;//[Offset: 0x51c, Size: 0x4]
	int BRGameNum;//[Offset: 0x520, Size: 0x4]
	int sub_mode_group_game_num;//[Offset: 0x524, Size: 0x4]
	uint32 RoomPlayerCount;//[Offset: 0x528, Size: 0x4]
	int64 BanOBEndTime;//[Offset: 0x530, Size: 0x8]
	FString BanOBReasonText;//[Offset: 0x538, Size: 0xc]
	int64 BanChatEndTime;//[Offset: 0x548, Size: 0x8]
	int64 BanChatNoPerceptionEndTime;//[Offset: 0x550, Size: 0x8]
	bool bIsCommander;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	BattleItemData[] AmmoItemList;//[Offset: 0x568, Size: 0xc]
	int ArmorUpGradeCount;//[Offset: 0x574, Size: 0x4]
	SimpleTrackerData[] TrackerDetailArray;//[Offset: 0x578, Size: 0xc]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]
	ApexPlayerState*[] TeamMatePlayerStates;//[Offset: 0x588, Size: 0xc]
	ApexTeamState* TeamState;//[Offset: 0x594, Size: 0x4]
	ApexPlayerState*[] CampMatePlayerStates;//[Offset: 0x598, Size: 0xc]
	JumpTailID JumpTailID;//[Offset: 0x5e4, Size: 0x18]
	JumpActionData JumpActionData;//[Offset: 0x5fc, Size: 0x18]
	enum CurrentBattleBehState;//[Offset: 0x614, Size: 0x1]
	enum PreviousBattleBehState;//[Offset: 0x615, Size: 0x1]
	delegate BattleBehStateChangedEvent;//[Offset: 0x618, Size: 0xc]
	delegate GotRecoverBannerEvent;//[Offset: 0x624, Size: 0xc]
	enum CurrentBannerState;//[Offset: 0x630, Size: 0x1]
	PlayerStatePartInfo PlayerStatePartInfo;//[Offset: 0x634, Size: 0x28]
	bool bOnRespawnTeammateEndSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]
	bool bOnRescuingEndSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65d, Size: 0x1]
	uint16 DyingCount;//[Offset: 0x65e, Size: 0x2]
	uint16 DyingTimeoutSec;//[Offset: 0x660, Size: 0x2]
	uint16 DyingRealtimeSec;//[Offset: 0x662, Size: 0x2]
	delegate OnTeammateEnterDying;//[Offset: 0x664, Size: 0xc]
	DamageEvent DyingDamageEvent;//[Offset: 0x670, Size: 0x8]
	Controller* DyingEventInstigator;//[Offset: 0x678, Size: 0x4]
	Actor* DyingDamageCauser;//[Offset: 0x67c, Size: 0x4]
	TimerHandle DyingInvincibleTH;//[Offset: 0x680, Size: 0x8]
	ApexCharacterMapFlags* ApexCharacterMapFlags;//[Offset: 0x688, Size: 0x4]
	byte CloseFlagDynamicOutLineSignal;//[Offset: 0x68c, Size: 0x1]
	uint16 RespawningTimeoutSec;//[Offset: 0x68e, Size: 0x2]
	uint16 ShownRespawningTimeoutSec;//[Offset: 0x690, Size: 0x2]
	uint16 RespawningRealtimeSec;//[Offset: 0x692, Size: 0x2]
	uint16 ShownRespawningRealtimeSec;//[Offset: 0x694, Size: 0x2]
	bool bTeamHoldRecoverBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x696, Size: 0x1]
	bool bSwitchHoldBannerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x697, Size: 0x1]
	byte RespawnTeammateRealTimeSec;//[Offset: 0x698, Size: 0x1]
	ApexRespawnBeacon* CapturedRespawnBeacon;//[Offset: 0x69c, Size: 0x8]
	bool bRescueOtherSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 0x1]
	float BeingRescueTimeSec;//[Offset: 0x6b0, Size: 0x4]
	float BeingRescueRealTimeSec;//[Offset: 0x6b4, Size: 0x4]
	int RescuingSourcePlayerKey;//[Offset: 0x6b8, Size: 0x4]
	int CachedRescuingTargetPlayerKey;//[Offset: 0x6bc, Size: 0x4]
	Actor* RescueJoinObject;//[Offset: 0x6c0, Size: 0x8]
	bool bAutonomousGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 0x1]
	int[] KillMePlayerKeySet;//[Offset: 0x6cc, Size: 0xc]
	ApexCharacter* CharacterOwner;//[Offset: 0x718, Size: 0x8]
	bool bCanShowTreasureDoorOnMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 0x1]
	int CachedFinisherTargetPlayerKey;//[Offset: 0x760, Size: 0x4]
	bool bIsCharacterInCirclePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x764, Size: 0x1]
	bool bIsNetLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 0x1]
	float PingStatusRefreshInterval;//[Offset: 0x780, Size: 0x4]
	float BadPingThreshold;//[Offset: 0x784, Size: 0x4]
	float NetLostPingValue;//[Offset: 0x788, Size: 0x4]
	bool bIsNetBadPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 0x1]
	uint32 AIHostPlayerKey;//[Offset: 0x798, Size: 0x4]
	bool bAIHosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 0x1]
	int AIHostFunc1;//[Offset: 0x7a0, Size: 0x4]
	int AIHostFunc2;//[Offset: 0x7a4, Size: 0x4]
	int AIHostFunc3;//[Offset: 0x7a8, Size: 0x4]
	int AIHostFunc4;//[Offset: 0x7ac, Size: 0x4]
	int AIHostFunc5;//[Offset: 0x7b0, Size: 0x4]
	int LootAreaID;//[Offset: 0x7b8, Size: 0x4]
	Vector DeadLocation;//[Offset: 0x7c8, Size: 0xc]
	int[] UseHarvesterMapIndex;//[Offset: 0x7d4, Size: 0xc]
	FString OpenId;//[Offset: 0x7e0, Size: 0xc]
	int64 OriginalGameID;//[Offset: 0x7f0, Size: 0x8]
	InGameActivityPlayerData[] InGameActivityPlayerDataArray;//[Offset: 0x7f8, Size: 0xc]
	InGameActivityPickupData[] ActivityPickupDataArray;//[Offset: 0x804, Size: 0xc]
	InGameActivityPickupData[] ClientActivityPickupDatas;//[Offset: 0x810, Size: 0xc]
	int RespawnTag;//[Offset: 0x81c, Size: 0x4]
	int ReSpawnNumber;//[Offset: 0x820, Size: 0x4]
	int SkillAssistShowType;//[Offset: 0x824, Size: 0x4]
	bool bAllSkillAssistEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 0x1]
	SkillAssistData[] SkillAssistArray;//[Offset: 0x82c, Size: 0xc]
	LegendAssistData[] LegendAssistArray;//[Offset: 0x838, Size: 0xc]
	bool bIsPerkOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1]
	LegendCustomPerksInfo[] PerksPlan;//[Offset: 0x848, Size: 0xc]
	int SelectPerksPlanIndex;//[Offset: 0x854, Size: 0x4]
	<int,LegendCustomPerksPlan> LegendCustomPerksMap;//[Offset: 0x858, Size: 0x3c]
	<int,int> PutOnPerksIndexMap;//[Offset: 0x894, Size: 0x3c]
	DSPlayerGunAmuletInfo[] GunAmuletArray;//[Offset: 0x8d0, Size: 0xc]
	void WaitAutonomousPlayerState();// 0x24930c4
	void UpdateSkillCastTimes(const ApexCharacter* ApexChar, int SkillConfigId, int NewTimes);// 0x24915dc
	void TryRecoverDeathTipBar();// 0x24933f8
	void TickRespawnTeammate();// 0x24925ec
	void TickRespawning();// 0x249277c
	void TickRescuing();// 0x2446688
	void TickDying();// 0x2492c10
	void SyncTeamInfoFromLua();// 0x24946e8
	void SynchronizePlayerStatePartInfo();// 0x24930ec
	Actor* SpawnRespawnAircraft();// 0x249247c
	void ShowRetrieveStatusHeadFlags(out const Vector CurLocation, uint16 CurTimeoutSec, uint16 CurShownTimeoutSec);// 0x2492798
	void ShowAidStatusHeadFlags(uint16 CurDyingCount, uint16 CurTimeoutSec, out const Vector CurLocation, enum InFlag);// 0x2492a08
	void SetSubJoin(bool Value);// 0x2492b7c
	void SetSkillAssistEnable(int SkillConfigId, bool bEnable);// 0x2490e84
	void SetSelectingState(bool bNewSelecting);// 0x24943dc
	void SetRespawnTag(const int InRespawnTag);// 0x2491018
	void SetLegendAssistEnable(int LegendConfigId, bool bEnable);// 0x2490dc0
	void SetKillMePlayerKeySet(int KillerKey);// 0x249188c
	void SetJumpTailID(JumpTailID NewJumpTailID);// 0x2493de4
	void SetJumpActionData(JumpActionData NewJumpActionData);// 0x24939d0
	void SetIsSingleParachute(bool NewIsSingleParachute);// 0x2494218
	void SetFinisherID(int InFinisherID);// 0x249418c
	void SetDyingDamageInfo(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x2492f10
	void SetCloseFlagDynamicOutLine();// 0x2492bfc
	void SetCharacterShieldMax(out const float NewValue);// 0x2494d54
	void SetCharacterShieldLevel(out const int NewValue);// 0x2494ccc
	void SetCharacterShieldHealing(out const float NewValue);// 0x2494bbc
	void SetCharacterShield(out const float NewValue);// 0x2494ddc
	void SetCharacterHelmetLevel(out const int NewValue);// 0x2494c44
	void SetCharacterHealthMax(out const float NewValue);// 0x2494eec
	void SetCharacterHealthHealing(out const float NewValue);// 0x2494e64
	void SetCharacterHealth(out const float NewValue);// 0x2494f74
	void SetAutonomousGameOver(bool bFlag);// 0x2491904
	void ServerSwitchCurrentLobaMarketInfo(LobaBlackMarket* SwitchToLobaMarket);// 0x24909a4
	void ServerSecRespawnFlow(RespawnFlowData RespawnFlowData);// 0x249225c
	void SaveAllSkillCDData(const ApexCharacter* ApexChar, enum SaveReason);// 0x24916e4
	void RPC_PlayerExitReason(byte thePlayerExitReason);// 0x2494334
	void RPC_ClientNotifyZoneID(FString InZoneID, int InTeamId, int InCampId, FString InVoiceID);// 0x24934a4
	void RespawnTeammateSuccess();// 0x24924c8
	bool RespawnTeammateImmediately(ApexRespawnBeacon* RespawnBeacon);// 0x24924e4
	void RespawnTeammateFailure();// 0x24924ac
	void RespawnTeammateEnd(enum Reason);// 0x249256c
	void ResetRespawnTag();// 0x2491004
	void RescuingSelfEnd(enum Reason, bool bReviveFlow);// 0x2491d0c
	void RescuingEnd(enum Reason, bool bReviveFlow);// 0x2491dd0
	bool RescueOtherEnd(enum Reason, Actor* TargetActor, bool bUseRobotRescue);// 0x2491bfc
	void RemoveRecoverBanner(int InPlayerKey);// 0x2491a54
	int RecoverBannerNum();// 0x2491998
	void ReceiveTeamMateDyingLocation(uint32 MatePlayerKey, Vector MateLocation);// 0x2492cd0
	void ReceiveCompletelyDie();// 0x2492084
	void ReceiveAuthRespawnTimeout();// 0x24921c8
	void ReceiveAuthRespawnTeammateEnd();// 0x2492444
	void ReceiveAuthRespawnTeammate();// 0x2492608
	void ReceiveAuthRespawning();// 0x24928b0
	void ReceiveAuthRescuingInfo();// 0x242f888
	void ReceiveAuthRescuingEnd();// 0x2446fc0
	void ReceiveAuthExit(ApexPlayerState* ExitPlayerState);// 0x2495194
	void ReceiveAuthDyingInfo();// 0x2492db0
	void ProcessBattleBehState();// 0x24930d8
	bool PlayerSetSkillAssist(int SkillConfigId);// 0x2490d2c
	bool PlayerSetLegendAssist(int LegendConfigId);// 0x2490c2c
	void PingSelfBanner();// 0x24926a4
	void PickBannerFlow(uint32 InPlayerKey);// 0x24921e4
	void PassiveBreakRescuing();// 0x2491b60
	void OnRep_ValidSkinArray();// 0x2ce6f18
	void OnRep_ValidLegendArray();// 0x24936d8
	void OnRep_TeamMatePlayerStates();// 0x2493444
	void OnRep_TeamIdx();// 0x2493488
	void OnRep_TeamId();// 0x2493714
	void OnRep_TeamHoldRecoverBanner();// 0x2492760
	void OnRep_SubJoin();// 0x2493624
	void OnRep_SingleParachute();// 0x24936ec
	void OnRep_ServerLocation();// 0x2494204
	void OnRep_SelectPerksPlanIndex();// 0x2ce6f18
	void OnRep_SegmentLevel();// 0x2493660
	void OnRep_RespwningRealtimeSec();// 0x2491528
	void OnRep_ReSpawnNumber();// 0x2490fc8
	void OnRep_RepUseHarvester(int[] PreArray);// 0x2491140
	void OnRep_RepLootAreaID();// 0x2491224
	void OnRep_Rating();// 0x2ce6f18
	void OnRep_PlayerStatePartInfo(PlayerStatePartInfo PrevPartInfo);// 0x2493100
	void OnRep_PlayerItemInfos();// 0x2493674
	void OnRep_PlayerBannerState(enum Previous);// 0x2493268
	void OnRep_PerksPlan();// 0x2ce6f18
	void OnRep_MpWeaponInfo();// 0x2493638
	void OnRep_LoadoutID();// 0x24936c4
	void OnRep_LimitValidLegendArray();// 0x2ce6f18
	void OnRep_LegendSkin();// 0x249373c
	void OnRep_LegendLevel();// 0x249369c
	void OnRep_LegendId();// 0x24936b0
	void OnRep_IsUseSecIcon();// 0x249364c
	void OnRep_IsPerkOpen();// 0x2ce6f18
	void OnRep_IsCommander();// 0x2493688
	void OnRep_HasSendBattleResult();// 0x24940f8
	void OnRep_ForceAllowDamagePlayerKeys();// 0x2494a98
	void OnRep_FinisherID();// 0x2ce6f18
	void OnRep_EquipSkinArray();// 0x2ce6f18
	void OnRep_DyingRealtimeSec();// 0x249153c
	void OnRep_DefaultEquipIndex();// 0xfd338c
	void OnRep_DailyWinTime();// 0x2ce6f18
	void OnRep_CurrentEmotePaintingData();// 0x249445c
	void OnRep_CurrentBannerData();// 0x2ce6f18
	void OnRep_ConfirmLegendID();// 0x249340c
	void OnRep_CloseFlagDynamicOutLineSignal();// 0x2492b68
	void OnRep_ChooseLegendID();// 0x2493428
	void OnRep_CanShowTreasureDoorOnMiniMap();// 0x249145c
	void OnRep_CampMatePlayerStates();// 0x2493728
	void OnRep_CampId();// 0x2493700
	void OnRep_bIsNetLost();// 0x2491288
	void OnRep_bIsNetBadPing();// 0x2491274
	void OnRep_BattleInfoGroup();// 0x2ce6f18
	void OnRep_bAIHosting();// 0x249124c
	void OnRep_AIHostPlayerKey();// 0x2491260
	void OnRep_AIHostFunc();// 0x2491238
	void OnRep_ActivityItemList();// 0x2491090
	void OnPopupDeathTipBar();// 0x24933e4
	void OnPlayerControllerRespawn();// 0xfd338c
	void OnPlayerControllerExit();// 0x24917b4
	void OnAppEnterForeground();// 0x2490dac
	void NotifyGuidePickBanner();// 0x2493254
	bool IsUsingRescueRobots();// 0x249205c
	bool IsTeammateHaveSameItem(int ItemID);// 0x2491470
	bool IsTeammate(PlayerState* PlayerState, bool bCheckHostile);// 0x24948dc
	bool IsSoloing();// 0x24920a0
	bool IsSkillAssistEnableByConfigId(int idSkillConfig);// 0x2490f48
	bool IsSkillAssistEnable(int SkillConfigId);// 0x2490cac
	bool IsPlayerAliveOrDying();// 0x2494a48
	bool IsPlayerAlive();// 0x2494a70
	bool IsLegendAssistEnable(int LegendConfigId);// 0x2490bac
	bool IsInFinisher();// 0x24912c4
	bool IsCommand(int InLegendId);// 0x24942b4
	void InvisibleStatusHeadFlags(bool bInvisible);// 0x2492964
	void HideStatusHeadFlags();// 0x24929ec
	bool HasRecoverBanner(int InPlayerKey);// 0x24919c0
	void HandleMsg(enum Msg);// 0x2491550
	void HandleBattleBehState();// 0x2493358
	void GuidePickBanner(enum TeamMateBannerState, int TeammatePlayerKey);// 0x2493198
	void GetTeamMatePlayerStates(out ApexPlayerState*[] OutList, bool ExcludeMyself);// 0x24947ec
	byte GetTeamMateNum();// 0x24940d8
	bool GetSelectingState();// 0x24943b4
	int GetRespawnTag();// 0x2490fdc
	JumpTailID GetRawJumpTailID();// 0x2493f38
	int GetPlayerKey();// 0x24946cc
	LegendCustomPerksInfo[] GetPerksPlan();// 0x2490aa4
	bool GetMicroOpenByUID(uint64 UserID);// 0x2494648
	FText GetLocalizedLegendName();// 0x2494580
	FText GetLegendName(int LegendId);// 0x2494470
	int GetJumpTailID();// 0x2493758
	JumpActionData GetJumpActionRawData();// 0x2493bc8
	int GetJumpActionDataIndex(int Index);// 0x24937b8
	int[] GetJumpActionData();// 0x2493880
	bool GetIsSingleParachute();// 0x2494298
	enum GetCurBattleBehState();// 0x24930a8
	float GetCharacterShieldMax();// 0x2495074
	int GetCharacterShieldLevel();// 0x249504c
	float GetCharacterShieldHealing();// 0x2494ffc
	float GetCharacterShield();// 0x249509c
	int GetCharacterHelmetLevel();// 0x2495024
	float GetCharacterHealthMax();// 0x24950ec
	float GetCharacterHealthHealing();// 0x24950c4
	float GetCharacterHealth(float DefaultValue);// 0x2495114
	ApexCharacter* GetCharacter();// 0x2494a20
	void GetCampMatePlayerStates(out ApexPlayerState*[] OutList, bool ExcludeMyself);// 0x24946fc
	float GetApexExactPing();// 0x249129c
	int GetAmmoNum(int AmmoID);// 0x249410c
	byte GetAliveTeamMateNum();// 0x24940b0
	byte GetAliveOrDyingTeamMateNum();// 0x2494088
	void GenAuthRespawnTeammate(ApexRespawnBeacon* CapturedBeacon);// 0x2492624
	void GenAuthRespawningInfo();// 0x24928cc
	void GenAuthRescuingInfoAsTarget(ApexPlayerState* RescueSource, bool UsingRobot);// 0x2491e9c
	void GenAuthRescuingInfo(int OtherPlayerKey, bool UsingRobot);// 0x2491f68
	void GenAuthGotTreasureKey();// 0x249150c
	void GenAuthGotRecoverBanner(uint32 InPlayerKey);// 0x24926e0
	void GenAuthFinisherInfo(int OtherPlayerKey);// 0x24913e4
	void GenAuthDyingInfo(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x2492dcc
	void GenAuthDropTreasureKey();// 0x24914f0
	void GenAuthCancelRespawnTeammate();// 0x2492460
	void GenAuthCancelRescuing(int OtherPlayerKey);// 0x2491b7c
	void GenAuthCancelFinisher(int OtherPlayerKey);// 0x24912ec
	void FinisherEnd(enum Reason);// 0x2491364
	int FindGunAmuletID(int InGunItemID);// 0x2490a24
	void EnableCloseEyeEffect();// 0x2492948
	void DyingTimeout(bool bFollowTeamDead);// 0x2492c48
	void DyingNotifyLocation();// 0x2492d94
	void DyingInvincibleTimeout();// 0x2493070
	void DyingInvincible();// 0x249308c
	void DyingFatal();// 0x2492c2c
	void DuplicateByAnotherPlayerState(const ApexPlayerState* PlayerState);// 0x24949a8
	void DisplaySavedSkillCDEnergyDataDebug();// 0x24915c8
	void CompletelyDie(bool HandleDying);// 0x2492148
	void ClientSecRespawnFlow(uint32 Rescuer, byte ReviveFrom);// 0x2492380
	void ClientRefreshLobaMarketInfo(LobaBlackMarket* SwitchToLobaMarket, const SearchedPickUpWrapperResult[] PickUpItemDatas);// 0x249086c
	void ClientNotifyPickupActivityItem(const PickupNotifyData PickupNotifyData);// 0x24910a4
	void ClientAddInteractionLobaMarketInfo(LobaBlackMarket* InLobaMarket, SearchedPickUpWrapperResult PickUpItemData);// 0x24906a4
	void ClearRecoverBanner();// 0x2491a40
	void ClearLastTimeCharData();// 0x24917a0
	void ClearAllBehState();// 0x2491b44
	void CheckTeamRecoverBanner();// 0x2491984
	bool CheckTeamAlive(ApexPlayerState* Except);// 0x24920c8
	void ChangePlayerBannerState(enum Next);// 0x24932e0
	void ChangeBattleBehState(enum Next);// 0x249336c
	bool CanUseRescueRobot();// 0x2492034
	bool CanRescueSelf();// 0x2492918
	bool CanGotoRespawn();// 0x24928e8
	bool CanGotoDying();// 0x2493040
	void CallOnRep_TeamMatePlayerStates();// 0x2493460
	void CallOnRep_TeamIdxFromLua();// 0x2493474
	void BreakRescueOther();// 0x2492efc
	Actor* AuthPingRespawnBeacon();// 0x24926b8
	void AuthExit();// 0x2495214
	void ApplyLegendRes_Notify(int TeamIndex, int ApplyLegendID);// 0x2ce6f18
	void ApplyLegendRes(int TeamIndex, int ApplyLegendID);// 0x24917c8
	void AddRecoverBanner(int InPlayerKey);// 0x2491acc
	void AddCharacterShield(out const float AddValue);// 0x2494aac
	void AddCharacterHealth(out const float AddValue);// 0x2494b34

--------------------------------
Class: BackpackItemInfo
	int AmmoID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BannerData
	int LegendId;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
	int FrameID;//[Offset: 0x8, Size: 0x4]
	int PosID;//[Offset: 0xc, Size: 0x4]
	FString PlayerName;//[Offset: 0x10, Size: 0xc]
	int KillNum;//[Offset: 0x1c, Size: 0x4]
	int PlayerKey;//[Offset: 0x20, Size: 0x4]
	ServerBadgeData[] BadgeDataArray;//[Offset: 0x24, Size: 0xc]
	ServerTrackerData[] TrackerDataArray;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: ServerBadgeData
	int BadgeID;//[Offset: 0x0, Size: 0x4]
	int Process;//[Offset: 0x4, Size: 0x4]
	int Status;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ServerTrackerData
	int TrackerID;//[Offset: 0x0, Size: 0x4]
	int Process;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LegendEmotePaintingInfo
	int[] EmotePaintingID;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: MpWeaponInfo
	MpWeaponUseTimeData[] WeaponUseTimeMap;//[Offset: 0x0, Size: 0xc]
	MpWeaponFittingData[] FittingDataArray;//[Offset: 0xc, Size: 0xc]
	int[] LastWeaponArray;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MpWeaponUseTimeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int UseTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MpWeaponFittingData
	int ID;//[Offset: 0x0, Size: 0x4]
	int WeaponFittingItemID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: JumpTailID
	int[] Key;//[Offset: 0x0, Size: 0xc]
	int[] List;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: JumpActionData
	int[] Key;//[Offset: 0x0, Size: 0xc]
	JumpActionDataList[] List;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: JumpActionDataList
	int[] List;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: LobaBlackMarket.SkillActorBase.DynamicMovementActor.Actor.Object
	FName[] BuffNames;//[Offset: 0x3ec, Size: 0xc]
	float MaxRecycleDist;//[Offset: 0x3f8, Size: 0x4]
	byte[] QueryObjectTypes;//[Offset: 0x3fc, Size: 0xc]
	float MinShowSquaredDist;//[Offset: 0x408, Size: 0x4]
	float CullDistance;//[Offset: 0x40c, Size: 0x4]
	float AddCollectPointCharcterEnter_SphereRadius;//[Offset: 0x410, Size: 0x4]
	float AddCollectPointCharcterLeave_SphereRadius;//[Offset: 0x414, Size: 0x4]
	float TimeCanSeeButton;//[Offset: 0x418, Size: 0x4]
	float LobaBlackMarketPingHeight;//[Offset: 0x41c, Size: 0x4]
	float CheckBeStrikeVehicleStartZOffset;//[Offset: 0x420, Size: 0x4]
	float CheckBeStrikeVehicleHeight;//[Offset: 0x424, Size: 0x4]
	float CheckBeStrikeVehicleTime;//[Offset: 0x428, Size: 0x4]
	float OverlapTime;//[Offset: 0x42c, Size: 0x4]
	byte[] VehicleObjectTypes;//[Offset: 0x430, Size: 0xc]
	class Actor[] CheckBeStrikeVehicleExcludeActorType;//[Offset: 0x43c, Size: 0xc]
	UAESkillManagerComponent* UAESkillManager;//[Offset: 0x448, Size: 0x4]
	SphereComponent* OverlapComp;//[Offset: 0x44c, Size: 0x4]
	SkeletalMeshComponent* MeshComp;//[Offset: 0x450, Size: 0x4]
	SkillActorHealthComponent* HealthComp;//[Offset: 0x454, Size: 0x4]
	SphereComponent* OverlapComp_CollectPointCharcterEntered;//[Offset: 0x458, Size: 0x4]
	SphereComponent* OverlapComp_CollectPointCharcterLeaved;//[Offset: 0x45c, Size: 0x4]
	int MaxPickItemNum;//[Offset: 0x460, Size: 0x4]
	BoxComponent* RootBox;//[Offset: 0x464, Size: 0x4]
	int CurPickItemNum;//[Offset: 0x468, Size: 0x4]
	float CollectionDeltaTime;//[Offset: 0x46c, Size: 0x4]
	bool bIsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	NetPickUpWrapperResult[] PickUpDataMap;//[Offset: 0x474, Size: 0xc]
	bool bCanShowCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	float DestroyWaitTime;//[Offset: 0x4fc, Size: 0x4]
	NetRecoverBannerPlayerInfo[] RecoverBannerPlayerKeys;//[Offset: 0x508, Size: 0xc]
	bool bEnableCollectRecoverBannerPlayerKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	Vector BoxCollisionHalfSize;//[Offset: 0x590, Size: 0xc]
	class Actor[] ExcludeActorType;//[Offset: 0x59c, Size: 0xc]
	bool bNeedResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	bool bIsShowRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 0x1]
	bool bIsShowOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5aa, Size: 0x1]
	PickupManagerComponent* CachePickupManagerComponent;//[Offset: 0x5ac, Size: 0x8]
	LobaBlackMarket* CurRecycleMarket;//[Offset: 0x5b4, Size: 0x8]
	ApexCharacter* CurWorkingCharacter;//[Offset: 0x5bc, Size: 0x8]
	bool bShowAsGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1]
	SearchedPickUpWrapperResult[] ClientSearchedPickUpWrapperResultList;//[Offset: 0x5c8, Size: 0xc]
	SearchedPickUpWrapperResult[] PickingItemList;//[Offset: 0x5d4, Size: 0xc]
	SearchedPickUpWrapperResult[] PickedItemList;//[Offset: 0x5e0, Size: 0xc]
	Actor*[] ShoppingActorList;//[Offset: 0x604, Size: 0xc]
	ApexCharacter*[] AddCollectPointCharcterList;//[Offset: 0x61c, Size: 0xc]
	bool bPickWeaponFroBlackMarktDoNotConsume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	SoftObjectPath[] LobaMainUIs;//[Offset: 0x678, Size: 0xc]
	Object*[] CacheResArray;//[Offset: 0x688, Size: 0xc]
	bool bPawnBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	float TotalDeltaTime;//[Offset: 0x6b4, Size: 0x4]
	uint32[] OverlapIndexArray;//[Offset: 0x6b8, Size: 0xc]
	void TakeDamageMulti(float DamageAmount, const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x26752d0
	void Show();// 0x2675b60
	void SetEnableRefreshPickUpList(bool InbEnableRefreshBlackMarketList);// 0x2673c18
	void ServerRecycleNode();// 0x2674ed4
	void ServerPickRecoverBanner(uint32 InPlayerKey, int LegendId);// 0x2673d8c
	void ResponseRecycleNode(bool isRecycleOK);// 0x2674e4c
	void ReplacePickUpWrapperActor(out const BlackMarketPickUpWrapperResult TargetPickUpWrapperResult, out const BattleItemData ReplaceBattleItemData);// 0x26741b4
	void RemovePickedItem(out const PickUpItemData InItem);// 0x26751d0
	void PreDestroy(bool bIsPickUp);// 0x2674dcc
	bool OpenMarket();// 0x2675070
	void OnSwitchCollisionToPawn(bool bEnable);// 0x2ce6f18
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x2675c30
	void OnSkillInit(int SkillIndex, UTSkill* Skill);// 0x2675b74
	void OnRep_IsShow();// 0x2675b4c
	void OnPickUpTargetSucced_Server(Vector OriginLocation, ApexCharacter* OutCharacter);// 0x2ce6f18
	void OnPickedMaxItemNumber();// 0x2ce6f18
	void OnPickedItem(int QualityLevel, SearchedPickUpWrapperResult InItem);// 0x2ce6f18
	void OnOpenMarket();// 0x2ce6f18
	void OnNotifyRecycle();// 0x2ce6f18
	void OnLocalPlayerAddPawnState(enum State, enum OverrideState);// 0x2674f18
	void OnLeaveScopeForAddCPC(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x26749ec
	void OnLeaveScope(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2675634
	void OnEnterScopeForAddCPC(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2674b34
	void OnEnterScope(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x267577c
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x26738d4
	void OnCloseMarket();// 0x2ce6f18
	void OnBlackMarketPickUpItem(SearchedPickUpWrapperResult PickUpWrapper, ApexCharacter* OutCharacter);// 0x2ce6f18
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2673a1c
	void OnAPEvent_BlackMarketPickUpItem(SearchedPickUpWrapperResult PickUpWrapper, bool bAddPickedItemNum);// 0x2675434
	void OnAddPlayerPickItemNumFromeBlackMarketOnServer(ApexCharacter* ApexCharacter, enum PickupGroup);// 0x2ce6f18
	void OnActorDeadEvent();// 0x26752bc
	bool NotifyRecycle();// 0x2674ef0
	bool IsTeammateBlackMarket();// 0x2675afc
	bool IsOwnerBlackMarket();// 0x2675d04
	void InnerOpenMarket(bool bOwner);// 0x2674fe8
	void InnerCloseMarket();// 0x2595ad0
	void InnerClearloadedLobaMainUIActionRes();// 0x24928cc
	bool HandlePickItem_Server(ApexCharacter* Character, SearchedPickUpWrapperResult PickUpWrapper);// 0x2674410
	PickupManagerComponent* GetPickupManagerComponent();// 0x2675604
	NetPickUpWrapperResult[] GetPickUpDataMapNotDelete();// 0x2674674
	NetPickUpWrapperResult[] GetPickUpDataMap();// 0x267473c
	SearchedPickUpWrapperResult GetPickedItem(int Index);// 0x2675978
	FString GetModuleName();// 0x2675d2c
	int GetMaxPickItemNum();// 0x2674658
	int GetItemQuality(PickUpItemData PickUpItemData);// 0x2674804
	bool GetIsShowingMarketUI();// 0x26743f4
	bool GetIsPickItemMax();// 0x26743cc
	bool GetEnableRefreshPickUpList();// 0x2673c98
	int GetCurPickItemNum(ApexCharacter* InCharacter);// 0x26745d8
	void GenerateNetPickUpWrapperToPickUpWrapperResult(ApexCharacter* Character, NetPickUpWrapperResult InNetPickUpWrapperResult, out SearchedPickUpWrapperResult OutSearchedPickUpWrapperResult);// 0x2673e50
	void Finished();// 0x2675b24
	void DealPickUpDataList();// 0x2675b38
	void CollectAndWrapPickUpActors();// 0x2674d30
	void CloseMarket();// 0x2674fd4
	void ClientPickRecoverBannerResult(uint32 InPlayerKey, bool bResult);// 0x2673cc0
	void ClientBeginDestroy(bool bIsPickUp);// 0x2674d44
	void BP_OnShow();// 0x2ce6f18
	void BP_OnDestroyed();// 0x2ce6f18
	void BP_OnActorHit(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x2ce6f18
	void BP_BeginDestroy();// 0x2ce6f18
	void AddPickedItem(out const SearchedPickUpWrapperResult InItem);// 0x2675098

--------------------------------
Class: SkillActorBase.DynamicMovementActor.Actor.Object
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x244, Size: 0x4]
	delegate OnClear;//[Offset: 0x248, Size: 0x1]
	int OwnerSkillUniqueTableID;//[Offset: 0x24c, Size: 0x4]
	bool bDoCoolDownWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool bHadDownCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	bool IsNotifyDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1]
	bool bIsSpawnUseAttachPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1]
	class CameraShake* ShakeClass;//[Offset: 0x254, Size: 0x4]
	float ShakeOuterRadius;//[Offset: 0x258, Size: 0x4]
	float ShakeInnerRadius;//[Offset: 0x25c, Size: 0x4]
	float ShakeFalloff;//[Offset: 0x260, Size: 0x4]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x264, Size: 0x4]
	bool bEnableDrugVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	int DrugVoiceID;//[Offset: 0x26c, Size: 0x4]
	float DrugDelayTime;//[Offset: 0x270, Size: 0x4]
	enum SkillActorType;//[Offset: 0x282, Size: 0x1]
	bool bAddViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	Controller* OwnerControllerBase;//[Offset: 0x284, Size: 0x8]
	enum OwnerLegendType;//[Offset: 0x28c, Size: 0x1]
	uint32 OwnerApexPlayerKey;//[Offset: 0x290, Size: 0x4]
	delegate OnTakeDamage;//[Offset: 0x294, Size: 0x1]
	delegate OnTakeDamageCrypto;//[Offset: 0x295, Size: 0x1]
	bool bListenToOBTargetSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 0x1]
	bool bListenToPlayerRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	OutlineAndFillComponent* OutlineComp;//[Offset: 0x2a4, Size: 0x4]
	bool bCanCryptoDroneFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool bAutoAddRenderMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	float MiniMapUpdateInterval;//[Offset: 0x2b8, Size: 0x4]
	delegate OnApexSkillEvent;//[Offset: 0x2c8, Size: 0xc]
	<ShapeComponent*,byte> CollisionResponseToChannelWithCamera;//[Offset: 0x2f0, Size: 0x3c]
	bool bSignificanceManagedOnBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	FName SignificanceTag;//[Offset: 0x330, Size: 0x8]
	enum SignificanceByType;//[Offset: 0x338, Size: 0x1]
	enum PostSignificanceType;//[Offset: 0x339, Size: 0x1]
	int OwnerSkillIndex;//[Offset: 0x340, Size: 0x4]
	SkillActorAttachData AttachData;//[Offset: 0x344, Size: 0x34]
	bool IsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	ApexPlayerController* OwnerApexController;//[Offset: 0x37c, Size: 0x8]
	int OwnerCharacterTeamId;//[Offset: 0x384, Size: 0x4]
	int OwnerCharacterCampId;//[Offset: 0x388, Size: 0x4]
	SkillActorDelayShowTime DelayShowTime;//[Offset: 0x38c, Size: 0x8]
	float SpawnedTime;//[Offset: 0x394, Size: 0x4]
	bool bUseReplicationPolicy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	FName ReplicationCullDistanceTag;//[Offset: 0x39c, Size: 0x8]
	float RefreshReplicationCullDistanceInterval;//[Offset: 0x3a4, Size: 0x4]
	BuffAffectedActorData[] AffectedActorArray;//[Offset: 0x3b4, Size: 0xc]
	bool bIsNeedLogInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	void UpdateForMiniMap(byte State);// 0x2765ff0
	void UnregisterFromSignificance();// 0x2492d94
	void TryInitMiniMap();// 0x2588ca0
	void TriggerSkillEvent(const enum SkillEvent, SkillEventParam* SkillEventParam);// 0x2765d78
	bool ShouldBeDoCoolDownForStatus();// 0x27670c4
	void SetVisible(bool Visible);// 0x2766f90
	void SetSkillIndex(SkillActorBase* OwnerSkillActor);// 0x2767188
	void RemoveOutLineEffect();// 0x24364ac
	void RemoveFromMiniMap();// 0x2766068
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor);// 0x2766b00
	void RegisterToSignificance(FName NewSignificanceTag, enum NewType, enum NewPostType);// 0x2765aac
	void RefreshReplicationCullDistancePolicy(FName InReplicationFrequencyTag);// 0x27654f4
	void RefreshOwnerSkillTableID();// 0x2767174
	void ReceiveClear();// 0x2ce6f18
	Vector RebaseZeroOriginOntoLocal(Vector WorldLocation);// 0x2765f5c
	Vector RebaseLocalOriginOntoZero(Vector WorldLocation);// 0x2564f84
	void PostLuaUIEvent(enum UIEventType, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x2767608
	void PostLuaEvent(Actor* OwnerTarget, int LuaCppEventTypeIndex, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x2767278
	void PhaseJumpError(enum JumpError);// 0x2767024
	void OnSkillItemPickUp_BP();// 0x2ce6f18
	void OnSkillAsyncLoadFinished();// 0x2493428
	void OnSignificanceChanged(float OldSignificance, float Significance);// 0x2765578
	void OnRep_SkillActorAttachData();// 0x2767010
	void OnRep_SetComponentVisible();// 0x2766f7c
	void OnRep_PlayerState(PlayerState* LocalCharacterPlayerState);// 0x2ce6f18
	void OnRep_OwnerSkillIndex();// 0x244d62c
	void OnRep_DelayShowTime();// 0x2765f48
	void OnPlayerRespawn(int RescuerKey, int VictimKey);// 0x27668d8
	void OnOneSkillAsyncLoadFinished(int SkillIndex);// 0x2765cf8
	void OnOBTargetSwitched_BP(bool bChangeToFriendly);// 0x2ce6f18
	void OnOBTargetSwitched(Actor* LastTarget, Actor* NewTarget);// 0x27664d8
	void OnDynamicStop(out const HitResult Hit, bool bServer, Actor* MovementActor);// 0x2765bc0
	void OnDetach();// 0x27666cc
	void OnDelayShow();// 0x2765f34
	void OnCharacterCameraModeSwitched_BP(enum NewMode);// 0x2ce6f18
	void OnCharacterCameraModeSwitched();// 0x276794c
	void OnAttach();// 0x27666e8
	bool IsTypeValid();// 0x2766704
	bool IsTeammate(Actor* OtherActor, bool bCheckHostile, bool bNeedPrintLog);// 0x27667b4
	bool IsSkillCasting();// 0x276709c
	bool IsSameTeam(Actor* Other);// 0x276699c
	bool IsInViewport();// 0x276571c
	bool IsAddViewAssist_Implementation();// 0x276669c
	void InitSkillManagerComponent();// 0x2765e3c
	void InitBuffSystemComponent(ApexBuffSystemComponent* Comp);// 0x2767200
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x2766a24
	Vector GetSkillActorInfo_MoveVelocity();// 0x2765424
	Vector GetSkillActorInfo_Location();// 0x2765474
	float GetSkillActorInfo_HP();// 0x27653f4
	int GetPingType();// 0x2543d9c
	int GetOwnerSkillUniqueTableID();// 0x2767144
	ApexPlayerState* GetOwnerPlayerState();// 0x2766264
	OutlineAndFillComponent* GetOutlineComponent();// 0x2766594
	float GetMeshBoundsSize();// 0x27654c4
	int GetMaxNumLimit(int DefaultValue);// 0x276672c
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x2765e58
	float GetActorScreenSize(out const Transform ViewPoint);// 0x2765750
	void GetActorMeshBounds(out Vector Origin, out Vector BoxExtent);// 0x276563c
	float GetActorDistance2D(out const Transform ViewPoint);// 0x2765870
	float GetActorDistance(out const Transform ViewPoint);// 0x2765990
	void EnableAddBuffToAffectedActors(bool bEnable, FName BuffName);// 0x2766304
	void DoSkillCoolDown();// 0x2767130
	void DoResetReleased();// 0x27670f4
	void DoResetCoolDown();// 0x276711c
	void DoReleasedSkill();// 0x2767108
	void DoCameraShake();// 0x2766dd0
	void DetachSkillManagerFromParent();// 0x2493488
	void DeattachFromOwner();// 0x2766f68
	void ClientOnDamaged(float Damage, int DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2ce6f18
	void ClientDoSkillCoolDown();// 0x15647d0
	void ClientDoReleasedSkill();// 0x2436300
	void Clear();// 0x15687c0
	bool CheckIfAttachToVehicle(Vector Start, float rayLength);// 0x2766de4
	bool CanAdsorb_Implementation(ApexCharacter* OtherCharacter, out const ViewAssistParamInfo Info);// 0x27665c4
	void BP_FellOutOfWorld();// 0x2ce6f18
	void AttachToCharacter(ApexCharacter* ParentPlayer, FName SocketName);// 0x2766ea8
	void AddToMiniMap(enum ItemType, Vector Location, float Yaw, int ScaleType, float Length, bool bNeedUpdateYaw);// 0x276607c
	void AddOutLineEffect();// 0x24a0adc
	void AddBuffToAffectedActor(Actor* InActor);// 0x276628c
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x2766c6c
	void ActorLeave(Actor* InActor);// 0x27663d8
	void ActorEnter(Actor* InActor);// 0x2766458

--------------------------------
Class: SkillEventParam.Object
	int TargetPhaseIndex;//[Offset: 0x1c, Size: 0x4]
	Object* ContextObject;//[Offset: 0x40, Size: 0x4]
	Character* ContextCharacter;//[Offset: 0x44, Size: 0x8]
	void InitFromTriggerParam(SkillEventParam* TriggerParam);// 0x24ab390

--------------------------------
Class: UAESkillManagerComponent.ApexSkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	Actor* HitTarget;//[Offset: 0x798, Size: 0x4]
	HitResult DoorHitInfo;//[Offset: 0x79c, Size: 0x88]
	Vector DoorPos;//[Offset: 0x824, Size: 0xc]
	Vector DoorDir;//[Offset: 0x830, Size: 0xc]
	float DoorTime;//[Offset: 0x83c, Size: 0x4]
	byte MeleeAttackPose;//[Offset: 0x840, Size: 0x1]
	bool CanServerStartMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x841, Size: 0x1]
	bool ShouldTraceDoorPostCloseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x842, Size: 0x1]
	bool EnterDoorRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x843, Size: 0x1]
	Vector AutonomousTargetPos;//[Offset: 0x844, Size: 0xc]
	UTSkillPickedTarget[] RemoteClientPickedResultTargets;//[Offset: 0x850, Size: 0xc]
	delegate AttackTargetEvent;//[Offset: 0x868, Size: 0xc]
	bool bListenTeammatesEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 0x1]
	UAECharacterAnimListComponent* OwnedSkillAnimComp;//[Offset: 0x878, Size: 0x4]
	delegate SkillTriggerStringEventDelegate;//[Offset: 0x87c, Size: 0xc]
	UAESkillAction_ReplaceCharAnim*[] SkillReplaceAnimLayer;//[Offset: 0x888, Size: 0xc]
	delegate OnSkillAnimListAttached;//[Offset: 0x894, Size: 0xc]
	delegate OnSkillAnimListDettached;//[Offset: 0x8a0, Size: 0xc]
	Actor* LastRobotRescueTarget;//[Offset: 0x8ac, Size: 0x4]
	float DetectInterval;//[Offset: 0x8b0, Size: 0x4]
	float InnerPreloadSquaredRange;//[Offset: 0x8b4, Size: 0x4]
	float OuterUnloadSquaredRange;//[Offset: 0x8b8, Size: 0x4]
	SkillPreloadData[] LowPreloadDatas;//[Offset: 0x8c4, Size: 0xc]
	SkillPreloadData[] MiddlePreloadDatas;//[Offset: 0x8d0, Size: 0xc]
	SkillPreloadData[] HighPreloadDatas;//[Offset: 0x8dc, Size: 0xc]
	Object*[] ObjectCacheList;//[Offset: 0x8e8, Size: 0xc]
	delegate SkillPauseEvent;//[Offset: 0x8f8, Size: 0xc]
	delegate SkillResumeEvent;//[Offset: 0x904, Size: 0xc]
	delegate SkillJumpPhaseEvent;//[Offset: 0x910, Size: 0xc]
	delegate SkillItemClientLoadFinishEvent;//[Offset: 0x91c, Size: 0xc]
	delegate SkillReloadWeaponEvent;//[Offset: 0x928, Size: 0xc]
	bool bNoSkillCDStateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x934, Size: 0x1]
	byte CurrentThrowGrenadeMode;//[Offset: 0x935, Size: 0x1]
	SkillConfigIDData[] SkillDataList;//[Offset: 0x938, Size: 0xc]
	bool bIsInCryptoDroneMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 0x1]
	Actor* CryptoDroneActor;//[Offset: 0x948, Size: 0x4]
	int LifelineRescueRobotNum;//[Offset: 0xa70, Size: 0x4]
	Actor*[] RescueRobotsList;//[Offset: 0xa74, Size: 0xc]
	<class Actor,Actor*> InfoLogActors;//[Offset: 0xa80, Size: 0x3c]
	bool bShouldLogActorInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 0x1]
	float InfoLogInterval;//[Offset: 0xac0, Size: 0x4]
	Color InfoLogColor;//[Offset: 0xac4, Size: 0x4]
	<int,SkillLocPickInfo> SkillConfigIDToPreLocInfo;//[Offset: 0xacc, Size: 0x3c]
	bool TryPreAimLocationReleased(int SkillIndex);// 0x27e041c
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x27e2fb0
	void TriggerCurSkillStringEvent(FString EventString, int SkillIndex, UAEBaseSkill* CurSkill);// 0x27e2544
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x27e2664
	void SwitchThrowMode();// 0x27e0938
	void SwitchSkillCDStateOnServer();// 0x27e0fe8
	void SwitchSkillCDState();// 0x27e1004
	void StopSkillAllByKillDamage(enum StopReason, bool bCheckEnableBackSwing);// 0x27e0638
	void StartSkillCDByIndex(int SkillIndex);// 0x27e0ebc
	void StartLifeLineSkill(Actor* RescueSource, Actor* rescueTarget, bool UsingRobot);// 0x27e1924
	void SetCurrentThrowMode(byte ThrowGrenadeMode);// 0x27e094c
	void SetAvailableTimes(int SkillConfigId, int Times, bool bRecoverCD);// 0x27e0a6c
	void ServerTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x27e2ea0
	void ServerTriggerCurSkillString(FString EventString, int SkillIndex);// 0x27e2338
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x27e2448
	void ServerSwitchThrowMode();// 0x2492c2c
	void ServerSwitchSkillUIOperation(byte SkillType, byte OpMode, bool bNeedWrite);// 0x27e2804
	void ServerSetPreLocInfo(int ConfigId, SkillLocPickInfo PickInfo);// 0x27e0244
	void ServerPopOperationBySkillIndex(int SkillID);// 0x27e33ac
	void ServerCancelAllRescueRobots();// 0x273b3d4
	void RPC_ServerStartMove(bool startMove);// 0x27e1e6c
	void RPC_ServerSetMeleeAttackPose(byte AttackPose);// 0x27e1ce0
	void RPC_ServerCheckTarget(Vector TargetPos, const UTSkillPickedTarget[] PickedResultTargets);// 0x27e1ef4
	void RPC_NotifyBackpackUseItem(int SkillHandle);// 0x27e2138
	void RPC_ClientReloadWeaponDone(int WeaponID);// 0x274616c
	void RPC_ClientCheckHasSkillHandle(int SkillHandle);// 0x27e20b8
	void RPC_ChangeMeleeAttackConfigData(byte ConfigIndex, float ModifyData);// 0x27e074c
	void ResetSkillReleasedByIndex(int SkillIndex);// 0x27e0e30
	void ResetSkillCDByIndex(int SkillIndex);// 0x27e0f34
	void ResetAllSkillReleased();// 0x27e0ea8
	void ResetAllSkillCDOnServer();// 0x2492c10
	void ResetAllSkillCD();// 0x27e0fac
	void RemoveInfoLogActor(Actor* TmpActor);// 0x27e0548
	void PopOperationBySkillIndex(int SkillID);// 0x27e342c
	void OnStackChangedEvent(HandStateData Data, bool bPush, bool bPromote);// 0x27e1340
	void OnSkillAnimListAttachLoadingFinished();// 0x27e1a2c
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x27e2928
	void OnPreloadedRes(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, FString FolderName);// 0x27e1590
	void OnPawnStateChanged(enum[] StatesMoreThanOld, enum[] StatesLessThanOld);// 0x27e1118
	void OnOverridePawnStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x27e1018
	void OnOBTargetSwitched(Actor* LastTarget, Actor* NewTarget);// 0x27e1784
	void OnHUDSwitchCallback(int NewHUDType);// 0x27e2abc
	void OnGameModeExitFighting();// 0x27e2914
	void OnEventPlayerAction(out const FName InAction, Actor* InEventActor);// 0x27e1c0c
	void OnAsyncLoadFinishByInitSkillUI(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, bool bInitAll, int SkillIndex);// 0x27e2b34
	void MainHandInterruptSkill(enum eAttachmentType);// 0x27e12c0
	void JumpToPhase(int ToIndex, bool bIgnoreCheckPawnState, bool Greater);// 0x27e0810
	bool IsZeroCD();// 0x27e0fc0
	bool IsUsingRescueRobot();// 0x27e06fc
	bool IsSkillInCD(int SkillIndex);// 0x27e0d30
	bool IsSkillCDActive(int SkillIndex);// 0x27e0db0
	bool IsCastingSkillOfType(enum SkillType);// 0x27e1868
	bool IsCastingSkillIndex(int SkillIndex);// 0x27e2038
	bool IsCastingOctaneSkill();// 0x27e18e8
	void InfoLogFunc();// 0x27e049c
	void HandleSkillStringEventCached(FString EventString, UTSkillManagerComponent* EventOrigin);// 0x27e1a54
	FString GetUIDefineNameBySkillType(enum SkillType);// 0x27e2728
	int GetSkillConfigIDBySkillType(enum SkillType);// 0x27e2238
	int GetSkillConfigIDBySkillIndex(int SkillIndex);// 0x27e22b8
	float GetSkillCDRemainTimePerCast(int SkillIndex);// 0x27e0cb0
	UTSkill* GetSkillByConfigID(int ConfigId);// 0x27e21b8
	int GetRemainTimes(int SkillConfigId);// 0x27e09ec
	byte GetCurrentThrowMode();// 0x27e09c4
	enum GetCurOpModeBySkillType(enum SkillType);// 0x27e2e18
	enum GetCurOpModeBySkillIndex(int SkillID);// 0x27e2d90
	float GetAbilityPercent(enum SkillType);// 0x27e0c30
	void EndLifeLineSkill();// 0x27e1910
	void DettachSkillAnimList();// 0x27e1a40
	void ClientSwitchThrowMode();// 0x27e0924
	void ClientInfoLog(FString Msg);// 0x27e04b0
	void ChangeIsInfoLog();// 0x2492db0
	bool CanUseRescueRobot();// 0x27e0724
	bool CanInitSkillUI(int SkillIndex);// 0x27e2d10
	bool CanCastingSkillSilencedByRevenant();// 0x27e1840
	void CameraModeSwitchCallback();// 0x27e12ac
	void CallServerStopSkillWithID(int SkillID, enum StopReason, bool bCheckEnableBackSwing, bool IsAutonomousNotNeedCare);// 0x27e3248
	void CallServerStopSkillSafely(int SkillID, enum StopReason, bool bCheckEnableBackSwing, bool IsAutonomousNotNeedCare);// 0x27e30e4
	void CallClientLaunchCharacter(Vector Dir, float Speed, float Time);// 0x27e1d60
	void AddSkillStringEventCache(FString EventString, UTSkillManagerComponent* EventOrigin);// 0x27e1b30
	void AddInfoLogActor(Actor* TmpActor);// 0x27e05c0
	void AddAbilityPercent(float AddPercentage, enum SkillType);// 0x27e0b74

--------------------------------
Class: ApexSkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	TriggerEventBuffPoolItem[] TriggerEventBuffPool;//[Offset: 0x6f0, Size: 0xc]
	ApexSkillManagerComponent*[] ChildSkillManagerComponentList;//[Offset: 0x6fc, Size: 0xc]
	SkillActorBase*[] SkillActorBaseArray;//[Offset: 0x708, Size: 0xc]
	ApexSkillManagerComponent* ParentSkillManagerComponent;//[Offset: 0x714, Size: 0x8]
	ApexCharacter* OwnerApexCharacter;//[Offset: 0x71c, Size: 0x8]
	SkillPickerModule* SkillPickerModule;//[Offset: 0x724, Size: 0x4]
	delegate OnApexSkillEvent;//[Offset: 0x728, Size: 0xc]
	ParticleSystemAsync*[] CreatedParticleArray;//[Offset: 0x734, Size: 0xc]
	float StopSkillOnDisconnectTimeOut;//[Offset: 0x740, Size: 0x4]
	class UTSkill[] SkillArchetypesUsed;//[Offset: 0x744, Size: 0xc]
	delegate SwitchSkillAssistEvent;//[Offset: 0x750, Size: 0xc]
	void UnBindEventForBangalorePassiveSkill();// 0x24a7444
	void TriggerSkillEventWithPhaseId(int SkillID, enum SkillEvent, int TargetPhaseIndex);// 0x24a80a4
	void TriggerSkillEventToServerChildren(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x24a7e94
	void TriggerSkillEventToServer(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x24a7f9c
	void TriggerSkillEventToParent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x24a7b7c
	void TriggerSkillEventToChildren(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x24a7a74
	void TriggerSkillEventFromParent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x24a7d8c
	void TriggerSkillEventFromChild(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x24a7c84
	void TriggerSkillEvent(int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x24a81ac
	void ServerTriggerEventWithAntiData(int SkillID, byte EventType, int TriggerIndex, const SecurityAntiData AntiData, PredictionKey PredictionKey);// 0x24a82dc
	void ServerSwitchSkillAssistState(int SkillIdx, bool bEnable);// 0x24a7538
	void ServerSwitchAllSkillAssistState();// 0x24a768c
	void OnRecoverConnect();// 0x24a82b4
	void OnDisconnected();// 0x24a82c8
	void OnCharacterWeaponShootBullet(ApexCharacter* ShootCharacter, out const Vector StartPos, out const Vector EndPos);// 0x24a7328
	void Inner_CheckBangalorePassiveSkill(ApexCharacter* ShootCharacter, out const Vector StartPos, out const Vector EndPos);// 0x24a720c
	int GetSkillConfigOnGameModeInt(enum Key, int DefaultValue);// 0x24a77f4
	float GetSkillConfigOnGameModeFloat(enum Key, float DefaultValue);// 0x24a78b8
	bool GetSkillConfigOnGameModeBool(enum Key, bool DefaultValue);// 0x24a7728
	UTSkill* GetSkillByType(enum SkillType);// 0x24a79f4
	void ClientSwitchSkillAssistState(int SkillIdx, bool bEnable);// 0x24a746c
	void ClientSwitchSkillAssistShowType(int ShowTypeIn);// 0x24a76a8
	void ClientSwitchAllSkillAssistState(bool bEnable);// 0x24a7604
	void ClearTriggerEventBuffPoolBySkillID(int SkillID);// 0x24a797c
	void BindEventForBangalorePassiveSkill();// 0x24a7458

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	DataTable* SkillsTable;//[Offset: 0xac, Size: 0x4]
	DataTable* CommonSkillsTable;//[Offset: 0xb0, Size: 0x4]
	bool bHasInitSkillArchetypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	class UTSkill[] SkillArchetypesFromSkillsTable;//[Offset: 0xb8, Size: 0xc]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	UTSkill*[] Skills;//[Offset: 0xc8, Size: 0xc]
	UAEUserWidget*[] SkillAsyncLoaded;//[Offset: 0xd4, Size: 0xc]
	UAEUserWidget* SkillUIRoot;//[Offset: 0xe0, Size: 0x4]
	<UTSkill*,int> SkillToIndexMap;//[Offset: 0xe4, Size: 0x3c]
	<enum,int> SkillTypeToIndexMap;//[Offset: 0x120, Size: 0x3c]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x15c, Size: 0x3c]
	<int,int> SkillHandleToIndexMap;//[Offset: 0x19c, Size: 0x3c]
	<int,UTSkillCreateData> SkillHandleToBaseData;//[Offset: 0x1d8, Size: 0x3c]
	<int> CastingSkillIndexes;//[Offset: 0x214, Size: 0x3c]
	Actor* Target;//[Offset: 0x250, Size: 0x4]
	Actor*[] SkillActorList;//[Offset: 0x254, Size: 0xc]
	Actor*[] PausedSkillActorList;//[Offset: 0x260, Size: 0xc]
	UTSkillSynData[] SkillSynData;//[Offset: 0x26c, Size: 0xc]
	UTSkillPhaseJumpResult SkillPhaseJumpResult;//[Offset: 0x278, Size: 0x8]
	delegate OnSkillHit;//[Offset: 0x280, Size: 0xc]
	delegate OnSkillCast;//[Offset: 0x28c, Size: 0xc]
	bool bDisableTriggerSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x2ec, Size: 0x28]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x314, Size: 0xc]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x320, Size: 0x28]
	FString LastESkillTargetDesc;//[Offset: 0x350, Size: 0xc]
	int SkillSynRandomSeed;//[Offset: 0x35c, Size: 0x4]
	RandomStream SkillSynRandStream;//[Offset: 0x360, Size: 0x8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x368, Size: 0x4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x36c, Size: 0x3c]
	bool bDebugSkillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1]
	<int,SkillTriggerBase*> SkillTriggerMap;//[Offset: 0x3fc, Size: 0x3c]
	UTAddedSkillSturct[] LoadingSkillStructList;//[Offset: 0x438, Size: 0xc]
	int[] PendingRemoveSkillHandles;//[Offset: 0x444, Size: 0xc]
	UTAddedSkillSturct[] RepAddedSkillStructList;//[Offset: 0x450, Size: 0xc]
	FString RepSkillDebugInfo;//[Offset: 0x45c, Size: 0xc]
	FString RepSkillSynInfo;//[Offset: 0x468, Size: 0xc]
	delegate SkillStopEvent;//[Offset: 0x474, Size: 0xc]
	delegate StartSkillFailedEvent;//[Offset: 0x480, Size: 0xc]
	delegate SkillStartEvent;//[Offset: 0x48c, Size: 0xc]
	delegate SkillReleasedEvent;//[Offset: 0x498, Size: 0xc]
	delegate SkillInitEvent;//[Offset: 0x4a4, Size: 0xc]
	delegate SkillUnInitEvent;//[Offset: 0x4b0, Size: 0xc]
	delegate DisableTriggerSkillEvent;//[Offset: 0x4bc, Size: 0xc]
	delegate EnableTriggerSkillEvent;//[Offset: 0x4c8, Size: 0xc]
	<FName,int> TriggerConditionMap;//[Offset: 0x4d4, Size: 0x3c]
	<FName,UTSkill*> TriggerSkillMap;//[Offset: 0x510, Size: 0x3c]
	<FName,UTSkill*> TriggerCancelSkillMap;//[Offset: 0x54c, Size: 0x3c]
	UTSkill*[] PendingPassiveSkills;//[Offset: 0x588, Size: 0xc]
	delegate SkillTriggerEventDelegate;//[Offset: 0x594, Size: 0xc]
	<Object*,SkillModifierList> SkillModifierLookupTable;//[Offset: 0x5a0, Size: 0x3c]
	<SkillModifierDesc,SkillModifierCalculator> SkillAttributeModifiers;//[Offset: 0x5dc, Size: 0x3c]
	bool bHasInitInFightStage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 0x1]
	delegate OnKeyDownDelegate;//[Offset: 0x658, Size: 0xc]
	delegate SkillCDInitFinishedEvent;//[Offset: 0x664, Size: 0xc]
	delegate SkillStartCDEvent;//[Offset: 0x670, Size: 0xc]
	delegate SkillModifyCDEvent;//[Offset: 0x67c, Size: 0xc]
	SkillCDSyncData[] SkillsCDSyncData;//[Offset: 0x688, Size: 0xc]
	<int,PredcitionData> SkillsPrecitionData;//[Offset: 0x69c, Size: 0x3c]
	void UpdateSkillCDState(bool bCanUpdate);// 0xf4a098
	bool TriggerEventByType(enum SkillType, byte EventType, int TriggerIndex);// 0xf4c8e8
	bool TriggerEvent(int SkillID, byte EventType, int TriggerIndex);// 0xf4cb00
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0xf4b1fc
	void SwitchSkill(int SkillID, byte EventType);// 0xf4c58c
	bool StopSkillWithID(int SkillID, enum StopReason, bool bCheckEnableBackSwing, bool IsAutonomousNotNeedCare);// 0xf4c420
	void StopSkillSpecific(UTSkill* Skill, enum Reason, bool bCheckEnableBackSwing);// 0xf4c0fc
	void StopSkillOnDisconnected();// 0xf4c250
	void StopSkillAll(enum StopReason, bool bCheckEnableBackSwing);// 0xf4c354
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0xf4ad60
	void SetTarget(Actor* InTarget);// 0xf4e908
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex, bool Simulated);// 0xf4cc2c
	void SetHasInitSkillSystem(bool hasInit);// 0xf4af80
	void SetCurSkill(int SkillIndex, bool bCasting);// 0xf4b01c
	void ServerOnWillEnterBackground();// 0xf4c220
	void ServerNotifyRandomSeed(int Seed);// 0xf4c730
	void ServerMarkCDSyncStateDirty();// 0xf4a07c
	void ServerInitOneSkill(const class UTSkill SkillClass, int SkillIndex, int SkillHandle);// 0xf4ba18
	void ServerDeleteSkill(int SkillID);// 0xf4bebc
	void RPCPostActionVectorNetDataToServer(Vector Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4d714
	void RPCPostActionVectorNetDataToMultiClient(Vector Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4cf04
	void RPCPostActionVectorNetDataToClient(Vector Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4df24
	void RPCPostActionStringNetDataToServer(FString Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4d8a8
	void RPCPostActionStringNetDataToMultiClient(FString Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4d098
	void RPCPostActionStringNetDataToClient(FString Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4e0b8
	void RPCPostActionIntNetDataToServer(int Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4dbf4
	void RPCPostActionIntNetDataToMultiClient(int Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4d3e4
	void RPCPostActionIntNetDataToClient(int Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4e404
	void RPCPostActionFloatNetDataToServer(float Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4dd8c
	void RPCPostActionFloatNetDataToMultiClient(float Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4d57c
	void RPCPostActionFloatNetDataToClient(float Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4e59c
	void RPCPostActionBoolNetDataToServer(bool Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4da54
	void RPCPostActionBoolNetDataToMultiClient(bool Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4d244
	void RPCPostActionBoolNetDataToClient(bool Value, int SkillIndex, int PhaseIndex, int ActionIndex, int DataIndex);// 0xf4e264
	void RepSkillSynData(UTSkillSynData[] originList);// 0xf4b110
	void RepSkillPhaseJumpResult();// 0xf4b0f4
	void RepSkillHitInfo();// 0xf4b0e0
	void RefreshSkillCDSyncData();// 0xf49ed0
	int RandRangeSyn(int StartIndex, int EndIndex);// 0xf4ae2c
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0xf4b7b0
	void OnWillEnterBackground();// 0xf4c23c
	bool OnSameTeam(Actor* A, Actor* B);// 0xf4b6f4
	void OnRep_SkillHitInfo();// 0xf4af64
	void OnRep_HasInitInFightStage();// 0xf4a48c
	void OnRep_CDSyncData(out SkillCDSyncData[] LastSkillsCDSyncData);// 0xf49db0
	void OnRep_AddedSkillList(UTAddedSkillSturct[] originList);// 0xf4a658
	void OnAsyncLoadFinishedByItem(int SkillHandle);// 0xf4abc0
	void OnAsyncLoadFinishByOnRepSkill(const UTSkillSynData CurSkillSynData, int LastSkillIdx, int LastCastCount, bool bLastSkillCasting, const int[] UndoPhaseIds, bool bFirstRep);// 0xf4a7ec
	void OnAsyncLoadFinishByInitSkill(int SkillIndex, bool isDedicateServer);// 0xf4aaf4
	bool IsReadyToCastSkill(int SkillID);// 0xf4be34
	bool IsHasInitSkillSystem();// 0xf4b000
	bool IsDisableTriggerSkill();// 0xf4c714
	bool IsCastingSkillOfSkillType(enum SkillType);// 0xf4bd7c
	bool IsCastingSkillID(int SkillID);// 0xf4bcfc
	bool IsCastingSkillHandle(int SkillHandle);// 0xf4bc7c
	bool IsCastingSkill();// 0xf4be04
	void InternalCallClientPredictFailed(int SkillID);// 0xf49d30
	void InitSkillUIs();// 0xf4e7d0
	void InitSkillUI(int SkillIndex);// 0xf4e7ec
	void InitSkillSystem(bool isDedicateServer, bool IsBroadcastFromParent, bool IsBroadcastToParent);// 0xf4bb54
	void InitSkillComponent();// 0xf4cc10
	Actor* GetTarget();// 0xf4e97c
	enum GetSkillTypeBySkillID(int SkillID);// 0xf4c868
	float GetSkillPhaseDuration(int SkillIndex, int PhaseIndex);// 0xf4e998
	int GetSkillPhase(int SkillIndex);// 0xf4b470
	int GetSkillNextPhase(UTSkill* Skill);// 0xf4cd34
	FString GetSkillName(int SkillIndex);// 0xf4ea5c
	int GetSkillIDByHandle(int SkillHandle);// 0xf4ace0
	int GetSkillHandleBySkillIndex(int SkillIndex);// 0xf4eb38
	int GetSkillCurPhase(UTSkill* Skill);// 0xf4cdb4
	UTSkill* GetSkillByName(FString SkillName);// 0xf4b4f0
	UTSkill* GetSkillByHandle(int SkillHandle);// 0xf4b5e4
	UTSkillCreateData GetSkillBaseDataBySkillIndex(int SkillIndex);// 0xf4ebb8
	UTSkillCreateData GetSkillBaseDataByHandle(int SkillHandle);// 0xf4edbc
	void GetSkillActors(class Actor MatchClass, out Actor*[] OutActors);// 0xf4a118
	Actor*[] GetSkillActorList_Mutable();// 0xf4ce9c
	Actor*[] GetSkillActorList();// 0xf4ce9c
	Actor* GetSkillActorByTag(FName TagName);// 0xf4c7e4
	Actor* GetSkillActor(class Actor MatchClass);// 0xf4a340
	UTSkill* GetSkill(int SkillID);// 0xf4b66c
	Actor*[] GetPausedSkillActorList_Mutable();// 0xf4ce34
	Actor*[] GetPausedSkillActorList();// 0xf4ce34
	int GetCurSkillIndex(UTSkill* Skill);// 0xf4eec4
	int GetCurSkillHandle(UTSkill* Skill);// 0xf4ee44
	float GetCharacterAbilityCDThresholdScale(enum SpeedUpType);// 0xf49f6c
	float GetCharacterAbilityCDSpeedScale(enum SpeedUpType);// 0xf49ff4
	float GetCharacterAbilityCDCastScale(enum SpeedUpType);// 0xf49ee4
	UTSkill* GetCastingSkillAndSkillIndex(out int SkillIndex);// 0xf4b3b8
	UTSkill* GetCastingSkill();// 0xf4b448
	void ForceSyncCDState(const SkillCDSyncData[] CDSyncData);// 0xf49c7c
	void EnableTriggerSkillAll();// 0xf4c26c
	void DisableTriggerSkillAll(enum StopReason, bool bCheckEnableBackSwing);// 0xf4c288
	void DeleteSkillUIs();// 0xf4e734
	void DeleteSkillUI(int SkillIndex);// 0xf4e750
	void DeleteSkill(int SkillID);// 0xf4bfbc
	void ClientPlayHurtMontage(const SoftObjectPath MontagePath);// 0xf4e86c
	void ClientMulticastDeleteSkill(int SkillID);// 0xf4bf3c
	void ClientInitOneSkill(const class UTSkill SkillClass, int SkillIndex, int SkillHandle);// 0xf4b8dc
	bool ClientForceLoadSkillItem(int SkillIndex, int PhaseIndex, out const int[] UndoPhaseIds);// 0xf4a528
	void ClientCallTriggerEvent(int SkillID, byte EventType, int TriggerIndex);// 0xf4c9f8
	void ClearSkillActor();// 0xf4c03c
	void ClearSkill();// 0xf4c058
	void Clear(bool bClearSkillActor);// 0xf4c074
	bool CheckSkillCDFinish(int SkillCD);// 0xf49e50
	void CheckServerCDState();// 0xf49d14
	void CameraModeChangedEvent();// 0xf4c204
	void BeginAddSkillByItemAsync(out UTAddedSkillSturct temp);// 0xf4ac38
	bool BackpackLoadSkillItemForAutoUse(int SkillIndex);// 0xf4a4a8
	void AddSkillEventCache(byte InSkillEventType, UTSkillManagerComponent* EventOrigin);// 0xf4c650

--------------------------------
Class: UAEBaseSkill.ApexSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x318, Size: 0xc]
	delegate OnSkillStringEvent;//[Offset: 0x338, Size: 0xc]
	bool OnStringEvent(UTSkillManagerComponent* SkillManagerComponent, FString EventString, UTSkillManagerComponent* EventOrigin);// 0x27b9b20
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte SkillEvent);// 0x27b9c48

--------------------------------
Class: ApexSkill.UTSkill.Actor.Object
	delegate OnApexSkillEvent;//[Offset: 0x30c, Size: 0xc]
	bool TriggerSkillEvent(UTSkillManagerComponent* SkillManagerComponent, int SkillID, enum SkillEvent, SkillEventParam* SkillEventParam);// 0x24a4348
	void ConsumeSkillEventPool(ApexSkillManagerComponent* SkillManagerComponent);// 0x24a42c8

--------------------------------
Class: UTSkill.Actor.Object
	FString SkillName;//[Offset: 0x1d4, Size: 0xc]
	FString SkillDescription;//[Offset: 0x1e0, Size: 0xc]
	enum SkillCastType;//[Offset: 0x1ec, Size: 0x1]
	FString TriggerEventParam;//[Offset: 0x1f0, Size: 0xc]
	int TriggerCondition;//[Offset: 0x1fc, Size: 0x4]
	enum SkillType;//[Offset: 0x200, Size: 0x1]
	bool bOnlyTriggerInAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 0x1]
	bool bNoEnergyStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x203, Size: 0x1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 0x1]
	bool NotInterruptOtherTriggerSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 0x1]
	bool EnableFPPTPPSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207, Size: 0x1]
	bool EnableBackSwingAfterInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	UTSkillCreateData BaseData;//[Offset: 0x20c, Size: 0x9c]
	class SkillTriggerBase* SkillTriggerClass;//[Offset: 0x2a8, Size: 0x4]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	int SkillCategory;//[Offset: 0x2b0, Size: 0x4]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	bool SilencedByRevenant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 0x1]
	bool bDeserializeComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b7, Size: 0x1]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x2cc, Size: 0x3c]
	int InstancedNodesTotalSize;//[Offset: 0x308, Size: 0x4]
	void SetAvailableTimes(UTSkillManagerComponent* SkillManagerComponent, int Times);// 0xf429c8
	bool PlusRemainTimes(UTSkillManagerComponent* SkillManagerComponent, bool bTimesForRound, int Times);// 0xf427e0
	void OnPhaseFinished(UTSkillManagerComponent* SkillManagerComponent);// 0xf426d8
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0xf42d88
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0xf42538
	int GetRemainTimes(UTSkillManagerComponent* SkillManagerComponent);// 0xf42758
	Actor* GetFromActorStorage(UTSkillManagerComponent* SkillManagerComponent, int Index);// 0xf42474
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0xf42e98
	void DoSkillReleased(UTSkillManagerComponent* SkillManagerComponent);// 0xf42b0c
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0xf42c0c
	void DoResetReleased(UTSkillManagerComponent* SkillManagerComponent);// 0xf42a8c
	void DoResetCD(UTSkillManagerComponent* SkillManagerComponent);// 0xf42b8c
	bool DeductRemainTimes(UTSkillManagerComponent* SkillManagerComponent, int Times);// 0xf428fc
	bool CheckPhaseCondition(UTSkillManagerComponent* SkillManagerComponent, int PhaseID, bool ResetConditions);// 0xf425c0
	bool CanDisableTrigger();// 0xf42c8c
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowFailureMsg);// 0xf42cb4

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	int PhaseIndex;//[Offset: 0xac, Size: 0x4]
	FString PhaseName;//[Offset: 0xb0, Size: 0xc]
	FString PhaseDescription;//[Offset: 0xbc, Size: 0xc]
	FName PhaseTag;//[Offset: 0xc8, Size: 0x8]
	bool bDeserializeComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0xd4, Size: 0x8]
	UTSkillPhaseCreateData BaseData;//[Offset: 0xdc, Size: 0x94]
	bool bSkillStopAutonomousNotNeedCare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x174, Size: 0x4]
	bool StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0xf52fec
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent, bool bIgnoreCheckPawnState);// 0xf53074
	void RecoverPhase(UTSkillManagerComponent* SkillManagerComponent);// 0xf52f6c
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0xf52e20
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0xf52d54
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0xf4bf3c
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0xf53250
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, UTSkillManagerComponent* EventOrigin);// 0xf53140
	float GetPhaseSpeed(UTSkillManagerComponent* SkillManagerComponent);// 0xf52c2c
	float GetPhaseDuration(UTSkillManagerComponent* SkillManagerComponent);// 0xf52cac
	void ForceExecutePhase(UTSkillManagerComponent* SkillManagerComponent);// 0xf52eec
	bool ClearAttachments();// 0xf52d2c

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 0x4]
	float PhaseSpeed;//[Offset: 0x4, Size: 0x4]
	float AutonomousPhaseDelay;//[Offset: 0x8, Size: 0x4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bCoolDownStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bReleasedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	int NextPhaseID;//[Offset: 0x10, Size: 0x4]
	<int> NextPhaseIDs;//[Offset: 0x14, Size: 0x3c]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x50, Size: 0xc]
	enum PhaseType;//[Offset: 0x5c, Size: 0x1]
	FString EnterPhaseTipString;//[Offset: 0x60, Size: 0xc]
	UTSkillPicker* Picker;//[Offset: 0x6c, Size: 0x4]
	UTSkillEffect*[] Actions;//[Offset: 0x70, Size: 0xc]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x7c, Size: 0xc]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x88, Size: 0xc]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.Object
	enum[] ErrorCode;//[Offset: 0x30, Size: 0xc]
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0xf461c8
	bool IsOK_Internal(out int SearchDepth);// 0xf46130
	bool IsOK(ActorComponent* SkillManagerComponent, out int SearchDepth);// 0xf46294

--------------------------------
Class: UTSkillBaseWidget.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0x24, Size: 0x8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x2c, Size: 0x4]
	bool GetTargetActor(UTSkillManagerComponent* SkillManagerComponent, out Actor*[] OutTargets);// 0xf46ac0
	Actor* GetOwnerPawn();// 0xf44a04

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x30, Size: 0xc]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x48, Size: 0xc]
	Actor*[] IgnoreTargets;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 0x1]
	enum PickerTargetType;//[Offset: 0x1, Size: 0x1]
	int PickerMaxCount;//[Offset: 0x4, Size: 0x4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool WallCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	Vector ImpactPoint;//[Offset: 0x8, Size: 0xc]
	PrimitiveComponent*[] TargetComponents;//[Offset: 0x14, Size: 0xc]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	byte HitPos;//[Offset: 0x21, Size: 0x1]
	FName BoneName;//[Offset: 0x24, Size: 0x8]
	Vector HitEnvLocation;//[Offset: 0x2c, Size: 0xc]
	byte hitPhysMatType;//[Offset: 0x38, Size: 0x1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x30, Size: 0x4]
	float fAPScale;//[Offset: 0x34, Size: 0x4]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0xf470c0
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0xf47204
	void RecoverAction(UTSkillManagerComponent* SkillManagerComponent);// 0xf46f40
	void PhaseExit(UTSkillManagerComponent* SkillManagerComponent);// 0xf46fc0
	void MainHandInterruptSkill(UTSkillManagerComponent* SkillManagerComponent);// 0xf47184
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0xf4730c
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0xf47284
	void CameraModeChangedEvent(UTSkillManagerComponent* SkillManagerComponent);// 0xf47040

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x30, Size: 0x1]
	FName[] InterestedOwnerTags;//[Offset: 0x34, Size: 0xc]
	UTSkillEffect* SkillEffect;//[Offset: 0x40, Size: 0x4]
	bool bSkipFollowingActions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	SkillConditionWarpper[] Conditions;//[Offset: 0x48, Size: 0xc]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: UTSkillCreateData
	int SkillGroupIndex;//[Offset: 0x0, Size: 0x4]
	float Range;//[Offset: 0x4, Size: 0x4]
	UTSkillCDBase* SkillCD;//[Offset: 0x8, Size: 0x4]
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0xc, Size: 0x3c]
	<FString,int> SkillUIPathToHandle;//[Offset: 0x48, Size: 0x3c]
	UTSkillPhase*[] Phases;//[Offset: 0x84, Size: 0xc]
	bool WidgetInitialVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	int SkillMainWidgetHandle;//[Offset: 0x94, Size: 0x4]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bStopOnDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bStopOnWillEnterBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]

--------------------------------
Class: UTSkillCDBase.Object
	float FinishCountdown;//[Offset: 0x1c, Size: 0x4]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0x20, Size: 0x4]
	GameStateBase* CurGameState;//[Offset: 0x24, Size: 0x4]
	void SetAvailableTimesRound(int Value);// 0xf44898
	void SetAvailableTimes(int Value);// 0xf4492c
	bool PlusRemainTimes(bool bTimesForRound, int Times);// 0xf4472c
	bool HasRemainTimes();// 0xf446dc
	int GetRemainTimes();// 0xf44704
	float GetMaxEnergy();// 0xf44a04
	int GetMaxAccumulateCount();// 0xf449a4
	float GetCurrentPercent();// 0xf44a34
	float GetCurrentEnergy();// 0xf44a64
	float GetCDDuration();// 0xf449d4
	int GetAvailableTimesRound();// 0xf4487c
	int GetAvailableTimes();// 0xf44910
	bool DeductRemainTimes(int Times);// 0xf447fc

--------------------------------
Class: UTSkillWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* skillManager;//[Offset: 0x2c4, Size: 0x4]
	int SkillHandle;//[Offset: 0x2c8, Size: 0x4]
	int SkillUIID;//[Offset: 0x2cc, Size: 0x4]
	void TriggerEvent(byte SkillEvent);// 0xf546f4
	void SetSkillUIID(int ID);// 0xf5482c
	void SetSkillManager(UTSkillManagerComponent* manager);// 0xf54680
	void SetSkillHandle(int Handle);// 0xf549a4
	void RemoveFromUIManager();// 0xf53bf4
	int GetSkillUIID();// 0xf54804
	FString GetSkillName();// 0xf540e8
	UTSkillManagerComponent* GetSkillManger();// 0xf54664
	int GetSkillIndex();// 0xf548a4
	int GetSkillHandle();// 0xf54988
	float[] GetSkillCDProgess();// 0xf54218
	float[] GetSkillCDByType(int Type);// 0xf543a8
	UTSkillCDBase*[] GetSkillCDBases();// 0xf5458c
	UTSkill* GetSkill();// 0xf5494c
	float GetMaxEnergy(int Index);// 0xf53c34
	float GetEnergyValue(int Index);// 0xf54024
	float GetEnergyThreshold(int Index);// 0xf53e2c

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c8, Size: 0x4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1cc, Size: 0x4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1d0, Size: 0x4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1d4, Size: 0x4]
	Params(FieldPathProperty)[] Params;//[Offset: 0x214, Size: 0xc]
	delegate widgetSizeNofity;//[Offset: 0x228, Size: 0xc]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x234, Size: 0x1c]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x250, Size: 0x1c]
	float TickRate;//[Offset: 0x26c, Size: 0x4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 0x1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x273, Size: 0x1]
	Vector2D ScreenPos;//[Offset: 0x274, Size: 0x8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x27c, Size: 0x8]
	delegate OnMouseButtonDownHandler;//[Offset: 0x284, Size: 0x10]
	delegate OnMouseButtonUpHandler;//[Offset: 0x294, Size: 0x10]
	enum FadingStatus;//[Offset: 0x2ad, Size: 0x1]
	float CurrentOpacity;//[Offset: 0x2b0, Size: 0x4]
	float FadingInTime;//[Offset: 0x2b4, Size: 0x4]
	float FadingOutTime;//[Offset: 0x2b8, Size: 0x4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 0x1]
	bool Visible();// 0x285f9e4
	void UnRegistFromGameFrontendHUD();// 0xfd338c
	void SynchronizeBlueprintProperties();// 0x2ce6f18
	void Show();// 0x285fa20
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x285fba4
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x24d3da4
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x285f89c
	void RegistToGameFrontendHUD();// 0xfd338c
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x285fc1c
	void ReceiveShow();// 0x2ce6f18
	void ReceiveHide();// 0x2ce6f18
	void ReceivedInitWidget();// 0x2ce6f18
	void OnRightClicked(Vector2D TempScreenPos);// 0x2ce6f18
	void OnFadeOutFinished();// 0x2517b18
	void OnFadeInFinished();// 0x23ec0b4
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x2ce6f18
	void OnClicked(Vector2D TempScreenPos);// 0x2ce6f18
	void Hide();// 0x285fa0c
	void HandleUIMessageBattle(FString UIMessage);// 0x285fa34
	void HandleUIMessage(FString UIMessage);// 0x285fac4
	UAEUserWidget* GetParentWidget();// 0x12b5f10
	LogicManagerBase* GetOwningLogicManager();// 0x285fb54
	FrontendHUD* GetOwningFrontendHUD();// 0x285fb7c
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x285f81c

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x30, Size: 0x4]
	FString FrontendUtilsClassName;//[Offset: 0x38, Size: 0xc]
	FrontendUtils* Utils;//[Offset: 0x44, Size: 0x4]
	FString LatestGameStatusURL;//[Offset: 0x48, Size: 0xc]
	<FName,class FrontendState> StateClassMap;//[Offset: 0x54, Size: 0x3c]
	FrontendState* CurrentState;//[Offset: 0x90, Size: 0x4]
	FName LastGameStatus;//[Offset: 0x94, Size: 0x8]
	FString LastStatusOptions;//[Offset: 0x9c, Size: 0xc]
	AssetsPreloaderBase* AssetsPreloader;//[Offset: 0xa8, Size: 0x4]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x285beb0
	void ShutdownUnrealNetwork();// 0x285be9c
	void ReturnToLastStatus();// 0xfbc1bc
	void ResetGameStauts();// 0x255c4f8
	World* GetWorld();// 0x285c068
	FrontendUtils* GetUtils();// 0x285bff0
	PlayerController* GetPlayerController();// 0x285c018
	FName GetLastGameStatus();// 0x285be34
	GameViewportClient* GetGameViewportClient();// 0x285c040
	FName GetGameStatus();// 0x285be68
	FrontendState* GetCurrentState();// 0x285be18

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 0x4]
	FName CurrentSceneCameraName;//[Offset: 0x34, Size: 0x8]
	CameraActor*[] SceneCameraList;//[Offset: 0x3c, Size: 0xc]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x48, Size: 0x3c]
	<FString,LevelStreamingDynamic*> DynamicLevelMap;//[Offset: 0xc4, Size: 0x3c]
	void UnRegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x285c7a8
	void SwitchSceneCamera(FName SceneCameraName, float BlendTime, bool bForce);// 0x285c930
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x285c86c
	void OnUnLoadedDynamicLevel();// 0x285c6cc
	void OnLoadedDynamicLevel();// 0x285c6f4
	void OnHandleSteamingLevelComplete(int LinkID);// 0x285c708
	void OnDynamicLevelVisible();// 0x285c6e0
	FrontendHUD* GetOwningFrontendHUD();// 0x26d24a4
	CameraActor* GetCurrentSceneCamera();// 0x285c780

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x472dfc0
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x472e258

--------------------------------
Class: FrontendState.Object
	FName StateName;//[Offset: 0x1c, Size: 0x8]
	FString Options;//[Offset: 0x24, Size: 0xc]
	FString MapPath;//[Offset: 0x30, Size: 0xc]
	FString StateURL;//[Offset: 0x3c, Size: 0xc]
	World* MapWorld;//[Offset: 0x48, Size: 0x4]
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x4c, Size: 0x4]
	enum RunningStatus;//[Offset: 0x50, Size: 0x1]
	<enum,int> StateTimeoutConfig;//[Offset: 0x54, Size: 0x3c]
	void OnWorldBeginPlayFinish(World* World);// 0x285cec0
	void OnStatusChanged();// 0x27757a4
	World* GetStateWorld();// 0x285d09c
	FString GetStateURL();// 0x285cfcc
	enum GetStateStatus();// 0x285d0b8
	FString GetStateOptions();// 0x285cf40
	FName GetStateName();// 0x285cfa8
	FString GetMapPath();// 0x285d034

--------------------------------
Class: AssetsPreloaderBase.Object

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 0x4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 0x1]
	int iUIControlState;//[Offset: 0x30, Size: 0x4]
	int DefaultSceneCameraIndex;//[Offset: 0x34, Size: 0x4]
	float DefaultCameraBlendTime;//[Offset: 0x38, Size: 0x4]
	FName[] GameStatusList;//[Offset: 0x48, Size: 0xc]
	FString[] PushedWidgets;//[Offset: 0x54, Size: 0xc]
	FString[] DefaultChildList;//[Offset: 0x60, Size: 0xc]
	class Object[] WidgetUClassList;//[Offset: 0x6c, Size: 0xc]
	UAEUserWidget*[] WidgetList;//[Offset: 0x78, Size: 0xc]
	<FString,UAEUserWidget*> WidgetMap;//[Offset: 0x84, Size: 0x3c]
	FString[] DelayMessage;//[Offset: 0xc4, Size: 0xc]
	Object*[] DelayMessage_Obj;//[Offset: 0xd0, Size: 0xc]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x285d558
	bool IsEnableRemoveDynamicWidgets();// 0x285d5d8
	FrontendHUD* GetOwningFrontendHUD();// 0x285d76c
	int GetDefaultSceneCamera();// 0x265d420
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x285d600

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UAEUserWidget*[] WidgetList;//[Offset: 0x2c4, Size: 0xc]
	UAEUserWidget*[] WidgetBufferList;//[Offset: 0x2d0, Size: 0xc]
	void RemoveWidgetInternal(UAEUserWidget* Widget);// 0x25180bc
	void RemoveWidget(UAEUserWidget* Widget);// 0x28607e4
	void AddWidgetInternal(UAEUserWidget* Widget);// 0x263d3f0
	void AddWidget(UAEUserWidget* Widget);// 0x286085c

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0xd0, Size: 0x68]
	delegate BrushDelegate;//[Offset: 0x138, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x148, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x158, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x16c, Size: 0x10]
	Object* SoftResourceObject;//[Offset: 0x1a8, Size: 0x20]
	Object* LODSoftResourceObject;//[Offset: 0x1c8, Size: 0x4]
	bool bIsOpenSoftResLoader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	void SetOpacity(float InOpacity);// 0x3bfcb20
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3bfcb98
	void SetBrushTintColor(SlateColor TintColor);// 0x3bfc8c0
	void SetBrushSize(Vector2D DesiredSize);// 0x3bfcab0
	void SetBrushResourceObject(Object* ResourceObject);// 0x3bfc848
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x3bfc2f8
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x3bfc4bc
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x3bfc138
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x3bfbfc8
	void SetBrushFromPathAsync(FString ResourcePath);// 0x3bfbf38
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x25d3d38
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x3bfc3c4
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3bfc588
	void SetBrush(out const SlateBrush InBrush);// 0x3bfc608
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3bfbf10

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x1c, Size: 0x68]

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 0xc]
	FName ContainerName;//[Offset: 0xc, Size: 0x8]
	int ZOrder;//[Offset: 0x14, Size: 0x4]
	UAEUserWidget* Widget;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkillTriggerBase.Object
	UTSkillManagerComponent* SkillManagerComponent;//[Offset: 0x1c, Size: 0x8]
	int SkillID;//[Offset: 0x24, Size: 0x4]
	void OnUnInitSkill();// 0x2ce6f18
	void OnInitSkill();// 0x2ce6f18
	UTSkillManagerComponent* GetSkillManagerComponent();// 0xf41bec

--------------------------------
Class: SecurityAntiData
	FString UID;//[Offset: 0x0, Size: 0xc]
	FString AntiData;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: PredictionKey
	PackageMap* PredictiveConnection;//[Offset: 0x0, Size: 0x4]
	int16 BaseKey;//[Offset: 0x4, Size: 0x2]
	int16 RelyKey;//[Offset: 0x6, Size: 0x2]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: UTSkillSynData
	uint64 DoneSkillPhaseMask;//[Offset: 0x0, Size: 0x8]
	int CurSkillIndex;//[Offset: 0x8, Size: 0x4]
	int CurSkillPhase;//[Offset: 0xc, Size: 0x4]
	enum StopReason;//[Offset: 0x10, Size: 0x1]
	bool bCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	int PhaseFlag;//[Offset: 0x14, Size: 0x4]
	int ClientBaseKey;//[Offset: 0x18, Size: 0x4]
	int CastCount;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: UTSkillPhaseJumpResult
	int SkillIndex;//[Offset: 0x0, Size: 0x4]
	byte DirtyTrigger;//[Offset: 0x4, Size: 0x1]
	enum ResultCode;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0xc]
	Actor* FromPawn;//[Offset: 0xc, Size: 0x4]
	int SkillID;//[Offset: 0x10, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x14, Size: 0x4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0xc]
	Actor* FromPawn;//[Offset: 0xc, Size: 0x4]
	int SkillID;//[Offset: 0x10, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x14, Size: 0x4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SkillCDSyncData
	int SkillIndex;//[Offset: 0x0, Size: 0x4]
	bool bEnableCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int AvailableTimes;//[Offset: 0x8, Size: 0x4]
	int AvailableTimesRound;//[Offset: 0xc, Size: 0x4]
	float Energy;//[Offset: 0x10, Size: 0x4]
	float LastActiveTime;//[Offset: 0x14, Size: 0x4]
	bool bMarkModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: UTAddedSkillSturct
	FString SkillTemplatePath;//[Offset: 0x0, Size: 0xc]
	int SkillIndex;//[Offset: 0xc, Size: 0x4]
	int SkillHandle;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkillModifierList
	SkillModifierInfo[] List;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: SkillModifierInfo
	SkillModifierDesc Desc;//[Offset: 0x0, Size: 0x10]
	SkillModifierOperator Operator;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkillModifierDesc
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	FName Tag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SkillModifierOperator
	FString Value;//[Offset: 0x0, Size: 0xc]
	bool bIsNumericAttribute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	enum OperationType;//[Offset: 0xd, Size: 0x1]
	enum CombineType;//[Offset: 0xe, Size: 0x1]

--------------------------------
Class: SkillModifierCalculator
	FString CalculatedValue;//[Offset: 0x4, Size: 0xc]
	enum CalculatorType;//[Offset: 0x10, Size: 0x1]
	enum CombineType;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: PredcitionData
	PredictionKey BasePredictionKey;//[Offset: 0x0, Size: 0xc]
	SkillPredictionInfo[] PredictionList;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SkillPredictionInfo
	PredictionKey PredictionKey;//[Offset: 0x0, Size: 0xc]
	int BindPhaseId;//[Offset: 0xc, Size: 0x4]
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	CharacterAnimDataAsset* AnimationDataSet;//[Offset: 0x14c, Size: 0x20]
	CharacterAnimDataAsset* CurrentAnimDataAsset;//[Offset: 0x178, Size: 0x4]
	AnimSoftObject[] NeedLoadAnimArray;//[Offset: 0x17c, Size: 0xc]
	int CustomLoadIndex;//[Offset: 0x188, Size: 0x4]
	int CustomPerLoadCount;//[Offset: 0x18c, Size: 0x4]
	uint32 CustomAnimLoadId;//[Offset: 0x190, Size: 0x4]
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType, bool IsFPP);// 0x27ba1b4
	AnimationAsset* GetCharacterAnim(byte AnimType, byte PoseType, bool IsFPP);// 0x27ba2dc

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x134, Size: 0xc]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0xe4, Size: 0x3c]

--------------------------------
Class: CharacterAnimDataAsset.DataAsset.Object
	<FinalKey,AnimationAsset*> AnimListMap;//[Offset: 0x20, Size: 0x3c]
	AnimationAsset*[] AnimListMapValueArray;//[Offset: 0x5c, Size: 0xc]
	RandomPlayerSequenceEntryContainer TppIdleRandomContainer;//[Offset: 0x68, Size: 0xc]
	<AnimationAsset*> RetainAnimAssets;//[Offset: 0x74, Size: 0x3c]
	<AnimationAsset*> ProbeLoadAnimAssets;//[Offset: 0xb0, Size: 0x3c]
	<AnimationAsset*> RetainProbeAnimAssets;//[Offset: 0xec, Size: 0x3c]
	uint32 RefCount;//[Offset: 0x128, Size: 0x4]
	float CurrentMinDistanceSquaredToCamera;//[Offset: 0x12c, Size: 0x4]
	bool bProbeAnimLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	AnimSequence*[] GrabAllAnimSeqs(int inMinFrameNum);// 0x255f860

--------------------------------
Class: FinalKey
	int Key;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: RandomPlayerSequenceEntryContainer
	RandomPlayerSequenceEntryX[] Entries;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: RandomPlayerSequenceEntryX
	AnimSequence* Sequence;//[Offset: 0x0, Size: 0x4]
	float ChanceToPlay;//[Offset: 0x4, Size: 0x4]
	int MinLoopCount;//[Offset: 0x8, Size: 0x4]
	int MaxLoopCount;//[Offset: 0xc, Size: 0x4]
	float MinPlayRate;//[Offset: 0x10, Size: 0x4]
	float MaxPlayRate;//[Offset: 0x14, Size: 0x4]
	AlphaBlend BlendIn;//[Offset: 0x18, Size: 0x28]

--------------------------------
Class: AnimSoftObject
	AnimationAsset* AnimSoftObjectPtr;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 0x1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 0xc]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 0x48]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 0xc]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 0x3c]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 0x4]
	float Rate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UAESkillAction_ReplaceCharAnim.UAESkillAction.ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x64, Size: 0xc]
	SkillReplaceJumpAnimData[] JumpAnimDataList;//[Offset: 0x70, Size: 0xc]
	bool bResetWhenPhaseFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	bool bResetWhenNewReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]
	bool DoReplaceEnableUseBaseBSTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 0x1]
	bool IsRecoverOnReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 0x1]

--------------------------------
Class: UAESkillAction.ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	void ResumeActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0x27bdfac
	void ResumeAction_Internal();// 0x27bdf74
	void PauseActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0x27be02c
	void PauseAction_Internal();// 0x27bdf90

--------------------------------
Class: ApexSkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	bool bEnableObChangeDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool bDisableObDelegateWhenReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
	SkillEventParam* SkillEventParamRecieved;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x38, Size: 0xc]
	bool m_Inheritable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool m_OverrideActionColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	LinearColor m_ActionColor;//[Offset: 0x4c, Size: 0x10]
	bool m_Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void UpdateActionBP(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0xf43a58
	void UpdateAction_Internal(float DeltaSeconds);// 0xf4385c
	void UndoActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0xf43b1c
	void UndoAction_Internal();// 0xf438dc
	void ResetBP(UTSkillManagerComponent* SkillManagerComponent);// 0xf439d8
	void Reset_Internal();// 0xf43840
	void Reset(ActorComponent* SkillManagerComponent);// 0xf43c24
	bool RealDoActionBP(UTSkillManagerComponent* SkillManagerComponent);// 0xf43b9c
	bool RealDoAction_Internal();// 0xf438f8
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0xf43c9c
	void PhaseExit_Internal();// 0xf43824
	bool JudgeNeedPhaseWait();// 0xf43928
	void CameraModeChangedEventBP(UTSkillManagerComponent* SkillManagerComponent);// 0xf43958
	void CameraModeChangedEvent_Internal();// 0xf43808

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	bool IsBlueprintImplement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bForceExecute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bImportant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x4, Size: 0xc]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x10, Size: 0xc]
	AnimationAsset*[] PoseUnarmedAnimList;//[Offset: 0x1c, Size: 0xc]
	ConditionalReplaceAnimData ConditionalAnimData;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ConditionalReplaceAnimData
	ConditionalSkillReplaceCharAnimData[] ConditionalAnimDataList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ConditionalSkillReplaceCharAnimData
	CompositionCondition[] Conditions;//[Offset: 0x0, Size: 0xc]
	AnimationAsset*[] PoseAnimList;//[Offset: 0xc, Size: 0xc]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CompositionCondition
	enum ConditionPose;//[Offset: 0x0, Size: 0x1]
	enum Op;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SkillReplaceJumpAnimData
	byte CharacterJumpType;//[Offset: 0x0, Size: 0x1]
	ChararacterJumpAnimData[] TPPPoseData;//[Offset: 0x4, Size: 0xc]
	ChararacterJumpAnimData[] FPPPoseAnim;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: ChararacterJumpAnimData
	byte JumpPhase;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x4, Size: 0x20]

--------------------------------
Class: TriggerEventBuffPoolItem
	SkillEventParam* SkillEventParam;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SkillPickerModule.SkillObject.Object
	ApexSkillManagerComponent* ParentSkillManagerComponent;//[Offset: 0x1c, Size: 0x8]
	SkillPickerConfigData*[] PickerTaskArray;//[Offset: 0x24, Size: 0xc]
	<int,ApexSkillTargetResult*> PickerResultPool;//[Offset: 0x30, Size: 0x3c]
	<int,delegate> PickerSignalLisenters;//[Offset: 0x6c, Size: 0x3c]
	void UnRegisterSignalListener(const int SkillPickerKey);// 0x106b02c
	int TriggerPicker(SkillPickerConfigData* PickerConfigData, delegate SkillPickerSignalLisenter, bool bNoDelay);// 0x277a6c0
	void TickPicker(float DeltaTime);// 0x24ab390
	void RegisterSignalListener(const int SkillPickerKey, delegate SkillPickerSignalLisenter);// 0x277a5c8
	ApexSkillTargetResult* PopPickerResult(const int SkillPickerKey);// 0x277a540

--------------------------------
Class: SkillObject.Object

--------------------------------
Class: SkillPickerConfigData.Object
	PickerDescription* PickerDescription;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: PickerDescription.Object
	enum DescriptionType;//[Offset: 0x1c, Size: 0x1]
	class Object[] KeepActorClassArray;//[Offset: 0x20, Size: 0xc]
	enum[] KeepActorTypeArray;//[Offset: 0x2c, Size: 0xc]
	Object* Context;//[Offset: 0x38, Size: 0x4]
	int SkillPickerKey;//[Offset: 0x3c, Size: 0x4]
	Vector Location;//[Offset: 0x40, Size: 0xc]
	Quat Rotation;//[Offset: 0x50, Size: 0x10]
	Vector[] PickerLocationOffsetArray;//[Offset: 0x60, Size: 0xc]
	void PerformPicker(out Actor*[] PickerActorArray);// 0x24ab748
	bool IsKeepActorClass(Actor* TargetActor);// 0x24ab610
	ApexSkillTargetResult* GetSkillPickerResult(out const Actor*[] PickerActorArray);// 0x24ab698

--------------------------------
Class: ApexSkillTargetResult.SkillEventParam.Object
	ApexSkillTargetActorArray[] PickerTargetArray;//[Offset: 0x4c, Size: 0xc]
	SkillPickerConfigData* SkillPickerConfigData;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: ApexSkillTargetActorArray
	enum PickerTargetType;//[Offset: 0x0, Size: 0x1]
	Actor*[] ActorList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ParticleSystemAsync.AsyncLoaderBase.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x24, Size: 0x4]
	ParticleSystem* SOPParticleSystemTemplate;//[Offset: 0x28, Size: 0x20]
	ParticleSystemComponent* ParticleSystemComp;//[Offset: 0x48, Size: 0x4]
	SceneComponent* _AttachToComponent;//[Offset: 0x4c, Size: 0x4]
	World* _Wolrd;//[Offset: 0x58, Size: 0x4]
	void SetTemplate(ParticleSystemComponent* Target, ParticleSystem* EmitterTemplate, out const delegate LoadFinishedCallback);// 0x26d3a20
	void SetHiddenInGame(bool NewHidden);// 0x26d3978
	void ReleaseToPool();// 0x26d39f8
	void OnLoadPSFinished_Attached(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x26d3338
	void OnLoadPSFinished_AtLocation(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x26d30c0
	void OnLoadPSFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, ParticleSystem* EmitterTemplate);// 0x26d35b0
	ParticleSystem* GetSOPParticleTemplate();// 0x26d3878
	ParticleSystem* GetParticleTemplate();// 0x26d3950
	ParticleSystemComponent* GetParticleComponent();// 0x26d3850
	SceneComponent* GetAttachedComponent();// 0x26d3828
	void DestroyComponent();// 0x26d3a0c

--------------------------------
Class: SkillLocPickInfo
	bool bIsLocOK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector[] PosList;//[Offset: 0x4, Size: 0xc]
	Rotator[] RotList;//[Offset: 0x10, Size: 0xc]
	FString[] StrList;//[Offset: 0x1c, Size: 0xc]
	PrimitiveComponent*[] BaseList;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: HandStateData
	enum OperationType;//[Offset: 0x0, Size: 0x1]
	FString OperationGroup;//[Offset: 0x4, Size: 0xc]
	HandStateCustomData CustomData;//[Offset: 0x10, Size: 0xc]
	bool OverrideCustomData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	enum eOperationSrcType;//[Offset: 0x1d, Size: 0x1]
	float Timestamp;//[Offset: 0x20, Size: 0x4]
	int UniqueID;//[Offset: 0x24, Size: 0x4]
	FString DetailDesc;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: HandStateCustomData
	int CustomIntData1;//[Offset: 0x0, Size: 0x4]
	int CustomIntData2;//[Offset: 0x4, Size: 0x4]
	enum WeaponSlot;//[Offset: 0x8, Size: 0x1]
	bool bNeedWeaponProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SkillPreloadData
	Object* ObjectPtr;//[Offset: 0x0, Size: 0x20]
	enum MatchPlatform;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SkillConfigIDData
	int SkillConfigId;//[Offset: 0x0, Size: 0x4]
	SkillFlowData[] DataList;//[Offset: 0x4, Size: 0xc]
	bool bHasInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int UseCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SkillFlowData
	FString DataName;//[Offset: 0x0, Size: 0xc]
	bool bIsString;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FString DataString;//[Offset: 0x10, Size: 0xc]
	float DataFloat;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SkillActorHealthComponent.ActorComponent.Object
	float Health;//[Offset: 0xa8, Size: 0x4]
	float MaxHealth;//[Offset: 0xac, Size: 0x4]
	bool bOnlyHitByEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	delegate OnActorDeadEvent;//[Offset: 0xb4, Size: 0xc]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x276a450
	void OnActorDead();// 0x2405154
	float GetHealth();// 0x276a5c4
	void BP_OnActorDead();// 0x2ce6f18

--------------------------------
Class: NetPickUpWrapperResult
	int NetGuidValue;//[Offset: 0x0, Size: 0x4]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	enum SpawnReason;//[Offset: 0x6, Size: 0x1]
	PickUpItemData PickUpInfo;//[Offset: 0x8, Size: 0x28]
	Vector Location;//[Offset: 0x30, Size: 0xc]
	PickUpItemData[] PickUpDataList;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: NetRecoverBannerPlayerInfo
	uint32 RecoverBannerPlayerKey;//[Offset: 0x0, Size: 0x4]
	int LegendId;//[Offset: 0x4, Size: 0x4]
	FString PlayerName;//[Offset: 0x8, Size: 0xc]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float PickupAnimTime;//[Offset: 0xa8, Size: 0x4]
	float InPickupTime;//[Offset: 0xac, Size: 0x4]
	bool bOpenPickupListAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	byte[] PickupListAnimQueue;//[Offset: 0xb4, Size: 0xc]
	bool bCanUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	uint64[] PickupDropIDPool;//[Offset: 0xc4, Size: 0xc]
	int[] AutoPickItemList;//[Offset: 0xd8, Size: 0xc]
	Actor*[] PickupAvailableActorPool;//[Offset: 0xf8, Size: 0xc]
	Actor*[] PickupAroundActorPool;//[Offset: 0x104, Size: 0xc]
	Actor*[] PickupAroundActorBoxPool;//[Offset: 0x110, Size: 0xc]
	Actor*[] PickupEffectsActorPool;//[Offset: 0x11c, Size: 0xc]
	SearchedPickUpWrapperResult[] ConfirmedPickupWrapperPool;//[Offset: 0x128, Size: 0xc]
	SearchedPickUpTombBoxResult[] ConfirmedPickupTombBoxPool;//[Offset: 0x134, Size: 0xc]
	<enum,int> PickupWrapperGroupColumn;//[Offset: 0x140, Size: 0x3c]
	int EachFrameMaxPickUpCount;//[Offset: 0x19c, Size: 0x4]
	float LongClickPickUpTime;//[Offset: 0x1a0, Size: 0x4]
	int PickUpItemSize;//[Offset: 0x1a4, Size: 0x4]
	int PickUpTypeSize;//[Offset: 0x1a8, Size: 0x4]
	delegate OnPlayerPickUp;//[Offset: 0x1ac, Size: 0xc]
	bool bIsOpenPickUpPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	float InfinitePickupInterval;//[Offset: 0x1c8, Size: 0x4]
	float PickUpRadius;//[Offset: 0x1cc, Size: 0x4]
	float PickUpRadius_MainTown;//[Offset: 0x1d0, Size: 0x4]
	<enum,float> SpawnReasonToPickUpRadius;//[Offset: 0x1d4, Size: 0x3c]
	float PickUpZOffset;//[Offset: 0x210, Size: 0x4]
	float CheckPickUpInterval;//[Offset: 0x214, Size: 0x4]
	float PickUpReLocationInterval;//[Offset: 0x218, Size: 0x4]
	float PickUpZLimit;//[Offset: 0x21c, Size: 0x4]
	float PickUpZLimit_MainTown;//[Offset: 0x220, Size: 0x4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	bool bEnableMultiObjPickUpVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 0x1]
	float ForwardPickUpAngle;//[Offset: 0x228, Size: 0x4]
	float ForwardPickUpAngle_MainTown;//[Offset: 0x22c, Size: 0x4]
	float CacheForwardPickUpAngleCos;//[Offset: 0x230, Size: 0x4]
	bool bAsyncLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	float PickEffectRadius;//[Offset: 0x274, Size: 0x4]
	int PickupCheckCount;//[Offset: 0x278, Size: 0x4]
	int PickEffectCount;//[Offset: 0x27c, Size: 0x4]
	ParticleSystem* PickupWrapperEffectParticle;//[Offset: 0x280, Size: 0x20]
	Color[] PickupWrapperEffectColor;//[Offset: 0x2a0, Size: 0xc]
	Color PickupWrapperEffectPingColor;//[Offset: 0x2ac, Size: 0x4]
	Vector PickupWrapperEffectNormal;//[Offset: 0x2b0, Size: 0xc]
	Vector PickupWrapperEffectAim;//[Offset: 0x2bc, Size: 0xc]
	Transform PickupWrapperEffectTrans;//[Offset: 0x2d0, Size: 0x30]
	PickUpWrapperActor*[] ReadyToLoadPickupEffectArray;//[Offset: 0x300, Size: 0xc]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x30c, Size: 0xc]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x318, Size: 0x4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x31c, Size: 0x4]
	float FindPutDownPointZThreshold;//[Offset: 0x320, Size: 0x4]
	Vector2D RegionXRange;//[Offset: 0x324, Size: 0x8]
	Vector2D RegionYRange;//[Offset: 0x32c, Size: 0x8]
	class PlayerTombBox* TombBoxTemplate;//[Offset: 0x334, Size: 0x20]
	bool bShowDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 0x1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x358, Size: 0xc]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x364, Size: 0x4]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x368, Size: 0x4]
	float DebugDrawTime;//[Offset: 0x36c, Size: 0x4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	bool bEnableAutoPickNearOnHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	bool bAutoPickUpOptic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 0x1]
	bool bHidePickUpListOnShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 0x1]
	bool bAutoPickUpWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	bool bAutoPickUpSecondWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 0x1]
	bool bLongClickReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 0x1]
	bool bHidePickupListWithinEnmity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x377, Size: 0x1]
	float AutoPickUpInterval;//[Offset: 0x378, Size: 0x4]
	float SearchedPickUpInterval;//[Offset: 0x37c, Size: 0x4]
	float PlayerDropItemInterval;//[Offset: 0x380, Size: 0x4]
	int TickRecommendNearItemCount;//[Offset: 0x384, Size: 0x4]
	int AutoPickItemCacheNum;//[Offset: 0x388, Size: 0x4]
	<int,PickupItemConfigData> CacheConfigDataMap;//[Offset: 0x3d0, Size: 0x3c]
	DataTable* MeshTablePtr;//[Offset: 0x40c, Size: 0x4]
	DataTable* PickupMeshTable;//[Offset: 0x410, Size: 0x20]
	float ReportTimeInterval;//[Offset: 0x440, Size: 0x4]
	float SpecificTimeInteval;//[Offset: 0x444, Size: 0x4]
	int SpecificTimesConfig;//[Offset: 0x448, Size: 0x4]
	int[] SpecificTypes;//[Offset: 0x478, Size: 0xc]
	double[] SpecificTriggerTimeArray;//[Offset: 0x484, Size: 0xc]
	int OpenTombBoxGuideID;//[Offset: 0x4a0, Size: 0x4]
	int SwitchTomBoxGuideID;//[Offset: 0x4a4, Size: 0x4]
	void UpdatePickupAvailableActors();// 0x26f2ee8
	void UpdatePickupAroundActors();// 0x26f2e84
	void TriggerIllegalOperation(ItemDefineID ItemID, ApexCharacter* OwnerPlayer, uint32 PlayerKey, enum CreditType, enum CreditTactics, FString InText);// 0x26f0de8
	void SubPickupEffectsActor(Actor* Target);// 0x26f34e4
	void SubPickupAvailableActor(Actor* Target);// 0x26f36ec
	void SubPickupAroundActorBox(Actor* Target);// 0x26f33e0
	void SubPickupAroundActor(Actor* Target);// 0x26f35e8
	void StartTombSwitchGuide();// 0x26f07e4
	void StartGuide(int GuideID);// 0x26f0870
	PickUpWrapperActor* SpawnWrapperOnGround(class Object WrapperClass, bool bUseRandomLoc, int ItemID, int DID);// 0x26f2be4
	void SpawnPickUpTomBoxOnGround(class Object BoxClass, bool bUseRandomLoc);// 0x26f2b18
	void SpawnPickUpItemOnGroundByID(int ItemID, int DID);// 0x25837b0
	void ShowPickupPanel();// 0x26f21c8
	void SetTombBoxUIWidgetVisibility(int Index);// 0x26f2530
	void SetNearListShowState(bool bIsShow);// 0x26f22a8
	void SetCanUpdateAround(bool InValue);// 0x26f39dc
	void SetBoxListShowState(bool bIsShow);// 0x26f2328
	void SetBattleStatePinch(int State);// 0x26f23c4
	void SetAutoPickUp(bool bInAutoPick, bool bToClient);// 0x26f3ff4
	void ServerPickUpWrapperActorFromMarketWithWeaponId(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, enum PickupGroup, ItemDefineID WeaponID);// 0x26f1158
	void ServerPickUpWrapperActorFromMarketWithReplaceData(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, BattleItemData ReplaceBattleItemData, enum PickupGroup);// 0x26f1474
	void ServerPickUpWrapperActorFromMarket(LobaBlackMarket* Market, const int NetGuid, PickUpItemData PickUpData, enum PickupGroup, bool bAddPickedItemNum);// 0x26f17a4
	void RPCServerSetAutoPickUp(bool bInAutoPick);// 0x26f3f6c
	void RPCServerPickUpTarget(PickUpReqData PickUpReqData);// 0x26f42fc
	void RPCClientSetAutoPickUp(bool bInAutoPick);// 0x256bb80
	void RPCClientPickUpTarget();// 0x2517b18
	void RPC_ServerUploadOpenTombBoxData(uint32 OtherPlayerKey, uint16 TotalTimes);// 0x26f0a54
	void RPC_MulticastPlayerPickUpActor(ItemDefineID ItemDefineID, float TargetZLoc);// 0x26f4228
	void RPC_ClientNotifyPickFailResult(enum InResult, const ItemDefineID InItemID);// 0x26f0990
	void ResetDates();// 0xfd338c
	void ReportIllegalOperation(ItemDefineID ItemID, ApexCharacter* OwnerPlayer, uint32 PlayerKey, enum CreditType, enum CreditTactics, FString InText);// 0x26f0b90
	void ReplacePickUpWrapperActor(out const SearchedPickUpWrapperResult TargetPickUpWrapperResult, out const BattleItemData ReplaceBattleItemData);// 0x26f4b70
	void RecordDates(ItemDefineID ItemID);// 0x26f1040
	void PlayPickupSound(ItemDefineID ItemDefineID);// 0x26f45b4
	void PlayPickupListAnimQueue();// 0x26f4978
	void PickUpWrapperTarget(PickUpWrapperActor* Target, PickUpItemData PickUpData, bool isAutoPickUp);// 0x26f46f8
	void PickUpWrapperActorLua(out const SearchedPickUpWrapperResult Result, bool bCheckClient);// 0x26f4e9c
	bool PickUpWrapperActor(PickUpWrapperActor* Target, PickUpItemData PickUpData, bool checkClient, bool isAutoPickUp, bool bLongPressReplaced);// 0x26f5020
	bool PickUpWeaponAttach(out const SearchedPickUpWrapperResult Result, ItemDefineID WeaponID);// 0x26f4d08
	void OperatePickupAvailableActorPool();// 0x26f36d8
	void OnSettingChanged(FString[] ChangedDataArray);// 0x26f1ec0
	void OnPlayerStopFire(Weapon* Weapon);// 0x26f2044
	void OnPlayerStartFire(Weapon* Weapon);// 0x26f20bc
	void OnPlayerBattleStateChange(bool IsEnterBattle);// 0x26f2134
	void OnPingItemUpdate(int64 ItemUUID, uint32 PlayerKey, bool bIsShow, bool IsReserve);// 0x26f387c
	void NotifyGamePadPickupListState();// 0x26f225c
	void NotifyClientPickupSuccess(const PickUpReqData PickupItem);// 0x26f40c4
	bool NeedTeamupWhenPick(PickUpWrapperActor* InActor);// 0x26f0910
	void LoadMeshTableFinished();// 0x26f1ac0
	void LoadMeshTable();// 0x26f1ad4
	void JudgeInPickOverTime(float DeltaTime);// 0x26f498c
	bool IsPlayerInMainTown();// 0x26f3854
	bool IsPickUpItemDataBelongNear(out const PickUpItemData ItemData);// 0x26f3074
	bool IsInRoomTeam();// 0x26f08e8
	void InitPickUpItemConfigData();// 0x26f1ccc
	void InitMultiActivityItemConfig(out PickupItemConfigData InCachedData, int ItemID);// 0x26f1ae8
	void HidePickupPanel();// 0x26f21b4
	void HandlePlayPickupListAnim(out const PickUpReqData PickupItem);// 0x26f4a04
	void HandlePlayerPickUpActor(PickUpWrapperActor* WrapperActor, float TargetZLoc);// 0x26f463c
	void HandlePickupPanelVisble(bool bInBattleState);// 0x26f21dc
	WeaponManagerComponent* GetWeaponManagerComponent();// 0x26f5354
	int GetRecommendNearItemCount();// 0x26f24f4
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x26f2dcc
	float GetPickUpZLimit();// 0x26f3a74
	PickUpWrapperActor* GetPickUpWrapperActorWithInstanceID(uint64 InstanceID);// 0x26f2efc
	float GetPickUpRadius(enum SpawnReason);// 0x26f3a9c
	bool GetPickUpListPanelShow();// 0x26f2e5c
	int GetPickUpItemDataBelongTombBoxIndex(out const PickUpItemData ItemData);// 0x26f2f80
	PickupItemConfigData GetPickUpItemConfigData(int ItemID);// 0x26f1ce0
	bool GetNearListShowState();// 0x26f2270
	bool GetLongClickReplaceSetting();// 0x26f3a58
	float GetLongClickPickUpInterval();// 0x26f24a4
	SiglePingInfo GetItemPingInfo(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x26f2620
	SearchedPickUpWrapperResult[] GetConfirmedPickupWrapperPool();// 0x26f3280
	int GetConfirmedPickupWrapperCount();// 0x26f3190
	SearchedPickUpTombBoxResult[] GetConfirmedPickupTombBoxPool();// 0x26f31b8
	int GetConfirmedPickupTombBoxCount();// 0x26f3168
	bool GetBoxListShowState();// 0x26f228c
	int GetBattleStatePinch();// 0x26f23a8
	BackpackComponent* GetBackPackComponent();// 0x26f537c
	float GetAutoPickUpInterval();// 0x26f24cc
	bool GetAutoPickUp();// 0x26f3f44
	int[] GetAutoPickItemList();// 0x26f243c
	void EndGuide(int GuideID);// 0x26f07f8
	void DeletePickUpItemPing(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x26f28a8
	void ClientUploadOpenTombBoxData(int InIndex);// 0x26f0b18
	void ClearPickupEffectsActorPool();// 0x26f34d0
	void ClearPickupAroundActorPool();// 0x26f35d4
	void ClearPickupAroundActorBoxPool();// 0x26f33cc
	void ClampWorldLocation(out Vector OutVector);// 0x26f2d48
	void CheckPickupUIShow();// 0x26f2e98
	void CheckPickupActorEffect();// 0x26f2eac
	void CheckPickupActorBoxAvailable();// 0x26f2ec0
	void CheckPickupActorAvailable();// 0x26f2ed4
	bool CanReport(ItemDefineID ItemID);// 0x26f10c8
	bool CanLongClickPickUpItem(PickUpItemData PickUpInfo);// 0x26f3b1c
	bool CanClickPickUpItem(PickUpItemData PickUpInfo, bool IgnoreLongClick);// 0x26f3d04
	void BroadcastSelectTombBox(int TombBoxResultIndex);// 0x26f25a8
	void AutoPickUpActor();// 0x26f251c
	void AddToPickupActorPool(Actor* Target);// 0x26f37dc
	void AddPickUpItemPing(out const SearchedPickUpWrapperResult PickUpWrapperResult);// 0x26f29e0
	void AddPickupEffectsActor(Actor* Target);// 0x26f355c
	void AddPickupAvailableActor(Actor* Target);// 0x26f3764
	void AddPickupAroundActorBox(Actor* Target);// 0x26f3458
	void AddPickupAroundActor(Actor* Target);// 0x26f3660

--------------------------------
Class: BattleItemData.ItemData
	int count;//[Offset: 0x64, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x6c, Size: 0xc]
	bool BackpackSlotIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	BattleItemFeatureData FeatureData;//[Offset: 0x7c, Size: 0x20]
	bool bCanUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	ItemAssociation[] Associations;//[Offset: 0xa0, Size: 0xc]
	int DeriveID;//[Offset: 0xac, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 0x10]
	FText Name;//[Offset: 0x18, Size: 0xc]
	FText Desc;//[Offset: 0x24, Size: 0xc]
	FString SmallIcon;//[Offset: 0x30, Size: 0xc]
	FString BigIcon;//[Offset: 0x3c, Size: 0xc]
	int SubType;//[Offset: 0x48, Size: 0x4]
	int MaxCount;//[Offset: 0x4c, Size: 0x4]
	ItemHandleBase* ItemHandle;//[Offset: 0x50, Size: 0x4]
	int ProgressBarCount;//[Offset: 0x54, Size: 0x4]
	int StackCount;//[Offset: 0x58, Size: 0x4]
	int ItemQuality;//[Offset: 0x5c, Size: 0x4]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ItemHandleBase.Object
	int MaxCount;//[Offset: 0x20, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 0x3c]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 0x10]
	void SetCount(int NewCount);// 0x26652c0
	void SetAssociation(FName Name, ItemAssociation Association);// 0x2664e78
	void RemoveAssociation(FName Name);// 0x2664dfc
	void Init(ItemDefineID InDefineID);// 0x2665354
	ItemDefineID GetDefineID();// 0x2664d18
	int GetCount();// 0x2665338
	<FName,ItemAssociation> GetAssociationMap();// 0x2664d5c
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x2665034
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x2664f80
	ItemAssociation GetAssociation(FName Name);// 0x2665110
	void AddAssociation(FName Name, ItemAssociation Association);// 0x26651b8

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 0x8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 0x10]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 0x4]
	int MaxCount;//[Offset: 0x4, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int SortingPriority;//[Offset: 0x10, Size: 0x4]
	int ItemType;//[Offset: 0x14, Size: 0x4]
	int ItemQuality;//[Offset: 0x18, Size: 0x4]
	int ToolbarWeight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SearchedPickUpWrapperResult
	int SearchedPickUpTime;//[Offset: 0x8, Size: 0x4]
	bool IsDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool IsSick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool IsLowQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	int RecommendCount;//[Offset: 0x10, Size: 0x4]
	PickUpItemData PickUpInfo;//[Offset: 0x18, Size: 0x28]
	int ItemSubType;//[Offset: 0x40, Size: 0x4]
	ItemDefineID BulletDefineID;//[Offset: 0x48, Size: 0x10]
	enum PickupGroup;//[Offset: 0x58, Size: 0x1]
	bool IsGroupColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	int Size;//[Offset: 0x5c, Size: 0x4]
	int NetGuid;//[Offset: 0x60, Size: 0x4]
	bool bDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool IsCanPickupByBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool IsLobaOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	enum SpawnReason;//[Offset: 0x67, Size: 0x1]
	Vector Location;//[Offset: 0x68, Size: 0xc]
	uint32 RecoverBannerPlayerKey;//[Offset: 0x74, Size: 0x4]
	int RecoverBannerLegendId;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: PickUpReqData
	PickUpWrapperActor* PickupActor;//[Offset: 0x0, Size: 0x4]
	PickUpItemData PickUpData;//[Offset: 0x8, Size: 0x28]
	bool bIsAutoPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bIsReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	PickUpItemData ReplaceItemData;//[Offset: 0x38, Size: 0x28]
	ItemDefineID TargetID;//[Offset: 0x60, Size: 0x10]
	bool bLobaMarket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bLongPressReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]

--------------------------------
Class: Weapon.Actor.Object
	WeaponMeshComponent* WeaponMeshComponent;//[Offset: 0x240, Size: 0x4]
	ApgameWeaponCoreComponent* WeaponCoreCompPtr;//[Offset: 0x244, Size: 0x4]
	WeaponDataAsset* WeaponConfigDataBP;//[Offset: 0x248, Size: 0x4]
	ShootWeaponDataAsset* ShootWeaponConfigDataBP;//[Offset: 0x24c, Size: 0x4]
	WeaponStateManagerLogicObject* StateManagerLogic;//[Offset: 0x250, Size: 0x4]
	WeaponEffectLogicObject* WeaponEffectLogic;//[Offset: 0x254, Size: 0x4]
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool bEnable);// 0x2808f04
	bool IsOwnerAutonomous();// 0x2809410
	bool IsLikeAutonomous();// 0x2809438
	enum GetWeaponType();// 0x2809378
	enum GetWeaponSlot();// 0x2809350
	MeshComponent* GetWeaponMeshComponent();// 0x2809288
	bool GetWeaponIsInit();// 0x2809328
	enum GetWeaponAttachSocket();// 0x28091c0
	enum GetWeaponAnimType();// 0x28091e8
	float GetStockFactor();// 0x2809030
	float GetStockBreathFactor();// 0x2809008
	float GetRaiseWeaponTimeRuntime();// 0x28090a8
	float GetPutOnWeaponTimeRuntime();// 0x28090f8
	float GetPutOffWeaponTimeRuntime();// 0x2809120
	byte GetOwnerPlayerRole();// 0x2809488
	FString GetOwnerPlayerName();// 0x28094b0
	int GetOwnerPlayerKey();// 0x2809460
	PlayerController* GetOwnerPlayerController();// 0x280956c
	Pawn* GetOwnerPawn();// 0x28095e4
	Controller* GetOwnerController();// 0x2809594
	ApexCharacter* GetOwnerCharacter();// 0x28095bc
	ApexPlayerController* GetOwnerApexController();// 0x2809544
	Actor* GetOwnerActor();// 0x280960c
	float GetLowerWeaponTimeRuntime();// 0x2809080
	ItemDefineID GetItemDefineID();// 0x28093c8
	bool GetIsCurUsingWeapon();// 0x2809210
	float GetFirstPickupToIdleTimeRuntime();// 0x28090d0
	float GetEquipAttachmentTimeRuntime();// 0x2809058
	int GetDeriveID();// 0x28093a0
	enum GetCurFreshWeaponState();// 0x2809300
	float GetBreathRuntime();// 0x2808fe0
	ItemHandleBase* GetBackpackItemHandle();// 0x2809238
	BackpackComponent* GetBackPackComponent();// 0x2809260
	void ClearWeaponAttrModifier();// 0x2808ef0
	bool CheckWeaponOnBack();// 0x28092b0
	bool CheckWeaponEquiping();// 0x28092d8
	void ChangeSequenceState(enum StateType);// 0x2809148

--------------------------------
Class: WeaponMeshComponent.SceneComponent.ActorComponent.Object
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x1f4, Size: 0x4]
	int[] CanEquipSlotList;//[Offset: 0x1f8, Size: 0xc]
	StaticMeshComponent* TppThermalComponent;//[Offset: 0x208, Size: 0x4]
	bool bAttachChargeShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 0x1]
	bool bMagzineChargeShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 0x1]
	ParticleSystem*[] ParticleArray;//[Offset: 0x260, Size: 0xc]
	HitEffectDataAsset*[] HitEffectDataAssetArray;//[Offset: 0x26c, Size: 0xc]
	SoftObjectPath[] EffectPaths;//[Offset: 0x278, Size: 0xc]
	BattleItemHandleBase* NewSniperHandle;//[Offset: 0x284, Size: 0x4]
	bool bMeshChangeDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bMeshMainFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool bMeshAttachFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	<enum,Weapon3DUIEntity*> Weapon3DUIEntityList;//[Offset: 0x30c, Size: 0x3c]
	<byte,Weapon3DUIChangeNum> Weapon3DUIColorNumMap;//[Offset: 0x348, Size: 0x3c]
	bool bThermalUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	SkeletalMeshComponent* SniperADSComponent;//[Offset: 0x3f0, Size: 0x4]
	<FString,WeaponFrameEffectParticleComp> EffectParticleCompMap;//[Offset: 0x444, Size: 0x3c]
	void UpdateSniperScopeShow(bool bAim);// 0x282ace0
	void UpdateADSMeshShow(bool bAim);// 0x282ade0
	void UnBindDelegate();// 0x282c654
	void ThermalLineTrace();// 0x282b398
	void SetZoomDirty(enum w3t, bool bMaxScale);// 0x282afd0
	void SetWeaponVisiable(bool Value, bool toAttachments, bool ToSinper);// 0x282c534
	void SetWeaponShootDirty();// 0x282af08
	void SetWeaponMeshCompFollow(MeshComponent* MeshComp, bool bFPP, bool bFollow);// 0x282c2a0
	void SetWeaponMainFollow(bool bFollow);// 0x282c434
	void SetWeaponAttachFollow(bool bFollow);// 0x282c3b4
	void SetStopFireDirty();// 0x282af24
	void SetSniperMaterialValue(bool bAim);// 0x282ad60
	void SetSniperADSVisiable(bool Value);// 0x282c4b4
	void SetSightTypeDirty();// 0x282b148
	void SetShootTypeDirty();// 0x282b164
	void SetReserveBulletNumDirty();// 0x282b298
	void SetHeatValueDirty(float HeatPercent);// 0x282b180
	void SetHeatDirty();// 0x282b1fc
	void SetDisruptorChargeValueDirty(float Value);// 0x282af54
	void SetBulletNumDirty();// 0x282b2b4
	void SetAimShowDirty(bool IsAiming);// 0x282b218
	void SetAimChargeLevelDirty();// 0x282af40
	void ReloadAttachmentsFromOthers(WeaponMeshComponent* others);// 0x282bf70
	void PutOnAttchByItemID(ItemDefineID ID);// 0x282c150
	void PutOffAttchByItemID(ItemDefineID ID);// 0x282c0c8
	void OnWeaponShootEvent();// 0x282c0b4
	void OnWeaponDisruptorChargeBeginOrEnd(bool bVisibleValue);// 0x282b9a8
	void OnUpdateZoom(enum w3t, bool bMaxScale);// 0x282b638
	void OnUpdateStopFire();// 0x282b4ac
	void OnUpdateSightType();// 0x282b774
	void OnUpdateShootTypeEvent();// 0x282b788
	void OnUpdateReserveBulletEvent();// 0x282b89c
	void OnUpdateHeatValue(float HeatPercent);// 0x282b6fc
	void OnUpdateHeat();// 0x282b8b0
	void OnUpdateDisruptorChargeValue(float Value);// 0x282b5c0
	void OnUpdateBulletEvent();// 0x282b8c4
	void OnUpdateAimShow(bool IsAiming);// 0x282b81c
	void OnUpdateAimEvent(bool IsAiming);// 0x282b79c
	void OnUpdateAimChargeLevel();// 0x282b4c0
	void OnUnEquipImmediately();// 0x282b4d4
	void OnTPPMeshVisibility(bool bVisibility);// 0x282a990
	void OnStopFire();// 0x282b2d0
	void OnStaticEffectEventTriggered(enum EffectEvent, float Value, int InStackCount);// 0x282aae0
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x282a7d4
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x282a8d4
	void OnReserveBulletNumEvent();// 0x282b35c
	void OnReloadStart();// 0x282bb8c
	void OnReloadEnd();// 0x282bb78
	void OnParticleEffectEventTriggered(enum EffectEvent, float Value);// 0x282aa24
	void OnMainEffectEventTriggered(enum EffectEvent, float Value, int InStackCount);// 0x282abe0
	void OnLensShootEvent();// 0x282b5ac
	void OnHeatValueChangeEvent(float HeatPercent);// 0x282b2e4
	void OnFPPMeshVisibility(bool bVisibility);// 0x282a990
	void OnCameraChanged();// 0x282aa10
	void OnAimFinished();// 0x282ae60
	void OnAimEnd();// 0x282ae74
	void OnAimChange(bool IsAiming);// 0x282ae88
	void LensDecrease();// 0x282b384
	bool IsDefaultAttachID(int ItemID);// 0x282bef0
	void InitDelegate();// 0x282c67c
	void InitCanEquipSlotList();// 0x282c690
	void Init3DUIData();// 0x282c668
	void HandleThermalTraceOpen(bool bAim);// 0x282b3ac
	void HandleThermalEffect(bool bAim);// 0x282b42c
	void HandleLensDecrease();// 0x282b370
	void HandleDisruptorTick(bool bTick);// 0x282b928
	void HandleDisruptorChargeAttachVisibility(bool bVisibleValue);// 0x282ba28
	void HandleCrossUI(enum Slot, bool bAim);// 0x282b4e8
	void HandleChargeRifleMagzineVisable(bool bShow, bool bReload);// 0x282baa8
	int GetWeaponSkinID();// 0x282b900
	int GetWeaponSkinDefault();// 0x282b8d8
	MeshComponent* GetTppAttachMesh(enum SlotID);// 0x282bdf0
	FName GetSocketName(enum SlotID, enum SubID);// 0x282bfe8
	MeshComponent* GetFppAttachMesh(enum SlotID);// 0x282bd70
	int[] GetEquippedAttachmentIdList();// 0x282bc5c
	LinearColor[] GetCurWeapon3DUIColorList();// 0x282bba0
	Weapon3DUIChangeNum GetCur3DUIChangeNum();// 0x282bc34
	int[] GetCanEquipSlotList();// 0x282c1d8
	MeshComponent* GetAttachMeshComBySlotID(enum SlotID);// 0x282be70
	BattleItemHandleBase* GetAttachItemHandleBySlot(enum SlotID);// 0x282bcf0

--------------------------------
Class: ApgameWeaponCoreComponent.SignificanceManagedActorComponent.ActorComponent.Object
	enum DataSlot;//[Offset: 0xbe, Size: 0x1]
	ApgameWeaponInitializationData InitializationData;//[Offset: 0xc0, Size: 0x38]
	ApgameWeaponInitializationData RepInitializationData;//[Offset: 0xf8, Size: 0x38]
	ApgameWeaponOwnedAttributeSetInfo[] NetAttributeSetsCache;//[Offset: 0x130, Size: 0xc]
	<int,int> FastOwnedLogicInstanceMap;//[Offset: 0x13c, Size: 0x3c]
	ApgameWeaponLogicInstance[] OwnedLogicInstances;//[Offset: 0x178, Size: 0xc]
	ApgameWeaponAttributeSet*[] OwnedAttributeSets;//[Offset: 0x184, Size: 0xc]
	ApgameWeaponAttributeSet*[] ReplicatedAttributeSets;//[Offset: 0x190, Size: 0xc]
	WeaponDataAsset* WeaponConfig;//[Offset: 0x19c, Size: 0x4]
	ShootWeapon* WeaponCosmetic;//[Offset: 0x1a0, Size: 0x4]
	ApgameWeaponEventProxy* EventProxyCache;//[Offset: 0x1a4, Size: 0x4]
	ApgameWeaponEventProxy* EventProxy;//[Offset: 0x1a8, Size: 0x4]
	<enum,float> TempWeaponDataMap;//[Offset: 0x1b8, Size: 0x3c]
	void RPC_ServerClearTempWeaponData(uint16 InWeaponInstanceId);// 0x24e1098
	void RPC_ServerChangeWeaponData(uint16 InWeaponInstanceId, enum InDataKey, float InTempData);// 0x24e1118
	void OnRep_RepInitializationRepData();// 0x24e1220

--------------------------------
Class: ApgameWeaponInitializationData
	uint16 RepIndex;//[Offset: 0x0, Size: 0x2]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 0x10]
	SpawnWeaponAdditionalData AdditionalData;//[Offset: 0x18, Size: 0x20]

--------------------------------
Class: SpawnWeaponAdditionalData
	int SkinId;//[Offset: 0x0, Size: 0x4]
	int InitBulletNum;//[Offset: 0x4, Size: 0x4]
	int DeriveID;//[Offset: 0x8, Size: 0x4]
	int ExtraBulletNum;//[Offset: 0xc, Size: 0x4]
	int SpecialBulletNum;//[Offset: 0x10, Size: 0x4]
	bool bUseSpecialBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	int SkinOwnerKey;//[Offset: 0x18, Size: 0x4]
	int CumulativeKill;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ApgameWeaponOwnedAttributeSetInfo
	ApgameWeaponAttributeSet* AttributeSet;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ApgameWeaponAttributeSet.Object
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: ApgameWeaponLogicInstance
	FName InstanceName;//[Offset: 0x0, Size: 0x8]
	ApgameWeaponLogicObject* Object;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApgameWeaponLogicObject.Object
	ApgameWeaponCoreComponent* CoreCompPtr;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: WeaponDataAsset.DataAsset.Object
	bool bBulletIndexAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bAutoAimPostFireConfig;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bDebugCrossHair;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bUseTraceBullet;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bDebugTraceBullet;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	bool bDebugWeaponMeshTick;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1]
	bool bDebugAttachMeshTick;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20, Size: 0x1]
	bool bAttachToCameraAtFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bAntiCheatOn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	bool bUseSmallScopeMode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 0x1]
	bool bUseEffectOptimize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 0x1]
	bool bUseCompleteShoulderCrossHair;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 0x1]
	bool bZeroAimChargeEnergyWhenExitAiming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21, Size: 0x1]
	bool bUseAimChargeToggleOption;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21, Size: 0x1]
	bool EnableTraceBulletInEmulator;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21, Size: 0x1]
	bool bCheckChangeCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22, Size: 0x1]
	bool bOpenStateMonitor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22, Size: 0x1]
	enum WeaponAnimType;//[Offset: 0x23, Size: 0x1]
	enum RecoilType;//[Offset: 0x24, Size: 0x1]
	enum MuzzleFxRenderPass;//[Offset: 0x25, Size: 0x1]
	enum SpringType;//[Offset: 0x26, Size: 0x1]
	ApgameWeaponLogicInstanceDefinition[] LogicInstanceList;//[Offset: 0x28, Size: 0xc]
	enum[] LogicStates;//[Offset: 0x34, Size: 0xc]
	<GameplayTag,WeaponComponentOptimizationSettings> LogicOptimizations;//[Offset: 0x40, Size: 0x3c]
	<enum,WeaponComponentOptimizationSettings> LogicStateOptimizations;//[Offset: 0x7c, Size: 0x3c]
	<FString,WeaponAttrModifyConfig> WeaponAttrModifyConfigList;//[Offset: 0xb8, Size: 0x3c]
	<enum,LegendWeaponAttrModifyConfigList> LegendTypeWeaponAttrModifyConfigList;//[Offset: 0xf4, Size: 0x3c]
	int BeEquipAnimationID;//[Offset: 0x130, Size: 0x4]
	float BackpackSwitchGunAlpha;//[Offset: 0x134, Size: 0x4]
	float BackpackSwitchGunTime;//[Offset: 0x138, Size: 0x4]
	int MaxHeat;//[Offset: 0x13c, Size: 0x4]
	int DecreaseHeat;//[Offset: 0x140, Size: 0x4]
	float DecreaseRate;//[Offset: 0x144, Size: 0x4]
	int IncreaseHeat;//[Offset: 0x148, Size: 0x4]
	float MaxDisruptorEnergy;//[Offset: 0x14c, Size: 0x4]
	float EnergyDecreasePerShot;//[Offset: 0x150, Size: 0x4]
	float EnergyIncreaseDelta;//[Offset: 0x154, Size: 0x4]
	float EnergyDecreaseDelta;//[Offset: 0x158, Size: 0x4]
	float EnergyDecreaseFrequency;//[Offset: 0x15c, Size: 0x4]
	float ChargeTime;//[Offset: 0x160, Size: 0x4]
	ApgameChargeConsumeItem[] ChargeConsumeList;//[Offset: 0x164, Size: 0xc]
	int NumConsumed;//[Offset: 0x170, Size: 0x4]
	float EnergyThreshold;//[Offset: 0x174, Size: 0x4]
	float EnergyAddSpeed;//[Offset: 0x178, Size: 0x4]
	float EnergySubSpeed;//[Offset: 0x17c, Size: 0x4]
	float LinearDamping;//[Offset: 0x180, Size: 0x4]
	float DisposeTime;//[Offset: 0x184, Size: 0x4]
	float BallisiticPrecision;//[Offset: 0x188, Size: 0x4]
	float HorizontalCancelSpring;//[Offset: 0x18c, Size: 0x4]
	float RecoilSpeed;//[Offset: 0x190, Size: 0x4]
	float BulletDecayDelay;//[Offset: 0x194, Size: 0x4]
	float BulletDecaySpeed;//[Offset: 0x198, Size: 0x4]
	float BulletClearDelay;//[Offset: 0x19c, Size: 0x4]
	bool bUseHitRecoilFactorInEmulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	RecoilFactor4D HitRecoilFactor;//[Offset: 0x1a4, Size: 0x10]
	float HitRecoilCDTime;//[Offset: 0x1b4, Size: 0x4]
	RecoilPoseFactor[] RecoilPoseFactorList;//[Offset: 0x1b8, Size: 0xc]
	float SpringHeatFactor;//[Offset: 0x1c4, Size: 0x4]
	Vector2D SpringHeatLimit;//[Offset: 0x1c8, Size: 0x8]
	float SpringCoolTime;//[Offset: 0x1d0, Size: 0x4]
	enum[] WeaponBackSocketPosition;//[Offset: 0x1d4, Size: 0xc]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x1e0, Size: 0x4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x1e4, Size: 0x4]
	float FirstPickupToIdleTime;//[Offset: 0x1e8, Size: 0x4]
	float MaxRaiseWeaponTime;//[Offset: 0x1ec, Size: 0x4]
	float MaxLowerWeaponTime;//[Offset: 0x1f0, Size: 0x4]
	float RaiseWeaponAfterClimbTime;//[Offset: 0x1f4, Size: 0x4]
	float PreSwitchFromBackpackToIdleTime;//[Offset: 0x1f8, Size: 0x4]
	float EquipAttachmentTime;//[Offset: 0x1fc, Size: 0x4]
	float Breath;//[Offset: 0x200, Size: 0x4]
	SkeletalMesh* LowLevelBarrel;//[Offset: 0x204, Size: 0x20]
	SkeletalMesh* Level4Barrel;//[Offset: 0x224, Size: 0x20]
	SkeletalMesh* LowLevelBarrelLod;//[Offset: 0x244, Size: 0x20]
	SkeletalMesh* Level4BarrelLod;//[Offset: 0x264, Size: 0x20]
	float DelayCloseAimTime;//[Offset: 0x284, Size: 0x4]
	float AimChargeUpSpeed;//[Offset: 0x288, Size: 0x4]
	float AimChargeUpDelay;//[Offset: 0x28c, Size: 0x4]
	float AimChargeDownSpeed;//[Offset: 0x290, Size: 0x4]
	float AimChargeDownDelay;//[Offset: 0x294, Size: 0x4]
	float[] AimChargeArray;//[Offset: 0x298, Size: 0xc]
	float AimChargeAdditionalDamage;//[Offset: 0x2a4, Size: 0x4]
	FName AimChargePercentRtpcName;//[Offset: 0x2a8, Size: 0x8]
	SDeviation DeviationInfo;//[Offset: 0x2b0, Size: 0x30]
	CrossHairConfig* CrossHairConfig;//[Offset: 0x2e0, Size: 0x4]
	HitCrossHairConfig* HitCrossHairConfig;//[Offset: 0x2e4, Size: 0x4]
	AutoCrossHairConfig* AutoCrossHairConfig;//[Offset: 0x2e8, Size: 0x4]
	float CrosshairLerpSpeed;//[Offset: 0x2ec, Size: 0x4]
	float TppCrosshairScale;//[Offset: 0x2f0, Size: 0x4]
	class CameraShake* CameraShakeTemplate_TPPCameraMode;//[Offset: 0x2f4, Size: 0x4]
	class CameraShake* CameraShakeTemplate_FPPCameraMode;//[Offset: 0x2f8, Size: 0x4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x2fc, Size: 0x4]
	CameraShakeConfig* CameraShakeTestConfig;//[Offset: 0x300, Size: 0x4]
	float CameraShakeInnerRadius;//[Offset: 0x304, Size: 0x4]
	float CameraShakeOuterRadius;//[Offset: 0x308, Size: 0x4]
	float CameraShakFalloff;//[Offset: 0x30c, Size: 0x4]
	ParticleSystem* ShellDropFX;//[Offset: 0x310, Size: 0x4]
	MuzzleFxStruct MuzzleFxData;//[Offset: 0x314, Size: 0x38]
	Vector ShellDropFXScale;//[Offset: 0x34c, Size: 0xc]
	float RandomRadius;//[Offset: 0x358, Size: 0x4]
	float RandomRadiusFactor;//[Offset: 0x35c, Size: 0x4]
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x360, Size: 0x3c]
	<byte,AkAudioEvent*> SoundDataMap_3P;//[Offset: 0x39c, Size: 0x3c]
	SpecificWeaponSoundConfig[] SpecificSoundConfig;//[Offset: 0x3d8, Size: 0xc]
	ApexAnimNotifySoundMap* SoundMapDataAsset;//[Offset: 0x3e4, Size: 0x20]
	float ShootSoundProtectTime;//[Offset: 0x404, Size: 0x4]
	float ShootCallbackProtectTime;//[Offset: 0x408, Size: 0x4]
	int CheckShootNum;//[Offset: 0x40c, Size: 0x4]
	float CheckShootEnemyRatio;//[Offset: 0x410, Size: 0x4]
	int TraceBulletNum;//[Offset: 0x414, Size: 0x4]
	float TraceBulletEffectTime;//[Offset: 0x418, Size: 0x4]
	float CharacterTraceRadius;//[Offset: 0x41c, Size: 0x4]
	float BulletTraceDistance;//[Offset: 0x420, Size: 0x4]
	float CoolDownTime;//[Offset: 0x424, Size: 0x4]
	WeaponReloadStageConfig[] TacticalReloadStageConfig;//[Offset: 0x428, Size: 0xc]
	WeaponReloadStageConfig[] AllReloadStageConfig;//[Offset: 0x434, Size: 0xc]
	<enum,FName> WeaponAttchSocketMap;//[Offset: 0x440, Size: 0x3c]
	<enum,FName> OpticalAttchSocketMap;//[Offset: 0x47c, Size: 0x3c]
	<enum,ItemDefineID> DefaultAttachList;//[Offset: 0x4b8, Size: 0x3c]
	class AnimInstance* AnimBPClassFPP;//[Offset: 0x4f4, Size: 0x20]
	class AnimInstance* AnimBPClassTPP;//[Offset: 0x514, Size: 0x20]
	Rotator SniperADSRelativeRotation;//[Offset: 0x534, Size: 0xc]
	Vector SniperADSRelativeLocation;//[Offset: 0x540, Size: 0xc]
	WeaponAntiCheatConfig AntiCheatConfig;//[Offset: 0x54c, Size: 0x60]
	<int,WeaponAntiCheatConfig> AntiCheatConfigs;//[Offset: 0x5ac, Size: 0x3c]
	float SafetyScoreCD;//[Offset: 0x5e8, Size: 0x4]
	float HitDataTimeout;//[Offset: 0x5ec, Size: 0x4]
	float HitDataRecordTime;//[Offset: 0x5f0, Size: 0x4]
	int HitDataRecordCount;//[Offset: 0x5f4, Size: 0x4]
	<enum,float> WeaponStateLeaveCondition;//[Offset: 0x5f8, Size: 0x3c]
	ApgameWeaponAttachPosToSocketOverride[] AttachPosToSocketOverrides;//[Offset: 0x634, Size: 0xc]

--------------------------------
Class: ApgameWeaponLogicInstanceDefinition
	FName InstanceName;//[Offset: 0x0, Size: 0x8]
	GameplayTag RegisterTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WeaponComponentOptimizationSettings
	WeaponComConfig Hold;//[Offset: 0x0, Size: 0x5]
	WeaponComConfig Back;//[Offset: 0x5, Size: 0x5]

--------------------------------
Class: WeaponComConfig
	bool Tick_Authority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool Tick_AI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool Tick_Autonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool Tick_Simulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool Tick_OBSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: WeaponAttrModifyConfig
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: WeaponAttrModifyData
	enum AttrType;//[Offset: 0x0, Size: 0x1]
	FString ModifyAttr;//[Offset: 0x4, Size: 0xc]
	enum Op;//[Offset: 0x10, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: LegendWeaponAttrModifyConfigList
	<FString,WeaponAttrModifyConfig> WeaponAttrModifyConfigList;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: ApgameChargeConsumeItem
	ItemDefineID Item;//[Offset: 0x0, Size: 0x10]
	int Num;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: RecoilFactor4D
	Vector2D RecoilFactor;//[Offset: 0x0, Size: 0x8]
	Vector2D RandomFactor;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RecoilPoseFactor
	enum PoseType;//[Offset: 0x0, Size: 0x1]
	RecoilFactor4D FactorADS;//[Offset: 0x4, Size: 0x10]
	RecoilFactor4D FactorNoADS;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 0x4]
	float DeviationShoulderShoot;//[Offset: 0x4, Size: 0x4]
	float ShoulderShootFixFactor;//[Offset: 0x8, Size: 0x4]
	float DeviationShootGain;//[Offset: 0xc, Size: 0x4]
	float DeviationShootFall;//[Offset: 0x10, Size: 0x4]
	float DeviationShootFactor;//[Offset: 0x14, Size: 0x4]
	float DeviationShootMax;//[Offset: 0x18, Size: 0x4]
	float DeviationMaxMove;//[Offset: 0x1c, Size: 0x4]
	float DeviationMoveMultiplier;//[Offset: 0x20, Size: 0x4]
	float DeviationStanceStand;//[Offset: 0x24, Size: 0x4]
	float DeviationStanceCrouch;//[Offset: 0x28, Size: 0x4]
	float DeviationStanceJump;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CrossHairConfig.DataAsset.Object
	WeaponCrossHairPerformData[] CrossHairDatas;//[Offset: 0x20, Size: 0xc]
	float SprintAlpha;//[Offset: 0x2c, Size: 0x4]
	float SprintAlphaFadeSpeed;//[Offset: 0x30, Size: 0x4]
	WeaponCrossHairAimChargeConfig[] AimChargeArray;//[Offset: 0x34, Size: 0xc]
	bool bUseChangeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	LinearColor AimTeamMateColor;//[Offset: 0x44, Size: 0x10]
	LinearColor AimEnemyColor;//[Offset: 0x54, Size: 0x10]
	LinearColor NormalColor;//[Offset: 0x64, Size: 0x10]
	float MaxDetectDistance;//[Offset: 0x74, Size: 0x4]
	float TeamMateDetectInerval;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] CrossHair;//[Offset: 0x0, Size: 0xc]
	LinearColor CrossHairColor;//[Offset: 0xc, Size: 0x10]
	<int,ShoulderCrossHairConfig> ShoulderCrossHairConfig;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 0x14]
	Object* IconObj;//[Offset: 0x14, Size: 0x4]
	float Offset;//[Offset: 0x18, Size: 0x4]
	float Alpha;//[Offset: 0x1c, Size: 0x4]
	float IconRotate;//[Offset: 0x20, Size: 0x4]
	float LogicRotate;//[Offset: 0x24, Size: 0x4]
	Vector2D Scale2D;//[Offset: 0x28, Size: 0x8]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 0x4]
	float U;//[Offset: 0x4, Size: 0x4]
	float V;//[Offset: 0x8, Size: 0x4]
	float UL;//[Offset: 0xc, Size: 0x4]
	float VL;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ShoulderCrossHairConfig
	int ReplaceIndex;//[Offset: 0x0, Size: 0x4]
	WeaponCrossHairIconData ReplaceCrossHair;//[Offset: 0x4, Size: 0x34]

--------------------------------
Class: WeaponCrossHairAimChargeConfig
	Vector2D CrosshairPack;//[Offset: 0x0, Size: 0x8]
	LinearColor CrossHairColor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: HitCrossHairConfig.DataAsset.Object
	BulletHitPerformData BulletHitData;//[Offset: 0x20, Size: 0x90]

--------------------------------
Class: BulletHitPerformData
	CanvasIcon2D NormalIcon;//[Offset: 0x0, Size: 0x14]
	CanvasIcon2D HeadShootIcon;//[Offset: 0x14, Size: 0x14]
	Object* NormalIconObj;//[Offset: 0x28, Size: 0x4]
	Object* HeadShootIconObj;//[Offset: 0x2c, Size: 0x4]
	BulletHitPositionData[] PositionList;//[Offset: 0x30, Size: 0xc]
	float DefaultShowTime;//[Offset: 0x3c, Size: 0x4]
	Vector2D Offset;//[Offset: 0x40, Size: 0x8]
	<uint32,BulletHitData> BulletHitMap;//[Offset: 0x48, Size: 0x3c]
	uint32[] RemovedShootIdList;//[Offset: 0x84, Size: 0xc]

--------------------------------
Class: BulletHitPositionData
	float Offset;//[Offset: 0x0, Size: 0x4]
	float LogicRotate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BulletHitData
	float ShowLeftTime;//[Offset: 0x0, Size: 0x4]
	<byte,bool> PelletHitMap;//[Offset: 0x4, Size: 0x3c]
	Vector2D RandomOffset;//[Offset: 0x40, Size: 0x8]
	float AimPercent;//[Offset: 0x48, Size: 0x4]
	byte AimChargeLevel;//[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: AutoCrossHairConfig.DataAsset.Object
	WeaponCrossHairIconData[] CrossHair;//[Offset: 0x20, Size: 0xc]
	LinearColor WaitColor;//[Offset: 0x2c, Size: 0x10]
	LinearColor ShootColor;//[Offset: 0x3c, Size: 0x10]
	float ScaleBegin;//[Offset: 0x4c, Size: 0x4]
	float ScaleEnd;//[Offset: 0x50, Size: 0x4]
	WeaponCrossHairIconData TipsUI;//[Offset: 0x54, Size: 0x34]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	int ShootState;//[Offset: 0x8c, Size: 0x4]
	bool bTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	float offsetScale;//[Offset: 0x94, Size: 0x4]
	float offsetSpeed;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: CameraShakeConfig.DataAsset.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	float OscillationDuration;//[Offset: 0x24, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x28, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x2c, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x30, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x54, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x78, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x84, Size: 0x4]
	float AnimScale;//[Offset: 0x88, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x8c, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x90, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x94, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x98, Size: 0x4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]

--------------------------------
Class: MuzzleFxStruct
	Vector LocalMuzzelFXScale;//[Offset: 0x0, Size: 0xc]
	Vector ScopeMuzzelFXScale;//[Offset: 0xc, Size: 0xc]
	Vector RemoteMuzzelFXScale;//[Offset: 0x18, Size: 0xc]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x24, Size: 0x10]
	bool bUseMuzzleLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 0x4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 0x4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 0x4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SpecificWeaponSoundConfig
	enum FireMode;//[Offset: 0x0, Size: 0x1]
	int AttachmentID;//[Offset: 0x4, Size: 0x4]
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x8, Size: 0x3c]
	<byte,AkAudioEvent*> SoundDataMap_3P;//[Offset: 0x44, Size: 0x3c]

--------------------------------
Class: WeaponReloadStageConfig
	enum ReloadStage;//[Offset: 0x0, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	bool bInterraptStore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bClearClipBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bAddClipBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	int AddBulletNum;//[Offset: 0xc, Size: 0x4]
	bool bCirculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int CirculationTime;//[Offset: 0x14, Size: 0x4]
	bool bInterraptByFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float FireInterraptTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WeaponAntiCheatConfig
	float HitHeightRatio;//[Offset: 0x0, Size: 0x4]
	float HitRadiusRatio;//[Offset: 0x4, Size: 0x4]
	float ShootHeightRatio;//[Offset: 0x8, Size: 0x4]
	float ShootRadiusRatio;//[Offset: 0xc, Size: 0x4]
	float HeadHitFloorRatio;//[Offset: 0x10, Size: 0x4]
	float HeadHitRadiusRatio;//[Offset: 0x14, Size: 0x4]
	float BodyHitFloorRatio;//[Offset: 0x18, Size: 0x4]
	float BodyHitHeightRatio;//[Offset: 0x1c, Size: 0x4]
	float BodyHitRadiusRatio;//[Offset: 0x20, Size: 0x4]
	float HitPlayerScaleRatio;//[Offset: 0x24, Size: 0x4]
	float MoveSpeedScaleRatio;//[Offset: 0x28, Size: 0x4]
	float ShootRateCheckMulCoff;//[Offset: 0x2c, Size: 0x4]
	int ValidBulletNumTolerance;//[Offset: 0x30, Size: 0x4]
	float ValidBulletCheckMulCoff;//[Offset: 0x34, Size: 0x4]
	float ShootForWardAngle;//[Offset: 0x38, Size: 0x4]
	float PlayerForWardAngleFPP;//[Offset: 0x3c, Size: 0x4]
	float PlayerForWardAngleTPP;//[Offset: 0x40, Size: 0x4]
	float ShootForWardDitance;//[Offset: 0x44, Size: 0x4]
	int ShootForWardCounts;//[Offset: 0x48, Size: 0x4]
	float ShootDistanceRadiusRatio;//[Offset: 0x4c, Size: 0x4]
	int ShootImpactPointCounts;//[Offset: 0x50, Size: 0x4]
	int ShootNoViewMoveCounts;//[Offset: 0x54, Size: 0x4]
	float ShootAutoAimAlwAngle;//[Offset: 0x58, Size: 0x4]
	CurveFloat* ShootAutoAimAngleCurve;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ApgameWeaponAttachPosToSocketOverride
	enum Pos;//[Offset: 0x0, Size: 0x1]
	FName SocketName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShootWeapon.Weapon.Actor.Object
	ApexSoundSpeakerComponent* ApexSoundSpeakerComponent;//[Offset: 0x25c, Size: 0x4]
	CrossHairLogicObject* CrossHairComponent;//[Offset: 0x260, Size: 0x4]
	WeaponAntiCheatLogicObject* WeaponAntiCheatComponent;//[Offset: 0x264, Size: 0x4]
	WeaponDisruptorLogicObject* WeaponDisruptorComponent;//[Offset: 0x268, Size: 0x4]
	WeaponBallisticLogicObject* WeaponBallisticComponent;//[Offset: 0x26c, Size: 0x4]
	TraceBulletLogicObject* TraceBulletComponent;//[Offset: 0x270, Size: 0x4]
	HeatSystemLogicObject* HeatSystemComponent;//[Offset: 0x274, Size: 0x4]
	ShootWeaponEffectLogicObject* ShootWeaponEffectComponent;//[Offset: 0x278, Size: 0x4]
	WeaponReloadLogicObject* WeaponReloadComponent;//[Offset: 0x27c, Size: 0x4]
	ShootWeaponLogicObject* ShootWeaponComponent;//[Offset: 0x280, Size: 0x4]
	BulletEffectConfig DefaultBulletEffectConfig;//[Offset: 0x284, Size: 0xe0]
	bool WasLastShootCharged();// 0x27563cc
	void ToggleZoomScale(bool bOB);// 0x27566b0
	void StopFireWeapon();// 0x2756444
	bool StopFireFilter();// 0x275641c
	void StartReload();// 0x2755ca0
	void SetSpecialBulletUse(bool _bUseSpecialBullet);// 0x2755600
	void SetMaxBulletNumInOneClip(int Num);// 0x27557b0
	void SetExtraBulletNum(int _ExtraBulletNum);// 0x2755498
	void SetExtendedMagQuality(int Quality);// 0x2755538
	void SetCurSpecialBulletNum(int Num, enum ChangeReason, bool bToClient);// 0x27556a8
	void SetBulletNumInClip(int Num, enum ChangeReason, bool NeedToClient, bool NeedToServer);// 0x2755850
	void ReloadImmediately(bool bCostBullet);// 0x27559d4
	void NotifyResetValidBulletNumToAntiCheat();// 0x2754db0
	void NotifyReloadToAntiCheat();// 0x2754dc4
	bool JudgeCanReload();// 0x2755a7c
	bool JudgeBulletFull();// 0x2755a54
	bool IsOverHeat();// 0x275632c
	bool HasMultipleScaleScope();// 0x2756458
	bool HasEquippedHighMagScopeAndADS();// 0x2756480
	float GetWeaponBodyLength();// 0x27550a8
	FName GetVerifyScopeSocketNameFromEntity();// 0x2755210
	int GetUnEquipMagBulletNum();// 0x2755470
	float GetTraceDistanceFromEntity();// 0x27552a0
	bool GetSpecialBulletUse();// 0x27555d8
	int GetSpecialBulletNumInClipSync();// 0x2755420
	int GetSingleShootPelletNum();// 0x27553d0
	enum GetSightTypeRuntime();// 0x2754dd8
	FName GetShellDropSocketNameFromEntity();// 0x27552c8
	double GetServerTimeFromClient();// 0x2754ed0
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex);// 0x2754fdc
	float GetReloadTimePerkRatio();// 0x2755b40
	float GetReloadAnimStartPercent(bool bStoredOrCurrent);// 0x2755bf0
	float GetReferenceDistance();// 0x2754ef8
	float GetRangeModifier();// 0x2754f20
	Transform GetMuzzleTransformConsiderBarrelStab();// 0x27550d0
	Transform GetMuzzleTransform();// 0x2755158
	FName GetMuzzleSocketNameFromEntity();// 0x2755390
	FText GetMinScale();// 0x27564d0
	float GetMaxValidHitTimeFromEntity();// 0x2755278
	FText GetMaxScale();// 0x27565c0
	int GetMaxHeat();// 0x2754d88
	int GetMaxChargeEnergy();// 0x27563a4
	int GetMaxBulletNumInOneClip();// 0x2755828
	float GetLensDamageBase();// 0x2754f8c
	bool GetIsMaxScale();// 0x2756688
	bool GetIsAlternantMuzzleSocketActiveFromEntity(bool bThinkBarrel);// 0x2755308
	bool GetIsAllowShoulderShoot();// 0x27562dc
	int GetIntMaxScale();// 0x2756598
	WeaponHitPartCoff GetHitPartCoff();// 0x2754f48
	Vector2D GetFireRecoilTarget();// 0x2754e00
	Vector2D GetFireRecoilRandom();// 0x2754e40
	WeaponFireModeInfo[] GetFireModeList();// 0x2755d4c
	int GetFireModeIndex();// 0x2755d24
	int GetExtraBulletNum();// 0x2755510
	int GetExtendedMagQuality();// 0x27555b0
	int GetCurSpecialBulletNum();// 0x2755680
	int GetCurrentHeat();// 0x27563f4
	int GetCurrentEquipSight();// 0x27564a8
	float GetCurReloadTime(bool bIncludePerk);// 0x2755b68
	enum GetCurReloadMethod();// 0x2755c78
	WeaponFireModeInfo GetCurFireModeInfo();// 0x2755db8
	enum GetCurFireMode();// 0x2755e28
	BulletEffectConfig GetCurBulletEffectConfig(out bool bGetSuccess);// 0x2755e50
	float GetCrossHairBurstSpeed();// 0x2754ea8
	float GetCrossHairBurstIncreaseSpeed();// 0x2754e80
	bool GetClipHasInfiniteBullets();// 0x2755cb4
	int GetChargeTime();// 0x275637c
	int GetChargeItemNumToConsume();// 0x2756354
	ItemDefineID GetBulletTypeFromEntity();// 0x2755cdc
	float GetBulletRangeEntity();// 0x2755250
	int GetBulletNumInClipSync();// 0x2755448
	int GetBulletNumInClipFake();// 0x27553f8
	int GetBulletNumInClip();// 0x27559ac
	float GetBulletFireSpeedFromEntity();// 0x27551e8
	float GetBaseImpactDamageEntity();// 0x2754fb4
	int GetAvailableBulletsNumInBackpack(bool bExcludeInfiniteBullet);// 0x2755ab8
	void FixBulletNumWithValideData();// 0xfd338c
	void ClientReportBulletNumNoEnough();// 0x2755aa4
	bool CheckDisruptorCanCharge();// 0x2756304

--------------------------------
Class: CrossHairLogicObject.ApgameWeaponLogicObject.Object
	CrossHairConfig* CrossHairConfig_Runtime;//[Offset: 0x50, Size: 0x4]
	HitCrossHairConfig* HitCrossHairConfig_Runtime;//[Offset: 0x54, Size: 0x4]
	AutoCrossHairConfig* AutoCrossHairConfig_Runtime;//[Offset: 0x58, Size: 0x4]
	ApexCharacterBase* CrossHairHitCharacter;//[Offset: 0x5c, Size: 0x4]
	void OnWeaponShoot();// 0x2594588
	void DrawWeaponCrosshair(HUDWidgetBase* WeaponHudWidget);// 0x106cf10

--------------------------------
Class: HUDWidgetBase.Object
	bool EnableSWidgetDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float DesignedResolution;//[Offset: 0x24, Size: 0x4]
	Vector2D Position;//[Offset: 0x28, Size: 0x8]
	Vector2D ScreenPosition;//[Offset: 0x30, Size: 0x8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float Opacity;//[Offset: 0x3c, Size: 0x4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	ApexGameHUD* HUDOwner;//[Offset: 0x44, Size: 0x4]
	ApexPlayerController* APPlayerController;//[Offset: 0x48, Size: 0x4]
	Pawn* CharacterOwner;//[Offset: 0x4c, Size: 0x4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1]
	float LastRenderTime;//[Offset: 0x54, Size: 0x4]
	Vector2D RenderPosition;//[Offset: 0x58, Size: 0x8]
	Vector2D RenderSize;//[Offset: 0x60, Size: 0x8]
	float RenderScale;//[Offset: 0x68, Size: 0x4]
	Vector2D CanvasCenter;//[Offset: 0x6c, Size: 0x8]
	Canvas* Canvas;//[Offset: 0x74, Size: 0x4]
	Canvas* DebugCanvas;//[Offset: 0x78, Size: 0x4]
	RenderObjectList(FieldPathProperty)[] RenderObjectList;//[Offset: 0x7c, Size: 0xc]
	void SWidgetDraw(float DeltaTime);// 0x264e71c
	bool ShouldSWidgetDraw(bool bShowScores);// 0x264e79c
	bool ShouldDraw(bool bShowScores);// 0x264e68c
	void SetHidden(bool bIsHidden);// 0x264e82c
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x264d20c
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x264d474
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x264cbec
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x264cfa4
	Vector2D ProjectToCanvasPos(Vector WorldPos, Actor* WorldActor);// 0x264cb1c
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, float Depth, bool ToDebugCanvas);// 0x264dab0
	Vector2D DrawTextAPEX(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x264df84
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x264d684
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x264d5c8
	void Draw(float DeltaTime);// 0x24ab390
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x264e5f0

--------------------------------
Class: ApexGameHUD.HUD.Actor.Object
	bool bShowEnemyHeadName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	bool bShowEnemyHeadHp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1]
	bool bShowTeammateHeadName_BR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 0x1]
	bool bShowTeammateHeadHp_BR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 0x1]
	bool bShowTeammateHeadName_MP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	bool bShowTeammateHeadHp_MP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	int HeadNameMaxShowCount;//[Offset: 0x29c, Size: 0x4]
	bool bShowEnemyHeadName_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bShowEnemyHeadHp_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bShowTeammateHeadName_BR_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	bool bShowTeammateHeadHp_BR_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3, Size: 0x1]
	bool bShowTeammateHeadName_MP_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	bool bShowTeammateHeadHp_MP_RT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1]
	bool bDiffCharacterNameColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 0x1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x2a8, Size: 0xc]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x2b4, Size: 0xc]
	bool IsOpenAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool IsOpenADSMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	bool ArcUseWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1]
	<uint32,HeadNamePool> HeadNameMap;//[Offset: 0x2c8, Size: 0x3c]
	<FName,Widget*> WidgetMap;//[Offset: 0x318, Size: 0x3c]
	delegate OnTeamInfoChange;//[Offset: 0x35c, Size: 0xc]
	delegate OnHealthInfoChange;//[Offset: 0x368, Size: 0xc]
	delegate OnKnockdownShiledChange;//[Offset: 0x374, Size: 0xc]
	delegate OnLifeNumber;//[Offset: 0x38c, Size: 0xc]
	delegate OnPlayerKillOrAssist;//[Offset: 0x398, Size: 0xc]
	delegate OnVisualSoundTrigger;//[Offset: 0x3a4, Size: 0xc]
	delegate OnTeamInfoTotalChange;//[Offset: 0x3b0, Size: 0xc]
	delegate OnPlayerCompleteDie;//[Offset: 0x3bc, Size: 0xc]
	delegate OnAutonomousPlayerStateChange;//[Offset: 0x3c8, Size: 0xc]
	delegate OnPlayerHurt;//[Offset: 0x3d4, Size: 0xc]
	delegate OnPlayerIconClicked;//[Offset: 0x3e0, Size: 0xc]
	delegate OnPlayerEmoteRefresh;//[Offset: 0x3ec, Size: 0xc]
	delegate OnTurnTableRefresh;//[Offset: 0x3f8, Size: 0xc]
	FString GameHUDSuffix;//[Offset: 0x418, Size: 0xc]
	FName SmallMapUIName;//[Offset: 0x424, Size: 0x8]
	Widget* SmallMapUI;//[Offset: 0x42c, Size: 0x4]
	Widget* NavigatorPanelUI;//[Offset: 0x430, Size: 0x4]
	bool bMapRotationEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	InGameUIMgrComponent* inGameUIMgr;//[Offset: 0x474, Size: 0x4]
	void ShowViewportCanvas();// 0xfd338c
	void SetShowEnemyHeadHp_RT(bool Enable);// 0x245996c
	void SetRedPointSizeAndPos(Widget* NavigatorPanel, float HalfLength, Vector2D InPos, float AngleLength);// 0x2459038
	void SetMiniMapSizeAndPos(Vector2D InSize, Vector2D InPos, float DistanceScale, float RenderScale);// 0x2459180
	void SetForbiddenCrossHairEnable(bool Enable);// 0x24597b0
	void SetDrawHUD(bool Visible);// 0x2459848
	void SetCrossHairVisible(bool Visible);// 0x24598c8
	void RemoveNameShowPool(UserWidget* TargetWidget);// 0x2459a6c
	void PopCanvasSafeZone();// 0x2459944
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x24592c8
	void OnAsyncLoadingFinished();// 0x2459958
	InGameUIMgrComponent* GetUIMgr();// 0x2459010
	FString GetGameHUDSuffix();// 0x24594cc
	GameHUDItemBase* GetGameHUDItemByType(enum ItemType);// 0x245944c
	bool GetForbiddenCrossHairEnable();// 0x2459794
	bool GetDrawHUD();// 0x245982c
	bool CheckNameShowByPool(uint32 PlayerKey, bool bEnemy, float DistanceSq, UserWidget* TargetWidget);// 0x2459ae4
	bool CheckNameShow(uint32 PlayerKey);// 0x24599ec
	void AddTexture(int Index, Actor* Target, Texture2D* Texture, out const Vector2D TexturePosition, out const Vector2D TextureSize, float DrawOpacity, float LifeTime);// 0x2459560

--------------------------------
Class: InGameUIMgrComponent.ActorComponent.Object
	UserWidget* UIRoot;//[Offset: 0xac, Size: 0x4]
	<FString,InstanceArray> UILayer;//[Offset: 0xec, Size: 0x3c]
	<FString,APInGameUserWidget*> UIMap;//[Offset: 0x128, Size: 0x3c]
	void TickModule(float DeltaTime);// 0x251d7e0
	void ShutdownModule();// 0x23ec0ec
	bool ShowUI(FString UIType);// 0x2660e24
	void SetUIRoot(UserWidget* Root);// 0xf52f6c
	bool SetParentInRoot(FString UIType, APInGameUserWidget* NewWidget);// 0x2660b60
	bool SetMaxZorderByDelete(FString Layer, APInGameUserWidget* pWidget);// 0x26604b0
	int SetMaxZorderByAdd(FString Layer);// 0x2660594
	bool RecordUILayer(FString UIType, APInGameUserWidget* pWidget, bool IsExist);// 0x2660a30
	void PushZorderFromLua(FString Layer, const int NewOrder, bool isAddOrDelete);// 0x26606d4
	void PushUIConfig(FString UIType, FString Layer, FString BpPath);// 0x26607fc
	APInGameUserWidget* OpenUI(FString UIType, bool IsMultiple);// 0x2660fa0
	void InitModule();// 0x23ec124
	bool HideUI(FString UIType);// 0x2660d84
	APInGameUserWidget* GetWidgetByPath(FString UIType);// 0x2660c44
	APInGameUserWidget* GetUI(FString UIType);// 0x2660ce4
	int GetMaxZorderToLua(FString Layer);// 0x2660634
	void CloseUI(FString UIType, APInGameUserWidget* pWidget);// 0x2660ec4
	bool ClearRecordUILayer(FString UIType, APInGameUserWidget* pWidget);// 0x266094c
	bool CheckIsInitSuccess();// 0x25f3394

--------------------------------
Class: APInGameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	Widget* ParentWidget;//[Offset: 0x294, Size: 0x4]
	<FString,APInGameUserWidget*> SubUIMap;//[Offset: 0x298, Size: 0x3c]
	InGameUIMgrComponent* UIMgr;//[Offset: 0x2d4, Size: 0x4]
	void SetUIMgr(InGameUIMgrComponent* _UIMgr, FString _UIType);// 0x24e6c14
	void SetParentWidget(Widget* _PrentWidget);// 0x24e6cf0
	void SetCustomVisible(enum VisibilityType);// 0x24e6dd0
	Widget* GetParentWidget();// 0x24e6d70
	bool GetCustomVisible();// 0x24e6da0
	void CloseUI();// 0x23ec0ec
	APInGameUserWidget* AddSubUI(FString Parent, FString UIType, FString UIName, bool IsGenerate);// 0x24e6a6c

--------------------------------
Class: APUserWidget.UserWidget.Widget.Visual.Object
	bool bBlockTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	int BlueprintNumber;//[Offset: 0x1cc, Size: 0x4]
	<FName,FName> RegisterNodeNameMap;//[Offset: 0x1d0, Size: 0x3c]
	<FName,enum> GamepadNodeNameToActionTypeMap;//[Offset: 0x20c, Size: 0x3c]
	bool bEnableGamepadProcessor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	FName GamepadWidgetName;//[Offset: 0x24c, Size: 0x8]
	<FName,Widget*> CacheNodeWidgetMap;//[Offset: 0x258, Size: 0x3c]
	void OpenGamepadProcessor();// 0x23ec0b4
	void CloseGamepadProcessor();// 0x23ec0d0

--------------------------------
Class: InstanceArray
	APInGameUserWidget*[] Datas;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameHUDItemBase.ActorComponent.Object
	void TryRefreshUI();// 0x2405154
	GameFlowHUDMgr* GetOwnerHUDMgr();// 0x25da5f4

--------------------------------
Class: GameFlowHUDMgr.ActorComponent.Object
	class GameFlowHUDItemBase[] ConfigGameFlowHUDItems;//[Offset: 0xa8, Size: 0xc]
	GameFlowHUDItemBase*[] InstancedGameFlowHUDItems;//[Offset: 0xc8, Size: 0xc]
	void TryRefreshUI();// 0x25dabac
	bool IsPlayerReconnected();// 0x25daadc
	bool IsPlayerHasPawnState(enum State);// 0x25dab04
	ApexCharacter* GetViewedCharacter();// 0x25daab4
	PawnStateManager* GetPlayerPawnStateManager();// 0x25dab84
	GameStateCommonInfo* GetGameStateCommonInfo();// 0x25daa64
	ApexGameState* GetApexGameState();// 0x25daa8c

--------------------------------
Class: GameFlowHUDItemBase.Object
	bool EnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float UpdateTimerInterval;//[Offset: 0x20, Size: 0x4]
	class UserWidget* EffectUI;//[Offset: 0x30, Size: 0x4]
	void TryRefreshUI();// 0x106b010
	void OnTickBP(float DeltaSeconds);// 0x2ce6f18
	void OnGameFlowEndBP();// 0x2ce6f18
	void OnGameFlowBeginBP();// 0x2ce6f18
	GameFlowHUDMgr* GetOwnerHUDMgr();// 0x25da5f4

--------------------------------
Class: PawnStateManager.ActorComponent.Object
	FName PawnStateRelationTableName;//[Offset: 0xa8, Size: 0x8]
	PawnStateManagerTableMap* PawnStateManagerTableMap;//[Offset: 0xb0, Size: 0x4]
	PawnStateDataAsset* PawnStateConfig;//[Offset: 0xb4, Size: 0x4]
	ApexCharacterBase* PawnStateCharacterBase;//[Offset: 0xb8, Size: 0x4]
	ApexCharacterMovementComponent* PawnStateMovementComponent;//[Offset: 0xbc, Size: 0x4]
	ApexGameState* PawnStateGameState;//[Offset: 0xc0, Size: 0x4]
	uint64 StateMask;//[Offset: 0x148, Size: 0x8]
	<enum> MainHandStates;//[Offset: 0x150, Size: 0x3c]
	<enum,enum> PawnStateOverrideMap;//[Offset: 0x18c, Size: 0x3c]
	uint64 ReconnectedStateMask;//[Offset: 0x1c8, Size: 0x8]
	uint64 DebugServerStateMask;//[Offset: 0x1d0, Size: 0x8]
	bool IgnoreStateTimeoutCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	delegate OnStateAdded;//[Offset: 0x2c4, Size: 0xc]
	delegate OnStateRemoved;//[Offset: 0x2d0, Size: 0xc]
	delegate OnPoseStateChanged;//[Offset: 0x2dc, Size: 0xc]
	delegate OnMovementModeChanged;//[Offset: 0x2e8, Size: 0xc]
	delegate OnPostStateChanged;//[Offset: 0x2f4, Size: 0xc]
	delegate OnOverrideStateChanged;//[Offset: 0x300, Size: 0xc]
	void ServerSyncOverrideStates(const OverrideStateSyncData[] SynDataList);// 0x26dbb60
	void ServerReportStatePath(uint64 Mask, const StateBlockMap[] StateBlockMaps, const StatePath[] StatePath);// 0x26db850
	void ServerReportSimpleState(uint64 Mask, uint64 BlockMask, const enum[] BlockOverrideState, uint64 RemoveMask, const enum[] RemoveOverrideState);// 0x26db664
	void ServerReportBlockState(enum State);// 0x23de15c
	void S2CSyncStateMask(uint64 ServerStateMask);// 0x269be90
	void RequestSyncOverrideState();// 0x240523c
	void RemoveMainHandState(enum RemovedState);// 0x26dbc90
	void OnRep_StateMask(uint64 PrevStateMask);// 0x26db9dc
	void OnRep_ReconnectedStateMask();// 0x26db9c8
	void IgnoreStateTimeout(bool bIgnore);// 0x26db5e4
	void ClientSyncOverrideStates(const OverrideStateSyncData[] SynDataList);// 0x26dbbf8
	void C2SSyncStateMask(uint64 AutonomousStateMask);// 0x26dba58
	void C2SReliableSyncStateMask(uint64 AutonomousStateMask);// 0x25b0788
	void BrocastSyncStateMask(uint64 ServerStateMask);// 0x26dbadc
	void BPSyncStateMask();// 0x26dbd90
	void AddMainHandState(enum NewState);// 0x26dbd10

--------------------------------
Class: PawnStateManagerTableMap.BaseGameflowSubsystem.Object
	FString PawnStateConfig;//[Offset: 0x28, Size: 0xc]
	PawnStateDataAsset* PawnStateDataAsset;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: BaseGameflowSubsystem.Object
	void OnApexCharacterBeginPlayOrEndPlay(ApexCharacter* InApexCharacter, bool bBeginPlay);// 0x252b600

--------------------------------
Class: PawnStateDataAsset.DataAsset.Object
	bool bLogDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bLogAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bLogAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool bLogSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	enum[] ServerControlStates;//[Offset: 0x24, Size: 0xc]
	float AutonomousSyncInterval;//[Offset: 0x30, Size: 0x4]
	float StateLogInterval;//[Offset: 0x34, Size: 0x4]
	float DefaultStateTimeOutWarningTime;//[Offset: 0x38, Size: 0x4]
	<enum> NoWarningState;//[Offset: 0x3c, Size: 0x3c]
	<enum,float> ForceStateLeaveCondition;//[Offset: 0x78, Size: 0x3c]

--------------------------------
Class: ApexGameState.GameState.GameStateBase.Info.Actor.Object
	enum GameViewType;//[Offset: 0x228, Size: 0x1]
	int MaxCampNum;//[Offset: 0x22c, Size: 0x4]
	int MaxPlayerNumInGame;//[Offset: 0x230, Size: 0x4]
	int MaxPlayerNumInTeam;//[Offset: 0x234, Size: 0x4]
	int ValidRealPlayerNum;//[Offset: 0x238, Size: 0x4]
	int MaxRealPlayerNum;//[Offset: 0x23c, Size: 0x4]
	class MsgCenter* MsgCenterClass;//[Offset: 0x27c, Size: 0x4]
	MsgCenter* ServerMsgCenter;//[Offset: 0x280, Size: 0x4]
	bool bEnableAnimationBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	GameStatisticsManager* GameStatisticsManager;//[Offset: 0x28c, Size: 0x4]
	GameEndDataReportComponent* GameEndDataReportComponent;//[Offset: 0x290, Size: 0x4]
	ProxyMovementManager* ProxyMovementManager;//[Offset: 0x294, Size: 0x4]
	GameSyncSettingComponent* GameSyncSettingComponent;//[Offset: 0x298, Size: 0x4]
	BattlefieldMessageComponent* BattlefieldMessageComp;//[Offset: 0x29c, Size: 0x4]
	GameInitControllerComponent* GameInitController;//[Offset: 0x2a0, Size: 0x4]
	SoftObjectPath InitDataAsset;//[Offset: 0x2a4, Size: 0x14]
	ApexGameCreditScoreRatingManager* CreditScoreRatingManager;//[Offset: 0x2b8, Size: 0x4]
	ApexSequenceComponent* SequenceComponent;//[Offset: 0x2bc, Size: 0x4]
	SelectLegendComponentBase* GameStateSelectLegendComp;//[Offset: 0x2c0, Size: 0x4]
	GameStateInGameRegionComponent* GameStateInGameRegionComponent;//[Offset: 0x2c4, Size: 0x4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x2c8, Size: 0x4]
	ApexPlayerState*[] DefenderTeam;//[Offset: 0x2cc, Size: 0xc]
	ApexPlayerState* Defender;//[Offset: 0x2d8, Size: 0x4]
	RTPCParamInfo[] CustomShootSoundRTPCParamList;//[Offset: 0x2dc, Size: 0xc]
	class MiniMapManager* MiniMapManagerClass;//[Offset: 0x2e8, Size: 0x4]
	bool ShowKillAssistTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool bShowBulletAs999;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	enum ServerSpawnMethod;//[Offset: 0x2ee, Size: 0x1]
	enum ClientSpawnMethod;//[Offset: 0x2ef, Size: 0x1]
	FString GameModeID;//[Offset: 0x2f0, Size: 0xc]
	FString GameModeZoneID;//[Offset: 0x2fc, Size: 0xc]
	bool bForbidVisualSoundByBucket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bForbidVisualSoundByCircleWave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	int ForbidVisualSoundWaveNumber;//[Offset: 0x314, Size: 0x4]
	GameModeStageInfo GameModeStageInfo;//[Offset: 0x318, Size: 0x10]
	ZiplineManager* ZiplineManager;//[Offset: 0x328, Size: 0x4]
	ApexTrain* Train;//[Offset: 0x370, Size: 0x4]
	ConveyorBeltCamp* ConveyorCamp;//[Offset: 0x374, Size: 0x4]
	ParticleEffectFactory* AParticleEffectFactoryInstance;//[Offset: 0x378, Size: 0x4]
	class ParticleEffectFactory* ParticleEffectFactoryClass;//[Offset: 0x37c, Size: 0x4]
	AudioEffectManager* AudioEffectManagerInstance;//[Offset: 0x380, Size: 0x4]
	class AudioEffectManager* AudioEffectManagerClass;//[Offset: 0x384, Size: 0x4]
	GlobalSpeakerComponent* GlobalSoundPlayer;//[Offset: 0x38c, Size: 0x4]
	AudioRegionMgrComponent* GlobalAudioRegionMgr;//[Offset: 0x390, Size: 0x4]
	GameStatisticsReportComponent* GameStatisticsReportComponent;//[Offset: 0x394, Size: 0x4]
	BGMManager* BGMManagerInstance;//[Offset: 0x398, Size: 0x4]
	class BGMManager* BGMManagerClass;//[Offset: 0x39c, Size: 0x4]
	EffectLoaderManager* EffectLoaderManagerInstance;//[Offset: 0x3a0, Size: 0x4]
	GameStateCommonInfo* GameStateCommonInfo;//[Offset: 0x3a4, Size: 0x4]
	ApexRespawnBeacon*[] ApexRespawnBeaconArray;//[Offset: 0x3a8, Size: 0xc]
	ApexHeatShield*[] ApexHeatShieldArray;//[Offset: 0x3b4, Size: 0xc]
	SurveyBeacon*[] ApexSurveyBeaconArray;//[Offset: 0x3c4, Size: 0xc]
	int64[] ScoutCharacterCount;//[Offset: 0x3d0, Size: 0xc]
	int[] NextWhiteCircleForCurrentWave;//[Offset: 0x3dc, Size: 0xc]
	int SurveyBeaconGoal;//[Offset: 0x3e8, Size: 0x4]
	int DispersionDistance;//[Offset: 0x3ec, Size: 0x4]
	<class InGameSingletonObject,InGameSingletonObject*> MapInGameObjectClass2Instanced;//[Offset: 0x418, Size: 0x3c]
	CommonSignMgr* CommonSignMgr;//[Offset: 0x454, Size: 0x4]
	int[] ActionFilterList;//[Offset: 0x458, Size: 0xc]
	LootDronesPathsDataAsset* LootDronesPathsDataAsset;//[Offset: 0x464, Size: 0x4]
	int ReviveFlowID;//[Offset: 0x468, Size: 0x4]
	<int,Actor*> KnockdownShieldMap;//[Offset: 0x46c, Size: 0x3c]
	GameStatisticsSetting GameStatisticsSetting;//[Offset: 0x4a8, Size: 0x1c]
	SurfaceGridManager* SurfaceGridManager;//[Offset: 0x4c4, Size: 0x4]
	<class ApexAnimNotifySound,ApexAnimNotifySound*> AnimNotifyMap;//[Offset: 0x4c8, Size: 0x3c]
	GameStateMapComponent* MapComponent;//[Offset: 0x504, Size: 0x4]
	bool bMapUseClientOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	int64 RespawnDeadlineTime;//[Offset: 0x510, Size: 0x8]
	CharacterAnimationIntKey[] EditAnimPreLoad;//[Offset: 0x518, Size: 0xc]
	bool bOpenFriendOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	bool bOpenEnemyOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1]
	bool bOpenEnemyOutline_Addition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 0x1]
	int EnemyOutlineID_Addition;//[Offset: 0x528, Size: 0x4]
	bool bRemoveEnemyOutlinePerformDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]
	bool bEnablePickUpOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 0x1]
	<int> ForcePickUpOutlineItemSet;//[Offset: 0x530, Size: 0x3c]
	bool bIsShowInvincibleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1]
	bool bOverridePlayerDeadDelayHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 0x1]
	float OverrideDelayHideDuration;//[Offset: 0x570, Size: 0x4]
	bool bUsingCacheCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1]
	enum CacheCameraMode;//[Offset: 0x575, Size: 0x1]
	bool bShowPickUpEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 0x1]
	bool bEnablePickItemPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x577, Size: 0x1]
	bool bShowPingTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	bool bOverrideAutoPickUpSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool bOverrideEnableAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	bool bEnableTDMTeamColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57b, Size: 0x1]
	SkillConfigDataAsset* SkillConfigOnGameMode;//[Offset: 0x57c, Size: 0x4]
	DsFunctionConfig[] DsFunctionConfigArray;//[Offset: 0x5d4, Size: 0xc]
	GameStateAirDropMgr* AirDropStateMgr;//[Offset: 0x630, Size: 0x4]
	RadiationCircleStateComponent* RadiationCircleState;//[Offset: 0x634, Size: 0x4]
	GamblingMachine* GamblingMachine;//[Offset: 0x638, Size: 0x4]
	bool bDoNotNeedReleaseSelectLegendSceneInPostInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 0x1]
	bool UseSurveyBeacon(int TeamID);// 0x2467118
	bool UseRespawnBeacon(int Index);// 0x2467198
	bool ShouldTakeDamage(float Damage, byte CurDamageType, Controller* EventInstigator, Actor* DamageCauser, ApexCharacter* Victim);// 0x2467ac8
	void SetMaxCampNum(int NewMaxCampNum);// 0x2467e5c
	void SetGameViewType(enum NewGameViewType);// 0x2467ed4
	void SetForbidVisualSoundByCircleWave(bool NewForbid);// 0x2467934
	void SetForbidVisualSoundByBucketID(bool NewForbid);// 0x24679b4
	void ResetNextWhiteCircleForCurrentWave();// 0x2467024
	void ReportMultiData(FString FlowName, out const FString[] DataJsonArray);// 0x2ce6f18
	void RemoveKnockdownShield(int InPlayerKey);// 0x2466b8c
	void RemoveActionFilterID(int ActionFilterID);// 0x2466cd4
	void PushEvent(int EventID, Actor* RelevantActors, Controller* Controller);// 0x2467ce4
	void OnWaveStart();// 0x2467104
	void OnRepLootDronesPathsDataAsset();// 0x2466cc0
	void OnRep_ScoutCharacterCount(out const int64[] OriginValue);// 0x2466ee4
	void OnRep_NextWhiteCircleForCurrentWave(out const int[] OriginValue);// 0x2466f84
	void OnRep_GameModeZoneID();// 0x2467a84
	void OnRep_GameModeStageInfo(GameModeStageInfo OldStageInfo);// 0x2467478
	void OnRep_GameModeID_Lua();// 0x2ce6f18
	void OnRep_GameModeID();// 0x2467a98
	void OnRep_DefenderTeam();// 0x2467aac
	void OnRep_Defender();// 0x2ce6f18
	void OnRep_bForbidVisualSoundByCircleWave();// 0x2467a70
	void OnRep_bForbidVisualSoundByBucket();// 0x2467a70
	void OnPlayerValid(uint32 PlayerKey);// 0x2467de4
	void OnEffectLoaderManagerBPLoaded(SoftObjectPath BpPath);// 0x2467218
	void NotifyRemoteURLChanged(FString IP, int Port);// 0x2466a30
	bool IsForbidVisualSound();// 0x2467a34
	Actor* GMGetClosestLootDrones();// 0x24673f8
	ZiplineManager* GetZiplineManager();// 0x2467420
	Vector GetTrainStationLocation(bool bCurrentStation);// 0x2467310
	FString GetSubModeID();// 0x24675bc
	SelectLegendComponentBase* GetSelectLegendComp();// 0x2467c68
	RadiationCircleStateComponent* GetRadiationCircleState();// 0x24669e0
	InGameSingletonObject* GetOrAddInGameSingletonObject(class InGameSingletonObject InGameObjectClass);// 0x2466e64
	FString GetMainModeID();// 0x2467650
	Actor* GetKnockdownShield(int InPlayerKey);// 0x2466b0c
	GameStateInGameRegionComponent* GetInGameRegionComponent();// 0xf54664
	GameStatisticsManager* GetGameStatisticsManager();// 0x2467cb4
	ApexGameSettings GetGameSetting();// 0x24676e4
	FString GetGameModeZoneID();// 0x24674f4
	GameModeStageInfo GetGameModeStageInfo();// 0x246743c
	FString GetGameModeID();// 0x24677a0
	GameEndDataReportComponent* GetGameEndDataReportComponent();// 0x2467c84
	enum GetCurrentStageType();// 0x246745c
	ConveyorBeltCamp* GetConveyorCamp();// 0x24673a8
	CommonSignMgr* GetCommonSignMgr();// 0x2466e3c
	ApexTrain* GetApexTrain();// 0x24673d0
	GameStateAirDropMgr* GetAirDropStateMgr();// 0x2466a08
	bool CanSeeBeacon(int TeamID);// 0x2467038
	int ApexInGameEncryptTest(Object* WorldContext, int TargetInt, float TargetFloat);// 0x2467834
	void AddKnockdownShield(int InPlayerKey, Actor* InActor);// 0x2466c04
	void AddActionFilterID(int ActionFilterID);// 0x2466d4c
	void ActionFilter_ApplyActionsByID(int ID);// 0x2466dc4

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x200, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x208, Size: 0x8]
	int ElapsedTime;//[Offset: 0x210, Size: 0x4]
	void OnRep_MatchState();// 0x258857c
	void OnRep_ElapsedTime();// 0x46a5c7c

--------------------------------
Class: MsgCenter.Object
	<enum,MsgCenterConfig> Config;//[Offset: 0x1c, Size: 0x3c]
	int MaxShowNum;//[Offset: 0x58, Size: 0x4]
	float ShowTime;//[Offset: 0x5c, Size: 0x4]
	void PushEvent(int EventID, Actor* RelevantActors, Controller* Controller, bool bHasAutonomousPlayed, bool bHasCDCheckedProbability);// 0x26bbfdc

--------------------------------
Class: MsgCenterConfig
	bool bShowSubtitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: GameStatisticsManager.ActorComponent.Object
	GameStatisticsSetting GameStatisticsSetting;//[Offset: 0xc4, Size: 0x1c]
	GameStatisticsVOSetting GameStatisticsVOSetting;//[Offset: 0xe0, Size: 0x24]
	UAEDataTable* ParameterIntegerDataTable;//[Offset: 0x104, Size: 0x4]
	UAEDataTable* GameModeDataTable;//[Offset: 0x108, Size: 0x4]
	UAEDataTable* GameModeSecondTable;//[Offset: 0x10c, Size: 0x4]
	void OnSkillReleased(ApexCharacter* Character, UTSkill* Skill, enum SkillType);// 0x2615ec0
	void OnPlayerRespawn(int CauserPlayerKey, int VictimPlayerKey);// 0x2615d40
	void OnPlayerInputReActive(uint32 PlayerKey);// 0x25299b0
	void OnPlayerInputDeActive(uint32 PlayerKey);// 0x2584ecc
	void OnPlayerExit(uint32 PlayerKey);// 0x25e10a0
	void OnLegendRespawnOrChanged_dynamic(int CauserPlayerKey, int VictimPlayerKey);// 0x2615e04
	int GetTotalTeamNum();// 0x2616110
	int GetTotalPlayerNum();// 0x2616140
	int GetSurviveTeam();// 0x26160e0
	int GetSurvivePlayer();// 0x26160b0
	int GetRatingKillAssistScore(int PlayerKey);// 0x2616028
	PlayerStatisticsManager* GetPlayerStatisticsManager(uint32 PlayerKey);// 0x2615fa8
	PlayerInfo[] GetPlayerObservers(int PlayerKey);// 0x2616170
	int GetPlayerKill(int PlayerKey);// 0x2616410
	float GetPlayerDamage(int PlayerKey);// 0x2616310
	int GetPlayerAssist(int PlayerKey);// 0x2616390
	int GetObservers();// 0x2616490
	ApexPlayerState*[] GetDeadPlayers();// 0x2615cac

--------------------------------
Class: PlayerStatisticsManager.ActorComponent.Object
	float[] CreditScores;//[Offset: 0xa8, Size: 0xc]
	float RefreshTime;//[Offset: 0xc4, Size: 0x4]
	GMStatisticsData GMStatisticsData;//[Offset: 0xc8, Size: 0x44]
	void SetbLogStatisticsDataServer(bool Val);// 0x256867c
	void OnRep_OpenCreditScoresChanged();// 0x27209a8
	void BroadcastSurviveUpdate(byte SurvivePlayer, byte SurviveTeam);// 0x2720be0
	void BroadcastSlidingWeaponListTime(int TotalTime);// 0xf49d30
	void BroadcastRemovePlayer(const uint32 PlayerKey);// 0xf4bebc
	void BroadcastPlayerKilled_BR(uint32 Causer, uint32 RealCauser, uint32 Victim, const uint32[] AssisterKeys, byte SurvivePlayer, byte SurviveTeam, const PlayerRatingKillScore[] RatingKillScores);// 0x2720d68
	void BroadcastPlayerKilled(uint32 Causer, uint32 RealCauser, uint32 Victim, const uint32[] AssisterKeys);// 0x272121c
	void BroadcastPlayerDamage(const uint32 Causer, const uint32 Victim, const float Damage);// 0x254018c
	void BroadcastOpenSocreTime(int TotalTime);// 0x2405170
	void BroadcastObStop(uint32 PlayerKey, uint32 ObserverPlayerKey);// 0x2558364
	void BroadcastObStart(uint32 PlayerKey, PlayerInfo Observer);// 0x272109c
	void BroadcastMsg(uint32 PlayerKey, FString Msg);// 0x2720fc0
	void BroadcastDyingDamage(uint32 Causer, uint32 Victim, float Damage);// 0x2721384
	void BroadcastBecomeKillKing_BR(uint32 KillKingPlayerKey, byte KillKingMaxKill);// 0x2720ca4
	void BroadcastAddPlayer(const PlayerInfoToClient PlayerInfo);// 0x272148c
	void BoardcastResetRoundStatistics();// 0x24052d8
	void BoardcastOpenShopTime(float TotalTime);// 0x264fa00
	void BoardcastBombPlantAndDefuse(uint32 PlayerKey, bool bPlanted);// 0x27209bc
	void BoardcastAddPlayerScore(int PlayerKey, int Score);// 0x2720b1c
	void BoardcastAddCampScore(const CampScoringRecord Record);// 0x2720a88

--------------------------------
Class: PlayerRatingKillScore
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int KillScore;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerInfo
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]
	int TeamID;//[Offset: 0xc, Size: 0x4]
	int CampID;//[Offset: 0x10, Size: 0x4]
	FString PlayerName;//[Offset: 0x14, Size: 0xc]
	int Corps_Select_ID;//[Offset: 0x20, Size: 0x4]
	int LegendId;//[Offset: 0x24, Size: 0x4]
	int LegendSkin;//[Offset: 0x28, Size: 0x4]
	int[] CurrentEmotePaintingData;//[Offset: 0x2c, Size: 0xc]
	int FrameID;//[Offset: 0x38, Size: 0x4]
	int PosID;//[Offset: 0x3c, Size: 0x4]
	uint32 PlayerLevel;//[Offset: 0x40, Size: 0x4]
	int SegmentLevel;//[Offset: 0x44, Size: 0x4]
	int Rating;//[Offset: 0x48, Size: 0x4]
	int DailyWinTime;//[Offset: 0x4c, Size: 0x4]
	bool bAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: PlayerInfoToClient
	PlayerInfo PlayerInfo;//[Offset: 0x0, Size: 0xc8]
	SimpleTrackerData[] TrackerData;//[Offset: 0xc8, Size: 0xc]

--------------------------------
Class: SimpleTrackerData
	float Value;//[Offset: 0x0, Size: 0x4]
	int TrackerID;//[Offset: 0x4, Size: 0x4]
	int LegendId;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CampScoringRecord
	int CampID;//[Offset: 0x0, Size: 0x4]
	int CampRole;//[Offset: 0x4, Size: 0x4]
	int Score;//[Offset: 0x8, Size: 0x4]
	enum Reason;//[Offset: 0xc, Size: 0x1]
	bool FinishGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: GMStatisticsData
	byte TeamRank;//[Offset: 0x0, Size: 0x1]
	byte Rank;//[Offset: 0x1, Size: 0x1]
	int KillNum;//[Offset: 0x4, Size: 0x4]
	int DeathNum;//[Offset: 0x8, Size: 0x4]
	float DamageAmount;//[Offset: 0xc, Size: 0x4]
	float SurviveTime;//[Offset: 0x10, Size: 0x4]
	float TeamSurviveTime;//[Offset: 0x14, Size: 0x4]
	int RescueNum;//[Offset: 0x18, Size: 0x4]
	int RevivalNum;//[Offset: 0x1c, Size: 0x4]
	int AssistNum;//[Offset: 0x20, Size: 0x4]
	int ComboKill;//[Offset: 0x24, Size: 0x4]
	float HeadShotRate;//[Offset: 0x28, Size: 0x4]
	float RecoveryHP;//[Offset: 0x2c, Size: 0x4]
	int MeleeKillNum;//[Offset: 0x30, Size: 0x4]
	int GrenadeLikeItemKill;//[Offset: 0x34, Size: 0x4]
	float MoveDistance;//[Offset: 0x38, Size: 0x4]
	int RevivalByOtherNum;//[Offset: 0x3c, Size: 0x4]
	int KillCountBySelf;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: GameStatisticsSetting
	float AssistAccountableDuration;//[Offset: 0x0, Size: 0x4]
	float KnockDownCauserTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ComboTime;//[Offset: 0x8, Size: 0x4]
	float ComboKnockDownTime;//[Offset: 0xc, Size: 0x4]
	float VerticalDamageHeight;//[Offset: 0x10, Size: 0x4]
	float BehindDamageAngle;//[Offset: 0x14, Size: 0x4]
	float DamageRecoveryHPTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: GameStatisticsVOSetting
	float MegaKillTime;//[Offset: 0x0, Size: 0x4]
	int MegaKillNum;//[Offset: 0x4, Size: 0x4]
	float[] KnockDownCamboTime;//[Offset: 0x8, Size: 0xc]
	float FarEngagementMinDist;//[Offset: 0x14, Size: 0x4]
	float SquadEngagementCalloutDebounce;//[Offset: 0x18, Size: 0x4]
	float SameEventDebounce;//[Offset: 0x1c, Size: 0x4]
	float ChanceForCharacterComment;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: GameEndDataReportComponent.ActorComponent.Object
	void ServerDataRepWorkbenchTypeChoose(enum InType);// 0x25d7494
	void ServerDataRepRowdyPlayNum(int InIndex);// 0x25d7044
	void ServerDataRepRowdyLocData(out int Index, Vector Location);// 0x25d70bc
	void ServerDataRepReplicatorUseSuccessNum(int InIndex);// 0x25d7714
	void ServerDataRepReplicatorUseNum(int InIndex);// 0x25d778c
	void ServerDataRepReplicatorSpawnItemNum(int InIndex);// 0x25d6fcc
	void ServerDataRepReplicatorLocData(out int Index, int Type, Vector Location);// 0x25d7804
	void ServerDataRepReplicatorCostMaterial(int InIndex, int InCostNum);// 0x25d7658
	void ServerDataRepLootBinOpenData(int InIndex, int PlayerKey);// 0x25d72c4
	void ServerDataRepLootBinLocData(out int Index, Vector Location, int BinType);// 0x25d7380
	void ServerDataRepLootBinIceGenerateData(int InIndex, int IceNum);// 0x25d7190
	void ServerDataRepLootBinIceActiveData(int InIndex);// 0x25d724c
	void ServerDataRepLootBinCreepLocData(out int Index, Vector Location);// 0x25d7c00
	void ServerDataRepLootBinCreepDestroyData(int InIndex, int InQuality, <int,int> PickUpData);// 0x25d7920
	void ServerDataRepHarvesterLocData(out int Index, Vector Location);// 0x25d7584
	void ServerDataRepHarvesterExtractNum(int Index);// 0x25d750c
	void ServerDataRepDoorData(out int DoorIndex, bool bOpen, Vector Location);// 0x25d7cd4

--------------------------------
Class: ProxyMovementManager.ActorComponent.Object
	bool bProxySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float LimitAngle;//[Offset: 0xac, Size: 0x4]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float CharacterSyncDistance;//[Offset: 0xb4, Size: 0x4]
	bool bEquipSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	int SyncSight;//[Offset: 0x144, Size: 0x4]
	float ProxyExistTime;//[Offset: 0x148, Size: 0x4]
	bool RemoteWeaponSoundSyncSW;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	float RemoteWeaponSoundSyncDis;//[Offset: 0x15c, Size: 0x4]
	float RemoteWeaponSoundKeepTime;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: GameSyncSettingComponent.ActorComponent.Object
	CharacterSyncSetting CharacterSyncSetting;//[Offset: 0xa8, Size: 0x10]
	FString MovementConfigPath;//[Offset: 0xb8, Size: 0xc]
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	void Onrep_CharacterSyncSetting();// 0xfd338c

--------------------------------
Class: CharacterSyncSetting
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	CharacterMovementSyncSetting MovementSyncSetting;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: CharacterMovementSyncSetting
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float MaxJumpHeight;//[Offset: 0x4, Size: 0x4]
	float MaxSpeed;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BattlefieldMessageComponent.ActorComponent.Object
	FName KillAssistTableName;//[Offset: 0xac, Size: 0x8]
	FName KATextureName;//[Offset: 0xb4, Size: 0x8]
	FName KABgTexturesName;//[Offset: 0xbc, Size: 0x8]
	FName KAPriorityName;//[Offset: 0xc4, Size: 0x8]
	FName KAGroupName;//[Offset: 0xcc, Size: 0x8]
	FName KADisplayTextName;//[Offset: 0xd4, Size: 0x8]
	FName KAAnimLevelName;//[Offset: 0xdc, Size: 0x8]
	FName KAAnimAudioName;//[Offset: 0xe4, Size: 0x8]
	int MaxCacheNumber;//[Offset: 0xec, Size: 0x4]
	int MaxDisplayNumber;//[Offset: 0xf0, Size: 0x4]
	float MinDisplayTime;//[Offset: 0xf4, Size: 0x4]
	float KAItemLifeTime;//[Offset: 0xf8, Size: 0x4]
	<int> Groups;//[Offset: 0xfc, Size: 0x3c]
	float LongDistanceThreshold;//[Offset: 0x138, Size: 0x4]
	float SuperLongDistanceThreshold;//[Offset: 0x13c, Size: 0x4]
	int KillerRowName;//[Offset: 0x140, Size: 0x4]
	int AssistRowName;//[Offset: 0x144, Size: 0x4]
	int HeadShotRowName;//[Offset: 0x148, Size: 0x4]
	int DoubleKillRowName;//[Offset: 0x14c, Size: 0x4]
	int TriKillRowName;//[Offset: 0x150, Size: 0x4]
	int QuaKillRowName;//[Offset: 0x154, Size: 0x4]
	int PentaKillRowName;//[Offset: 0x158, Size: 0x4]
	int AbovePentaKillRowName;//[Offset: 0x15c, Size: 0x4]
	int RevengeRowName;//[Offset: 0x160, Size: 0x4]
	int ShutDownRowName;//[Offset: 0x164, Size: 0x4]
	int FirstBloodRowName;//[Offset: 0x168, Size: 0x4]
	int MeleeRowName;//[Offset: 0x16c, Size: 0x4]
	int GrenadeRowName;//[Offset: 0x170, Size: 0x4]
	int LongDistanceRowName;//[Offset: 0x174, Size: 0x4]
	int SuperLongDistanceRowName;//[Offset: 0x178, Size: 0x4]
	bool bOnlyDisplayTeamMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	uint32 CurrentKillKing;//[Offset: 0x190, Size: 0x4]
	void OnPlayerKilled(Controller* Killer, Controller* VictimPlayer, out const DamageEvent DamageEvent, int ComboKill, bool bIsShutDown, const uint32[] AssisterKeys);// 0x252f794
	void OnPlayerGoToDying(Controller* Killer, Controller* VictimPlayer, out const DamageEvent DamageEvent, int ComboKill, bool bIsShutDown, const uint32[] AssisterKeys);// 0x252f518
	void MulticastKillKingMessage(BattlefieldKillKingMessage Message);// 0x252f210
	void GenerateNewInfos(out KillAssistInfo Info, out <int,int> UsedGroup2BestRowName);// 0x252f050
	void DispatchKillKingMessage(enum MessageType, Controller* Killer, Controller* Victim, int KillCount);// 0x252f3d0
	void ClientDispatchPlayerKillMessage(BattlefieldPlayerKillMessage Message);// 0x252fa10

--------------------------------
Class: BattlefieldKillKingMessage
	enum MessageType;//[Offset: 0x0, Size: 0x1]
	enum KillKingMessageType;//[Offset: 0x1, Size: 0x1]
	BattlefieldPlayerInfo KillerInfo;//[Offset: 0x4, Size: 0x1c]
	BattlefieldPlayerInfo VictimInfo;//[Offset: 0x20, Size: 0x1c]
	int KillCount;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BattlefieldPlayerInfo
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	uint32 PlayerKey;//[Offset: 0xc, Size: 0x4]
	int TeamID;//[Offset: 0x10, Size: 0x4]
	int TeamIdx;//[Offset: 0x14, Size: 0x4]
	int SegmentLevel;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: KillAssistInfo
	bool IsKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	int ComboKill;//[Offset: 0x4, Size: 0x4]
	bool IsRevenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool IsFirstBlood;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool IsMeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool IsGrenadeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool IsLongDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool IsSuperLongDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]

--------------------------------
Class: BattlefieldPlayerKillMessage
	BattlefieldPlayerInfo KillerInfo;//[Offset: 0x0, Size: 0x1c]
	uint32[] AssisterPlayerKeys;//[Offset: 0x1c, Size: 0xc]
	BattlefieldPlayerInfo VictimInfo;//[Offset: 0x28, Size: 0x1c]
	int DamageType;//[Offset: 0x44, Size: 0x4]
	int WeaponID;//[Offset: 0x48, Size: 0x4]
	int WeaponSkinID;//[Offset: 0x4c, Size: 0x4]
	bool bHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bBlindSnipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bShootThroughSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	int ComboKill;//[Offset: 0x54, Size: 0x4]
	bool bKillLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	float KillDistance;//[Offset: 0x5c, Size: 0x4]
	bool IsFirstBlood;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool IsRevenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	enum MessageType;//[Offset: 0x62, Size: 0x1]
	enum KillKingMessageType;//[Offset: 0x63, Size: 0x1]
	int KillCount;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: GameInitControllerComponent.ActorComponent.Object
	GameInitAction*[] Actions;//[Offset: 0xa8, Size: 0xc]

--------------------------------
Class: GameInitAction.Object

--------------------------------
Class: ApexGameCreditScoreRatingManager.ActorComponent.Object
	SoftObjectPath CreditScoreConfig;//[Offset: 0xa8, Size: 0x14]
	CreditScoreRatingData* CreditScoreData;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: CreditScoreRatingData.DataAsset.Object
	float RecoverValue;//[Offset: 0x20, Size: 0x4]
	float RecoRecoverValueverThreshold;//[Offset: 0x24, Size: 0x4]
	float KickOutScore;//[Offset: 0x28, Size: 0x4]
	<enum,float> ScoreLimitation;//[Offset: 0x2c, Size: 0x3c]
	<enum,float> ScoreReduceLimitation;//[Offset: 0x68, Size: 0x3c]
	<enum,float> TacticScore;//[Offset: 0xa4, Size: 0x3c]
	<enum,int> TacticToleranceNum;//[Offset: 0xe0, Size: 0x3c]
	float PingToleranceThreshold;//[Offset: 0x11c, Size: 0x4]
	int PingToleranceNum;//[Offset: 0x120, Size: 0x4]
	float SuspiciousActionThresholdMid;//[Offset: 0x124, Size: 0x4]
	float SuspiciousActionThresholdHigh;//[Offset: 0x128, Size: 0x4]
	bool bOpenCreditScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]

--------------------------------
Class: ApexSequenceComponent.ActorComponent.Object
	ApexLevelSequenceActor* LevelSequenceActor;//[Offset: 0xa8, Size: 0x4]
	delegate OnSpawnObjectEvent;//[Offset: 0xac, Size: 0xc]
	Object* TransformOriginActor;//[Offset: 0xb8, Size: 0x4]
	void SetSequnce(LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings);// 0x24a3b08
	void OverrideBindings(const FString[] OverrideNames, const Actor*[] OverrideActors);// 0x24a3420
	Actor* GetSequenceActorBindingObj(LevelSequenceActor* SequenceActor);// 0x24a3680
	LevelSequenceActor* GetLevelSequenceActor();// 0x24a3658
	void ApexStopSequence();// 0x24a37c8
	void ApexSequenceOnFinish();// 0x24a3700
	void ApexPlaySequence(LevelSequence* LevelSequence, const FString[] OverrideNames, const Actor*[] OverrideActors, MovieSceneSequencePlaybackSettings Settings);// 0x24a37dc
	void ApexPauseSequence();// 0x24a37b4
	void ApexJumpToFrameSequence(int NewPosition);// 0x24a3714
	float ApexGetSequenceDuration();// 0x24a378c

--------------------------------
Class: ApexLevelSequenceActor.LevelSequenceActor.Actor.Object

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x1d8, Size: 0x24]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x1fc, Size: 0x4]
	SoftObjectPath LevelSequence;//[Offset: 0x200, Size: 0x14]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x214, Size: 0xc]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x220, Size: 0x4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x224, Size: 0x4]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x22c, Size: 0x4]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x230, Size: 0x4]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	void ShowBurnin();// 0x3d46ddc
	void SetSequence(LevelSequence* InSequence);// 0x3d46fd0
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x3d46e2c
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x3d46eac
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3d46c70
	void ResetBindings();// 0x3d46888
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x3d468c8
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x3d469c0
	void OnLevelSequenceLoaded__DelegateSignature();// 0x2ce6f18
	LevelSequence* LoadSequence();// 0x3d47048
	void HideBurnin();// 0x3d46df0
	LevelSequencePlayer* GetSequencePlayer();// 0x3d46e04
	LevelSequence* GetSequence();// 0x3d47070
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3d46b00

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x288, Size: 0x4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x28c, Size: 0x3c]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x2c8, Size: 0x78]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x340, Size: 0x3c]
	class Object* DirectorClass;//[Offset: 0x37c, Size: 0x4]
	void RemoveMetaDataByClass(class Object InClass);// 0x27aedd8
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x3d45d08
	Object* FindMetaDataByClass(class Object InClass);// 0x3d45d08
	Object* CopyMetaData(Object* InMetaData);// 0x3d45d08

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x3c]
	<Guid> AnimSequenceInstances;//[Offset: 0x3c, Size: 0x3c]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0xc]
	SoftObjectPath ExternalObjectPath;//[Offset: 0xc, Size: 0x14]
	FString ObjectPath;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x1c, Size: 0xc]
	Object* CachedComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x6b0, Size: 0xc]
	CameraComponent* GetActiveCameraComponent();// 0x3d487ec
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x3d4881c

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x328, Size: 0xc]
	delegate OnPlayReverse;//[Offset: 0x334, Size: 0xc]
	delegate OnStop;//[Offset: 0x340, Size: 0xc]
	delegate OnPause;//[Offset: 0x34c, Size: 0xc]
	delegate OnFinished;//[Offset: 0x358, Size: 0xc]
	byte Status;//[Offset: 0x364, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x365, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x368, Size: 0x4]
	FrameNumber StartTime;//[Offset: 0x36c, Size: 0x4]
	int DurationFrames;//[Offset: 0x370, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x374, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x384, Size: 0x24]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x3a8, Size: 0x25c]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x660, Size: 0x10]
	interface class ByteProperty* PlaybackClient;//[Offset: 0x670, Size: 0x8]
	void StopAtCurrentTime();// 0x39b7944
	void Stop();// 0x39b7958
	void SetTimeRange(float StartTime, float Duration);// 0x39b7260
	void SetPlayRate(float PlayRate);// 0x39b6ca4
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x39b7590
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x39b764c
	void SetFrameRate(FrameRate FrameRate);// 0x39b743c
	void SetFrameRange(int StartFrame, int Duration);// 0x39b731c
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x39b6c14
	void ScrubToSeconds(float TimeInSeconds);// 0x39b6ffc
	bool ScrubToMarkedFrame(FString InLabel);// 0x39b6e54
	void ScrubToFrame(FrameTime NewPosition);// 0x39b7168
	void Scrub();// 0x39b796c
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x39b68b0
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x39b6934
	void PlayToSeconds(float TimeInSeconds);// 0x39b7074
	bool PlayToMarkedFrame(FString InLabel);// 0x39b6eec
	void PlayToFrame(FrameTime NewPosition);// 0x39b71e4
	void PlayReverse();// 0x39b7a20
	void PlayLooping(int NumLoops);// 0x39b7994
	void Play();// 0x39b7a34
	void Pause();// 0x39b7980
	void JumpToSeconds(float TimeInSeconds);// 0x39b6f84
	void JumpToPosition(float NewPlaybackPosition);// 0x39b6ffc
	bool JumpToMarkedFrame(FString InLabel);// 0x39b6dbc
	void JumpToFrame(FrameTime NewPosition);// 0x39b70ec
	bool IsReversed();// 0x39b6d44
	bool IsPlaying();// 0x39b6d94
	bool IsPaused();// 0x39b6d6c
	void GoToEndAndStop();// 0x39b7930
	QualifiedFrameTime GetStartTime();// 0x39b740c
	float GetPlayRate();// 0x39b6d1c
	float GetPlaybackStart();// 0x39b77b8
	float GetPlaybackPosition();// 0x39b7858
	float GetPlaybackEnd();// 0x39b7738
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x39b69fc
	float GetLength();// 0x39b7830
	FrameRate GetFrameRate();// 0x39b74bc
	int GetFrameDuration();// 0x39b74e0
	QualifiedFrameTime GetEndTime();// 0x39b73d8
	QualifiedFrameTime GetDuration();// 0x39b7508
	bool GetDisableCameraCuts();// 0x39b6bf0
	QualifiedFrameTime GetCurrentTime();// 0x39b754c
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x39b6ad8
	void ChangePlaybackDirection();// 0x39b7a0c

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bApplyRebase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bApplyOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	float StartBlendInTime;//[Offset: 0x14, Size: 0x4]
	Vector Offset;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x10, Size: 0x3c]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x20, Size: 0x14]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x34, Size: 0x4]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x3d46514

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x1c8, Size: 0x98]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x260, Size: 0x4]
	void SetSettings(Object* InSettings);// 0x2ce6f18
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x3d47bf8

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0xc]
	QualifiedFrameTime MasterTime;//[Offset: 0xc, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x1c, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x2c, Size: 0xc]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x38, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x48, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x58, Size: 0xc]
	CameraComponent* CameraComponent;//[Offset: 0x64, Size: 0x20]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x84, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0x90, Size: 0x4]
	MovieSceneSequenceID ShotID;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: SelectLegendComponentBase.ActorComponent.Object
	LegendLoadoutInfo[] LegendLoadoutInfoList;//[Offset: 0xa8, Size: 0xc]
	void ReChooseLegend(ApexPlayerState* PlayerState, int LegendId);// 0x25bed74
	void OnRep_LegendLoadoutInfoList();// 0x2ce6f18
	void OnCancelConfirmLegend(ApexPlayerState* PlayerState);// 0x2405170
	void ConfirmLegend(ApexPlayerState* PlayerState, bool bIsRepick, bool ImmediatelyChange);// 0x2746c28
	void ChooseLegendSkin(ApexPlayerState* PlayerState, int SkinId);// 0x2746b64
	void ChooseLegend(ApexPlayerState* PlayerState, int LegendId);// 0x2707c24

--------------------------------
Class: LegendLoadoutInfo
	int LegendId;//[Offset: 0x0, Size: 0x4]
	int LoadoutID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameStateInGameRegionComponent.ActorComponent.Object
	bool bNeedDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bEnableTickUpdateDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	<enum,InGameRegionData> RegionTypeToRegionData;//[Offset: 0xbc, Size: 0x3c]
	InGameRegionConfig[] InGameRegionConfigArray;//[Offset: 0xf8, Size: 0xc]
	void OnRep_EnableTickUpdateDynamic();// 0x2605fdc

--------------------------------
Class: InGameRegionData
	<InGameRegionID,InGameRegionObjectList> RegionIDToObjectList_Static;//[Offset: 0xc, Size: 0x3c]
	<InGameRegionID,InGameRegionObjectList> RegionIDToObjectList_Dynamic;//[Offset: 0x48, Size: 0x3c]
	<InGameRegionObject,InGameRegionID> DynamicRegionObjectToRegionID;//[Offset: 0x84, Size: 0x3c]

--------------------------------
Class: InGameRegionObjectList
	InGameRegionObject[] InGameRegionObjectDataArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: InGameRegionObject

--------------------------------
Class: InGameRegionID

--------------------------------
Class: InGameRegionConfig
	enum RegionType;//[Offset: 0x0, Size: 0x1]
	int ClientRegionSize;//[Offset: 0x4, Size: 0x4]
	int ServerRegionSize;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: TriggerEvent.TriggerBaseEelement.Object
	Object* EventInstigator;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: TriggerBaseEelement.Object
	TriggerObject* OwnerTrigger;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TriggerObject.Object
	FString TriggerName;//[Offset: 0x40, Size: 0xc]
	enum RunType;//[Offset: 0x4c, Size: 0x1]
	Actor* OuterActor;//[Offset: 0x50, Size: 0x4]
	class Object[] TriggerEventsClass;//[Offset: 0x54, Size: 0xc]
	TriggerAction*[] TriggerActions;//[Offset: 0x60, Size: 0xc]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x6c, Size: 0xc]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0x78, Size: 0x3c]
	<TriggerAction*> CompleteActions;//[Offset: 0xb4, Size: 0x3c]
	LevelDirector* OwnerLevelDirector;//[Offset: 0xf0, Size: 0x4]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0xf4, Size: 0x4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float TickInterval;//[Offset: 0xfc, Size: 0x4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	EventParams(FieldPathProperty)[] EventParams;//[Offset: 0x104, Size: 0xc]

--------------------------------
Class: TriggerAction.TriggerBaseEelement.Object
	TriggerVariableSet* DataSource;//[Offset: 0x4c, Size: 0x4]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]

--------------------------------
Class: TriggerVariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x58, Size: 0x40]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: TriggerCondition.TriggerBaseEelement.Object
	TriggerVariableSet* VariableSet;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: LevelDirector.Actor.Object
	TaskRepData TaskData;//[Offset: 0x1d4, Size: 0x10]
	TriggerActionWrapper[] InstanceActions;//[Offset: 0x1e4, Size: 0xc]
	FString[] ClassPaths;//[Offset: 0x1f0, Size: 0xc]
	FString ConfigFilePath;//[Offset: 0x200, Size: 0xc]
	FString DescData;//[Offset: 0x20c, Size: 0xc]
	LevelDirectorRepData LevelDirectorRepData;//[Offset: 0x218, Size: 0x10]
	TriggerFuncLib*[] FunctionLibList;//[Offset: 0x228, Size: 0xc]
	TriggerFlowTree* TriggersFlowTree;//[Offset: 0x234, Size: 0x4]
	<FString,TriggerObject*> TriggerObjectMap;//[Offset: 0x238, Size: 0x3c]
	TriggerVariableSet* AllVariableSet;//[Offset: 0x274, Size: 0x4]
	bool StartLevelDirector();// 0x135c9b8
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x135c890
	void RequestTriggerComplete(TriggerObject* CompleteTrigger);// 0x135c388
	void OnRep_LevelDirectorData();// 0x135c1cc
	bool InitialLevelDirector();// 0x135c9e0
	TriggerVariableSet* GetDataSet();// 0x135c610
	int GetCurTaskID();// 0x135c1e0
	bool FlowControll(FString[] TriggerNames, enum FlowNodeType);// 0x135c43c
	void ClientExecuteAction(FString ActionClassName, int64 UID, const TriggerParamRepData[] RepParams);// 0x135c208
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x135c768
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x135c638

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0, Size: 0xc]
	int TaskId;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TriggerActionWrapper
	int64 ActionUniqueID;//[Offset: 0x0, Size: 0x8]
	TriggerAction* Action;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LevelDirectorRepData
	FlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 0xc]
	int NodeID;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x1c, Size: 0xc]
	TriggerVariableSet* DataSet;//[Offset: 0x28, Size: 0x4]
	Actor* GetLastIteratorActor();// 0x135e4b4

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 0xc]
	FString ClassFullPath;//[Offset: 0xc, Size: 0xc]
	float RandomRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TriggerFlowTree.Object
	FlowNodeBase* RootNode;//[Offset: 0x28, Size: 0x4]
	FlowNodeBase* TailNode;//[Offset: 0x2c, Size: 0x4]
	FlowNodeBase* CurrentNode;//[Offset: 0x30, Size: 0x4]
	LevelDirector* OwnerLevelDirector;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x1c, Size: 0x4]
	FlowNodeRepData RepData;//[Offset: 0x20, Size: 0x10]
	TriggerFlowTree* CarriedFlowTree;//[Offset: 0x34, Size: 0x4]
	enum NodeType;//[Offset: 0x38, Size: 0x1]
	TriggerObject*[] TriggerObjects;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 0x1]
	FString ParamName;//[Offset: 0x4, Size: 0xc]
	byte[] ParamData;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: RTPCParamInfo
	FString RTPCKey;//[Offset: 0x0, Size: 0xc]
	float Value;//[Offset: 0xc, Size: 0x4]
	int InterpolationTimeMs;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MiniMapManager.ActorComponent.Object
	void UpdateRedCircleItem();// 0x2405154

--------------------------------
Class: GameModeStageInfo
	enum StageType;//[Offset: 0x0, Size: 0x1]
	float EnterStageTime;//[Offset: 0x4, Size: 0x4]
	float StageDuration;//[Offset: 0x8, Size: 0x4]
	int EnterStageTimes;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ZiplineManager.Object
	ZiplineBatchActor* ZiplineBatchActorStatic;//[Offset: 0x20, Size: 0x4]
	ZiplineBatchActor* ZiplineBatchActorDynamic;//[Offset: 0x24, Size: 0x4]
	ZiplineBatchComponent* ZiplineRidingBatchComponent;//[Offset: 0x28, Size: 0x4]
	<ZiplineComponent*,bool> ZipLineMap;//[Offset: 0x2c, Size: 0x3c]

--------------------------------
Class: ZiplineBatchActor.Actor.Object
	ZiplineISMBatchComponent* ZiplineISMBatchComponent;//[Offset: 0x1d0, Size: 0x4]

--------------------------------
Class: ZiplineISMBatchComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ZiplineInstanceData[] ZiplineDataList;//[Offset: 0x6e4, Size: 0xc]
	ZiplineComponent*[] ZiplineCompList;//[Offset: 0x6f0, Size: 0xc]
	StaticMesh* SplitStaticMesh;//[Offset: 0x6fc, Size: 0x4]
	MaterialInterface* MeshMaterialDynamic;//[Offset: 0x700, Size: 0x4]
	MaterialInterface* MeshMaterialStatic;//[Offset: 0x704, Size: 0x4]
	StaticMesh* SoftMeshPtr;//[Offset: 0x708, Size: 0x20]
	MaterialInterface* SoftMatDynamicPtr;//[Offset: 0x728, Size: 0x20]
	MaterialInterface* SoftMatStaticPtr;//[Offset: 0x748, Size: 0x20]
	enum ZiplineState;//[Offset: 0x768, Size: 0x1]
	void SetState(out const enum InState);// 0x28475f8
	void RemoveZipline(ZiplineComponent* InZipline);// 0x28477bc
	void LoadResourceDone(AsyncLoaderBase* Loader);// 0x2847580
	void HighlightZipline(ZiplineComponent* InZipline, bool bHighlight);// 0x2847680
	void HideZipline(ZiplineComponent* InZipline);// 0x2847744
	void AddZipline(ZiplineComponent* InZipline);// 0x2847834

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x618, Size: 0xc]
	int NumBuiltInstances;//[Offset: 0x624, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x62c, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x648, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x664, Size: 0xc]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x670, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0x678, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x67c, Size: 0x1c]
	bool bWorldBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x6a0, Size: 0x4]
	int SpecifiedSplitFactor;//[Offset: 0x6a4, Size: 0x4]
	int SpecifiedMinVertsToSplitNode;//[Offset: 0x6a8, Size: 0x4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x46b8bd4

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x578, Size: 0xc]
	InstancedStaticMeshInstanceCustomData[] PerInstanceSMCustomData;//[Offset: 0x584, Size: 0xc]
	bool bUsePerInstanceMPData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 0x1]
	InstancedStaticMeshMeshProbesData[] PerInstanceMPData;//[Offset: 0x594, Size: 0xc]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a0, Size: 0x1]
	int InstancingRandomSeed;//[Offset: 0x5a4, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x5a8, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x5ac, Size: 0x4]
	float InstanceMinScreenSize;//[Offset: 0x5b0, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x5b4, Size: 0xc]
	int NumPendingLightmaps;//[Offset: 0x600, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x604, Size: 0xc]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x46c3e80
	bool UpdateInstanceCustomData(int InstanceIndex, out const Vector4 NewInstanceCustomData, bool bMarkRenderStateDirty, bool bTeleport);// 0x46c3ce0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x46c3360
	bool RemoveInstance(int InstanceIndex);// 0x46c3460
	void NewInstance();// 0x46c48fc
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x46c40d0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x46c31d8
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x46c306c
	int GetInstanceCount();// 0x46c341c
	void DeleteInstance();// 0x46c4910
	void ClearInstances();// 0x46c3444
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x46c3af4
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x46c36d0
	bool BatchUpdateInstancesCustomDatas(int StartInstanceIndex, out const Vector4[] NewInstancesCustomDatas, bool bMarkRenderStateDirty, bool bTeleport);// 0x46c395c
	bool BatchUpdateInstancesCustomData(int StartInstanceIndex, int NumInstances, out const Vector4 NewInstancesCustomData, bool bMarkRenderStateDirty, bool bTeleport);// 0x46c34f0
	int AddInstanceWorldSpaceWithCustomData(out const Transform WorldTransform, out const Vector4 InstnaceCustomData);// 0x46c43e0
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x46c46d0
	int AddInstanceWithCustomData(out const Transform InstanceTransform, out const Vector4 InstnaceCustomData);// 0x46c4550
	int AddInstanceOffset(out const Transform InstanceTransform, out const Vector InstanceOffset);// 0x46c4270
	int AddInstance(out const Transform InstanceTransform);// 0x46c47e0

--------------------------------
Class: ZiplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ComponentReference AttachBegin;//[Offset: 0x460, Size: 0x20]
	FName AttachBeginSocketName;//[Offset: 0x480, Size: 0x8]
	Vector AttachBeginOffset;//[Offset: 0x488, Size: 0xc]
	ComponentReference AttachEnd;//[Offset: 0x494, Size: 0x20]
	FName AttachEndSocketName;//[Offset: 0x4b4, Size: 0x8]
	Vector AttachEndOffset;//[Offset: 0x4bc, Size: 0xc]
	int NumSegments;//[Offset: 0x4c8, Size: 0x4]
	float LengthScale;//[Offset: 0x4cc, Size: 0x4]
	int CurveSeparateNum;//[Offset: 0x4d0, Size: 0x4]
	float CurveAlpha;//[Offset: 0x4d4, Size: 0x4]
	bool bEnableCurveSeparate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	float AngleThreshold;//[Offset: 0x4dc, Size: 0x4]
	enum ZiplineType;//[Offset: 0x4e0, Size: 0x1]
	bool bIsFunctional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 0x1]
	bool bNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e2, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e3, Size: 0x1]
	float DebugDrawTime;//[Offset: 0x4e4, Size: 0x4]
	bool bStraightZiplineCutLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	bool bEnablePhysic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	float NoPlayerShakeTime;//[Offset: 0x4ec, Size: 0x4]
	float NoPlayerResetTime;//[Offset: 0x4f0, Size: 0x4]
	float EachDeltaTime;//[Offset: 0x4f4, Size: 0x4]
	int IterateTime;//[Offset: 0x4f8, Size: 0x4]
	float GravityValue;//[Offset: 0x4fc, Size: 0x4]
	float PlayerEffect;//[Offset: 0x500, Size: 0x4]
	float SlowRate;//[Offset: 0x504, Size: 0x4]
	float WindFrequency;//[Offset: 0x508, Size: 0x4]
	float WindForce;//[Offset: 0x50c, Size: 0x4]
	float CableWidth;//[Offset: 0x514, Size: 0x4]
	int NumSides;//[Offset: 0x518, Size: 0x4]
	float PlayerRadius;//[Offset: 0x51c, Size: 0x4]
	float PlayerRadiusTPP;//[Offset: 0x520, Size: 0x4]
	float MaxPlayerDist;//[Offset: 0x524, Size: 0x4]
	float MaxPlayerDistTPP;//[Offset: 0x528, Size: 0x4]
	float MaxViewAngle;//[Offset: 0x52c, Size: 0x4]
	float MaxViewAngleTPP;//[Offset: 0x530, Size: 0x4]
	float AutoRide_ShowRadius;//[Offset: 0x534, Size: 0x4]
	float AutoRide_ExitRadius;//[Offset: 0x538, Size: 0x4]
	ZiplineDownInfo InitDownInfo;//[Offset: 0x53c, Size: 0x1c]
	ZiplineTipInfo TipInfoStart;//[Offset: 0x558, Size: 0x24]
	ZiplineTipInfo TipInfoEnd;//[Offset: 0x57c, Size: 0x24]
	byte LandBlockChannel;//[Offset: 0x5a0, Size: 0x1]
	float BetweenSpaceTime;//[Offset: 0x5a4, Size: 0x4]
	float BetweenSpaceDist;//[Offset: 0x5a8, Size: 0x4]
	float RideDelayTime;//[Offset: 0x5ac, Size: 0x4]
	float RideViewTimeH;//[Offset: 0x5b0, Size: 0x4]
	float MoveMaxSpeed;//[Offset: 0x5b4, Size: 0x4]
	float MoveAccelerate;//[Offset: 0x5b8, Size: 0x4]
	float RideVelLimit;//[Offset: 0x5bc, Size: 0x4]
	float RideFirstHeight;//[Offset: 0x5c0, Size: 0x4]
	Vector Launch_StartPos;//[Offset: 0x5c4, Size: 0xc]
	Vector Launch_EndPos;//[Offset: 0x5d0, Size: 0xc]
	float Launch_TotalTime;//[Offset: 0x5dc, Size: 0x4]
	float Launch_StartTime;//[Offset: 0x5e0, Size: 0x4]
	int Launch_NumSegment;//[Offset: 0x5e4, Size: 0x4]
	bool bIsLaunchMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	float Launch_DistortOffsetY;//[Offset: 0x5ec, Size: 0x4]
	float Launch_DistortOffsetZ;//[Offset: 0x5f0, Size: 0x4]
	float Launch_DistortLength;//[Offset: 0x5f4, Size: 0x4]
	float Launch_DistortAmount;//[Offset: 0x5f8, Size: 0x4]
	float Launch_DistortSpeed;//[Offset: 0x5fc, Size: 0x4]
	StaticMesh* Launch_Mesh;//[Offset: 0x600, Size: 0x4]
	MaterialInterface* Launch_Mat;//[Offset: 0x604, Size: 0x4]
	StaticMeshComponent* Launch_MeshComp;//[Offset: 0x608, Size: 0x4]
	MaterialInstanceDynamic* Launch_MatDynamic;//[Offset: 0x60c, Size: 0x4]
	ZiplineElevatorInfo[] ElevatorList;//[Offset: 0x610, Size: 0xc]
	bool bDryRunZiplineProbe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	float NavStartPos;//[Offset: 0x620, Size: 0x4]
	float NavEndPos;//[Offset: 0x624, Size: 0x4]
	bool bHasResetOri;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	float LastHasPlayerTime;//[Offset: 0x62c, Size: 0x4]
	float OffsetRadiusFraction;//[Offset: 0x630, Size: 0x4]
	float TileMaterial;//[Offset: 0x634, Size: 0x4]
	bool bHasCalc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	Vector2D PreCalcMinMax;//[Offset: 0x63c, Size: 0x8]
	ZiplinePoint[] PotList;//[Offset: 0x644, Size: 0xc]
	float[] LenList;//[Offset: 0x650, Size: 0xc]
	float[] LenRate;//[Offset: 0x65c, Size: 0xc]
	Vector4[] CurvePreData;//[Offset: 0x668, Size: 0xc]
	Vector[] OriList;//[Offset: 0x674, Size: 0xc]
	float TotalLength;//[Offset: 0x680, Size: 0x4]
	float DevTotalLength;//[Offset: 0x684, Size: 0x4]
	ZiplinePlayerInfo[] PlayerList;//[Offset: 0x688, Size: 0xc]
	bool NeedSegmentInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 0x1]
	float LowerHeight;//[Offset: 0x698, Size: 0x4]
	float DevDeltaZ;//[Offset: 0x69c, Size: 0x4]
	Vector LowerTip;//[Offset: 0x6a0, Size: 0xc]
	Vector HigherTip;//[Offset: 0x6ac, Size: 0xc]
	Vector SegDelta;//[Offset: 0x6b8, Size: 0xc]
	void SetLaunchMaterialParam();// 0x284331c
	void SetHighlight(bool bHighlight);// 0x2843330
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x2843634
	void SetAttachBeginToComponent(SceneComponent* Component, FName SocketName);// 0x2843574
	void KickOutAllPlayer();// 0x2843428
	bool HasPlayerRiding();// 0x2843400
	float GetTotalLength();// 0x28433d8
	float GetTileMaterial();// 0x28433b0
	float GetRidePoint(out const Vector ori, out const Vector Dir, out Vector res, out float T, float playerHeight, bool IsInAir, out float MinDist, bool bIsTPP);// 0x28436f4
	Vector GetLaunchMiddlePos(float Time);// 0x284343c
	void ConstructZipline();// 0x28434e0
	void ClearAllDownInfo();// 0x28434cc
	void ChangeVisibility(bool bNewIsVisible);// 0x28434f4

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x4]
	FName ComponentProperty;//[Offset: 0x4, Size: 0x8]
	FString PathToComponent;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ZiplineDownInfo
	enum DownPreset;//[Offset: 0x0, Size: 0x1]
	bool bMaintainSlideVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bLimitSlideVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxSlideVel;//[Offset: 0x4, Size: 0x4]
	enum HorizonDirType;//[Offset: 0x8, Size: 0x1]
	float ConstYaw;//[Offset: 0xc, Size: 0x4]
	float HorizonVel;//[Offset: 0x10, Size: 0x4]
	bool bJumpOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float VelZ;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ZiplineTipInfo
	float AutoDownDist;//[Offset: 0x0, Size: 0x4]
	float AutoDirDist;//[Offset: 0x4, Size: 0x4]
	ZiplineDownInfo DownInfo;//[Offset: 0x8, Size: 0x1c]

--------------------------------
Class: ZiplineElevatorInfo
	float AutoDownT;//[Offset: 0x0, Size: 0x4]
	float DeltaRadius;//[Offset: 0x4, Size: 0x4]
	ZiplineDownInfo DownInfo;//[Offset: 0x8, Size: 0x1c]

--------------------------------
Class: ZiplinePoint
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	Vector Accelerate;//[Offset: 0x18, Size: 0xc]
	Vector OldPosition;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: ZiplinePlayerInfo
	ApexCharacter* Player;//[Offset: 0x0, Size: 0x4]
	float LengthT;//[Offset: 0x4, Size: 0x4]
	float RideTime;//[Offset: 0x8, Size: 0x4]
	float VelValue;//[Offset: 0xc, Size: 0x4]
	Vector StartPos;//[Offset: 0x10, Size: 0xc]
	Rotator StartRot;//[Offset: 0x1c, Size: 0xc]
	Vector EndPos;//[Offset: 0x28, Size: 0xc]
	Rotator EndRot;//[Offset: 0x34, Size: 0xc]
	bool bToEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bIsOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bNeedFirstJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bNeedSetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	Vector CurVelocity;//[Offset: 0x44, Size: 0xc]
	Vector LastPos;//[Offset: 0x50, Size: 0xc]
	bool bHasReachZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bNeedPlayRushAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	int Index;//[Offset: 0x60, Size: 0x4]
	bool bIsFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bBlockDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bBlockMaintainSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	float BlockUpperZ;//[Offset: 0x68, Size: 0x4]
	float ViewTurnValue;//[Offset: 0x6c, Size: 0x4]
	float AIDownT;//[Offset: 0x70, Size: 0x4]
	float NowT;//[Offset: 0x74, Size: 0x4]
	float BetweenSpaceOffset;//[Offset: 0x78, Size: 0x4]
	float RideTimeCopy;//[Offset: 0x7c, Size: 0x4]
	float ServerTime;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: ZiplineInstanceData
	int InstanceIdxStart;//[Offset: 0x0, Size: 0x4]
	int InstanceCount;//[Offset: 0x4, Size: 0x4]
	Matrix[] InstanceMatrix;//[Offset: 0x8, Size: 0xc]
	ZiplineBuildData BuildData;//[Offset: 0x14, Size: 0x2c]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ZiplineBuildData
	Vector ZiplineStart;//[Offset: 0x0, Size: 0xc]
	Vector ZiplineEnd;//[Offset: 0xc, Size: 0xc]
	int CurveSeparateNum;//[Offset: 0x18, Size: 0x4]
	int NumSegments;//[Offset: 0x1c, Size: 0x4]
	float TileMaterial;//[Offset: 0x20, Size: 0x4]
	Vector2D ZiplineMinMax;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]
	Vector4 ShCoefficient;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: InstancedStaticMeshInstanceCustomData
	Vector4 CustomData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InstancedStaticMeshMeshProbesData
	float MeshProbesIntensity;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: ZiplineBatchComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Material* ZiplineMat;//[Offset: 0x48c, Size: 0x4]
	Material* SoftMatPtr;//[Offset: 0x490, Size: 0x20]
	ZiplineComponent*[] TmpZiplineList;//[Offset: 0x4b0, Size: 0xc]
	ZiplineComponent*[] CurZiplineList;//[Offset: 0x4bc, Size: 0xc]
	<ZiplineComponent*,ZiplineBatchData> ZiplineMeshMap;//[Offset: 0x4c8, Size: 0x3c]
	ZiplineBatchData ZiplineBatchData;//[Offset: 0x504, Size: 0x1c]
	ZiplineComponent*[] NeedZiplineList;//[Offset: 0x520, Size: 0xc]
	ZiplineIndexDist[] ZiplineIndexDistList;//[Offset: 0x52c, Size: 0xc]
	void LoadResourceDone(AsyncLoaderBase* Loader);// 0x284292c

--------------------------------
Class: ZiplineBatchData

--------------------------------
Class: ZiplineIndexDist

--------------------------------
Class: ApexTrain.Actor.Object
	float AudioEffectRange;//[Offset: 0x224, Size: 0x4]
	TrainCoach* NearestCoach;//[Offset: 0x228, Size: 0x4]
	TrainSaveData ReplicatedSaveData;//[Offset: 0x24c, Size: 0x10]
	enum CurrentState;//[Offset: 0x25c, Size: 0x1]
	float TickInterval;//[Offset: 0x260, Size: 0x4]
	bool bAdjustDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bTrainHiddenTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	ApexSoundSpeakerComponent* Speaker;//[Offset: 0x2c4, Size: 0x4]
	AkComponent* AKComp;//[Offset: 0x2c8, Size: 0x4]
	float ForceUpdateDistance;//[Offset: 0x2e4, Size: 0x4]
	float LerpLimit;//[Offset: 0x2e8, Size: 0x4]
	bool bOpenOverlapOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	float DepartureBanTime;//[Offset: 0x2f0, Size: 0x4]
	bool bPlayBGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	AkAudioEvent* EngineAudio;//[Offset: 0x2f8, Size: 0x4]
	TrainStateComponent* TrainStateComp;//[Offset: 0x300, Size: 0x4]
	ApexRail* LocalDrivingRail;//[Offset: 0x304, Size: 0x4]
	bool bPenetrateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	ApexRail* ServerDrivingRail;//[Offset: 0x30c, Size: 0x4]
	float PreCalcNextRailSeconds;//[Offset: 0x310, Size: 0x4]
	ApexRail* ServerNextDrivingRail;//[Offset: 0x314, Size: 0x4]
	ApexRail* LastDrivingRail;//[Offset: 0x318, Size: 0x4]
	bool bForceDetectedFlash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	bool bLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	TrainInfo Locomotives;//[Offset: 0x32c, Size: 0x18]
	TrainInfo[] Coachs;//[Offset: 0x344, Size: 0xc]
	float MAXERRORDISTANCE;//[Offset: 0x350, Size: 0x4]
	int VehicleGUID;//[Offset: 0x358, Size: 0x4]
	Transform Offset;//[Offset: 0x360, Size: 0x30]
	bool bRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float Acceleration;//[Offset: 0x394, Size: 0x4]
	float MaxSpeed;//[Offset: 0x398, Size: 0x4]
	float TrainRuntime;//[Offset: 0x39c, Size: 0x4]
	bool bOpenParkTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	FString TrainName;//[Offset: 0x3a4, Size: 0xc]
	bool bStartWithNearestPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	enum StartUpType;//[Offset: 0x3b1, Size: 0x1]
	float ManualParkingWatingTime;//[Offset: 0x3b4, Size: 0x4]
	FName RailTag;//[Offset: 0x3b8, Size: 0x8]
	TrainSaveData StateSnapShot;//[Offset: 0x400, Size: 0x10]
	float PenetrateCharacterDistance;//[Offset: 0x41c, Size: 0x4]
	Vector BoxSize;//[Offset: 0x420, Size: 0xc]
	Vector BoxLocation;//[Offset: 0x42c, Size: 0xc]
	bool bShowPenetrateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	float PenetrateCheckDistance;//[Offset: 0x43c, Size: 0x4]
	void SwitchTrainControlStateTrack(out const ChapterParams Params);// 0x24b3010
	void SwitchTrainControlState(ApexPlayerController* Controller, bool bManual);// 0x24b30ec
	void SetTrainMaxSpeed(out const ChapterParams Params);// 0x24b2f34
	void SetTrainDistance(float Distance);// 0x24b2834
	void ServerChangeState(enum TargetStateType);// 0x15678bc
	float SelectARandomRail();// 0x24b2d64
	void OnRep_ServerNext();// 0x24b2e88
	void OnRep_SaveData();// 0x24b31b0
	void OnRep_locomotivesInfo();// 0x24b2da0
	void OnRep_Hidden();// 0x24b3258
	void Onrep_GUID();// 0x24b2d8c
	void OnRep_CurrentState();// 0x24b3244
	void OnRep_CoachInfo();// 0x24b2db4
	void NetMulticast_ChangeState(enum TargetStateType, TrainSaveData TheStateSnapShot, bool bManual);// 0x24b2948
	void Multi_SetDrivingRail(ApexRail* Rail, bool bInit, float Distance);// 0x24b2c50
	void Multi_ChangeRail(ApexRail* Rail);// 0x24b2bd0
	void Hidden(bool bNewHidden);// 0x24b31c4
	Transform GetTrainTransform();// 0x24b2ab8
	Transform GetTrainTrans();// 0x24b28cc
	Vector GetTrainStationLocation(bool bCurrentStation);// 0x24b2dc8
	enum GetTrainState();// 0x24b28ac
	Rotator GetTrainRotation();// 0x24b2b40
	Vector GetTrainLocation();// 0x24b2b88
	Vector GetSafeLocation(float DistanceAlgongRail);// 0x24b266c
	int GetNextStationIndex();// 0x24b2e60
	float GetDistancePercent();// 0x24b326c
	int GetCoachsNum();// 0x24b280c
	Vector GetCoachLocation(int CoachIndex);// 0x24b277c
	TrainCoach* GetCoach(int CoachIndex);// 0x24b26fc
	void EnterPoint(FString Tag);// 0x24b2e9c

--------------------------------
Class: TrainCoach.Actor.Object
	FString ID;//[Offset: 0x238, Size: 0xc]
	float SimulatedMoveDistance;//[Offset: 0x284, Size: 0x4]
	float BodyLength;//[Offset: 0x288, Size: 0x4]
	int CoachKey;//[Offset: 0x28c, Size: 0x4]
	TargetPoint* MoveProxy;//[Offset: 0x294, Size: 0x4]
	ApexCharacter*[] Passengers;//[Offset: 0x29c, Size: 0xc]
	ApexTrain* TrainOwner;//[Offset: 0x2ac, Size: 0x4]
	PrimitiveComponent*[] IndirectOptimizeComps;//[Offset: 0x2b0, Size: 0xc]
	bool bOpentClientOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	float CoachCullDistance;//[Offset: 0x2c0, Size: 0x4]
	float InteractiveDistance;//[Offset: 0x2c4, Size: 0x4]
	Vector BoxExtent;//[Offset: 0x2c8, Size: 0xc]
	Transform BoxOffset;//[Offset: 0x2e0, Size: 0x30]
	bool bApplyAttachmentReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	StaticMeshComponent* CoachMainMesh;//[Offset: 0x314, Size: 0x4]
	Actor*[] AttachActorList;//[Offset: 0x318, Size: 0xc]
	NavMeshSurfaceComponent* NavMeshSurfaceComponent;//[Offset: 0x324, Size: 0x4]
	void RemoveAttachActor(Actor* RemoveActor);// 0x27a9434
	void OnRep_Coachkey();// 0x27a964c
	void OnCoachTransformUpdate();// 0x2ce6f18
	void Hidden(bool bNewHidden);// 0x27a9554
	int GetPingType();// 0x27a9524
	void AddIndirectOptimizeComp(PrimitiveComponent* TargetComp);// 0x27a95d4
	void AddAttachActor(Actor* AddActor);// 0x27a94ac

--------------------------------
Class: NavMeshSurfaceComponent.ActorComponent.Object
	bool bEnableTickUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	float UpdateInterval;//[Offset: 0xbc, Size: 0x4]
	bool bNeedGenerateNavLinks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	void UpdateSurface();// 0x26c1e68

--------------------------------
Class: ChapterParams
	ChapterParam[] Params;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ChapterParam
	FString VariableName;//[Offset: 0x0, Size: 0xc]
	float FloatValue;//[Offset: 0xc, Size: 0x4]
	FString StringValue;//[Offset: 0x10, Size: 0xc]
	int NumberValue;//[Offset: 0x1c, Size: 0x4]
	enum Type;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: TrainSaveData
	float Velocity;//[Offset: 0x0, Size: 0x4]
	float DistanceToStartPoint;//[Offset: 0x4, Size: 0x4]
	float Timestamp;//[Offset: 0x8, Size: 0x4]
	ApexRail* Rail;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ApexRail.Actor.Object
	ApexTrain* SimulateTrain;//[Offset: 0x1d0, Size: 0x4]
	float DrivingTime;//[Offset: 0x1d4, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	int AutoBrakeEventID;//[Offset: 0x1dc, Size: 0x4]
	int ManualBrakeEventID;//[Offset: 0x1e0, Size: 0x4]
	int DepartureEventID;//[Offset: 0x1e4, Size: 0x4]
	int ManualParkingEventID;//[Offset: 0x1e8, Size: 0x4]
	int AutoParkingEventID;//[Offset: 0x1ec, Size: 0x4]
	int BinNum;//[Offset: 0x1f0, Size: 0x4]
	class StopSuplyBin* BinClass;//[Offset: 0x1f4, Size: 0x4]
	StopSuplyBin*[] StopBins;//[Offset: 0x1f8, Size: 0xc]
	StopSuplyBin*[] SharedBins;//[Offset: 0x204, Size: 0xc]
	SplineComponent* RailEditorComp;//[Offset: 0x210, Size: 0x4]
	SplineComponent* RailRuntimeComp;//[Offset: 0x214, Size: 0x4]
	bool bFinishRailBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	float RTRailSubLength;//[Offset: 0x228, Size: 0x4]
	ApexRail*[] NextStations;//[Offset: 0x22c, Size: 0xc]
	ApexRail*[] PreStations;//[Offset: 0x238, Size: 0xc]
	FString StationName;//[Offset: 0x244, Size: 0xc]
	int StationIndex;//[Offset: 0x250, Size: 0x4]
	float WaitDuration;//[Offset: 0x254, Size: 0x4]
	float RailLength;//[Offset: 0x258, Size: 0x4]
	bool bDrawOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	StaticMesh* OrientationMesh;//[Offset: 0x260, Size: 0x4]
	MaterialInterface* OrientationMat;//[Offset: 0x264, Size: 0x4]
	bool bNeedDrawMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float RailMeshPerLen;//[Offset: 0x26c, Size: 0x4]
	StaticMesh* RailMesh;//[Offset: 0x270, Size: 0x4]
	void OnFinishRailBuild();// 0x2ce6f18
	Vector GetStationLocation();// 0x249f768
	int GetStationIndex();// 0xf4e97c
	FString GetPointTagInScaleY(float TagValue);// 0x2ce6f18
	FString GetPointTagInScaleX(float TagValue);// 0x2ce6f18
	void AutoSetTangent(float Tension, bool bStationaryEndpoints);// 0x249f6a4

--------------------------------
Class: StopSuplyBin.Actor.Object
	Vector LeftDoorDefaultLocation;//[Offset: 0x1d0, Size: 0xc]
	Vector RightDoorDefaultLocation;//[Offset: 0x1dc, Size: 0xc]
	Vector BinDefaultLocation;//[Offset: 0x1e8, Size: 0xc]
	SceneComponent* LeftDoorGroup;//[Offset: 0x1f8, Size: 0x4]
	SceneComponent* RightDoorGroup;//[Offset: 0x1fc, Size: 0x4]
	SceneComponent* BinGroup;//[Offset: 0x200, Size: 0x4]
	ParticleSystemComponent* OpenParticleComp;//[Offset: 0x204, Size: 0x4]
	ParticleSystemComponent* FlashParticleComp;//[Offset: 0x208, Size: 0x4]
	class BinActor* SuplyBinClass;//[Offset: 0x20c, Size: 0x4]
	BinActor* SuplyBin;//[Offset: 0x210, Size: 0x4]
	bool bBinOpenState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 0x1]
	bool bNeedBin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 0x1]
	CurveVector* DoorRotateCurve;//[Offset: 0x218, Size: 0x4]
	TimelineComponent* DoorRotateTimeLineComp;//[Offset: 0x21c, Size: 0x4]
	CurveVector* DoorLiftCurve;//[Offset: 0x220, Size: 0x4]
	TimelineComponent* DoorLiftTimeLineComp;//[Offset: 0x224, Size: 0x4]
	CurveVector* BinLiftCurve;//[Offset: 0x228, Size: 0x4]
	TimelineComponent* BinLCTimeLineComp;//[Offset: 0x22c, Size: 0x4]
	byte TimelineDirection;//[Offset: 0x230, Size: 0x1]
	void SwitchFlashLightState(bool bBeginFlash);// 0x278a600
	void PlayAnimationFromEnd();// 0x278a774
	void PlayAnimation();// 0x278a788
	void Onrep_BinOnpenState();// 0x278a80c
	void OnLerpDoorRotate(Vector interpolatedVal);// 0x278a79c
	void OnLerpDoorLift(Vector interpolatedVal);// 0x278a704
	void OnLerpBinLift(Vector interpolatedVal);// 0x278a694
	void OnFinishLerpDoorRotate();// 0xfd338c
	void OnFinishDoorLift();// 0xfd338c
	void OnFinishBinLift();// 0x278a680
	enum GetStopBinState();// 0x278a820

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x45c, Size: 0x54]
	InterpCurveVector SplineInfo;//[Offset: 0x4b0, Size: 0x14]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4c4, Size: 0x14]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4d8, Size: 0x14]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x4ec, Size: 0x14]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x504, Size: 0x4]
	float Duration;//[Offset: 0x508, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50e, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50f, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512, Size: 0x1]
	float LoopPosition;//[Offset: 0x514, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x518, Size: 0xc]
	void UpdateSpline();// 0x47bf7d8
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x47be944
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x47be4d0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x47bf754
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x47be630
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x47be7e4
	void SetSplineWorldPoints(out const Vector[] Points);// 0x47bec20
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x47be348
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x47becc8
	void SetSplineLocalPoints(out const Vector[] Points);// 0x47beb78
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x47bf754
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x47bea18
	void SetDrawDebug(bool bShow);// 0x47bf6d4
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x47bd540
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x47bf4f0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x47bf604
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x47bef14
	bool IsClosedLoop();// 0x47bf4c8
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x47bcff8
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x47bc2f4
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x47bce90
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x47bc828
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x47be1b8
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x47bd2c8
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x47bc620
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x47bd160
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x47bc1d0
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47bdd94
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x47bcdbc
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x47bbef8
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x47bda08
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x47bca30
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x47bc4fc
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47bdf3c
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x47bd08c
	byte GetSplinePointType(int PointIndex);// 0x47be450
	float GetSplineLength();// 0x47bd60c
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x47bbd0c
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x47bdb6c
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x47bcb94
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x47bc3d8
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47bde68
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x47bcf24
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x47bbde8
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47bdbfc
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x47bcc24
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x47bc0ac
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47bdcc0
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x47bcce8
	int GetNumberOfSplinePoints();// 0x47be320
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x47bc90c
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47be24c
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x47bd35c
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x47bd8a0
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x47bd77c
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47bdf3c
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x47bd430
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x47bd634
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x47bd6fc
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x47bc704
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47be0e4
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x47bd1f4
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x47bd4b0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47be010
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x47bb80c
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x47bb444
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x47bb9d4
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x47bb5b8
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x47bb8f0
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x47bb654
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x47bb728
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x47bbb9c
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x47bbc80
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x47bbab8
	void ClearSplinePoints(bool bUpdateSpline);// 0x47bf448
	void AddSplineWorldPoint(out const Vector Position);// 0x47bee88
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x47befd8
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x47bf138
	void AddSplineLocalPoint(out const Vector Position);// 0x47bedfc
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x47bf250
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x47bf340

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x14]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 0x14]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 0x14]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 0x14]
	SplineMetadata* MetaData;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: TrainStateComponent.ActorComponent.Object
	<enum,TrainSaveData> PendingState;//[Offset: 0xa8, Size: 0x3c]
	<enum,TrainState*> TrainStateMap;//[Offset: 0xe8, Size: 0x3c]
	ApexTrain* Train;//[Offset: 0x124, Size: 0x4]
	TrainState* CurrentState;//[Offset: 0x13c, Size: 0x4]
	TrainstateConfig[] StateConfig;//[Offset: 0x144, Size: 0xc]

--------------------------------
Class: TrainState.Object
	AkAudioEvent*[] TempAudios;//[Offset: 0x1c, Size: 0xc]
	AkAudioEvent*[] Audios;//[Offset: 0x40, Size: 0xc]
	bool bAutoPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int EventID;//[Offset: 0x50, Size: 0x4]
	bool bShowBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	ApexTrain* Train;//[Offset: 0x58, Size: 0x4]
	ApexRail* CurrentRail;//[Offset: 0x5c, Size: 0x4]
	TrainStateComponent* TrainStateMachine;//[Offset: 0x60, Size: 0x4]
	void SelfPlayAudiosInTurn();// 0x27abb20
	void PlayAudiosInTurn(AkAudioEvent*[] InAudios);// 0x27aba20
	void BroadcastText();// 0x27abb0c

--------------------------------
Class: TrainstateConfig
	TrainState* State;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: TrainInfo
	float BodyLength;//[Offset: 0x0, Size: 0x4]
	class Actor* BodyClass;//[Offset: 0x4, Size: 0x4]
	float Padding;//[Offset: 0x8, Size: 0x4]
	bool bAllowIgnoreMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float DistanceTOLocomotive;//[Offset: 0x10, Size: 0x4]
	TrainCoach* Coach;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ConveyorBeltCamp.Actor.Object
	ApexRail* RailCache;//[Offset: 0x1e0, Size: 0x4]
	ConveyorBeltVehicle*[] ActiveBelts;//[Offset: 0x240, Size: 0xc]
	ConveyorBeltVehicle*[] SleepBelts;//[Offset: 0x24c, Size: 0xc]
	bool bActiveSpawnerAtBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	class ConveyorBeltVehicle* ConveyorBeltClass;//[Offset: 0x25c, Size: 0x4]
	FString TransTag;//[Offset: 0x260, Size: 0xc]
	ApexRail* RunRail;//[Offset: 0x26c, Size: 0x4]
	int BeltsPoolCapacity;//[Offset: 0x270, Size: 0x4]
	bool bUseCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	ConveyCampGroup[] Groups;//[Offset: 0x278, Size: 0xc]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	void UpdateRailLocation();// 0x25922ec
	void StartSpawnConveyBelt(ConveyCampGroup InGroup, int Index);// 0x2592134
	void SpawnCamp();// 0x2592300
	void PlayEffectOnBoxSwitchState(bool bUp);// 0x25921ec
	void OnVehicleDestroyed(Actor* Actor);// 0x2592274
	void OnRunRailChanged(Vector BeginLocation, Vector EndLocation);// 0x2ce6f18
	void OnBoxSwitchState(bool bUp);// 0x2ce6f18

--------------------------------
Class: ConveyorBeltVehicle.ApexTrain.Actor.Object
	AKAudioEventArgs[] CacheAudio;//[Offset: 0x480, Size: 0xc]
	FString IgnoreDirectionName;//[Offset: 0x494, Size: 0xc]
	void OnReceivedTrainStateChanged(enum TargetType);// 0x2491550
	void NetMulticastSetTrans(Transform Intrans);// 0x2592a50
	void MarkDestroy();// 0x258851c

--------------------------------
Class: AKAudioEventArgs
	AkAudioEvent* Audio;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ConveyCampGroup
	int BoxNum;//[Offset: 0x0, Size: 0x4]
	int BoxSpawnInterval;//[Offset: 0x4, Size: 0x4]
	int NextGroupInterval;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleEffectFactory.Info.Actor.Object
	<int,class ParticleEffectBase> MapEffectID2CameraParticleEffectCfg;//[Offset: 0x1d0, Size: 0x3c]

--------------------------------
Class: ParticleEffectBase.Object
	int ParticleEffectID;//[Offset: 0x1c, Size: 0x4]
	int ParticleDisplayDuration;//[Offset: 0x20, Size: 0x4]
	int DelayHideTime;//[Offset: 0x24, Size: 0x4]
	bool DestroyWhenHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool DeactivatePSCWhenHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool ShouldRefreshWhenCameraModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bUseTranslucencySortPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	int TranslucencySortPriority;//[Offset: 0x2c, Size: 0x4]
	delegate OnShow;//[Offset: 0x30, Size: 0x10]
	delegate OnReqHide;//[Offset: 0x40, Size: 0x10]
	bool EnableSeparateFov;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	ParticleSystem* ParticleTemplate;//[Offset: 0x54, Size: 0x20]
	ParticleSystemComponent* ParticleSystemComp;//[Offset: 0x78, Size: 0x4]
	FName BindSocket;//[Offset: 0x7c, Size: 0x8]
	Actor* InstigatorActor;//[Offset: 0x84, Size: 0x4]
	void SetParticleEffectID(int EffectID);// 0x26d242c
	void SetOnShowDelegate(delegate OnShowCallBack);// 0x26d2578
	void SetOnReqHideDelegate(delegate OnReqHideCallBack);// 0x26d24cc
	void ReqShow();// 0x26d26d4
	bool ReqHide(bool ForceImmediatelyHide);// 0x26d264c
	void PreShowParticleEffect();// 0x25094f0
	void PreLoad();// 0xfd338c
	void PostShowParticleEffect();// 0x1014170
	void OnReqHideParticleEffect();// 0x106b010
	void OnHideParticleEffect();// 0xfe936c
	ParticleSystemComponent* GetParticleSystemComp();// 0x26d2624
	int GetParticleEffectID();// 0x26d24a4

--------------------------------
Class: AudioEffectManager.ActorComponent.Object
	<FName,class AudioEffect> MapAudioEffectID2AudioEffectCfg;//[Offset: 0xa8, Size: 0x3c]
	FString[] BanksNames;//[Offset: 0xe4, Size: 0xc]
	enum AudioAttachMode;//[Offset: 0xf0, Size: 0x1]
	<FName,AudioEffect*> MapAudioID2InstancedAudioEffect;//[Offset: 0xf4, Size: 0x3c]
	<FName,int> MapAudioID2LastInstancedPlayingID;//[Offset: 0x130, Size: 0x3c]
	void StopParachuteAudioEvent(FName AudioEffectID);// 0x2501330
	void StopAudio(FName AudioEffectID, int PlayingID);// 0x2501428
	void PostParachuteAudioEvent(FName AudioEffectID);// 0x25013ac
	int PlayAudio(FName AudioEffectID, bool StopWhenAttachedToDestroyed, Actor* AudioInstigator);// 0x25014ec

--------------------------------
Class: AudioEffect.Object
	AkAudioEvent* AudioEvent_Autonomous;//[Offset: 0x1c, Size: 0x4]
	FName AttachSocket;//[Offset: 0x20, Size: 0x8]
	Vector AttachOffset;//[Offset: 0x28, Size: 0xc]
	AkComponent* AkComponent;//[Offset: 0x34, Size: 0x4]
	void Stop();// 0x2500d64
	int PlayAtAttachment(Actor* AttachedActor, bool StopWhenAttachedToDestroyed, Actor* AudioInstigator);// 0x2500d78

--------------------------------
Class: GlobalSpeakerComponent.ApexSoundSpeakerComponent.ActorComponent.Object
	void SettActorSwitch(Actor* Target, FName SwitchGroup, FName SwitchState);// 0x26255d8
	void SetComponentSwitch(AkComponent* Target, FName SwitchGroup, FName SwitchState);// 0x26256ec
	void SetActorRTPCValue(Actor* Target, FName RTPC, float Value, int InterpolationTimeMs);// 0x2625800
	int PlayWorldObjectSoundByName(Actor* Target, FName EventName, bool StopWhenOwnerDestroyed);// 0x2625bd0
	int PlayWorldObjectSound(enum SoundType, Actor* Target, AkAudioEvent* AkEvent, bool StopWhenOwnerDestroyed);// 0x2625cec
	int PlayUISoundByName(FName EventName);// 0x2625e44
	int PlayUISound(AkAudioEvent* AkEvent);// 0x2625ec8
	int PlaySoundAtLocationByName(FName EventName, Vector Location, Rotator Orientation);// 0x2625954
	int PlaySoundAtLocation(enum SoundType, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation);// 0x2625a74
	int PlayBGMByName(FName EventName);// 0x2625e44
	int PlayBGM(AkAudioEvent* AkEvent);// 0x2625ec8
	int Play2DSound(enum SoundType, AkAudioEvent* AkEvent);// 0x2625514

--------------------------------
Class: AudioRegionMgrComponent.ActorComponent.Object
	<AkComponent*> EnemyPositionComponents;//[Offset: 0xb8, Size: 0x3c]
	<AkComponent*> RemotePositionComponents;//[Offset: 0xf4, Size: 0x3c]
	AkComponent*[] RemoteUpdatedCompsCache;//[Offset: 0x130, Size: 0xc]
	AkComponent* RiverAmbComp;//[Offset: 0x13c, Size: 0x4]
	AkComponent* MagmaAmbComp;//[Offset: 0x140, Size: 0x4]
	FName[] RowNames;//[Offset: 0x144, Size: 0xc]
	AudioRegionInitializer* AudioRegionIniter;//[Offset: 0x150, Size: 0x4]
	AudioRegion* AudioRegionCore;//[Offset: 0x154, Size: 0x4]
	<int,AudioRegion*> EnemyPositionCompWithAudioRegionsMap;//[Offset: 0x158, Size: 0x3c]
	RiverAmbient* RiverAmbCore;//[Offset: 0x194, Size: 0x4]
	RiverAmbient* MagmaAmbCore;//[Offset: 0x198, Size: 0x4]
	AudioRegion* AudioRegionRemote;//[Offset: 0x19c, Size: 0x4]
	void RiverAmbUnloadBank();// 0x2502a0c
	void RiverAmbLoadBank();// 0x2502a20
	void OnRemoteExitAudioRegion(int AkCompId, uint32 RegionID);// 0x2502a34
	void OnRemoteEnterAudioRegion(int AkCompId, uint32 RegionID);// 0x2502af0
	void OnExitAudioRegion(uint32 RegionID);// 0x2502bac
	void OnEnterAudioRegion(uint32 RegionID);// 0x2502ce0
	void OnEnemyUpdate();// 0x25029d0
	void OnEnemyExitAudioRegion(int AkCompId, uint32 RegionID);// 0x2502a34
	void OnEnemyEnterAudioRegion(int AkCompId, uint32 RegionID);// 0x2502c24
	void MagmaAmbUnloadBank();// 0x25029e4
	void MagmaAmbLoadBank();// 0x25029f8

--------------------------------
Class: AudioRegionInitializer.Object

--------------------------------
Class: AudioRegion.Object

--------------------------------
Class: RiverAmbient.Object
	AkComponent* pRiverAmbComp;//[Offset: 0x14c, Size: 0x4]

--------------------------------
Class: GameStatisticsReportComponent.ActorComponent.Object
	DataReportInfoTableDataAsset* DataReportInfoTableDataAsset;//[Offset: 0xa8, Size: 0x4]
	int ZoneTD;//[Offset: 0x168, Size: 0x4]
	LootDronesDataReporter* LootDronesDataReporter;//[Offset: 0x170, Size: 0x4]
	void OnGameStart();// 0x261c38c

--------------------------------
Class: DataReportInfoTableDataAsset.DataAsset.Object
	<enum,DataReportModeInfo> DataReportInfoTable;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: DataReportModeInfo
	byte ReportCount;//[Offset: 0x0, Size: 0x1]
	float ReportTiming;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LootDronesDataReporter.Object
	void OnGameModeFinish();// 0x268ace8

--------------------------------
Class: BGMManager.ActorComponent.Object
	bool bStopLastBGMActively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	<enum,FName> MapBGMType2AudioEffect;//[Offset: 0xac, Size: 0x3c]
	void StopBGM(enum BGMType);// 0x253bfb4
	void SetBGM(enum BGMType, FName AudioEffectID);// 0x253bef4
	void PlayBGM(enum BGMType);// 0x253c02c

--------------------------------
Class: EffectLoaderManager.ActorComponent.Object
	EffectLoaderGroupManager*[] HighGroupManagers;//[Offset: 0xb4, Size: 0xc]
	EffectLoaderGroupManager*[] MiddleGroupManagers;//[Offset: 0xc0, Size: 0xc]
	EffectLoaderGroupManager*[] LowGroupManagers;//[Offset: 0xcc, Size: 0xc]
	EffectLoaderGroupManager*[] GroupManagers;//[Offset: 0xd8, Size: 0xc]
	FString EffectLoaderManagerClassName;//[Offset: 0xe4, Size: 0xc]
	ApexCharacter* OwnerCharacter;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: EffectLoaderGroupManager.Object
	enum PickerType;//[Offset: 0x1c, Size: 0x1]
	int PoolNum;//[Offset: 0x20, Size: 0x4]
	int Score;//[Offset: 0x24, Size: 0x4]
	EffectLoaderAction*[] EffectLoaderActions;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: EffectLoaderAction.Object
	EffectLoaderGroupManager* OwnerManager;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GameStateCommonInfo.ActorComponent.Object
	int LineTraceLowestZ;//[Offset: 0xa8, Size: 0x4]
	Vector2D MapHeightRange;//[Offset: 0xac, Size: 0x8]
	float SeaLevelHeightOffset;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ApexHeatShield.Actor.Object
	float LifeTime;//[Offset: 0x220, Size: 0x4]
	float StartupTime;//[Offset: 0x224, Size: 0x4]
	float DestroyTime;//[Offset: 0x228, Size: 0x4]
	float WarningTime;//[Offset: 0x22c, Size: 0x4]
	float DestroyDelayTime;//[Offset: 0x230, Size: 0x4]
	float Realtime;//[Offset: 0x234, Size: 0x4]
	float TakeDamageInterval;//[Offset: 0x238, Size: 0x4]
	float[] TakeDamageValue;//[Offset: 0x23c, Size: 0xc]
	float MaxHealth;//[Offset: 0x248, Size: 0x4]
	float PoisonCircleAlpha;//[Offset: 0x24c, Size: 0x4]
	AkAudioEvent* CenterDeployAudio;//[Offset: 0x250, Size: 0x20]
	AkAudioEvent* SustainAudio;//[Offset: 0x270, Size: 0x20]
	AkAudioEvent* PoisonSustainAudio;//[Offset: 0x290, Size: 0x20]
	AkAudioEvent* EndingAudio;//[Offset: 0x2b0, Size: 0x20]
	AkAudioEvent* PoisonEndingAudio;//[Offset: 0x2d0, Size: 0x20]
	AkAudioEvent* DestroyAudio;//[Offset: 0x2f0, Size: 0x20]
	AkAudioEvent* PoisonDestroyAudio;//[Offset: 0x310, Size: 0x20]
	AkAudioEvent* TakeDamageAudio;//[Offset: 0x330, Size: 0x20]
	CapsuleComponent* RangeCapsule;//[Offset: 0x350, Size: 0x4]
	StaticMeshComponent* HeatShieldMesh;//[Offset: 0x354, Size: 0x4]
	AdditiveFadeComponent* AdditiveFadeComponent;//[Offset: 0x358, Size: 0x4]
	Actor* MissileHeatShieldWeak;//[Offset: 0x35c, Size: 0x8]
	enum CurrentState;//[Offset: 0x364, Size: 0x1]
	RadiationCircleStateComponent* RadiationCircleStateComponentWeak;//[Offset: 0x368, Size: 0x8]
	CircleMgrComponent* CircleMgrComponentWeak;//[Offset: 0x370, Size: 0x8]
	Vector PoisonCirclePos;//[Offset: 0x378, Size: 0xc]
	float PoisonCircleRadius;//[Offset: 0x384, Size: 0x4]
	bool bInWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool bIsEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1]
	bool bNeedTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 0x1]
	float TakeDamageTime;//[Offset: 0x38c, Size: 0x4]
	float CurrentHealth;//[Offset: 0x390, Size: 0x4]
	int TeamID;//[Offset: 0x394, Size: 0x4]
	int CampID;//[Offset: 0x398, Size: 0x4]
	int CurrentIndex;//[Offset: 0x39c, Size: 0x4]
	void PlayAudio(out const AkAudioEvent* AudioEvent, bool bStopWhenAttachedToDestroyed);// 0x246b114
	void OnRepHealth();// 0x246b21c
	void NotifyHeatSHieldUI();// 0x246b100
	void NotifyEndUI();// 0x246b0ec
	void DisplayWarning();// 0x2ce6f18
	void DisplayTakeDamage();// 0x2ce6f18
	void DisplayStartup();// 0x2ce6f18
	void DisplayDestroy();// 0x2ce6f18
	void DisplayAtWork();// 0x2ce6f18

--------------------------------
Class: AdditiveFadeComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x1ec, Size: 0x4]
	LinearColor ShapeColorHDR;//[Offset: 0x1f0, Size: 0x10]
	float Radius;//[Offset: 0x200, Size: 0x4]
	float FadeDistance;//[Offset: 0x204, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	bool bAddedToSceneVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1]
	bool bIsMixFade;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 0x1]
	void SetRadius(float InRadius);// 0x4639e20

--------------------------------
Class: RadiationCircleStateComponent.ActorComponent.Object
	bool bIsEnableCircleVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bIsEnableCircleRunVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	bool bIsFinalCircleOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]
	bool bIsPreInitBlueCircleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab, Size: 0x1]
	bool bIsPreInitBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	RadiationCircleStateRep RadiationCircleStateRep;//[Offset: 0xb0, Size: 0x38]
	int TotalCircleWaveNum;//[Offset: 0xe8, Size: 0x4]
	void SetTotalCircleWaveNum(int CircleWaveNum);// 0x2731ab0
	void OnRep_RepRadiationCircleStateRep();// 0x2731134
	bool IsLessening();// 0x2731a88
	bool IsInWhiteCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x2731148
	bool IsInCircleLessenFrom(out const Vector Location, bool IsPosRebaseUsed);// 0x27312f4
	bool IsInBlueCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x2731450
	bool IsFinalCircleOver();// 0x2731224
	bool IsCircleValid();// 0x273124c
	bool IsActorInWhiteCircle(Actor* InActor);// 0x2731274
	bool IsActorInCircleLessenFrom(Actor* InActor);// 0x27313d0
	bool IsActorInBlueCircle(Actor* InActor);// 0x273152c
	bool HasLessened();// 0x2731a60
	Vector GetWhiteCircle();// 0x2731ba0
	int GetTotalCircleWaveNum();// 0x2731b28
	float GetShrinkDirDistance2CircleLessenFrom(out const Vector Location, bool IsPosRebaseUsed);// 0x27315ac
	float GetPlayerDistPercentBetweenTowCircle();// 0x27319c0
	Vector GetOrignBlueCircle();// 0x2731be8
	Vector GetNextWhiteCircle();// 0x25695b8
	float GetLessenProgress();// 0x27319e8
	bool GetIsPreInitBlueCircle();// 0x2731b78
	float GetDistPercentBetweenTowCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x2731864
	float GetDistance2WhiteCircle(out const Vector Location, bool IsPosRebaseUsed);// 0x2731708
	int GetCurCircleWave();// 0x2731b50
	float GetCurCircleStatusLastTime();// 0x2731a38
	float GetCurCircleStatusElapsedTime();// 0x2731a10
	Vector GetBlueCircle();// 0x2731c30
	float GetActorShrinkDirDistance2CircleLessenFrom(Actor* InActor);// 0x2731688
	float GetActorDistPercentBetweenTowCircle(Actor* InActor);// 0x2731940
	float GetActorDistance2WhiteCircle(Actor* InActor);// 0x27317e4
	void BroadcastShutDownCircle();// 0x2405154

--------------------------------
Class: RadiationCircleStateRep
	enum CircleInfo;//[Offset: 0x0, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x4, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x10, Size: 0xc]
	Vector NextWhiteCircle;//[Offset: 0x1c, Size: 0xc]
	int CircleWaveIndex;//[Offset: 0x28, Size: 0x4]
	float StartTimeSpan;//[Offset: 0x2c, Size: 0x4]
	float EndTimeSpan;//[Offset: 0x30, Size: 0x4]
	bool IsPreInitMiniMapShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: CircleMgrComponent.ActorComponent.Object
	RadiationCircleStateComponent* CircleStateComponent;//[Offset: 0xb0, Size: 0x4]
	int CareerNumberTips;//[Offset: 0xc0, Size: 0x4]
	float CircleBlueTimeScale;//[Offset: 0xc4, Size: 0x4]
	ApexCharacter* FirstCharacter;//[Offset: 0xc8, Size: 0x4]
	enum CircleType;//[Offset: 0xcc, Size: 0x1]
	FirstCircleCfg FirstCircleConfigs;//[Offset: 0xd0, Size: 0x18]
	CircleCfg[] CircleConfigs;//[Offset: 0xe8, Size: 0xc]
	int TeammatesTooFarEventID;//[Offset: 0xf4, Size: 0x4]
	float TeammatesTooFarDistance;//[Offset: 0xf8, Size: 0x4]
	float TeammatesTooFarCheckSeconds;//[Offset: 0xfc, Size: 0x4]
	CircleCfg[] RuntimeCircleConfigs;//[Offset: 0x100, Size: 0xc]
	bool bMakePainWhenOutOfBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	float CircleTimeScale;//[Offset: 0x110, Size: 0x4]
	Vector CurBlueCircle;//[Offset: 0x114, Size: 0xc]
	Vector CachedBlueCircle;//[Offset: 0x120, Size: 0xc]
	Vector CurWhiteCircle;//[Offset: 0x12c, Size: 0xc]
	Vector CachedWhiteCircle;//[Offset: 0x138, Size: 0xc]
	Vector NextCachedWhiteCircle;//[Offset: 0x144, Size: 0xc]
	int CurCircleIndex;//[Offset: 0x150, Size: 0x4]
	bool bPlaySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	bool bPlaySound2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1]
	int CircleLessenLogIntervalTicks;//[Offset: 0x178, Size: 0x4]
	CirleAreaVolume* CacheCircleAreaVolume;//[Offset: 0x180, Size: 0x4]
	CirleAreaVolume* PoisonCircleAreaVolumeConfig;//[Offset: 0x188, Size: 0x20]
	SequenceTimer* WaveTimer;//[Offset: 0x1a8, Size: 0x4]
	void SetCirclePainEnable(bool Enable);// 0x257505c
	CircleCfg GetCurrentCircleConfig();// 0x2574f60
	void EndReportCircleFlowData(int CircleIndex);// 0x2574e70
	void EndCircle();// 0x257515c
	void BeginReportCircleFlowData(int CircleIndex);// 0x2574ee8
	void BeginCircle();// 0x2575170
	void AheadOneCircleFlow(bool ExecuteCircleFunc);// 0x25750dc

--------------------------------
Class: FirstCircleCfg
	bool bUseCustomWhiteCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D WhiteCircleCenter;//[Offset: 0x4, Size: 0x8]
	bool bPreInitBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float BluerCircleRadius;//[Offset: 0x10, Size: 0x4]
	bool bConcentricCircles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool IsPreInitCircleShowOnMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]

--------------------------------
Class: CircleCfg
	float DelayTime;//[Offset: 0x0, Size: 0x4]
	CircleSoundStart WhiteCircleSoundStart;//[Offset: 0x4, Size: 0x10]
	CircleSoundDelay[] BlueCircleCountDownSound;//[Offset: 0x14, Size: 0xc]
	float BlueCircleStartLessenTime;//[Offset: 0x20, Size: 0x4]
	CircleSoundStart BlueCircleSoundStart;//[Offset: 0x24, Size: 0x10]
	float LessenDuration;//[Offset: 0x34, Size: 0x4]
	float WhiteCircleRadius;//[Offset: 0x38, Size: 0x4]
	float WhiteOffset;//[Offset: 0x3c, Size: 0x4]
	float RadianPainValue;//[Offset: 0x40, Size: 0x4]
	float RadianPainIntervalTime;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: CircleSoundStart
	float SoundDelayTime;//[Offset: 0x0, Size: 0x4]
	int SoundID1;//[Offset: 0x4, Size: 0x4]
	int SoundID2;//[Offset: 0x8, Size: 0x4]
	int SoundID3;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CircleSoundDelay
	int SoundIDFar;//[Offset: 0x0, Size: 0x4]
	int SoundIDClose;//[Offset: 0x4, Size: 0x4]
	float SoundDelayTime;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	FName[] AvoidAreaTag;//[Offset: 0x1d0, Size: 0xc]
	int LazyTryCountForPermittedPos;//[Offset: 0x1dc, Size: 0x4]
	Vector2D ForceCenterOnLinePointA;//[Offset: 0x1e0, Size: 0x8]
	Vector2D ForceCenterOnLinePointB;//[Offset: 0x1e8, Size: 0x8]
	BoxComponent* CircleBoxArea;//[Offset: 0x1f0, Size: 0x4]

--------------------------------
Class: SequenceTimer.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	FString TimerDesc;//[Offset: 0x20, Size: 0xc]
	float TimerDuration;//[Offset: 0x2c, Size: 0x4]
	SequenceTimerData[] RegisterTimers;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: SequenceTimerData
	float Time;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SurveyBeacon.SignificanceManagedActor.Actor.Object
	float FadeDist;//[Offset: 0x238, Size: 0x4]
	float NearDist;//[Offset: 0x23c, Size: 0x4]
	float HeightOffset;//[Offset: 0x240, Size: 0x4]
	float MaxDist;//[Offset: 0x244, Size: 0x4]
	float MaxAngle;//[Offset: 0x248, Size: 0x4]
	bool bIsShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	int Index;//[Offset: 0x250, Size: 0x4]
	ParticleSystem* DetectEnemyParticle;//[Offset: 0x254, Size: 0x20]
	ApexCharacter* BeUsedPlayer;//[Offset: 0x274, Size: 0x4]
	bool hasShowTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool hasOpenBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	void SetShowIcon(bool bNewShow);// 0x278c740
	void SetOffset(Transform Offset);// 0x278c850
	void SetIndex(int InIndex);// 0x278c9ac
	void Lua_MiniMapShowIcon();// 0x2ce6f18
	void Lua_MiniMapHideIcon();// 0x2ce6f18
	int GetPingType();// 0x278ca2c
	Transform GetOffset();// 0x278c7c0
	int GetIndex();// 0x278c97c
	void BrocastPlayDetectParticle(float DetectRadius);// 0xf42b8c
	void BP_PingSelf();// 0x2ce6f18
	void BP_OnUseBeacon(ApexCharacter* Character);// 0x2ce6f18
	void BP_OnStopUseBeacon(bool bHasInjected, ApexCharacter* Character);// 0x2ce6f18
	void BP_OnShowChange(bool bNewShow);// 0x2ce6f18
	void BP_OnFade(float Opacity);// 0x2ce6f18

--------------------------------
Class: InGameSingletonObject.Object

--------------------------------
Class: CommonSignMgr.ActorComponent.Object
	CommonSignData[] CommonSignDataList;//[Offset: 0xb0, Size: 0xc]
	CommonSignData[] PreRepCommonSignDataList;//[Offset: 0xbc, Size: 0xc]
	<int,CommonSignData> CommonSignDataMap_Client;//[Offset: 0xc8, Size: 0x3c]
	void Server_DeleteSign(int Index);// 0x2580344
	void OnRep_CommonSignDataList();// 0x2580330
	CommonSignData GetCommonSignData(int Index);// 0x25803bc
	void DeleteSignForSelf(const int Index);// 0x2580490
	void DeleteAllSign();// 0x258047c
	int CreateSignWithTimeForSelf(const Vector WorldPosition, const enum SignType, const float Duration);// 0x2580600
	int CreateSignForTeamWithData(ApexPlayerController* PlayerController, Vector WorldPosition, enum SignType, out const SignAdditionData SignAdditionData);// 0x25809f4
	int CreateSignForTeam(ApexPlayerController* PlayerController, Vector WorldPosition, enum SignType);// 0x2580b58
	int CreateSignForSelf(Vector WorldPosition, enum SignType, Actor* FollowedCharacter, int SignStyle, float Duration);// 0x258085c
	int CreateSignForAllWithData(Vector WorldPosition, enum SignType, out const SignAdditionData SignAdditionData);// 0x2580c64
	int CreateSignForAll(Vector WorldPosition, enum SignType);// 0x2580d80
	int CreateFollowedSignForSelf(Vector WorldPosition, enum SignType, Actor* FollowedCharacter, int SignStyle);// 0x258070c
	int CreateCommonSign_Client(out CommonSignData SignData);// 0x2580508

--------------------------------
Class: CommonSignData
	int SignSyncIndex;//[Offset: 0x0, Size: 0x4]
	Vector WorldPosition;//[Offset: 0x4, Size: 0xc]
	enum SignType;//[Offset: 0x10, Size: 0x1]
	enum TypeFor;//[Offset: 0x11, Size: 0x1]
	uint32 SourcePlayerID;//[Offset: 0x14, Size: 0x4]
	float Duration;//[Offset: 0x18, Size: 0x4]
	int TeamID;//[Offset: 0x1c, Size: 0x4]
	Actor* FollowedActor;//[Offset: 0x20, Size: 0x8]
	uint32 NetworkGUIDValue;//[Offset: 0x28, Size: 0x4]
	int SkinType;//[Offset: 0x2c, Size: 0x4]
	bool bIsClientCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SignAdditionData SignAdditionData;//[Offset: 0x34, Size: 0x8]
	float CreateTime;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: SignAdditionData
	int CampID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LootDronesPathsDataAsset.DataAsset.Object
	class SplinePathActor[] LootDronesPathsClass;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: SplinePathActor.Actor.Object
	Vector InitLocation;//[Offset: 0x1d0, Size: 0xc]

--------------------------------
Class: ApexGameSettings
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool KnockdownShield4NoSkipDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool IsSkipRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool IsNeedSpawnTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool KeepBackpackWhenNoTome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool ClearBackpackWhenChangeLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool ResetHealthWhenChangeLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	FName PlayerLoadoutTable;//[Offset: 0x8, Size: 0x8]
	FName LoadoutWeaponTable;//[Offset: 0x10, Size: 0x8]
	bool WithLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bForceLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool AutoAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	FName ModeItemJsonPath;//[Offset: 0x1c, Size: 0x8]
	FName ModeDynamicItemPath;//[Offset: 0x24, Size: 0x8]
	bool bIsAutoCreateLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	FString GameModeSkillConfigID;//[Offset: 0x30, Size: 0xc]
	int SecurityModeID;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: GameStateAirDropMgr.ActorComponent.Object
	AirDropSpawnInfo[] LandingAirdropArray;//[Offset: 0xa8, Size: 0xc]
	AirDropSpawnInfo[] LastAirdropArray;//[Offset: 0xb4, Size: 0xc]
	float ShowEffectTime;//[Offset: 0xc0, Size: 0x4]
	bool bNeedNotifySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	FString SpeakerNameKey;//[Offset: 0xc8, Size: 0xc]
	FString ContentKey;//[Offset: 0xd4, Size: 0xc]
	AkAudioEvent* AudioEvent;//[Offset: 0xe0, Size: 0x4]
	<enum,AirDropAudioConfigData> EventIDMap;//[Offset: 0xe4, Size: 0x3c]
	TimerHandle ShowCurPointsInfoTimer;//[Offset: 0x138, Size: 0x8]
	AirDropAreaSpawnInfo[] CurAreasInfo;//[Offset: 0x140, Size: 0xc]
	AirDropPointSpawnInfo[] CurPointsInfo;//[Offset: 0x14c, Size: 0xc]
	void OnSpawnAirDrops(int Round, enum AirDropType, enum ActorType, out const AirDropSpawnInfo[] SpawnInfoArray);// 0x2603720
	void OnSpawnAirDropAreas(int Round, enum AirDropType, out const AirDropAreaSpawnInfo[] SpawnInfoArray);// 0x26034c4
	void OnSpawnAirDropAreaFirsts(int Round, enum AirDropType, out const AirDropPointSpawnInfo[] SpawnInfoArray, float ShowTime);// 0x2603350
	void OnRep_RepCurPointsInfo();// 0x26031ec
	void OnRep_RepCurAreasInfo();// 0x2603200
	void OnRep_LandingAirdropArray();// 0x26035ec
	void OnPlayAirDropAreaNotify();// 0x260333c
	void OnAirDropLanded(int ID);// 0x26036a8
	AirDropPointSpawnInfo[] GetCurPointSpawnInfo();// 0x2603214
	AirDropAreaSpawnInfo[] GetCurAreaSpawnInfo();// 0x26032a8
	AirDropSpawnInfo[] GetAirDropSpawnInfoArray();// 0x2603600
	void ClearCurPointsInfo();// 0x26031d8
	void ClearAirDrop();// 0x2603694

--------------------------------
Class: AirDropSpawnInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	byte Type;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: AirDropAreaSpawnInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	int Level;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Radius;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AirDropPointSpawnInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	int Level;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AirDropAudioConfigData
	int EventID;//[Offset: 0x0, Size: 0x4]
	float DropAirDropTeamAudioDelta;//[Offset: 0x4, Size: 0x4]
	int DropAirDropTeamAudioID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SurfaceGridManager.DataAsset.Object
	<GridDataManager*> GridDatas;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: GridDataManager.Object
	Vector Origin;//[Offset: 0x1c, Size: 0xc]
	float GridSize;//[Offset: 0x28, Size: 0x4]
	int StreamingSize;//[Offset: 0x2c, Size: 0x4]
	int Row;//[Offset: 0x30, Size: 0x4]
	int Col;//[Offset: 0x34, Size: 0x4]
	GridDataTable* GridDataTablePtr;//[Offset: 0x38, Size: 0x4]
	GridDataTable* GridDataTable;//[Offset: 0x3c, Size: 0x20]
	GridDataTable*[] GridDataTableStreaming;//[Offset: 0x5c, Size: 0xc]
	GridDataTable*[] GridDataTableStreamingPtr;//[Offset: 0x68, Size: 0xc]

--------------------------------
Class: GridDataTable.DataAsset.Object
	bool bMinimal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int Row;//[Offset: 0x24, Size: 0x4]
	int Col;//[Offset: 0x28, Size: 0x4]
	int MinimalType;//[Offset: 0x2c, Size: 0x4]
	int[] DataTable;//[Offset: 0x30, Size: 0xc]
	int MaxTypeCount;//[Offset: 0x3c, Size: 0x4]
	<byte,byte> ValueMap;//[Offset: 0x40, Size: 0x3c]
	int RootTreeType;//[Offset: 0x7c, Size: 0x4]
	int RootTreeValue;//[Offset: 0x80, Size: 0x4]
	int Version;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: GameStateMapComponent.ActorComponent.Object
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemInfos;//[Offset: 0xac, Size: 0xc]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemAddInfos;//[Offset: 0xb8, Size: 0xc]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemChangeInfos;//[Offset: 0xc4, Size: 0xc]
	MiniMapStaticItemInfo[] ApexMiniMapStaticItemRemoveInfos;//[Offset: 0xd0, Size: 0xc]
	MiniMapStaticItemInfo[] ClientSideApexMiniMapStaticItemInfos;//[Offset: 0xdc, Size: 0xc]
	<int,MiniMapStaticItemInfo> CacheApexMiniMapStaticItemInfos;//[Offset: 0xe8, Size: 0x3c]
	void RemoveMapItemStaicInfo(int Index, enum Type);// 0x26090a0
	void OnRep_ApexMiniMapStaticItemInfos();// 0x2608d5c
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemRemoveInfos();// 0x2608d70
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemInfos();// 0x2608fd4
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemChangeInfos();// 0x2608e3c
	MiniMapStaticItemInfo[] GetApexMiniMapStaticItemAddInfos();// 0x2608f08
	void ChangeMapItemStaicStateInfo(int Index, enum Type, byte State, Vector Location, float Yaw);// 0x260915c
	int AddMapItemStaicInfo(enum Type, Vector Location, float Yaw, int ScaleType, float Length, bool Immediately, float Radius, int Level, int InTrainCoachIndex);// 0x26092f0

--------------------------------
Class: MiniMapStaticItemInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	byte Type;//[Offset: 0x4, Size: 0x1]
	byte State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]
	float Radius;//[Offset: 0x18, Size: 0x4]
	byte ScaleType;//[Offset: 0x1c, Size: 0x1]
	float Length;//[Offset: 0x20, Size: 0x4]
	int Level;//[Offset: 0x24, Size: 0x4]
	int TrainCoachIndex;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CharacterAnimationIntKey
	byte ListType;//[Offset: 0x0, Size: 0x1]
	byte AnimType;//[Offset: 0x1, Size: 0x1]
	byte PoseType;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: SkillConfigDataAsset.DataAsset.Object
	<enum,float> FloatDataAsset;//[Offset: 0x20, Size: 0x3c]
	<enum,bool> BoolDataAsset;//[Offset: 0x5c, Size: 0x3c]
	bool HasFloat(enum Key);// 0x276e4c8
	bool HasBool(enum Key);// 0x276e448
	float GetFloat(enum Key, float DefaultFloat);// 0x276e384
	bool GetBool(enum Key, bool DefaultBool);// 0x276e2b8

--------------------------------
Class: DsFunctionConfig
	int IsClose;//[Offset: 0x0, Size: 0x4]
	int FunctionId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GamblingMachine.SignificanceManagedActor.Actor.Object
	int SpeedMini;//[Offset: 0x238, Size: 0x4]
	int SpeedMax;//[Offset: 0x23c, Size: 0x4]
	int PlayerUserCount;//[Offset: 0x240, Size: 0x4]
	int MachineUserCount;//[Offset: 0x244, Size: 0x4]
	int ItemOutPut;//[Offset: 0x248, Size: 0x4]
	int CD;//[Offset: 0x24c, Size: 0x4]
	int Index;//[Offset: 0x250, Size: 0x4]
	void SetOffset(Transform Offset);// 0x25d31e0
	void SetIndex(int InIndex);// 0xf42a8c
	void ServerPlayGameMarkStart(FString BoxName, int PlayerKey);// 0x25d2dc0
	void ServerPlayGameMarkEnd(int PlayerKey);// 0x25d2e94
	enum ServerPlayGameCheck(FString BoxName, int PlayerKey);// 0x25d306c
	enum ServerPlayGame(out const int[] ListID, out const int[] ListNum, int PlayerKey);// 0x25d2f0c
	void OnCompEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x25d2a7c
	void OnCompBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x25d2bc4
	int GetPingType();// 0x25d333c
	Transform GetOffset();// 0x25d3148
	int GetIndex();// 0x25d330c

--------------------------------
Class: OverrideStateSyncData
	enum SrcPawnState;//[Offset: 0x0, Size: 0x1]
	enum DestPawnState;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: StateBlockMap
	enum State;//[Offset: 0x0, Size: 0x1]
	bool bRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	StateBlockData[] StateBlockData;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: StateBlockData
	enum BlockState;//[Offset: 0x0, Size: 0x1]
	int BlockCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StatePath
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	bool bEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum State;//[Offset: 0x5, Size: 0x1]
	bool bSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	byte MovementMode;//[Offset: 0x7, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: HeadNamePool
	float DistanceSq;//[Offset: 0x0, Size: 0x4]
	bool bEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	UserWidget* TargetWidget;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 0x4]
	TextureUVs UVs;//[Offset: 0x34, Size: 0x10]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 0xc]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 0x8]
	float Rotation;//[Offset: 0x60, Size: 0x4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float RenderPriority;//[Offset: 0x8, Size: 0x4]
	Vector2D Position;//[Offset: 0xc, Size: 0x8]
	Vector2D Size;//[Offset: 0x14, Size: 0x8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 0x10]
	float RenderOpacity;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 0x4]
	float V;//[Offset: 0x4, Size: 0x4]
	float UL;//[Offset: 0x8, Size: 0x4]
	float VL;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 0xc]
	Font* Font;//[Offset: 0x44, Size: 0x4]
	float TextScale;//[Offset: 0x48, Size: 0x4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 0x8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 0x10]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 0x10]
	byte HorzPosition;//[Offset: 0x7c, Size: 0x1]
	byte VertPosition;//[Offset: 0x7d, Size: 0x1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 0x24]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 0x10]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 0x8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: WeaponAntiCheatLogicObject.ApgameWeaponLogicObject.Object
	int ValidBulletNum;//[Offset: 0x28, Size: 0x4]
	CharacterPositionCheckRecord ShootPlayerPosInfo;//[Offset: 0x30, Size: 0x48]
	CharacterPositionCheckRecord HitPlayerPosInfo;//[Offset: 0x78, Size: 0x48]
	BulletHitInfoUploadData[] ServerCacheHitInfoData;//[Offset: 0x148, Size: 0xc]
	BulletHitInfoUploadData[] ServerRecordHitInfoData;//[Offset: 0x154, Size: 0xc]
	void SetSafetyScoreLastTime(enum SafeReason, float Time);// 0x280e678
	void ServerRecordHitInfoArray();// 0x280e8c0
	void ServerCacheHitInfoArray(out const BulletHitInfoUploadData[] InHitDataArr);// 0x280e8d4
	void ResetValidBulletNum();// 0x280e9b0
	void OperateRecordHitInfoSimp();// 0x280e8ac
	bool OnWeaponShootHitLinkCheck();// 0x280fb30
	bool OnWeaponShootHitCheck(out BulletHitInfoUploadData BulletHitData);// 0x280f874
	void OnWeaponReload();// 0x280fb58
	Vector GetShootPlayerShootDirAndDist(BulletHitInfoUploadData BulletHitData, out float Dist);// 0x280f940
	float GetSafetyScoreLastTime(enum SafeReason);// 0x280e5f8
	WeaponAntiCheatConfig GetAntiCheatConfig();// 0x280e860
	CharacterPositionCheckRecord GetActionPositonByTimeStamp(ApexCharacter* Character, double Timestamp, bool bAutonomous, out FString DebugStr);// 0x280ec40
	void ForceSetBulletNum();// 0x280e988
	void EnterSafetyScore(enum SafeReason, FString Details);// 0x280e734
	void ClearPlayerPosRecordInfo();// 0x280ec2c
	bool CheckWeaponCreditScore(out const BulletHitInfoUploadData BulletHitData);// 0x280f610
	bool CheckValidBulletNum(out const BulletHitInfoUploadData BulletHitData);// 0x280f6dc
	bool CheckShootStartPoint(out const BulletHitInfoUploadData BulletHitData);// 0x280f2e0
	bool CheckShootPlayerLuffy(out BulletHitInfoUploadData BulletHitData);// 0x280f3ac
	bool CheckShootObstacle(out BulletHitInfoUploadData BulletHitData);// 0x280efb0
	bool CheckShootInterval(out const BulletHitInfoUploadData BulletHitData);// 0x280f544
	bool CheckShootForward(out const BulletHitInfoUploadData BulletHitData);// 0x280eee4
	bool CheckShootEndPoint(out BulletHitInfoUploadData BulletHitData);// 0x280f148
	bool CheckShootDistance(out BulletHitInfoUploadData BulletHitData);// 0x280f07c
	bool CheckShootDataViewMove();// 0x280fae0
	bool CheckShootDataTimeOut(out const BulletHitInfoUploadData BulletHitData);// 0x280f478
	bool CheckShootDataImPactPoint();// 0x280fb08
	bool CheckShootDataChargeLens();// 0x280fab8
	bool CheckShootBulletID(out const BulletHitInfoUploadData BulletHitData);// 0x280f7a8
	bool CheckPointInsideSphere(Vector CheckPoint, Vector SphereCenter, float SphereRadius);// 0x280e9c4
	bool CheckPointInsideCapsule(Vector CheckPoint, Vector CapsuleCenter, float CapsuleHalfHeight, float CapsuleRadius);// 0x280ead4
	bool CheckPlayerForward(out const BulletHitInfoUploadData BulletHitData);// 0x280ee18
	bool CheckHitPlayerScale(out BulletHitInfoUploadData BulletHitData);// 0x280f214
	void AdjustValidBulletNum();// 0x280e99c
	void AdjustClipBulletByAntiCheat();// 0x280e974

--------------------------------
Class: BulletHitInfoUploadData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x4, Size: 0xc]
	PrimitiveComponent* ShootBaseComp;//[Offset: 0x10, Size: 0x8]
	Vector_NetQuantize PlyShtScl;//[Offset: 0x18, Size: 0xc]
	double ShootTimeStamp;//[Offset: 0x28, Size: 0x8]
	double Timestamp;//[Offset: 0x30, Size: 0x8]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x44, Size: 0xc]
	PrimitiveComponent* HitBaseComp;//[Offset: 0x50, Size: 0x8]
	Actor* Actor;//[Offset: 0x58, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x60, Size: 0x8]
	Vector_NetQuantize PlyHtScl;//[Offset: 0x68, Size: 0xc]
	int PlayerKey;//[Offset: 0x74, Size: 0x4]
	int AgentKnockdownShieldPlayerKey;//[Offset: 0x78, Size: 0x4]
	Vector_NetQuantize VMPlyIpt;//[Offset: 0x7c, Size: 0xc]
	Vector_NetQuantize VMAtAim;//[Offset: 0x88, Size: 0xc]
	Vector_NetQuantize VMFrRcl;//[Offset: 0x94, Size: 0xc]
	FName BoneName;//[Offset: 0xa0, Size: 0x8]
	float AimPercent;//[Offset: 0xa8, Size: 0x4]
	float AimChargePercent;//[Offset: 0xac, Size: 0x4]
	byte PelletID;//[Offset: 0xb0, Size: 0x1]
	byte SurfaceType;//[Offset: 0xb1, Size: 0x1]
	byte HitBodyType;//[Offset: 0xb2, Size: 0x1]
	byte ScopeType;//[Offset: 0xb3, Size: 0x1]
	byte AimChargeLevel;//[Offset: 0xb4, Size: 0x1]
	bool bHasCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bLens;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]

--------------------------------
Class: CharacterPositionCheckRecord
	double Timestamp;//[Offset: 0x0, Size: 0x8]
	double TimeLineRTT;//[Offset: 0x8, Size: 0x8]
	float CapsuleRadius;//[Offset: 0x10, Size: 0x4]
	float CapsuleHalfHeight;//[Offset: 0x14, Size: 0x4]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	Vector Velocity;//[Offset: 0x30, Size: 0xc]
	PrimitiveComponent* Base;//[Offset: 0x3c, Size: 0x8]

--------------------------------
Class: WeaponDisruptorLogicObject.ApgameWeaponLogicObject.Object
	bool bIsCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bChargingSuccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	void WeaponCharge();// 0x281aad0
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x281a8b8
	void OnSprintStateChange(int SprintState);// 0x281aa44
	void OnShot();// 0x281aa30
	void OnCharging();// 0xfd338c
	void OnChargePhaseChanged(enum NewPhase, enum OldPhase);// 0x281a69c
	void OnChargeItemChanged();// 0x281a758
	void OnChargeInterrupt();// 0x281aabc
	void OnChargeEnd();// 0x281aa08
	void OnChargeBegin();// 0x281aa1c
	void NotifyChargingEffect();// 0x281a688
	bool HasEnoughChargeItem();// 0x281a794
	bool HasCharged();// 0x281a890
	byte GetOwnerNetRole();// 0x281a76c
	void DisruptorEnergyDecreaseByTime();// 0x281a9b8
	void DisruptorEnergyDecreaseByShot();// 0x281a9cc
	bool ConsumeChargeItem(ItemDefineID ItemID, int count);// 0x281a7bc
	bool CheckCanCharge();// 0x281a9e0

--------------------------------
Class: WeaponBallisticLogicObject.ApgameWeaponLogicObject.Object
	void OnWeaponStopFire();// 0x2810a9c
	void OnWeaponStartFire();// 0x2810ab0
	void OnWeaponShootPlayer();// 0x2810a74
	void OnWeaponShoot();// 0x2810a88

--------------------------------
Class: TraceBulletLogicObject.ApgameWeaponLogicObject.Object
	Vector2D ScreenCenter;//[Offset: 0x2c, Size: 0x8]
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0x4c, Size: 0x14]
	TssModule* TssModule;//[Offset: 0x60, Size: 0x4]
	void UseTraceBullet(int UseNum);// 0x27a2fac
	void GetTraceBulletTrans(out Transform BulletStartTrans);// 0x27a2ea0
	bool CheckTraceRangeEnemy();// 0x27a2e6c
	bool CheckRemainTraceBullet(int UseNum);// 0x27a3024

--------------------------------
Class: AutoAimEnemyInfo
	ApexCharacter* EnemyPawn;//[Offset: 0x0, Size: 0x4]
	float DisToScreenCenterSq;//[Offset: 0x4, Size: 0x4]
	Vector WorldLocation;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: TssModule.ApexGameInstanceSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bCheckDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	FString[] ChannelHost;//[Offset: 0x44, Size: 0xc]
	FString[] ChannelIP;//[Offset: 0x50, Size: 0xc]
	EmulatorInfo GetEmulatorInfo();// 0x27b158c

--------------------------------
Class: ApexGameInstanceSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bCreateInDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bCreateInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: EmulatorInfo
	bool bEmulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString EmulatorName;//[Offset: 0x4, Size: 0xc]
	bool bRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bMalware;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bCDN;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bCS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bPermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: HeatSystemLogicObject.ApgameWeaponLogicObject.Object
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x26453a0
	int GetMaxHeat();// 0x2645378
	int GetCurrentHeat();// 0x25f26fc
	void BeginHeatIncrease();// 0x2645470
	void BeginHeatDecrease();// 0x264545c

--------------------------------
Class: ShootWeaponEffectLogicObject.WeaponEffectLogicObject.ApgameWeaponLogicObject.Object
	ParticleSystemComponent* FppMuzzleFXComp;//[Offset: 0x80, Size: 0x4]
	ParticleSystemComponent* TppMuzzleFXComp;//[Offset: 0x84, Size: 0x4]
	ParticleSystemComponent* AlternantMuzzleFXComp;//[Offset: 0x88, Size: 0x4]
	ParticleSystemComponent* FireLightFXComp;//[Offset: 0x8c, Size: 0x4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x90, Size: 0xc]
	Vector MuzzleFXOriginalScale;//[Offset: 0x9c, Size: 0xc]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0xa8, Size: 0x4]
	ParticleSystemComponent* FppShellDropFXComp;//[Offset: 0xac, Size: 0x4]
	ParticleSystemComponent* TppShellDropFXComp;//[Offset: 0xb0, Size: 0x4]
	ParticleSystemComponent* FppAlternateShellDropFXComp;//[Offset: 0xb4, Size: 0x4]
	ParticleSystemComponent* TppAlternateShellDropFXComp;//[Offset: 0xb8, Size: 0x4]
	float RandomRadius_Runtime;//[Offset: 0xd8, Size: 0x4]
	CameraShake* CameraShakeInst_FPP;//[Offset: 0xe8, Size: 0x4]
	CameraShake* CameraShakeInst_TPP;//[Offset: 0xec, Size: 0x4]
	CameraShake* CameraShakeInst_Aim;//[Offset: 0xf0, Size: 0x4]
	void StopChargeSound();// 0x2759ed0
	void OnWeaponUnEquipped();// 0xfd338c
	void OnWeaponEquipped();// 0xfd338c
	void OnStopFire();// 0x2759c10
	void OnStateEnter(enum State, enum EnteredOverrideState);// 0x275a0c0
	ParticleSystem* GetParticleSystem(FrameParticleEffect ParticleEffect, bool bIsFPP, bool bADS, bool bSelf);// 0x2759c24
	OBEffectBullet* GetOBEffectBullet(out const OBEffectBullet*[] OBEffectBulletsCacheList, int MaxBulletNum);// 0x2759fd0
	int GetAvailableOBEffectBulletNum(OBEffectBullet*[] OBEffectBulletsCacheList);// 0x2759ee4
	void AddActiveMuzzleFXQueue(bool bIsLocal, bool bIsScopeIn, bool bIsFPP, bool bHasBarrel, bool bHasCharged, bool bHasL4Barrel, float DistanceToViewer);// 0x275a428
	void ActiveMuzzleFX_Delay(bool bIsLocal, bool bIsScopeIn, bool bIsFPP, bool bHasBarrel, bool bHasCharged, bool bHasL4Barrel, float DistanceToViewer, bool bPreSpawn);// 0x275a17c
	void ActiveLocalShellDropFX(bool bIsFPP);// 0x275a67c

--------------------------------
Class: WeaponEffectLogicObject.ApgameWeaponLogicObject.Object
	<FName,ApexSoundCallback> SoundCallbackMap;//[Offset: 0x3c, Size: 0x3c]
	AudioRegionMgrComponent* AudioRegionMgr;//[Offset: 0x78, Size: 0x4]
	void OnSoundEventCallBack(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x281b660
	void HandleWeaponAction(byte Action);// 0x25d3bc0
	AkAudioEvent* GetAkAudioBySoundMap(out const <byte,AkAudioEvent*> SoundMap, byte Action);// 0x281b4d0

--------------------------------
Class: ApexSoundCallback
	ApexSoundCallbackConfig* CallBackConfig;//[Offset: 0x0, Size: 0x4]
	int SoundSeq;//[Offset: 0x4, Size: 0x4]
	delegate SoundEventCB;//[Offset: 0x8, Size: 0x10]
	Actor* Actor;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ApexSoundCallbackConfig.Object
	int CallbackMask;//[Offset: 0x1c, Size: 0x4]
	ApexAnimNotifySoundModule*[] Modules;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: FrameParticleEffect
	FString EffectName;//[Offset: 0x0, Size: 0xc]
	ParticleSystem* ParticleFPP;//[Offset: 0xc, Size: 0x20]
	ParticleSystem* ParticleFPPADS;//[Offset: 0x2c, Size: 0x20]
	ParticleSystem* ParticleTPPSelf;//[Offset: 0x4c, Size: 0x20]
	ParticleSystem* ParticleTPPOther;//[Offset: 0x6c, Size: 0x20]
	FName AttachSocket;//[Offset: 0x8c, Size: 0x8]
	enum ParticleEvent;//[Offset: 0x94, Size: 0x1]

--------------------------------
Class: OBEffectBullet.SignificanceManagedActor.Actor.Object
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x1e4, Size: 0xc]
	ParticleSystem* CurFXTemplate;//[Offset: 0x1f4, Size: 0x4]
	float CurMovingTime;//[Offset: 0x218, Size: 0x4]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x21c, Size: 0x4]

--------------------------------
Class: WeaponReloadLogicObject.ApgameWeaponLogicObject.Object
	WeaponReloadStageConfig[] CurReloadStageConfig;//[Offset: 0x2c, Size: 0xc]
	void WeaponReloadWaitOnServer();// 0x2832024
	void WeaponReloadWait();// 0x2832038
	void WeaponReloadStart();// 0x283204c
	void WeaponReloadEnd(bool bResetBulletNum, bool bNeedToServer, bool bNeedToClient);// 0x2831ef0
	bool WeaponReloadCheck();// 0x2832060
	bool VerifyAddBulletToClip(out int AddBulletNum, double AddBulletTime);// 0x2831a9c
	void UpdateWeaponReloadWait(float DeltaTime);// 0x2831cec
	void UpdateAutoReload(float DeltaTime);// 0x28315e4
	void StopReloadAndFire();// 0x28316f0
	void StopReload();// 0x2832210
	void StartReload();// 0x2832224
	void SimulateStartReloadWait();// 0x28320b0
	void SimulateEndReload();// 0x283209c
	void SetReloadStage(int ReloadStageIndex);// 0x2831d64
	void ResetReloadAnim();// 0x2831cb0
	void ResetFakeBulletNumInBackpack();// 0x2831bfc
	void OnWeaponUnEquip();// 0x2831808
	void OnWeaponPostSwap();// 0x28317f4
	void OnWeaponEquip();// 0x283181c
	void OnWeaponAttachEquipped(int ItemID, bool bEquip, enum SlotID);// 0x2831844
	void OnUnlimitedBulletChange(Controller* Instigator);// 0x283177c
	void OnStateInterrupted(enum LeavedState, enum Reason, enum InterruptedBy);// 0x2831ddc
	void OnReloadStageStart();// 0x2831cd8
	void OnReloadStageEnd();// 0x2831cc4
	void OnItemPickUpSuccess(out const PickupNotifyData PickupNotifyData);// 0x2831950
	void OnItemListNetUpdated();// 0x2831830
	void OnItemDropSuccess();// 0x28319f8
	void NotifyShootBtnPress();// 0x28320ec
	void NotifyAutoReloadUiEffect();// 0x2832088
	void InitReloadStageConfig();// 0x2831edc
	float GetStoredReloadAnimStartPercent();// 0x28321c4
	float GetReloadAnimStartPercent(int StartStageIndex);// 0x283211c
	float GetNearAddBulletTime(out int AddBulletNum);// 0x2831a0c
	float GetCurrentReloadAnimStartPercent();// 0x283219c
	float GetCurReloadTimeSum();// 0x28320c4
	enum GetCurReloadMethod();// 0x2832100
	void ForceStopReload();// 0x2832010
	int CostReserveBulletNum(int ClipNeedNum);// 0x2831b7c
	bool CheckStoredReloadStage();// 0x28321ec
	void CheckStopReloadAndStartFire(float InterruptCheckTime);// 0x2831704
	bool CheckBulletCanAddContinue();// 0x2831c10
	void CheckAutoReloadStart(bool bForceStart);// 0x283165c
	void CheckAutoReloadEnd();// 0x28316dc
	void AddBulletToClip(int AddNum);// 0x2831c38

--------------------------------
Class: PickupNotifyData
	bool bPickupResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int OccupiedCapacity;//[Offset: 0x4, Size: 0x4]
	int Capacity;//[Offset: 0x8, Size: 0x4]
	ItemDefineID DefineID;//[Offset: 0x10, Size: 0x10]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bIsAutoPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	enum PickupReason;//[Offset: 0x22, Size: 0x1]

--------------------------------
Class: ShootWeaponLogicObject.ApgameWeaponMainLogicObject.ApgameWeaponLogicObject.Object
	bool bMultiBulletHitCharacter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]
	enum ShootHitPostionAI;//[Offset: 0xaa, Size: 0x1]
	ParticleSystemComponent* LensParticleComponent1P;//[Offset: 0x15c, Size: 0x4]
	ParticleSystemComponent* LensParticleComponent3P;//[Offset: 0x160, Size: 0x4]
	ParticleSystemComponent* LensParticleComponent;//[Offset: 0x164, Size: 0x4]
	BulletHitInfoReplicateData[] RemoteBulletHitInfoData;//[Offset: 0x1ac, Size: 0xc]
	<uint32,BulletHitInfoUploadData> UploadDataSavedMap;//[Offset: 0x1d4, Size: 0x3c]
	<uint32,SecurityLogHitTargetInfo> HitTargetInfoSavedMap;//[Offset: 0x210, Size: 0x3c]
	Vector LastImpactEffectLocation;//[Offset: 0x24c, Size: 0xc]
	float LastImpactEffectTime;//[Offset: 0x258, Size: 0x4]
	Vector ShootTargetLoc;//[Offset: 0x25c, Size: 0xc]
	Actor* ShootHitActor;//[Offset: 0x268, Size: 0x8]
	void UpdateBulletHitData(out const BulletHitInfoReplicateData BulletHitArray);// 0x275871c
	void Update3DUIActor();// 0x2758f38
	void SubBackPackOrSpecialBulletNum(int Num);// 0x2758ec0
	void StopFireWeapon();// 0x2758e34
	bool StopFireFilter();// 0x2758e0c
	void SetMaxBulletNumInOneClip(int Num);// 0x2758bc0
	void SetCurSpecialBulletNum(int Num, enum ChangeReason, bool bToClient);// 0x2758a68
	void SetBulletNumInClip(int Num, enum ChangeReason, bool NeedToClient, bool NeedToServer);// 0x2758c38
	void ResetInitialBulletNumInClip(int InitBulletNum);// 0x2758d94
	void OnWeaponUnEquip();// 0x2759000
	void OnWeaponClipMaxBulletChanged();// 0x2758fd8
	void OnWeaponBulletChanged();// 0x2758fec
	void OnWeaponAttachCall(int ItemID, bool bEquip, enum SlotID);// 0x2758804
	void OnUnlimitedBulletChange(Controller* Instigator);// 0x2758f60
	void OnTargetCharacterDead();// 0x2758f4c
	void OnStopFire();// 0xfd338c
	void OnItemUpdated(ItemDefineID DefineID, int State);// 0x275899c
	bool JudgeCanReload();// 0x2758b98
	bool JudgeBulletFull();// 0x2758b70
	void HandleWeaponScopeUnEquiped();// 0x2758910
	void HandleWeaponScopeEquiped(int OpticalType);// 0x2758924
	void ConsumeBackPackOrSpecialBulletNum(int Num);// 0x2758e48
	void ClearPawnWeaponState();// 0x2759014

--------------------------------
Class: ApgameWeaponMainLogicObject.ApgameWeaponLogicObject.Object
	<FString,WeaponAttrModifyConfig> WeaponAttriModifyRun;//[Offset: 0x30, Size: 0x3c]
	<enum,LegendWeaponAttrModifyConfigList> LegendTypeWeaponAttriModifyRun;//[Offset: 0x6c, Size: 0x3c]
	void SepFrameNotifyEffect(byte Action);// 0x24e078c
	void OnWeaponUnEquipEnd();// 0x24e0578
	void OnWeaponEquipSecondWeapon();// 0x24e0578
	void OnWeaponEquip();// 0x24e058c
	bool IsOwnerAutonomous();// 0x24e073c
	bool IsLikeAutonomous();// 0x24e0764
	enum GetWeaponType();// 0x24e06a4
	bool GetWeaponIsInit();// 0x24e067c
	enum GetWeaponAnimType();// 0x24e05b4
	ItemDefineID GetItemDefineID();// 0x24e06f4
	bool GetIsCurUsingWeapon();// 0x24e05dc
	int GetDeriveID();// 0x24e06cc
	ItemHandleBase* GetBackpackItemHandle();// 0x24e0604
	BackpackComponent* GetBackPackComponent();// 0x24e062c
	void DoAttachWeaponToHand();// 0x24e05a0
	bool CheckWeaponEquiping();// 0x24e0654

--------------------------------
Class: BackpackComponent.ControllerComponentBase.ActorComponent.Object
	delegate ItemBeforeRemovedDelegate;//[Offset: 0xec, Size: 0xc]
	delegate ItemListUpdatedDelegate;//[Offset: 0xf8, Size: 0xc]
	delegate ItemListNetUpdatedDelegate;//[Offset: 0x104, Size: 0xc]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x110, Size: 0xc]
	delegate AmmoItemUpdatedDelegate;//[Offset: 0x11c, Size: 0xc]
	delegate SingleItemDeleteDelegate;//[Offset: 0x128, Size: 0xc]
	delegate ItemOperationFailedDelegate;//[Offset: 0x134, Size: 0xc]
	delegate CapacityUpdatedDelegate;//[Offset: 0x140, Size: 0xc]
	delegate ItemPickUpResultDelegate;//[Offset: 0x14c, Size: 0xc]
	delegate ItemDropSuccessDelegate;//[Offset: 0x158, Size: 0xc]
	delegate ItemUpdatedDelegate;//[Offset: 0x18c, Size: 0xc]
	BackpackAddRuleComp*[] AddtionalRuleComps;//[Offset: 0x198, Size: 0xc]
	<int,ItemRule> PerkItemRuleAddition;//[Offset: 0x1a4, Size: 0x3c]
	ItemRule[] ItemRuleNet;//[Offset: 0x1e0, Size: 0xc]
	ItemRule DefaultItemRule;//[Offset: 0x1ec, Size: 0xc]
	int64 FlowID;//[Offset: 0x208, Size: 0x8]
	IncNetArray ItemListNet;//[Offset: 0x21c, Size: 0x18]
	BattleItemData[] CachItemList;//[Offset: 0x234, Size: 0xc]
	IncNetArray ItemListChangeCache;//[Offset: 0x240, Size: 0x18]
	IncNetArray ItemListNetCache;//[Offset: 0x258, Size: 0x18]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x270, Size: 0xc]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x27c, Size: 0x3c]
	int DefaultCapacity;//[Offset: 0x2b8, Size: 0x4]
	int CapacityThreshold;//[Offset: 0x2bc, Size: 0x4]
	delegate ItemOperCountDelegate;//[Offset: 0x2c0, Size: 0xc]
	delegate ItemOperationDelegate;//[Offset: 0x2cc, Size: 0xc]
	ItemDefineID[] CurrentWeaponIdArray;//[Offset: 0x2d8, Size: 0xc]
	int Capacity;//[Offset: 0x2e4, Size: 0x4]
	int OccupiedCapacity;//[Offset: 0x2e8, Size: 0x4]
	int OccupiedExtraCapacity;//[Offset: 0x2ec, Size: 0x4]
	FString BPClassPath;//[Offset: 0x2fc, Size: 0xc]
	int virtualitemid;//[Offset: 0x308, Size: 0x4]
	uint32 ItemUseStartTime;//[Offset: 0x30c, Size: 0x4]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x250edf4
	int UpdateCapacity();// 0x250c5a0
	void UnequipItem(ItemDefineID DefineID);// 0x250dc24
	void TryMergeItemHandles(ItemDefineID DefineID, bool bLimited);// 0x250d63c
	int TakeItem(ItemDefineID DefineID, int count, bool bCallHandleDrop);// 0x250da2c
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x250eb9c
	void ShowEquipScopeShortcut(const ItemDefineID AttachID, int WeaponIndex, const ItemDefineID WeaponData);// 0x250c5e4
	void ServerPickupByItemID(int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x250fc18
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x250ef44
	bool ServerAlchemyWholeWeaponCustom(int DeriveID, out const WholeWeaponData WholeWeaponData, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x250fdbc
	bool ServerAlchemyWholeWeapon(int DeriveID, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x250ffc8
	void RPC_ServerPickupByItemID(int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x250fa6c
	void ReplaceTracking(out const ItemDefineID DefineID);// 0x250de78
	bool ReplaceItem(ItemDefineID ItemInBack, int ItemID, int ItemCount, enum SpawnReason);// 0x250e5b8
	void RemovePerkItemRuleAddition(out const int ItemID);// 0x2510258
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x2510938
	void ReceiveItemList();// 0x250ca28
	void ReceiveCapacity();// 0x24051f0
	bool QuickReplaceWeaponAttach(ItemDefineID WeaponDefineID, BattleItemHandleBase* ItemHandleBase);// 0x250e718
	void PickUpTracking(out const ItemDefineID DefineID);// 0x250e0c8
	bool PickupItemRecursive(ItemDefineID DefineID, BattleItemPickupInfo PickUpInfo, enum Reason);// 0x250f2c8
	bool PickupItem(ContainerData PickUpInfo, bool bBackpackInclude, bool bTrack);// 0x250f570
	bool PickupByItemID(out ItemDefineID ItemDefineID, int ItemID, int PickCount, bool bBackpackInclude, bool bTrack, enum PickupReason);// 0x250f868
	bool OverrideWeaponAttachment(ItemDefineID WeaponDefineID, int AttachmentID);// 0x250eac8
	void OnUseSkillItemFailed(ItemDefineID DefineID, byte FailedReason);// 0x250cc48
	void OnUseItem(const int ItemID);// 0x250dd34
	void OnSwitchBackpackOpenState(bool bOpen);// 0x2510130
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x2510adc
	void OnRep_ItemRuleNet();// 0x25101b8
	void OnRep_ItemListNet();// 0x250ca3c
	void OnRep_Capacity();// 0x250c5d0
	void OnDropItemSuccess(const int ItemID, enum DropReason);// 0x250ddb4
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x25108a8
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x2510818
	void NotifyItemListUpdated();// 0x25107fc
	void NotifyFull();// 0x250c814
	void NotifyCapacityUpdated();// 0xf4cc10
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x250d578
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int count);// 0x250d4bc
	bool IsAmmoDisable(out const ItemDefineID AmmoItemDefineID);// 0x250c77c
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x250ce90
	enum GetReplaceTrackingType(out const ItemDefineID DefineID);// 0x250df08
	enum GetPickUpTrackingType(out const ItemDefineID DefineID);// 0x250e158
	ItemRule GetPerkItemRuleAddition(int ItemID);// 0x25101cc
	Object* GetOwningObject();// 0x2510aac
	int GetOccupiedCapacity();// 0x250c828
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID, bool bIncludeBackpack);// 0x250cd1c
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x250c878
	ItemHandleBase*[] GetItemHandleList();// 0x250c920
	int GetItemCountByDefineID(ItemDefineID DefineID, bool bOnlyInstance);// 0x250d1c4
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x250d2a4
	double GetEquipGoldShieldTime(uint32 PlayerKey);// 0x250c4a0
	double GetEquipGoldHelmetTime(uint32 PlayerKey);// 0x250c520
	enum GetDropTrackingType(out const ItemDefineID DefineID);// 0x250e030
	int GetCapacity();// 0x250c850
	BattleItemData[] GetAllItemList();// 0x250d41c
	int GetAllItemCountByDefineID(ItemDefineID DefineID);// 0x250d134
	ItemHandleBase* FindItemHandleByDefineID(ItemDefineID DefineID);// 0x250c6ec
	ItemHandleBase* FindFirstItemHandleByItemId(int ItemID);// 0x250cfd4
	bool FindFirstItemBySubType(int SubType, out BattleItemData OutItemData);// 0x250d054
	void FillThrowPropsArray(out PickUpItemData[] Result, out const ThrowProps ThrowProps);// 0x250e1f0
	void ExtracteItemDataFromItemNet(out const NetArrayUnit NetItem, out BattleItemData ItemData);// 0x250d714
	void EquipItem(ItemDefineID DefineID);// 0x250dcac
	void DropTracking(out const ItemDefineID DefineID);// 0x250dfa0
	bool DropItem(ItemDefineID DefineID, int count, enum Reason);// 0x250f1a8
	PickUpItemData[] DropAllAndReturnPickUpList(enum Reason);// 0x250e424
	void DropAll();// 0x250f074
	int DropActivityItem(out const ItemDefineID DefineID, int count, enum Reason);// 0x250f088
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x250ed18
	bool DisuseAttachmentByType(ItemDefineID WeaponDefineID, enum AttachmentSocketType);// 0x250e7ec
	int ConsumeItem(ItemDefineID DefineID, int count);// 0x250db50
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x250cbbc
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x250cb30
	void ClientNotifyPickupResultTips(FString TipsStr);// 0x250c990
	void ClientNotifyPickupResult(const PickupNotifyData PickupNotifyData, int CapacityLimitedPickupCount);// 0x250ca50
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x25105d4
	int CheckCapacityForItem(ItemDefineID DefineID, int count);// 0x250d958
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x250ec88
	void BroadcastSingleItemUpdateDelegate(out const ItemDefineID DefineID);// 0x25104bc
	void BroadcastSingleItemDeleteDelegate(out const ItemDefineID DefineID);// 0x251042c
	void BroadCastItemUseEnd(ItemDefineID DefineID);// 0x251054c
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x25106ec
	void BroadcastItemListUpdatedDelegate();// 0x2510418
	void BroadcastItemBeforeRemovedDelegate(out const ItemDefineID DefineID);// 0x2510374
	void BroadcastCapacityUpdatedDelegate();// 0x2510404
	bool BackpackItemIsExist(int ItemID);// 0x250cf54
	int AttachmentSocketType(int ItemID);// 0x250e8c0
	int AllowPickupNum(ItemDefineID DefineID, int RequestPickupNum);// 0x250d884
	void AlchemyWholeWeapon(ItemHandleBase* ItemHandleBase, bool bInForceInitial);// 0x250e940
	BattleItemHandleBase* AlchemyBattleItemHandle(int DeriveID, int ItemID);// 0x250ea04
	void AddPerkItemRuleAddition(out const ItemRule ItemRule);// 0x25102e0
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x25109d0

--------------------------------
Class: ControllerComponentBase.ActorComponent.Object

--------------------------------
Class: BackpackAddRuleComp.ActorComponent.Object
	<int,int> MaxCountRules;//[Offset: 0xa8, Size: 0x3c]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 0x10]
	FName TargetAssociationName;//[Offset: 0x10, Size: 0x8]
	enum TargetSlot;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WholeWeaponData
	int ID;//[Offset: 0x0, Size: 0x4]
	int WeaponID;//[Offset: 0x4, Size: 0x4]
	int Color;//[Offset: 0x8, Size: 0x4]
	int[] AttachList;//[Offset: 0xc, Size: 0xc]
	int[] AttachCanEquip;//[Offset: 0x18, Size: 0xc]
	int[] AttachCanShow;//[Offset: 0x24, Size: 0xc]
	int SpecialBullet;//[Offset: 0x30, Size: 0x4]
	FName BulletIcon;//[Offset: 0x34, Size: 0x8]
	int QualityRule;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComponent;//[Offset: 0x108, Size: 0x4]
	BattleItemData ItemData;//[Offset: 0x110, Size: 0xb8]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x1cc, Size: 0xc]
	int DeriveID;//[Offset: 0x1d8, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	float UnitWeight;//[Offset: 0x1e0, Size: 0x4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6, Size: 0x1]
	void SpawnThrowPropsWrapper();// 0xfe936c
	void PostPickup(ContainerData PickUpInfo);// 0x2666b74
	bool IsUsable();// 0x10170d0
	bool HasEquippedFullAttachments();// 0x2666830
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x26668e0
	bool HandlePreDrop(int InCount, enum Reason);// 0x2666aa8
	bool HandlePickup(out const interface classNone ItemContainer, ContainerData PickUpInfo);// 0x2666db4
	bool HandleEnable(bool bEnable);// 0x264e79c
	bool HandleDrop(int InCount, enum Reason);// 0x26669dc
	bool HandleDisuse(enum Reason);// 0x2666858
	World* GetWorldInternal();// 0x2667064
	BattleItemData ExtractItemData();// 0x2667094

--------------------------------
Class: ContainerData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x10]
	int count;//[Offset: 0x10, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x14, Size: 0xc]
	int Index;//[Offset: 0x20, Size: 0x4]
	ItemDefineID TargetID;//[Offset: 0x28, Size: 0x10]
	enum Reason;//[Offset: 0x40, Size: 0x1]
	enum SpawnReason;//[Offset: 0x41, Size: 0x1]
	bool bLongPressReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bBlackMarket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	PickUpListWrapperActor* SourceActorWeakPtr;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.DynamicMovementActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x638, Size: 0x4]
	bool IsSeekerPickUpListActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	PickUpItemData[] PickUpDataList;//[Offset: 0x66c, Size: 0xc]
	void RPCNetMulticastModifyData(int Index, int RetCount);// 0x26eff7c
	void RPCNetMulticastAddPickUpData(PickUpItemData PickUpItemData);// 0x26efd88
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x2ce6f18
	void OnRep_PickUpDataList();// 0xfd338c
	void OnPickUpItemDelegate__DelegateSignature(int ItemDataIndex, int LeftCount);// 0x2ce6f18
	void OnInsertItemDelegate__DelegateSignature(int ItemDataIndex);// 0x2ce6f18
	PickUpItemData[] GetPickUpDataList();// 0x26f0078

--------------------------------
Class: ItemRule
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxCount;//[Offset: 0x4, Size: 0x4]
	int ProgressBarCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0, Size: 0xc]
	int[] unusePool;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 0x40]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x10]
	int count;//[Offset: 0x10, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x18, Size: 0xc]
	ItemAssociation[] Associations;//[Offset: 0x24, Size: 0xc]
	bool bCanUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bBackpackInclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	int DeriveID;//[Offset: 0x34, Size: 0x4]
	bool Fixed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 0xc]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 0x20]

--------------------------------
Class: BulletHitInfoReplicateData
	int ShootID;//[Offset: 0x0, Size: 0x4]
	double ShootTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x28, Size: 0xc]
	byte SurfaceType;//[Offset: 0x34, Size: 0x1]
	byte HitBodyType;//[Offset: 0x35, Size: 0x1]
	Actor* Actor;//[Offset: 0x38, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x40, Size: 0x8]
	FName BoneName;//[Offset: 0x48, Size: 0x8]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	uint16 Damage;//[Offset: 0x52, Size: 0x2]
	bool bFatalHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bLens;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	byte Pellet;//[Offset: 0x56, Size: 0x1]
	bool bLensFake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1]
	bool bCanTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: BulletEffectConfig
	ParticleSystem* NormalTailFx1P;//[Offset: 0x0, Size: 0x20]
	ParticleSystem* ChargeTailFx1P;//[Offset: 0x20, Size: 0x20]
	ParticleSystem* BeamTailFx3P;//[Offset: 0x40, Size: 0x20]
	ParticleSystem* LensTail1P;//[Offset: 0x60, Size: 0x20]
	ParticleSystem* LensTail3P;//[Offset: 0x80, Size: 0x20]
	HitEffectDataAsset* DefaultHitEffects;//[Offset: 0xa0, Size: 0x20]
	HitEffectDataAsset* SpecialHitEffects;//[Offset: 0xc0, Size: 0x20]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 0x4]
	float Head_SkullPiercer;//[Offset: 0x4, Size: 0x4]
	float Body;//[Offset: 0x8, Size: 0x4]
	float Thighs;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WeaponFireModeInfo
	enum FireMode;//[Offset: 0x0, Size: 0x1]
	FName BallisticName;//[Offset: 0x4, Size: 0x8]
	float ShootInterval;//[Offset: 0xc, Size: 0x4]
	int ShootMultiMax;//[Offset: 0x10, Size: 0x4]
	int ShootBullets;//[Offset: 0x14, Size: 0x4]
	float FireInterval;//[Offset: 0x18, Size: 0x4]
	float LensInterval;//[Offset: 0x1c, Size: 0x4]
	float FinalShootInterval;//[Offset: 0x20, Size: 0x4]
	float LinkInterval;//[Offset: 0x24, Size: 0x4]
	bool bCanLinkFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bCanAutoAimShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float AutoAimShootWaitTime;//[Offset: 0x2c, Size: 0x4]
	float DoubleClickInterval;//[Offset: 0x30, Size: 0x4]
	bool bCanSingleAimShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bCanShotgunReleaseShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	int UnlockItemID;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ApgameWeaponEventProxy.ApgameEventProxy.Object
	delegate WeaponEffectActionDelegate;//[Offset: 0x64, Size: 0xc]
	delegate OnWeaponEquipDelegate;//[Offset: 0x70, Size: 0xc]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x7c, Size: 0xc]
	delegate OnWeaponUnEquipEndDelegate;//[Offset: 0x88, Size: 0xc]
	delegate OnWeaponEquipSecondWeaponDelegate;//[Offset: 0x94, Size: 0xc]
	delegate OnCurBulletChange;//[Offset: 0xa0, Size: 0xc]
	delegate OnMaxBulletChange;//[Offset: 0xac, Size: 0xc]
	delegate OnOBBackpackBulletChange;//[Offset: 0xb8, Size: 0xc]
	delegate OnStartFireDelegate;//[Offset: 0xc4, Size: 0xc]
	delegate OnStopFireDelegate;//[Offset: 0xd0, Size: 0xc]
	delegate OnWeaponShootDelegate;//[Offset: 0xdc, Size: 0xc]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xe8, Size: 0xc]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xf4, Size: 0xc]
	delegate OnWeaponReloadAnimStartDelegage;//[Offset: 0x100, Size: 0xc]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x10c, Size: 0xc]
	delegate OnWeaponFireModeDelegate;//[Offset: 0x118, Size: 0xc]
	delegate OnWeaponAttachDelegate;//[Offset: 0x124, Size: 0xc]
	delegate OnEnergyValueChanged;//[Offset: 0x130, Size: 0xc]
	delegate WeaponPostFireDelegate;//[Offset: 0x13c, Size: 0xc]
	delegate OnPlayWeaponFrameStaticMeshEffectDelegate;//[Offset: 0x148, Size: 0xc]
	delegate OnDisruptorChargeValueChangedDelegate;//[Offset: 0x154, Size: 0xc]
	delegate OnWeaponAimChargeLevelChange;//[Offset: 0x160, Size: 0xc]
	delegate OnWeaponAimChargeValueChange;//[Offset: 0x16c, Size: 0xc]
	delegate OnPreFireEnergyIncrease;//[Offset: 0x178, Size: 0xc]
	delegate OnPreFireEnergyDecrease;//[Offset: 0x184, Size: 0xc]
	delegate OnHeatChangeDelegate;//[Offset: 0x190, Size: 0xc]
	delegate OnPlayWeaponFrameEffectParticleDelegate;//[Offset: 0x19c, Size: 0xc]
	delegate OnPlayWeaponFramMainEffectDelegate;//[Offset: 0x1a8, Size: 0xc]
	delegate OnScopeEquipDelegate;//[Offset: 0x1b4, Size: 0xc]
	delegate OnScopeUnequipDelegate;//[Offset: 0x1c0, Size: 0xc]
	delegate OnDisruptorChargeBeginOrEnd;//[Offset: 0x1d4, Size: 0xc]
	delegate PostShootDelegate;//[Offset: 0x1e0, Size: 0xc]
	ApgameWeaponCoreComponent* WeaponCoreComp;//[Offset: 0x1f4, Size: 0x4]
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x2ce6f18
	void ServerSendUnreliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x24e2b6c
	void ServerSendReliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x24e2cfc
	void ServerHandleTLogDataArray(uint16 InWeaponDataIdentity, const BulletHitInfoTLogData[] DataArray);// 0x24e32dc
	void ServerHandleHitDataArray(uint16 InWeaponDataIdentity, const BulletHitInfoUploadData[] DataArray, const SecurityAntiData AntiData);// 0x24e33ec
	void SendEventToServerWithId(out const ApgameEvent InEvent, bool bInReliable);// 0x24e316c
	void SendEventToClientWithId(out const ApgameEvent InEvent, bool bInReliable);// 0x24e2ffc
	void PostShootDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponShootDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x2ce6f18
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x2ce6f18
	void OnWeaponReloadAnimStartDelegage__DelegateSignature(float StartPercent);// 0x2ce6f18
	void OnWeaponPostFireDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponFireModeDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponEquipSecondWeaponDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponEquipDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponAttachDelegate__DelegateSignature(int ItemID, bool bEquip, enum SlotID);// 0x2ce6f18
	void OnWeaponAimChargeValueChangeDelegate__DelegateSignature();// 0x2ce6f18
	void OnWeaponAimChargeLevelChangeDelegate__DelegateSignature();// 0x2ce6f18
	void OnStopFireDelegate__DelegateSignature();// 0x2ce6f18
	void OnStartFireDelegate__DelegateSignature();// 0x2ce6f18
	void OnScopeUnequipDelegate__DelegateSignature();// 0x2ce6f18
	void OnScopeEquipDelegate__DelegateSignature(int OpticalType);// 0x2ce6f18
	void OnPreFireEnergyIncrease__DelegateSignature();// 0x2ce6f18
	void OnPreFireEnergyDecrease__DelegateSignature();// 0x2ce6f18
	void OnPlayWeaponFrameStaticMeshEffectDelegate__DelegateSignature(enum EffectEvent, float ValueData, int InStackCount);// 0x2ce6f18
	void OnPlayWeaponFrameMainEffectDelegate__DelegateSignature(enum EffectEvent, float ValueData, int InStackCount);// 0x2ce6f18
	void OnPlayWeaponFrameEffectParticleDelegate__DelegateSignature(enum EffectEvent, float ValueData);// 0x2ce6f18
	void OnOBBackpackBulletChange__DelegateSignature();// 0x2ce6f18
	void OnMaxBulletChange__DelegateSignature();// 0x2ce6f18
	void OnHeatChangeDelegate__DelegateSignature(float HeatValue);// 0x2ce6f18
	void OnEventPlayerLeaveOb(Actor* InTarget);// 0x24e243c
	void OnEventPlayerEnterOb(Actor* InTarget);// 0x24e24b4
	void OnEnergyValueChangedDelegate__DelegateSignature(float EnergyValue, enum EffectEvent);// 0x2ce6f18
	void OnDisruptorChargeValueChangedDelegate__DelegateSignature(float Value);// 0x2ce6f18
	void OnDisruptorChargeBeginOrEnd__DelegateSignature(bool bBegin);// 0x2ce6f18
	void OnCurBulletChange__DelegateSignature();// 0x2ce6f18
	void NetMulticastSendUnreliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x24e252c
	void NetMulticastSendReliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x24e26bc
	void NetMulticastEventWithId(out const ApgameEvent InEvent, bool bInReliable);// 0x24e2e8c
	void ClientSendUnreliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x24e284c
	void ClientSendReliableEventWithId(const ApgameEvent InEvent, uint16 InDataId);// 0x24e29dc

--------------------------------
Class: ApgameEventProxy.Object
	void ServerSendUnreliableEvent(const ApgameEvent InEvent);// 0x24d0b34
	void ServerSendReliableEvent(const ApgameEvent InEvent);// 0x24d0c7c
	void SendEventToServer(out const ApgameEvent InEvent, bool bInReliable);// 0x24d10a4
	void SendEventToClient(out const ApgameEvent InEvent, bool bInReliable);// 0x24d0f34
	void ResetToReusable(bool bInShrink);// 0x24d1718
	void NetMulticastSendUnreliableEvent(const ApgameEvent InEvent);// 0x24d0614
	void NetMulticastSendReliableEvent(const ApgameEvent InEvent);// 0x24d075c
	void NetMulticastEvent(out const ApgameEvent InEvent, bool bInReliable);// 0x24d0dc4
	bool K2_SendEvent(out const ApgameEvent InEvent);// 0x24d15f0
	void K2_RemoveListenersByObject(const Object* InObject, GameplayTag InTag);// 0x24d12b8
	void K2_RemoveListenersByHandle(out ApgameEventHandle IoHandle);// 0x24d1214
	ApgameEventHandle K2_ListenEventTag(GameplayTag InTag, const Object* InObject, out const delegate InCallback, out const ApgameEventListenParameters InParameters);// 0x24d13b8
	void ClientSendUnreliableEvent(const ApgameEvent InEvent);// 0x24d08a4
	void ClientSendReliableEvent(const ApgameEvent InEvent);// 0x24d09ec

--------------------------------
Class: ApgameEvent

--------------------------------
Class: ApgameEventHandle
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	uint16 DelegateId;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: ApgameEventListenParameters
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FName PriorityName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: BulletHitInfoTLogData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	byte PelletID;//[Offset: 0x4, Size: 0x1]
	Vector_NetQuantize ShootWeaponPos;//[Offset: 0x8, Size: 0xc]
	Vector2D ShootMomentRecoil;//[Offset: 0x14, Size: 0x8]
	byte ShootMomentSightType;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: Weapon3DUIEntity.Object
	float[] TimeLineList;//[Offset: 0x1c, Size: 0xc]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x28, Size: 0x4]
	FString WidgetKey;//[Offset: 0x2c, Size: 0xc]
	Weapon* OwnerWeapon;//[Offset: 0x38, Size: 0x4]
	FName AttachSocketName;//[Offset: 0x3c, Size: 0x8]
	DynamicMatConfig[] DynamicMatConfigList;//[Offset: 0x44, Size: 0xc]
	Weapon3DUIActor* DynamicMatActor;//[Offset: 0x50, Size: 0x4]
	LinearColor[] Weapon3DUIColorList;//[Offset: 0x54, Size: 0xc]
	void OnUpdateZoomScale(FText ZoomScale, bool BMax);// 0x280ab34
	void OnUpdateTickEnable(bool bTick);// 0x280b2f4
	void OnUpdateSightType(enum SightType);// 0x280aee4
	void OnUpdateShootTypeEvent(enum FireMode);// 0x280af5c
	void OnUpdateReserveBulletEvent(int ReserveBullet, int ReserveBulletBudget);// 0x280b0a4
	void OnUpdateHeat(float HeatValue);// 0x280ae6c
	void OnUpdateDisruptorEnergy(int CurEnergy, int MaxValue);// 0x280adb0
	void OnUpdateBulletEvent(byte ColorLevel, int BulletNum, int MaxBulletNum, int ReserveBulletBudget, bool bFlashing);// 0x280b160
	void OnUpdateAimShow(bool IsAiming, bool bHasEquipOptical);// 0x280afd4
	void OnUpdateAimBulletUI(bool bAiming);// 0x280ad30
	void OnStopFire();// 0x280a8cc
	void OnLensShootUpdate(int CurrentShootIndex, int MaxShootIndex);// 0x280a8e0
	void OnLensDecrease(float Value);// 0x280a854
	void OnAimChargeAnim(int ChargeLevel, float ChargeRatio, float AimChargeTime, bool AnimEnd, float InChargeSumRatio);// 0x280a99c
	void InitUIActor(class Actor UIBPClass, MeshComponent* AttachMesh, enum w3t, ApexCharacter* Character, Weapon* Weapon, ItemDefineID ItemID);// 0x280b374

--------------------------------
Class: DynamicMatConfig
	MaterialInstanceDynamic*[] DynamicMatList;//[Offset: 0x0, Size: 0xc]
	FString[] DynamicMatParams;//[Offset: 0xc, Size: 0xc]
	bool bOnlyAimShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bOnlyNotEquipShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	MeshComponent* MeshComponent;//[Offset: 0x1c, Size: 0x4]
	WidgetComponent* WidgetComponent;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: Weapon3DUIActor.SignificanceManagedActor.Actor.Object
	FName AttachSocket;//[Offset: 0x1e4, Size: 0x8]
	<FString,FString> MaterialParamMap;//[Offset: 0x1ec, Size: 0x3c]
	LinearColor[] BulletColorList;//[Offset: 0x228, Size: 0xc]
	WidgetComponent*[] TickWidgetCompList;//[Offset: 0x234, Size: 0xc]
	SceneComponent*[] TickActorCompList;//[Offset: 0x240, Size: 0xc]
	ApexCharacter* OwnerCharacter;//[Offset: 0x24c, Size: 0x4]
	Weapon* OwnerWeapon;//[Offset: 0x250, Size: 0x4]
	void SetThermalEffect(PrimitiveComponent* InComponent, bool bUse);// 0x280a2e4
	void OnZoom(bool bIsMax);// 0x2ce6f18
	void OnAim(bool bIsAim);// 0x2ce6f18

--------------------------------
Class: Weapon3DUIChangeNum
	byte ColorNum1;//[Offset: 0x0, Size: 0x1]
	byte ColorNum2;//[Offset: 0x1, Size: 0x1]
	byte ColorNum3;//[Offset: 0x2, Size: 0x1]
	byte FlashNum;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: WeaponFrameEffectParticleComp
	ParticleSystemComponent* ParticleSysCompFpp;//[Offset: 0x0, Size: 0x4]
	ParticleSystemComponent* ParticleSysCompTpp;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ShootWeaponDataAsset.WeaponDataAsset.DataAsset.Object
	bool bHasMagazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x640, Size: 0x1]
	bool bCanAutoShoot;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x640, Size: 0x1]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x640, Size: 0x1]
	bool bDebugGunBody;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x640, Size: 0x1]
	bool bDebugLog;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x640, Size: 0x1]
	bool bUseRebasing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x640, Size: 0x1]
	bool bDebugAIShotGunMissPierce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x640, Size: 0x1]
	bool bIsAlternantSocketActive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x640, Size: 0x1]
	bool bIsAutoSwitchAlternantSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x641, Size: 0x1]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x641, Size: 0x1]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x641, Size: 0x1]
	bool bAllowAim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x641, Size: 0x1]
	bool EnableManualCameraOffsetZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x641, Size: 0x1]
	bool bCirculateReloadAnim;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x641, Size: 0x1]
	bool bAimAndBolt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x641, Size: 0x1]
	byte AutoShootTargetChannel;//[Offset: 0x642, Size: 0x1]
	enum ReloadMethod;//[Offset: 0x643, Size: 0x1]
	enum SightType;//[Offset: 0x644, Size: 0x1]
	enum FireModeDefault;//[Offset: 0x645, Size: 0x1]
	enum FireModeDefaultUnlock;//[Offset: 0x646, Size: 0x1]
	enum ImpactDirType;//[Offset: 0x647, Size: 0x1]
	enum ShoulderADSConfig;//[Offset: 0x648, Size: 0x1]
	int8 BulletPierceTimes;//[Offset: 0x649, Size: 0x1]
	CurveVector* SprintCameraShakeCurve;//[Offset: 0x64c, Size: 0x4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x650, Size: 0x10]
	float HammerPointDamageRatio;//[Offset: 0x660, Size: 0x4]
	FName HitEffectTag;//[Offset: 0x664, Size: 0x8]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x66c, Size: 0x4]
	float AutoEffectBulletDelay;//[Offset: 0x670, Size: 0x4]
	float BeamStartLength;//[Offset: 0x674, Size: 0x4]
	float BeamStartLengthTpp;//[Offset: 0x678, Size: 0x4]
	Vector BulletDecalScale;//[Offset: 0x67c, Size: 0xc]
	float AutoShootDis;//[Offset: 0x688, Size: 0x4]
	float AutoShootADSDis;//[Offset: 0x68c, Size: 0x4]
	float AutoShootDelayBegin;//[Offset: 0x690, Size: 0x4]
	Vector2D AutoShootViewSize;//[Offset: 0x694, Size: 0x8]
	float AutoShootDelayEnd;//[Offset: 0x69c, Size: 0x4]
	float DrawShootLineTime;//[Offset: 0x6a0, Size: 0x4]
	float TppCosLimit;//[Offset: 0x6a4, Size: 0x4]
	int BulletDecreasePerShoot;//[Offset: 0x6a8, Size: 0x4]
	int BulletSendPerShoot;//[Offset: 0x6ac, Size: 0x4]
	float GameDeviationAccuracy;//[Offset: 0x6b0, Size: 0x4]
	float MaxMovingTime;//[Offset: 0x6b4, Size: 0x4]
	FOVChangeTimeByScope AdsStartTimeByWeapon;//[Offset: 0x6b8, Size: 0x20]
	FOVChangeTimeByScope AdsEndTimeByWeapon;//[Offset: 0x6d8, Size: 0x20]
	<int,float> SightID2ZoomTime;//[Offset: 0x6f8, Size: 0x3c]
	<enum,float> FPPCameraAimOffset;//[Offset: 0x734, Size: 0x3c]
	<FName,float> FPPCameraAimOffsetZ;//[Offset: 0x770, Size: 0x3c]
	<enum,float> AdsFovFactor;//[Offset: 0x7ac, Size: 0x3c]
	<enum,float> AdsFovChangeDelay;//[Offset: 0x7e8, Size: 0x3c]
	<enum,bool> TPPAdsUseFPP;//[Offset: 0x824, Size: 0x3c]
	float ADSWeaponFOV;//[Offset: 0x860, Size: 0x4]
	float SensitiveFireYawRate;//[Offset: 0x864, Size: 0x4]
	float SensitiveFirePitchRate;//[Offset: 0x868, Size: 0x4]
	FName DefaultScopeSocket;//[Offset: 0x86c, Size: 0x8]
	FName ShellDropSocketName;//[Offset: 0x874, Size: 0x8]
	FName AlternantShellDropSocketName;//[Offset: 0x87c, Size: 0x8]
	float WeaponBodyLength;//[Offset: 0x884, Size: 0x4]
	float ShotGunVerticalSpread;//[Offset: 0x888, Size: 0x4]
	float ShotGunHorizontalSpread;//[Offset: 0x88c, Size: 0x4]
	ItemDefineID BulletType;//[Offset: 0x890, Size: 0x10]
	float BulletFireSpeed;//[Offset: 0x8a0, Size: 0x4]
	WeaponFireModeInfo[] FireModeTotal;//[Offset: 0x8a4, Size: 0xc]
	WeaponFireModeInfo[] FireModeTotalAI;//[Offset: 0x8b0, Size: 0xc]
	FName MuzzleSocketName;//[Offset: 0x8bc, Size: 0x8]
	FName AlternantMuzzleSocketName;//[Offset: 0x8c4, Size: 0x8]
	FName BarrelStabilizerMuzzleName;//[Offset: 0x8cc, Size: 0x8]
	FName DefaultMuzzleSocketName;//[Offset: 0x8d4, Size: 0x8]
	CurveFloat* ShootIntervalCurve;//[Offset: 0x8dc, Size: 0x4]
	CurveFloat* ShootIntervalCurveTurbo;//[Offset: 0x8e0, Size: 0x4]
	FName ScopeAimCameraSocketName;//[Offset: 0x8e4, Size: 0x8]
	Rotator[] ShotgunBallisticTemplate;//[Offset: 0x8ec, Size: 0xc]
	float ShotgunBallisticScale;//[Offset: 0x8f8, Size: 0x4]
	CurveFloat* ShotgunAimPackRatioX;//[Offset: 0x8fc, Size: 0x4]
	CurveFloat* ShotgunAimPackRatioY;//[Offset: 0x900, Size: 0x4]
	CurveFloat* ShotgunAimChargePackX;//[Offset: 0x904, Size: 0x4]
	CurveFloat* ShotgunAimChargePackY;//[Offset: 0x908, Size: 0x4]
	float PostFireStateTime;//[Offset: 0x90c, Size: 0x4]
	float FireFovDeltaWithoutADS;//[Offset: 0x910, Size: 0x4]
	float FireFovDeltaWithoutADSLerpTime;//[Offset: 0x914, Size: 0x4]
	float FireFovDeltaWithoutADSDelay;//[Offset: 0x918, Size: 0x4]
	float LineTraceShootRadius;//[Offset: 0x91c, Size: 0x4]
	bool RemoteShootHitOrderPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 0x1]
	int RemoteShootHitAsyncNum;//[Offset: 0x924, Size: 0x4]
	bool RemoteShootAsyncOverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]
	int MaxBulletNumInOneClip;//[Offset: 0x92c, Size: 0x4]
	<int,int> ExtendMaxBulletNumInOneClipList;//[Offset: 0x930, Size: 0x3c]
	float BulletSphereRadius;//[Offset: 0x96c, Size: 0x4]
	CurveFloat* DistanceScaleCurve;//[Offset: 0x970, Size: 0x4]
	float MaxValidHitTime;//[Offset: 0x974, Size: 0x4]
	float TraceDistance;//[Offset: 0x978, Size: 0x4]
	float BulletRange;//[Offset: 0x97c, Size: 0x4]
	float TppBulletBias;//[Offset: 0x980, Size: 0x4]
	float AiBulletBias;//[Offset: 0x984, Size: 0x4]
	float AiTraceBlockDistance;//[Offset: 0x988, Size: 0x4]
	float RangeModifier;//[Offset: 0x98c, Size: 0x4]
	float ReferenceDistance;//[Offset: 0x990, Size: 0x4]
	float BaseImpactDamage;//[Offset: 0x994, Size: 0x4]
	float BaseLensDamage;//[Offset: 0x998, Size: 0x4]
	float BaseFinalShootDamage;//[Offset: 0x99c, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x9a0, Size: 0x4]
	float DamageImpulse;//[Offset: 0x9a4, Size: 0x4]
	float BulletMomentum;//[Offset: 0x9a8, Size: 0x4]
	int MaxNoGravityRange;//[Offset: 0x9ac, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0x9b0, Size: 0x4]
	ScopeZeroPointConfig[] ScopeZeroPointConfig;//[Offset: 0x9b4, Size: 0xc]
	float BulletSpeedScaleByCharMove;//[Offset: 0x9c0, Size: 0x4]
	int LowShootSoundBulletNum;//[Offset: 0x9c4, Size: 0x4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x9c8, Size: 0x4]
	float ImpactEffectSkipDistance;//[Offset: 0x9cc, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0x9d0, Size: 0x4]
	float MaxFakeLensEffectSkipDistance;//[Offset: 0x9d4, Size: 0x4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x9d8, Size: 0x4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x9dc, Size: 0x4]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x9e0, Size: 0x4]
	float RemainEffectTime;//[Offset: 0x9e4, Size: 0x4]
	float MinusBiasSquared;//[Offset: 0x9e8, Size: 0x4]
	CurveFloat* FakeStartPointSpeedCurve;//[Offset: 0x9ec, Size: 0x4]
	CurveFloat* FakeStartPointSpeedCurveADS;//[Offset: 0x9f0, Size: 0x4]
	float LensDecreaseTime;//[Offset: 0x9f4, Size: 0x4]
	float LenDecreaseValue;//[Offset: 0x9f8, Size: 0x4]
	float LensIncreaseTime;//[Offset: 0x9fc, Size: 0x4]
	float LensDrawDistance;//[Offset: 0xa00, Size: 0x4]
	float FinalDrawDistance;//[Offset: 0xa04, Size: 0x4]
	float CrossHairBurstSpeed;//[Offset: 0xa08, Size: 0x4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0xa0c, Size: 0x4]
	Vector2D TppBulletProgressLocation;//[Offset: 0xa10, Size: 0x8]
	float TppBulletProgressRotate;//[Offset: 0xa18, Size: 0x4]
	<enum,ViewAssistViewMoveConfig> ViewType2ViewMoveConfig;//[Offset: 0xa1c, Size: 0x3c]
	<enum,ViewAssistAimViewMoveConfig> ViewType2AimViewMoveConfig;//[Offset: 0xa58, Size: 0x3c]
	<enum,ViewAssistFireViewMoveConfig> ViewType2FireViewMoveConfig;//[Offset: 0xa94, Size: 0x3c]
	<enum,ViewAssistAimSnappingConfig> ViewType2AimSnappingConfig;//[Offset: 0xad0, Size: 0x3c]
	<enum,ViewAssistFireSnappingConfig> ViewType2FireSnappingConfig;//[Offset: 0xb0c, Size: 0x3c]
	<enum,ViewAssistEdgeSnappingConfig> ViewType2EdgeSnappingConfig;//[Offset: 0xb48, Size: 0x3c]
	<enum,ViewAssistTickSnappingConfig> ViewType2TickSnappingConfig;//[Offset: 0xb84, Size: 0x3c]
	<enum,ViewAssistQuickSnappingConfig> ViewType2QuickSnappingConfig;//[Offset: 0xbc0, Size: 0x3c]
	float ReloadTime;//[Offset: 0xbfc, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0xc00, Size: 0x4]
	float ReloadTimeVerifyCoff;//[Offset: 0xc04, Size: 0x4]
	float ForceExitReloadTimeRatio;//[Offset: 0xc08, Size: 0x4]
	float RelaodAnimTolerenceTime;//[Offset: 0xc0c, Size: 0x4]
	float ReloadTacticalAnimTolerenceTime;//[Offset: 0xc10, Size: 0x4]
	CurveFloat* DamageDecayCurve;//[Offset: 0xc14, Size: 0x4]
	CurveFloat* LensDamageDecayCurve;//[Offset: 0xc18, Size: 0x4]
	int MaxLensFakeEffect;//[Offset: 0xc1c, Size: 0x4]
	Vector2D BaseLenFactor;//[Offset: 0xc20, Size: 0x8]

--------------------------------
Class: FOVChangeTimeByScope
	float NoAim;//[Offset: 0x0, Size: 0x4]
	float Sight1X;//[Offset: 0x4, Size: 0x4]
	float Sight2X;//[Offset: 0x8, Size: 0x4]
	float Sight3X;//[Offset: 0xc, Size: 0x4]
	float Sight4X;//[Offset: 0x10, Size: 0x4]
	float Sight6X;//[Offset: 0x14, Size: 0x4]
	float Sight8X;//[Offset: 0x18, Size: 0x4]
	float Sight10X;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ScopeZeroPointConfig
	int ScopeItemID;//[Offset: 0x0, Size: 0x4]
	int ScopeSight;//[Offset: 0x4, Size: 0x4]
	float[] ZeroPointDistanceArray;//[Offset: 0x8, Size: 0xc]
	float[] ZeroPointUIBiasArray;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: ViewAssistViewMoveConfig
	bool EnableViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float ViewAccelerateRadius;//[Offset: 0x4, Size: 0x4]
	float ViewDecelerateRadius;//[Offset: 0x8, Size: 0x4]
	float EdgeDecelerateWidth;//[Offset: 0xc, Size: 0x4]
	CurveFloat* EdgeDecelerateFactor;//[Offset: 0x10, Size: 0x4]
	float MaxDistance;//[Offset: 0x14, Size: 0x4]
	float BaseAccelerateSpeed;//[Offset: 0x18, Size: 0x4]
	float BaseDecelerateSpeed;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* DistanceFactor;//[Offset: 0x20, Size: 0x4]
	CurveFloat* DecelerateCurve;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ViewAssistAimViewMoveConfig
	bool EnableAimViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableAimViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float AimDecelerateRadius;//[Offset: 0x4, Size: 0x4]
	float AimAccelerateRadius;//[Offset: 0x8, Size: 0x4]
	float AimMaxDistance;//[Offset: 0xc, Size: 0x4]
	float AimEdgeDecelerateWidth;//[Offset: 0x10, Size: 0x4]
	CurveFloat* AimEdgeDecelerateFactor;//[Offset: 0x14, Size: 0x4]
	float AimingAccelerateFactor;//[Offset: 0x18, Size: 0x4]
	float AimBaseDecelerateSpeed;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* AimDistanceFactor;//[Offset: 0x20, Size: 0x4]
	CurveFloat* AimDecelerateCurve;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ViewAssistFireViewMoveConfig
	bool EnableFireViewAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableFireViewAssistDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float FireDecelerateRadius;//[Offset: 0x4, Size: 0x4]
	float FireAccelerateRadius;//[Offset: 0x8, Size: 0x4]
	float FireMaxDistance;//[Offset: 0xc, Size: 0x4]
	float FireAccelerateFactor;//[Offset: 0x10, Size: 0x4]
	float FireBaseDecelerateSpeed;//[Offset: 0x14, Size: 0x4]
	float FireEdgeDecelerateWidth;//[Offset: 0x18, Size: 0x4]
	CurveFloat* FireEdgeDecelerateFactor;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* FireDistanceFactor;//[Offset: 0x20, Size: 0x4]
	CurveFloat* FireDecelerateCurve;//[Offset: 0x24, Size: 0x4]
	float FireDecelerateTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ViewAssistAimSnappingConfig
	bool EnableAimSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableAimPitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableAimSnappingDebug;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepAimSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float AimSnappingCD;//[Offset: 0x4, Size: 0x4]
	<enum,float> BaseAimSnappingSpeed;//[Offset: 0x8, Size: 0x3c]
	float AimSnappingMaxDistance2Reticle;//[Offset: 0x44, Size: 0x4]
	<enum,float> AimSnappingSightFactor;//[Offset: 0x48, Size: 0x3c]
	float MaxAimSnappingDistance;//[Offset: 0x84, Size: 0x4]
	CurveFloat* AimSnappingDistanceFactor;//[Offset: 0x88, Size: 0x4]
	float EnemyCrouchAimSnappingSizeFactor;//[Offset: 0x8c, Size: 0x4]
	float EnemyDyingAimSnappingSizeFactor;//[Offset: 0x90, Size: 0x4]
	float AimSnappingTime;//[Offset: 0x94, Size: 0x4]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: ViewAssistFireSnappingConfig
	bool EnableFireSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableFirePitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableFireSnappingDebug;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepFireSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float FireSnappingCD;//[Offset: 0x4, Size: 0x4]
	<enum,float> BaseFireSnappingSpeed;//[Offset: 0x8, Size: 0x3c]
	float NoAimFireSnappingSpeed;//[Offset: 0x44, Size: 0x4]
	<enum,float> FireSnappingMaxDistance2Reticle;//[Offset: 0x48, Size: 0x3c]
	float NoAimFireSnappingMaxDistance2Reticle;//[Offset: 0x84, Size: 0x4]
	float MaxFireSnappingDistance;//[Offset: 0x88, Size: 0x4]
	CurveFloat* FireSnappingDistanceFactor;//[Offset: 0x8c, Size: 0x4]
	float EnemyCrouchFireSnappingSizeFactor;//[Offset: 0x90, Size: 0x4]
	float EnemyDyingFireSnappingSizeFactor;//[Offset: 0x94, Size: 0x4]
	float FireSnappingTime;//[Offset: 0x98, Size: 0x4]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: ViewAssistEdgeSnappingConfig
	bool EnableEdgePushing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnablePitchEdgePushing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableDebugEdgePushing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool KeepEdgePushingEvenAttach;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EdgePushingRadius;//[Offset: 0x4, Size: 0x4]
	float EdgePushingWidth;//[Offset: 0x8, Size: 0x4]
	float EdgePushingMaxDistance;//[Offset: 0xc, Size: 0x4]
	CurveFloat* EdgePushingDistanceFactor;//[Offset: 0x10, Size: 0x4]
	float EdgePushingMinSpeed;//[Offset: 0x14, Size: 0x4]
	float BaseEdgePushingSpeed;//[Offset: 0x18, Size: 0x4]
	float EdgePushingTime;//[Offset: 0x1c, Size: 0x4]
	float EdgePushingCD;//[Offset: 0x20, Size: 0x4]
	float GamePadTriggerThreshold;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ViewAssistTickSnappingConfig
	bool EnableTickSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableTickPitchSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool DebugDrawTickSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float TickSnappingMaxDistance2Reticle;//[Offset: 0x4, Size: 0x4]
	float TickSnappingMaxDistance;//[Offset: 0x8, Size: 0x4]
	CurveFloat* TickSnappingDistanceFactor;//[Offset: 0xc, Size: 0x4]
	float TickSnappingSpeed;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ViewAssistQuickSnappingConfig
	bool EnableQuickFireSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool EnableQuickAimSnapping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool EnableQuickPitchSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool DebugDrawQuickSnapping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float QuickSnappingCD;//[Offset: 0x4, Size: 0x4]
	float QuickSnappingMaxDistance;//[Offset: 0x8, Size: 0x4]
	float QuickSnappingTime;//[Offset: 0xc, Size: 0x4]
	float QuickSnappingMaxDistance2Reticle;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WeaponStateManagerLogicObject.ApgameWeaponLogicObject.Object
	int ChangeCounts;//[Offset: 0xb4, Size: 0x4]
	void RPC_ServerReportStateRecord(enum State, int Index, bool bClient, bool bAI, bool bLostLink);// 0x28348a0
	void OnWeaponAttachCall(int InItemID, bool bInEquip, enum InSlotID);// 0x2834a54

--------------------------------
Class: PickupItemConfigData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FText ItemName;//[Offset: 0x4, Size: 0xc]
	FText ShotItemDesc;//[Offset: 0x10, Size: 0xc]
	FName ItemSmallIcon;//[Offset: 0x1c, Size: 0x8]
	FName ItemBigIcon;//[Offset: 0x24, Size: 0x8]
	int ItemQuality;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	delegate OnPlayerWeaponChangeState;//[Offset: 0xac, Size: 0xc]
	delegate OnPlayerStartFireDelegate;//[Offset: 0xb8, Size: 0xc]
	delegate OnPlayerStopFireDelegate;//[Offset: 0xc4, Size: 0xc]
	delegate OnPlayerWeaponShootDelegate;//[Offset: 0xd0, Size: 0xc]
	delegate OnPlayerWeaponHitDelegate;//[Offset: 0xdc, Size: 0xc]
	delegate OnPlayerWeaponReloadEndDelegate;//[Offset: 0xe8, Size: 0xc]
	delegate OnWeaponDestroyDelegate;//[Offset: 0xf4, Size: 0xc]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x100, Size: 0xc]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x10c, Size: 0xc]
	delegate OnPutOnWeaponBeginDelegate;//[Offset: 0x118, Size: 0xc]
	delegate OnPutOnWeaponEndDelegate;//[Offset: 0x124, Size: 0xc]
	delegate OnPutOffBeginDelegate;//[Offset: 0x130, Size: 0xc]
	delegate OnPutOffEndDelegate;//[Offset: 0x13c, Size: 0xc]
	delegate PreSwapWeaponDelegate;//[Offset: 0x148, Size: 0xc]
	delegate PostSwapWeaponDelegate;//[Offset: 0x154, Size: 0xc]
	delegate EnterFireChangeStageDelegate;//[Offset: 0x188, Size: 0xc]
	delegate OnUnEquipImmediatelyDelegate;//[Offset: 0x194, Size: 0xc]
	delegate EventChangeUseWeaponSlot;//[Offset: 0x1a0, Size: 0xc]
	ApexCharacter* OwnerCharacter;//[Offset: 0x1c0, Size: 0x4]
	WeaponTransformConfig[] WeaponTransformConfigs;//[Offset: 0x1c4, Size: 0xc]
	bool bHnadleWeaponFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bUseSimuScreenRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	float WeaponDisInView;//[Offset: 0x1d4, Size: 0x4]
	float CheckWeaponFollowTime;//[Offset: 0x1d8, Size: 0x4]
	float CheckWeaponFollowUpdateTime;//[Offset: 0x1dc, Size: 0x4]
	float WeaponFollowDisMin;//[Offset: 0x1e0, Size: 0x4]
	float WeaponFollowDisMax;//[Offset: 0x1e4, Size: 0x4]
	float WeaponFollowDisMinADS;//[Offset: 0x1e8, Size: 0x4]
	float WeaponFollowDisMaxADS;//[Offset: 0x1ec, Size: 0x4]
	float SimuScreenRatioMin;//[Offset: 0x1f0, Size: 0x4]
	float SimuScreenRatioMax;//[Offset: 0x1f4, Size: 0x4]
	<enum,SimuWeaponFollow> TeamWeapon1Follow;//[Offset: 0x1f8, Size: 0x3c]
	<enum,SimuWeaponFollow> TeamWeapon2Follow;//[Offset: 0x234, Size: 0x3c]
	<enum,SimuWeaponFollow> EnemyWeapon1Follow;//[Offset: 0x270, Size: 0x3c]
	<enum,SimuWeaponFollow> EnemyWeapon2Follow;//[Offset: 0x2ac, Size: 0x3c]
	enum[] StatesToFire;//[Offset: 0x2ec, Size: 0xc]
	bool bDrawAutoShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bBallisticRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	bool bBallisticBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1]
	bool bCostFireSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb, Size: 0x1]
	bool bRecoveryEndClearPressGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	bool bLinkFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	bool bFireShakeOld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 0x1]
	int FireShakeCounts;//[Offset: 0x300, Size: 0x4]
	float MinCreditScoreEnableDamage;//[Offset: 0x304, Size: 0x4]
	<FName,WeaponBallisticInfo> WeaponBallisticMap;//[Offset: 0x30c, Size: 0x3c]
	int BulletNoEnoughCount;//[Offset: 0x348, Size: 0x4]
	enum[] StatesCacheFire;//[Offset: 0x34c, Size: 0xc]
	delegate OnWeaponAttachChangedDelegate;//[Offset: 0x368, Size: 0xc]
	delegate OnWeaponAttachEquipDelegate;//[Offset: 0x374, Size: 0xc]
	float SwitchWeaponValue;//[Offset: 0x380, Size: 0x4]
	enum CurUseWeaponSlot;//[Offset: 0x384, Size: 0x1]
	enum SyncUseWeaponSlot;//[Offset: 0x385, Size: 0x1]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	SwitchWeaponParamter SimSwitchWeapon;//[Offset: 0x3fa, Size: 0x5]
	ShootWeaponBullet*[] BulletCacheList;//[Offset: 0x420, Size: 0xc]
	AutoEffectBullet*[] AutoEffectBulletCacheList;//[Offset: 0x42c, Size: 0xc]
	OBEffectBullet*[] OBEffectBulletCacheList;//[Offset: 0x438, Size: 0xc]
	class ShootWeaponBullet* BulletTemplate;//[Offset: 0x444, Size: 0x4]
	class AutoEffectBullet* BulletEffectTemplate1P;//[Offset: 0x448, Size: 0x4]
	class OBEffectBullet* BulletEffectTemplate3P;//[Offset: 0x44c, Size: 0x4]
	ApgameWeaponSlotMap RepWeaponSlotMap;//[Offset: 0x480, Size: 0x1]
	int GunAdsGuideId;//[Offset: 0x4bc, Size: 0x4]
	float EnemyDistance;//[Offset: 0x4c0, Size: 0x4]
	<enum,int> GunGuideMap;//[Offset: 0x4c4, Size: 0x3c]
	enum[] AdsGunGuide;//[Offset: 0x500, Size: 0xc]
	bool bUseThermal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	bool bGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1]
	void SwitchWeaponBySlot(enum Slot, bool bUseAnimation, bool bNeedPop, bool bInNoneToMeleeSlot);// 0x2825a90
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x2825a7c
	void StartGuide(int GuideID);// 0x2823444
	void SetUseThermal(bool InValue);// 0x282312c
	void SetFirePrepareShooting(bool State);// 0x2824d60
	void SetBtnPressState(bool bShoot, bool bPress, bool bNeedAim, bool bNeedCloseAim, float ShootDelayTime, bool bNeedNotify, bool bReleaseFire);// 0x28248b8
	void SetAutoShootFiring(bool _AutoShootFire);// 0x2824b14
	void SetAutoEnterAim(bool _AutoEnterAim);// 0x28245d4
	void ServerStartSwitchWeaponWithTime(enum Slot, bool bUseAnimation, double NowTime);// 0x282382c
	void ServerStartSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bNeedPop);// 0x2825bf8
	void ServerMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x28253d0
	void RPC_ServerSwitchWeaponWithTime(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime, bool bNeedPop);// 0x2824290
	void RPC_ServerSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bNeedPop, bool bInNoneToMeleeSlot);// 0x282601c
	void RPC_ServerSetFireShooting(bool State, bool bCancel);// 0x2824c88
	void RPC_ServerSetBulletNoEnoughCount(int count);// 0x2585500
	void RPC_Server_WeaponCharge();// 0x28264b0
	void RPC_Server_SwapWeapon();// 0x282664c
	void RPC_Server_LocalForceFinishSwitch(bool bInterrupted);// 0x28266bc
	void RPC_MulticastSwitchWeapon(enum InDataSlot, byte InDataSlotIndex, bool bUseAnimation, bool bNeedPop);// 0x2825e64
	void RPC_MulticastSpawnWeapon(enum InDataSlot, const ApgameWeaponInitializationData InData, const ApgameWeaponAttributeSetInitialDataHandle InInitialDataHandle);// 0x28276b0
	void RPC_MulticastSetFireShooting(bool State, bool bCancel);// 0x2824bb0
	void RPC_MulticastEquipSecondWeapon(enum InDataSlot);// 0x2826c64
	void RPC_MulticastEquipFirstWeapon(enum InDataSlot);// 0x2826d18
	void RPC_MulticastDestroyWeapon(uint16 InWeaponDataIdentity, bool bEnableBroadcast);// 0x28270e4
	void RPC_Multicast_WeaponCharge();// 0x2826454
	void RPC_Multicast_OnAttachmentChanged(enum InDataSlot);// 0x2826520
	void RPC_Multicast_LocalForceFinishSwitch(bool bInterrrupted);// 0x2826784
	void RPC_ClientTakeDamage(float Distance);// 0x23f62a4
	void RPC_ClientSwitchWeaponWithTime(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime, bool bNeedPop);// 0x2824010
	void RPC_ClientSwitchWeapon(enum InDataSlot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bNeedPop);// 0x2823de8
	void RPC_ClientFixSwitchError(enum InDataSlot, byte InDataSlotIndex, bool bEquip);// 0x2825d0c
	void RPC_ClientEquipSecondeWeapon(enum InDataSlot);// 0x2826afc
	void RPC_ClientEquipFirstWeapon(enum InDataSlot);// 0x2826bb0
	void RPC_ClientChangeReloadTimePerkAttr(enum Op, float ChangeValue);// 0x2824510
	void RPC_Client_SetNeedSwitchIcon(bool bNeed);// 0x257ad9c
	void RPC_Client_ServerAckSwitchWeapon(double AckTime);// 0x2823d28
	void RequestFire();// 0x2826f64
	void PreSpawnWeaponBullet();// 0x2825324
	void PreSpawnOBEffectBullet();// 0x2825310
	void OnWeaponChangeAttachment(Weapon* InWeapon);// 0x28262a0
	void OnWeaponAttachmentChanged(Weapon* Weapon);// 0x28265d4
	void OnStateLeave(enum State, enum Reason, enum InterruptedBy);// 0x2826908
	void OnSelfTakeDamage(float Damage, int DamageType, bool HeadShot, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x28231c4
	void OnRep_SyncUseWeaponSlot();// 0x282650c
	void OnRep_SimSwitchWeapon();// 0x282534c
	void OnRep_RepWeaponSlotMap();// 0x28234bc
	void OnMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x28255d0
	void OnEquipChargeRifle();// 0x2823078
	void OnEnterState(enum State, enum EnteredOverrideState);// 0x282684c
	void OnAttachProp(enum AttachmentType);// 0x2825984
	void OnApexCharacterPossessedCallback(Controller* pController);// 0x2827890
	void OnAimEnd();// 0x2826f50
	void OnAimChange(bool IsAiming);// 0x2826ed0
	void NotifyUseItem();// 0x28253a4
	void NotifyChargeUI(Weapon* Weapon);// 0x28263dc
	void LocalSwapWeapon();// 0x28266a8
	void LocalForceFinishSwitchWeapon(bool bNeedInterrupt);// 0x28259fc
	void LocalEquipFirstWeapon(enum InDataSlot);// 0x2826a84
	void LeaveRaiseAfterClimb();// 0x2825338
	void HandlePlayerStopFire(Weapon* InWeapon);// 0x2826e58
	void HandlePlayerStartFire(Weapon* InWeapon);// 0x2826de0
	void HandleFireRelatedPawnState(bool bIsPressing, bool bNeedAim, bool bNeedCloseAim, float FireDelayTime);// 0x2826f78
	void HandleContinuousUseRecover();// 0x28253b8
	WeaponTransformConfig GetWeaponTransformConfig(int WeaponID);// 0x28274a0
	Weapon* GetWeaponTargetBySlot(enum Slot);// 0x282741c
	Weapon* GetWeaponTargetByItemID(int ItemID);// 0x282739c
	Weapon* GetWeaponTargetByInstanceID(int InstanceID);// 0x282731c
	ApgameWeaponCoreComponent* GetWeaponCoreCompByUISlot(enum InUISlot);// 0x2823760
	ApgameWeaponCoreComponent* GetWeaponCoreCompByDataSlot(enum InDataSlot);// 0x28235c8
	ShootWeapon* GetWeaponByDataSlot(enum InDataSlot);// 0x2823548
	ShootWeapon* GetUsingWeapon();// 0x2823520
	bool GetUseThermal();// 0x28231a8
	enum GetUISlotByDataSlot(enum InDataSlot);// 0x28236d4
	FName GetTargetBackSlot(Weapon* Weapon);// 0x2826354
	float GetSwitchTotalTime();// 0x2826318
	ParticleSystem* GetParticleTemplate();// 0x282308c
	OBEffectBullet*[] GetOBEffectBulletCacheList();// 0x2824f08
	bool GetNeedSwitchIcon();// 0x2825388
	ShootWeapon* GetLastUseMainWeapon();// 0x28234d0
	enum GetLastUseMainUISlot();// 0x28234f8
	bool GetFirePrepareShooting();// 0x2824de0
	bool GetFirePreparePressing();// 0x2824e08
	int GetEquipScopeMaxSight();// 0x2823804
	enum GetDataSlotByUISlot(enum InUISlot);// 0x2823648
	enum GetCurrentUsingWeaponSlot();// 0x2826a4c
	Weapon* GetCurrentUsingWeapon();// 0x2826a08
	enum GetCurrentUsingDataSlot();// 0x2826a30
	ShootWeaponBullet*[] GetBulletCacheList();// 0x2825248
	bool GetAutoFireShooting();// 0x2824b94
	bool GetAutoEnterAim();// 0x2824650
	AutoEffectBullet*[] GetAutoEffectBulletCacheList();// 0x28250a8
	Weapon*[] GetAllWeaponTargetList();// 0x2827288
	ProxyActorWeaponData[] GetAllWeaponProxyData();// 0x28271f4
	void GetAimShootConfigByAutoShooting(out bool bNeedAim, out float ShootDelayTime);// 0x282466c
	enum GetADefaultWeaponSlot();// 0x2825360
	void GenerateFakeHitEffect(ParticleSystem* Template);// 0x28230b4
	void ForceBackpackWeapon(Weapon* InWeapon);// 0x2825894
	void EnterFireChangeStageSingle(bool bPress, bool bNeedAim, bool bNeedCloseAim, float ShootDelayTime);// 0x282474c
	void CreateFakeHitEffectPool();// 0x2823064
	void ClientSwitchWeapon(enum Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double SwitchTime);// 0x2823b74
	void ClientSaveSwitchData(enum Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, double NowTime);// 0x2823940
	void ClientRemoveConfirmedData(double RemoveTime);// 0x2823af4
	void ClientMainHandStackChanged(HandStateData HandStateData, bool bPush);// 0x28253d0
	void ClientBackpackWeapon(Weapon* ShootWeapon);// 0x282590c
	void ClearPool();// 0x2823050
	void CheckAutoRunGunState(enum curPawnState, bool bIsEnter);// 0x28257d0
	void ChangeUseWeaponSlotEvent__DelegateSignature(enum InOld, enum InNew);// 0x2ce6f18
	void CalSwitchProcess();// 0x2826340
	void BeginClientAccounting();// 0x2826dcc
	void AddToOBBulletCacheList(OBEffectBullet* NewBullet);// 0x2824e30
	void AddToBulletCacheList(ShootWeaponBullet* NewBullet);// 0x2825170
	void AddToAutoEffectBulletCacheList(AutoEffectBullet* NewBullet);// 0x2824fd0

--------------------------------
Class: WeaponTransformConfig
	int ID;//[Offset: 0x0, Size: 0x4]
	float TPPAO;//[Offset: 0x4, Size: 0x4]
	Vector TPPOffsetHand;//[Offset: 0x8, Size: 0xc]
	<enum,Transform> TPPTransformsMap;//[Offset: 0x14, Size: 0x3c]

--------------------------------
Class: ApgameWeaponAttributeSetInitialDataHandle

--------------------------------
Class: ShootWeaponBullet.SignificanceManagedActor.Actor.Object
	Color DebugBulletTraceColor;//[Offset: 0x1e4, Size: 0x4]
	Color DebugBulletSphereColor;//[Offset: 0x1e8, Size: 0x4]
	float DebugBulletTraceTime;//[Offset: 0x1ec, Size: 0x4]
	float DebugBulletTraceInterval;//[Offset: 0x1f0, Size: 0x4]
	int DebugBulletSphereSegments;//[Offset: 0x1f4, Size: 0x4]
	ShootWeapon* OwningShootWeapon;//[Offset: 0x200, Size: 0x4]
	ApexCharacter* InstigatorCharacter;//[Offset: 0x224, Size: 0x4]
	BulletMovementComponent* PMComp;//[Offset: 0x228, Size: 0x4]
	SphereComponent* SphereComp;//[Offset: 0x22c, Size: 0x4]
	Vector ShootDir;//[Offset: 0x230, Size: 0xc]
	CurveFloat* DistanceScaleCurve;//[Offset: 0x29c, Size: 0x4]
	delegate OnBulletImpact;//[Offset: 0x2ac, Size: 0xc]
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x2ce6f18
	void OnImpact(out const HitResult _ImpactResult);// 0x2758248
	ApexCharacter* GetInstigatorCharacter();// 0x27582ec

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193, Size: 0x1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x194, Size: 0x4]
	void ResumeMoveAfterImpactWithNoLost();// 0x255267c
	void ResetTickDelay();// 0x2552660
	void ForceStop();// 0x2552690

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xdc, Size: 0x4]
	float MaxSpeed;//[Offset: 0xe0, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe4, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe4, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe4, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe4, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe4, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe4, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe4, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe4, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe5, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe5, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe5, Size: 0x1]
	float PreviousHitTime;//[Offset: 0xe8, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0xec, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0xf8, Size: 0x4]
	float Buoyancy;//[Offset: 0xfc, Size: 0x4]
	float Bounciness;//[Offset: 0x100, Size: 0x4]
	float Friction;//[Offset: 0x104, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x108, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x10c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x110, Size: 0xc]
	delegate OnProjectileStop;//[Offset: 0x11c, Size: 0xc]
	float HomingAccelerationMagnitude;//[Offset: 0x128, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x12c, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x134, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x138, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x13c, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x140, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x144, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x148, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x14c, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x478e610
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x478e6b4
	void SetInterpolatedComponent(SceneComponent* Component);// 0x27951c0
	void ResetInterpolation();// 0x2712b4c
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2ce6f18
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x2ce6f18
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x478e530
	Vector LimitVelocity(Vector NewVelocity);// 0x25b5354
	bool IsVelocityUnderSimulationThreshold();// 0x478e72c
	bool IsInterpolationComplete();// 0x478e504

--------------------------------
Class: AutoEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystem* CurFXTemplate;//[Offset: 0x1ec, Size: 0x4]
	ParticleSystem* LastFXTemplate;//[Offset: 0x1f0, Size: 0x4]
	float CurMovingTime;//[Offset: 0x1f8, Size: 0x4]
	float CurRemainTime;//[Offset: 0x1fc, Size: 0x4]
	float CurBulletSpeed;//[Offset: 0x200, Size: 0x4]
	Vector StartPos;//[Offset: 0x204, Size: 0xc]
	Vector EndPos;//[Offset: 0x210, Size: 0xc]
	ShootWeaponBullet* TracedTrueBullet;//[Offset: 0x23c, Size: 0x4]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x240, Size: 0x4]
	ActorComponent*[] FXComps;//[Offset: 0x244, Size: 0xc]
	void OnTrueBulletHit(HitResult HitInfo);// 0x2506948

--------------------------------
Class: ProxyActorWeaponData
	ItemDefineID WeaponID;//[Offset: 0x0, Size: 0x10]
	enum WeaponSaveSlot;//[Offset: 0x10, Size: 0x1]
	int WeaponSkinID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SimuWeaponFollow
	bool bWeaponMainFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bWeaponAttachFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: WeaponBallisticInfo

--------------------------------
Class: SwitchWeaponParamter
	enum TargetSlot;//[Offset: 0x0, Size: 0x1]
	bool bNeedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum CurrentSlot;//[Offset: 0x2, Size: 0x1]
	bool bNeedPop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	byte RepIndex;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ApgameWeaponSlotMap
	bool bSwapped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SearchedPickUpTombBoxResult
	PlayerTombBox* TombBox;//[Offset: 0x0, Size: 0x4]
	int SearchedPickUpTime;//[Offset: 0x4, Size: 0x4]
	SearchedPickUpWrapperResult[] WrapperList;//[Offset: 0x8, Size: 0xc]
	SearchedPickUpWrapperResult[] SeekerWrapperList;//[Offset: 0x14, Size: 0xc]
	int Quality;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BlackMarketPickUpWrapperResult.SearchedPickUpWrapperResult
	SearchedPickUpWrapperResult[] PickUpList;//[Offset: 0x7c, Size: 0xc]
	int ItemQuality;//[Offset: 0x88, Size: 0x4]
	enum GroupType;//[Offset: 0x8c, Size: 0x1]
	bool bShowAsGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1]
	bool bIsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1]
	int AmmoNumInClip;//[Offset: 0x90, Size: 0x4]
	LobaBlackMarket* BlackMarket;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: SkillActorAttachData
	bool bIsAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Actor* AttachedActor;//[Offset: 0x4, Size: 0x4]
	bool bAttachScreenNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	FName AttachSocketName;//[Offset: 0xc, Size: 0x8]
	enum AttachmentRule;//[Offset: 0x14, Size: 0x1]
	enum ScaleAttachmentRule;//[Offset: 0x15, Size: 0x1]
	Vector OffsetLocation;//[Offset: 0x18, Size: 0xc]
	Rotator OffsetRotation;//[Offset: 0x24, Size: 0xc]
	bool bIgnoreParentRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkillActorDelayShowTime
	float FPPDelayShowTime;//[Offset: 0x0, Size: 0x4]
	float TPPDelayShowTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BuffAffectedActorData
	Actor* BuffActor;//[Offset: 0x0, Size: 0x4]
	float DeltaTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ViewAssistParamInfo
	bool OnlyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool ContainDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool OnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: RespawnFlowData
	uint32 Rescuer;//[Offset: 0x0, Size: 0x4]
	byte ReviveFrom;//[Offset: 0x4, Size: 0x1]
	FString SecReportData;//[Offset: 0x8, Size: 0xc]
	int64 ClientStartTime;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PlayerStatePartInfo
	uint16 DyingCount;//[Offset: 0x0, Size: 0x2]
	uint16 DyingTimeoutSec;//[Offset: 0x2, Size: 0x2]
	uint16 DyingRealtimeSec;//[Offset: 0x4, Size: 0x2]
	uint16 RespawningTimeoutSec;//[Offset: 0x6, Size: 0x2]
	uint16 RespawningRealtimeSec;//[Offset: 0x8, Size: 0x2]
	uint16 ShownRespawningTimeoutSec;//[Offset: 0xa, Size: 0x2]
	uint16 ShownRespawningRealtimeSec;//[Offset: 0xc, Size: 0x2]
	uint16 RespawnTeammateEndSign;//[Offset: 0xe, Size: 0x2]
	uint16 RescuingEndSign;//[Offset: 0x10, Size: 0x2]
	enum CurrentBattleBehState;//[Offset: 0x12, Size: 0x1]
	enum PreviousBattleBehState;//[Offset: 0x13, Size: 0x1]
	enum CurrentBannerState;//[Offset: 0x14, Size: 0x1]
	Vector ServerLocation;//[Offset: 0x18, Size: 0xc]
	float RescueTimeSec;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: LegendCustomPerksInfo
	FString Name;//[Offset: 0x0, Size: 0xc]
	int[] PerksID;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: LegendSkinData
	int LegendSkinID;//[Offset: 0x0, Size: 0x4]
	bool IsFavor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PlayerEquipSkinInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameModePlayerBattleInfoGroup
	GameModePlayerLastBattleInfo LastBattleInfo;//[Offset: 0x0, Size: 0x14]

--------------------------------
Class: GameModePlayerLastBattleInfo
	int Rank;//[Offset: 0x0, Size: 0x4]
	int TeamRank;//[Offset: 0x4, Size: 0x4]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DamageAmount;//[Offset: 0xc, Size: 0x4]
	int SurviveTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BrilliantInfo
	float ComboKillAvg;//[Offset: 0x0, Size: 0x4]
	float HeadShotRateAvg;//[Offset: 0x4, Size: 0x4]
	float DamageTImeRecoveryHPAvg;//[Offset: 0x8, Size: 0x4]
	float VerticalDamageAvg;//[Offset: 0xc, Size: 0x4]
	float BehiindDamageAvg;//[Offset: 0x10, Size: 0x4]
	float KillAvg;//[Offset: 0x14, Size: 0x4]
	float AssistAvg;//[Offset: 0x18, Size: 0x4]
	float DamageAvg;//[Offset: 0x1c, Size: 0x4]
	int GameNum;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ApexTeamState.Info.Actor.Object
	ApexPlayerState*[] TeamMembers;//[Offset: 0x1d0, Size: 0xc]
	int TeamID;//[Offset: 0x1dc, Size: 0x4]
	TeamEventFlowManager* TeamEventFlowManager;//[Offset: 0x1e0, Size: 0x4]
	TeamStateMapComponent* TeamStateMap;//[Offset: 0x1e4, Size: 0x4]
	bool IsInTeam(Controller* Controller);// 0x24b2038

--------------------------------
Class: TeamEventFlowManager.EventFlowManager.ActorComponent.Object
	UserWidget* EventFlowDebugPanel;//[Offset: 0x150, Size: 0x4]

--------------------------------
Class: EventFlowManager.ActorComponent.Object
	<EventFlowBase*> PreUnderwayEventFlowList;//[Offset: 0xa8, Size: 0x3c]
	EventFlowBase*[] UnderwayEventFlowList;//[Offset: 0xe4, Size: 0xc]
	EventFlowBase*[] PreFinishedEventFlowList;//[Offset: 0xf0, Size: 0xc]
	EventFlowBase*[] FinishedEventFlowList;//[Offset: 0xfc, Size: 0xc]
	delegate OnEventFlowActived;//[Offset: 0x108, Size: 0xc]
	delegate OnEventFlowFinished;//[Offset: 0x114, Size: 0xc]
	delegate OnUnderwayEventFlowRemoved;//[Offset: 0x120, Size: 0xc]
	delegate OnFinishedEventFlowRemoved;//[Offset: 0x12c, Size: 0xc]
	EventFlowElementBase*[] TickableElements;//[Offset: 0x138, Size: 0xc]
	class EventFlowBase* SupportEventFlowType;//[Offset: 0x144, Size: 0x4]
	void RemoveEventFlowInstance(EventFlowBase* EventFlowInstance);// 0x1016004
	void RemoveEventFlow(class EventFlowBase EventFlow);// 0x1015f8c
	void OnUnderwayEventFlowRemoved__DelegateSignature(EventFlowBase* EventFlow);// 0x2ce6f18
	void OnRep_UnderwayEventFlowList();// 0x1016108
	void OnRep_FinishedEventFlowList();// 0x10160f4
	void OnFinishedEventFlowRemoved__DelegateSignature(EventFlowBase* EventFlow);// 0x2ce6f18
	void OnEventFlowFinished__DelegateSignature(EventFlowBase* EventFlow);// 0x2ce6f18
	void OnEventFlowActived__DelegateSignature(EventFlowBase* EventFlow);// 0x2ce6f18
	bool IsEventFlowExistInUnderwayList(class EventFlowBase EventFlow);// 0x1015f0c
	bool IsEventFlowExistInFinishList(class EventFlowBase EventFlow);// 0x1015e8c
	bool IsEventFlowExist(class EventFlowBase EventFlow);// 0x1015e0c
	void ActiveEventFlowInstance(EventFlowBase* EventFlowInstance);// 0x101607c

--------------------------------
Class: EventFlowBase.Object
	EventFlowManager* Owner;//[Offset: 0x1c, Size: 0x4]
	enum EventFlowState;//[Offset: 0x20, Size: 0x1]
	EventFlowSequenceBase*[] StartSequences;//[Offset: 0x24, Size: 0xc]
	<EventFlowSequenceBase*> PreActivedSequences;//[Offset: 0x30, Size: 0x3c]
	EventFlowSequenceBase*[] ActivedSequences;//[Offset: 0x6c, Size: 0xc]
	delegate OnSequenceActived;//[Offset: 0x78, Size: 0xc]
	delegate OnSequenceDeactived;//[Offset: 0x98, Size: 0xc]
	void OnSequenceDeactived__DelegateSignature(EventFlowSequenceBase* DeactivedSequence);// 0x2ce6f18
	void OnSequenceActived__DelegateSignature(EventFlowSequenceBase* ActivedSequence);// 0x2ce6f18
	void OnRep_StartSequences();// 0x1012d9c
	void OnRep_Owner();// 0x1012db0
	void OnRep_ActivedSequences();// 0x1012d88
	bool IsLocalController();// 0x1012c64
	bool InvokeInterruptFlowByNodeName(FName StopNodeName, bool MarkInterruptAlways);// 0x1012cb4
	bool HasAuthority();// 0x1012c8c
	void EventFlowStart();// 0x2ce6f18

--------------------------------
Class: EventFlowSequenceBase.EventFlowNode.Object
	EventFlowSequenceBase* PrevSequence;//[Offset: 0x38, Size: 0x4]
	EventFlowBase* OwningEventFlow;//[Offset: 0x3c, Size: 0x4]
	FText Describe;//[Offset: 0x40, Size: 0xc]
	EvaluateEventFlowParameter EvaluateDescribe;//[Offset: 0x4c, Size: 0x10]
	int NodeID;//[Offset: 0x5c, Size: 0x4]
	enum[] ElementLogics;//[Offset: 0x60, Size: 0xc]
	byte InstancedCount;//[Offset: 0x6c, Size: 0x1]
	bool bIsInterruptAlways;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d, Size: 0x1]
	bool IsSequenceFinished();// 0x10170d0
	bool HasShownElement();// 0x1017100
	enum[] GetElementLogics();// 0x1017060
	FText GetDescribe();// 0x101446c
	void ConstructAndActiveSequence(EventFlowBase* InOwner);// 0x1016f2c
	bool CanReinstanceSequence(EventFlowSequenceBase* Sequence, byte MaxInstanceCount);// 0x1016fa4

--------------------------------
Class: EventFlowNode.Object
	EventFlowNode*[] PrevNodes;//[Offset: 0x1c, Size: 0xc]
	EventFlowNode*[] NextNodes;//[Offset: 0x28, Size: 0xc]
	EventFlowNode* GeneratedByTemplate;//[Offset: 0x34, Size: 0x4]
	bool IsEvaluateBound(out const EvaluateEventFlowParameter Evaluator);// 0xfe9254
	bool ExecuteEvaluate(out const EvaluateEventFlowParameter Evaluator);// 0xfe91b4

--------------------------------
Class: EvaluateEventFlowParameter

--------------------------------
Class: EventFlowElementBase.EventFlowNode.Object
	EventFlowSequenceBase* OwningSequence;//[Offset: 0x38, Size: 0x4]
	bool bIsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bIsOptional;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bTickable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bLocalJudgment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bIsShow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	FText Describe;//[Offset: 0x40, Size: 0xc]
	EvaluateEventFlowParameter EvaluateDescribe;//[Offset: 0x4c, Size: 0x10]
	void SetElementUnfinishedToServer();// 0x1014170
	void SetElementUnfinish();// 0x1014210
	void SetElementFinishedToServer(const FName EventName);// 0x101418c
	void SetElementFinished(out const EventFlowFinishEvent OnElementFinishedEvent, FName EventName);// 0x1014224
	void ReceiveWhenTick(float DeltaSeconds);// 0x2ce6f18
	void ReceiveWhenDeactive();// 0x2ce6f18
	void ReceiveWhenConstruct();// 0x2ce6f18
	void ReceiveWhenActive();// 0x2ce6f18
	FText ReceiveGetDescribe();// 0x2ce6f18
	void OnRep_IsFinished();// 0x1014744
	Actor* GetManagerOwner();// 0x10146cc
	EventFlowManager* GetManager();// 0x10146f4
	bool GetIsShow();// 0x1014534
	bool GetIsOptional();// 0x1014558
	EventFlowBase* GetEventFlow();// 0x101471c
	EventFlowElementBase* GetElementTemplate();// 0x101457c
	FText GetDescribeEx();// 0x101446c
	FText GetDescribe();// 0x101430c
	void ForceFinishElementToServer(const FName EventName);// 0x10140ec

--------------------------------
Class: EventFlowFinishEvent
	delegate OnEventFlowNodeFinished;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TeamStateMapComponent.ActorComponent.Object
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemInfos;//[Offset: 0xa8, Size: 0xc]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemAddInfos;//[Offset: 0xb4, Size: 0xc]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemChangeInfos;//[Offset: 0xc0, Size: 0xc]
	MiniMapSkillItemInfo[] ApexMiniMapDynamicItemRemoveInfos;//[Offset: 0xcc, Size: 0xc]
	MiniMapSkillItemInfo[] ClientSideApexMiniMapDynamicItemInfos;//[Offset: 0xd8, Size: 0xc]
	RepMiniMapPlayerInfo[] ApexMiniMapPlayerInfos;//[Offset: 0xe4, Size: 0xc]
	<int,MiniMapSkillItemInfo> ClientSideFMiniMapPlayerInfo;//[Offset: 0xf0, Size: 0x3c]
	ApexPlayerState*[] MiniMapPlayers;//[Offset: 0x12c, Size: 0xc]
	ApexTeamState* OwnerTeamState;//[Offset: 0x138, Size: 0x4]
	void UpdateMapItemDynamicLocAndRotInfo(int Index, Vector Location, float Yaw);// 0x27996ec
	void RemoveMapPlayerInfo(ApexPlayerState* Character);// 0x2799198
	void RemoveMapItemDynamicInfo(int Index);// 0x27995b8
	void OnRep_ApexMiniMapPlayerInfos();// 0x27990a4
	void OnRep_ApexMiniMapDynamicItemInfos();// 0x27990b8
	RepMiniMapPlayerInfo[] GetApexMiniMapPlayerInfos();// 0x27990cc
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemRemoveInfos();// 0x2799288
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemInfos();// 0x27994ec
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemChangeInfos();// 0x2799354
	MiniMapSkillItemInfo[] GetApexMiniMapDynamicItemAddInfos();// 0x2799420
	void ChangeMapItemDynamicStateInfo(int Index, byte State);// 0x2799630
	void AddMapPlayerInfo(ApexPlayerState* Character);// 0x2799210
	int AddMapItemDynamicInfo(enum Type, Vector Location, float Yaw, int ScaleType, float Length, bool Immediately, float Radius);// 0x27997f4

--------------------------------
Class: MiniMapSkillItemInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	byte Type;//[Offset: 0x4, Size: 0x1]
	byte State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]
	float Radius;//[Offset: 0x18, Size: 0x4]
	byte ScaleType;//[Offset: 0x1c, Size: 0x1]
	float Length;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: RepMiniMapPlayerInfo
	int PlayerKey;//[Offset: 0x0, Size: 0x4]
	enum Type;//[Offset: 0x4, Size: 0x1]
	enum State;//[Offset: 0x5, Size: 0x1]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	float Yaw;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InGameActivityPlayerData
	int[] ItemIDList;//[Offset: 0x0, Size: 0xc]
	int MaxCount;//[Offset: 0xc, Size: 0x4]
	int CurCount;//[Offset: 0x10, Size: 0x4]
	int64 LastPickTime;//[Offset: 0x18, Size: 0x8]
	enum PickupResult;//[Offset: 0x20, Size: 0x1]
	int64 NextPickupTime;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InGameActivityPickupData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 0x10]
	int count;//[Offset: 0x10, Size: 0x4]
	int64 PickTime;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SkillAssistData
	int SkillID;//[Offset: 0x0, Size: 0x4]
	bool EnableAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: LegendAssistData
	int LegendId;//[Offset: 0x0, Size: 0x4]
	bool EnableAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: LegendCustomPerksPlan
	LegendCustomPerksInfo[] Plan;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: DSPlayerGunAmuletInfo
	int GunItemID;//[Offset: 0x0, Size: 0x4]
	int AmuletID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WarningActor.Actor.Object
	Actor* Source;//[Offset: 0x1d0, Size: 0x8]
	Actor* Target;//[Offset: 0x1d8, Size: 0x8]
	void ShowArrowAndEffect();// 0x2ce6f18
	void SetTarget(Actor* InTarget);// 0x2801218
	void SetSourceAndTarget(Actor* InSource, Actor* InTarget);// 0x280115c
	void SetSource(Actor* InSource);// 0x2801290
	void SetCountDownOffset(Vector Offset);// 0x2ce6f18
	void NativeShowCountDown(float InTime);// 0x2ce6f18
	void HideArrowAndEffect();// 0x2ce6f18

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 0x4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 0xc]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xa8, Size: 0x4]
	BlackboardData* BlackboardAsset;//[Offset: 0xac, Size: 0x4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xc8, Size: 0xc]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x4acee84
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x4acf030
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x4acedb0
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x4acf59c
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x4acef58
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x4acf320
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x4acf24c
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x4acf3f4
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x4acf4c8
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x4acf170
	bool IsVectorValueSet(out const FName KeyName);// 0x4aced1c
	Vector GetValueAsVector(out const FName KeyName);// 0x4acf714
	FString GetValueAsString(out const FName KeyName);// 0x4acf854
	Rotator GetValueAsRotator(out const FName KeyName);// 0x4acf670
	Object* GetValueAsObject(out const FName KeyName);// 0x4acfc28
	FName GetValueAsName(out const FName KeyName);// 0x4acf7b8
	int GetValueAsInt(out const FName KeyName);// 0x4acfa6c
	float GetValueAsFloat(out const FName KeyName);// 0x4acf9d8
	byte GetValueAsEnum(out const FName KeyName);// 0x4acfb00
	class Object GetValueAsClass(out const FName KeyName);// 0x4acfb94
	bool GetValueAsBool(out const FName KeyName);// 0x4acf944
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x4aceb4c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x4acec34
	void ClearValue(out const FName KeyName);// 0x4aceac0

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xac, Size: 0x4]
	AIController* AIOwner;//[Offset: 0xb0, Size: 0x4]
	void StopLogic(FString Reason);// 0x4ad1988
	void RestartLogic();// 0xf49d14
	bool IsRunning();// 0x4ad1958
	bool IsPaused();// 0x4ad1928

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xa8, Size: 0xc]
	class AISense* DominantSense;//[Offset: 0xb4, Size: 0x4]
	AIController* AIOwner;//[Offset: 0xc4, Size: 0x4]
	delegate OnPerceptionUpdated;//[Offset: 0x128, Size: 0xc]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x134, Size: 0xc]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x4ac6aa0
	void RequestStimuliListenerUpdate();// 0x4ac6fac
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x4ac6fc0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x4ac6f0c
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4ac6c60
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4ac6d44
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4ac6e28
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x4ac6b64

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 0x4]
	enum NotifyType;//[Offset: 0x20, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x60, Size: 0xc]
	float PerceptionAgingRate;//[Offset: 0x6c, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x4ac7c6c
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x4ac7d20
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x4ac7b6c
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x4ac78ec
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x4ac79a8

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x44, Size: 0x14]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x58, Size: 0x14]
	float AcceptanceRadius;//[Offset: 0x6c, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x70, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x74, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	int VisualLoggerEQSItemsNum;//[Offset: 0x80, Size: 0x4]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x85, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0x88, Size: 0x4]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0x8c, Size: 0x4]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0x90, Size: 0x4]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0x94, Size: 0xc]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xa0, Size: 0x4]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xa4, Size: 0x4]
	void AILoggingVerbose();// 0x255c594
	void AIIgnorePlayers();// 0xfbc1bc

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x1c, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x20, Size: 0xc]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x4]
	BTCompositeNode* Template;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 0x4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 0x4]
	class AliasNameData* AliasNameAsset;//[Offset: 0x24, Size: 0x4]
	BTDecorator*[] RootDecorators;//[Offset: 0x28, Size: 0xc]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x78, Size: 0xc]
	BTService*[] Services;//[Offset: 0x84, Size: 0xc]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 0xc]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 0x4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 0x4]
	<FName,FName> ExportMap;//[Offset: 0x3c, Size: 0x3c]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 0x4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 0xc]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x78, Size: 0xc]
	bool bCanBatchRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bForceBatchRun;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	delegate OnSuccess;//[Offset: 0x8c, Size: 0xc]
	delegate OnFail;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x7c, Size: 0x4]
	float RandomDeviation;//[Offset: 0x80, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7a, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x7b, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: AliasNameData.Object

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	int MaxBatchCount;//[Offset: 0xe4, Size: 0x4]
	float MaxBatchSec;//[Offset: 0xe8, Size: 0x4]
	BTNode*[] NodeInstances;//[Offset: 0x110, Size: 0xc]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4acd724
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x4acd904
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x4acd7f0

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0x74, Size: 0xc]
	EnvQueryContext*[] LocalContexts;//[Offset: 0x80, Size: 0xc]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0x8c, Size: 0xc]
	float MaxAllowedTestingTime;//[Offset: 0xd8, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0xe0, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0xe8, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x4addff4

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x20, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x1c, Size: 0x4]
	EnvQueryTest*[] Tests;//[Offset: 0x20, Size: 0xc]
	int GeneratorIdx;//[Offset: 0x2c, Size: 0x4]
	int TestIdx;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x24, Size: 0xc]
	class EnvQueryItemType* ItemType;//[Offset: 0x30, Size: 0x4]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x1c, Size: 0x4]
	int QueryNodeIdx;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x24, Size: 0x4]
	byte TestPurpose;//[Offset: 0x28, Size: 0x1]
	FString TestComment;//[Offset: 0x2c, Size: 0xc]
	byte MultipleContextFilterOp;//[Offset: 0x38, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x39, Size: 0x1]
	byte FilterType;//[Offset: 0x3a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x3c, Size: 0x20]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x5c, Size: 0x20]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0x7c, Size: 0x20]
	byte ScoringEquation;//[Offset: 0x9d, Size: 0x1]
	byte ClampMinType;//[Offset: 0x9e, Size: 0x1]
	byte ClampMaxType;//[Offset: 0x9f, Size: 0x1]
	enum NormalizationType;//[Offset: 0xa0, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0xa4, Size: 0x20]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0xc4, Size: 0x20]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0xe4, Size: 0x20]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x104, Size: 0x20]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	RuntimeFloatCurve ScoreCurve;//[Offset: 0x12c, Size: 0x64]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x191, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x8, Size: 0x4]
	FName DataField;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x20, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x38, Size: 0x4]
	int OptionIndex;//[Offset: 0x3c, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x40, Size: 0xc]
	void SetNamedParam(FName ParamName, float Value);// 0x4adce98
	Vector[] GetResultsAsLocations();// 0x4adcf5c
	Actor*[] GetResultsAsActors();// 0x4adcff0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x4add084
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x4add12c
	float GetItemScore(int ItemIndex);// 0x4add1d4
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x2ce6f18

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFail;//[Offset: 0x28, Size: 0xc]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x4ac3044

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x4ae2d18
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x4ae2444
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x4ae22b8
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4ae29b4
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4ae2b74
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4ae2544
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4ae2778

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 0x4]
	float MaxAge;//[Offset: 0x20, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 0xc]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xa8, Size: 0x4]
	PawnActionStack[] ActionStacks;//[Offset: 0xac, Size: 0xc]
	PawnActionEvent[] ActionEvents;//[Offset: 0xb8, Size: 0xc]
	PawnAction* CurrentAction;//[Offset: 0xc4, Size: 0x4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x4ae4d4c
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x4ae4e54
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x4ae4c4c
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x4ae4ccc

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 0x4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 0x4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 0x4]
	Object* Instigator;//[Offset: 0x28, Size: 0x4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 0x4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1]
	byte GetActionPriority();// 0x4ae3c34
	void Finish(byte WithResult);// 0xfe9388
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x4ae3b78

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xb4, Size: 0xc]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xc0, Size: 0xc]
	GameplayTask*[] TickingTasks;//[Offset: 0xd8, Size: 0xc]
	GameplayTask*[] KnownTasks;//[Offset: 0xe4, Size: 0xc]
	delegate OnClaimedResourcesChange;//[Offset: 0xf0, Size: 0xc]
	void OnRep_SimulatedTasks();// 0x49bcfa8
	enum K2_RunGameplayTask(interface class                                                                                                                                                                                                                             TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x49bcd10

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 0x4]
	void ReadyForActivation();// 0x49bb3cc
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x2ce6f18
	void EndTask();// 0x49bb3b8

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 0xc]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x4]
	float TravelCostOverride;//[Offset: 0x4, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x20, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x24, Size: 0x4]
	Color DrawColor;//[Offset: 0x28, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x2c, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: BTTaskStartFireMemory
	float SustainTime;//[Offset: 0x0, Size: 0x4]
	float TakeRestTime;//[Offset: 0x4, Size: 0x4]
	float StartFireTimer;//[Offset: 0x8, Size: 0x4]
	bool bFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AIBehaviorRules
	BehaviorTree* Default;//[Offset: 0x0, Size: 0x4]
	AIBehaviorLevel[] LevelRules;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: AIBehaviorLevel
	FString LevelRange;//[Offset: 0x0, Size: 0xc]
	AIBehavior[] List;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: AIBehavior
	float Weight;//[Offset: 0x0, Size: 0x4]
	BehaviorTree* Tree;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ApexAIPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	AIHearingEventConfig[] HearingConfig;//[Offset: 0x140, Size: 0xc]
	Actor* MuteActor;//[Offset: 0x14c, Size: 0x8]
	float MuteActorTime;//[Offset: 0x154, Size: 0x4]
	int SightBodyHorizontalGrids;//[Offset: 0x170, Size: 0x4]
	int SightBodyVerticalGrids;//[Offset: 0x174, Size: 0x4]
	int SightBodyGridResolution;//[Offset: 0x178, Size: 0x4]
	bool DebugAISightBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]

--------------------------------
Class: AIHearingEventConfig
	enum HearingType;//[Offset: 0x0, Size: 0x1]
	float Range;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ApexAIComponent.ActorComponent.Object
	void OnSkillStop(int SkillIndex, enum StopReason, int SkillHandleID);// 0x23f683c
	void OnMedicineStop(int ItemID);// 0x23f69b4
	void OnMedicineStart(int ItemID);// 0x23f6a2c
	void OnMedicineBreak(int ItemID);// 0x23f693c

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xc0, Size: 0xc]
	enum StartStateType;//[Offset: 0xcc, Size: 0x1]
	enum FinishStateType;//[Offset: 0xcd, Size: 0x1]
	State* CurrentState;//[Offset: 0xd0, Size: 0x4]
	enum LastMsg;//[Offset: 0xd4, Size: 0x1]
	enum NextStateType;//[Offset: 0xd5, Size: 0x1]
	enum CurrentStateType;//[Offset: 0xd6, Size: 0x1]
	enum LastStateType;//[Offset: 0xd7, Size: 0x1]
	enum GetCurrentStateType();// 0x2787598

--------------------------------
Class: State.Object
	Enum* pEnum;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: DrugRecommendComponent.ActorComponent.Object
	FName SettingKey;//[Offset: 0xbc, Size: 0x8]
	DrugRecommendDefine[] InPoisonCircleRecommendConfig;//[Offset: 0xd0, Size: 0xc]
	DrugRecommendDefine[] NotInPoisonCircleRecommendConfig;//[Offset: 0xdc, Size: 0xc]
	int RecommendMinAddHealthValue;//[Offset: 0xe8, Size: 0x4]
	int RecommendMinAddShieldValue;//[Offset: 0xec, Size: 0x4]
	float RecommendUpdateInterval;//[Offset: 0xf0, Size: 0x4]
	void UpdateDrugRecommend();// 0x25aff18
	void OnGetHpMpChangeException(bool IsHpChange, float ChangedValue, enum ChangeReason);// 0x25afdf8
	void DrugRecommendOver();// 0x25aff04

--------------------------------
Class: DrugRecommendDefine
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float HealthRateMin;//[Offset: 0x4, Size: 0x4]
	float HealthRateMax;//[Offset: 0x8, Size: 0x4]
	float ShieldRateMin;//[Offset: 0xc, Size: 0x4]
	float ShieldRateMax;//[Offset: 0x10, Size: 0x4]
	bool EquipShieldLevel4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	enum DrugRecommendType;//[Offset: 0x15, Size: 0x1]

--------------------------------
Class: CharacterTeamItemUseTipComponent.ActorComponent.Object
	void RPC_BattleItemUse(const BattleItemUseTipInfo BattleItemUseTipInfo);// 0x2572f2c
	void OnBattleItemUseStopEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x2573000
	void OnBattleItemUseStartEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x2573150
	void OnBattleItemUseInteruptEvent(out BattleItemUseTipInfo BattleItemUseTipInfo);// 0x25730a8

--------------------------------
Class: BattleItemUseTipInfo
	Character* User;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	uint32 ItemID;//[Offset: 0x8, Size: 0x4]
	byte EventType;//[Offset: 0xc, Size: 0x1]
	int TeamIdx;//[Offset: 0x10, Size: 0x4]
	int HealthHeal;//[Offset: 0x14, Size: 0x4]
	int ShieldHeal;//[Offset: 0x18, Size: 0x4]
	int SkillID;//[Offset: 0x1c, Size: 0x4]
	int PlayerKey;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: DataReportComponent.ActorComponent.Object
	float SliceTime;//[Offset: 0xa8, Size: 0x4]
	int[] StatisticOpticList;//[Offset: 0xac, Size: 0xc]
	int[] StatisticAttachList;//[Offset: 0xb8, Size: 0xc]
	Controller* CurrentOBTargetPC;//[Offset: 0x188, Size: 0x4]
	OBCacheData[] OBData;//[Offset: 0x18c, Size: 0xc]
	void UploadImportantState1(int Number);// 0x25a0c8c
	void ServerSetPlayerCameraMaxDistance(float Dist);// 0x25a0980
	void ServerReportUseMiniMap(int Data);// 0x23f62a4
	void ServerReportSomeLog(const SecBasic SomeFlow);// 0x25a0b8c
	void ServerRecordWatchStat(enum WatchStat, int count, bool CheckInOB);// 0x25a117c
	void ServerOnPressTransfer();// 0x25a0450
	void ServerOnPressLeave();// 0x25a03f4
	void ServerOnMiniMapShow(bool bShow);// 0x25a08b8
	void ServerOnMiniMapPing(Vector2D InPingLoc);// 0x25a0760
	void ServerOnMiniMapPinch(Vector2D InPingchCenter);// 0x25a080c
	void ServerOnMiniMapDeletePing();// 0x25a0704
	void ServerDataRepUseReplicator();// 0x25a0524
	void ServerDataRepOpenDoor(bool bOpen, enum Type);// 0x25a063c
	void ServerDataRepCancleOpenTreasureDoor();// 0x25a0560
	void ServerDataRepBreakOpenTreasureDoorBySkill();// 0x25a054c
	void ServerDataRepBreakOpenTreasureDoorByDying();// 0x25a0538
	void ServerDataRepAutoOpenDoor(bool bAutoOpen);// 0x25a0574
	void ServerDataRepAddMaterialNum(int AddNum);// 0x25a04ac
	void OnWeaponShoot(Weapon* Weapon);// 0x25a1104
	void OnWeaponDestroy(Weapon* Weapon);// 0x25a0f84
	void OnPlayerExit();// 0x25a1a00
	void OnBulletHit(Weapon* Weapon, out const BulletHitInfoUploadData BulletHitInfoUploadData);// 0x25a0ffc
	void EndReportSecCircleFlowData(int CircleIndex);// 0x25a0a34
	void DSReportWeaponHitFlow();// 0x25a0d84
	void DSReportWeaponHitData(int WeaponID);// 0x25a0d0c
	void DSReportWeaponFlow();// 0x25a0d98
	void DSReportUpgradeArmorFlow(out const UpgradeArmorFlowData UpgradeArmorFlowData, ApexCharacter* OwnerCharacter);// 0x25a1740
	void DSReportNetInfoFlow(int64 UID, FString ClientIP, int ping, int inTotal, int inTotalLost, int inOutOrder, int outTotal, int outTotalLost, int outOutOrder);// 0x25a12a0
	void DSReportHurtFlow(Pawn* Victim, ApexPlayerState* EnemyState, out SecHurtFlow CacheHurtFlow);// 0x25a1874
	void DSReportClientNetInfo(float PingAverage, float MaxPing, float MinPing, int InLossRate, int OutLossRate, int AvgJitter);// 0x25a156c
	void DSReportAttackFlow(out const BulletHitInfoUploadData BulletHitInfo, ShootWeapon* ShootWeapon, out const SecurityLogHitTargetInfo HitTargetInfo, out const BulletHitInfoTLogData TLogData);// 0x25a0dac
	void ClientReportSomeLog();// 0x25a128c
	void BeginReportSecCircleFlowData(out const SecCircleFlow SecCircleFlow);// 0x25a0aac

--------------------------------
Class: OBCacheData.SecBasic
	FString WatchRoleID;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: UpgradeArmorFlowData
	FString RoleID;//[Offset: 0x0, Size: 0xc]
	FString OpenId;//[Offset: 0xc, Size: 0xc]
	FString dtEventTime;//[Offset: 0x18, Size: 0xc]
	int OldLevel;//[Offset: 0x24, Size: 0x4]
	int OldExp;//[Offset: 0x28, Size: 0x4]
	int NewLevel;//[Offset: 0x2c, Size: 0x4]
	int NewExp;//[Offset: 0x30, Size: 0x4]
	int ChangeType;//[Offset: 0x34, Size: 0x4]
	int DamageType;//[Offset: 0x38, Size: 0x4]
	int ExpFromTrueRole;//[Offset: 0x3c, Size: 0x4]
	int ExpFromAI;//[Offset: 0x40, Size: 0x4]
	int ExpFromNPC;//[Offset: 0x44, Size: 0x4]
	int ExpFromPerk;//[Offset: 0x48, Size: 0x4]
	int CircleCount;//[Offset: 0x4c, Size: 0x4]
	int TeamNum;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SecHurtFlow.SecBasic
	int HurtFlowID;//[Offset: 0x30, Size: 0x4]
	FString EnemyRoleID;//[Offset: 0x34, Size: 0xc]
	int HurtTime;//[Offset: 0x40, Size: 0x4]
	int HurtDamage;//[Offset: 0x44, Size: 0x4]
	int EnemyLegendID;//[Offset: 0x48, Size: 0x4]
	int EnemyGunType;//[Offset: 0x4c, Size: 0x4]
	int EnemyGunID;//[Offset: 0x50, Size: 0x4]
	int EnemySkillID;//[Offset: 0x54, Size: 0x4]
	int HurtFrom;//[Offset: 0x58, Size: 0x4]
	int HitType;//[Offset: 0x5c, Size: 0x4]
	int HPstart;//[Offset: 0x60, Size: 0x4]
	int HPEnd;//[Offset: 0x64, Size: 0x4]
	int ArmorHPStart;//[Offset: 0x68, Size: 0x4]
	int ArmorHPEnd;//[Offset: 0x6c, Size: 0x4]
	int PlayerKilled;//[Offset: 0x70, Size: 0x4]
	int HurtType;//[Offset: 0x74, Size: 0x4]
	int HurtID;//[Offset: 0x78, Size: 0x4]
	int RealHurtType;//[Offset: 0x7c, Size: 0x4]
	int RealHurtID;//[Offset: 0x80, Size: 0x4]
	int ArmorKill;//[Offset: 0x84, Size: 0x4]
	int IfIsAI;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: SecCircleFlow.SecBasic
	int GameStartTime;//[Offset: 0x30, Size: 0x4]
	int NewCircleBornTime;//[Offset: 0x34, Size: 0x4]
	int NewCircleCount;//[Offset: 0x38, Size: 0x4]
	int OldCircleMoveTime;//[Offset: 0x3c, Size: 0x4]
	int OldCircleMoveEndTime;//[Offset: 0x40, Size: 0x4]
	int PlayerOutTime;//[Offset: 0x44, Size: 0x4]
	float NewCirclePositionX;//[Offset: 0x48, Size: 0x4]
	float NewCirclePositionY;//[Offset: 0x4c, Size: 0x4]
	float NewCirclePositionRadius;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MsgAssistantCompoent.ActorComponent.Object
	ApexAnimNotifySound*[] SoundsPool;//[Offset: 0xa8, Size: 0xc]
	<ApexAnimNotifySound*> SoundsPlayingHolder;//[Offset: 0xb4, Size: 0x3c]
	class ApexAnimNotifySound* SoundClass;//[Offset: 0x1e8, Size: 0x4]
	<enum,MsgCenterConfig> Config;//[Offset: 0x1ec, Size: 0x3c]
	LegendVoiceGuideConfigAsset* DALegendVoiceGuide;//[Offset: 0x228, Size: 0x4]
	LegnedVoiceGuideItem*[] GuideItemHolder;//[Offset: 0x22c, Size: 0xc]
	void ServerPushEvent(int EventID, Actor* RelevantActors, bool bHasAutonomousPlayed);// 0x260dce4
	void PushEventAutonomous(int EventID, Actor* Player);// 0x26bafd4
	void PushEvent(int EventID, Actor* RelevantActors);// 0x26bb090
	void PlayAudio(int EventID, Actor* Player, int Index);// 0x26baed4
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x26bb234
	float GetLastTriggerTimeAtServer(out const int EventID, out const int PlayerKey);// 0x26bb14c
	void ClientReceivedEvent(int EventID, Actor* Player);// 0x2563ea8

--------------------------------
Class: LegendVoiceGuideConfigAsset.DataAsset.Object
	float TotalCoolDown;//[Offset: 0x20, Size: 0x4]
	class LegnedVoiceGuideItem[] ItemsClasses;//[Offset: 0x24, Size: 0xc]
	float CheckGuideInterval;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: LegnedVoiceGuideItem.Object
	int EventID;//[Offset: 0x1c, Size: 0x4]
	LegendVoiceGuideCondition* TriggerCondition;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: LegendVoiceGuideCondition.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	void Tick(float DeltaTime);// 0x106c758
	bool CheckCondition(ApexPlayerController* PC);// 0x2670bcc

--------------------------------
Class: ModifyAttributeData.Object
	enum NetExecutionPolicy;//[Offset: 0x1c, Size: 0x1]
	float Duration;//[Offset: 0x20, Size: 0x4]
	float Period;//[Offset: 0x24, Size: 0x4]
	int ModifyByPawnStateMask;//[Offset: 0x28, Size: 0x4]
	enum ChangeType;//[Offset: 0x2c, Size: 0x1]
	AttributeModifierInfo[] Modifiers;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: AttributeModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x28]
	enum ModifierOp;//[Offset: 0x28, Size: 0x1]
	enum SumOp;//[Offset: 0x29, Size: 0x1]
	AttributeModifierMagnitude ModifierMagnitude;//[Offset: 0x2c, Size: 0x108]
	ModifyEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x134, Size: 0x1]

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0xc]
	FieldPathProperty Attribute;//[Size: 0x18]
	Struct* AttributeOwner;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AttributeModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x4, Size: 0x18]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x1c, Size: 0x84]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0xa0, Size: 0x58]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x4]
	FName RowName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x18]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x18, Size: 0x18]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x30, Size: 0x18]
	AttributeCaptureDefinition BackingAttribute;//[Offset: 0x48, Size: 0x2c]
	CurveTableRowHandle AttributeCurve;//[Offset: 0x74, Size: 0xc]
	enum AttributeCalculationType;//[Offset: 0x80, Size: 0x1]
	enum FinalChannel;//[Offset: 0x81, Size: 0x1]

--------------------------------
Class: AttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x28]
	enum AttributeSource;//[Offset: 0x28, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: CustomCalculationBasedFloat
	class ModifyMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x4]
	ScalableFloat Coefficient;//[Offset: 0x4, Size: 0x18]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x1c, Size: 0x18]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x34, Size: 0x18]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x4c, Size: 0xc]

--------------------------------
Class: ModifyMagnitudeCalculation.AttributeCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float CalculateBaseMagnitude(out const AttributeModifierSpec Spec);// 0x26b2d1c

--------------------------------
Class: AttributeCalculation.Object
	AttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: AttributeModifierSpec
	FName Tip;//[Offset: 0x0, Size: 0x8]
	ModifyAttributeData* ModifyAttributeData;//[Offset: 0x8, Size: 0x4]
	byte RemoveMode;//[Offset: 0xc, Size: 0x1]
	Actor* Source;//[Offset: 0x10, Size: 0x8]
	ModifierSpec[] Modifiers;//[Offset: 0x18, Size: 0xc]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	AttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x28, Size: 0x1c]
	float Level;//[Offset: 0xbc, Size: 0x4]
	FName PawnStateKey;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AttributeCaptureSpecContainer
	AttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0xc]
	AttributeCaptureSpec[] TargetAttributes;//[Offset: 0xc, Size: 0xc]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: AttributeCaptureSpec
	AttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x2c]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ModifyEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: EnemyInfo

--------------------------------
Class: DynamicDmgCurve
	bool EnableAILevelAI2AI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve AILevelDamage;//[Offset: 0x4, Size: 0x64]
	RuntimeFloatCurve AILevelHit;//[Offset: 0x68, Size: 0x64]
	RuntimeFloatCurve AI2PlayerDamage;//[Offset: 0xcc, Size: 0x64]
	RuntimeFloatCurve AI2PlayerHit;//[Offset: 0x130, Size: 0x64]
	RuntimeFloatCurve AI2AIDamage;//[Offset: 0x194, Size: 0x64]
	RuntimeFloatCurve AI2AIHit;//[Offset: 0x1f8, Size: 0x64]
	RuntimeFloatCurve AIVelocityFixHit;//[Offset: 0x25c, Size: 0x64]
	RuntimeFloatCurve AIDistanceFixHit;//[Offset: 0x2c0, Size: 0x64]

--------------------------------
Class: HitPositionConfig
	enum Position;//[Offset: 0x0, Size: 0x1]
	float Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SVONNavigationComponent.ActorComponent.Object
	bool DebugPrintCurrentPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool DebugPrintMortonCodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	bool DebugDrawOpenNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]
	bool UseUnitCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab, Size: 0x1]
	float UnitCost;//[Offset: 0xac, Size: 0x4]
	float EstimateWeight;//[Offset: 0xb0, Size: 0x4]
	float NodeSizeCompensation;//[Offset: 0xb4, Size: 0x4]
	enum PathCostType;//[Offset: 0xb8, Size: 0x1]
	int SmoothingIterations;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 0x4]
	FName AttachSocket;//[Offset: 0x4, Size: 0x8]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Vector2D DrawSize;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: TombBoxWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DeathRagDollParams
	float MassInKg;//[Offset: 0x0, Size: 0x4]
	float LinearSpeed;//[Offset: 0x4, Size: 0x4]
	float MaxLinearSpeed;//[Offset: 0x8, Size: 0x4]
	float AngularSpeed;//[Offset: 0xc, Size: 0x4]
	float MaxAngularSpeed;//[Offset: 0x10, Size: 0x4]
	float GravityAlpha;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UseReplicatorAnimMontageData
	AnimMontage* AnimMontage_FPP;//[Offset: 0x0, Size: 0x20]
	AnimMontage* AnimMontage_TPP;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: DeathTotem.SkillActorBase.DynamicMovementActor.Actor.Object
	float InitialHealth;//[Offset: 0x3e4, Size: 0x4]
	float CurrentHealth;//[Offset: 0x3e8, Size: 0x4]
	RepDeathTotemDamageEvent TotemDamageEvent;//[Offset: 0x3ec, Size: 0xc]
	bool InteractionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 0x1]
	bool AutonomousPlayerInInteractRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f8, Size: 0x1]
	bool ProtectionEffectCleared;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f8, Size: 0x1]
	float ProtectionDuration;//[Offset: 0x3fc, Size: 0x4]
	bool EnableRangeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	float RangeCheckRadius;//[Offset: 0x404, Size: 0x4]
	float RangeCheckBuffKeepPeriod;//[Offset: 0x408, Size: 0x4]
	float InteractRangeRadius;//[Offset: 0x40c, Size: 0x4]
	ApexSkillInteractiveParam* ApexSkillInteractiveParam;//[Offset: 0x410, Size: 0x4]
	ApexCharacterReviveInfo[] ReviveList;//[Offset: 0x490, Size: 0xc]
	int BackCount;//[Offset: 0x49c, Size: 0x4]
	float BackHealthTotal;//[Offset: 0x4a0, Size: 0x4]
	int TeammateEnableCount;//[Offset: 0x4a4, Size: 0x4]
	int EnemyEnableCount;//[Offset: 0x4a8, Size: 0x4]
	void SuggestProtectionForLocalPlayer(ApexCharacter* Player, bool SuggestEnable);// 0x25a51e0
	void ServerSwitchTotemProtection(ApexCharacter* Player, bool EnableProtection);// 0x25a52a4
	void ReportDeathTotem();// 0x25a5088
	void OnRep_TotemDamageEvent();// 0x25a50b0
	void OnRep_CharacterReviveList();// 0x25a509c
	void OnDeathTotemOffProtectionByDamage(float RecordedHealth);// 0x25a5010
	bool InPlayerSight(ApexCharacter* Player);// 0x25a50c4
	bool HasEverProtected(const ApexCharacter* Player);// 0x25a514c
	void ClearProtectionEffect();// 0x25a51cc
	void BP_OnFinish();// 0x2ce6f18
	void BP_OnDisconnectPlayer(ApexCharacter* Player);// 0x2ce6f18
	void BP_OnConnectPlayer(ApexCharacter* Player);// 0x2ce6f18
	void BP_OnCharacterReviveListUpdate();// 0x2ce6f18
	void BP_OnBeingDamaged(int DamageType, Pawn* Attacker, bool IsFatal);// 0x2ce6f18

--------------------------------
Class: RepDeathTotemDamageEvent
	byte ReplicationCounter;//[Offset: 0x0, Size: 0x1]
	bool IsFatal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	byte DamageType;//[Offset: 0x2, Size: 0x1]
	float Damage;//[Offset: 0x4, Size: 0x4]
	Pawn* Attacker;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ApexSkillInteractiveParam.SkillEventParam.Object
	bool bCheckBlocking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	byte CheckBlockingChannel;//[Offset: 0x4d, Size: 0x1]
	class Object[] CheckBlockingIgnoreClass;//[Offset: 0x50, Size: 0xc]
	enum[] InvalidPawnStateArray;//[Offset: 0x5c, Size: 0xc]
	bool bCheckHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float MaxHeightDiffFPP;//[Offset: 0x6c, Size: 0x4]
	float MaxHeightDiffTPP;//[Offset: 0x70, Size: 0x4]
	bool bCheckDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	float MaxDistanceFPP;//[Offset: 0x78, Size: 0x4]
	float MaxDistanceTPP;//[Offset: 0x7c, Size: 0x4]
	bool bMaxDistanceIgnoreZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bCheckFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bCheckFacingNoPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	float MaxInteractiveAngleFPP;//[Offset: 0x84, Size: 0x4]
	float MaxInteractiveAngleTPP;//[Offset: 0x88, Size: 0x4]
	Vector TargetInteractiveOffset;//[Offset: 0x8c, Size: 0xc]
	Vector TargetInteractiveOffsetOnCrouch;//[Offset: 0x98, Size: 0xc]
	bool bUseMeshRotationWhenTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	bool ShouldStartInteractive(ApexCharacter* Character, Actor* PassiveActor);// 0x24ae5fc

--------------------------------
Class: ApexCharacterReviveInfo
	ApexCharacter* RevivePlayer;//[Offset: 0x0, Size: 0x4]
	DeathTotem* DeathTotem;//[Offset: 0x4, Size: 0x4]
	bool ReviveInfoValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool RecordedIsCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float ReviveInfoValidEndTime;//[Offset: 0xc, Size: 0x4]
	float RecordedHealth;//[Offset: 0x10, Size: 0x4]
	float RecordedSpeed;//[Offset: 0x14, Size: 0x4]
	Vector ReviveLocation;//[Offset: 0x18, Size: 0xc]
	Quat ReviveQuatRotation;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CharacterComponentCreateData
	bool bCreateOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bTickOnDS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCreateOnAutonomous;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bTickOnAutonomous;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCreateOnSimulated;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bTickOnSimulated;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	class ActorComponent* ComponentClass;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameModeReSpawn.ActorComponent.Object
	TimerHandle TimerHandle;//[Offset: 0xa8, Size: 0x8]
	int ReSpawnNumber;//[Offset: 0xb0, Size: 0x4]
	bool TeamReSpawnMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	int64 TimeBox;//[Offset: 0xb8, Size: 0x8]
	void ReSpawnTimer();// 0x25f1e2c
	void OnGameStart();// 0x25f1e40

--------------------------------
Class: RepBloodHoundHunting
	float HuntingDuration;//[Offset: 0x0, Size: 0x4]
	float HuntingEnterTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ApexCharacterAnimationComponent.ActorComponent.Object
	int CharacterAnimationID;//[Offset: 0xe4, Size: 0x4]
	int LoadAnimDataAssetDistance;//[Offset: 0xe8, Size: 0x4]
	AnimParamList CurAnimParamList;//[Offset: 0xfc, Size: 0x74]
	float TurnInPlaceAngel;//[Offset: 0x170, Size: 0x4]
	delegate AnimMontagePlayDelegate;//[Offset: 0x180, Size: 0xc]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x18c, Size: 0xc]
	delegate OnPlayerPoseChange;//[Offset: 0x198, Size: 0xc]
	delegate PlayMontageByCameraMode;//[Offset: 0x1a4, Size: 0xc]
	delegate OnPlayCharacterMontage;//[Offset: 0x1b0, Size: 0xc]
	delegate OnPlayCharacterMontageFourParams;//[Offset: 0x1bc, Size: 0xc]
	delegate OnPlayCharacterMontageFiveParams;//[Offset: 0x1c8, Size: 0xc]
	delegate PlayAnimMontageDelegate;//[Offset: 0x1d4, Size: 0xc]
	delegate StopAnimMontageByAnimTypeAndLayer;//[Offset: 0x1e0, Size: 0xc]
	float SwitchPoseCDTime;//[Offset: 0x1ec, Size: 0x4]
	bool bUseBaseBSTransitionFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bUseBaseBSTransitionTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]
	bool bAnimForceInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]
	bool bAnimForceInFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1]
	<AnimSequenceBase*,AnimSeqList> AnimSoundSeqMap;//[Offset: 0x200, Size: 0x3c]
	ApexCharacter* ApexCharacter;//[Offset: 0x244, Size: 0x4]
	byte TryPopMovementMode();// 0x242de4c
	void SetRuntimeAnimPlayScaleBySkillType(enum SkillHandType, float RateScale);// 0x242dd90
	void SetRuntimeAnimPlayScaleByAnimType(byte AnimType, float RateScale);// 0x242dcd4
	byte PopMovementMode();// 0x242de74
	void OnWeaponStartFire(Weapon* InWeapon);// 0x242e274
	void OnPoseChanged(enum PrevState, enum NewState);// 0x242e570
	void OnPawnStateLeave(enum LeavedState);// 0x242e480
	void OnPawnStateEnter(enum EnteredState);// 0x242e4f8
	void OnPawnStateChanged(enum[] StatesMoreThanOld, enum[] StatesLessThanOld);// 0x242e2ec
	float GetRuntimeAnimPlayScaleBySkillType(enum SkillHandType);// 0x242dbd4
	float GetRuntimeAnimPlayScale(byte AnimType);// 0x242dc54
	byte GetPlayerJumpType(bool IsMoveBack);// 0x242e1bc
	bool GetInArmedAnimation();// 0x242e014
	byte GetCharacterPoseType();// 0x242e244
	void EnableUseBaseBSTransition(bool bEnable);// 0x242e13c
	void EnableAnimForceInFalling(bool bEnable);// 0x242e03c
	void EnableAnimForceInAir(bool bEnable);// 0x242e0bc
	void ClearSoundSeqByAnim(AnimSequenceBase* Anim);// 0x242de9c
	void AddAnimSoundMap(AnimSequenceBase* Anim, int SoundSeq, ApexAnimNotifySoundSetting* SoundSetting);// 0x242df14

--------------------------------
Class: AnimParamList
	float ClimbOverStartRate;//[Offset: 0x0, Size: 0x4]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool ScopeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool ScopeOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool IsLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool IsLandingLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool IsSlidingToAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool IsAirToSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	float ParachuteTurnInput;//[Offset: 0xc, Size: 0x4]
	float ParachuteForwardInput;//[Offset: 0x10, Size: 0x4]
	Vector LastLocation;//[Offset: 0x14, Size: 0xc]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool ImmediatelyKnockdownPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	byte SkillAnimHandType;//[Offset: 0x23, Size: 0x1]
	bool SkillAnimHandPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	enum DeadAnimType;//[Offset: 0x25, Size: 0x1]
	enum AnimRescueType;//[Offset: 0x26, Size: 0x1]
	float RescueAnimPlayRate;//[Offset: 0x28, Size: 0x4]
	BackpackSwitchGunAnimData BackpackSwitchGunAnimData;//[Offset: 0x2c, Size: 0xc]
	enum ClimbOverAnimType;//[Offset: 0x38, Size: 0x1]
	float ClimbAnimVelocity;//[Offset: 0x3c, Size: 0x4]
	Vector HangingPosition;//[Offset: 0x40, Size: 0xc]
	bool bIsBeFinisherStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bInArmedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bSlideAlongSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bOnSwitchThrowMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool bDefuseBombSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Vector GrapplingAimDirection;//[Offset: 0x54, Size: 0xc]
	float Significance;//[Offset: 0x60, Size: 0x4]
	byte JumpType;//[Offset: 0x64, Size: 0x1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool StateEnterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]

--------------------------------
Class: BackpackSwitchGunAnimData
	float Duration;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0x4, Size: 0x4]
	bool bPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: AnimSeqList
	AnimSeqData[] AnimSoundSeqList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimSeqData
	int SoundSeq;//[Offset: 0x0, Size: 0x4]
	ApexAnimNotifySoundSetting* SoundSetting;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PickupTipActor.Actor.Object
	PickupTipWidgetComponent* TipWidgetComp;//[Offset: 0x1d0, Size: 0x4]
	ParticleSystemComponent* TipParticleSystemComp;//[Offset: 0x1d4, Size: 0x4]
	ParticleSystem* PS1;//[Offset: 0x1d8, Size: 0x4]
	ParticleSysParam ParticleSysParam1;//[Offset: 0x1e0, Size: 0x80]
	ParticleSysParam ParticleSysParam2;//[Offset: 0x260, Size: 0x80]
	ParticleSysParam ParticleSysParam3;//[Offset: 0x2e0, Size: 0x80]
	ParticleSysParam ParticleSysParam4;//[Offset: 0x360, Size: 0x80]
	ParticleSysParam ParticleSysParam5;//[Offset: 0x3e0, Size: 0x80]
	Vector AutonomousPickupTipOffset;//[Offset: 0x460, Size: 0xc]
	Vector SimulatedPickupTipOffset;//[Offset: 0x46c, Size: 0xc]
	float PlayPickupTipTimes;//[Offset: 0x478, Size: 0x4]
	float PlayPickupTipInterval;//[Offset: 0x47c, Size: 0x4]
	bool bSwitchRollPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	bool bSwitchRollYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	bool bSwitchPitchYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 0x1]
	bool bUseRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 0x1]
	bool bUsePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	bool bUseYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1]
	bool bUseCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x486, Size: 0x1]
	Rotator ExtraRotation;//[Offset: 0x488, Size: 0xc]
	Rotator CorrectRotation;//[Offset: 0x494, Size: 0xc]
	ApexCharacter* pOwner;//[Offset: 0x4a0, Size: 0x4]
	void PickupTipPlayEnd();// 0x26fbde4
	void PickupTipIntervalEnd();// 0x26fbdd0

--------------------------------
Class: PickupTipWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PickupTipInfo
	byte UniqueID;//[Offset: 0x0, Size: 0x1]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int DriverID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: EnmityEntity.ActorComponent.Object
	SyncEnmityInfo[] SynEnmityList;//[Offset: 0xa8, Size: 0xc]
	<Actor*,EnmityRealTimeInfo> m_EnmityMap;//[Offset: 0xd0, Size: 0x3c]
	void SyncTestClient();// 0x24051f0
	void OnRep_EnmityList();// 0x25c44c8
	void EnableServerLog(bool bEnableServerLog);// 0x25c44dc
	void EnableClientLog(bool bEnableClientLog);// 0x25c4564
	void ClientLeaveBattle();// 0x2405154
	void ClientEnterBattle(const SyncEnmityInfo SyncEnmityInfo);// 0x25c4440

--------------------------------
Class: SyncEnmityInfo
	int64 ID;//[Offset: 0x0, Size: 0x8]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	float EnmityValue;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: EnmityRealTimeInfo
	EnmityInfo EnmityInfo;//[Offset: 0x0, Size: 0x20]
	EnmityTableInfo EnmityTableInfo;//[Offset: 0x20, Size: 0x20]
	float EnmityValue;//[Offset: 0x40, Size: 0x4]
	float ElpaseTime;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: EnmityInfo
	int EEnmityType;//[Offset: 0x0, Size: 0x4]
	int SubID;//[Offset: 0x4, Size: 0x4]
	bool Initiative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Actor* Target;//[Offset: 0xc, Size: 0x8]
	float Distance;//[Offset: 0x14, Size: 0x4]
	float DamageNumber;//[Offset: 0x18, Size: 0x4]
	bool bShootNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: EnmityTableInfo
	int64 ID;//[Offset: 0x0, Size: 0x8]
	int EEnmityType;//[Offset: 0x8, Size: 0x4]
	int SubID;//[Offset: 0xc, Size: 0x4]
	bool Initiative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float SrourceCoefficient;//[Offset: 0x14, Size: 0x4]
	float ClosePickupList_Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RecoverPropComponent.ActorComponent.Object
	<int,BaseRecoverPropItem*> RecoverPropItemMap;//[Offset: 0xac, Size: 0x3c]
	RecoverPropSyncInfo RecoverPropSyncInfo;//[Offset: 0xe8, Size: 0x10]
	bool UseItem(int ItemID);// 0x27356a0
	void RPCServerRecoverProp(int InGUID, int ItemID, float StartTimestamp, enum ERecoverPropUseType, bool bContinuous);// 0x2734e5c
	void RPCServerEnableLog(bool bEnableLog);// 0x27355b4
	void RPCServer_RemoveBuff(RecoverPropBuffInfo BuffInfo);// 0x27353ac
	void RPCServer_AddBuff(RecoverPropBuffInfo BuffInfo);// 0x27354b0
	void RPCClientEndRecoverProp(int InGUID, int ItemID, enum ERecoverPropUseType, bool bCancel, bool bCanContinue, const enum[] ErrorCodeList);// 0x2734c58
	void RemoveBuff(out const RecoverPropBuffInfo BuffInfo);// 0x273525c
	void OnRep_RecoverPropUpdate();// 0x2735650
	void OnItemNumberChanaged(ItemDefineID DefineID, int State);// 0x2735190
	void OnHealthInfoChange(uint32 PlayerKey, enum SyncType, ApexCharacter* Character, ApexPlayerState* PlayerState, bool NeedFadeHealthIn);// 0x2734ffc
	void OnAppEnterForeground();// 0x2734c44
	void InterruptRecoverProp();// 0x273563c
	void ClientStartFailed(const enum[] ErrorCodeList);// 0xf49c7c
	void Cancel();// 0x273568c
	bool BP_IsRecoveringProp();// 0x2735664
	void AddBuff(out const RecoverPropBuffInfo BuffInfo);// 0x2735304

--------------------------------
Class: BaseRecoverPropItem.RecoverPropCommonBase.Object
	FString Desc;//[Offset: 0x1c, Size: 0xc]
	bool CanContinueUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum RecoverPropPawnState;//[Offset: 0x29, Size: 0x1]
	BaseRecoverPropPhase*[] PhaseList;//[Offset: 0x2c, Size: 0xc]
	BaseRecoverPropPhase* CancelPhase;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: RecoverPropCommonBase.Object

--------------------------------
Class: BaseRecoverPropPhase.RecoverPropCommonBase.Object
	float PhaseDuringTime;//[Offset: 0x1c, Size: 0x4]
	BaseRecoverPropCondition*[] ConditionList;//[Offset: 0x20, Size: 0xc]
	BaseRecoverPropAction*[] ActionList;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: BaseRecoverPropCondition.RecoverPropCommonBase.Object
	bool IsNot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	enum[] ErrorCodeList;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: BaseRecoverPropAction.RecoverPropCommonBase.Object
	enum ERecoverPropExecuteEnd;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: RecoverPropBuffInfo
	FString Tag;//[Offset: 0x0, Size: 0xc]
	int ItemID;//[Offset: 0xc, Size: 0x4]
	enum eBuffType;//[Offset: 0x10, Size: 0x1]
	float Value;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: RecoverPropSyncInfo
	int UniqueID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	float StartTimestamp;//[Offset: 0x8, Size: 0x4]
	enum ERecoverPropUseType;//[Offset: 0xc, Size: 0x1]
	bool bContinuous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: ActionFilterComponent.ActorComponent.Object
	int[] m_FilterIDList;//[Offset: 0xa8, Size: 0xc]
	void ServerCheck(enum EPawnState);// 0x23de15c
	void RPCRemoveFilterID(const int InID);// 0x23de1dc
	void RPCClear();// 0xf49d14
	void RPCAddFilterID(const int InID);// 0x23de25c

--------------------------------
Class: FSM.Object
	EdGraph* GraphView;//[Offset: 0x1c, Size: 0x4]
	FName EntryState;//[Offset: 0x20, Size: 0x8]
	FSMData StateMachine;//[Offset: 0x28, Size: 0x3c]

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x1c, Size: 0x4]
	EdGraphNode*[] Nodes;//[Offset: 0x20, Size: 0xc]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x28, Size: 0xc]
	int NodePosX;//[Offset: 0x34, Size: 0x4]
	int NodePosY;//[Offset: 0x38, Size: 0x4]
	int NodeWidth;//[Offset: 0x3c, Size: 0x4]
	int NodeHeight;//[Offset: 0x40, Size: 0x4]
	byte AdvancedPinDisplay;//[Offset: 0x44, Size: 0x1]
	enum EnabledState;//[Offset: 0x45, Size: 0x1]
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47, Size: 0x1]
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47, Size: 0x1]
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47, Size: 0x1]
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47, Size: 0x1]
	FString NodeComment;//[Offset: 0x48, Size: 0xc]
	int ErrorType;//[Offset: 0x54, Size: 0x4]
	FString ErrorMsg;//[Offset: 0x58, Size: 0xc]
	Guid NodeGuid;//[Offset: 0x64, Size: 0x10]

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x1c, Size: 0xc]
	FString PinToolTip;//[Offset: 0x28, Size: 0xc]
	byte Direction;//[Offset: 0x34, Size: 0x1]
	EdGraphPinType PinType;//[Offset: 0x38, Size: 0x54]
	FString DefaultValue;//[Offset: 0x8c, Size: 0xc]
	FString AutogeneratedDefaultValue;//[Offset: 0x98, Size: 0xc]
	Object* DefaultObject;//[Offset: 0xa4, Size: 0x4]
	FText DefaultTextValue;//[Offset: 0xa8, Size: 0xc]
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xb4, Size: 0xc]
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xc0, Size: 0xc]
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0xcc, Size: 0x4]
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8]
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x1c]
	EdGraphTerminalType PinValueType;//[Offset: 0x34, Size: 0x1c]
	enum ContainerType;//[Offset: 0x50, Size: 0x1]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1]
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51, Size: 0x1]
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51, Size: 0x1]
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51, Size: 0x1]

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8]
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: FSMData
	<FName,TransRule> CurrState_Mapping_TransRule;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: TransRule
	<FName,enum> Keyword_mapping_TargetState;//[Offset: 0x0, Size: 0x3c]
	FName FromState;//[Offset: 0x3c, Size: 0x8]

--------------------------------
Class: CharacterInputComponent.ActorComponent.Object
	delegate OnJoyStickInteruptDelegate;//[Offset: 0xa8, Size: 0xc]
	Vector CurInputVector;//[Offset: 0xb4, Size: 0xc]
	float LeftRightDegree;//[Offset: 0xc0, Size: 0x4]
	void SetPreOverDrag(bool NewOverDrag);// 0x25687ec
	void SetOverDrag(bool NewOverDrag);// 0x256892c
	void SetInvokeSprint(bool Value);// 0x2568704
	void ServerSetMovementInputError(int ErrorType);// 0x2405170
	void ServerSetMoveInputDir(enum InputDir);// 0x25689a8
	void ServerEnableAutoForward(bool NewAutoForward);// 0x256867c
	void MoveRight(float Rate);// 0x2568a28
	void MoveForward(float Rate);// 0x2568aa0
	bool IsPreOverDrag();// 0x25687d0
	bool IsOverDrag();// 0x2568904
	bool IsAutoForward();// 0x2568868
	float GetRawRightInputRate();// 0x2568780
	float GetRawForwardInputRate();// 0x256879c
	void EnableAutoForward(bool NewAutoForward);// 0x2568884

--------------------------------
Class: AuraComponent.ActorComponent.Object
	<FName,AuraInfo> AuraInfos;//[Offset: 0xa8, Size: 0x3c]
	void SetAuraLegendID(FName AuraName, int LegendIDIn);// 0x2504134
	void RemoveAuraData(out const AuraInfo[] AuraInfoArray);// 0x250465c
	void OneAuraForTarget(FName AuraName, delegate ForTargetDynamicDelegate, bool IsIgnoreActive);// 0x250441c
	bool DeactiveOneAura(FName AuraName);// 0x25041f8
	bool CheckTargetInAura(ApexCharacter* TargetCharacter, FName AuraName, bool IsIgnoreActive);// 0x2504300
	void AuraForTarget(delegate ForTargetDynamicDelegate, bool IsIgnoreActive);// 0x2504564
	void AddAuraData(out const AuraInfo[] AuraInfoArray);// 0x2504718
	bool ActiveOneAura(FName AuraName);// 0x250427c

--------------------------------
Class: AuraInfo
	FName AuraName;//[Offset: 0x0, Size: 0x8]
	AuraShape* AuraShape;//[Offset: 0x8, Size: 0x4]
	bool IsEvaluateBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	byte BlockChannel;//[Offset: 0xd, Size: 0x1]
	<FName> BuffNameArray;//[Offset: 0x10, Size: 0x3c]
	enum TargetType;//[Offset: 0x4c, Size: 0x1]
	bool bNeedSimulateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	FName[] RejectedByBuffs;//[Offset: 0x50, Size: 0xc]
	bool CleanBuffOnRemoveAura;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	int LegendId;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: AuraShape.Object

--------------------------------
Class: VoidDoorActor.SkillActorBase.DynamicMovementActor.Actor.Object
	float MaxRiftPoint;//[Offset: 0x3d8, Size: 0x4]
	float RiftPointPerMeter;//[Offset: 0x3dc, Size: 0x4]
	float EffectiveSquaredDistance;//[Offset: 0x3e0, Size: 0x4]
	float PathMaxDistance;//[Offset: 0x3e4, Size: 0x4]
	float RecordInterval;//[Offset: 0x3e8, Size: 0x4]
	float EfficientDelay;//[Offset: 0x3ec, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x3f0, Size: 0x4]
	float StandCapsuleHalfHeight;//[Offset: 0x3f4, Size: 0x4]
	float CrouchCapsuleHalfHeight;//[Offset: 0x3f8, Size: 0x4]
	Vector StandCapsuleOffset;//[Offset: 0x3fc, Size: 0xc]
	Vector CrouchCapsuleOffset;//[Offset: 0x408, Size: 0xc]
	float RemainRiftPoint;//[Offset: 0x418, Size: 0x4]
	enum RecordStatus;//[Offset: 0x41c, Size: 0x1]
	bool bHasValidPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 0x1]
	float PathMoveTime;//[Offset: 0x420, Size: 0x4]
	RecordPathNodeData[] PathList;//[Offset: 0x428, Size: 0xc]
	RecordPathNodeData[] TempPathList;//[Offset: 0x434, Size: 0xc]
	CapsuleComponent* StartRift;//[Offset: 0x440, Size: 0x4]
	CapsuleComponent* EndRift;//[Offset: 0x444, Size: 0x4]
	float EfficientDelayTime;//[Offset: 0x448, Size: 0x4]
	ApexCharacter* OwnerCharacter;//[Offset: 0x44c, Size: 0x4]
	ApexCharacterMovementComponent* OwnerCMC;//[Offset: 0x450, Size: 0x4]
	SkillModifierInfo OverrideStateSkillModifier;//[Offset: 0x454, Size: 0x20]
	CapsuleComponent* OwnerCapsuleComp;//[Offset: 0x4a4, Size: 0x4]
	VoidMover*[] EnteredMovers_Server;//[Offset: 0x4a8, Size: 0xc]
	float EnterInterval;//[Offset: 0x4f0, Size: 0x4]
	float EnterSameInterval;//[Offset: 0x4f4, Size: 0x4]
	float MinMoveDuration;//[Offset: 0x4f8, Size: 0x4]
	float MaxMoveDuration;//[Offset: 0x4fc, Size: 0x4]
	float MoveSpeed;//[Offset: 0x500, Size: 0x4]
	float DirUpdateInterval;//[Offset: 0x504, Size: 0x4]
	class VoidMover* VoidMoverTemplate;//[Offset: 0x508, Size: 0x4]
	float LifeDuration;//[Offset: 0x510, Size: 0x4]
	float OutBlueCircleLifeDuration;//[Offset: 0x514, Size: 0x4]
	RadiationCircleStateComponent* CurCircleStateComp;//[Offset: 0x518, Size: 0x4]
	float BornDuration;//[Offset: 0x51c, Size: 0x4]
	float OutBlueCircleDuration;//[Offset: 0x520, Size: 0x4]
	bool InBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	void StartRecordPath();// 0x27ff7bc
	void SetRemainRiftPoint(float inRemainRiftPoint);// 0x27ff6fc
	void SetRecordStatus(enum inRecordStatus);// 0x27ff664
	void SetPathMoveTime(float inPathMoveTime);// 0x27ff514
	void SetHasValidPoint(bool inHasValidPoint);// 0x27ff5b4
	void Rep_RemainRiftPoint();// 0x27ff48c
	void Rep_RecordStatus();// 0x27ff478
	void RecordComplete();// 0x27ff450
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x27ff158
	void OnRiftEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x27fee14
	void OnRiftBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x27fef5c
	void OnRep_PathMoveTime();// 0x27ff214
	void OnRep_PathList();// 0x27ff464
	bool HasValidPoint();// 0x27ff648
	RecordPathNodeData[] GetValidPath(RecordPathNodeData[] List);// 0x27ff308
	float GetRemainRiftPoint();// 0x27ff784
	enum GetRecordStatus();// 0x27ff6e0
	float GetPathMoveTime();// 0x27ff598
	RecordPathNodeData[] GetPathList();// 0x27ff4a0
	void CheckRecordStateCompleted();// 0x27ff7a0
	bool CheckPointValid(Vector StartPoint, Vector EndPoint);// 0x27ff240
	void BP_SetRiftEffect(CapsuleComponent* Rift, const RecordPathNodeData NodeData);// 0x2ce6f18
	void BP_RecordSuccess();// 0x2ce6f18
	void BP_RecordFailure();// 0x2ce6f18
	void BP_OnBlueCircleStateChanged(bool InBlue);// 0x2ce6f18

--------------------------------
Class: RecordPathNodeData
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	bool WasCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: VoidMover.VoidActor.SkillActorBase.DynamicMovementActor.Actor.Object
	float SwitchModeLerpInTime;//[Offset: 0x42c, Size: 0x4]
	float SwitchModeLerpOutTime;//[Offset: 0x430, Size: 0x4]
	float BlockCollisionRadiusScale;//[Offset: 0x434, Size: 0x4]
	float BlockCollisionStandHalfHeightScale;//[Offset: 0x438, Size: 0x4]
	float BlockCollisionCrouchHalfHeightScale;//[Offset: 0x43c, Size: 0x4]
	Vector BlockCollisionRHeightOffset;//[Offset: 0x440, Size: 0xc]
	float RotateFactor;//[Offset: 0x44c, Size: 0x4]
	bool BacktrackIfBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	MovePathData MovePathData;//[Offset: 0x454, Size: 0x24]
	Actor*[] ActorsToIgnore;//[Offset: 0x518, Size: 0xc]
	void ServerUpdateCharacterLocation(const VoidMoveSynData SynData);// 0x28009f4
	void OnTargetCharacterBeDestroyed();// 0x2800bb4
	void OnRep_MovePathData();// 0x2800bc8
	void OnOverridePawnStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x2800ab4

--------------------------------
Class: VoidActor.SkillActorBase.DynamicMovementActor.Actor.Object
	bool bDoActionAtAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	FName PostProcessTemplate;//[Offset: 0x3d4, Size: 0x8]
	enum PostProcessSource;//[Offset: 0x3dc, Size: 0x1]
	class Actor* GhostingSpawnerTemplate;//[Offset: 0x3e0, Size: 0x4]
	bool bAutoSetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1]
	bool bLimitEnterInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 0x1]
	bool bCanSeeOtherInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6, Size: 0x1]
	bool bCanSeeOtherVoidInVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e7, Size: 0x1]
	bool bClearComponentOverlaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	Actor* GhostingSpawner;//[Offset: 0x3ec, Size: 0x4]
	ApexCharacter* CacheEnterCharacter;//[Offset: 0x3f4, Size: 0x8]
	bool bHadEnterVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	void ExitVoid(ApexCharacter* Character);// 0x27e20b8
	void EnterVoid(ApexCharacter* Character);// 0x274616c
	void DoClientCharacterMesh(ApexCharacter* Character, SkeletalMeshComponent* CharacterMesh, bool IsEnter);// 0x27fe378
	void DoClientCameraEffect(ApexCharacter* Character, CameraComponent* CameraComponent, bool IsEnter);// 0x27fe268
	void DoClientAction(ApexCharacter* Character, bool IsEnter);// 0x27fe554
	void BP_DoClientAction(ApexCharacter* Character, bool IsEnter);// 0x27fe488
	void AddTrackerForEnterTime(ApexCharacter* Character, float Time);// 0x27fe1ac

--------------------------------
Class: VoidMoveSynData
	int CurPointIndex;//[Offset: 0x0, Size: 0x4]
	int NextPointIndex;//[Offset: 0x4, Size: 0x4]
	bool bArrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector BlockLocation;//[Offset: 0xc, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MovePathData
	ApexCharacter* TargetCharacter;//[Offset: 0x0, Size: 0x4]
	RecordPathNodeData[] MovePathList;//[Offset: 0x4, Size: 0xc]
	VoidDoorActor* OwnerDoor;//[Offset: 0x10, Size: 0x4]
	float PathMoveTime;//[Offset: 0x14, Size: 0x4]
	bool bReversal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float MinMoveDuration;//[Offset: 0x1c, Size: 0x4]
	float DirUpdateInterval;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PropsWeaponFadeOutParams
	enum FadeOutReason;//[Offset: 0x0, Size: 0x1]
	float FadeOutTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BroadcastMsgData
	enum BroadcastMsgType;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: QueryPlayerInfo
	FString GameModeID;//[Offset: 0x0, Size: 0xc]
	float PlayTime;//[Offset: 0xc, Size: 0x4]
	Vector Position;//[Offset: 0x10, Size: 0xc]
	int LegendId;//[Offset: 0x1c, Size: 0x4]
	FString CurrSkillIdsStr;//[Offset: 0x20, Size: 0xc]
	FString CurrPawnStatesStr;//[Offset: 0x2c, Size: 0xc]
	FString CurrBuffIdsStr;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: RepRevenantSilence
	float RevenantSilenceEffectEndTime;//[Offset: 0x0, Size: 0x4]
	float RevenantSilenceLastDuration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RepDeathTotemProtection
	bool HasProtectionOfDeathTotem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool LeaveByConsumption;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float TotemProtectionLeftSeconds;//[Offset: 0x4, Size: 0x4]
	Vector DeathTotemPosition;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: RepDeathTotemRangeTest
	bool IsOutOfValidRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float OutOfRangeTestEndTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CharacterMagmaRiseComponent.ActorComponent.Object
	float ForwardMoveSpeed;//[Offset: 0xa8, Size: 0x4]
	float RightMoveSpeed;//[Offset: 0xac, Size: 0x4]
	float RightAcceleRate;//[Offset: 0xb0, Size: 0x4]
	float MaxRiseZSpeed;//[Offset: 0xb4, Size: 0x4]
	float RiseAcceleration;//[Offset: 0xb8, Size: 0x4]
	float RiseHitTopMinHeight;//[Offset: 0xbc, Size: 0x4]
	float RiseHitTopMaxAngle;//[Offset: 0xc0, Size: 0x4]
	float MagmaRiseDelayTime;//[Offset: 0xc4, Size: 0x4]
	bool bMagmaAnimState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	MagmaRiseStateCameraEffectCfg StartCameraEffectCfg;//[Offset: 0xf8, Size: 0x38]
	MagmaRiseStateCameraEffectCfg EndCameraEffectCfg;//[Offset: 0x130, Size: 0x38]
	MagmaRiseCameraSpringArmCfg FirstEnterMagmaRiseCameraCfg;//[Offset: 0x168, Size: 0x14]
	class CameraShake* FirstEnterMagmaRiseCameraShake;//[Offset: 0x17c, Size: 0x4]
	float FirstEnterMagmaRiseDurationOffset;//[Offset: 0x180, Size: 0x4]
	bool IsFirstEnterMagmaRise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	class CameraShake* CurMagmaRiseCameraShake;//[Offset: 0x188, Size: 0x4]
	CameraShake* CameraShakeInst;//[Offset: 0x18c, Size: 0x4]
	ParticleEffectSetCfg ParticleEffectSetCfg;//[Offset: 0x190, Size: 0x3c]
	FName[] StartAudioEffectCfg;//[Offset: 0x1cc, Size: 0xc]
	FName[] StopAudioEffectCfg;//[Offset: 0x1d8, Size: 0xc]
	AudioEffectManager* OwnerAudioEffectManager;//[Offset: 0x1e4, Size: 0x4]
	void Switch2MagmaRise();// 0x25695a4
	void StopMagmaRise();// 0x2569628
	void StartMagmaRise();// 0x256963c
	void RequestAsyncLoadingParachuteParticle();// 0xfd338c
	void OnRep_OnMagmaAnimState();// 0x25693c0
	void OnMoveHit(out const HitResult Hit);// 0x25693e8
	void OnCameraStartMagmaRiseDelayFinished();// 0x25693d4
	bool IsMagmaRise();// 0x2569600
	Vector GetCurVelocity();// 0x25695b8
	void CalcVelocity(out Vector Velocity, out const Vector Acceleration, float DeltaTime);// 0x2569484

--------------------------------
Class: MagmaRiseStateCameraEffectCfg
	MagmaRiseCameraSpringArmCfg Normal;//[Offset: 0x0, Size: 0x14]
	MagmaRiseCameraSpringArmCfg Acc;//[Offset: 0x14, Size: 0x14]
	class CameraShake* MagmaRiseCameraShake;//[Offset: 0x28, Size: 0x4]
	bool EnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x30, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MagmaRiseCameraSpringArmCfg
	float TargetArmLength;//[Offset: 0x0, Size: 0x4]
	bool bLerpFormCurArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float StartArmLength;//[Offset: 0x8, Size: 0x4]
	float ArmLengthLerpDuration;//[Offset: 0xc, Size: 0x4]
	float NearClippingPlane;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: APAttributeSet.AttributeSet.Object
	GameplayAttributeData SpeedScale;//[Offset: 0x20, Size: 0xc]
	GameplayAttributeData MaxWalkSpeedLimit;//[Offset: 0x2c, Size: 0xc]
	GameplayAttributeData DisableSprint;//[Offset: 0x38, Size: 0xc]
	GameplayAttributeData KnockdownSpeedScale;//[Offset: 0x44, Size: 0xc]
	GameplayAttributeData SkillDamageScale;//[Offset: 0x50, Size: 0xc]
	GameplayAttributeData AIDamageScale;//[Offset: 0x5c, Size: 0xc]
	GameplayAttributeData MeleeAttackDamageScale;//[Offset: 0x68, Size: 0xc]
	GameplayAttributeData ViewScrollSpeedScale;//[Offset: 0x74, Size: 0xc]
	GameplayAttributeData SpreadScale;//[Offset: 0x80, Size: 0xc]
	GameplayAttributeData RescueMultiplier;//[Offset: 0x8c, Size: 0xc]
	GameplayAttributeData RescueSelfMultiplier;//[Offset: 0x98, Size: 0xc]
	GameplayAttributeData IsIndiviRescue;//[Offset: 0xa4, Size: 0xc]
	GameplayAttributeData MoveShowDistanceScale;//[Offset: 0xb0, Size: 0xc]
	GameplayAttributeData FireShowDistanceScale;//[Offset: 0xbc, Size: 0xc]
	GameplayAttributeData ConsumeShowDistanceScale;//[Offset: 0xc8, Size: 0xc]
	GameplayAttributeData VisualSoundTriggerFactor;//[Offset: 0xd4, Size: 0xc]
	GameplayAttributeData EnableVisualSound;//[Offset: 0xe0, Size: 0xc]
	GameplayAttributeData EnableImmuneHitSlowly;//[Offset: 0xec, Size: 0xc]
	GameplayAttributeData TacticsSkillCDScale;//[Offset: 0xf8, Size: 0xc]
	GameplayAttributeData UltimateSkillCDScale;//[Offset: 0x104, Size: 0xc]
	GameplayAttributeData TacticsSkillCDThresholdScale;//[Offset: 0x110, Size: 0xc]
	GameplayAttributeData UltimateSkillCDThresholdScale;//[Offset: 0x11c, Size: 0xc]
	GameplayAttributeData TacticsSkillCDCastScale;//[Offset: 0x128, Size: 0xc]
	GameplayAttributeData UltimateSkillCDCastScale;//[Offset: 0x134, Size: 0xc]
	GameplayAttributeData PathfinderGrappleSpeedScale;//[Offset: 0x140, Size: 0xc]
	void OnRep_VisualSoundTriggerFactor(out const GameplayAttributeData OldValue);// 0x23f34b8
	void OnRep_ViewScrollSpeedScale(out const GameplayAttributeData OldValue);// 0x23f39f8
	void OnRep_UltimateSkillCDThresholdScale(out const GameplayAttributeData OldValue);// 0x23f30c8
	void OnRep_UltimateSkillCDScale(out const GameplayAttributeData OldValue);// 0x23f3218
	void OnRep_UltimateSkillCDCastScale(out const GameplayAttributeData OldValue);// 0x23f2f78
	void OnRep_TacticsSkillCDThresholdScale(out const GameplayAttributeData OldValue);// 0x23f3170
	void OnRep_TacticsSkillCDScale(out const GameplayAttributeData OldValue);// 0x23f32c0
	void OnRep_TacticsSkillCDCastScale(out const GameplayAttributeData OldValue);// 0x23f3020
	void OnRep_SpreadScale(out const GameplayAttributeData OldValue);// 0x23f3950
	void OnRep_SpeedScale(out const GameplayAttributeData OldValue);// 0x23f3e90
	void OnRep_SkillDamageScale(out const GameplayAttributeData OldValue);// 0x23f3bf0
	void OnRep_RescueSelfMultiplier(out const GameplayAttributeData OldValue);// 0x23f3800
	void OnRep_RescueMultiplier(out const GameplayAttributeData OldValue);// 0x23f38a8
	void OnRep_PathfinderGrappleSpeedScale(out const GameplayAttributeData OldValue);// 0x23f2ed0
	void OnRep_MoveShowDistanceScale(out const GameplayAttributeData OldValue);// 0x23f36b0
	void OnRep_MeleeAttackDamageScale(out const GameplayAttributeData OldValue);// 0x23f3aa0
	void OnRep_MaxWalkSpeedLimit(out const GameplayAttributeData OldValue);// 0x23f3de8
	void OnRep_KnockdownSpeedScale(out const GameplayAttributeData OldValue);// 0x23f3c98
	void OnRep_IsIndiviRescue(out const GameplayAttributeData OldValue);// 0x23f3758
	void OnRep_FireShowDistanceScale(out const GameplayAttributeData OldValue);// 0x23f3608
	void OnRep_EnableVisualSound(out const GameplayAttributeData OldValue);// 0x23f3410
	void OnRep_EnableImmuneHitSlowly(out const GameplayAttributeData OldValue);// 0x23f3368
	void OnRep_DisableSprint(out const GameplayAttributeData OldValue);// 0x23f3d40
	void OnRep_ConsumeShowDistanceScale(out const GameplayAttributeData OldValue);// 0x23f3560
	void OnRep_AIDamageScale(out const GameplayAttributeData OldValue);// 0x23f3b48

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x4, Size: 0x4]
	float CurrentValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	<FName,byte> PlayerStateAttr;//[Offset: 0xa8, Size: 0x3c]
	ActiveModifyContainer ActiveModifyContainer;//[Offset: 0xe8, Size: 0x200]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x2e8, Size: 0xc]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	delegate OnAttrModified;//[Offset: 0x304, Size: 0xc]
	bool bIsResBunchModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x320, Size: 0xc]
	byte[] AttrModifyStateList;//[Offset: 0x32c, Size: 0xc]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x338, Size: 0xc]
	AttrModifyItem[] DynamicModifierList;//[Offset: 0x344, Size: 0xc]
	AttrModifyItem[] DynamicModifierClientList;//[Offset: 0x350, Size: 0xc]
	bool UpdateDynamicModifierByFormula(out FormulaProxyAttrModifyItem AttrModifyItem, const float dt);// 0x24fa504
	bool UpdateDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x24fa6b4
	void SetValueToAttribute(FString AttrName, float Value);// 0x24fa130
	bool ReplaceModifyAbleAttr(out const AttrRegisterItem AttrRegistItem);// 0x24fac8c
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x24fadc0
	void OnRep_DynamicModifierList();// 0x2405154
	void OnRep_AttrModifyStateList();// 0xf49d14
	void OnBatchResLoaded__DelegateSignature(int ReqID);// 0x2ce6f18
	void OnAttrModifiedEvent__DelegateSignature(out const FString[] AffectedAttrS);// 0x2ce6f18
	bool HasDynamicModifier(FString AttrModifyId);// 0x24fa2d8
	AttrModifyItem[] GetDynamicModifierRepList();// 0x24f9e0c
	bool GetAttrModifyItemByItemName(FString AttrModifyItemName, out AttrModifyItem OutItem);// 0x24f9ea8
	float GetAttributeValueMax(FString AttrName);// 0x24fa000
	float GetAttributeValue(FString AttrName);// 0x24fa098
	void EnableStaticModifiers(out const FString[] AttrModifyItemNames, FString ModifierSuffix);// 0x24faac4
	bool EnableStaticModifier(FString AttrModifyItemName);// 0x24fabf4
	bool EnableDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x24fa7b0
	bool EnableAllStaticModifier();// 0x24fa8d4
	void DisableStaticModifiers(out const FString[] AttrModifyItemNames, FString ModifierSuffix);// 0x24fa8fc
	bool DisableStaticModifier(FString AttrModifyItemName);// 0x24faa2c
	bool DisableDynamicModifierById(FString AttrModifyId);// 0x24fa46c
	bool DisableDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x24fa370
	bool DisableAllStaticModifier();// 0x24fa8ac
	void AddValueToAttribute(FString AttrName, float Value);// 0x24fa204

--------------------------------
Class: FormulaProxyAttrModifyItem.AttrModifyItem
	bool bEnableModifyLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float MinModifyValue;//[Offset: 0x50, Size: 0x4]
	float MaxModifyValue;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: AttrModifyItem
	float FinalAddValue;//[Offset: 0x0, Size: 0x4]
	FString AttrModifyItemName;//[Offset: 0x4, Size: 0xc]
	enum AttrType;//[Offset: 0x10, Size: 0x1]
	FString AttrName;//[Offset: 0x14, Size: 0xc]
	enum ModifierOp;//[Offset: 0x20, Size: 0x1]
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	float ModifierValue;//[Offset: 0x24, Size: 0x4]
	SoftObjectPath ModifierResValue;//[Offset: 0x28, Size: 0x14]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool LinearChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	float ChangingDuration;//[Offset: 0x40, Size: 0x4]
	float LinearProgressTime;//[Offset: 0x44, Size: 0x4]
	float OriModifierValue;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 0xc]
	enum AttrVariableType;//[Offset: 0xc, Size: 0x1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	Object* OriginalRes;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ActiveModifyContainer.FastArraySerializer
	ActiveModify[] ActiveModifies_Internal;//[Offset: 0x1d4, Size: 0xc]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x40, Size: 0x4]
	enum DeltaFlags;//[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: ActiveModify.FastArraySerializerItem
	AttributeModifierSpec Spec;//[Offset: 0x14, Size: 0xc8]
	PredictionKey PredictionKey;//[Offset: 0xdc, Size: 0xc]
	float StartServerWorldTime;//[Offset: 0xe8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0xec, Size: 0x4]
	float StartWorldTime;//[Offset: 0xf0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CharacterDeathInfo
	bool bIsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MurderWeaponSkinId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DispatchingActionCollection
	DispatchableActionBase*[] Actions;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: DispatchableActionBase.Object
	bool bIsCoexistWithOtherActionForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	enum DefaultActionCompatibleType;//[Offset: 0x1d, Size: 0x1]
	DispatchableActionBase* GeneratedByTemplate;//[Offset: 0x20, Size: 0x4]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	DispatchableActionReplicationActor* ReplicationActor;//[Offset: 0x28, Size: 0x4]
	bool bIsCachedAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bTickable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	void SetActionReplicatedTargets(Actor* NetOwner, out const Actor*[] RelevantTargets, bool ReplicateDispatcher, float RelevantDistance);// 0xfe94bc
	void ReceiveWhenTick(float DeltaSeconds);// 0x2ce6f18
	void ReceiveWhenResetAction();// 0x2ce6f18
	void ReceiveWhenBroadcastDeactived();// 0x2ce6f18
	void ReceiveWhenBroadcastActived();// 0x2ce6f18
	void ReceiveWhenActionReactived();// 0xfe936c
	void ReceiveWhenActionDeactived();// 0x2ce6f18
	void ReceiveWhenActionConstruct();// 0x2ce6f18
	void ReceiveWhenActionActived();// 0x2ce6f18
	void ReceiveWhenActionAborted(enum AbortState);// 0xfe9388
	bool ReceiveCheckActionDispatchable();// 0xfe933c
	bool IsLocalControlled();// 0xfe9664
	bool IsEvaluateBound(out const EvaluateDispatchableActionParameter Evaluator);// 0xfe9254
	bool HasAuthority();// 0xfe963c
	DispatchableActionReplicationActor* GetNetOwner();// 0xfe968c
	void FinishAction(out const DispatchableActionFinishEvent FinishEvent);// 0xfe941c
	void FinishAbort();// 0xfe9408
	bool ExecuteEvaluate(out const EvaluateDispatchableActionParameter Evaluator);// 0xfe91b4
	void CreateAssignOrResetActionFromTemplate(Object* Outer, out DispatchableActionBase* InstanceRef);// 0xfe97ac
	DispatchableActionBase* CreateActionFromTemplate(Object* Outer);// 0xfe9878
	void ConstructAndActiveAction();// 0xfe98f8

--------------------------------
Class: DispatchableActionReplicationActor.Actor.Object
	Actor*[] NetRelevantTargets;//[Offset: 0x1d0, Size: 0xc]
	DispatchableActionBase* RealAction;//[Offset: 0x1dc, Size: 0x4]
	EntityDispatcherBase* EntityDispatcher;//[Offset: 0x1e0, Size: 0x4]
	DispatchableActionBase* RPC_ProxyAction;//[Offset: 0x1e4, Size: 0x4]
	void OnRep_ProxyAction();// 0xfe8cc4

--------------------------------
Class: EntityDispatcherBase.Object
	bool DummyVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	DispatchableActionBase*[] ActivedActions;//[Offset: 0x20, Size: 0xc]
	FName CachedFinishTag;//[Offset: 0x38, Size: 0x8]
	delegate OnDispatcherFinishedDelegate;//[Offset: 0x40, Size: 0x10]
	delegate OnDispatcherAbortedDelegate;//[Offset: 0x64, Size: 0x10]
	DispatchableActionBase*[] AbortingActions;//[Offset: 0x88, Size: 0xc]
	DispatchableActionBase*[] ReactivableActions;//[Offset: 0x94, Size: 0xc]
	DispatchableActionBase*[] InvalidActions;//[Offset: 0xa0, Size: 0xc]
	bool TriggerActionCheckPass(FName InTriggerEventName);// 0xfebbf4
	void StartByDefaultEntry();// 0xfebd78
	void ReceiveWhenDeactived();// 0x2ce6f18
	void ReceiveWhenActived();// 0x2ce6f18
	void OnDispatcherFinishedDelegate__DelegateSignature(out const FName Tag);// 0x2ce6f18
	void OnDispatcherAbortedDelegate__DelegateSignature();// 0x2ce6f18
	bool IsAnyActionActived(out const DispatchableActionBase*[] CheckedByTemplates);// 0xfebb00
	EntityDispatcherBase* GetMainDispatcher();// 0xfebba8
	void FinishDispatch(FName InFinishTag);// 0xfebc78
	void DefaultDispatchStart();// 0x2ce6f18
	bool CanActiveAction_ByTemplate(DispatchableActionBase* CheckedByTemplate);// 0xfeba80
	bool CanActiveAction_ByInstance(DispatchableActionBase* CheckedInstance);// 0xfeba00
	void BP_AbortDispatcher();// 0xfebbd0
	bool ActiveDispatcherCheckPass(FName EntryPointName);// 0xfebcf4

--------------------------------
Class: EvaluateDispatchableActionParameter

--------------------------------
Class: DispatchableActionFinishEvent
	delegate OnDispatchableActionFinished;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ApexSentence.Object
	AkAudioEvent* WwiseEvent;//[Offset: 0x1c, Size: 0x4]
	FText Subtitle;//[Offset: 0x20, Size: 0xc]
	float DurationFixedTime;//[Offset: 0x2c, Size: 0x4]
	bool bEnableCustomDurationTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float CustomDurationTime;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: Apex_NPC_Component.ActorComponent.Object
	TurnMontageSet NoEquipTurnSet;//[Offset: 0xa8, Size: 0x100]
	TurnMontageSet EquipTurnSet;//[Offset: 0x1a8, Size: 0x100]
	bool bEnableNpcSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	ApexNpcSettings NpcSettings;//[Offset: 0x2ac, Size: 0x13c]
	Actor* TurnToTarget;//[Offset: 0x3e8, Size: 0x4]
	void SpeakSentence_NetMulticast(int SentenceId);// 0x23f62a4

--------------------------------
Class: TurnMontageSet
	AnimMontage* TurnLeft45_Montage;//[Offset: 0x0, Size: 0x20]
	AnimMontage* TurnLeft90_Montage;//[Offset: 0x20, Size: 0x20]
	AnimMontage* TurnLeft135_Montage;//[Offset: 0x40, Size: 0x20]
	AnimMontage* TurnLeft180_Montage;//[Offset: 0x60, Size: 0x20]
	AnimMontage* TurnRight45_Montage;//[Offset: 0x80, Size: 0x20]
	AnimMontage* TurnRight90_Montage;//[Offset: 0xa0, Size: 0x20]
	AnimMontage* TurnRight135_Montage;//[Offset: 0xc0, Size: 0x20]
	AnimMontage* TurnRight180_Montage;//[Offset: 0xe0, Size: 0x20]

--------------------------------
Class: ApexNpcSettings
	<FName,float> AttrSettings;//[Offset: 0x0, Size: 0x3c]
	PlayerLoadoutConfig LoadoutConfig;//[Offset: 0x3c, Size: 0xa4]
	<int,int> TombBoxItems;//[Offset: 0xe0, Size: 0x3c]
	FText Name;//[Offset: 0x11c, Size: 0xc]
	LinearColor Color;//[Offset: 0x128, Size: 0x10]
	int TeamID;//[Offset: 0x138, Size: 0x4]

--------------------------------
Class: PlayerLoadoutConfig
	int LoadoutID;//[Offset: 0x0, Size: 0x4]
	PlayerLoadoutWeapon MainWeapon;//[Offset: 0x4, Size: 0x2c]
	PlayerLoadoutWeapon SubWeapon;//[Offset: 0x30, Size: 0x2c]
	PlayerLoadoutItem[] Drug;//[Offset: 0x5c, Size: 0xc]
	PlayerLoadoutItem[] Shield;//[Offset: 0x68, Size: 0xc]
	PlayerLoadoutItem FallingShield;//[Offset: 0x74, Size: 0x8]
	PlayerLoadoutItem Helmet;//[Offset: 0x7c, Size: 0x8]
	PlayerLoadoutItem Armor;//[Offset: 0x84, Size: 0x8]
	PlayerLoadoutItem Backpack;//[Offset: 0x8c, Size: 0x8]
	PlayerLoadoutItem[] Grenade;//[Offset: 0x94, Size: 0xc]
	bool bForceLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: PlayerLoadoutWeapon
	int ID;//[Offset: 0x0, Size: 0x4]
	int Set;//[Offset: 0x4, Size: 0x4]
	int Level;//[Offset: 0x8, Size: 0x4]
	bool SpecialWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int WeaponID;//[Offset: 0x10, Size: 0x4]
	int BulletID;//[Offset: 0x14, Size: 0x4]
	int BulletNum;//[Offset: 0x18, Size: 0x4]
	PlayerLoadoutItem[] WeaponFittings;//[Offset: 0x1c, Size: 0xc]
	bool bIsWholeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: PlayerLoadoutItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BasePropsWeaponAttrModifier.Object
	<FString,WeaponAttrModifyConfig> WeaponAttrModifyConfigList;//[Offset: 0x1c, Size: 0x3c]
	<enum,LegendWeaponAttrModifyConfigList> LegendTypeWeaponAttrModifyConfigList;//[Offset: 0x58, Size: 0x3c]
	void SetAttrModifierEnable(FString AttrModifierID, bool bEnable, Actor* InCharacter);// 0x252d104
	void ClearAttrModifier(Actor* InCharacter);// 0x252d08c

--------------------------------
Class: KnockdownShieldReplicate
	byte Level;//[Offset: 0x0, Size: 0x1]
	bool CanRescueSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool CanUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	int ShieldValue;//[Offset: 0x4, Size: 0x4]
	KnockdownShieldItemHandle* Handle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KnockdownShieldItemHandle.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	byte Level;//[Offset: 0x221, Size: 0x1]
	int ShieldValue;//[Offset: 0x224, Size: 0x4]
	bool CanRescueSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool HandleUse_Implementation(BattleItemUseTarget Target, enum Reason);// 0x26668e0
	bool HandleDisuse_Implementation(enum Reason);// 0x2666858

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	UAESkillManagerComponent* SkillManagerComponent;//[Offset: 0x1e8, Size: 0x4]
	enum SlotID;//[Offset: 0x1f4, Size: 0x1]
	int Durability;//[Offset: 0x1f8, Size: 0x4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x204, Size: 0x1c]
	enum subSlot;//[Offset: 0x220, Size: 0x1]
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x250a748

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 0xc]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 0xc]
	ModifyAttributeData* ModifyAttributeData;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0xc]
	enum Op;//[Offset: 0xc, Size: 0x1]
	float ModifyValue;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ApexKnockdownShield.Actor.Object
	ParticleSystem* ImpactPS;//[Offset: 0x1d4, Size: 0x4]
	ParticleSystem* TPPShieldPS;//[Offset: 0x1d8, Size: 0x4]
	ParticleSystem* FPPShieldPS;//[Offset: 0x1dc, Size: 0x4]
	AkAudioEvent* BeginAudio1P;//[Offset: 0x1e0, Size: 0x4]
	AkAudioEvent* BeginAudio3P;//[Offset: 0x1e4, Size: 0x4]
	AkAudioEvent* EndAudio1P;//[Offset: 0x1e8, Size: 0x4]
	AkAudioEvent* EndAudio3P;//[Offset: 0x1ec, Size: 0x4]
	AkAudioEvent* BreakAudio;//[Offset: 0x1f0, Size: 0x4]
	float AddKnockdownSpeedScale;//[Offset: 0x1f4, Size: 0x4]
	<byte,ColorBlindnessQuality> ColorBlindnessGroup;//[Offset: 0x1f8, Size: 0x3c]
	bool bCurrentTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	ParticleSystemComponent* ShieldPSC;//[Offset: 0x238, Size: 0x4]
	SkeletalMeshComponent* SkeletalMesh1p;//[Offset: 0x23c, Size: 0x4]
	SkeletalMeshComponent* SkeletalMesh3p;//[Offset: 0x240, Size: 0x4]
	bool bIsAgent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	int OwnerPlayerKey;//[Offset: 0x254, Size: 0x4]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x24193a8
	bool StuckInto(Actor* InActor);// 0x246cd9c
	void Start(bool bIsTPP);// 0x246d08c
	void SetColor();// 0x246d064
	void PlaySound(out AkAudioEvent* Audio);// 0x246ceac
	void OnClientTakeDamage(int DamageTypeId, Actor* DamageCauser, int CauserPlayerKey);// 0x246cf34
	void OnCameraChanged();// 0x246d078
	int GetLevel();// 0x246d03c
	ParticleSystem* GetImpactPS();// 0x12b5f10
	bool CanStuckInto(Actor* InActor);// 0x246ce24

--------------------------------
Class: ColorBlindnessQuality
	LinearColor[] QualityColorArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: MainHandComponent.ActorComponent.Object
	HandStateData[] MainHandStack;//[Offset: 0xa8, Size: 0xc]
	HandStateData[] LastOperationStack;//[Offset: 0xb4, Size: 0xc]
	void SyncToServerHandStateListRPC(const SyncToServerMainHandInfo[] MsgList);// 0x2691cec
	void SyncToClientHandStateListRPC(const SyncMainHandInfo[] MsgList);// 0x2691dc0
	void SyncStackToClient(const HandStateData[] HandStateDatas);// 0x2691b80
	void ServerPopOperation(const HandStateData MainHandInfo);// 0x2691eb0
	void RPCToClientRejectOperator(const int[] RejectIDList);// 0x2691c54
	void RecvServerStackMsgOK();// 0x24051f0
	void OnRep_MainHandStackChanged();// 0x2691e94
	void OnApexCharacterPossessedEventCallback(Controller* pController);// 0x2692258
	void OnAIHostingEventCallback(ApexAIController* pController, bool bHost);// 0x2692194
	void NotifyReconnect();// 0x2405154
	void GM_SetEnableLog(bool InEnableLog);// 0x26922ec
	void GM_Disconnect();// 0x26922d0
	void ForceSyncStackInfoToServer();// 0x2692180
	void FirstRPCStackToClient(const HandStateData[] HandStateDatas);// 0x2691aac
	void ClientSendKeepAlivePackage();// 0xf49d14
	void ClientPushOperation(const HandStateData MainHandInfo);// 0x2692090
	void ClientPopOperation(const HandStateData MainHandInfo);// 0x2691fa0

--------------------------------
Class: SyncToServerMainHandInfo
	uint32 UniqueID;//[Offset: 0x0, Size: 0x4]
	bool bReject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum EMainHandActionType;//[Offset: 0x5, Size: 0x1]
	int Index;//[Offset: 0x8, Size: 0x4]
	HandStateData MainHandInfo;//[Offset: 0xc, Size: 0x34]

--------------------------------
Class: SyncMainHandInfo
	enum EMainHandActionType;//[Offset: 0x0, Size: 0x1]
	int Index;//[Offset: 0x4, Size: 0x4]
	HandStateData MainHandInfo;//[Offset: 0x8, Size: 0x34]

--------------------------------
Class: CharacterBuffManager.ActorComponent.Object
	InstancedBuffItem[] InstancedBuffItems;//[Offset: 0xa8, Size: 0xc]
	EffectViewManager* OwnerEffectViewMgr;//[Offset: 0xf0, Size: 0x4]
	class BuffConfigCenter* BuffConfigCenterClass;//[Offset: 0xf4, Size: 0x4]
	void RemoveBuff(int BuffID, int InstancedBuffIndex);// 0x2564000
	void OnRep_InstancedBuffItems();// 0x2563e94
	float GetEarliestBuffRemainTime(int BuffID);// 0x2563f6c
	void ClearAllBuff();// 0x2563fec
	void BroadcastClearAllBuff();// 0x2405154
	void BroadcastBuffRemoved(int BuffID, int InstancedBuffIndex);// 0x2563ea8
	void BroadcastBuffAdded(int BuffID);// 0xf49d30
	void AddBuff(int BuffID);// 0x25640bc

--------------------------------
Class: InstancedBuffItem
	int BuffID;//[Offset: 0x0, Size: 0x4]
	float[] BuffAddTimes;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: EffectViewManager.ActorComponent.Object
	ApexCharacter* OwnerCharacter;//[Offset: 0xa8, Size: 0x4]
	<int,EffectViewItemList*> MapInstancedID2EffectViewItemList;//[Offset: 0xb0, Size: 0x3c]
	<int,InstancedEffectViewItemList> MapEffectViewID2InstancedIDs;//[Offset: 0xec, Size: 0x3c]
	class EffectViewConfigCenter* ConfigCenterClass;//[Offset: 0x128, Size: 0x4]
	bool RemoveEffectView(int InstancedID, int EffectViewID);// 0x25ba6a8
	void ClearAllEffectView();// 0x25ba694
	int AddEffectView(int EffectViewID, float SampleTime);// 0x25ba76c

--------------------------------
Class: EffectViewItemList.Object
	int EffectViewID;//[Offset: 0x1c, Size: 0x4]
	EffectViewItemBase*[] EffectViewItems;//[Offset: 0x20, Size: 0xc]
	ApexCharacter* Owner;//[Offset: 0x2c, Size: 0x4]
	uint32 InstancedID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EffectViewItemBase.Object
	bool bTakeEffectOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bTakeEffectOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	ApexCharacter* OwnerCharacter;//[Offset: 0x24, Size: 0x4]
	void StopEffectInner();// 0x1014170
	void StopEffect();// 0x25b9fd0
	void PlayEffectInner(float SampleTime);// 0x106c758
	void PlayEffect(float SampleTime);// 0x25b9fe4

--------------------------------
Class: InstancedEffectViewItemList
	int[] InstancedIDs;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: EffectViewConfigCenter.InGameSingletonObject.Object
	<int,class EffectViewItemList> MapID2EffectViewItemList;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: BuffConfigCenter.InGameSingletonObject.Object
	<int,BuffConfigItem> MapBuffID2BuffConfigItem;//[Offset: 0x1c, Size: 0x3c]
	BuffConfigItem GetBuffConfigByBuffID(int BuffID);// 0x2563a8c

--------------------------------
Class: BuffConfigItem
	float Duration;//[Offset: 0x0, Size: 0x4]
	int[] EffectViewIDs;//[Offset: 0x4, Size: 0xc]
	enum BuffOverlapType;//[Offset: 0x10, Size: 0x1]
	FName BuffName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: ApexMirageManagerComponent.ActorComponent.Object
	ApexMirageCharacter*[] MirageDecoyList;//[Offset: 0xa8, Size: 0xc]
	bool bEnableTeammateSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	int TeammateSkinMinCount;//[Offset: 0xe0, Size: 0x4]
	int TeammateSkinMaxCount;//[Offset: 0xe4, Size: 0x4]
	<enum> DecoyListenPawnState;//[Offset: 0xe8, Size: 0x3c]
	Vector MoveTargetFromIndicator;//[Offset: 0x124, Size: 0xc]
	GameplayTask_InvisibleEffectWithDither* SelfInvisibleTask;//[Offset: 0x130, Size: 0x4]
	GameplayTask_InvisibleEffectWithDither* OtherInvisibleTask;//[Offset: 0x134, Size: 0x4]
	GameplayTask_InvisibleEffectWithDither* FlashInvisibleTask;//[Offset: 0x138, Size: 0x4]
	float MaxRescueRealTimeSec;//[Offset: 0x13c, Size: 0x4]
	float CurrentRescueRealTimeSec;//[Offset: 0x140, Size: 0x4]
	ApexCharacter* BeRescuePlayer;//[Offset: 0x144, Size: 0x4]
	ApexCharacter* rescuePlayer;//[Offset: 0x148, Size: 0x4]
	enum InvisibleType;//[Offset: 0x14c, Size: 0x1]
	bool bBeCryptoDrone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 0x1]
	bool bIsTeammateWithCryptoDrone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 0x1]
	bool bNeedPrintLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f, Size: 0x1]
	void UnPossessMirageDocoyByType(enum Type);// 0x2476364
	void SyncMoveTargetFromIndicator(Vector MoveTarget);// 0x2476074
	void StopFlash();// 0x2ce6f18
	void SetInvisibleByParam(ApexCharacter* InCharacter, const bool Invisible, const Vector InMaxTimeAndMaxValue, CurveFloat* InCurve);// 0x2475d98
	void SetInvisible(ApexCharacter* InCharacter, const bool Invisible, enum InSkillEvent, SkillEventParam* InParam);// 0x2475eec
	void RemoveDecoyByType(enum Type, bool bDestroy);// 0x2476468
	void RemoveAllDecoy();// 0x2476454
	void PushMirageDecoy(ApexMirageCharacter* MirageCharacter);// 0x2476820
	void PossessMirageDocoyByType(enum Type);// 0x24763dc
	void PopMirageDecoy(ApexMirageCharacter* MirageCharacter);// 0x24767a8
	void OnTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2475470
	void OnStopSkill(int SkillIndex, enum StopReason, int SkillHandleID);// 0x24759fc
	void OnSetInvisibleByParam(ApexCharacter* InCharacter, const bool Invisible, const Vector InMaxTimeAndMaxValue, CurveFloat* InCurve);// 0x2ce6f18
	void OnSetInvisible(ApexCharacter* InCharacter, const bool Invisible, enum InSkillEvent, SkillEventParam* InParam);// 0x2ce6f18
	void OnRespawnFinished();// 0x2ce6f18
	void OnRescueFinished();// 0x2ce6f18
	void OnRescueBegin();// 0x2ce6f18
	void OnRemovePawnState(enum State, enum Reason, enum InterruptedBy);// 0x24761a8
	void OnRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x24755fc
	void OnReceiveSkillEvent(int InSkillID, enum SkillEvent, SkillEventParam* InParam);// 0x2475afc
	void OnReceivePassiveEventInBlueprint(enum SkillEvent, SkillEventParam* InParam);// 0x2ce6f18
	void OnKeyDown(UTSkillManagerComponent* SkillManagerComponent, byte TriggerEventType);// 0x24760ec
	void OnInvisibleChange(ApexCharacter* InCharacter, const bool Invisible);// 0x2475cd4
	void OnEnterUltimateInvisible(SkillEventParam* InParam);// 0x2ce6f18
	void OnCharacterRescueFinished();// 0x24758f8
	void OnCharacterRescue(ApexCharacter* InRescuePlayer);// 0x2475984
	void OnCharacterDying();// 0x24758e4
	void OnCharacterBeRescue(ApexCharacter* InRescuer);// 0x247590c
	void OnBeRescuePlayerTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x24752e4
	void OnAddPawnState(enum State, enum OverrideState);// 0x24762a8
	void OnAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x247574c
	void MulticastFlash(const bool bFlashSelf, const bool bLoop);// 0x2475bfc
	bool IsInvisibleNeedChangeMaterial();// 0x24752bc
	bool HasAuthority();// 0x2476040
	ApexCharacter*[] GetUtlDecoySkinParents();// 0x2476898
	ApexMirageCharacter*[] GetPossesedDecoy(bool bPossesed);// 0x2476554
	ApexMirageCharacter*[] GetDecoyListByType(enum Type);// 0x2476638
	ApexMirageCharacter*[] GetDecoyList();// 0x2476714
	ApexMirageCharacter* GetCurrentTacticsDecoy();// 0x247652c
	void Flash(ApexCharacter* FlashCharacter, bool bLoop);// 0x2ce6f18
	void DealReconnectedInServer();// 0x24752a8

--------------------------------
Class: ApexMirageCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	bool bPossessByOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794, Size: 0x1]
	int FlashBuffCount;//[Offset: 0x798, Size: 0x4]
	byte CurParachuteState;//[Offset: 0x79c, Size: 0x1]
	bool bMoveToTargetComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79d, Size: 0x1]
	enum DecoySourceType;//[Offset: 0x79e, Size: 0x1]
	float DeltaYawBetweenOwner;//[Offset: 0x7a0, Size: 0x4]
	bool bIsDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 0x1]
	PawnStateManager* StateManagerComponent;//[Offset: 0x7c8, Size: 0x4]
	CharacterInputComponent* CharacterInputComponent;//[Offset: 0x7d0, Size: 0x4]
	ApexCharacter* SkinParent;//[Offset: 0x7d4, Size: 0x4]
	bool bArmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	bool bIsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 0x1]
	bool bExposeHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7da, Size: 0x1]
	BlendSpace* ArmedCharacterStand;//[Offset: 0x7dc, Size: 0x4]
	BlendSpace* UnarmedCharacterStand;//[Offset: 0x7e0, Size: 0x4]
	BlendSpace* ArmedCharacterCrouch;//[Offset: 0x7e4, Size: 0x4]
	BlendSpace* UnarmedCharacterCrouch;//[Offset: 0x7e8, Size: 0x4]
	BlendSpace* ADSCharacterCrouch;//[Offset: 0x7ec, Size: 0x4]
	BlendSpace* ADSCharacterStand;//[Offset: 0x7f0, Size: 0x4]
	BlendSpace1D* UnarmedCharacterSprint;//[Offset: 0x7f4, Size: 0x4]
	BlendSpace1D* ArmedCharacterSprint;//[Offset: 0x7f8, Size: 0x4]
	AnimMontage* SlideMelee;//[Offset: 0x7fc, Size: 0x4]
	AnimMontage* StandMelee;//[Offset: 0x800, Size: 0x4]
	AnimMontage* CrouchMelee;//[Offset: 0x804, Size: 0x4]
	AnimMontage* SprintMelee;//[Offset: 0x808, Size: 0x4]
	AnimMontage* JumpMelee;//[Offset: 0x80c, Size: 0x4]
	AnimMontage* DoorMelee;//[Offset: 0x810, Size: 0x4]
	AnimMontage* PassiveMontage;//[Offset: 0x814, Size: 0x4]
	bool bIsPlayingPassiveMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]
	enum UsingWeaponSlot;//[Offset: 0x819, Size: 0x1]
	<int,SceneComponent*> WeaponMeshMap;//[Offset: 0x81c, Size: 0x3c]
	PrimitiveComponent*[] WeaponMeshArray;//[Offset: 0x858, Size: 0xc]
	bool bLockOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 0x1]
	bool bNeedEnableOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x865, Size: 0x1]
	GameplayTask_InvisibleEffectWithDither* InvisibleTask;//[Offset: 0x868, Size: 0x4]
	<FName> FlashBuffs;//[Offset: 0x878, Size: 0x3c]
	PhysicalSurfaceAddBuff[] PhysicalSurfaceAddBuffs;//[Offset: 0x8b4, Size: 0xc]
	bool bIsOwnerFinisherOrEmoji;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 0x1]
	bool bHasPlayingFinisherOrEmojiMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 0x1]
	AnimMontage* FinisherOrEmojiAnimMontage;//[Offset: 0x8c4, Size: 0x4]
	ParticleEffectSetCfg CurActiveParachuteEffectIDSet;//[Offset: 0x8c8, Size: 0x3c]
	int[] InstancedParachuteEffects;//[Offset: 0x904, Size: 0xc]
	float ForceLandingHeight;//[Offset: 0x910, Size: 0x4]
	float PawnHeight2Ground;//[Offset: 0x914, Size: 0x4]
	float ParchuteFlySpeedRate;//[Offset: 0x920, Size: 0x4]
	float DecoyAutoSlideScale;//[Offset: 0x924, Size: 0x4]
	float DecoyJumpZSpeed;//[Offset: 0x928, Size: 0x4]
	bool bEnableVisualSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92c, Size: 0x1]
	float StuckAdjustHeightValue;//[Offset: 0x930, Size: 0x4]
	float controlTime;//[Offset: 0x938, Size: 0x4]
	enum DecoyEndType;//[Offset: 0x93c, Size: 0x1]
	byte[] CheckBeStuckObjectTypes;//[Offset: 0x940, Size: 0xc]
	float HpCurrent;//[Offset: 0x94c, Size: 0x4]
	float HpMax;//[Offset: 0x950, Size: 0x4]
	float StuckTimeToDestroy;//[Offset: 0x954, Size: 0x4]
	float DoorImpuseForceScale;//[Offset: 0x958, Size: 0x4]
	bool bIsInitWithOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 0x1]
	<enum> DecoyListenPawnState;//[Offset: 0x968, Size: 0x3c]
	Actor*[] BePingEnemys;//[Offset: 0x9a4, Size: 0xc]
	GameplayTag PerkPingEnemyTag;//[Offset: 0x9b0, Size: 0x8]
	float PingInterval;//[Offset: 0x9b8, Size: 0x4]
	float CurrentPingTime;//[Offset: 0x9bc, Size: 0x4]
	float PingRange;//[Offset: 0x9c0, Size: 0x4]
	bool CanPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c4, Size: 0x1]
	bool bIsFightInMainTown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 0x1]
	float NameHightOffset;//[Offset: 0x9ec, Size: 0x4]
	void UpdateAnimationInfo();// 0x247161c
	void UnPossesDecoyToPlayerController();// 0x24702b4
	void TryPlayPassiveMontage();// 0x2471464
	void SwitchWeaponSocket();// 0x2471428
	void SwitchPossesState(bool bPosses);// 0x2471b7c
	void SwitchCrouch();// 0x241ab48
	void StopParachute();// 0x2471e8c
	void StartParachute();// 0x2471ea0
	void SilencedByRevenantComplete();// 0x2471084
	void SetWeaponMeshVisible(const bool bVisible);// 0x24713a8
	void SetSkinParent(ApexCharacter* InSkinParent);// 0x24717e8
	void SetMoveToTargetComplete(bool InbMoveToTargetComplete);// 0x2471df0
	void SetMirageDecoyAutonomousProxy();// 0x24702c8
	void SetDecoySourceType(enum InDecoySourceType);// 0x2471d78
	void ServerUpdateCharacterVelocity(Vector InVelocity);// 0x247023c
	void ServerTriggerJump();// 0x2471a7c
	void ReportDecoyDestroy(ApexCharacter* OwnerCharacter);// 0x2470680
	void PingEnemy(const float DeltaTime);// 0x246fe68
	void OnSwitchPossesState(bool bPossesed);// 0x2ce6f18
	void OnStateLeave(enum LeavedState, enum Reason, enum InterruptedBy);// 0x247048c
	void OnStateEnter(enum EnteredState, enum EnteredOverrideState);// 0x2470594
	void OnSourceCharacterDynamicSkinChange(Character* TargetCharacter, bool Success, FName SkinId);// 0x2471658
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x2471534
	void OnShootHit(out const HitEffectInstanceData ImpactResult);// 0x2471880
	void OnRepPossedByOwnerFromServer();// 0x2ce6f18
	void OnRepDecoySourceTypeFromServer();// 0x2ce6f18
	void OnRep_SkinParent();// 0x2471644
	void OnRep_ParachuteState();// 0x2470770
	void OnRep_FlashBuffCount();// 0x2471070
	void OnRep_DecoySourceType();// 0x2471a98
	void OnRep_bPossessByOwner();// 0x2471d64
	void OnRep_bIsDied();// 0x24702dc
	void OnRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x2470d74
	void OnPutOnWeaponEndDelegate();// 0x2470824
	void OnPutOnWeaponBeginDelegate(int WeaponID);// 0x247084c
	void OnPutOffEndDelegate(int WeaponID);// 0x24707ac
	void OnPutOffBeginDelegate();// 0x2470838
	void OnParachuteStateChanged();// 0x2470784
	void OnOwnerRemoveBuff(int BuffID, FName BuffName, Controller* BuffCauser, Actor* CauserActor);// 0x2470a8c
	void OnOwnerEnterFinisherOrEmoji();// 0x2470798
	void OnOwnerCharacterRescueFinished();// 0x246ff58
	void OnOwnerAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x2470bdc
	void OnOverrideStateChanged(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x2470384
	void OnMirageRemovePawnState(enum State, enum Reason, enum InterruptedBy);// 0x247006c
	void OnMirageOverrideStateChange(enum State, enum NewOverrideState, enum PrevOverrideState);// 0x246ff6c
	void OnMirageCharacterOnRep_Owner();// 0x2ce6f18
	void OnMirageAddPawnState(enum State, enum OverrideState);// 0x247016c
	void OnMeleeAttackFromClient(Vector hitLoc, Vector Dir, float Speed, float Time, bool IsTeammate);// 0x24708c4
	void OnMainTownControllerUpdateOutlineOverrideId();// 0x246fe40
	void OnInitComplete();// 0x2471eb4
	void OnHitByShootWeaponSpawnEffect(Vector ImpactPoint, Vector ImportNormal, bool IsTeammate);// 0x2ce6f18
	void OnDoorPushActor(Vector ImpactNormal);// 0x2ce6f18
	void OnDie(enum DieReason);// 0x2ce6f18
	void OnChangeFlashBuffCount();// 0x247105c
	void OnAttackTarget(int TypeID, byte PoseType);// 0x2471478
	void OnAddBuff(int BuffID, FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x2470ec4
	void LockOutline(const bool bLock);// 0x2471098
	void LeaveServerState_Inner(enum State);// 0x2471cb0
	bool IsAutonomousOrTeammate();// 0x2470a64
	void InitWithOwner();// 0x2470228
	void InitSkinAndAnimation(ApexCharacter* Parent);// 0x2471770
	void InitAnimationInstanceData();// 0x2471608
	bool HasPerkPingEnemyTag();// 0x246ff08
	ApexCharacter* GetSkinParent();// 0x2471860
	PawnStateManager* GetPawnStateManager();// 0x241d310
	bool GetIsPossessByOwner();// 0x2471e70
	bool GetIsDied();// 0x24702f0
	void Flash(bool bLoop);// 0x2ce6f18
	void EnterSimulatedState(enum State);// 0x24719fc
	void EnterServerState_Inner(enum State);// 0x2471bfc
	void EndPingEnemy();// 0x246fe54
	void Die(enum DieReason);// 0x247030c
	void DestroyWeapon();// 0x247143c
	void DealPossesState(bool bPossesed, bool bCanJump);// 0x2471aac
	SceneComponent* CreateWeaponMesh(Weapon* Weapon, SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x24712a0
	void CreateWeapon();// 0x2471450
	SceneComponent* CreateStaticWeaponMesh(SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x24711dc
	SceneComponent* CreateSkeletalWeaponMesh(SceneComponent* InWeaponMeshComponent, SceneComponent* InParentComponent);// 0x2471118
	int CreatDecoyHeadWidget();// 0x246ff30
	bool CheckBeStuck();// 0x2470658
	void ChangeMaterialByOwner();// 0x2471630
	bool CanPingEnemy();// 0x246fee0
	void CancelTaskExternal(GameplayTask* InTask);// 0x24706f8
	void BP_UpdateDecoyHeadUI();// 0x2ce6f18
	void BP_OnMainTownControllerUpdateOutlineOverrideId(bool bEnter);// 0x2ce6f18

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xfc, Size: 0x1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float AnimLength;//[Offset: 0x68, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x6c, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x84, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0x88, Size: 0x1]
	bool ChooseCorrectIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x8c, Size: 0xc]
	int SampleIndexWithMarkers;//[Offset: 0x98, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0x9c, Size: 0xc]
	EditorElement[] GridSamples;//[Offset: 0xa8, Size: 0xc]
	BlendParameter BlendParameters;//[Offset: 0xb4, Size: 0x18]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x4]
	Vector SampleValue;//[Offset: 0x4, Size: 0xc]
	float RateScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0xc]
	float Min;//[Offset: 0xc, Size: 0x4]
	float Max;//[Offset: 0x10, Size: 0x4]
	int GridNum;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]

--------------------------------
Class: GameplayTask_InvisibleEffectWithDither.GameplayTask.Object
	float MaxTime;//[Offset: 0x48, Size: 0x4]
	float CurrentTime;//[Offset: 0x4c, Size: 0x4]
	CurveFloat* VisibleCurve;//[Offset: 0x50, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bKeepLastValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int CustomID;//[Offset: 0x58, Size: 0x4]
	delegate OnFinishCallback;//[Offset: 0x5c, Size: 0xc]
	float LastDitherValue;//[Offset: 0x68, Size: 0x4]
	float LastMeshDitherSpeed;//[Offset: 0x6c, Size: 0x4]
	float MaxValue;//[Offset: 0x70, Size: 0x4]
	ApexCharacterBase* UpdateCharacter;//[Offset: 0x74, Size: 0x4]
	void TaskDelayDelegate__DelegateSignature();// 0x2ce6f18
	void SetProgress(const float Value, const bool ForceSet);// 0x27e99f4
	GameplayTask_InvisibleEffectWithDither* InvisibleEffectWithDither(interface classNone TaskOwner, ApexCharacterBase* InUpdateCharacter, int ResourceSetID, const float InvisibleTime, const float InMaxValue, CurveFloat* InVisibleCurve, const byte Priority);// 0x27e9ab8

--------------------------------
Class: PhysicalSurfaceAddBuff
	byte SurfaceType;//[Offset: 0x0, Size: 0x1]
	FName AddBuffName;//[Offset: 0x4, Size: 0x8]
	bool IsDelayBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: HitEffectInstanceData
	bool bHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShooterIsTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bHitKnockdownShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bFatalHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	enum CurShieldLevel;//[Offset: 0x7, Size: 0x1]
	int DamageType;//[Offset: 0x8, Size: 0x4]
	bool bIsUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Transform InstanceTransform;//[Offset: 0x10, Size: 0x30]
	BulletHitInfoReplicateData SurfaceHit;//[Offset: 0x40, Size: 0x60]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	Vector DecalScale;//[Offset: 0xa4, Size: 0xc]
	SceneComponent* TargetImpactComp;//[Offset: 0xb0, Size: 0x8]
	bool bFXOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bAttackerIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bVictimIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	int KnockDownShieldLevel;//[Offset: 0xbc, Size: 0x4]
	Actor* Attacker;//[Offset: 0xc0, Size: 0x4]
	bool bUseEffectOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: VehicleComponent.ActorComponent.Object
	ApexVehicleActor* ApexVehicleActor;//[Offset: 0xac, Size: 0x4]
	void OnRep_OnApexVehicleActorChanaged();// 0xfd338c
	void GetOffVehicle(ApexVehicleActor* VehicleTarget);// 0x2405170
	void BrocastGetOffVehicle(ApexVehicleActor* VehicleTarget, int SeatIndex);// 0x25bed74
	void BrocastBoardingVehicle(ApexVehicleActor* VehicleTarget, int SeatIndex);// 0x2707c24
	void BoardingVehicle(ApexVehicleActor* VehicleTarget, int SeatIndex);// 0x2653724

--------------------------------
Class: ApexVehicleActor.DynamicMovementActor.Actor.Object
	ApexCharacter*[] PassengerInfos;//[Offset: 0x1f8, Size: 0xc]
	VehicleConfigBase* CacheVehicleConfig;//[Offset: 0x204, Size: 0x4]
	void SpeedUp();// 0x24b8cd4
	void Brake(bool bEnable);// 0x24b8c4c

--------------------------------
Class: VehicleConfigBase.DataAsset.Object
	float ServerGettingOnLockTime;//[Offset: 0x20, Size: 0x4]
	float DetectionDistance;//[Offset: 0x24, Size: 0x4]
	Vector GetOffOffset;//[Offset: 0x28, Size: 0xc]
	float BoardingTime;//[Offset: 0x34, Size: 0x4]
	VehiclePassengerSetting[] PassengerSetting;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: VehiclePassengerSetting
	enum CharacterOnVehicleType;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterFinisherComponent.ActorComponent.Object
	class GameActionFinisherInstanceBase* DefaultFinisherAction;//[Offset: 0xa8, Size: 0x4]
	int FinisherActionID;//[Offset: 0xac, Size: 0x4]
	bool bUseLobbyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bPreLoadLobbyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float LobbyMeshLight;//[Offset: 0xb4, Size: 0x4]
	float DetectInterval;//[Offset: 0xb8, Size: 0x4]
	float InnerPreloadSquaredRange;//[Offset: 0xbc, Size: 0x4]
	float OuterUnloadSquaredRange;//[Offset: 0xc0, Size: 0x4]
	bool bEnableForceCleanOnTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	enum WeaponSlot;//[Offset: 0xf0, Size: 0x1]
	bool bDrawDirector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bDrawMoveLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	bool bDrawMoveLineTraceForSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1]
	bool bDrawMoveLineTraceForTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1]
	ApexCharacter* TargetCharacter;//[Offset: 0x10c, Size: 0x4]
	GameActionFinisherInstanceBase* FinisherActionInstance;//[Offset: 0x110, Size: 0x4]
	Actor* FinisherDirectorActor;//[Offset: 0x114, Size: 0x4]
	bool bInFinisher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	SceneComponent* SourceParent;//[Offset: 0x11c, Size: 0x4]
	SceneComponent* TargetParent;//[Offset: 0x120, Size: 0x4]
	TimerHandle CancelFinisherTimer;//[Offset: 0x128, Size: 0x8]
	enum CameraMode;//[Offset: 0x130, Size: 0x1]
	TimerHandle SyncTargetLocationOnFinisherEnd;//[Offset: 0x138, Size: 0x8]
	Vector FinisherTargetActorLocation;//[Offset: 0x140, Size: 0xc]
	Vector FinisherSourceActorLocation;//[Offset: 0x14c, Size: 0xc]
	SkeletalMesh* LobbySkeletalMesh;//[Offset: 0x158, Size: 0x4]
	MaterialInterface*[] LobbyMaterials;//[Offset: 0x15c, Size: 0xc]
	SceneComponent* SourceCameraEffectNodeParent;//[Offset: 0x168, Size: 0x4]
	Transform SourceCameraEffectTransform;//[Offset: 0x170, Size: 0x30]
	SceneComponent* TargetCameraEffectNodeParent;//[Offset: 0x1a0, Size: 0x4]
	Transform TargetCameraEffectTransform;//[Offset: 0x1b0, Size: 0x30]
	Rotator BaseRotationInFinisher;//[Offset: 0x1e0, Size: 0xc]
	Rotator BaseMeshRotationInFinisher;//[Offset: 0x1ec, Size: 0xc]
	byte CapsuleCollisionResponse;//[Offset: 0x1f8, Size: 0x1]
	byte MeshCollisionResponse;//[Offset: 0x1f9, Size: 0x1]
	byte OwnerCapsuleCollisionResponse;//[Offset: 0x1fa, Size: 0x1]
	byte OwnerMeshCollisionResponse;//[Offset: 0x1fb, Size: 0x1]
	float NextDetectTime;//[Offset: 0x1fc, Size: 0x4]
	void UpdateLocalPlayerDetector();// 0x2564c68
	void SyncLocationToServer(const Vector SourceLocation, const Vector TargetLocation);// 0x2565434
	void ShowWhiteLightScreenEffect(bool bIsShow);// 0x2564ef0
	void ShowScreenEffectOnFinisherComplete();// 0x2564f70
	void ShowCancelButtonTimer();// 0x2564c54
	void ResetLobbyMesh();// 0x25652c0
	void RemoveGameAction();// 0x2564c7c
	void RemoveCancelButtonTimer();// 0x2564c40
	Vector RebaseLocalOriginOntoZero(Vector Location);// 0x2564f84
	void PrePlayAction(ApexCharacter* Target);// 0x2405170
	void Play(ApexCharacter* Target);// 0x25657c0
	void OnWeaponPutOffEnd(int WeaponID);// 0x25654e8
	void OnSourceOrTargetDeath();// 0x2565560
	void OnRep_FinisherActionID();// 0x2565574
	void OnRemoveFinisherState(enum State, enum Reason, enum InterruptedBy);// 0x2564b18
	void OnPlayAction(GameActionFinisherInstanceBase* InFinisherAction, ApexCharacter* Target);// 0x2565704
	void OnLoadGameActionForSimulatedProxyComplete(out const SoftObjectPath[] InPaths, out const Object*[] InLoadAssets);// 0x2564ca4
	void OnLoadGameActionClassComplete(SoftObjectPath Loader);// 0x2564de4
	void OnFinisherEnd(enum Reason);// 0x256559c
	void OnAsyncPreLoadLobbyMeshComplete(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets);// 0x2565040
	void OnAsyncLoadLobbyMeshComplete(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets);// 0x2565180
	void LoadLobbyMesh(const bool bIsPreLoad);// 0x25652d4
	void LoadGameActionClass();// 0x2564edc
	void InitFinisherActionInstanceClass();// 0x2565588
	void HideCancelButton();// 0x2564c2c
	void CleanStateOnFinisherEnd(enum Reason);// 0x2565614
	void CheckNeedShowMapFlags();// 0x2564c18
	Vector CheckClientLocationValid(ApexCharacter* Character, out const Vector Location);// 0x2565354
	bool CanUseLobbyMesh();// 0x2565018
	void AddGameAction();// 0x2564c90
	void Abort(enum AbortReason);// 0x256568c

--------------------------------
Class: GameActionFinisherInstanceBase.GameActionInstanceBase.Object
	int MotionMoveID;//[Offset: 0x64, Size: 0x4]
	ApexCharacter* FinisherTarget;//[Offset: 0x68, Size: 0x4]
	Actor* Director;//[Offset: 0x6c, Size: 0x4]
	enum EndReason;//[Offset: 0x70, Size: 0x1]
	bool bIsSwitchCameraByFinisherRole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	void OnRep_FinisherTarget();// 0x25d3b18
	void OnRep_EndReason();// 0x25d3b2c
	void OnPreActive();// 0x2ce6f18
	void NetSetFinisherTarget(ApexCharacter* InFinisherTarget);// 0x25d3db8
	void NetSetEndReasonTarget(const enum Reason);// 0x25d3c40
	void __SetFinisherTargetToServer(ApexCharacter* InFinisherTarget);// 0x25d3d38
	void __SetFinisherTargetToClient(ApexCharacter* InFinisherTarget);// 0x25d3cb8
	void __SetEndReasonToServer(const enum Reason);// 0x25d3bc0
	void __SetEndReasonToClient(const enum Reason);// 0x25d3b40

--------------------------------
Class: GameActionInstanceBase.Object
	GameActionComponent* OwningComponent;//[Offset: 0x1c, Size: 0x4]
	GameActionEntry DefaultEntry;//[Offset: 0x20, Size: 0xc]
	bool bSharePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	GameActionSequencePlayer* SequencePlayer;//[Offset: 0x30, Size: 0x4]
	float SubStepDuration;//[Offset: 0x34, Size: 0x4]
	GameActionSegmentBase* ActivedSegment;//[Offset: 0x3c, Size: 0x4]
	Actor*[] InstanceManagedSpawnables;//[Offset: 0x54, Size: 0xc]
	bool TryStartEntry(out const GameActionEntry Entry);// 0x106b450
	bool TryStartDefaultEntry();// 0x106b428
	bool TryEventTransition(FName EventName);// 0x106b36c
	void TransformActorData(out const GameActionPossessableActorData ActorData, out Vector WorldLocation, out Rotator WorldRotation);// 0x106b1b8
	void ReceiveWhenDestruct();// 0x2ce6f18
	void ReceiveWhenDeactived();// 0x2ce6f18
	void ReceiveWhenConstruct();// 0x2ce6f18
	void ReceiveWhenActived();// 0x2ce6f18
	void ReceiveWhenAborted();// 0xfbc1bc
	void ReceiveTick(float DeltaSeconds);// 0x2ce6f18
	void PushEnableSubStepMode();// 0x106b584
	void PopEnableSubStepMode();// 0x106b570
	void OnRep_OwningComponent();// 0x106b598
	void OnRep_ActivedSegment(GameActionSegmentBase* PreActivedSegment);// 0x106b4f8
	bool IsLocalControlled();// 0x106b5d4
	bool IsActived();// 0x106b3f0
	void InvokeTransitionToServer(GameActionSegmentBase* FromSegment, GameActionSegmentBase* ToSegment, const FName ServerCheckFunctionName);// 0x106b0ac
	bool HasAuthority();// 0x106b5ac
	Character* GetOwner();// 0x106b5fc
	Transform GetOriginTransform();// 0x106b2e4
	void FinishInstanceToServer();// 0x1014170
	void CancelActionToClient(GameActionSegmentBase* Segment);// 0x106b02c
	void AbortInstanceToServer();// 0xfe936c
	void AbortInstanceNetMulticast();// 0x106b010
	void AbortGameAction();// 0x106b414

--------------------------------
Class: GameActionComponent.ActorComponent.Object
	<class GameActionInstanceBase> DefaultActions;//[Offset: 0xa8, Size: 0x3c]
	<GameActionInstanceBase*> PreActionInstances;//[Offset: 0xe4, Size: 0x3c]
	GameActionInstanceBase*[] ActionInstances;//[Offset: 0x120, Size: 0xc]
	GameActionSequencePlayer* SharedPlayer;//[Offset: 0x12c, Size: 0x4]
	bool TryPlayCreatedGameAction(GameActionInstanceBase* Instance, out const GameActionEntry Entry);// 0x1067fd0
	void RemoveGameAction(class GameActionInstanceBase Action);// 0x1068304
	void PlayGameActionToServer(class GameActionInstanceBase Action, FName EntryName);// 0x1067ee0
	void PlayGameAction(class GameActionInstanceBase Action, FName EntryName);// 0x106813c
	void OnRep_ActionInstances();// 0x10683fc
	bool IsSharedPlayerPlaying();// 0x1067eb8
	bool IsAnyActionActived();// 0x1067fa8
	GameActionInstanceBase* GetSharedPlayerActiveAction();// 0x1067e90
	GameActionInstanceBase* FindGameAction(class GameActionInstanceBase Action);// 0x1068284
	GameActionInstanceBase* CreateGameActionToPlay(class GameActionInstanceBase Action);// 0x10680bc
	bool ContainGameAction(class GameActionInstanceBase Action);// 0x10681fc
	GameActionInstanceBase* AddGameAction(class GameActionInstanceBase Action);// 0x106837c
	void AbortSharedPlayerActiveAction();// 0x1067e7c

--------------------------------
Class: GameActionSequencePlayer.Object
	FrameNumber StartTime;//[Offset: 0x3c8, Size: 0x4]
	int DurationFrames;//[Offset: 0x3cc, Size: 0x4]
	GameActionSequence* ServerPlayedSequence;//[Offset: 0x3d0, Size: 0x4]
	GameActionSequence* Sequence;//[Offset: 0x3d4, Size: 0x4]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x3d8, Size: 0x25c]
	byte Status;//[Offset: 0x698, Size: 0x1]
	int CurrentNumLoops;//[Offset: 0x69c, Size: 0x4]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x6a0, Size: 0x10]
	GameActionInstanceBase* GameAction;//[Offset: 0x6d0, Size: 0x4]
	Character* CameraUpdateActor;//[Offset: 0x6dc, Size: 0x4]
	PlayerController* CameraUpdateController;//[Offset: 0x6e0, Size: 0x4]

--------------------------------
Class: GameActionSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x288, Size: 0x4]
	Guid OwnerGuid;//[Offset: 0x28c, Size: 0x10]
	<Guid,FName> PossessableActors;//[Offset: 0x29c, Size: 0x3c]
	<Guid,GameActionSequenceSubobjectBinding> BindingSubobjects;//[Offset: 0x2d8, Size: 0x3c]

--------------------------------
Class: GameActionSequenceSubobjectBinding
	FName OwnerPropertyName;//[Offset: 0x0, Size: 0x8]
	FString PathToSubobject;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: GameActionEntry
	GameActionEntryTransition[] Transitions;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameActionEntryTransition.GameActionTransitionBase

--------------------------------
Class: GameActionTransitionBase
	delegate Condition;//[Offset: 0x0, Size: 0x10]
	GameActionSegmentBase* TransitionToSegment;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GameActionSegmentBase.Object
	delegate OnActionActivedEvent;//[Offset: 0x1c, Size: 0x10]
	delegate OnActionAbortedEvent;//[Offset: 0x2c, Size: 0x10]
	delegate OnActionDeactivedEvent;//[Offset: 0x3c, Size: 0x10]
	delegate OnActionTickEvent;//[Offset: 0x4c, Size: 0x10]
	delegate OnActionTransitionFailed;//[Offset: 0x5c, Size: 0x10]
	delegate EvaluateExposedInputsEvent;//[Offset: 0x6c, Size: 0x10]
	GameActionTickTransition[] TickTransitions;//[Offset: 0x7c, Size: 0xc]
	GameActionEventTransition[] EventTransitions;//[Offset: 0x88, Size: 0xc]
	void ReceiveWhenTransitionFailed(GameActionSegmentBase* TransitionFailedSegment);// 0x106c758
	void ReceiveWhenActionTick(float DeltaSeconds);// 0x2ce6f18
	void ReceiveWhenActionDeactived();// 0x2ce6f18
	void ReceiveWhenActionActived();// 0x2ce6f18
	void ReceiveWhenActionAborted();// 0x1014170
	void EvaluateExposedInputsEvent__DelegateSignature();// 0x2ce6f18
	void DefaultTransitionFailedToClient();// 0x106b010

--------------------------------
Class: GameActionTickTransition.GameActionTransitionBase

--------------------------------
Class: GameActionEventTransition.GameActionTransitionBase
	FName EventName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: GameActionPossessableActorData
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: CharacterAddBuffSelfComponent.ActorComponent.Object
	PhysicalSurfaceAddBuff[] PhysicalSurfaceAddBuffs;//[Offset: 0xa8, Size: 0xc]
	FString AudioID_Cure_Start_1P;//[Offset: 0xb4, Size: 0xc]
	FString AudioID_Cure_Start_3P;//[Offset: 0xc0, Size: 0xc]
	FString AudioID_Cure_End_1P;//[Offset: 0xcc, Size: 0xc]
	FString AudioID_Cure_End_3P;//[Offset: 0xd8, Size: 0xc]
	int TPPCureParticleEffectID;//[Offset: 0xe4, Size: 0x4]
	ApexCharacter* CharacterOwner;//[Offset: 0xe8, Size: 0x4]
	TimerHandle OneSecTimerHandle;//[Offset: 0xf0, Size: 0x8]
	bool IsBreakShieldMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool CanHealingSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	bool IsHealingHPSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 0x1]
	bool IsHealingShieldSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117, Size: 0x1]
	CureRepData CureRepData;//[Offset: 0x118, Size: 0xc]
	bool IsNeedCuring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	bool IsCuring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]
	void SetClientRefreshCD();// 0x2405154
	void ResetCD(float Damage);// 0x255de58
	void RecoverShield();// 0x255e144
	void RecoverHP();// 0x255e158
	void RecoverDelay();// 0x255e16c
	void PostLuaEvent(Actor* OwnerTarget, int LuaCppEventTypeIndex, FString Arg1, FString Arg2, FString Arg3, FString Arg4);// 0x255e180
	void OnTakeDamage(float Damage, int DamageType, enum DamagePos, bool BreakShield, bool FatalHealth, Pawn* Attacker, Pawn* Victim, byte VictimOldHealthStatus);// 0x255ded0
	void OnShieldMaxChange();// 0x255de44
	void OnRep_OnRepIsNeedCuring();// 0x255ddf4
	void OnRep_OnRepIsCuring();// 0x255dde0
	void OnRep_OnRepCureRepData();// 0x255de08
	void OnRep_OnRepCanHealingSelf();// 0x255de1c
	void OnPlayerDyingOrDeath();// 0x255ddcc
	void CheckPlayerOnSurfaceToAddBuff();// 0x255de30
	void BP_StopRepairShield(ApexCharacter* PlayerEnt);// 0x2ce6f18
	void BP_StartRepairShield(ApexCharacter* PlayerEnt);// 0x2ce6f18
	void BP_RepairShieldCompleted(ApexCharacter* PlayerEnt);// 0x2ce6f18

--------------------------------
Class: CureRepData
	bool IsInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float RecoverCD;//[Offset: 0x4, Size: 0x4]
	bool IsBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: APPerkManagerComponent.ActorComponent.Object
	DataTable* SkillsTable;//[Offset: 0xb4, Size: 0x4]
	int[] PutOnPerkIDs;//[Offset: 0xb8, Size: 0xc]
	int[] OutsidePerkIDs;//[Offset: 0xd0, Size: 0xc]
	APPerk*[] Perks;//[Offset: 0xdc, Size: 0xc]
	PerkBlackBoard* Blackboard;//[Offset: 0xe8, Size: 0x4]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	void OnSkillUnInitFinished(int SkillIndex, UTSkill* Skill);// 0x24ed420
	void OnSkillInitFinished(int SkillIndex, UTSkill* Skill);// 0x24ed4dc
	void OnRep_OutsidePerkIDs();// 0x24ed350
	void OnEnableTriggerSkill(int SkillIndex, UTSkill* Skill);// 0x24ed364
	void OnDisableTriggerSkill(int SkillIndex, UTSkill* Skill);// 0x24ed420
	void OnAsyncLoadSucceedByClass(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, bool bPutOn);// 0x24ed6fc
	void OnAsyncLoadSucceed(out const SoftObjectPath[] Paths, out const Object*[] LoadAssets, int ID);// 0x24ed894
	void OnAsyncLoadFailed(out const SoftObjectPath[] Paths, enum Reason, int ID);// 0x24ed598
	bool IsDisableTriggerSkill();// 0x24eda24
	void Exec_Mult_RemovePerk(int PerkID);// 0x2405170
	void Exec_Mult_RemoveAllPerk();// 0x2405154
	void Exec_Mult_AddPerk(int PerkID);// 0xf49d30
	void ClientLogPerkInfo(FString DebugMessage);// 0x24ed2b8

--------------------------------
Class: APPerk.Object
	int RunPlatform;//[Offset: 0x20, Size: 0x4]
	int ID;//[Offset: 0x24, Size: 0x4]
	float Duration;//[Offset: 0x28, Size: 0x4]
	float Cooldown;//[Offset: 0x2c, Size: 0x4]
	bool bNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bCheckConditionIfNotNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bManualIfNotNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bUpdateWhenActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool bStopIfConditionMismatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bShowTipsWhenActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	APPerkContext* Context;//[Offset: 0x38, Size: 0x4]
	APPerkTrigger* Trigger;//[Offset: 0x3c, Size: 0x4]
	APPerkAction*[] Actions;//[Offset: 0x40, Size: 0xc]
	APPerkManagerComponent* CurOwnerManagerComp;//[Offset: 0x4c, Size: 0x4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x50, Size: 0x3c]
	int InstancedNodesTotalSize;//[Offset: 0x8c, Size: 0x4]
	void OnPerkStop(APPerkManagerComponent* ManagerComponent);// 0x24e7bd8
	void OnPerkCDComplete(APPerkManagerComponent* ManagerComponent);// 0x106cf10

--------------------------------
Class: APPerkContext.Object

--------------------------------
Class: APPerkTrigger.Object
	APPerk* OwnerPerk;//[Offset: 0x20, Size: 0x8]
	float ExpiredTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: APPerkAction.Object
	bool bResetWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	APPerk* OwnerPerk;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: PerkBlackBoard.Object

--------------------------------
Class: ApgameInspectWeaponLogic.Object
	void OnEventUsingWeaponSlotChange(enum InOld, enum InNew);// 0x24d7b54

--------------------------------
Class: ZiplinePlayerFlowData
	ZiplineComponent* RideZipline;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: ZiplineMagnetic.Actor.Object
	ApexCharacter* OwnerCharacter;//[Offset: 0x1d0, Size: 0x4]
	bool bIsRidingZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	bool bIsVerticalZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 0x1]
	float CenterRotation;//[Offset: 0x1d8, Size: 0x4]
	void RefreshShow();// 0x2847cac
	void BP_SetMagneticYawAndPitch(float Yaw);// 0x2ce6f18
	void BP_SetIsRidingZipline(bool bIsRiding);// 0x2ce6f18
	void BP_ChangeShow(bool bIsVisible);// 0x2ce6f18

--------------------------------
Class: MirageActor.Actor.Object
	enum MirageState;//[Offset: 0x1f1, Size: 0x1]
	float DefaultHealth;//[Offset: 0x1f4, Size: 0x4]
	float Health;//[Offset: 0x1f8, Size: 0x4]
	float FadeOutTime;//[Offset: 0x1fc, Size: 0x4]
	float FadeInTime;//[Offset: 0x200, Size: 0x4]
	BoxComponent* DamageAreaComp;//[Offset: 0x204, Size: 0x4]
	SkeletalMeshComponent* SkeletonMeshComp;//[Offset: 0x208, Size: 0x4]
	bool bCanBeKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 0x1]
	AnimSequence* NormalSeq;//[Offset: 0x210, Size: 0x4]
	AnimSequence* PartySeq;//[Offset: 0x214, Size: 0x4]
	float ReviveCD;//[Offset: 0x218, Size: 0x4]
	MirageActor* AddtionalMirageActor;//[Offset: 0x21c, Size: 0x4]
	ApexBuffSystemComponent* BuffSystemComponent;//[Offset: 0x23c, Size: 0x4]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x24193a8
	void SwitchCollision(bool bEnableCollision);// 0x2ce6f18
	void SwitchAnimation();// 0x26ad42c
	void SetSkeletonMaterials(MaterialInterface*[] InMaterials);// 0x26ad008
	void SetOutlineValue(float Ratio, float OriginalInnerColorA, float OriginalOutlineThickness);// 0x26ad0ec
	void Revive();// 0x26ad3f0
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Controller* pCauser, Actor* CauserActor);// 0x26ac968
	void PlaySurvive();// 0x2ce6f18
	void PlayDead();// 0x2ce6f18
	void PlayDamageEffect(Vector Location, Vector Normal);// 0x2ce6f18
	void OnRevival();// 0x26acc38
	void Onrep_MirageState();// 0x26ad418
	void OnRep_Health();// 0x26ad404
	void OnReceivedPointDamage(Vector HitPoint, Vector HitNormal);// 0x26acc4c
	void OnDetectAreaBeginOverLap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x26ad1ec
	void OnBeKilled();// 0x26acd14
	void KillMirage(bool bAutoRevive);// 0x26acd28
	bool IsSameTeam(Actor* Other);// 0x26ac804
	bool HasBuff(FName BuffName, bool bPredicatePendingRemove);// 0x26ac88c
	void CreateEffect(ParticleSystem* EmitterTemplate, out const FName AttachPointName, out const Vector Location, ParticleSystemAsync* SourceValue);// 0x26acda8
	void ChangeState(enum TargetState);// 0x26485c0
	void ChangeMirageState(out const ChapterParams Params);// 0x26ad440
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* CauserActor);// 0x26acad4

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0xc]
	GameplayTag[] ParentTags;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SubObjectsReplicationConfig
	float MinDistance;//[Offset: 0x0, Size: 0x4]
	float MaxDistance;//[Offset: 0x4, Size: 0x4]
	float MinProbability;//[Offset: 0x8, Size: 0x4]
	float MaxProbability;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GrapplingHookMovement.ActorComponent.Object
	enum TargetRole;//[Offset: 0xac, Size: 0x1]
	GrapplingHook* GrapplingHookActor;//[Offset: 0xb0, Size: 0x8]
	SceneComponent* UpdateComp;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* TargetComp;//[Offset: 0xc0, Size: 0x8]
	SkillMovementConfig MoveConfig;//[Offset: 0xdc, Size: 0x14]
	void UpdateWalkingFrictionParameter(out float WalkingFriction);// 0x262c430
	void UpdateMovementStatusData(float DeltaSeconds);// 0x2405258
	void UpdateCurrentAcceParameter(out float CurrentAirSpeedCap, out float CurrentAirAcceleRate);// 0x262c4c0
	void UpdateCommon(float DeltaSeconds);// 0xf4bf3c
	void SpaceJumpExtraLaunch();// 0x2517b18
	bool ShouldApplyRootRotationFocusOnViewDirection(Character* UpdateChar);// 0x262c330
	bool ShouldApplyMeshRotationFocusOnGrapplingTarget(Character* UpdateChar);// 0x262c3b0
	void OnMovementModeChange(byte PreviousMovementMode, byte PreviousCustomMode, byte MovementMode, byte CustomMovementMode);// 0x262c5d8
	Vector GetInputVelocity(ApexCharacterMovementComponent* CharMoveComp);// 0x262c73c
	float GetEnterFaillingZSpeedThreshold(ApexCharacter* TargetCharacter);// 0x262c2b0
	void ClearGrapplingHookControl();// 0x262c720
	bool CanDoExtraLaunch();// 0x262c5a8
	void ApplyGrapplingHookControl();// 0x240523c

--------------------------------
Class: GrapplingHook.SkillActorBase.DynamicMovementActor.Actor.Object
	SplineComponent* GrapplingHookSpline;//[Offset: 0x3d4, Size: 0x4]
	GrapplingHookString* GrapplingHookString;//[Offset: 0x3d8, Size: 0x4]
	StaticMeshComponent* GrapplingHookMesh;//[Offset: 0x3dc, Size: 0x4]
	CapsuleComponent* GrapplingHookMeshCapsule;//[Offset: 0x3e0, Size: 0x4]
	SceneComponent* TargetSceneComponent;//[Offset: 0x3e4, Size: 0x4]
	int GrappleHookSkillIndex;//[Offset: 0x3e8, Size: 0x4]
	float ProjecitleLaunchInitSpeed;//[Offset: 0x3ec, Size: 0x4]
	float ProjecitleLaunchMaxSpeed;//[Offset: 0x3f0, Size: 0x4]
	float ProjecitleWithdrawInitSpeed;//[Offset: 0x3f4, Size: 0x4]
	float ProjecitleWithdrawMaxSpeed;//[Offset: 0x3f8, Size: 0x4]
	float ProjecitleWithdrawDownZSpeed;//[Offset: 0x3fc, Size: 0x4]
	float ProjecitleCollisionSphere;//[Offset: 0x400, Size: 0x4]
	float StringInitSpeed;//[Offset: 0x404, Size: 0x4]
	float StringMaxSpeed;//[Offset: 0x408, Size: 0x4]
	float StringAcce;//[Offset: 0x40c, Size: 0x4]
	float BaseVelocityStringAcce;//[Offset: 0x410, Size: 0x4]
	float PerpendicularDeceleration;//[Offset: 0x414, Size: 0x4]
	float StringDelayTime;//[Offset: 0x418, Size: 0x4]
	CurveFloat* GravityScaleCurve;//[Offset: 0x41c, Size: 0x4]
	float FixedGravityScale;//[Offset: 0x420, Size: 0x4]
	float MinVelocityPullingAngleForFullGravity;//[Offset: 0x424, Size: 0x4]
	bool bUseViewDirGravityScaleCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	float MaxGrappleDirAngleForFullGravity;//[Offset: 0x42c, Size: 0x4]
	CurveFloat* ViewDirGravityScaleCurve;//[Offset: 0x430, Size: 0x4]
	bool bIgnoreLaunchSpeedInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 0x1]
	float LaunchSpeedPrePull;//[Offset: 0x438, Size: 0x4]
	bool bLaunchSpeedPrePullForVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	float LaunchSpeedPrePullForVictim;//[Offset: 0x440, Size: 0x4]
	float LaunchSpeedPrePullExtra;//[Offset: 0x444, Size: 0x4]
	float ApplyExtraLaunchSpeedTimeThreshold;//[Offset: 0x448, Size: 0x4]
	Vector4 PullingRotationLimit;//[Offset: 0x450, Size: 0x10]
	bool IsRelatedPullingRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	int MeshRotationLerpDistancePerFrame;//[Offset: 0x464, Size: 0x4]
	bool bTPPMeshRotationFocusOnGrapplingTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	bool bFPPMeshRotationFocusOnGrapplingTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1]
	bool bRootRotationFocusOnViewDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a, Size: 0x1]
	float RootRotationFocusOnViewDirectionSmoothFactor;//[Offset: 0x46c, Size: 0x4]
	float IgnoreVerticalViewDirOnRootRotation;//[Offset: 0x470, Size: 0x4]
	int RootRotationLerpDistancePerFrame;//[Offset: 0x474, Size: 0x4]
	bool bNotMovingCharOnSimulateProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bCameraRollRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	float MinCameraRoll;//[Offset: 0x47c, Size: 0x4]
	float MaxCameraRoll;//[Offset: 0x480, Size: 0x4]
	float CameraRollThreshold;//[Offset: 0x484, Size: 0x4]
	float CameraRollSpeed;//[Offset: 0x488, Size: 0x4]
	CurveFloat* CameraRollSpeedCurve;//[Offset: 0x48c, Size: 0x4]
	float EnterFaillingZSpeedThreshold;//[Offset: 0x490, Size: 0x4]
	float EnterFaillingZSpeedThresholdDyingTeammate;//[Offset: 0x494, Size: 0x4]
	float GrappleEndHardStraightIgnoreCountDownTime;//[Offset: 0x498, Size: 0x4]
	float GrappleEndHardStraightIgnoreHeight;//[Offset: 0x49c, Size: 0x4]
	float MaxAccelForwardDegree;//[Offset: 0x4a0, Size: 0x4]
	bool bForwardDegreeBaseOnString;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	bool bForwardDegreeBaseOnStringIgnoreZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 0x1]
	float CurrentAirSpeedCap;//[Offset: 0x4a8, Size: 0x4]
	float CurrentAirAcceRate;//[Offset: 0x4ac, Size: 0x4]
	float CurrentAirSpeedCapGround;//[Offset: 0x4b0, Size: 0x4]
	float CurrentAirAcceRateGround;//[Offset: 0x4b4, Size: 0x4]
	float CurrentAirSpeedCapBackward;//[Offset: 0x4b8, Size: 0x4]
	float CurrentAirAcceRateBackward;//[Offset: 0x4bc, Size: 0x4]
	Rotator LookAtOtherCharacterSpeedCaster;//[Offset: 0x4c0, Size: 0xc]
	Rotator LookAtOtherCharacterSpeedVictim;//[Offset: 0x4cc, Size: 0xc]
	float AirSpeedCapRateCasterHookOtherCharacter;//[Offset: 0x4d8, Size: 0x4]
	float AirAcceRateCasterHookOtherCharacter;//[Offset: 0x4dc, Size: 0x4]
	float AirSpeedCapRateVictimHookOtherCharacter;//[Offset: 0x4e0, Size: 0x4]
	float AirAcceRateVictimHookOtherCharacter;//[Offset: 0x4e4, Size: 0x4]
	float ZDecreaseWhenHookWithCharacter;//[Offset: 0x4e8, Size: 0x4]
	float WalkingFriction;//[Offset: 0x4ec, Size: 0x4]
	float FastJumpBtnDisplayTime;//[Offset: 0x4f0, Size: 0x4]
	bool bShowFastJumpBtnDisplayTimeOnHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 0x1]
	bool bMustOnGroundToEnableJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 0x1]
	ParticleSystem* FlyTracingParticle;//[Offset: 0x4f8, Size: 0x20]
	class Actor* HitParticleActorClass;//[Offset: 0x518, Size: 0x4]
	Vector MeshOffSetForStringJoint;//[Offset: 0x51c, Size: 0xc]
	float MeshVisibleDistane;//[Offset: 0x528, Size: 0x4]
	float MaxAngleDegreeWithGrapplingHookDir;//[Offset: 0x52c, Size: 0x4]
	float MaxAngleDegreeWithGrapplingHookDirTPP;//[Offset: 0x530, Size: 0x4]
	float MaxAngleDegreeWithGrapplingHookDirTargetAbove;//[Offset: 0x534, Size: 0x4]
	float MaxAngleDegreeWithGrapplingHookDirTargetAboveTPP;//[Offset: 0x538, Size: 0x4]
	Vector MaxAngleDegreeBodyOffsetTPP;//[Offset: 0x53c, Size: 0xc]
	float MaxConnectSecondsGrapplingHook;//[Offset: 0x548, Size: 0x4]
	float MaxConnectSecondsGrapplingHookTPP;//[Offset: 0x54c, Size: 0x4]
	bool bUseCharMoveCompVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	float MinSpeedThreshold;//[Offset: 0x554, Size: 0x4]
	float MinSpeedThresholdTPP;//[Offset: 0x558, Size: 0x4]
	float StopPullingLowSpeedTimeThreshold;//[Offset: 0x55c, Size: 0x4]
	float StopPullingLowSpeedTimeThresholdTPP;//[Offset: 0x560, Size: 0x4]
	float PawnStateExitDelayTime;//[Offset: 0x564, Size: 0x4]
	float MinDistanceToGrapplingHook;//[Offset: 0x568, Size: 0x4]
	CurveFloat* MinDistanceToGrapplingHookCurve;//[Offset: 0x56c, Size: 0x4]
	Vector MinDistToGrapplingHookOffset;//[Offset: 0x570, Size: 0xc]
	bool bCompareGrappleDirectionWithFrameDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]
	float MaxAngleGrappleDirectionWithFrameDirection;//[Offset: 0x580, Size: 0x4]
	float MaxAngleGrappleDirectionWithFrameDirectionTPP;//[Offset: 0x584, Size: 0x4]
	bool bSpeedCheckWhenPullingUpward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	float ZiplineRideMaxDistance;//[Offset: 0x58c, Size: 0x4]
	bool GrapplingHookMovementDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	float DebugLineTime;//[Offset: 0x594, Size: 0x4]
	bool bDebugDrawCommon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	bool bDebugDrawViewDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 0x1]
	bool bDebugDrawRootForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59a, Size: 0x1]
	bool bProjecitleDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59b, Size: 0x1]
	AkAudioEvent* GrapplingImpact_3P;//[Offset: 0x59c, Size: 0x4]
	AkAudioEvent* GrapplingImpact_1P;//[Offset: 0x5a0, Size: 0x4]
	FString GrapplingImpactEventName;//[Offset: 0x5a4, Size: 0xc]
	bool ResetHardStraightTimeOnExitInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool ForceOpenEnableCheckSlidingWhenCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	bool TurnOffGrappleStringBreakPointCheckOnCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 0x1]
	bool ForceTPPWhenTPPModeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b3, Size: 0x1]
	PathfinderFlexibleCDConf FlexibleCDConf;//[Offset: 0x5b4, Size: 0x1c]
	float AntiCheatMaxGrappleDistance;//[Offset: 0x5d0, Size: 0x4]
	PathfinderSyncData SyncData;//[Offset: 0x5dc, Size: 0x7c]
	enum GrapplingHookState;//[Offset: 0x658, Size: 0x1]
	PathfinderHitStruct SavedHitResult;//[Offset: 0x65c, Size: 0x54]
	PathfinderTraceStruct GrappleLaunchTrace;//[Offset: 0x6b0, Size: 0x20]
	enum LastGrapplingHookState;//[Offset: 0x6d0, Size: 0x1]
	interface class None* MainProjMoveComp;//[Offset: 0x6d4, Size: 0x8]
	interface class None* MainMoveComp;//[Offset: 0x6dc, Size: 0x8]
	interface class None* TargetMoveComp;//[Offset: 0x6e4, Size: 0x8]
	UAESkill* CharacterGrappleHookSkill;//[Offset: 0x6ec, Size: 0x4]
	UAESkillManagerComponent* CharacterSkillManager;//[Offset: 0x6f0, Size: 0x4]
	GrapplingHookAimSight* AimSightActor;//[Offset: 0x6f4, Size: 0x4]
	void UpdateGrappleHookString(float DeltaSeconds);// 0x2627b1c
	void TickGrapplingHookWithdrawing(float DeltaSeconds);// 0x2492624
	void TickGrapplingHookString(float DeltaSeconds);// 0x26280dc
	void TickGrapplingHookPulling(float DeltaSeconds);// 0x2628154
	void TickGrapplingHookLaunching(float DeltaSeconds);// 0x26281d4
	void TickGrapplingHookFinishing(float DeltaSeconds);// 0x24926e0
	bool ShouldTickGrappleString();// 0x26271b8
	bool ShouldPlayHitEffect(const Actor* TargetActor);// 0x2627138
	bool ShouldHandleStateOnServer();// 0x26280b4
	bool ShouldEndPulling();// 0x2627de8
	bool ServerCheckIsValidRPC(out const PathfinderHitStruct HitResultFromRPC, out const PathfinderTraceStruct TraceFromRPC);// 0x26279ec
	void SafeQuitGrapplingHook();// 0x2627d40
	void ResetGrapplingHook();// 0x2627d18
	void RecoverGrapplingHookAimingSightCircleUI(bool RecoverAimSight, bool RecoverAssistCircle);// 0x2626fd0
	void PostStringEventToServer(FString StringEvent);// 0x2627208
	void PostStringEvent(FString StringEvent);// 0x26272a0
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x2627918
	void OnSkillTriggerCustomEvent(byte EventType, Actor* OwnerChar);// 0x262785c
	void OnRep_SyncData();// 0x2627330
	void OnProjMoveCompEventRecieved(interface classNone SkillMoveCompInterface);// 0x26277b8
	void OnGrapplingHookPreAim();// 0x2627c00
	void OnGrapplingHookAimStart();// 0x2627c14
	void OnEnterForceField(Actor* ForceFieldActor);// 0x2627740
	void NotifyHandleGrapplingHookStateToServer(enum NewState, const PathfinderHitStruct ServerSavedHitResult, const PathfinderTraceStruct ServerGrappleLaunchTrace, const int GrappleHookCnt);// 0x26275ac
	bool IsTargetZipline();// 0x2627110
	bool IsTargetGibratorShield();// 0x26270e8
	bool IsInEndingPhase();// 0x2627bd8
	bool IsHookingCharacter();// 0x2627b94
	bool IsExtraJumpEnabled();// 0x2627bb0
	void InteruptPulling(bool IntFlag);// 0x2627d54
	bool InitWithdrawing();// 0x2628284
	interface classNone InitPullingMovement(SceneComponent* UpdateRoot, const Vector TargetLocation, const Actor* TargetActor, const PrimitiveComponent* TargetActorComp, const enum inGrapplingHookRole, const SkillMovementConfig MoveConfig);// 0x26282c0
	bool InitPulling();// 0x2628500
	interface classNone InitLaunchingMovement(SceneComponent* UpdateRoot);// 0x2628530
	bool InitLaunching();// 0x26285c0
	bool InitGrapplingHookComp();// 0x26285f0
	void InitGrappleHookContext();// 0x2628620
	bool InitFinishing();// 0x2628254
	void HideGunAimingSightUI(bool IsHide);// 0x2626f3c
	void HideGrapplingHookAimingSightUI();// 0x2626fbc
	bool HasBreakPoint();// 0x2626e70
	void HandleGrapplingHookStateOnServer(enum NewState);// 0x2627fc4
	void HandleGrapplingHookStateOnClient(enum NewState);// 0x2627f4c
	void HandleGrapplingHookState(enum NewState);// 0x262803c
	Vector GetTargetComponentLocation();// 0x26270a0
	HitResult GetSavedHitResult();// 0x2626ca0
	Vector GetNearestBreakPoint(const enum TargetRole);// 0x2626e98
	enum GetGrapplingStringType();// 0x26271e0
	enum GetGrapplingHookState();// 0x2626c84
	float GetBaseVelocityStringAcce(Actor* MovingContextActor);// 0x2626df0
	void FastJumpBtnClicked();// 0x2626c70
	void EndPulling();// 0x2627dd4
	void EndGrapplingHook();// 0x2627d2c
	void DoHandleGrapplingHookStateInner(enum NewState, bool IsRpcState);// 0x2627e10
	void DoHandleGrapplingHookState(enum NewState);// 0x2627ed4
	void DoEndMovement(interface classNone SkillMoveCompInterface, bool bDestroy);// 0x2627c28
	void ClientProjMoveNotifyHitResultToServer(HitResult CharacterHitResult, enum EndReason);// 0x2627494
	void ClientNotifyAimSightResultToServer(PathfinderHitStruct ClientHit, PathfinderTraceStruct ClientTrace);// 0x2627344
	void ActiveFlexibleCDStatus();// 0x2626f28

--------------------------------
Class: GrapplingHookString.ActorComponent.Object
	float StartCurveKey;//[Offset: 0xa8, Size: 0x4]
	float EndCurveKey;//[Offset: 0xac, Size: 0x4]
	float QuarterCycleNumUp;//[Offset: 0xb0, Size: 0x4]
	float QuarterCycleNumRight;//[Offset: 0xb4, Size: 0x4]
	float OffsetQuarterCycleFactorUp;//[Offset: 0xb8, Size: 0x4]
	float OffsetQuarterCycleFactorRight;//[Offset: 0xbc, Size: 0x4]
	float OffsetQuarterCycleUp;//[Offset: 0xc0, Size: 0x4]
	float OffsetQuarterCycleRight;//[Offset: 0xc4, Size: 0x4]
	bool UseRandomParameter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	RopeAnimationParam[] RopeAnimationParamList;//[Offset: 0xcc, Size: 0xc]
	RopeAnimationParamRespawn[] RopeAnimationParamRespawnList;//[Offset: 0xd8, Size: 0xc]
	int MaxSplinePointNum;//[Offset: 0xe4, Size: 0x4]
	int MaxSplineMeshNum;//[Offset: 0xe8, Size: 0x4]
	float MinDistanceBetweenBreakPoint;//[Offset: 0xec, Size: 0x4]
	float MaxOffset;//[Offset: 0xf0, Size: 0x4]
	float MinOffset;//[Offset: 0xf4, Size: 0x4]
	float MinBreakPointDistanceToEndPos;//[Offset: 0xf8, Size: 0x4]
	float MinBreakPointDistanceToEndPosSweepRemove;//[Offset: 0xfc, Size: 0x4]
	float StartPosOffsetSweepRemove;//[Offset: 0x100, Size: 0x4]
	int MaxBreakPointNum;//[Offset: 0x104, Size: 0x4]
	class Object[] ClassCanNotBreakString;//[Offset: 0x108, Size: 0xc]
	float RemoveBreakPointDotProd;//[Offset: 0x114, Size: 0x4]
	float BaseScale;//[Offset: 0x118, Size: 0x4]
	StaticMesh* GrapplingHookStringMesh;//[Offset: 0x11c, Size: 0x4]
	byte GrapplingHookStringMeshForwardAxis;//[Offset: 0x120, Size: 0x1]
	MaterialInterface* GrapplingHookStringMeshMat;//[Offset: 0x124, Size: 0x4]
	float SimulatedBoxWidthHeight;//[Offset: 0x128, Size: 0x4]
	bool bDrawDebugSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	bool bDrawDebugHitSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1]
	bool bDrawDebugLineWithBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f, Size: 0x1]
	bool bDrawDebugLineWithBoxSweepRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bDrawDebugLineWithBoxSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	float DebugDrawTime;//[Offset: 0x134, Size: 0x4]
	bool bFuncAEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool bFuncBEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool bFuncCEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	Actor*[] StringMoveIgnoreActors;//[Offset: 0x13c, Size: 0xc]
	float CurLength;//[Offset: 0x148, Size: 0x4]
	float FinLength;//[Offset: 0x14c, Size: 0x4]
	int SimPointNum;//[Offset: 0x150, Size: 0x4]
	Vector StartPos;//[Offset: 0x154, Size: 0xc]
	Vector EndPos;//[Offset: 0x160, Size: 0xc]
	Vector FinPos;//[Offset: 0x16c, Size: 0xc]
	Vector EyePos;//[Offset: 0x178, Size: 0xc]
	Vector LastStartPos;//[Offset: 0x184, Size: 0xc]
	Vector LastEndPos;//[Offset: 0x190, Size: 0xc]
	Vector LastBoxExt;//[Offset: 0x19c, Size: 0xc]
	Vector ForwardVector;//[Offset: 0x1a8, Size: 0xc]
	Vector UpVector;//[Offset: 0x1b4, Size: 0xc]
	Vector RightVector;//[Offset: 0x1c0, Size: 0xc]
	float UpVectorDirFlag;//[Offset: 0x1cc, Size: 0x4]
	float RightVectorDirFlag;//[Offset: 0x1d0, Size: 0x4]
	float StringOffsetBase;//[Offset: 0x1d4, Size: 0x4]
	bool bLastPositionRotationSaved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	Vector LastPosition;//[Offset: 0x1dc, Size: 0xc]
	Quat LastRotation;//[Offset: 0x1f0, Size: 0x10]
	enum GrapplingHookStringType;//[Offset: 0x200, Size: 0x1]
	SceneComponent* RootCompToAttach;//[Offset: 0x204, Size: 0x8]
	HitResult[] BreakPointHitResultList;//[Offset: 0x20c, Size: 0xc]
	SplineMeshComponent*[] SplineMeshCompList;//[Offset: 0x218, Size: 0xc]
	SplineComponent* UpdateSplineComp;//[Offset: 0x224, Size: 0x8]
	bool UpdateStringBreakPoint();// 0x262dd5c
	void UpdateSplineMesh();// 0x262dc40
	void UpdateGrapplingHookString(Vector inStartPos, Vector inEndPos, Vector inFinPos, Vector inEyePos, SplineComponent* inUpdateSplineComp, enum inStringType);// 0x262de60
	bool UpdateGrapplingHookParameters();// 0x242e244
	bool TangentCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x262d910
	bool SplinePointCalculate(int CurPointIndex, out SplinePoint outSplinePoint);// 0x262dc54
	bool ScaleCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x262db30
	bool RotationCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x262da20
	bool QuadraticPositionCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x262d6f0
	bool LinearPositionCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x262d800
	void InitRandomStringAnimationParams();// 0xf4c220
	bool FilterBreakPointList();// 0x262dd84
	bool CubicPositionCalculate(int InputKey, out SplinePoint outSplinePoint);// 0x262d5e0
	void ClearStringData();// 0x262de4c
	void ClearSplineMeshComp(SplineMeshComponent* MeshComp);// 0x262ddd4
	bool BuildSplineAndMesh();// 0x262ddac
	bool BuildQuadraticBezierCurvesSpline();// 0xf52d2c
	bool BuildLinearBezierCurvesSpline();// 0xf52d2c
	bool BuildCubicBezierCurvesSpline();// 0xf52d2c

--------------------------------
Class: RopeAnimationParam
	float QuarterCycleNumUp;//[Offset: 0x0, Size: 0x4]
	float QuarterCycleNumRight;//[Offset: 0x4, Size: 0x4]
	float OffsetQuarterCycleFactorUp;//[Offset: 0x8, Size: 0x4]
	float OffsetQuarterCycleFactorRight;//[Offset: 0xc, Size: 0x4]
	float OffsetQuarterCycleUp;//[Offset: 0x10, Size: 0x4]
	float OffsetQuarterCycleRight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: RopeAnimationParamRespawn
	float Angle;//[Offset: 0x0, Size: 0x4]
	float Offset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x57c, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x5d4, Size: 0xc]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e0, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e0, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x5e1, Size: 0x1]
	float SplineBoundaryMin;//[Offset: 0x5e4, Size: 0x4]
	float SplineBoundaryMax;//[Offset: 0x5e8, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x5ec, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x5f0, Size: 0x10]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x600, Size: 0x1]
	void UpdateMesh();// 0x47c2ca4
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x47c2a8c
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x47c25d4
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x47c24e8
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x47c2b98
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x47c23e8
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x47c26d4
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x47c1f1c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x47c2038
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x47c2874
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x47c22e8
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x47c2224
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x47c2980
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x47c2124
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x47c1e30
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x47c1d44
	Vector GetStartTangent();// 0x47c2b50
	Vector2D GetStartScale();// 0x47c2694
	float GetStartRoll();// 0x47c25ac
	Vector GetStartPosition();// 0x47c2c5c
	Vector2D GetStartOffset();// 0x47c24a8
	Vector GetSplineUpDir();// 0x47c1ff0
	byte GetForwardAxis();// 0x47c20fc
	Vector GetEndTangent();// 0x47c2938
	Vector2D GetEndScale();// 0x47c23a8
	float GetEndRoll();// 0x2484b28
	Vector GetEndPosition();// 0x47c2a44
	Vector2D GetEndOffset();// 0x47c21e4
	float GetBoundaryMin();// 0x47c1ef4
	float GetBoundaryMax();// 0x47c1e08

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector EndTangent;//[Offset: 0x38, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: PathfinderHitStruct
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float ZiplineTime;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x14, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x38, Size: 0xc]
	Actor* Actor;//[Offset: 0x44, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x4c, Size: 0x8]

--------------------------------
Class: PathfinderTraceStruct
	Vector TraceStart;//[Offset: 0x0, Size: 0xc]
	Vector TraceEnd;//[Offset: 0xc, Size: 0xc]
	SceneComponent* BaseSceneComp;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PathfinderFlexibleCDConf
	bool bEnableFlexibleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool ActiveCDOnExitInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEnableMaxConnTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxConnectTime;//[Offset: 0x4, Size: 0x4]
	float MinCDDuration;//[Offset: 0x8, Size: 0x4]
	float MaxCDDuration;//[Offset: 0xc, Size: 0x4]
	float CDSlope;//[Offset: 0x10, Size: 0x4]
	float CDConstantAddition;//[Offset: 0x14, Size: 0x4]
	bool bIgnoreZDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: PathfinderSyncData
	enum State;//[Offset: 0x0, Size: 0x1]
	PathfinderHitStruct Hit;//[Offset: 0x4, Size: 0x54]
	PathfinderTraceStruct Trace;//[Offset: 0x58, Size: 0x20]
	int GrappleHookCnt;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: UAESkill.UAEBaseSkill.ApexSkill.UTSkill.Actor.Object
	UAESkillUIData SkillUIConfig;//[Offset: 0x344, Size: 0x204]
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1]
	bool bStopByKillDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 0x1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54b, Size: 0x1]
	enum SkillPawnState;//[Offset: 0x54c, Size: 0x1]
	bool bIsMainHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 0x1]
	bool bForceInterruptedBySameSkillState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 0x1]
	bool bPauseSkillLossTopOfMHStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 0x1]
	bool bNeedWeaponProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	FString SkillGroup;//[Offset: 0x554, Size: 0xc]
	bool SwitchToMainHandAtZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	int[] DisabledByPawnStateArray;//[Offset: 0x568, Size: 0xc]
	int ConfigId;//[Offset: 0x574, Size: 0x4]
	class APPerk[] TriggerByPerks;//[Offset: 0x578, Size: 0xc]
	void ShowSkillDisabledTips(UTSkillManagerComponent* SkillManagerComponent);// 0x27bd5dc

--------------------------------
Class: UAESkillUIData
	UAESkillUIMode StandardUIMode;//[Offset: 0x0, Size: 0xe4]
	UAESkillUIMode SimpleUIMode;//[Offset: 0xe4, Size: 0xe4]
	UAESkillAncillaryButton AncillaryBtn;//[Offset: 0x1c8, Size: 0x30]
	UAESkillGuideTips GuideTipsSetting;//[Offset: 0x1f8, Size: 0xc]

--------------------------------
Class: UAESkillUIMode
	FString UIDefineName;//[Offset: 0x0, Size: 0xc]
	enum UISlot;//[Offset: 0xc, Size: 0x1]
	class UserWidget* SkillBtnBPTemplate;//[Offset: 0x10, Size: 0x20]
	class UserWidget* SkillBtnBPTemplatePlanB;//[Offset: 0x30, Size: 0x20]
	class UserWidget* SkillBtnBP;//[Offset: 0x50, Size: 0x4]
	class UserWidget* SkillBPTemplate;//[Offset: 0x54, Size: 0x20]
	class UserWidget* SkillBPTemplatePlanB;//[Offset: 0x74, Size: 0x20]
	class UserWidget* SkillBP;//[Offset: 0x94, Size: 0x4]
	class UserWidget* CancelBtnBPTemplate;//[Offset: 0x98, Size: 0x20]
	class UserWidget* CancelBtnBP;//[Offset: 0xb8, Size: 0x4]
	class UserWidget* UndoBtnBPTemplate;//[Offset: 0xbc, Size: 0x20]
	class UserWidget* UndoBtnBP;//[Offset: 0xdc, Size: 0x4]
	SkillUIOperationData* UIOperationData;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: SkillUIOperationData.Object
	enum OperationType;//[Offset: 0x1c, Size: 0x1]
	FString SkillBtnName;//[Offset: 0x20, Size: 0xc]
	FString CancelBtnName;//[Offset: 0x2c, Size: 0xc]
	FString UndoBtnName;//[Offset: 0x38, Size: 0xc]
	FString StatusWSName;//[Offset: 0x44, Size: 0xc]
	FString SkillReleaseAnimName;//[Offset: 0x50, Size: 0xc]
	FString CDStatusUseAnimName;//[Offset: 0x5c, Size: 0xc]
	FString CDCompleteAnimName;//[Offset: 0x68, Size: 0xc]
	FString CDCompleteAudioName;//[Offset: 0x74, Size: 0xc]
	FString CDPressedButNotReady;//[Offset: 0x80, Size: 0xc]
	FString CDPressedButNotReadyAndSilenced;//[Offset: 0x8c, Size: 0xc]
	FString CDPressedButReadyAndSilenced;//[Offset: 0x98, Size: 0xc]
	float ReleaseInterval;//[Offset: 0xa4, Size: 0x4]
	bool bCancelWhenIllogical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bTipWhenIllogical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	FString StrTipWhenIllogical;//[Offset: 0xac, Size: 0xc]
	bool bShowTimerWhenCDMeetCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bRefreshCDWhenActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bEnableSkillEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	FString AtCDAnimName;//[Offset: 0xbc, Size: 0xc]
	FString AtReadyAnimName;//[Offset: 0xc8, Size: 0xc]
	FString AtActiveAnimName;//[Offset: 0xd4, Size: 0xc]
	FString AtDurationAnimName;//[Offset: 0xe0, Size: 0xc]
	FString GetProxyLuaPath();// 0x27e7d40

--------------------------------
Class: UAESkillAncillaryButton
	FString UIDefineName;//[Offset: 0x0, Size: 0xc]
	class UserWidget* AuxiliaryBtnBPTemplate;//[Offset: 0xc, Size: 0x20]
	class UserWidget* AuxiliaryBtnBP;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: UAESkillGuideTips
	float ShowTipsHoldTime;//[Offset: 0x0, Size: 0x4]
	float ShowTipsMoveRange;//[Offset: 0x4, Size: 0x4]
	enum ShowTipsStatus;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GrapplingHookAimSight.SkillActorBase.DynamicMovementActor.Actor.Object
	float MinRange;//[Offset: 0x3d4, Size: 0x4]
	float MaxRange;//[Offset: 0x3d8, Size: 0x4]
	float RangeExtendForAimSight;//[Offset: 0x3dc, Size: 0x4]
	float TPPExtraOffset;//[Offset: 0x3e0, Size: 0x4]
	PathfinderCheckSweepConfig[] SweepSphereRadiusArray;//[Offset: 0x3e4, Size: 0xc]
	bool SweepSphereFarToNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	bool AimTargetMustBeSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 0x1]
	float ProjSweepSphereRadius;//[Offset: 0x3f4, Size: 0x4]
	float SweepSphereRadiusZipline;//[Offset: 0x3f8, Size: 0x4]
	float MaxHalfAngleForZipline;//[Offset: 0x3fc, Size: 0x4]
	bool bDisableBlueAimUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	int GrapplingHookSkillID;//[Offset: 0x404, Size: 0x4]
	class Object[] IgnoreClassArray;//[Offset: 0x408, Size: 0xc]
	class Object[] TeammateIgnoreSkillActorClassArray;//[Offset: 0x414, Size: 0xc]
	enum[] InAirExclusivePawnStateArray;//[Offset: 0x420, Size: 0xc]
	float SyncBouncingCameraInfoTolerance;//[Offset: 0x42c, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	float DebugDisplayTime;//[Offset: 0x45c, Size: 0x4]
	float PerkEffectiveDuration;//[Offset: 0x460, Size: 0x4]
	float PerkRescueRate;//[Offset: 0x464, Size: 0x4]
	bool bReportFlowData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	TrackerData MoveDiffTrackerData;//[Offset: 0x544, Size: 0x18]
	SkillAimSight AimSight;//[Offset: 0x55c, Size: 0x28]
	bool bRefreshConfigOnSkillUIMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]
	bool bUseExtensionAimFind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 0x1]
	bool bUseDoubleAimSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x586, Size: 0x1]
	bool bHideMainAimSightWhenDisplayViceAimSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x587, Size: 0x1]
	bool bHideAssistWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	bool bUseExtensionAimFindWhenAimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1]
	float DoubleAimSightMaxValue;//[Offset: 0x58c, Size: 0x4]
	float AimAnimInterval;//[Offset: 0x590, Size: 0x4]
	LinearColor TargetNotFoundColor;//[Offset: 0x594, Size: 0x10]
	LinearColor TargetInvalidColor;//[Offset: 0x5a4, Size: 0x10]
	LinearColor TargetFoundColor;//[Offset: 0x5b4, Size: 0x10]
	LinearColor SubTargetFoundColor;//[Offset: 0x5c4, Size: 0x10]
	CurveFloat* AimSightScaleAnim;//[Offset: 0x5d4, Size: 0x4]
	int SkillConfigId;//[Offset: 0x648, Size: 0x4]
	void UpdateGrapplingHookAimingSightUI(enum TargetState2Lua);// 0x262af4c
	void TickAimSight();// 0x262b218
	void SyncBouncingCameraInfo(bool IsBouncing, const Vector RelativeLocation);// 0x262ab94
	void ServerUpdateUIConfigStatus(enum SkillUIMode);// 0x262ac68
	void ServerSavedResult(HitResult SavedHitResultToSever);// 0x262ace8
	void ReportFlowCacheData();// 0x262a61c
	void PathfindAimSightDebugPrint();// 0x262a5e0
	void OnSkillTriggerStringEvent(FString EventTypeStr, Actor* OwnerChar);// 0x262aaa4
	void OnSkillTriggerCustomEvent(byte EventType, Actor* OwnerChar);// 0x262a9e0
	void OnSkillAssistSwitch(bool bEnable, UTSkill* Skill);// 0x262b22c
	void OnPlayerRescueEnd(int RescueSrcPlayerKey, int RescueTargetPlayerKey);// 0x262a42c
	void OnPawnStateChanged(enum[] StatesMoreThanOld, enum[] StatesLessThanOld);// 0x262a658
	void OnCrosshairDraw(HUDWidgetBase* Widget);// 0x262a968
	void OnAPEvent_NotifyHideAimSight(bool bHide, float HiddenTime);// 0x262a828
	void OnAPEvent_NotifyGrappleHookSkillCDStart();// 0x262a814
	void OnAPEvent_NotifyGrappleHookSkillCDReady();// 0x262a800
	void OnAPEvent_NotifyGrappleHookAssistCircleInitAimSightActor();// 0x262a7ec
	void OnAPEvent_NotifyAimSightStatus(enum NewStatus);// 0x262a8f0
	bool IsPerkGrappleDyingTeammate(ApexCharacter* GrappleTeammate);// 0x262a4e8
	bool IsGrapplingCDReady();// 0x262a5f4
	bool IsGrapplingCDPending();// 0x262a630
	bool GetSweepTestParamsFromSceenCenter(out Vector outStartPos, out Vector outEndPos, out Quat outRot, out Vector OutCameraPos);// 0x262afc4
	HitResult GetSavedHitResult();// 0x262b194
	PathfinderTraceStruct GetGrappleTrace();// 0x262b154
	bool CheckZiplineHitWithAngle(Vector StartPos, Vector EndPos);// 0x262adbc
	bool CheckZiplineHit(Vector StartPos, Vector EndPos);// 0x262ae84
	void AimSightInit();// 0x262ab80
	void AddPerkDyingTeammateWhenGrapple(ApexCharacter* GrappleTeammate);// 0x262a568

--------------------------------
Class: PathfinderCheckSweepConfig
	float StartLocationPercentage;//[Offset: 0x0, Size: 0x4]
	float SphereRadius;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TrackerData
	float Value;//[Offset: 0x0, Size: 0x4]
	int TrackerType;//[Offset: 0x4, Size: 0x4]
	int LegendId;//[Offset: 0x8, Size: 0x4]
	int TrackerParam1;//[Offset: 0xc, Size: 0x4]
	int TrackerParam2;//[Offset: 0x10, Size: 0x4]
	int TrackerID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SkillAimSight
	Texture*[] AimSightTextureArray;//[Offset: 0x0, Size: 0xc]
	Vector2D AimSightSize;//[Offset: 0xc, Size: 0x8]
	bool Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: SkillMovementConfig

--------------------------------
Class: FireRangeShootGameComponent.ActorComponent.Object
	FireRangeShootGamePlayerSettings ShootGameSettings;//[Offset: 0xa8, Size: 0x20]
	enum ShootGameType;//[Offset: 0xc8, Size: 0x1]
	Actor* ValidAreaHintActor;//[Offset: 0xcc, Size: 0x4]
	FireRangeShootGameConsole* ShootGameConsole;//[Offset: 0xd0, Size: 0x4]
	enum FireRangeGameType;//[Offset: 0xd8, Size: 0x1]
	int GameScore;//[Offset: 0xdc, Size: 0x4]
	int TargetNum;//[Offset: 0xe0, Size: 0x4]
	void StartSingleTargetGameToServer(FireRangeShootGameConsole* Console);// 0x23c52b4
	void StartSingleTargetGame(FireRangeShootGameConsole* Console);// 0x25cf0fc
	void StartShootGameToServer(FireRangeShootGameConsole* Console, enum ShootGameMode, const FireRangeShootGamePlayerSettings Settings, bool IsFromRestart);// 0x25cf2c4
	void StartShootGame(FireRangeShootGameConsole* Console, bool IsFromRestart);// 0x25cf448
	void StartGuardWarGameToServer(FireRangeShootGameConsole* Console, enum ShootGameMode, const FireRangeShootGamePlayerSettings Settings, bool IsFromRestart);// 0x25ceeb4
	void StartGuardWarGame(FireRangeShootGameConsole* Console, bool IsFromRestart);// 0x25cf038
	void StartGameToClient(float DurationTime, float WaitTime, enum ShootGameMode, int MaxScore);// 0x25cf174
	void ShowAddScore(const Vector HitLocation, int Score);// 0x25cedf8
	void SetTargetDistanceToServer(int Distance);// 0x25836a4
	void RpcServer_CheckRankChange(int Score, uint64 UID, enum Type);// 0x25cecd0
	void OnRep_ValidAreaHintActor(Actor* PreHintActor);// 0x25cf584
	void OnRep_GameScore();// 0x25cede4
	void OnRep_FireRangeGameType(enum PreType);// 0x25cf50c
	void FinishPrepareToClient();// 0x2583874
	void EndGameToServer();// 0xf49d14
	void EndGameToClient(int Score);// 0xf4bebc

--------------------------------
Class: FireRangeShootGameConsole.Actor.Object
	TrainingFieldActor*[] TrainingFieldList;//[Offset: 0x1d0, Size: 0xc]
	FireRangeShootGamePipelineBase* ShootGamePipeline;//[Offset: 0x1dc, Size: 0x4]
	FireRangeShootGamePlayerSettings SimpleModeSettings;//[Offset: 0x1e0, Size: 0x20]
	FireRangeShootGamePlayerSettings CommonModeSettings;//[Offset: 0x200, Size: 0x20]
	FireRangeShootGamePlayerSettings MiserableModeSettings;//[Offset: 0x220, Size: 0x20]
	FireRangeShootGamePlayerSettings DroneModeSettings;//[Offset: 0x240, Size: 0x20]
	FireRangeShootGamePlayerSettings SupplyBoxModeSettings;//[Offset: 0x260, Size: 0x20]
	FireRangeShootGamePlayerSettings CombatModeSettings;//[Offset: 0x280, Size: 0x20]
	FireRangeShootGamePlayerSettings CoverModeSettings;//[Offset: 0x2a0, Size: 0x20]
	FireRangeGuardWarGamePipelineBase* GuardWarGame;//[Offset: 0x2c0, Size: 0x4]
	FireRangeShootGamePlayerSettings GuardWarSettings;//[Offset: 0x2c4, Size: 0x20]
	TriggerVolume* ValidArea;//[Offset: 0x2e4, Size: 0x4]
	Actor* ValidAreaHintActor;//[Offset: 0x2e8, Size: 0x4]
	<enum> InvalidShootGameTypes;//[Offset: 0x2ec, Size: 0x3c]
	float ValidAreaCountdownTime;//[Offset: 0x328, Size: 0x4]
	FireRangeGameDefineBase* ActiveGame;//[Offset: 0x32c, Size: 0x4]
	FireRangeSingleTargetGameBase* SingleTargetGame;//[Offset: 0x330, Size: 0x4]
	int CustomModeEndConditionMask;//[Offset: 0x334, Size: 0x4]
	void OpenTrainingFieldList();// 0x25ce9e4
	void CloseTrainingFieldList();// 0x25ce9d0

--------------------------------
Class: TrainingFieldActor.Actor.Object
	AnimSequence* OpenSeq;//[Offset: 0x1d0, Size: 0x4]
	AnimSequence* CloseSeq;//[Offset: 0x1d4, Size: 0x4]
	AnimSequence* OpenIdleSeq;//[Offset: 0x1d8, Size: 0x4]
	AnimSequence* CloseIdleSeq;//[Offset: 0x1dc, Size: 0x4]
	enum InitAnimState;//[Offset: 0x1e0, Size: 0x1]
	enum CurAnimState;//[Offset: 0x1e8, Size: 0x1]
	Actor*[] PropGeneraters;//[Offset: 0x1ec, Size: 0xc]
	bool bCanUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	void UpadatePropVisibility(bool bIsHideProps);// 0x27aa630
	void OpenTrainingField();// 0x27aa8e8
	void OpenAllTrainingFields(Object* WorldContextObject);// 0x27aa864
	void OnRep_CurAnimState();// 0x27aa6b0
	void OnOpenAnimEnd();// 0x27aa6d8
	void OnCloseAnimEnd();// 0x27aa6c4
	void DeactiveTrainingField();// 0x27aa7cc
	void DeactiveAllTrainingFields(Object* WorldContextObject);// 0x27aa6ec
	void CloseTrainingField();// 0x27aa8d4
	void CloseAllTrainingFields(Object* WorldContextObject);// 0x27aa7f4
	void ActiveTrainingField();// 0x27aa7e0
	void ActiveAllTrainingFields(Object* WorldContextObject);// 0x27aa75c

--------------------------------
Class: FireRangeShootGamePipelineBase.FireRangeGameDefineBase.Object
	float WaitTime;//[Offset: 0x1c, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x20, Size: 0xc]
	float CustomShootModeDurationTime;//[Offset: 0x2c, Size: 0x4]
	FireRangeTargetSpawnRuleBase*[] SpawnRules;//[Offset: 0x30, Size: 0xc]
	FireRangeShootGamePlayerSettings PlayerSettings;//[Offset: 0x3c, Size: 0x20]
	int ModeLevel;//[Offset: 0x5c, Size: 0x4]
	enum ShootGameType;//[Offset: 0x60, Size: 0x1]
	TimerHandle GameTimerHandle;//[Offset: 0x68, Size: 0x8]
	FireRangeShootGameComponent* ShootGameManager;//[Offset: 0x70, Size: 0x4]
	void WhenPlayerDeath();// 0x25ccfa4
	void WhenGameStart(enum ShootGameMode, int Level, out const FireRangeShootGamePlayerSettings Settings);// 0x2ce6f18
	void WhenGameEnd();// 0x2ce6f18
	void RemoveSpawnRule(FireRangeTargetSpawnRuleBase* RuleInstance);// 0x25ccfe0
	PlayerController* GetOwningPlayer();// 0x25ccfb8
	void AddSpawnRule(FireRangeTargetSpawnRuleBase* RuleInstance);// 0x25cd058
	void AddScore(int AddValue, Actor* BrokenTarget);// 0x25cd0d0

--------------------------------
Class: FireRangeGameDefineBase.Object
	void WhenTick(float DeltaTime);// 0x2ce6f18
	void WhenEndPlay();// 0x2ce6f18
	void WhenBeginPlay();// 0x2ce6f18

--------------------------------
Class: FireRangeTargetSpawnRuleBase.Object
	void WhenRuleStart();// 0x2ce6f18
	void WhenRuleEnd();// 0x2ce6f18
	PlayerController* GetOwningPlayer();// 0x25cc750
	void AddScore(int AddValue, Actor* BrokenTarget, Controller* Killer);// 0x25cc778

--------------------------------
Class: FireRangeShootGamePlayerSettings
	bool bIsCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum TargetType;//[Offset: 0x1, Size: 0x1]
	enum GaitType;//[Offset: 0x2, Size: 0x1]
	enum PostureType;//[Offset: 0x3, Size: 0x1]
	enum HealthType;//[Offset: 0x4, Size: 0x1]
	int ShieldLevel;//[Offset: 0x8, Size: 0x4]
	enum TargetAttackFrequency;//[Offset: 0xc, Size: 0x1]
	float DurationTime;//[Offset: 0x10, Size: 0x4]
	int EndConditionMask;//[Offset: 0x14, Size: 0x4]
	int ScoreThreshold;//[Offset: 0x18, Size: 0x4]
	int TargetThreshold;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: FireRangeGuardWarGamePipelineBase.FireRangeShootGamePipelineBase.FireRangeGameDefineBase.Object
	Actor*[] Targets;//[Offset: 0x74, Size: 0xc]
	<int,TargetGroup> TargetGroups;//[Offset: 0x80, Size: 0x3c]
	void RemoveTargetFromGroup(out const int GroupID, Actor* Target);// 0x25cd960
	void RemoveTarget(Actor* Target);// 0x25cddd4
	void RemoveGroup(out const int GroupID);// 0x25cd8d8
	bool IsGroupDead(out const int GroupID);// 0x25cd848
	TargetGroup GetTargetsByGroupId(out const int GroupID);// 0x25cdc04
	Actor* GetTargetByIndex(int Index);// 0x25cdec4
	Actor* GetTargetByGroupIdAndTargetIndex(out const int GroupID, out const int TargetIndex);// 0x25cda30
	Actor*[] GetTargetArrayByGroupId(out const int GroupID);// 0x25cdb18
	Actor*[] GetAllTargets();// 0x25cdf44
	void ClearTargets();// 0x25cddc0
	void ClearTargetGroups();// 0x25cd834
	void AddTargetToGroup(out const int GroupID, Actor* Target);// 0x25cdcf0
	void AddTarget(Actor* Target);// 0x25cde4c

--------------------------------
Class: TargetGroup
	Actor*[] TargetArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: FireRangeSingleTargetGameBase.FireRangeGameDefineBase.Object
	void WhenSetDistance(int Distance);// 0x2ce6f18
	void WhenGameStart();// 0x2ce6f18
	void WhenGameEnd();// 0x2ce6f18

--------------------------------
Class: MainTownFreeBattleComponent.ActorComponent.Object
	float FreeBattleInviteMaxKeepTime;//[Offset: 0xa8, Size: 0x4]
	float FreeBattleInviteDoubleCheckMaxKeepTime;//[Offset: 0xac, Size: 0x4]
	FreeBattleModeSettings* ModeSettings;//[Offset: 0xb0, Size: 0x4]
	MainTownFreeBattleManager* FreeBattleManager;//[Offset: 0xb4, Size: 0x4]
	int FreeBattleOutlineId;//[Offset: 0xbc, Size: 0x4]
	void WhenPlayerExit(FString PlayerName);// 0x269487c
	void StartGameCountdownToClient();// 0x24052d8
	void StartFreeBattleToClient();// 0x249d9f4
	void StartFreeBattleDoubleCheckToClient(const uint64[] AcceptUIDs, const uint64[] RefuseUIDs);// 0x2694be8
	void ShowOverTimeTipsToClient();// 0x2578ea4
	void ShowInvalidInviteTips();// 0x24051f0
	void RefuseFreeBattleToServer();// 0x23ec0b4
	void RefuseFreeBattleToClient(const MainTownFreeBattleInviteState[] SendInviteStates);// 0x2694cdc
	void RefuseFreeBattleToAuthor();// 0x2517b18
	void RefuseFreeBattleDoubleCheckToServer();// 0xf4c220
	void RefuseFreeBattleDoubleCheckToClient(uint64 RefuseUID);// 0x2694b64
	void OnScoreChanged(uint64 UID, int AddScore);// 0x2694914
	void InviteTeammateFreeBattleToServer(int Time, int Score, enum ModeType);// 0x2694ecc
	void InviteTeammateFreeBattleToClient(uint64 InviteUid, int Time, int Score, enum ModeType);// 0x2694d74
	void EndFreeBattleToClient(int Result, const uint64[] UIDs, const int[] EndScores, bool IsTimeOver);// 0x26949dc
	void EnableFreeBattleCooldown();// 0x23ec0ec
	void AcceptFreeBattleToServer();// 0x23ec0d0
	void AcceptFreeBattleDoubleCheckToServer();// 0x240523c

--------------------------------
Class: FreeBattleModeSettings.DataAsset.Object
	FreeBattleModeWeaponSettings[] Mode3Id;//[Offset: 0x20, Size: 0xc]
	FreeBattleModeWeaponSettings[] Mode4Id;//[Offset: 0x2c, Size: 0xc]
	FreeBattleModeWeaponSettings[] Mode5Id;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: FreeBattleModeWeaponSettings
	int IdSlot1;//[Offset: 0x0, Size: 0x4]
	int IdSlot2;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MainTownFreeBattleManager.Actor.Object
	float RemainTime;//[Offset: 0x1d0, Size: 0x4]
	MainTownFreeBattlePlayerData[] Players;//[Offset: 0x1d4, Size: 0xc]
	MainTownFreeBattleInviteState[] InviteStates;//[Offset: 0x1e0, Size: 0xc]
	MainTownPlayerController* Author;//[Offset: 0x1ec, Size: 0x4]
	float MaxTime;//[Offset: 0x1f0, Size: 0x4]
	int MaxScore;//[Offset: 0x1f4, Size: 0x4]
	enum ModeType;//[Offset: 0x1f8, Size: 0x1]
	FreeBattleModeSettings* ModeSettings;//[Offset: 0x1fc, Size: 0x4]
	bool bIsStartGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	bool bInFreeBattleGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	void WhenKillOther(Controller* Killer, Controller* Killed, out const ApgameDamageEventInfo InDamageEventInfo);// 0x2694008
	void OnRep_InviteStates();// 0x2694118
	void OnRep_InFreeBattleGame();// 0x2693ff4
	void OnPlayerRespawn(int InCauserPlayerKey, int InVictimPlayerKey);// 0x2693f38

--------------------------------
Class: ApgameDamageEventInfo
	bool bWithDisruptorEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MainTownFreeBattlePlayerData
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	int Score;//[Offset: 0x8, Size: 0x4]
	MainTownPlayerController* Player;//[Offset: 0x10, Size: 0x4]
	ApgameBackpackSnapshot BackpackShot;//[Offset: 0x14, Size: 0x18]

--------------------------------
Class: ApgameBackpackSnapshot
	ApgameBackpackItemSnapshot[] Items;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ApgameBackpackItemSnapshot
	ItemDefineID ItemID;//[Offset: 0x0, Size: 0x10]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x10, Size: 0xc]
	int[] Associations;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: MainTownFreeBattleInviteState
	byte TeamIdx;//[Offset: 0x0, Size: 0x1]
	byte State;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ReplicatedLevelInstanceActor.Actor.Object
	ReplicatedLevelInstanceComponent* ReplicatedLevelInstance;//[Offset: 0x1d0, Size: 0x4]

--------------------------------
Class: ReplicatedLevelInstanceComponent.SceneComponent.ActorComponent.Object
	World* Level;//[Offset: 0x1ec, Size: 0x20]
	delegate OnLevelShownCompleted;//[Offset: 0x220, Size: 0xc]
	bool bIsOnlyLoadStaticLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x240, Size: 0x1]
	LevelStreamingDynamic* LevelInstance;//[Offset: 0x25c, Size: 0x4]
	LevelStreamingDynamic*[] SubLevelAlwaysLoaded;//[Offset: 0x260, Size: 0xc]
	LevelStreamingDynamic*[] SubLevelScriptLoaded;//[Offset: 0x26c, Size: 0xc]
	FString LevelUniqueNameSuffix;//[Offset: 0x278, Size: 0xc]
	int[] ShownLevelScriptLoadedIdx;//[Offset: 0x2d4, Size: 0xc]
	int[] ShownLevelAlwaysLoadedIdx;//[Offset: 0x358, Size: 0xc]
	void WhenScriptLoadedSubLevelUnloadedComplete(LevelStreaming* LevelStreaming);// 0x12beb68
	void WhenLevelShown();// 0x12bebe0
	void WhenAlwaysLoadedSubLevelUnloadedComplete(LevelStreaming* LevelStreaming);// 0x12beaf0
	void UnloadSubLevelByName(FName Name);// 0x12bedd4
	void UnloadAndRefreshSubLevelScriptLoaded_Client(FName LevelName);// 0x12bec1c
	void UnloadAndRefreshSubLevelScriptLoaded(FName LevelName);// 0x12bec98
	void UnloadAllDynamicLevel();// 0x12beee0
	void SetLevel(const World* InLevel);// 0x12bef08
	void ScriptLoadedSubLevelUnLoadedAndRefreshComplete__DelegateSignature();// 0x2ce6f18
	void ReloadIsNotStaticSubLevelAlwaysLoaded_Client();// 0x12bed14
	void ReloadIsNotStaticSubLevelAlwaysLoaded();// 0x12bed28
	void OnRep_ShownLevelDynamicIdx();// 0x12bec08
	void OnRep_Level(out const World* PreLevel);// 0x12bf110
	void OnRep_IsOnlyLoadStaticLevel();// 0x12beef4
	void OnRep_AlwaysLoadedShownLevelDynamicIdx();// 0x12bebf4
	void OnLevelShownCompleted__DelegateSignature(ReplicatedLevelInstanceComponent* ReplicatedLevelInstance);// 0x2ce6f18
	void LoadSubLevelByName(FName Name);// 0x12bee50
	void LoadAllDynamicLevel();// 0x12beecc
	bool IsScriptLoadedLevelPendingLoad();// 0x12bf098
	bool IsLevelInstanceValid();// 0x12bf0e8
	bool IsContainPendingLoadLevel();// 0x12bf070
	bool IsAlwaysLoadedLevelFullyLoaded();// 0x12bf0c0
	LevelStreamingDynamic* GetSingleSubLevelScriptLoaded(FName Name);// 0x12bed3c
	void AlwaysLoadedSubLevelReloadComplete__DelegateSignature();// 0x2ce6f18

--------------------------------
Class: MPBattleResult
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	FString Reason;//[Offset: 0x4, Size: 0xc]
	MPResultTeamData[] TeamList;//[Offset: 0x10, Size: 0xc]
	int TeamID;//[Offset: 0x1c, Size: 0x4]
	WinModeInfo[] WinModeInfos;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: MPResultTeamData
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	int TeamScore;//[Offset: 0x4, Size: 0x4]
	int TeamID;//[Offset: 0x8, Size: 0x4]
	BattleResultTeammate[] members;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BattleResultTeammate
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	FString Name;//[Offset: 0x8, Size: 0xc]
	int KillNum;//[Offset: 0x14, Size: 0x4]
	int DeathNum;//[Offset: 0x18, Size: 0x4]
	int AssistNum;//[Offset: 0x1c, Size: 0x4]
	int RevivalNum;//[Offset: 0x20, Size: 0x4]
	int RescueNum;//[Offset: 0x24, Size: 0x4]
	int SurviveTime;//[Offset: 0x28, Size: 0x4]
	float DamageAmount;//[Offset: 0x2c, Size: 0x4]
	int Rank;//[Offset: 0x30, Size: 0x4]
	int LegendId;//[Offset: 0x34, Size: 0x4]
	int LegendSkin;//[Offset: 0x38, Size: 0x4]
	int FrameID;//[Offset: 0x3c, Size: 0x4]
	int PosID;//[Offset: 0x40, Size: 0x4]
	int bIsEscape;//[Offset: 0x44, Size: 0x4]
	bool bAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	BRAreanDetailData ArenaDetail;//[Offset: 0x50, Size: 0x68]
	int[] Emote;//[Offset: 0xb8, Size: 0xc]

--------------------------------
Class: BRAreanDetailData
	BRAreanBrilliantData Brilliant;//[Offset: 0x0, Size: 0x3c]
	int64[] Achievements;//[Offset: 0x3c, Size: 0xc]
	uint64 Score;//[Offset: 0x48, Size: 0x8]
	float RankRatio;//[Offset: 0x50, Size: 0x4]
	BRAreanRadarData Radar;//[Offset: 0x54, Size: 0x14]

--------------------------------
Class: BRAreanBrilliantData
	int ComboKill;//[Offset: 0x0, Size: 0x4]
	int ComboKillAvg;//[Offset: 0x4, Size: 0x4]
	float HeadShotRate;//[Offset: 0x8, Size: 0x4]
	float HeadShotRateAvg;//[Offset: 0xc, Size: 0x4]
	float DamageTImeRecoveryHP;//[Offset: 0x10, Size: 0x4]
	float DamageTImeRecoveryHPAvg;//[Offset: 0x14, Size: 0x4]
	float VerticalDamage;//[Offset: 0x18, Size: 0x4]
	float VerticalDamageAvg;//[Offset: 0x1c, Size: 0x4]
	float BehiindDamage;//[Offset: 0x20, Size: 0x4]
	float BehiindDamageAvg;//[Offset: 0x24, Size: 0x4]
	int SegmentLevel;//[Offset: 0x28, Size: 0x4]
	float KillAvg;//[Offset: 0x2c, Size: 0x4]
	float AssistAvg;//[Offset: 0x30, Size: 0x4]
	float DamageAvg;//[Offset: 0x34, Size: 0x4]
	int GameNum;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: BRAreanRadarData
	float Kill;//[Offset: 0x0, Size: 0x4]
	float Rank;//[Offset: 0x4, Size: 0x4]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float Revive;//[Offset: 0xc, Size: 0x4]
	float Survival;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WinModeInfo
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	int LegendId;//[Offset: 0xc, Size: 0x4]
	int LegendSkin;//[Offset: 0x10, Size: 0x4]
	int[] Emote;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: ControllerMagmaComponent.ActorComponent.Object
	float MagmaRiseStateChangedLockTime;//[Offset: 0xa8, Size: 0x4]
	float SwitchBackToCharacterBlendTime;//[Offset: 0xac, Size: 0x4]
	byte ViewTargetBlendFunc;//[Offset: 0xb0, Size: 0x1]
	bool bClientCheckMagmaRiseStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bServerCheckMagmaRiseStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	bool IsMagmaRising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1]
	float UpdateTimerInterval;//[Offset: 0xc4, Size: 0x4]
	float MagmaRiseDelayTime;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: ApexPostProcessComponent.ActorComponent.Object
	class UserWidget* CloseEyeWidgetClass;//[Offset: 0xa8, Size: 0x4]
	UserWidget* CloseEyeWidgetInst;//[Offset: 0xac, Size: 0x4]
	<enum,ApexPostProcessCfgItem> PostProcessConfigMap;//[Offset: 0xb0, Size: 0x3c]
	<enum,Object*> PostProcessUnitMap;//[Offset: 0xec, Size: 0x3c]
	TimerHandle CloseEyeTh;//[Offset: 0x128, Size: 0x8]
	void UnRegisterPostProcess(enum PPT);// 0x249d7b0
	void RegisterPostProcess(enum PPT, Object* ApexPostProcessUnit);// 0x249d830
	void EndPostProcess(enum PPT);// 0x249d8f4
	void EndGreyScreen();// 0xf4a07c
	void EndCloseEye();// 0xf49d14
	void EndArc();// 0x24052d8
	void BeginPostProcess(enum PPT);// 0x249d974
	void BeginGreyScreen();// 0x24051f0
	void BeginCloseEye(byte TimeSec, float StartAtTime);// 0x249da10
	void BeginArc();// 0x249d9f4

--------------------------------
Class: ApexPostProcessCfgItem
	enum PPT;//[Offset: 0x0, Size: 0x1]
	class Actor* PostProcessClass;//[Offset: 0x4, Size: 0x4]
	float Duation;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: QuickItemComponent.ActorComponent.Object
	<int,QuickItemArray> ProjectileModeCfg;//[Offset: 0xa8, Size: 0x3c]
	<int,QuickItemArray> MedicalModeCfg;//[Offset: 0xe4, Size: 0x3c]
	void GetQuickItemModeCfg(FString ModeId, out <int,QuickItemArray> ModeCfgMap, out QuickItemArray QuickItemArray, FString ConfigKey);// 0x272f020
	QuickItemArray GetProjectileModeCfg(FString ModeId);// 0x272eed0
	QuickItemArray GetMedicalModeCfg(FString ModeId);// 0x272ed8c

--------------------------------
Class: QuickItemArray
	int[] ItemIdArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: HUDManagerComponent.ActorComponent.Object
	enum[] PreCreateArray;//[Offset: 0xa8, Size: 0xc]
	<enum,class UserWidget> HUDDefines;//[Offset: 0xb4, Size: 0x3c]
	<enum,UserWidget*> HUDMap;//[Offset: 0xf0, Size: 0x3c]
	bool bKillLeaderOnShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	BattlefieldKillKingMessage[] KillLeaderMsgArray;//[Offset: 0x130, Size: 0xc]
	void ShowKillLeaderTip(BattlefieldKillKingMessage Msg);// 0x264b0c0
	void ShowKillLeaderKilledTip(FString Msg, int MsgType);// 0x264af08
	void ShowKillLeaderAchievedTip(int KillCount);// 0x264b030
	void PreCreateWidget();// 0x264b314
	void PopKillLeaderMsg();// 0x264b0a8
	void OnPreWidgetLoad();// 0x264b300
	UserWidget* GetUserWidget(enum HUDType);// 0x264b280
	void EnableExplosionTimeTips(bool bEnable, float RealExplosionTime, float Percent);// 0x264adfc

--------------------------------
Class: UIStateMgr.ActorComponent.Object
	<enum,byte> Type2Priorities;//[Offset: 0xb4, Size: 0x3c]
	<enum,UIStateList> ConfigStateMap;//[Offset: 0x12c, Size: 0x3c]
	DataTable* UIStateConfig;//[Offset: 0x168, Size: 0x4]
	<FName,ApexUIStateBaseInfo> WaitToChangeMap;//[Offset: 0x180, Size: 0x3c]
	void PostUIStateChange_Lua(const enum UIState, const enum PreUIState);// 0x1255bf8
	void PostUIStateChange(const enum UIState, bool bIsEnter);// 0x27f4f04
	void HandleNextTickFunc();// 0x27f4d40
	void GetNodeWidget(FName NodeName, out Widget*[] FindList);// 0x27f4d54
	FString GetModuleName();// 0x27f4fc8
	void BeginPlay_Lua();// 0x1255bf8

--------------------------------
Class: UIStateList
	ApexUIStateBaseInfo[] StateList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ApexUIStateBaseInfo
	FName BlueprintNodeName;//[Offset: 0x0, Size: 0x8]
	FName FuncName;//[Offset: 0x8, Size: 0x8]
	bool IgnoreExistState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString[] IgnoreSimpleModeIDList;//[Offset: 0x14, Size: 0xc]
	bool bInnerEnterShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	FName StateKey;//[Offset: 0x24, Size: 0x8]
	bool FinalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: ApLUTComponent.ActorComponent.Object
	LutDataAsset* LutData;//[Offset: 0xa8, Size: 0x4]
	<FName,Actor*> HighLevelEndLUTs;//[Offset: 0xac, Size: 0x3c]
	void UseLutByName(FName ID, float Speed, float PlayTime, enum Source, bool IsFromCallback);// 0x24e767c
	void StopLutByName(FName ID, enum Source);// 0x24e75b8
	void ClearAllLut();// 0x24e75a4

--------------------------------
Class: LutDataAsset.DataAsset.Object
	<FName,ApLUTCommands> LutCommands;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: ApLUTCommands
	int Priority;//[Offset: 0x0, Size: 0x4]
	int HeroID;//[Offset: 0x4, Size: 0x4]
	FString[] LutCommands;//[Offset: 0x8, Size: 0xc]
	class Actor* HighLevelEndLut_Ptr;//[Offset: 0x14, Size: 0x20]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x2f4, Size: 0x4]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x2fc, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x300, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x304, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x310, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x314, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x318, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x31c, Size: 0x4]
	bool bEnableCSMOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	float OverrideCSMNear;//[Offset: 0x324, Size: 0x4]
	float OverrideCSMFar;//[Offset: 0x328, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x32c, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x330, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x334, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x33c, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x340, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x344, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x348, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x34c, Size: 0x4]
	float TraceDistance;//[Offset: 0x350, Size: 0x4]
	Texture* CloudMaskTexture;//[Offset: 0x354, Size: 0x4]
	Vector4 CloudRelOffset_U;//[Offset: 0x360, Size: 0x10]
	Vector4 CloudRelOffset_V;//[Offset: 0x370, Size: 0x10]
	LinearColor TintAndMonochrome;//[Offset: 0x380, Size: 0x10]
	float DynamicLightScalarDirectional;//[Offset: 0x390, Size: 0x4]
	float DynamicLightScalarEnvironment;//[Offset: 0x394, Size: 0x4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x398, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x3ac, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0, Size: 0x1]
	bool bUseCustomShadowBound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b0, Size: 0x1]
	float ShadowCasterBoundRadius;//[Offset: 0x3b4, Size: 0x4]
	void SetTintAndMonochrome(LinearColor NewValue);// 0x468fd00
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x468f7d0
	void SetOverrideCSMNear(float NewValue);// 0x468f8c0
	void SetOverrideCSMFar(float NewValue);// 0x468f848
	void SetOcclusionMaskDarkness(float NewValue);// 0x468f6d8
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x468f668
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x468f750
	void SetEnableCSMOverride(bool bNewValue);// 0x468f938
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x468fb20
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x468fb98
	void SetDynamicShadowCascades(int NewValue);// 0x468faa8
	void SetDynamicLightScalarEnvironment(float NewValue);// 0x468fc10
	void SetDynamicLightScalarDirectional(float NewValue);// 0x468fc88
	void SetCloudRelOffset_V(Vector4 NewValue);// 0x468fd80
	void SetCloudRelOffset_U(Vector4 NewValue);// 0x468fe30
	void SetCloudMaskTexture(Texture* NewValue);// 0x468fee0
	void SetCascadeTransitionFraction(float NewValue);// 0x468f9b8
	void SetCascadeDistributionExponent(float NewValue);// 0x468fa30

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x218, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x21c, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x220, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x228, Size: 0x4]
	float MinRoughness;//[Offset: 0x230, Size: 0x4]
	float SpecularScale;//[Offset: 0x234, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x238, Size: 0x4]
	float ShadowBias;//[Offset: 0x23c, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x240, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x244, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x248, Size: 0x4]
	int LightPriority;//[Offset: 0x24c, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x250, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x250, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x250, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x250, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x251, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x254, Size: 0x4]
	Vector LightFunctionScale;//[Offset: 0x258, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x264, Size: 0x4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x26c, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x270, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x274, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	float BloomScale;//[Offset: 0x27c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x280, Size: 0x4]
	Color BloomTint;//[Offset: 0x284, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x28c, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x4730074
	void SetUseIESBrightness(bool bNewValue);// 0x472f904
	void SetTransmission(bool bNewValue);// 0x472fbdc
	void SetTemperature(float NewTemperature);// 0x472ff34
	void SetSpecularScale(float NewValue);// 0x472f724
	void SetShadowSlopeBias(float NewValue);// 0x472f79c
	void SetShadowBias(float NewValue);// 0x472f814
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x472fe4c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x472febc
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x472fdd4
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x472fd5c
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x472ffac
	void SetIntensity(float NewIntensity);// 0x4730164
	void SetIndirectLightingIntensity(float NewIntensity);// 0x47300ec
	void SetIESTexture(TextureLightProfile* NewValue);// 0x472f984
	void SetIESBrightnessScale(float NewValue);// 0x472f88c
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x472f6a4
	void SetEnableLightShaftBloom(bool bNewValue);// 0x472fb5c
	void SetBloomTint(Color NewValue);// 0x472f9fc
	void SetBloomThreshold(float NewValue);// 0x472fa6c
	void SetBloomScale(float NewValue);// 0x472fae4
	void SetAffectTranslucentLighting(bool bNewValue);// 0x472fc5c
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x472fcdc

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1ec, Size: 0x10]
	float Brightness;//[Offset: 0x1fc, Size: 0x4]
	float Intensity;//[Offset: 0x200, Size: 0x4]
	Color LightColor;//[Offset: 0x204, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x208, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x208, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x208, Size: 0x1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x208, Size: 0x1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x209, Size: 0x1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x209, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x20c, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x210, Size: 0x4]
	int SamplesPerPixel;//[Offset: 0x214, Size: 0x4]
	void SetSamplesPerPixel(int NewValue);// 0x4730b74
	void SetCastVolumetricShadow(bool bNewValue);// 0x4730d6c
	void SetCastShadows(bool bNewValue);// 0x4730e30
	void SetCastRaytracedShadow(bool bNewValue);// 0x4730bec
	void SetAffectReflection(bool bNewValue);// 0x4730cec
	void SetAffectGlobalIllumination(bool bNewValue);// 0x4730c6c
	LinearColor GetLightColor();// 0x4730dec

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0xcc, Size: 0x4]
	float TextureMultiplier;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ViewAssistComponent.ActorComponent.Object
	FName[] CharacterSnappingBones;//[Offset: 0xa8, Size: 0xc]
	ViewAssistInfo[] ReadyInfos;//[Offset: 0xb4, Size: 0xc]
	<uint32,float> Weapon2LastQuickSnappingTime;//[Offset: 0xc4, Size: 0x3c]
	<uint32,float> Weapon2LastAimSnappingTime;//[Offset: 0x100, Size: 0x3c]
	<uint32,float> Weapon2LastFireSnappingTime;//[Offset: 0x13c, Size: 0x3c]
	<uint32,float> Weapon2LastEdgePushingTime;//[Offset: 0x178, Size: 0x3c]
	void StopWeaponSnappingByType(ShootWeapon* CurrentShootWeapon, enum Type2Stop);// 0x27facd0
	void StopWeaponAimSnapping(ShootWeapon* CurrentShootWeapon);// 0x27fab68
	void StopProjectileAimSnapping();// 0x27fa7e4
	void SetCurrentWeaponSnappingSpeed(float NewSpeed);// 0x27fa76c
	void OnSettingChanged(FString[] ChangedPropertyNames);// 0x27fa5e8
	void AddWeaponTickSnapping(ShootWeapon* CurrentShootWeapon, bool Add);// 0x132e4b8
	void AddWeaponQuickSnapping(ShootWeapon* CurrentShootWeapon, bool IsAiming, bool IsFire);// 0x27faa54
	void AddWeaponFireSnapping(ShootWeapon* CurrentShootWeapon);// 0x27fac58
	void AddWeaponEdgePushing(ShootWeapon* CurrentShootWeapon);// 0x27fa9dc
	void AddWeaponAimSnapping(ShootWeapon* CurrentShootWeapon);// 0x27fabe0
	void AddProjectileAimSnapping(const AimSnappingConfigAsset* AimSnappingConfig, float ProjectileSpeedValue, float GravityAcceleration, out const Vector InLaunchLocation, float TPPPitchOffset, float TPPYawOffset);// 0x27fa7f8

--------------------------------
Class: AimSnappingConfigAsset.DataAsset.Object
	enum SnappingType;//[Offset: 0x20, Size: 0x1]
	float SnappingSpeed;//[Offset: 0x24, Size: 0x4]
	float SnappingTime;//[Offset: 0x28, Size: 0x4]
	float SnappingMaxDistance2Reticle;//[Offset: 0x2c, Size: 0x4]
	float MaxSnappingDistance;//[Offset: 0x30, Size: 0x4]
	FName[] CharacterSnappingBones;//[Offset: 0x34, Size: 0xc]
	CurveFloat* SnappingDistanceFactor;//[Offset: 0x40, Size: 0x4]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0x44, Size: 0x4]
	bool KeepSnappingEvenAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool ConsiderEnemySpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool EnablePitchSnapping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool EnableViewAssistDebug;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ViewAssistInfo
	ShootWeapon* TriggerWeapon;//[Offset: 0x0, Size: 0x4]
	CurveFloat* Speed2SnappingSpeedCurve;//[Offset: 0x28, Size: 0x4]
	CurveFloat* Distance2SpeedFactorCurve;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: PlayerNetStaticComponent.ActorComponent.Object
	bool bNetStaticActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	byte CollectGap;//[Offset: 0xb5, Size: 0x1]
	PlayerNetStats NetStats;//[Offset: 0xd0, Size: 0x6c]
	int MinPing;//[Offset: 0x13c, Size: 0x4]
	int MaxPing;//[Offset: 0x140, Size: 0x4]
	bool SerializeToFile(FString InFilename);// 0x271ff40
	int GetRuntimeFps();// 0x271fe64
	int GetPingAverage();// 0x271fedc
	int GetPing();// 0x271ff04
	void DumpFpsStaticsData();// 0x271fe8c
	void DebugPrintReportData();// 0x271fea0
	void DebugPrint();// 0x271ff2c
	void CountPingAverage();// 0x271fec8
	void CheckSlagDataCount();// 0x271feb4

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 0xc]
	FString LocalAddr;//[Offset: 0xc, Size: 0xc]
	float AvgPing;//[Offset: 0x18, Size: 0x4]
	float MaxPing;//[Offset: 0x1c, Size: 0x4]
	float HighPingPercent;//[Offset: 0x20, Size: 0x4]
	float InBytesPerSecond;//[Offset: 0x58, Size: 0x4]
	float OutBytesPerSecond;//[Offset: 0x5c, Size: 0x4]
	float InPacketLostRate;//[Offset: 0x60, Size: 0x4]
	float OutPacketLostRate;//[Offset: 0x64, Size: 0x4]
	float OutSaturationRate;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	float ServerCheckInterval;//[Offset: 0xa8, Size: 0x4]
	float ServerCheckDelay;//[Offset: 0xac, Size: 0x4]
	float MaxAllowWait;//[Offset: 0xb0, Size: 0x4]
	bool IsClientUseHardwareTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float IosTimeJumpSize;//[Offset: 0xb8, Size: 0x4]
	void RPC_ServerSyncTimeLine(double InSrvSendTime, double InClientRecvTime, double InClientSendTime);// 0x279ded8
	void RPC_ServerReportInfo(int RporetedId);// 0x23f62a4
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x279dff4
	void OnServerAboutToReconnect();// 0x279dec4
	void CheckTimeLine();// 0x279e07c

--------------------------------
Class: MonitorActor.Actor.Object
	bool bControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	ApexCharacter* OverlapCharacter;//[Offset: 0x1d8, Size: 0x4]
	bool bDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	FString BtnText_LocalKey;//[Offset: 0x1e0, Size: 0xc]
	Object* BtnIcon;//[Offset: 0x1ec, Size: 0x4]
	ParticleSystemComponent* StartEffectRootComp;//[Offset: 0x1f0, Size: 0x4]
	ParticleSystemComponent* StopEffectRootComp;//[Offset: 0x1f4, Size: 0x4]
	BoxComponent* MonitorScreenComp;//[Offset: 0x1f8, Size: 0x4]
	WidgetComponent* TipUIComp;//[Offset: 0x1fc, Size: 0x4]
	void OnRep_ControlState();// 0x26b30d8
	void OnClickControlBtn();// 0x2540c04

--------------------------------
Class: MiragePhoneActor.MonitorActor.Actor.Object
	bool bPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	float AudioEffectRange;//[Offset: 0x214, Size: 0x4]
	<FString,AkAudioEvent*> Subtitle_AudioMap;//[Offset: 0x218, Size: 0x3c]
	int EventID;//[Offset: 0x254, Size: 0x4]
	FString SubtitleName;//[Offset: 0x258, Size: 0xc]
	void ServerCall(int Index, ApexPlayerController* Controller);// 0x26afad0

--------------------------------
Class: InGameHandleActionActor.Actor.Object
	CommonPingComp* PingComp;//[Offset: 0x1d4, Size: 0x4]
	InGameHandleAsyncConfig[] AsyncConfigArray;//[Offset: 0x1d8, Size: 0xc]
	FName HandleButtonName;//[Offset: 0x1e4, Size: 0x8]
	<FName,Object*> LoadFinishAssetMap;//[Offset: 0x1ec, Size: 0x3c]
	<FName,class Object> LoadFinishClassMap;//[Offset: 0x228, Size: 0x3c]
	<FName,InGameHandleActionConfig> ActionNameToHandleActionMap;//[Offset: 0x274, Size: 0x3c]
	FName[] ServerActivateActionArray;//[Offset: 0x2b0, Size: 0xc]
	bool bIsEnableActionButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	float ActionRadius;//[Offset: 0x2fc, Size: 0x4]
	bool bEnableForbiddenVoid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool bEnableForbiddenPawnState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	enum[] ForbiddenPawnState;//[Offset: 0x304, Size: 0xc]
	bool bIsOperated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	void UpdateActionButtonState(bool bInIsShow);// 0x26583c0
	bool ServerOperateActionActor(ApexPlayerController* Controller);// 0x26584f0
	bool ServerCanOperateActionActor(ApexPlayerController* Controller);// 0x2658440
	void PostServerOperateActionActor(ApexPlayerController* Controller);// 0x2554138
	void PostClientOperateActionActor(int OperatePlayerKey, bool bIsFPP);// 0x25ab4ac
	void OnRep_ServerActivateActionArray();// 0x2658778
	void OnPostAsyncLoadFinishEditor();// 0x15647d0
	void OnAsyncLoadFinish();// 0x265878c
	void NetMulticast_PostClientOperateActionActor(int OperatePlayerKey);// 0x24b1474
	ApexPlayerController* GetCacheOperateActorController();// 0x26584c8
	void DeactivateActionImmediate(FName InName);// 0x2658578
	void DeactivateAction(FName InName);// 0x2658680
	bool ClientNeedShowActionButton();// 0x2556338
	void ActivateActionImmediate(FName InName);// 0x26585fc
	void ActivateAction(FName InName);// 0x26586fc

--------------------------------
Class: CommonPingComp.ActorComponent.Object
	delegate OnPingDelegate;//[Offset: 0xf8, Size: 0xc]
	int PingType;//[Offset: 0x104, Size: 0x4]
	bool bIsUsePingOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	Vector PingOffset;//[Offset: 0x10c, Size: 0xc]
	bool bPingTypeByBp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bNeedShowOutline_BP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	void ReceiveOnPing();// 0x2ce6f18
	bool IsUseActorLocation();// 0x257db94
	bool IsNeedShowOutline();// 0x257dca0
	int GetPingType();// 0x250c5a0
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x257dbc4
	int BP_GetPingType();// 0x2ce6f18

--------------------------------
Class: InGameHandleAsyncConfig
	FName AssetName;//[Offset: 0x0, Size: 0x8]
	Object* LoadAsset;//[Offset: 0x8, Size: 0x20]
	class Object* LoadClass;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: InGameHandleActionConfig
	InGameHandleActionBase*[] ActionArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: InGameHandleActionBase.Object
	bool bActivateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bActivateOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: SimpleBattleResultData
	byte ExitReason;//[Offset: 0x0, Size: 0x1]
	FString ModeType;//[Offset: 0x4, Size: 0xc]
	enum ResultType;//[Offset: 0x10, Size: 0x1]
	bool IsEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	FString Reason;//[Offset: 0x14, Size: 0xc]
	int TotalPlayerCount;//[Offset: 0x20, Size: 0x4]
	int TotalTeamCount;//[Offset: 0x24, Size: 0x4]
	int TeamID;//[Offset: 0x28, Size: 0x4]
	SimpleBattleResultTeamData TeamData;//[Offset: 0x2c, Size: 0x10]
	RatingScoreResultData RatingData;//[Offset: 0x3c, Size: 0x14]
	WinModeInfo[] WinModeInfos;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: SimpleBattleResultTeamData
	int TeamRank;//[Offset: 0x0, Size: 0x4]
	BattleResultTeammate[] members;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: RatingScoreResultData
	int KillAssistScore;//[Offset: 0x0, Size: 0x4]
	int MatchPlacementScore;//[Offset: 0x4, Size: 0x4]
	int SegmentLevel;//[Offset: 0x8, Size: 0x4]
	int Rating;//[Offset: 0xc, Size: 0x4]
	int DailyWinTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ApgamePlayerStateRollbackComponent.ActorComponent.Object
	void TrySnapshot();// 0x24da3dc
	void TryRollback(int InIndex);// 0x24da244
	void TryPartiallySnapshot(out const ApgameClientPlayerState InClientState, bool bInNeedShiftOrigin);// 0x24da2bc
	void ServerSnapshot(const ApgameClientPlayerState InClientState);// 0x24da094
	void ServerRollback(int InIndex);// 0x24d9ee4
	void ServerPartiallySnapshot(const ApgameClientPlayerState InClientState);// 0x24d9f98
	int GetCondensedSnapshotNum();// 0x24da3f0
	bool GetCondensedSnapshot(out ApgamePlayerStateCondensedSnapshot OutSnapshot, int InIndex);// 0x24da40c
	void ClientSetViewType(enum InViewType);// 0x24da190
	void ClientSendCondensedHistory(const ApgamePlayerStateCondensedSnapshot[] InHistory);// 0x24d9e1c

--------------------------------
Class: ApgameClientPlayerState
	enum ViewType;//[Offset: 0x0, Size: 0x1]
	Vector PlayerLocation;//[Offset: 0x4, Size: 0xc]
	Vector CameraLocation;//[Offset: 0x10, Size: 0xc]
	Rotator CameraRotation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: ApgamePlayerStateCondensedSnapshot
	DateTime Time;//[Offset: 0x0, Size: 0x8]
	Vector PlayerLocation;//[Offset: 0x8, Size: 0xc]
	Vector CameraLocation;//[Offset: 0x14, Size: 0xc]
	Rotator CameraRotation;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: DateTime

--------------------------------
Class: RespawnOperateComponent.ActorComponent.Object
	ApexRespawnBeacon* CapturedBeaconWeakPtr;//[Offset: 0xa8, Size: 0x8]
	Vector2D CurScreenSize;//[Offset: 0xb0, Size: 0x8]
	int8 Cooldown;//[Offset: 0xb8, Size: 0x1]
	class Pawn* AirRespawnCamera;//[Offset: 0xbc, Size: 0x4]
	float OBTime;//[Offset: 0xc0, Size: 0x4]
	float AirRespawnTime;//[Offset: 0xc4, Size: 0x4]
	float DelayRespawnTime;//[Offset: 0xc8, Size: 0x4]
	float ACEDelayRespawnTime;//[Offset: 0xcc, Size: 0x4]
	float RespawnTime;//[Offset: 0xd0, Size: 0x4]
	float TombDis;//[Offset: 0xd4, Size: 0x4]
	void TeamStartAirRespawn(out Vector LocalVector);// 0x273c2f0
	void TeamDelayAirRespawn(float DelayTime, Vector TeamTombLoaction);// 0x273c230
	void StopSweepBeacon();// 0x273c208
	void StartSweepBeacon();// 0x273c21c
	void StartAirRespawn(out Vector LocalVector);// 0x273c080
	void RespawnCharacter();// 0x273c06c
	void OperateBreakCheck();// 0x273c104
	void LeaveBeaconZone(ApexRespawnBeacon* Beacon);// 0x273c118
	float GetRespawnRespawnTime();// 0x273c374
	void EnterOB();// 0x273c058
	void EnterBeaconZone(ApexRespawnBeacon* Beacon);// 0x273c190
	void DelayAirRespawn();// 0x273c044

--------------------------------
Class: InGameGuideComponent.ActorComponent.Object
	<int,InGameGuideItemBase*> GuideItemList;//[Offset: 0xa8, Size: 0x3c]
	bool IsInGameGuideOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	<int,CurrentGuideInfo> CurrentGuideInfoMap;//[Offset: 0xe8, Size: 0x3c]
	InGameGuideReporter* DataReporter;//[Offset: 0x17c, Size: 0x4]
	SoftObjectPath[] ItemsToStream;//[Offset: 0x1bc, Size: 0xc]
	bool StartInGameGuide(const Object* WorldContext, int GuideID);// 0x2654130
	bool StartGuideWithActor(int GuideID, Actor* TargetActor);// 0x2653d88
	bool StartGuide(int GuideID);// 0x2653f60
	void SetInGameGuideOpenSwither();// 0x2653968
	void SetGuideProgress(int GuideID, int Progress, const bool IsLua);// 0x2653a78
	void SetGuideComplete(const int GuideID);// 0x2653988
	void SetCurrentLegendLevel(const int Level);// 0x2653a00
	void RPCServerSyncGuideProgress(int GuideID, int Progress);// 0x2653724
	void RPCServerGuideReport(const int GuideID, const int TriggerNum, const int TriggerState, const int FinishDuration);// 0x26535d4
	void RPCServerExecPointGuide(Vector TargetPos);// 0x265355c
	void RPCClientResetDataWhenPawnChange();// 0xf49d14
	void OnPawnChanged();// 0x26541ec
	void OnGameDataLoaded();// 0x2653548
	bool IsGuideComplete(int GuideID);// 0x2653868
	void GuideCoollingTimerComplete();// 0x2653534
	void GuideContinue(int GuideID);// 0x2653d10
	void GetGuideBaseInfoByGuideID(int GuideID, out InGameGuideBaseInfo BaseInfo);// 0x2653b80
	int GetCurStep(int GuideID);// 0x26538e8
	int GetCurrentMaxLayer(Widget* Widget);// 0x26537e8
	void EndInGameGuide(const Object* WorldContext, int GuideID, bool IsForceComplete, bool bCheckNext);// 0x2653fe0
	void EndGuide(int GuideID, bool IsForceComplete, bool bCheckNext);// 0x2653e4c
	bool CheckCanExec(int GuideID);// 0x2653c90

--------------------------------
Class: InGameGuideItemBase.Object
	InGameGuideBaseInfo BaseInfo;//[Offset: 0x1c, Size: 0x34]
	InGameGuideStepInfo[] StepList;//[Offset: 0x50, Size: 0xc]
	int CurrentStep;//[Offset: 0x5c, Size: 0x4]
	InGameGuideStepInfo CurStepInfo;//[Offset: 0x60, Size: 0x98]
	void StartGuide();// 0x2655ab0
	void GuideNextStep(bool IsTimeout);// 0x2655a30
	void EndGuide(bool bForceComplete);// 0x26559b0

--------------------------------
Class: InGameGuideBaseInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	int GuidePriority;//[Offset: 0x4, Size: 0x4]
	int SameGuideArgs;//[Offset: 0x8, Size: 0x4]
	int GuideWeight;//[Offset: 0xc, Size: 0x4]
	bool NeedReback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool IsForSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	int MaxNum;//[Offset: 0x14, Size: 0x4]
	int MaxGameNum;//[Offset: 0x18, Size: 0x4]
	int EachGameCountLimit;//[Offset: 0x1c, Size: 0x4]
	int PlayerLevelLimit;//[Offset: 0x20, Size: 0x4]
	int GuideStartGameNum;//[Offset: 0x24, Size: 0x4]
	int GuideEndGameNum;//[Offset: 0x28, Size: 0x4]
	bool bIsClearWhenCharacterEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	float GuideCD;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: InGameGuideStepInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	bool IsComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FName BlueprintName;//[Offset: 0x8, Size: 0x8]
	FName NodeName;//[Offset: 0x10, Size: 0x8]
	FName HighLightNodeName;//[Offset: 0x18, Size: 0x8]
	bool IsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool IsAllScreenButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool IsHighLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool IsForceGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	float Duration;//[Offset: 0x24, Size: 0x4]
	enum GuideType;//[Offset: 0x28, Size: 0x1]
	FText GraphicGuideTitle;//[Offset: 0x2c, Size: 0xc]
	GraphicGuideInfo[] GraphicGuideInfos;//[Offset: 0x38, Size: 0xc]
	InGameGuideConditionBase*[] ConditionList;//[Offset: 0x44, Size: 0xc]
	InGameGuideConditionBase*[] EndConditionList;//[Offset: 0x50, Size: 0xc]
	bool IsAutoEnterNextStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float ResetDurationTime;//[Offset: 0x60, Size: 0x4]
	FString LuaPath;//[Offset: 0x64, Size: 0xc]
	FString[] LuaArgs;//[Offset: 0x70, Size: 0xc]
	bool IsKeyStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	bool IsContinueCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]
	FText ShowTips;//[Offset: 0x80, Size: 0xc]
	enum ShowTipsDir;//[Offset: 0x8c, Size: 0x1]
	Vector2D ShowTipsOffset;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: GraphicGuideInfo
	SlateBrush ImageIcon;//[Offset: 0x0, Size: 0x68]
	FText GuideTitle;//[Offset: 0x68, Size: 0xc]
	FText GuideDesc;//[Offset: 0x74, Size: 0xc]

--------------------------------
Class: InGameGuideConditionBase.Object
	void OnStepStartBP();// 0x2ce6f18
	void OnStepEndBP();// 0x2ce6f18
	void EnableBP();// 0x2ce6f18
	void DisabledBP();// 0x2ce6f18
	bool CheckConditionBP();// 0xfe933c

--------------------------------
Class: CurrentGuideInfo

--------------------------------
Class: InGameGuideReporter.Object

--------------------------------
Class: ApgameDeathRecallComponent.ActorComponent.Object
	float MaxTimeBeforeDeath;//[Offset: 0xb0, Size: 0x4]
	float MaxMergeTime;//[Offset: 0xb4, Size: 0x4]
	int MaxNum;//[Offset: 0xb8, Size: 0x4]
	delegate EventOnReceiveClientRecordHistory;//[Offset: 0xbc, Size: 0xc]
	void ServerFetchRecordHistory();// 0xf49d14
	void OnReceiveClientRecordHistoryEvent__DelegateSignature(ApgameDeathRecallComponent* InComp);// 0x2ce6f18
	void GetDeathRecordHistory(out ApgameDeathRecallHistory OutRecordHistory);// 0x24cfb50
	ApgameDeathRecallComponent* FindDeathRecallComponent(PlayerController* InController);// 0x24cfad8
	bool FetchRecordHistory(bool bInForce);// 0x24cfbec
	void CopyRecordHistory(out ApgameDeathRecallHistory OutHistory, out const ApgameDeathRecallHistory InHistory);// 0x24cf9d8
	void CopyBannerData(out BannerData OutData, out const BannerData InData);// 0x24cf864
	void ClientSendRecordHistory(const ApgameDeathRecallHistory InRecordHistory, bool bInNonFightingStage);// 0x24cf780
	void BeforeGameEnd();// 0x24cf76c

--------------------------------
Class: ApgameDeathRecallHistory
	BannerData[] BannerList;//[Offset: 0x0, Size: 0xc]
	ApgameDeathRecallRecord[] RecordList;//[Offset: 0xc, Size: 0xc]
	int OwnerPlayerKey;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ApgameDeathRecallRecord
	bool bAttacked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOtherIsAI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bKilledOrKnockedDown;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bFatalDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	enum DamageSourceType;//[Offset: 0x1, Size: 0x1]
	int OtherPlayerKey;//[Offset: 0x4, Size: 0x4]
	uint64 OtherPlayerUID;//[Offset: 0x8, Size: 0x8]
	FString OtherPlayerName;//[Offset: 0x10, Size: 0xc]
	int ItemID;//[Offset: 0x1c, Size: 0x4]
	int SkillID;//[Offset: 0x20, Size: 0x4]
	float DamageValue;//[Offset: 0x24, Size: 0x4]
	bool[] DamageFlows;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: InGameChatContainer.ActorComponent.Object
	int MaxChatNum;//[Offset: 0xa8, Size: 0x4]
	int MaxQuickChatNum;//[Offset: 0xac, Size: 0x4]
	float MaxQuickChatShowTime;//[Offset: 0xb0, Size: 0x4]
	delegate ChatMsgNewCallback;//[Offset: 0xb4, Size: 0xc]
	InGameChatInfo[] AllChatInfoList;//[Offset: 0xc0, Size: 0xc]
	InGameChatInfo[] SelectLegendChatList;//[Offset: 0xcc, Size: 0xc]
	void SetContentFilterComplete(const int Index, FString Content, const int FromType);// 0x2650144
	void SetChatMsgIsExpired(int Index);// 0x265025c
	void RPCServerSendChatMsg(InGameChatInfo Info);// 0x264fbb0
	void RPCServerReportUnfoldAppointData(const int Cnt);// 0x23f62a4
	void RPCClientReceiveChatMsg_Self(FString ContentKey, FString SelfName);// 0x264f834
	void RPCClientReceiveChatMsg(InGameChatInfo Info);// 0x264fa80
	void RPCClientNotifyBanTips(int ResonID);// 0x264fa00
	void RPCClientClearMsgNotify(uint64 UID, uint64 ClearTime);// 0x264f928
	InGameChatInfo[] GetQuickMsgList();// 0x2650030
	void ClientReportUnfoldAppointData();// 0x265001c
	void Client_SendMsgToChatForPing(int PingIndex, int PingType, int DingType, int ItemID, int64 ItemUUID, int ItemDeriveID, int ReservePlayerKey);// 0x264fce0
	void Client_SendMsgToChat(FString Content, enum SendType, enum FromType);// 0x264ff04
	void AddToChatList(out const InGameChatInfo Info);// 0x26502d4

--------------------------------
Class: InGameChatInfo
	int Index;//[Offset: 0x0, Size: 0x4]
	uint64 UID;//[Offset: 0x8, Size: 0x8]
	uint32 PostPlayerKey;//[Offset: 0x10, Size: 0x4]
	FString PostPlayerName;//[Offset: 0x14, Size: 0xc]
	FString ContentStr;//[Offset: 0x20, Size: 0xc]
	FString ContentStr2;//[Offset: 0x2c, Size: 0xc]
	int TeamIdx;//[Offset: 0x38, Size: 0x4]
	int TeamID;//[Offset: 0x3c, Size: 0x4]
	float CreateTime;//[Offset: 0x40, Size: 0x4]
	FString SelfName;//[Offset: 0x44, Size: 0xc]
	int SendType;//[Offset: 0x50, Size: 0x4]
	int FromType;//[Offset: 0x54, Size: 0x4]
	FString GenerateStr;//[Offset: 0x58, Size: 0xc]
	InGameChatPingInfo PingInfo;//[Offset: 0x68, Size: 0x38]

--------------------------------
Class: InGameChatPingInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	uint64 ItemUUID;//[Offset: 0x8, Size: 0x8]
	Vector SourcePosition;//[Offset: 0x10, Size: 0xc]
	int PingType;//[Offset: 0x1c, Size: 0x4]
	int DingType;//[Offset: 0x20, Size: 0x4]
	int PingIndex;//[Offset: 0x24, Size: 0x4]
	int ReservePlayerKey;//[Offset: 0x28, Size: 0x4]
	bool IsExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int ItemDeriveID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: CharacterNaviGuideComponent.ActorComponent.Object
	float SwitchPointAngle;//[Offset: 0xb4, Size: 0x4]
	float NaviLimitDist;//[Offset: 0xbc, Size: 0x4]
	float NaviInterval;//[Offset: 0xc0, Size: 0x4]
	float EndDistance;//[Offset: 0xc4, Size: 0x4]
	Vector NaviLocation;//[Offset: 0xcc, Size: 0xc]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0xd8, Size: 0x4]
	Vector Extent;//[Offset: 0xe8, Size: 0xc]
	int NumSegment;//[Offset: 0x120, Size: 0x4]
	float PerDistance;//[Offset: 0x128, Size: 0x4]
	int NRetryFindNum;//[Offset: 0x12c, Size: 0x4]
	float DealyHideTime;//[Offset: 0x130, Size: 0x4]
	float RefreshSplineDistance;//[Offset: 0x140, Size: 0x4]
	bool OpenMorePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool OpenReusePath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	StaticMesh* SoftStaticMesh;//[Offset: 0x148, Size: 0x20]
	MaterialInterface* SoftSplineStaticMeshMat;//[Offset: 0x168, Size: 0x20]
	StaticMesh* SplineStaticMesh;//[Offset: 0x188, Size: 0x4]
	MaterialInterface* SplineMaterialInterface;//[Offset: 0x18c, Size: 0x4]
	byte ForwardAxis;//[Offset: 0x190, Size: 0x1]
	float MeshPerLen;//[Offset: 0x194, Size: 0x4]
	float PerSplineSegment;//[Offset: 0x198, Size: 0x4]
	int MaxDotNum;//[Offset: 0x19c, Size: 0x4]
	float MeshUp;//[Offset: 0x1a4, Size: 0x4]
	Vector2D LineScale;//[Offset: 0x1a8, Size: 0x8]
	bool bDebugDrawPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	float DebugDrawTime;//[Offset: 0x1b4, Size: 0x4]
	bool bDebugShowSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	float ScaleX;//[Offset: 0x1c8, Size: 0x4]
	void SetInGameGuideLocation(Vector TargetLocation);// 0x256a290
	void ReqNaviGuidePathPoints(int MoveIdx);// 0xf49d30
	void OnGetNaviGuidePath(const ServerPoint[] OutPoints);// 0x256a1f8
	void HideNaviGuide();// 0x2405154

--------------------------------
Class: ServerPoint
	bool bIsRayCastFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ChapterType_TrackLink
	FString TrackName;//[Offset: 0x0, Size: 0xc]
	ChapterParams Params;//[Offset: 0xc, Size: 0xc]
	bool bOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bLuaTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: InGameRecoverItemGuidInfo
	int GuideID;//[Offset: 0x0, Size: 0x4]
	enum eInGameRecoverItemGuidType;//[Offset: 0x4, Size: 0x1]
	float MinPercentValue;//[Offset: 0x8, Size: 0x4]
	float MaxPercentValue;//[Offset: 0xc, Size: 0x4]
	float DurationTime;//[Offset: 0x10, Size: 0x4]
	int ItemID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InGameRecoverPropGuid.ActorComponent.Object

--------------------------------
Class: CrossHairDampingComponent.ActorComponent.Object
	CrossHairDampingConfig* CrossHairDampingConfig;//[Offset: 0xa8, Size: 0x4]
	PlayerController* PlayerController;//[Offset: 0xac, Size: 0x4]
	ApexCharacter* PlayerPawn;//[Offset: 0xb0, Size: 0x4]
	HitCrossHairConfig_Common* HitCrossHairConfig_Runtime;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: CrossHairDampingConfig.DataAsset.Object
	FName[] Bones;//[Offset: 0x20, Size: 0xc]
	float NoShootRate;//[Offset: 0x2c, Size: 0x4]
	float ShootRate;//[Offset: 0x30, Size: 0x4]
	Vector2D EffectDistanceRange;//[Offset: 0x34, Size: 0x8]
	IntPoint MaxDampingSize;//[Offset: 0x3c, Size: 0x8]
	IntPoint MinDampingSize;//[Offset: 0x44, Size: 0x8]
	HitCrossHairConfig_Common* HitCrossHairConfig;//[Offset: 0x4c, Size: 0x4]
	bool bShowInvincibleCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: HitCrossHairConfig_Common.DataAsset.Object
	WeaponCrossHairHitPerformData HitCrossHairData;//[Offset: 0x20, Size: 0xa0]
	InvincibleHitPerformData InvincibleHitData;//[Offset: 0xc0, Size: 0x60]

--------------------------------
Class: WeaponCrossHairHitPerformData.WeaponCrossHairPerformData
	float DefaultShowTime;//[Offset: 0x58, Size: 0x4]
	float QuickShootInterval;//[Offset: 0x5c, Size: 0x4]
	float QuickShowTime;//[Offset: 0x60, Size: 0x4]
	float DamageStartScale;//[Offset: 0x64, Size: 0x4]
	float DamageEndScale;//[Offset: 0x68, Size: 0x4]
	float DamageMiddleScale;//[Offset: 0x6c, Size: 0x4]
	LinearColor HeadShootColor;//[Offset: 0x70, Size: 0x10]
	LinearColor KillColor;//[Offset: 0x80, Size: 0x10]
	float ShowHitCrosshairLeftTime;//[Offset: 0x90, Size: 0x4]
	float LastHitLeftTime;//[Offset: 0x94, Size: 0x4]
	float CurDamageScale;//[Offset: 0x98, Size: 0x4]
	bool bQuickShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	bool bHeadShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1]
	bool bFatalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 0x1]

--------------------------------
Class: InvincibleHitPerformData.WeaponCrossHairPerformData
	float ShowTime;//[Offset: 0x58, Size: 0x4]
	float LastHitLeftTime;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: DamageTipComponent.ActorComponent.Object
	float HitTips2DLifeTime;//[Offset: 0xb4, Size: 0x4]
	class HitTip3D* HitTip3DClass;//[Offset: 0xb8, Size: 0x4]
	<HitTip3D*> Cache3DHitTips;//[Offset: 0xbc, Size: 0x3c]
	void IndicatorShowGotHit(out const Vector causerLocation, int DamageType, bool bIsHeadShot, bool bIsFatalHealthCost, bool bIsHitShield, bool bIsShieldBroken, bool HasEquippedShield, int PenetrateShieldLevel, float ArrowTipsScale, bool ShowHitEffectUI);// 0x259e758
	void Indicator3DShowGotHit(out const Vector causerLocation, float ArrowTipsScale);// 0x259e68c

--------------------------------
Class: HitTip3D.Actor.Object
	float CrossHairSafePercent;//[Offset: 0x1d4, Size: 0x4]
	float ScreenSafePercent;//[Offset: 0x1d8, Size: 0x4]
	CurveFloat* ScaleCurve;//[Offset: 0x1dc, Size: 0x4]
	CurveFloat* FOVScaleCurve;//[Offset: 0x1e0, Size: 0x4]
	CurveFloat* PitchCurve;//[Offset: 0x1e4, Size: 0x4]
	CurveFloat* ZCurve;//[Offset: 0x1e8, Size: 0x4]
	float TipDistance;//[Offset: 0x1ec, Size: 0x4]
	float ActorLifeTime;//[Offset: 0x1f0, Size: 0x4]
	PlayerCameraManager* CamManager;//[Offset: 0x1fc, Size: 0x4]
	StaticMeshComponent* TipMesh;//[Offset: 0x200, Size: 0x4]
	Vector AttackerLocation;//[Offset: 0x204, Size: 0xc]
	Rotator GetFinalRotation(out const Vector LocalTipDir, out const Vector2D ScreenPercent);// 0x26463b8
	Vector GetFinalRelaLoc(out const Vector DeproDir);// 0x2646314
	PlayerCameraManager* GetCamera();// 0x26464b0
	void FadeOut();// 0x24a0b3c

--------------------------------
Class: CharacterAvatar_WearInfo
	CharacterAvatar_EquipSkinInfo[] EquipedSkinList;//[Offset: 0x0, Size: 0xc]
	CharacterAvatar_PendantInfo[] EquipedPendantList;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: CharacterAvatar_EquipSkinInfo
	int ReplacedItemID;//[Offset: 0x0, Size: 0x4]
	CharacterAvatar_WearItemMetaInfo SkinMetaInfo;//[Offset: 0x4, Size: 0x14]

--------------------------------
Class: CharacterAvatar_WearItemMetaInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemType;//[Offset: 0x4, Size: 0x4]
	int ItemSubType;//[Offset: 0x8, Size: 0x4]
	int ItemLevel;//[Offset: 0xc, Size: 0x4]
	bool ValidInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CharacterAvatar_PendantInfo
	int PendantItemID;//[Offset: 0x0, Size: 0x4]
	CharacterAvatar_WearItemMetaInfo AttachedItemMetaInfo;//[Offset: 0x4, Size: 0x14]

--------------------------------
Class: HitEffectComponent.ActorComponent.Object
	DataTable* ConfigTable;//[Offset: 0xa8, Size: 0x4]
	FName ConfigTablePath;//[Offset: 0xac, Size: 0x8]
	FName ConfigRow;//[Offset: 0xb4, Size: 0x8]
	bool bDebugHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	MaterialParameterCollection* BloodParameterCollection;//[Offset: 0xc8, Size: 0x4]
	FName BloodColorRowName;//[Offset: 0xcc, Size: 0x8]
	CurveFloat* DistanceFOVFixCurve;//[Offset: 0xd4, Size: 0x4]
	<enum,LinearColor> HurtShieldColor;//[Offset: 0xd8, Size: 0x3c]
	LinearColor BreakShieldColor;//[Offset: 0x114, Size: 0x10]
	<byte,FName> DamageType2Tag;//[Offset: 0x124, Size: 0x3c]
	int AutonomousHitEffectCacheLimit;//[Offset: 0x160, Size: 0x4]
	int SimulatedHitEffectCacheLimit;//[Offset: 0x164, Size: 0x4]
	int BulletHitAudioDistance;//[Offset: 0x168, Size: 0x4]
	int BulletFlyAudioDistance;//[Offset: 0x16c, Size: 0x4]
	HitEffectDataAsset* DefaultHitEffect;//[Offset: 0x170, Size: 0x4]
	<FName,HitEffectDataAsset*> ExtraEffect;//[Offset: 0x174, Size: 0x3c]
	Rotator FxRotation;//[Offset: 0x1b0, Size: 0xc]
	float FxDeviation;//[Offset: 0x1bc, Size: 0x4]
	float DecalReverseDistance;//[Offset: 0x1c0, Size: 0x4]
	float EffectMaxDistance;//[Offset: 0x1c4, Size: 0x4]
	HitEffectCachedData[] AutonomousHitEffectList;//[Offset: 0x1c8, Size: 0xc]
	HitEffectCachedData[] SimulatedHitEffectList;//[Offset: 0x1d4, Size: 0xc]
	void SetBloodColorStyle(FName NewRowName);// 0x2645c7c
	void OnTableReady();// 0x2645d70
	bool NeedPlayLensAudio(out const HitEffectInstanceData InstanceData);// 0x2645af0
	void HandlePlayerStopFire(Weapon* Weapon);// 0x2645cf8

--------------------------------
Class: HitEffectCachedData
	DecalComponent* HitDecalComp;//[Offset: 0x0, Size: 0x4]
	ParticleSystemComponent* HitParticleComp;//[Offset: 0x4, Size: 0x4]
	AkComponent* AKComp;//[Offset: 0x8, Size: 0x4]
	AkComponent* BulletFlyAkComp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1ec, Size: 0x4]
	int SortOrder;//[Offset: 0x1f0, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x1f4, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x1f8, Size: 0x4]
	float FadeDuration;//[Offset: 0x1fc, Size: 0x4]
	float FadeInDuration;//[Offset: 0x200, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x204, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	Vector DecalSize;//[Offset: 0x20c, Size: 0xc]
	void SetSortOrder(int Value);// 0x468b65c
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x468b6d4
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x468b808
	void SetFadeIn(float StartDelay, float Duaration);// 0x468b74c
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x468b5e4
	float GetFadeStartDelay();// 0x468b938
	float GetFadeInStartDelay();// 0x3185294
	float GetFadeInDuration();// 0x468b910
	float GetFadeDuration();// 0x245b75c
	MaterialInterface* GetDecalMaterial();// 0x468b5bc
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x468b58c

--------------------------------
Class: AkSoundBankMgr.ActorComponent.Object
	bool IsLobbyController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	FName SoundBankConfigRowName;//[Offset: 0xac, Size: 0x8]
	FName DefaultLobbyRowName;//[Offset: 0xb4, Size: 0x8]
	FName DefaultBattleRowName;//[Offset: 0xbc, Size: 0x8]
	SoundBankDataAsset* BankData;//[Offset: 0xc4, Size: 0x4]
	<AkAudioBank*> RequiredCharacterBanks;//[Offset: 0x10c, Size: 0x3c]
	<AkAudioBank*> Required1PCharacterBanks;//[Offset: 0x148, Size: 0x3c]
	<AkAudioBank*> Required3PCharacterBanks;//[Offset: 0x184, Size: 0x3c]
	<AkAudioBank*> RequiredItemBanks;//[Offset: 0x1c0, Size: 0x3c]
	<AkAudioBank*> Required1PItemBanks;//[Offset: 0x1fc, Size: 0x3c]
	<AkAudioBank*> Required3PItemBanks;//[Offset: 0x238, Size: 0x3c]

--------------------------------
Class: SoundBankDataAsset.DataAsset.Object
	BankArray BanksToPreLoad;//[Offset: 0x20, Size: 0xc]
	BankArray BanksToDestroyUnload;//[Offset: 0x2c, Size: 0xc]
	<class Actor,float> Class2Distance;//[Offset: 0x38, Size: 0x3c]
	<int,BankArray> DefineIdAndBankNames;//[Offset: 0x74, Size: 0x3c]
	<int,BankArray> DefineIdAndBankNames1P;//[Offset: 0xb0, Size: 0x3c]
	<int,BankArray> DefineIdAndBankNames3P;//[Offset: 0xec, Size: 0x3c]
	float ItemRefreshInterval;//[Offset: 0x128, Size: 0x4]
	<int,BankArray> LegendIdAndBankNames;//[Offset: 0x12c, Size: 0x3c]
	<int,BankArray> LegendIdAndBankNames1P;//[Offset: 0x168, Size: 0x3c]
	<int,BankArray> LegendIdAndBankNames3P;//[Offset: 0x1a4, Size: 0x3c]
	<int,BankArray> HeirloomIdAndBankNames;//[Offset: 0x1e0, Size: 0x3c]
	<int,BankArray> HeirloomIdAndBankNames1P;//[Offset: 0x21c, Size: 0x3c]
	<int,BankArray> HeirloomIdAndBankNames3P;//[Offset: 0x258, Size: 0x3c]
	float CharacterRefreshInterval;//[Offset: 0x294, Size: 0x4]

--------------------------------
Class: BankArray
	AkAudioBank*[] Banks;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: PlayerEventFlowManager.EventFlowManager.ActorComponent.Object
	class UserWidget* EventFlowDebugPanelType;//[Offset: 0x150, Size: 0x4]
	UserWidget* EventFlowDebugPanel;//[Offset: 0x154, Size: 0x4]

--------------------------------
Class: ControllerCheatHelper.ActorComponent.Object
	class Actor* FreeCameraClass;//[Offset: 0xa8, Size: 0x4]
	FreeCameActor* CurFreeCam;//[Offset: 0xac, Size: 0x4]
	ApexCharacter* CurControlledCharacter;//[Offset: 0xb8, Size: 0x4]
	Vector PingPointOffset;//[Offset: 0xbc, Size: 0xc]
	Vector2D MapZRange;//[Offset: 0xc8, Size: 0x8]
	AnimationAsset*[] AllAnimArray;//[Offset: 0xd0, Size: 0xc]
	MaterialInterface* NoDither;//[Offset: 0xe4, Size: 0x4]
	MaterialInterface* DitherWithMask;//[Offset: 0xe8, Size: 0x4]
	MaterialInterface* DitherWithoutMask;//[Offset: 0xec, Size: 0x4]
	Texture* DitherMaskApplyTexture;//[Offset: 0xf0, Size: 0x4]
	void VictoryRevive();// 0x2587640
	void UseRespawnBeaconAndPos(int Index, int RespawnPos);// 0x2587718
	void UseRespawnBeacon(int Index);// 0x25877d4
	void UsePropsWeapon(int ItemID);// 0x25873dc
	void UnHiddenCharacter();// 0x2588dcc
	void ToggleShowAILoc();// 0x258525c
	void ToggleMirageTutorial();// 0xf49d14
	void ToggleDebugPoint();// 0x23ec258
	void TestUnreliableServer();// 0x2586860
	void TestUnreliableMulticast();// 0x2540c04
	void TestUnreliableClient();// 0x2586898
	void TestReliableServer();// 0x258687c
	void TestReliableMulticast();// 0x24b8cd4
	void TestReliableClient();// 0x25868b4
	void TestOnelink(int LinkID);// 0x2583e1c
	void TestNavlink(int NavlinkType, int TestAINum);// 0x2584030
	void TestNaviGuide(int IsShow, int X, int Y, int Z);// 0x25839d8
	void TestLog();// 0x2586568
	void TestLinkLoc(FString Str);// 0x2583c74
	void TestFPPAISkill(int LegendId, int SkillType, float Dis);// 0x25844bc
	void TestCloseConnection(int Reason, FString ErrorMessage);// 0x2585ff8
	void TestAISkill(int LegendId, int SkillType, float Dis, int Num, int SpaceBetween);// 0x25845bc
	void TestAIRumble(int TeamNum, FString HeroLists);// 0x25840ec
	void TestAIFight(int LegendId, int Num, int ModeType, Vector Loc, int TeamID);// 0x2583e94
	void TeleportAITo(int AIIndex, Vector Loc);// 0x2584c38
	void SwitchCharacterOBViewMode(bool Auto, bool ToFPP);// 0x258657c
	void StopProfiler();// 0x2583498
	void STNS();// 0x2588ad4
	void StartFlight();// 0x2588538
	void SpawnTombBox();// 0x2587ad4
	void SpawnDeliverAIImpl();// 0x24052d8
	void SpawnDeliverAI();// 0x2583724
	void SpawnDeathBox(float LocX, float LocY, float LocZ);// 0x2587b60
	void SpawnAIToPingPoint(int AINum, int AIType, int AITeam, int AICamp);// 0x2584d7c
	void SpawnAICharacters(int AINum, int AIType, int AITeam, int AICamp, Vector Location, int LegendId, int AILevel);// 0x2585cc4
	void SleepAICharacters(float Range, int Switch);// 0x2585be4
	void ShowLongSmokeID();// 0xfd338c
	void ShowKDER();// 0x258367c
	void ShowAISpawn();// 0x23ec274
	void ShowAIMove(int Index);// 0x25851dc
	void ShowAILoc(int AIType, int Index, Vector Loc, bool IsFreeze);// 0x2584748
	void ShowAIIndex();// 0x2585580
	void SetVelocityOffset(float Speed);// 0x23f62a4
	void SetUploadRotation(bool NewEnable);// 0x2586b30
	void SetTPPShoulderAimingOffset(float NewX, float NewY, float NewZ);// 0x25889d4
	void SetTouchIgnoreNum(int NewNum);// 0x12b5f38
	void SetPlayerRebasePos(FString VecStr);// 0x2587f80
	void SetPlayerRealPos(FString VecStr);// 0x2587e9c
	void SetPlayerPosByTag(FName Tag);// 0x2587de4
	void SetPlayerPosByRandomLootDrones();// 0x2587e74
	void SetPlayerPosByRandomCreeps();// 0x2587e60
	void SetPlayerPosByPingPoint();// 0x2587e88
	void SetPlayerPosByDrawInfo(FString numStr);// 0x2587d00
	void SetPlayerPos2D(FString Vec2DStr);// 0x2588148
	void SetPlayerPos(FString VecStr);// 0x2588064
	void SetPlaneFlowData(float PlaneSpeed, float PlaneHeight, float CanJumpFromPlaneCountDown);// 0x2588310
	void SetParachuteTraceLineMaxCacheNum(int Num);// 0x258822c
	void SetLongTimeNoReceiveThreshold(float Threshold);// 0x2585f80
	void SetDebugAIState(int Type, int Can);// 0x2584218
	void SetDebugAINum(int AINum);// 0x25842dc
	void SetCurrentWeaponSnappingSpeed(out const float NewSpeed);// 0x2586748
	void SetControlledCharacter(int Index);// 0x2588cd0
	void SetBloodEffectStyle(FName NewRow);// 0x258664c
	void SetBinActivitySpawnItem(int ItemID);// 0x252dbd4
	void SetBinActivityItemRepeatCount(int count);// 0x257ccc8
	void SetAllAIHp(int HP);// 0xf52f6c
	void SetAIState(int Index, int State);// 0x2584f4c
	void SetAIReplicate(int Index, int Flag);// 0x25837b0
	void SetAILevelImpl(int Level);// 0x25836a4
	void SetAILevel(int Level);// 0x2583738
	void SetAIHp(int Index, int HP);// 0x2585118
	void SetAICanSkill(int Can);// 0x25843cc
	void SetAICanMove(int Can);// 0x2584354
	void SetAICanAttack(int Can);// 0x2584444
	void ServerVictoryRevive();// 0x2436300
	void ServerUseRespawnBeaconAndPos(int Index, int RespawnPos);// 0x2587654
	void ServerUseRespawnBeacon(int Index);// 0xf42a8c
	void ServerStartFlight();// 0x258851c
	void ServerSpawnTombBox();// 0x15687c0
	void ServerSpawnDeathBox(Vector Loc);// 0x2587ae8
	void ServerSetPlayerRot(Rotator Rot);// 0x25879d0
	void ServerSetPlayerPos(Vector Pos3D);// 0x2587a48
	void ServerSelectToNextState();// 0x2467aac
	void ServerRespawnInAir();// 0x2587610
	void ServerRemoveBuff(int BuffID);// 0x2554138
	void ServerPickBanner();// 0x25882cc
	void ServerNavMeshPoint(Vector Loc);// 0x2587c74
	void ServerMaxKillZ();// 0x244d62c
	void ServerLoadoutWeapon(int WeaponID, int AttchmentId);// 0x2587454
	void ServerGotoDying();// 0xf4a48c
	void ServerFirePropsWeapon();// 0x1565a60
	void ServerFallDeathBox();// 0xf4b0f4
	void ServerEquipPropsWeapon();// 0x2436064
	void ServerEndCircle();// 0x258857c
	void ServerEnableCirclePoison(bool Enable);// 0x2588840
	void ServerCMD(FString Cmd);// 0x258630c
	void ServerCloseForbiddenZone();// 0x258854c
	void ServerClearAllBuff();// 0x24a0b3c
	void ServerChangeState(FName NewState);// 0x2588d48
	void ServerBeginCircle(float CircleTimeScale);// 0x25885ac
	void ServerAddBuff(int BuffID);// 0x2587154
	void RpcServer_EncomyAddCurrency(int Num);// 0xf49d30
	void RPCFlood(int FloodNum, bool IsReliable);// 0x2587068
	void RPC_ClientCMD(FString Cmd);// 0x258639c
	void RespawnInAir();// 0x258762c
	void ResetAISkill(int Index);// 0x2584ecc
	void ReqDSChangedListenPort(int NewPort);// 0x2586f2c
	void RemoveParticleEffect(int InstancedID);// 0x258784c
	void RemoveEffectView(int InstancedID);// 0x25872ec
	void RemoveBuff(int BuffID);// 0x25871e8
	void RemoveAILoc(int AIIndex);// 0x2514538
	void RecreateSocket();// 0x2587140
	void PutNavMeshObstacle(Vector Pos);// 0x2585948
	void PurgeAICharacters(float Range);// 0x25626d4
	void PullAIHere(float Range);// 0x25087f4
	void PrintHidden();// 0x2586bb0
	void PrintDither();// 0x2586124
	void PlayerLookAtPingPoint();// 0x25879bc
	void PickMeAsDeliverTarget();// 0x25858f4
	void PickBanner();// 0x25882e8
	void OBSomeone(bool bRobot, bool Enter);// 0x2586228
	void NavMeshPoint();// 0x2587cec
	void MulticastFlood(int FloodNum, bool IsReliable);// 0x2586fa4
	void MaxKillZ();// 0x2587ac0
	void LogAimingInfo(bool NewEnable);// 0x2414b2c
	void LoadoutWeapon(int WeaponID, int AttchmentId);// 0x2587518
	void LoadAllAnim();// 0x25875fc
	void LeaveFreeCamera();// 0x2588df4
	void JumpPlane();// 0x258862c
	void InitEnv(int AINum, int LegendId);// 0x2583584
	void HiddenCharacter();// 0x2588de0
	void GotoDying();// 0x25882fc
	void GMTO(float Time);// 0x2588948
	void GMTimeout(float Time);// 0x24909a4
	void GMNS();// 0x2588cbc
	void GMNextStage();// 0x249373c
	void GMNextChapter();// 0x2588ca0
	void GMNextBout();// 0x2588c70
	void GMGoToFightingStage();// 0x2588c40
	void GMFS();// 0x25889c0
	void GetCloseToAI(float Range);// 0x2585b64
	void FreezeAI(int Index);// 0x25299b0
	void ForceSwitchParachuteCMDer(int TeamID, int NextCMDerIndex);// 0x2502a34
	void FirePropsWeapon();// 0x25882a4
	void FallDeathBox();// 0x2587c60
	void EquipPropsWeapon();// 0x25882b8
	void EnterFreeCamera();// 0x2588e08
	void EndCircle();// 0x2588598
	void EncomyAddCurrency(int Num);// 0x2583420
	void EnableVisualSoundWidget(bool NewEnable);// 0x2586ab0
	void EnableFixedPlaneRouteByPoint(FString Target);// 0x2588424
	void EnableFixedPlaneRoute();// 0x2588508
	void EnableDither(bool NewEnable, bool EnableMask);// 0x2586cbc
	void EnableCirclePoison(bool Enable);// 0x25888c8
	void EnableAutoParachute2PingPoint(bool Enable);// 0x258793c
	void EnableAutoFixReticle(bool NewEnbale);// 0x25866c8
	void DumpNaviPath(int CmdId);// 0x2583960
	void DumpAnimRef();// 0x25875d4
	void DumpAnimation();// 0x25875e8
	void DSChangedListenPort(int NewPort);// 0x2586eb4
	void DragATeamAIImpl();// 0xf4a07c
	void DragATeamAI();// 0x2583690
	void DragAINum(int Num);// 0x25853bc
	void DragAIHere(int Index);// 0x2585500
	void DisableFixedPlaneRoute();// 0x2588410
	void DeliverMeBot();// 0x2585910
	void DelayCallTestUnreliableMulticast(float Delay);// 0x25869c0
	void DelayCallTestUnreliableClient(float Delay);// 0x25868d0
	void DelayCallTestReliableMulticast(float Delay);// 0x2586a38
	void DelayCallTestReliableClient(float Delay);// 0x2586948
	void DebugShadowMirage();// 0xfd338c
	void DebugNavMeshServer(int Function, int Param);// 0x2585830
	void DebugNavMeshClient(int Function, int Param);// 0x25856ec
	void DebugLootPoint();// 0x2585eec
	void DebugCmd_HandleGrapplingHookState(int State);// 0x12b5f38
	void DebugAISkill(int Index);// 0x2584cfc
	void DebugAIShoot(int Param1, int Param2, int Param3, int Param4);// 0x258559c
	void DebugAIReplicate(int Index, int Flag);// 0x25838a4
	void DebugAILoot(int Index);// 0x258533c
	void DebugAIHost(int Function, int Param1);// 0x2585278
	void DebugAICell(int Type);// 0x25857b0
	void CSRT(float RemainingTime);// 0x2588ae8
	void CResume();// 0x2588be0
	void CPause();// 0x2588c10
	void CloseForbiddenZone();// 0x2588568
	void CloseConnectionManually();// 0x258712c
	void ClientShowClientLoginIndex();// 0x2586138
	void ClientFindPathResult(const Vector[] PathPoints);// 0x2583b28
	void ClientFindPath(const Vector FeetLocation, const Vector Destination);// 0x2583bc0
	void ClientExecCMD(FString Cmd);// 0x2586434
	void ClientChangedRemoteURL(FString IP, int Port);// 0x2586d8c
	void ClientAddBubbleTip_Top(FString Msg, float show_time);// 0x258614c
	void ClearAllEffectView();// 0x25872d8
	void ClearAllBuff();// 0x25871d4
	void ClearAIItem(int Index);// 0xf4e750
	void CleanEnv();// 0x2583570
	void CircleMeshHide(bool ShowMesh);// 0x2588640
	void CheatBulletHit();// 0x2586554
	void CheatAddBullet(int BulletNumber);// 0x2585f08
	void ChapterResume();// 0x2588bf4
	void ChapterPause();// 0x2588c24
	void ChangeTestAIMode(ApexCharacter* AI, int BTType);// 0x25848a0
	void ChangeCurrentChapterRemainingLength(float RemainingTime);// 0x2588b60
	void ChangeAISkin(int Index, int SkinId);// 0x258543c
	void CGMNC();// 0x2588c8c
	void CGMNB();// 0x2588c5c
	void BTGM();// 0x25862f8
	void BotRideZipline();// 0x2585b48
	void BotDropAllItems(float Range);// 0x25859c0
	void BeginProfiler(float ProfilerTime, bool TestUltimate);// 0x25834ac
	void BeginCircle(float CircleTimeScale);// 0x25887c8
	void BecomeSpecialCollector();// 0x2583654
	void BecomeNormalCollector();// 0x2583668
	void APSendPkg(FString Cmd);// 0x25867d0
	void AllServerPlayerExecCMD(FString Cmd);// 0x25864c4
	void AllDitherValue(float InDitherValue);// 0x2586c44
	void AllDitherMask(bool NewEnable);// 0x2586bc4
	void AIInteractDoor();// 0x258592c
	void AIIgnoreMe();// 0x2529a30
	void AIGotoDying();// 0x2585ca8
	void AIDebugNameImpl();// 0x2583874
	void AIDebugName();// 0x2583890
	void AheadCircleFlowServer(bool NotExecuteCircleFlowFunc);// 0x25886c0
	void AheadCircleFlow(bool NotExecuteCircleFlowFunc);// 0x2588748
	void AddTestBot(Vector Loc, int BTType, int AILevel, FString Items, int Num, int LegendId, int TeamID, bool IsInvincible, bool IsNeedOffset);// 0x2584964
	void AddParticleEffect(int ParticleEffectID);// 0x25878c4
	void AddItemToBot(int ItemID, int ItemNum, float Range);// 0x2585a40
	void AddEffectView(int EffectViewID);// 0x2587364
	void AddCollectPointActor();// 0x2583640
	void AddBuff(int BuffID);// 0x2587260
	void AddAIItem(int Index, int ItemID, int count);// 0x2585010
	void AddActivityConfigToAI(int ItemID, int count);// 0x2583d58

--------------------------------
Class: FreeCameActor.ApexSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	CineCameraComponent* CameraComponent;//[Offset: 0x230, Size: 0x4]
	void SetMoveSpeed(float NewSpeed);// 0x25d209c

--------------------------------
Class: ApexSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	bool bAutoRise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x860, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x86c, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x884, Size: 0x4c]
	float CurrentFocalLength;//[Offset: 0x8d0, Size: 0x4]
	float CurrentAperture;//[Offset: 0x8d4, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x8d8, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x8e4, Size: 0xc]
	NamedLensPreset[] LensPresets;//[Offset: 0x8f0, Size: 0xc]
	FString DefaultFilmbackPresetName;//[Offset: 0x8fc, Size: 0xc]
	FString DefaultLensPresetName;//[Offset: 0x908, Size: 0xc]
	float DefaultLensFocalLength;//[Offset: 0x914, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x918, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x3c334e4
	void SetFilmbackPresetByName(FString InPresetName);// 0x3c33608
	float GetVerticalFieldOfView();// 0x3c3372c
	FString GetLensPresetName();// 0x3c33574
	float GetHorizontalFieldOfView();// 0x3c33754
	FString GetFilmbackPresetName();// 0x3c33698

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x30]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x3c, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x44, Size: 0x4]
	float FocusOffset;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x20]
	Vector RelativeOffset;//[Offset: 0x20, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0xc]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0xc, Size: 0x18]

--------------------------------
Class: OBManagerNoReplay.OBManager.ActorComponent.Object
	bool ShowExitBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	RepMiniMapPlayerInfo[] OBPlayerInfos;//[Offset: 0x1f0, Size: 0xc]
	void ServerStopObAndExit();// 0x26c6134
	void ServerObPlayerByKey(int TargetPlayerKey);// 0x26c5e4c
	void ServerObNextOrPreTeammate(bool Next);// 0x26c606c
	void ServerObNextOrPreActor(bool Next, float BlendTime);// 0x26c5f5c
	void ServerObNext();// 0x26c5f00
	void ServerLeaveOBMode();// 0x26c6190
	void ServerEnterOBMode();// 0x26c61ec
	void OnRep_RepOBPlayerInfos();// 0x26c5e24
	void OnReconnected();// 0x26c5e38

--------------------------------
Class: OBManager.ActorComponent.Object
	delegate OnCharacterOBTargetSwitched_BP;//[Offset: 0x16c, Size: 0xc]
	float SmoothSpeed;//[Offset: 0x178, Size: 0x4]
	bool DebugShowWorldObj;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	ApexOBInfo CurOBData;//[Offset: 0x180, Size: 0x18]
	Controller* OBViewTargetRelevantControllerCache;//[Offset: 0x198, Size: 0x4]
	Controller*[] MyObservers;//[Offset: 0x1ac, Size: 0xc]
	TimerHandle AutoNextTimer;//[Offset: 0x1b8, Size: 0x8]
	float AutoNextDelay;//[Offset: 0x1c0, Size: 0x4]
	float OBTargetLostAutoNextDelay;//[Offset: 0x1c4, Size: 0x4]
	Actor*[] AliveTeammates;//[Offset: 0x1c8, Size: 0xc]
	Actor*[] AllAlivePlayers;//[Offset: 0x1d4, Size: 0xc]
	Actor*[] WorldOBObject;//[Offset: 0x1e0, Size: 0xc]
	void SwitchCharacterOBViewMode(bool Auto, bool ToFPP);// 0x26c4a30
	bool SetViewTarget(Actor* NewViewTargetPC, Controller* RelevantController, float BlendTime);// 0x26c4b00
	Actor* SelectOBTeammateChar(out Controller* InOutRelevantController, bool Next);// 0x26c47b8
	Actor* SelectOBChar(out Controller* InOutRelevantController, bool Next);// 0x26c48a0
	void OnStopObOtherAtClient(Actor* Target, ApexCharacter* LastTargetRelevantCharacter);// 0x26c4614
	void OnRep_CurOBData(out const ApexOBInfo LastInfo);// 0x26c4e48
	void OnPlayerIconClicked(int IconPlayerKey);// 0x23f62a4
	void OnPlayerExit();// 0x26c4f24
	void OnObOtherAtClient(Actor* Target, ApexCharacter* NewTargetRelevantCharacter);// 0x26c46d0
	void OnOBedStop(Controller* ObserveCharController);// 0x26c4524
	void OnOBedPlayerLost();// 0x26c4ce0
	void OnOBedPlayerForceExit();// 0x26c4cf4
	void OnObedCharStateAdd(enum NewState, enum EnteredOverrideState);// 0x26c4c24
	void OnOBedCharDying();// 0x26c4c10
	void OnOBedCharDeath();// 0x26c4d08
	void OnOBedByOther(Controller* ObserveController);// 0x26c459c
	void OnMyCharacterDeath();// 0x26c4d1c
	bool OBViewTargetIsCharacter();// 0x26c4dbc
	void LeaveOBModeAtServer();// 0x26c4f10
	bool IsObingOther();// 0x26c4d94
	bool IsObedByOther();// 0x26c4d44
	bool IsCurrentObChracter(int PlayerKey);// 0x26c4988
	int GetVTArrayNum();// 0x26c4d6c
	Actor* GetOBViewTarget();// 0x26c4e1c
	int GetOBTeamID();// 0x26c4de4
	ApexCharacter* GetOBRelevantCharacter();// 0x26c478c
	int GetOBPlayerKey();// 0x26c4e00
	OBManager* GetOBComponent(Object* WorldObject);// 0x26c5118
	Actor* GetCurrentOBViewTarget(Object* WorldObject);// 0x26c50a0
	int GetCurrentOBTeamID(Object* WorldObject);// 0x26c4fb0
	ApexCharacter* GetCurrentOBRelevantCharacter(Object* WorldObject);// 0x26c4f38
	int GetCurrentOBPlayerKey(Object* WorldObject);// 0x26c5028
	enum GetCurrentOBCameraMode();// 0x26c4a08
	void AutoSetViewTarget();// 0x26c4d30

--------------------------------
Class: ApexOBInfo
	Actor* OBViewTarget;//[Offset: 0x0, Size: 0x4]
	ApexCharacter* RelevantCharacter;//[Offset: 0x4, Size: 0x4]
	ApexPlayerState* RelevantCharacterPlayerState;//[Offset: 0x8, Size: 0x4]
	int CurrentOBTeamId;//[Offset: 0xc, Size: 0x4]
	int CurrentOBPlayerKey;//[Offset: 0x10, Size: 0x4]
	bool HasRelevantCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool InOBMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: LineTrace.Object

--------------------------------
Class: ProxySyncComponent.ActorComponent.Object
	ProxySyncData*[] ProxySyncDataList;//[Offset: 0xe4, Size: 0xc]
	<uint32,Actor*> ProxyActorMap;//[Offset: 0x12c, Size: 0x3c]
	bool bClientCreateProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	bool bRemoteWeaponSoundCallBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 0x1]
	bool bRemoteWeaponSoundLimitPlayOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 0x1]
	AudioRegionMgrComponent* RemoteAudioRegionMgr;//[Offset: 0x22c, Size: 0x4]
	void RPC_ClientRemoteWeaponSound(const RemoteWeaponSoundData[] SoundData);// 0xf49c7c
	void OnRemoteWeaponSoundEventCallBack(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x272e508

--------------------------------
Class: ProxySyncData.Object
	float DamageSimulateTimeOut;//[Offset: 0x1c, Size: 0x4]
	float SimulateServerTimeStamp;//[Offset: 0x20, Size: 0x4]
	PrimitiveComponent* Base;//[Offset: 0x24, Size: 0x4]
	ProxyActorBasicData ProxyActorBasicData;//[Offset: 0x28, Size: 0x14]
	ProxyActorMovementData ProxyActorMovementData;//[Offset: 0x3c, Size: 0x24]
	byte ReplicatedMovementMode;//[Offset: 0x60, Size: 0x1]
	uint64 StateMask;//[Offset: 0x68, Size: 0x8]
	bool bFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	BulletHitInfoReplicateData[] BulletHitData;//[Offset: 0x74, Size: 0xc]
	ProxyActorWeaponData[] WeaponData;//[Offset: 0x80, Size: 0xc]
	ProxyActorHurtData HurtData;//[Offset: 0x90, Size: 0x30]
	ProxyActorKnockdownShieldData KnockdownShieldData;//[Offset: 0xc0, Size: 0x2]
	ProxyActorRescueData RescueData;//[Offset: 0xc4, Size: 0xc]
	bool bAgentIsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	void OnRep_WeaponData();// 0x272d6ac
	void OnRep_StateMask();// 0x272d710
	void OnRep_RescueData();// 0x272d670
	void OnRep_ProxyActorMovementData();// 0x272d6e8
	void OnRep_ProxyActorBasicData();// 0x272d6fc
	void OnRep_KnockdownShieldData();// 0x272d684
	void OnRep_IsFar();// 0x272d6d4
	void OnRep_HurtData();// 0x272d698
	void OnRep_BulletHitData();// 0x272d6c0

--------------------------------
Class: ProxyActorBasicData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int LegendId;//[Offset: 0x4, Size: 0x4]
	int LegendSkinID;//[Offset: 0x8, Size: 0x4]
	bool bServerDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int ProxyListIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ProxyActorMovementData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Velocity;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ProxyActorHurtData
	int VictimPlayerKey;//[Offset: 0x0, Size: 0x4]
	float Damage;//[Offset: 0x4, Size: 0x4]
	int DamageType;//[Offset: 0x8, Size: 0x4]
	int AttackerPlayerKey;//[Offset: 0xc, Size: 0x4]
	byte AvatarDamagePosition;//[Offset: 0x10, Size: 0x1]
	bool bIsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bIsFatalHealthCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bIsHitShield;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bIsShieldBroken;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	uint32 ShootID;//[Offset: 0x14, Size: 0x4]
	uint32 PelletID;//[Offset: 0x18, Size: 0x4]
	float AimPercent;//[Offset: 0x1c, Size: 0x4]
	byte AimChargeLevel;//[Offset: 0x20, Size: 0x1]
	double TimeOutServerTime;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ProxyActorKnockdownShieldData
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte Level;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ProxyActorRescueData
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int SourcePlayerKey;//[Offset: 0x4, Size: 0x4]
	int TargetPlayerKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RemoteWeaponSoundData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int WeaponID;//[Offset: 0x4, Size: 0x4]
	Vector SoundPos;//[Offset: 0x8, Size: 0xc]
	float SoundTime;//[Offset: 0x14, Size: 0x4]
	int SoundAction;//[Offset: 0x18, Size: 0x4]
	bool bEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: DSPingComponent.ActorComponent.Object
	NetDriver* Driver;//[Offset: 0xc8, Size: 0x4]
	ApexPlayerController* MyPC;//[Offset: 0xcc, Size: 0x4]
	ApexPlayerState* ControllerPlayerState;//[Offset: 0xd0, Size: 0x4]
	void RPCServerSendNetInfoMsg(float PingAverage, float MaxPing, float MinPing, int InLossRate, int OutLossRate, int AvgJitter);// 0x25b024c
	void RPCServerSendHeartMsg(int64 miliseconds);// 0x25b0788
	void RPCServerSendClientInfo(int64 UID, FString ClientIP, int ping, int inTotal, int inTotalLost, int inOutOrder, int outTotal, int outTotalLost, int outOutOrder);// 0x25b04ac
	void RPCClientReceiveHeartMsg(int64 miliseconds);// 0x25b0428

--------------------------------
Class: TrackerManager.ActorComponent.Object
	SimpleTrackerData[] WearTrackerDataList;//[Offset: 0xa8, Size: 0xc]
	void UpdateClientTrackerData(int Data, int TrackerID);// 0x27a3a50
	bool SetTrackerValue(TrackerData Data, int PlayerKey);// 0x27a3d90
	void OnRep_TrackerWearInit();// 0x27a3958
	void OnPlayerJoin(PlayerController* Controller);// 0x27a38e0
	SimpleTrackerData GetTrackerValue(int LegendId, int ID);// 0x27a3b0c
	void DoPlayerJoin(ApexPlayerState* PlayerState);// 0x27a3868
	bool DeleteTrackerValue(TrackerData Data, int PlayerKey);// 0x27a3be0
	void BroadcastInitPlayer(int PlayerKey, out const SimpleTrackerData[] TrackerData);// 0x27a396c
	bool AddTrackerValue(TrackerData Data, int PlayerKey);// 0x27a3cb8

--------------------------------
Class: ApexDebugAIComponent.ActorComponent.Object

--------------------------------
Class: AIHostComponent.ActorComponent.Object
	delegate OnAIHostStatusDelegate;//[Offset: 0xac, Size: 0xc]
	void OnAIHostDamage(Controller* Causer, Controller* Victim, out const DamageEvent DamageEvent, float BodyDamage, float ShieldDamage, byte ResultStatus);// 0x23ead1c

--------------------------------
Class: ApgameBattleUIUpdater.Object
	void OnEventUIStateChange(enum UIState, enum PreUIState);// 0x24be148
	void OnEventHUDTypeChange(int NewHUDType);// 0x24be0d0

--------------------------------
Class: ApgamePickupFloatingManager.ActorComponent.Object
	byte MinPickupCacheNum;//[Offset: 0xa9, Size: 0x1]
	float FadeInTime;//[Offset: 0xb0, Size: 0x4]
	float FadeOutTime;//[Offset: 0xb4, Size: 0x4]
	float RenderedTimeForCulling;//[Offset: 0xb8, Size: 0x4]
	ApgamePickupFloatingLogic* FloatingLogic;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: ApgamePickupFloatingLogic.Object
	void UpdateFloating(bool bInFloating);// 0x24d8e20
	bool UpdateAnim(out ApgamePickupFloatingResult outResult, float InDeltaTime, bool bInOutputResult);// 0x24d8cf0
	void Clean();// 0x1014170

--------------------------------
Class: ApgamePickupFloatingResult
	float Height;//[Offset: 0x0, Size: 0x4]
	float Angle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MirageTutorialComponent.ActorComponent.Object
	ApexCharacter* GhoseCharacter;//[Offset: 0xa8, Size: 0x4]
	<enum,TutorialConfig> TutorialConfigMap;//[Offset: 0xac, Size: 0x3c]
	ApexPlayerController* PlayerController;//[Offset: 0xe8, Size: 0x4]
	Pawn* CharacterToNotify;//[Offset: 0xec, Size: 0x4]
	TutorialNotifyWidget* CurrentWidget;//[Offset: 0xf0, Size: 0x4]
	TutorialConfig TutorialConfig;//[Offset: 0xf4, Size: 0x10]
	bool bLoadedWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	TimerHandle UIAnimationHandle;//[Offset: 0x108, Size: 0x8]
	void TutorialStartOnServer(enum Type, Pawn* CharacterToNotifyIn);// 0x26b0174
	void TutorialStartOnClient(enum Type, Pawn* CharacterToNotifyIn);// 0x26b0038
	void TutorialStartByGhose(enum Type, ApexCharacter* Character);// 0x26b02f4
	void TutorialStart(enum Type, Pawn* CharacterToNotifyIn);// 0x26b0238
	void TutorialEndOnServer(enum Type);// 0x25689a8
	void TutorialEndOnClient();// 0x2405154
	void TutorialEnd(enum Type);// 0x26b00fc
	void PlayTutorialVoice(enum Type);// 0x26affc0

--------------------------------
Class: TutorialConfig
	enum TutorialType;//[Offset: 0x0, Size: 0x1]
	int VoiceEventID;//[Offset: 0x4, Size: 0x4]
	float TutorialRange;//[Offset: 0x8, Size: 0x4]
	class TutorialNotifyWidget* UIWidgetClass;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TutorialNotifyWidget.UserWidget.Widget.Visual.Object
	Image* Image_Notice;//[Offset: 0x1c8, Size: 0x4]
	Image* Image_Outline;//[Offset: 0x1cc, Size: 0x4]
	WidgetAnimation* Anim_in;//[Offset: 0x1d0, Size: 0x4]
	WidgetAnimation* Anim_loop;//[Offset: 0x1d4, Size: 0x4]
	WidgetAnimation* Anim_out;//[Offset: 0x1d8, Size: 0x4]
	CanvasPanel* ItemRoot;//[Offset: 0x1dc, Size: 0x4]
	CurveFloat* SizeCurve;//[Offset: 0x1e0, Size: 0x4]
	void UpdateUISize(Pawn* Player, Pawn* Target);// 0x27b559c

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x3bf310c

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int ZOrder;//[Offset: 0x50, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x3bf3700
	void SetSize(Vector2D InSize);// 0x3bf3aa8
	void SetPosition(Vector2D InPosition);// 0x3bf3b58
	void SetOffsets(Margin InOffset);// 0x3bf39e0
	void SetMinimum(Vector2D InMinimumAnchors);// 0x3bf3668
	void SetMaximum(Vector2D InMaximumAnchors);// 0x3bf35f8
	void SetLayout(out const AnchorData InLayoutData);// 0x3bf3c1c
	void SetAutoSize(bool InbAutoSize);// 0x3bf37a0
	void SetAnchors(Anchors InAnchors);// 0x3bf3914
	void SetAlignment(Vector2D InAlignment);// 0x3bf3860
	int GetZOrder();// 0x3bf36d8
	Vector2D GetSize();// 0x3bf3a68
	Vector2D GetPosition();// 0x3bf3b18
	Margin GetOffsets();// 0x3bf399c
	AnchorData GetLayout();// 0x3bf3bc8
	bool GetAutoSize();// 0x3bf3778
	Anchors GetAnchors();// 0x3bf38d0
	Vector2D GetAlignment();// 0x3bf3820

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: ApexPlayerCameraManager_BP_C.ApexPlayerCameraManager.PlayerCameraManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b20, Size: 0x4]
	float CameraOffset_FullScreen;//[Offset: 0x2b24, Size: 0x4]
	float CurOffset;//[Offset: 0x2b28, Size: 0x4]
	bool bOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2c, Size: 0x1]
	CameraActor* OffsetCamera_FullScreen;//[Offset: 0x2b30, Size: 0x4]
	CameraActor* OffsetCamera_Bar;//[Offset: 0x2b34, Size: 0x4]
	Vector OffsetCamera_Location;//[Offset: 0x2b38, Size: 0xc]
	Rotator OffsetCamera_Rotation;//[Offset: 0x2b44, Size: 0xc]
	int OffsetType;//[Offset: 0x2b50, Size: 0x4]
	float CameraOffset_Bar;//[Offset: 0x2b54, Size: 0x4]
	bool IsNearCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b58, Size: 0x1]
	Transform SeqCameraEndTransform;//[Offset: 0x2b60, Size: 0x30]
	bool IsSeqCameraBlend2Normal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b90, Size: 0x1]
	Transform SeqCameraCurTransform;//[Offset: 0x2ba0, Size: 0x30]
	void BP_StartSeqCameraToNormalBlend(Transform CallFunc_GetTransform_ReturnValue, Transform CallFunc_GetTransform_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x2ce6f18
	void BP_SetSeqCameraEndTransform(Transform InTransform);// 0x2ce6f18
	void GetDefaultCameraOffset(float InDefaultValue, out float CameraOffset, float TempOffset, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2ce6f18
	static void ResetCurOffset(bool K2Node_SwitchInteger_CmpSuccess);// 0x2ce6f18
	void BP_ClearCacheOffsetCamera();// 0x2ce6f18
	void BP_SetCameraNear(bool inIsNearCamera);// 0x2ce6f18
	static void OffsetToDefaultValue(out CameraActor* CameraActor, out float InCurOffset, float DefaultCameraOffset, out Vector Location, out Rotator Rotation, out float FieldOfView, float CallFunc_GetDefaultCameraOffset_CameraOffset, float CallFunc_Lerp_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Transform CallFunc_GetTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x2ce6f18
	static Vector OffsetToNormal(out CameraActor* ViewTarget, out Vector Location, out Rotator Rotation, out Rotator ReturnValue2, out float FieldOfView, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue);// 0x2ce6f18
	static Vector OffsetToCamera(out Actor* ViewTarget, out CameraActor* OffsetCamera, out Vector Location, out Rotator Rotation, float DefaultCameraOffset, out Rotator ReturnValue2, out float FieldOfView, Vector NewLocation, Rotator NewRotation, Rotator TargetRotation, float NewFOV, float CallFunc_GetDefaultCameraOffset_CameraOffset, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, CineCameraComponent* K2Node_DynamicCast_AsCine_Camera_Component, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_GetHorizontalFieldOfView_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_RLerp_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue);// 0x2ce6f18
	void BP_CacheOffsetCamera_FullScreen(out CameraActor* OffsetCamera);// 0x2ce6f18
	void BP_CacheOffsetCamera_Bar(out CameraActor* OffsetCamera);// 0x2ce6f18
	void BP_StartOffset(int OffsetType, bool IsBlend);// 0x2ce6f18
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV, Rotator NewLocalVar, CameraActor* K2Node_DynamicCast_AsCamera_Actor, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, CameraActor* K2Node_DynamicCast_AsCamera_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Vector CallFunc_OffsetToNormal_ReturnValue, Rotator CallFunc_OffsetToNormal_ReturnValue2, float CallFunc_OffsetToNormal_FieldOfView, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_OffsetToDefaultValue_Location, Rotator CallFunc_OffsetToDefaultValue_Rotation, float CallFunc_OffsetToDefaultValue_FieldOfView);// 0x2ce6f18
	void BP_ClearCacheSequenceCamera();// 0x2ce6f18
	void ExecuteUbergraph_ApexPlayerCameraManager_BP(int EntryPoint);// 0x2ce6f18

--------------------------------
Class: ApexPlayerCameraManager.PlayerCameraManager.Actor.Object
	float LimitPitchSpeed;//[Offset: 0x2b0c, Size: 0x4]
	void BP_ClearCacheSequenceCamera();// 0x2ce6f18

--------------------------------
Class: MainTownHUD_BP_C.ApexGameHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x478, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x47c, Size: 0x4]
	FString GetModuleName();// 0x2ce6f18
	void InitFireRangeHUD();// 0x2ce6f18
	static void ReceiveDestroyed();// 0x2ce6f18
	void ExecuteUbergraph_MainTownHUD_BP(int EntryPoint);// 0x2ce6f18

--------------------------------
Class: Character_Bloodhound_BP_C.APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object

--------------------------------
Class: APGameCharacter_BP_C.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1820, Size: 0x4]
	GameplayTasksComponent* GameplayTasks;//[Offset: 0x1824, Size: 0x4]
	CharacterAddBuffSelfComponent_BP_C* CharacterAddBuffSelfComponent_BP;//[Offset: 0x1828, Size: 0x4]
	CharacterMagmaRiseComponent_BP_C* CharacterMagmaRiseComponent_BP;//[Offset: 0x182c, Size: 0x4]
	AutoShootTargetComponent* AutoShootTarget;//[Offset: 0x1830, Size: 0x4]
	EffectViewManager_BP_C* EffectViewManager_BP;//[Offset: 0x1834, Size: 0x4]
	CharacterAudioEffectManager_BP_C* CharacterAudioEffectManager_BP;//[Offset: 0x1838, Size: 0x4]
	CapsuleComponent* NameCheck;//[Offset: 0x183c, Size: 0x4]
	byte CurrentGunSlot;//[Offset: 0x1840, Size: 0x1]
	bool is in air;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1841, Size: 0x1]
	Rotator NewVar;//[Offset: 0x1844, Size: 0xc]
	bool JumpCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1850, Size: 0x1]
	bool LandCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1851, Size: 0x1]
	bool isSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1852, Size: 0x1]
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1853, Size: 0x1]
	float ClimbPrecess;//[Offset: 0x1854, Size: 0x4]
	float Local Max Head Yaw;//[Offset: 0x1858, Size: 0x4]
	Actor* Local Self;//[Offset: 0x185c, Size: 0x4]
	Rotator HeadRotation;//[Offset: 0x1860, Size: 0xc]
	bool PistolFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186c, Size: 0x1]
	bool isPadJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186d, Size: 0x1]
	bool IsJumpState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186e, Size: 0x1]
	Transform ZipHandGrabTransform;//[Offset: 0x1870, Size: 0x30]
	bool ClimbSwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a0, Size: 0x1]
	bool RingDisPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a1, Size: 0x1]
	Vector RecallEndPosition;//[Offset: 0x18a4, Size: 0xc]
	RandomPlayerSequenceEntryContainer HeroUnarmedSidle;//[Offset: 0x18b0, Size: 0xc]
	RandomPlayerSequenceEntryContainer HeroPistolSidle;//[Offset: 0x18bc, Size: 0xc]
	RandomPlayerSequenceEntryContainer HeroRifleSidle;//[Offset: 0x18c8, Size: 0xc]
	RandowSpawnItemEntry[] PerkItemList;//[Offset: 0x18d4, Size: 0xc]
	void SpawnPerkItem(Actor* InActor, Vector LaunchPosition, Vector LaunchDirection, out RandowSpawnItemEntry[] ItemList, bool CallFunc_IsValid_ReturnValue, PickUpWrapperActor* CallFunc_RandomSpawnItemByWeight_ReturnValue, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PickUpWrapperActor* CallFunc_RandomSpawnItemByWeight_ReturnValue, bool CallFunc_HasBuff_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x2ce6f18
	void IsInFinisher(out bool In, ApexPlayerState* K2Node_DynamicCast_AsApex_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFinisher_ReturnValue);// 0x2ce6f18
	static void GetRoleType(out FName ReturnRoleType, bool CallFunc_IsObedInCurrentClient_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsStandalone_ReturnValue);// 0x2ce6f18
	static void TPPorFPP(enum CallFunc_GetCurrentCameraMode_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2ce6f18
	void SetPlayerNameColor();// 0x2ce6f18
	void OnClickChangeSkin();// 0x2ce6f18
	static void OnClickCrouch(bool CallFunc_HasState_ReturnValue);// 0x2ce6f18
	static void InpActEvt_Sprint_K2Node_InputActionEvent(Key Key);// 0x2ce6f18
	static void InpActEvt_Sprint_K2Node_InputActionEvent(Key Key);// 0x2ce6f18
	void InpActEvt_Attack_K2Node_InputActionEvent(Key Key);// 0x2ce6f18
	void InpActEvt_Attack_K2Node_InputActionEvent(Key Key);// 0x2ce6f18
	static void InpActEvt_UpToZipline_K2Node_InputActionEvent(Key Key);// 0x2ce6f18
	void OnLoaded_B9353F62426B7F6A6FD931B1BB446E13(class Object Loaded);// 0x2ce6f18
	void SetAllCollisionEnabled(bool bEnabled);// 0x2ce6f18
	void Draw Debug(Vector Location, float Radius, LinearColor Color, float Duration, float Thickness);// 0x2ce6f18
	static void OnBPIsInvincibleChange();// 0x2ce6f18
	static void ReceiveOnEnterPawnState(enum NewState);// 0x2ce6f18
	void OnPlayerStartFireDelegate_Event(Weapon* Weapon);// 0x2ce6f18
	static void ReceiveTick(float DeltaSeconds);// 0x2ce6f18
	void OnPlayTotemRecallTrailSFX(out const Vector StartPosition, out const Vector EndPosition);// 0x2ce6f18
	void ReceiveBeginPlay();// 0x2ce6f18
	static void ExecuteUbergraph_APGameCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, class Object K2Node_CustomEvent_Loaded, class Object Temp_class_Variable, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_TriggerEvent_ReturnValue, Key K2Node_InputActionEvent_Key, bool K2Node_Event_bEnabled, Vector K2Node_CustomEvent_Location, float K2Node_CustomEvent_Radius, LinearColor K2Node_CustomEvent_Color, float K2Node_CustomEvent_Duration, float K2Node_CustomEvent_Thickness, bool CallFunc_TriggerEvent_ReturnValue, Key Temp_struct_Variable, enum K2Node_Event_NewState, Weapon* K2Node_CustomEvent_Weapon, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Key K2Node_InputActionEvent_Key, float K2Node_Event_DeltaSeconds, bool CallFunc_HasAuthority_ReturnValue, Key K2Node_InputActionEvent_Key, const Vector K2Node_Event_StartPosition, const Vector K2Node_Event_EndPosition, Transform CallFunc_Conv_VectorToTransform_ReturnValue, FName CallFunc_GetRoleType_ReturnRoleType, bool K2Node_SwitchName_CmpSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsInFinisher_In, Actor* CallFunc_FinishSpawningActor_ReturnValue, Key K2Node_InputActionEvent_Key, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, SkeletalMeshComponent* CallFunc_GetCameraModeMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ApexGameState* K2Node_DynamicCast_AsApex_Game_State, bool K2Node_DynamicCast_bSuccess);// 0x2ce6f18

--------------------------------
Class: RandowSpawnItemEntry
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Weight;//[Offset: 0x4, Size: 0x4]
	int ItemCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CharacterAddBuffSelfComponent_BP_C.CharacterAddBuffSelfComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x138, Size: 0x4]
	ParticleSystemAsync* RepairEffectFor3P;//[Offset: 0x13c, Size: 0x4]
	ParticleSystemAsync* RepairEffectFor1P;//[Offset: 0x140, Size: 0x4]
	static void OnLoadRepairShieldPS(AsyncLoaderBase* Loader);// 0x2ce6f18
	static void BP_StartRepairShield(ApexCharacter* PlayerEnt);// 0x2ce6f18
	static void BP_StopRepairShield(ApexCharacter* PlayerEnt);// 0x2ce6f18
	void BP_RepairShieldCompleted(ApexCharacter* PlayerEnt);// 0x2ce6f18
	void ExecuteUbergraph_CharacterAddBuffSelfComponent_BP(int EntryPoint, AsyncLoaderBase* K2Node_CustomEvent_Loader, bool CallFunc_IsValid_ReturnValue, ParticleSystemAsync* K2Node_DynamicCast_AsParticle_System_Async, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_GetParticleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ApexCharacter* K2Node_Event_PlayerEnt, enum CallFunc_GetShieldLevel_ReturnValue, LinearColor CallFunc_GetShieldLinearColor_ReturnValue, ParticleSystemAsync* CallFunc_SpawnEmitterAttachedAsync_ReturnValue, ApexCharacter* K2Node_Event_PlayerEnt, ApexCharacter* K2Node_Event_PlayerEnt);// 0x2ce6f18

--------------------------------
Class: CharacterMagmaRiseComponent_BP_C.CharacterMagmaRiseComponent.ActorComponent.Object

--------------------------------
Class: AutoShootTargetComponent.ActorComponent.Object
	ApexCharacter* ApexCharacter;//[Offset: 0xa8, Size: 0x4]
	bool IsTeammate(Pawn* Other);// 0x250784c

--------------------------------
Class: EffectViewManager_BP_C.EffectViewManager.ActorComponent.Object

--------------------------------
Class: CharacterAudioEffectManager_BP_C.AudioEffectManager.ActorComponent.Object

--------------------------------
Class: Pathfinder_SurveyToken_BP_C.SurveyToken.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x254, Size: 0x4]
	void ReceiveTick(float DeltaSeconds);// 0x2ce6f18
	void ExecuteUbergraph_Pathfinder_SurveyToken_BP(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x2ce6f18

--------------------------------
Class: SurveyToken.Actor.Object
	ApexCharacter*[] PlayerList;//[Offset: 0x1d0, Size: 0xc]
	ApexCharacter* OwnerPlayer;//[Offset: 0x1dc, Size: 0x4]
	bool bCanUseBeacon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	enum CurState;//[Offset: 0x1e1, Size: 0x1]
	bool bHasOpenUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 0x1]
	float OperationTime;//[Offset: 0x1e4, Size: 0x4]
	float UseTimeOut;//[Offset: 0x1e8, Size: 0x4]
	Vector BeaconPosOffset;//[Offset: 0x1ec, Size: 0xc]
	float BeaconYawOffset;//[Offset: 0x1f8, Size: 0x4]
	float BeaconPitch;//[Offset: 0x1fc, Size: 0x4]
	float PosSetTime;//[Offset: 0x200, Size: 0x4]
	GameplayTag DetectEnemyTag;//[Offset: 0x204, Size: 0x8]
	float DetectEnemyRadius;//[Offset: 0x20c, Size: 0x4]
	float DetectEnemyTime;//[Offset: 0x210, Size: 0x4]
	FName DetectedBuff;//[Offset: 0x214, Size: 0x8]
	SurveyBeacon* CurSurveyBeacon;//[Offset: 0x23c, Size: 0x4]
	void SetPos(int SkillIndex, bool SetPos);// 0x278d610
	void SetCurState(enum NewState, bool bHasInjected);// 0x278d54c
	void OnNextWhiteCircleForCurrentWave(int InTeamId);// 0x278d498
	void OnClearNextWhiteCircleForCurrentWave();// 0x278d510
	bool EndUseBeacon();// 0x278d524

--------------------------------
Class: MainTownGameState_BP_C.MainTownGameStateBase.GameStateBase_TeamMultiLevel.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	GameStateLootDronesMgr* GameStateLootDronesMgr;//[Offset: 0x650, Size: 0x4]
	GameStateSelectLegendComp_Repick* GameStateSelectLegendComp_Repick;//[Offset: 0x654, Size: 0x4]
	GameStateInGameChatComp_BP_C* GameStateInGameChatComp_BP;//[Offset: 0x658, Size: 0x4]
	GameStateMultiplayerComp* GameStateMultiplayerComp;//[Offset: 0x65c, Size: 0x4]
	GameStatisticsManager_MPBase* GameStatisticsManager_TDM;//[Offset: 0x660, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x664, Size: 0x4]
	bool AllPlayersAreFriends;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	void GetApexcharacterByCauser(Actor* Causer, out bool Success, out APGameCharacter_BP_C* APCharacter, Actor* CallFunc_GetOwner_ReturnValue, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, APGameCharacter_BP_C* K2Node_DynamicCast_AsAPGame_Character_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2ce6f18
	static bool ShouldTakeDamage(float Damage, byte CurDamageType, Controller* EventInstigator, Actor* DamageCauser, ApexCharacter* Victim, ApexCharacter* VictimCharacter, bool CallFunc_GetApexCharacterByCauser_Success, APGameCharacter_BP_C* CallFunc_GetApexcharacterByCauser_APCharacter, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsPlayerControlled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2ce6f18

--------------------------------
Class: MainTownGameStateBase.GameStateBase_TeamMultiLevel.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	float RemainGameTime;//[Offset: 0x648, Size: 0x4]
	float RemainTimeTipsShowTime;//[Offset: 0x64c, Size: 0x4]
	void RemainTimeTipsMulticast();// 0x2696960

--------------------------------
Class: GameStateBase_TeamMultiLevel.ApexGameState.GameState.GameStateBase.Info.Actor.Object
	int playerCount;//[Offset: 0x640, Size: 0x4]
	int TeamCount;//[Offset: 0x644, Size: 0x4]

--------------------------------
Class: GameStateLootDronesMgr.ActorComponent.Object
	LootDronesPathsDataAsset* LootDronesPathsDataAsset;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: GameStateSelectLegendComp_Repick.GameStateSelectLegendComp.SelectLegendComponentBase.ActorComponent.Object

--------------------------------
Class: GameStateSelectLegendComp.SelectLegendComponentBase.ActorComponent.Object
	TimerHandle TimerHandle;//[Offset: 0xb8, Size: 0x8]
	GameModeStageSelectLegend* OwnGameStage;//[Offset: 0xc0, Size: 0x4]
	class SelectStateManger* StateMgrClass;//[Offset: 0xc4, Size: 0x4]
	class SelectStateManger* OBMgrClass;//[Offset: 0xc8, Size: 0x4]
	SelectStageConfig[] StageConfigs;//[Offset: 0xcc, Size: 0xc]
	enum SelectLegendMode;//[Offset: 0xd8, Size: 0x1]
	int LegendLimit;//[Offset: 0xdc, Size: 0x4]
	<int,int> SubLegendLimits;//[Offset: 0xe0, Size: 0x3c]
	bool bIsCampLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	enum SelectLegendRandomMode;//[Offset: 0x11d, Size: 0x1]
	class SelectScreenBase* SelectScreenClass;//[Offset: 0x120, Size: 0x20]
	SelectScreenBase* SelectScreenInstance;//[Offset: 0x140, Size: 0x4]
	class UIS_CurtainBase* FadeOutCurtainClass;//[Offset: 0x144, Size: 0x20]
	SelectStateManger* ClientStateMgr;//[Offset: 0x164, Size: 0x4]
	int CurStageIndex;//[Offset: 0x168, Size: 0x4]
	int MaxPlayerEachTeam;//[Offset: 0x16c, Size: 0x4]
	float CurStageStartTime;//[Offset: 0x170, Size: 0x4]
	int CurStageLeftTime;//[Offset: 0x174, Size: 0x4]
	float CurStageEndTime;//[Offset: 0x178, Size: 0x4]
	class Actor* SelectBoardClass;//[Offset: 0x17c, Size: 0x20]
	Actor* SelectBoardActor;//[Offset: 0x19c, Size: 0x4]
	float CurSelectStartTime;//[Offset: 0x1a0, Size: 0x4]
	float CurSelectLeftTime;//[Offset: 0x1a4, Size: 0x4]
	float CurSelectEndTime;//[Offset: 0x1a8, Size: 0x4]
	int CurSelectTeamIdx;//[Offset: 0x1ac, Size: 0x4]
	void StageUpdatePerSecond();// 0x260c2ec
	void OnSelectLegendTimeOut();// 0x260c1b0
	void OnSelectingReconnected();// 0x260c314
	void OnRep_CurStageStartTime();// 0x2ce6f18
	void OnRep_CurStageLeftTime();// 0x2ce6f18
	void OnRep_CurStageIndex();// 0x260c1ec
	void OnRep_CurStageEndTime();// 0x2ce6f18
	void OnRep_CurSelectTeamIdx();// 0x260c1d8
	void OnRep_CurSelectStartTime();// 0x2ce6f18
	void OnRep_CurSelectLeftTime();// 0x260c1c4
	void OnRep_CurSelectEndTime();// 0x2ce6f18
	void OnReceivedCurSelectStartTime();// 0x2ce6f18
	bool IsSelecting();// 0x260c200
	bool IsLegendAvailableFor(ApexPlayerState* PlayerState, int LegendId);// 0x260c228
	void BeginSelect();// 0x260c300

--------------------------------
Class: GameModeStageSelectLegend.GameModeStage.Object
	enum LegendRandomMode;//[Offset: 0x35, Size: 0x1]
	GameStateSelectLegendComp* GameStateSelectLegendComp;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeStage.Object
	enum StageType;//[Offset: 0x1c, Size: 0x1]
	float CurrentDuration;//[Offset: 0x20, Size: 0x4]
	float StageDuration;//[Offset: 0x24, Size: 0x4]
	int EnterStageTimes;//[Offset: 0x28, Size: 0x4]
	float EnterStageTime;//[Offset: 0x2c, Size: 0x4]
	ApexGameMode* OwningGameMode;//[Offset: 0x30, Size: 0x4]
	void SetLeftTime(int InLeftTime);// 0x25f2768
	void OnTimeout();// 0xfe936c
	void K2_OnPostLogin();// 0x2ce6f18
	void K2_OnExit();// 0x2ce6f18
	void K2_OnEnter();// 0x2ce6f18
	bool IsTimeout();// 0x25f27e0
	void GotoNextStage();// 0x106b010
	float GetRunningTime();// 0x25f2718
	ApexGameMode* GetOwnerGameMode();// 0x25f26fc
	float GetLeftTime();// 0x25f2740

--------------------------------
Class: ApexGameMode.GameMode.GameModeBase.Info.Actor.Object
	KillDropBase* KillDrop;//[Offset: 0x32c, Size: 0x4]
	bool bTeamDeathContinueOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bIsAllLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	GameModeCommonInfo GameModeCommonInfo;//[Offset: 0x344, Size: 0x18]
	GameModeStageMgr* GameModeStageMgr;//[Offset: 0x35c, Size: 0x4]
	ChapterMgrComponent* ChapterMgr;//[Offset: 0x360, Size: 0x4]
	DynamicItemGenerator* DynamicItemGenerator;//[Offset: 0x364, Size: 0x4]
	PickupItemGeneratorComponent* PickupItemGeneratorComponent;//[Offset: 0x368, Size: 0x4]
	GameModeInGameActivityMgr* InGameActivityMgr;//[Offset: 0x36c, Size: 0x4]
	PickupItemGeneratorComponent* PickupGenerator;//[Offset: 0x370, Size: 0x4]
	GameModeBattleResultComp* BattleResultComp;//[Offset: 0x374, Size: 0x4]
	BinManager* BinMgr;//[Offset: 0x378, Size: 0x4]
	LevelDirector* LevelDirector;//[Offset: 0x384, Size: 0x4]
	SoftClassPath[] AIControllerClass;//[Offset: 0x3a8, Size: 0xc]
	SoftClassPath[] DeliverAIControllerClass;//[Offset: 0x3b4, Size: 0xc]
	SoftClassPath AITeamManagerClass;//[Offset: 0x3c0, Size: 0x14]
	SoftClassPath MetaAIManagerClass;//[Offset: 0x3d4, Size: 0x14]
	SoftClassPath AIHostControllerClass;//[Offset: 0x3e8, Size: 0x14]
	MetaAIController* MetaAIManager;//[Offset: 0x3fc, Size: 0x4]
	AIComponent* RegisterAIComponent;//[Offset: 0x400, Size: 0x4]
	DSControllerComponent* RegisterDSControllerComponent;//[Offset: 0x404, Size: 0x4]
	SelectLegendTLogComponent* SelectLegendTLogComponent;//[Offset: 0x408, Size: 0x4]
	GameModeTeamMgrComp* GameModeTeamMgrComponent;//[Offset: 0x40c, Size: 0x4]
	<AIWorldVolume*> AIWorldVolumeSet;//[Offset: 0x410, Size: 0x3c]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x460, Size: 0x4]
	Vector AISpawnLocation;//[Offset: 0x464, Size: 0xc]
	Vector AILandLocation;//[Offset: 0x470, Size: 0xc]
	float FreefallVelocityFactor;//[Offset: 0x47c, Size: 0x4]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	<enum> NeedDestroySpawnReasonSet;//[Offset: 0x484, Size: 0x3c]
	bool bEnableTrainingModeImpactGroundLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	float TrainingModeImpactGroundLifeTime;//[Offset: 0x4c4, Size: 0x4]
	float TrainingModeDropLifeTime;//[Offset: 0x4c8, Size: 0x4]
	<int,float> QualityToDropLifeTime;//[Offset: 0x4cc, Size: 0x3c]
	bool bEnableTrainingModeDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	ParticleSystem* TrainingModeDestroyEffect;//[Offset: 0x50c, Size: 0x20]
	DynamicSpawnComponent* DynamicSpawnComponent;//[Offset: 0x52c, Size: 0x4]
	float CharacterNetCullDistanceSquared_Normal;//[Offset: 0x530, Size: 0x4]
	float CharacterNetCullDistanceSquared_InSky;//[Offset: 0x534, Size: 0x4]
	class RespawnAircraftCharacter* RespawnAircraftCharacterBP;//[Offset: 0x550, Size: 0x4]
	MapEdgeVolume*[] MapEdgeVolumeArray;//[Offset: 0x554, Size: 0xc]
	FName HeroConfigTable;//[Offset: 0x560, Size: 0x8]
	int TestBucketID;//[Offset: 0x568, Size: 0x4]
	ApexGameSettings GameSettings;//[Offset: 0x56c, Size: 0x40]
	bool bRepAllPlayerStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	int VisualSoundMaxBucketIdx;//[Offset: 0x5b0, Size: 0x4]
	bool CanOBWorldObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	bool CanObFinalKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 0x1]
	bool bUseGameModeDyingTimeCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 0x1]
	uint16[] CfgDyingTimeoutSec;//[Offset: 0x5b8, Size: 0xc]
	bool bUseGameModeRespawningTimeCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1]
	uint16 CfgRespawningTimeoutSec;//[Offset: 0x5c6, Size: 0x2]
	uint16 CfgShownRespawningTimeoutSec;//[Offset: 0x5c8, Size: 0x2]
	Vector RespawnAircraftDefaultBornOffset;//[Offset: 0x5cc, Size: 0xc]
	byte CfgForbiddenZoneTime;//[Offset: 0x5d8, Size: 0x1]
	bool bTestMidJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	EditorPlayerLoginInfo[] EditorPlayerLoginInfos;//[Offset: 0x5e0, Size: 0xc]
	bool bKeepBackpackWhenNoTome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	int LegendIdOverride;//[Offset: 0x5f4, Size: 0x4]
	RespawnAircraftCharacter* SpawnRespawnAircraft(Transform SpawnTransform);// 0x245c6c0
	Actor* SpawnDynamicRespawnBeacon(Transform InTransform, Pawn* InInstigator);// 0x245c380
	Pawn* SpawnCustomPawnFor(Controller* NewPlayer, Actor* StartSpot, bool bAutonomous);// 0x245e1fc
	Pawn* SpawnCustomPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform, bool bAutonomous);// 0x245e050
	bool ShouldPlayerLogin();// 0x245d064
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x245d5f4
	bool QueryCanSelectLegend();// 0x245df98
	void OnMsg(FString Msg);// 0x245d384
	void OnLevelAddedToWorld(Level* Level, World* World);// 0x245d2c8
	void OnGameEnterFinish();// 0x245cc04
	void OnGameEnterFight();// 0x245cc20
	void NotifyRespawnBeaconActivate();// 0x245c4fc
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDelayToDestroyPC, byte Reason);// 0x245cc3c
	void NotifyPlayerEnter(uint32 PlayerKey);// 0x245cda0
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x245c814
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x245d430
	void LeaveOBModeAbnormal(Controller* EscapePlayer);// 0x245d6b8
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent, int ComboKill, bool bIsShutDown, const uint32[] AssisterKeys, Controller* RealKiller);// 0x245da28
	void KickOutPlayerById(uint64 UID, enum Reason, FString BanReasonText);// 0x245c90c
	void KickOutPlayer(PlayerController* TargetController, enum Reason, FString BanReasonText);// 0x245ca90
	bool IsTeamAlive(ApexPlayerState* PlayerState);// 0x245cf64
	bool IsPlayerAlive(ApexPlayerState* PlayerState);// 0x245cfe4
	bool IsCampAliveByGameStatistics(ApexPlayerState* PlayerState);// 0x245ce64
	bool IsCampAlive(ApexPlayerState* PlayerState);// 0x245cee4
	bool IsAllLevelsLoaded();// 0x245d2a0
	void HeartBeat();// 0x245d41c
	void GotoDying(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x245d8b4
	FName GetOBCameraTag();// 0x245dd48
	MetaAIController* GetMetaAIManager();// 0x245c7ec
	GameModeStageMgr* GetGameModeStageMgr();// 0x245ce20
	GameModeCommonInfo GetGameModeCommonInfo();// 0x245ce3c
	class AIController GetDefaultAIControllerClass(int I);// 0x245c88c
	class Object GetCustomPawnClassForController(Controller* InController);// 0x245dfc8
	BinManager* GetBinManager();// 0x23f8160
	ApexPlayerState* FindPlayerStateByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x245d1d8
	ApexPlayerController* FindPlayerControllerWithUID(uint64 UID);// 0x245d08c
	ApexPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x245d110
	void Escape(Controller* EscapePlayer, ApexPlayerState* EscapePawn, FString EndReason);// 0x245d738
	void ChangeLegendWithSkill(int HeroID, ApexPlayerController* Controller, int SkillBpIndex);// 0x245dd90
	void ChangeLegend(int HeroID, ApexPlayerController* Controller, bool bNeedQuery);// 0x245de90
	bool CanEnterOBMode(ApexPlayerController* Target);// 0x245c2f4
	void BestRespawnAircraftTransform(out const Vector StartLocation, out const Vector EndLocation, out Transform ResultTransform);// 0x245c510

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2b4, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	int NumSpectators;//[Offset: 0x2c0, Size: 0x4]
	int NumPlayers;//[Offset: 0x2c4, Size: 0x4]
	int NumBots;//[Offset: 0x2c8, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2cc, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2d0, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2d4, Size: 0x4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2d8, Size: 0xc]
	float InactivePlayerStateLifeSpan;//[Offset: 0x2e4, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x2e8, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	void StartMatch();// 0x2492760
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x46a49cc
	void Say(FString Msg);// 0x46a4a4c
	void RestartGame();// 0x2595ad0
	bool ReadyToStartMatch();// 0x46a4b14
	bool ReadyToEndMatch();// 0x46a4ae4
	void K2_OnSetMatchState(FName NewState);// 0x2ce6f18
	bool IsMatchInProgress();// 0x46a4b44
	bool HasMatchEnded();// 0x2773758
	FName GetMatchState();// 0x46a4b74
	void EndMatch();// 0x2674ed4
	void AbortMatch();// 0x2492608

--------------------------------
Class: KillDropBase.Object

--------------------------------
Class: RespawnAircraftCharacter.Pawn.Actor.Object
	enum CurrentState;//[Offset: 0x260, Size: 0x1]
	float ATiming;//[Offset: 0x264, Size: 0x4]
	bool bLoadCharacters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	ApexCharacter* SyncRespawnCharacter1;//[Offset: 0x26c, Size: 0x4]
	ApexCharacter* SyncRespawnCharacter2;//[Offset: 0x270, Size: 0x4]
	ApexCharacter* RespawnCharacterWeak1;//[Offset: 0x274, Size: 0x8]
	ApexCharacter* RespawnCharacterWeak2;//[Offset: 0x27c, Size: 0x8]
	enum RespawnCharacterState1;//[Offset: 0x284, Size: 0x1]
	enum RespawnCharacterState2;//[Offset: 0x285, Size: 0x1]
	Controller* RespawnInstigater;//[Offset: 0x288, Size: 0x8]
	Controller*[] ObserveControllers;//[Offset: 0x290, Size: 0xc]
	FName[] SocketArray;//[Offset: 0x29c, Size: 0xc]
	AnimationAsset*[] ExitHatchAnimList;//[Offset: 0x2a8, Size: 0xc]
	float[] ExitHatchTime;//[Offset: 0x2b4, Size: 0xc]
	CameraAnim*[] ExitHatchCameraAnims;//[Offset: 0x2c0, Size: 0xc]
	float HoverTime;//[Offset: 0x2cc, Size: 0x4]
	float ExitTime;//[Offset: 0x2d0, Size: 0x4]
	float DestroyTime;//[Offset: 0x2d4, Size: 0x4]
	bool bFastRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	void OnRep_RespawnCharacter2(ApexCharacter* PrevInfo);// 0x273b4d0
	void OnRep_RespawnCharacter1(ApexCharacter* PrevInfo);// 0x273b548
	void LoadCharacters();// 0x273b3f0
	bool GetCustomActorLocation(out Vector NewPosition, int PingIndex);// 0x273b2f8
	void ExitHatch();// 0x2492d94
	void EnterHover();// 0x2492db0
	void AircraftDestroy();// 0x273b3d4
	void AddObserveController(Controller* InInstigater, Controller* ObserveController);// 0x273b40c

--------------------------------
Class: GameModeStageMgr.ActorComponent.Object
	GameModeStage* CurrentStage;//[Offset: 0xac, Size: 0x4]
	<enum,GameModeStage*> MapStageType2GameModeStage;//[Offset: 0xb0, Size: 0x3c]
	GameModeStageActive* GameModeStageActive;//[Offset: 0xec, Size: 0x4]
	GameModeStageSelectLegend* GameModeStageSelectLegend;//[Offset: 0xf0, Size: 0x4]
	GameModeStageReady* GameModeStageReady;//[Offset: 0xf4, Size: 0x4]
	GameModeStageFighting* GameModeStageFighting;//[Offset: 0xf8, Size: 0x4]
	GameModeStageFinished* GameModeStageFinished;//[Offset: 0xfc, Size: 0x4]
	void Step();// 0x25f3434
	void Jump(enum NextStageType);// 0x25f33bc
	enum GetCurrentStateType();// 0x25f3394
	GameModeStage* GetCurrentState();// 0x256b47c
	void Finish();// 0x25f3448

--------------------------------
Class: GameModeStageActive.GameModeStage.Object
	float SyncDuration;//[Offset: 0x38, Size: 0x4]
	bool bPreCreateController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: GameModeStageReady.GameModeStage.Object

--------------------------------
Class: GameModeStageFighting.GameModeStage.Object

--------------------------------
Class: GameModeStageFinished.GameModeStage.Object
	float StateTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeCommonInfo
	Vector MapCenter;//[Offset: 0x0, Size: 0xc]
	float ParachuteFreeFall2SlowDownDetectLength;//[Offset: 0xc, Size: 0x4]
	float ParachuteBack2FreeFallDetectOffset;//[Offset: 0x10, Size: 0x4]
	float ParachuteForceLandingHeight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ChapterMgrComponent.ActorComponent.Object
	ChapterBase*[] ActiveChapters;//[Offset: 0xa8, Size: 0xc]
	ChapterParams MgrParams;//[Offset: 0xb4, Size: 0xc]
	Stage_ChapterLink[] Setting;//[Offset: 0xc0, Size: 0xc]
	ChapterBase* CurrentChapter;//[Offset: 0xcc, Size: 0x4]
	bool bApplyChapterMgr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	ApexGameMode* GM;//[Offset: 0xd4, Size: 0x4]
	void OnStageChanged(out const GameModeStateChangedParams Params);// 0x255d1c4
	void MoveChapter();// 0x255d540
	void InsertChapterToHead(ChapterBase* NewChapter);// 0x255d4c8
	ApexGameState* GetApexGameState();// 0x255d144
	void CreateChapterDynamicAndInsertToQueHead(ChapterBase* Outer, class ChapterBase Class);// 0x255d348
	ChapterBase* CreateChapterDynamic(ChapterBase* Outer, class ChapterBase Class);// 0x255d404
	void CreateChapterArrAndInsertToQueTail(ChapterBase* Outer, out const ChapterBindItem[] Chapters);// 0x255d248

--------------------------------
Class: ChapterBase.Object
	ChapterParams ChapterParams;//[Offset: 0x20, Size: 0xc]
	ChapterType_Tracks EnterTriggerBinds;//[Offset: 0x2c, Size: 0xc]
	ChapterType_Tracks ExecuteTriggerBinds;//[Offset: 0x38, Size: 0xc]
	ChapterType_Tracks ExitTriggerBinds;//[Offset: 0x44, Size: 0xc]
	<FString,ChapterType_Tracks> OtherTriggerBindsMap;//[Offset: 0x50, Size: 0x3c]
	enum GameStage;//[Offset: 0x8c, Size: 0x1]
	FString ChapterName;//[Offset: 0x90, Size: 0xc]
	ChapterEndCheck* EndCondition;//[Offset: 0x9c, Size: 0x4]
	FString Describe;//[Offset: 0xa0, Size: 0xc]
	ChapterMgrComponent* Owner;//[Offset: 0xac, Size: 0x4]
	void TriggerTrack(FString theTriggerType);// 0x255c3e4
	void Resume();// 0xfe936c
	void Pause();// 0x1014170
	void InitParam();// 0x2ce6f18
	void Exit();// 0x255c4f8
	void Execute(float DeltaSeconds);// 0x255c514
	void Enter();// 0x255c594
	void ChangeRemainingTime(float DeltTime);// 0x24ab390
	void ChangeParam(FString TriggerType, FString TrackName, FString ParamName, out const enum ParamType, FString Value);// 0x255c5b0
	bool CanEnter();// 0x255c4c8

--------------------------------
Class: ChapterType_Tracks
	ChapterType_TrackLink[] TrackLinks;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ChapterEndCheck.Object
	bool Check();// 0xfe933c

--------------------------------
Class: GameModeStateChangedParams
	enum GameModeStageType;//[Offset: 0x0, Size: 0x1]
	float GameModeStageDuration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Stage_ChapterLink
	enum GameStage;//[Offset: 0x0, Size: 0x1]
	ChapterBindItem[] ChapterArr;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ChapterBindItem
	class ChapterBase* ChapterClass;//[Offset: 0x0, Size: 0x4]
	<FString,ChapterType_Tracks> TrackBinds;//[Offset: 0x4, Size: 0x3c]
	class ChapterEndCheck* EndCondition;//[Offset: 0x40, Size: 0x4]
	<FName,float> FloatArgs;//[Offset: 0x44, Size: 0x3c]

--------------------------------
Class: DynamicItemGenerator.BaseGeneratorComponent.ActorComponent.Object
	DynamicItemSpawnDataAsset* DynamicItemSpawnDataAsset;//[Offset: 0xac, Size: 0x20]
	DynamicItemSpawnDataAsset* DynamicSpawnData;//[Offset: 0xd0, Size: 0x4]
	DynamicItemSpawnerAbstract*[] SpawnInfos;//[Offset: 0xd4, Size: 0xc]
	void ResetDynamicSpawnInfos();// 0x25b18a8

--------------------------------
Class: BaseGeneratorComponent.ActorComponent.Object
	int GenerateCountPerTick;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: DynamicItemSpawnDataAsset.DataAsset.Object
	<enum,DynamicItemSpawnConfig> DynamicItemSpawnConfigMap;//[Offset: 0x20, Size: 0x3c]
	void WinterWarfareDiamondCollect();// 0x25b1e28
	void WinterWarfareBinCollect();// 0x25b1e3c
	void SurveyBeaconCollect();// 0x25b1ea0
	void SporeCollect();// 0x25b1e64
	void RowdyCollect();// 0x25b1e14
	void RespawnBeaconCollect();// 0x25b1eb4
	void ReplicateHarvesterCollect();// 0x25b1e50
	void GunRackCollect();// 0x25b1e8c
	void CureBeaconCollect();// 0x25b1e78

--------------------------------
Class: DynamicItemSpawnConfig
	enum ItemType;//[Offset: 0x0, Size: 0x1]
	class Actor* DynamicItemClass;//[Offset: 0x4, Size: 0x4]
	enum DynamicItemSpawnType;//[Offset: 0x8, Size: 0x1]
	DynamicItemSpawnFilterBase*[] SpawnFilterArray;//[Offset: 0xc, Size: 0xc]
	DynamicItemSpawnerAbstract*[] DynamicItemObjDataArray;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: DynamicItemSpawnFilterBase.Object

--------------------------------
Class: DynamicItemSpawnerAbstract.Object
	enum ItemType;//[Offset: 0x1c, Size: 0x1]
	class Actor* ItemClass;//[Offset: 0x20, Size: 0x4]
	Transform Trans;//[Offset: 0x30, Size: 0x30]
	void ExecCollectConfig();// 0x106b010

--------------------------------
Class: PickupItemGeneratorComponent.BaseGeneratorComponent.ActorComponent.Object
	ApexGameMode* SavedGamemode;//[Offset: 0xbc, Size: 0x4]
	PickupSpawner* Spawner;//[Offset: 0xc0, Size: 0x4]
	UAEDataTable* MapItemControlTable;//[Offset: 0xc4, Size: 0x4]
	FString GameModeID;//[Offset: 0xc8, Size: 0xc]
	bool IsHaveAdditionalItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	float ChangePercent;//[Offset: 0xd8, Size: 0x4]
	FString[] ChangeZoneIDs;//[Offset: 0xdc, Size: 0xc]
	float[] ZoneChangePercents;//[Offset: 0xe8, Size: 0xc]
	int[] AdditionalItemsIDs;//[Offset: 0xf4, Size: 0xc]
	int[] AdditionalItemsNums;//[Offset: 0x100, Size: 0xc]
	int[] KeepItemsIDs;//[Offset: 0x10c, Size: 0xc]
	int[] RemoveItemsIDs;//[Offset: 0x118, Size: 0xc]
	bool bIsLevelLoadFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	bool bIsGameModeItemInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]
	PickupItemDataReporter* PickupItemDataReporter;//[Offset: 0x1a0, Size: 0x4]
	FString ModeItemJsonPath;//[Offset: 0x1a4, Size: 0xc]
	FString ItemConfigFilePath;//[Offset: 0x1b0, Size: 0xc]
	FString[] LootTables;//[Offset: 0x1bc, Size: 0xc]
	<FString,FString> LootTableConvertMap;//[Offset: 0x1c8, Size: 0x3c]
	FString BinBpPath;//[Offset: 0x204, Size: 0xc]
	class BinActor* BinActorClass;//[Offset: 0x210, Size: 0x4]
	int BlandId;//[Offset: 0x214, Size: 0x4]
	int MinDis2Obstacle;//[Offset: 0x218, Size: 0x4]
	int Dis2Ground;//[Offset: 0x21c, Size: 0x4]
	<FName> FeatureFlagSet;//[Offset: 0x220, Size: 0x3c]
	int BinSpawnItemRetryCount;//[Offset: 0x25c, Size: 0x4]
	int BinMinItemCount;//[Offset: 0x260, Size: 0x4]
	FString DynamicProbFormat;//[Offset: 0x264, Size: 0xc]
	<int,int> LimitCountItemIDToCount;//[Offset: 0x270, Size: 0x3c]
	int DynamicProbIndex;//[Offset: 0x2ac, Size: 0x4]
	delegate OnPickupItemGeneratorInitConfigFinish;//[Offset: 0x2b4, Size: 0xc]
	<FName> ForceLogPosNames;//[Offset: 0x2d8, Size: 0x3c]
	void ResetLootObjectInfo();// 0x26e7594
	void PickupItemGeneratorInitConfigFinish__DelegateSignature();// 0x2ce6f18

--------------------------------
Class: PickupSpawner.ActorComponent.Object
	<FString,class Object> PathToClassCache;//[Offset: 0xec, Size: 0x3c]
	<enum,SpawnItemHistory> SpawnItemHistoryMap;//[Offset: 0x128, Size: 0x3c]

--------------------------------
Class: SpawnItemHistory

--------------------------------
Class: PickupItemDataReporter.Object

--------------------------------
Class: GameModeInGameActivityMgr.ActorComponent.Object
	<int,UseActivityConfigData> UseActivityConfigMap;//[Offset: 0xb0, Size: 0x3c]
	<int,InGameActivityDataBase*> AllServerActivityDataMap;//[Offset: 0xec, Size: 0x3c]
	bool IsActivityEnable(int InActivityType);// 0x25ed404
	InGameActivityDataBase* GetActivityData(int InActivityType);// 0x25ed484

--------------------------------
Class: InGameActivityDataBase.Object
	int ActivityType;//[Offset: 0x1c, Size: 0x4]
	int64 StartTime;//[Offset: 0x20, Size: 0x8]
	int64 TimeOffset;//[Offset: 0x28, Size: 0x8]
	int Priority;//[Offset: 0x30, Size: 0x4]
	int64 EndTime;//[Offset: 0x38, Size: 0x8]
	FString[] ActivityParams;//[Offset: 0x40, Size: 0xc]
	int[] ActivityItemIDArray;//[Offset: 0x4c, Size: 0xc]

--------------------------------
Class: UseActivityConfigData
	class InGameActivityDataBase* ActivityDataClass;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameModeBattleResultComp.ActorComponent.Object
	BattleResultDataGenerator* DataGenerator;//[Offset: 0xa8, Size: 0x4]
	GameStatisticsManager* StatisticsMgr;//[Offset: 0xac, Size: 0x4]
	ApexGameMode* OwningGameMode;//[Offset: 0x130, Size: 0x4]
	bool bCheckPlayerNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	<uint32,SimpleBattleResultData> SimpleResultDataMap;//[Offset: 0x138, Size: 0x3c]
	UAEDataTable* ParameterIntegerDataTable;//[Offset: 0x174, Size: 0x4]
	void OnPlayerLogout(PlayerController* LogoutPC);// 0x25e10a0
	bool IsFightingTimeout();// 0x25e11b4
	void HandleGameOver(ApexPlayerState* PlayerState);// 0x25836a4
	void HandleGameFinished();// 0x24052d8
	int[] GetAllCampIDs();// 0x25e1120
	bool CheckToHandleGameOver(ApexPlayerState* PlayerState);// 0x25e1264
	bool CheckToHandleGameFinished();// 0x242e244
	bool CheckGameOver(ApexPlayerState* PlayerState);// 0x25e11dc
	bool CheckGameFinished();// 0x257db94

--------------------------------
Class: BattleResultDataGenerator.Object
	GameStatisticsManager* StatisticsMgr;//[Offset: 0x1c, Size: 0x4]
	GameModeBattleResultComp* LogicControl;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BinManager.ActorComponent.Object
	float BlueBinRate;//[Offset: 0xa8, Size: 0x4]
	float BlueBinBanRadiusSquare;//[Offset: 0xac, Size: 0x4]
	BlueBinGroupSet[] GroupSet;//[Offset: 0xb0, Size: 0xc]
	SpatialBinConfig[] SpatialGroupSet;//[Offset: 0xbc, Size: 0xc]
	void SetBin();// 0x253f7e0

--------------------------------
Class: BlueBinGroupSet
	int GroupID;//[Offset: 0x0, Size: 0x4]
	float GroupRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SpatialBinConfig
	FName Name;//[Offset: 0x0, Size: 0x8]
	int Num;//[Offset: 0x8, Size: 0x4]
	float GroupRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AIComponent.ActorComponent.Object
	int[] ScheduleTargetVec;//[Offset: 0xa8, Size: 0xc]
	Actor*[] ZoneLocs;//[Offset: 0xb4, Size: 0xc]
	bool IsSkipCreateAICharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	ApexGameMode* OwningGameMode;//[Offset: 0x13c, Size: 0x4]
	int TestIsRanking;//[Offset: 0x368, Size: 0x4]
	int TestBucketID;//[Offset: 0x36c, Size: 0x4]
	int TestBonusMatch;//[Offset: 0x370, Size: 0x4]
	FString TestModeID;//[Offset: 0x374, Size: 0xc]
	bool IsKDEROverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	float TestKDERAvg;//[Offset: 0x384, Size: 0x4]
	float TestKDERNum;//[Offset: 0x388, Size: 0x4]
	bool IsReportKDERInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	bool IsOnlyBRMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 0x1]
	int TestPlayerAILevel;//[Offset: 0x390, Size: 0x4]
	float CheckTraceDistance;//[Offset: 0x394, Size: 0x4]
	int StuckLogLimitNum;//[Offset: 0x398, Size: 0x4]
	float CollectRangeCheck;//[Offset: 0x3a0, Size: 0x4]
	float DuplicateLegendsCheckDis;//[Offset: 0x3a4, Size: 0x4]
	int TeamSize;//[Offset: 0x3a8, Size: 0x4]
	uint32 TestAINum;//[Offset: 0x3ac, Size: 0x4]
	Vector StoreLocation;//[Offset: 0x3b0, Size: 0xc]
	float RandomRadius;//[Offset: 0x3bc, Size: 0x4]
	bool bEnableSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	GMAIConfig[] SpawnAIConfig;//[Offset: 0x3c4, Size: 0xc]
	bool IsDelayConfirmLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	Vector2D DelayInterval;//[Offset: 0x3d4, Size: 0x8]
	bool OpenSameWeaponGunCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	<enum,ItemTypeArray> AIItemMap;//[Offset: 0x3e0, Size: 0x3c]
	Vector2D AddAmmoCount;//[Offset: 0x41c, Size: 0x8]
	bool OpenDynamicAILevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	bool OpenShadowMirageTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]
	uint32 ShadowMirageParallelTrigger;//[Offset: 0x7ac, Size: 0x4]
	float ShadowMirageClimbLinkZOffSet;//[Offset: 0x7b0, Size: 0x4]
	float ClimbLinkVerticalAngle;//[Offset: 0x7b4, Size: 0x4]
	float AbortTutorialDistance;//[Offset: 0x7b8, Size: 0x4]
	float StartSecondsAfterLand;//[Offset: 0x7bc, Size: 0x4]
	float ShadowMirageCheckAroundEnemyDis;//[Offset: 0x7c0, Size: 0x4]
	ShadowMirageTutorialConfig[] TutorialConfig;//[Offset: 0x7c4, Size: 0xc]
	bool OpenPoisonGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 0x1]
	bool FreezeTransfer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d1, Size: 0x1]
	<int,int> FreezeTransferItemMap;//[Offset: 0x7d4, Size: 0x3c]
	bool KillTransfer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 0x1]
	<int,float> KillTransferItemID;//[Offset: 0x850, Size: 0x3c]
	<int,int> KillITransfertemMap;//[Offset: 0x88c, Size: 0x3c]
	bool EnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1]
	<int,int> ActivityItem;//[Offset: 0x8cc, Size: 0x3c]
	void SleepAI(Vector Origin, float Range, int Switch);// 0x23e7c2c
	void OnStageFinished(out const GameModeStateChangedParams Params);// 0x23e79bc
	void OnStageChanged(out const GameModeStateChangedParams Params);// 0x23e7a40
	void OnPlayerRebirth(ApexPlayerState* PS);// 0x23e7820
	void OnPlayerRealKilled(Controller* RealKiller, Controller* VictimPlayer, out const DamageEvent DamageEvent);// 0x23e7898
	void OnPlayerKilled(Controller* Killer, Controller* Victim, out const DamageEvent DmgEvent);// 0x23e7e70
	void OnPlayerGoToDying(Controller* Killer, Controller* Victim, out const DamageEvent DmgEvent);// 0x23e7f94
	void OnPlayerDamage(Controller* Causer, Controller* Victim, out const DamageEvent DamageEvent, float BodyDamage, float ShieldDamage, byte ResultStatus);// 0x23e80b8
	void GenerateAIItemBp(ApexAIController* AIC, int[] EquipIDs, int Time);// 0x23e7ac4
	void AITombboxFilter(ApexAIController* AIC, out PickUpItemData[] Items);// 0x23e7d30

--------------------------------
Class: GMAIConfig
	int AITeam;//[Offset: 0x0, Size: 0x4]
	int AICamp;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ItemTypeArray
	int[] Items;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ShadowMirageTutorialConfig
	enum Type;//[Offset: 0x0, Size: 0x1]
	float TriggerDistance;//[Offset: 0x4, Size: 0x4]
	float TriggerAngleInRadian;//[Offset: 0x8, Size: 0x4]
	int MaxCount;//[Offset: 0xc, Size: 0x4]
	float CD;//[Offset: 0x10, Size: 0x4]
	int LoopTime;//[Offset: 0x14, Size: 0x4]
	float TriggerInterval;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: DSControllerComponent.ActorComponent.Object

--------------------------------
Class: SelectLegendTLogComponent.ActorComponent.Object
	void ChooseFinish(ApexPlayerState* PlayerState);// 0x2747bd0

--------------------------------
Class: GameModeTeamMgrComp.ActorComponent.Object
	int RealTeamNum;//[Offset: 0xac, Size: 0x4]
	ApexGameMode* OwnerGameMode;//[Offset: 0xb0, Size: 0x4]
	bool IsNeedShowAIDefenderTeamByLimitRank;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int ShowAIDefenderTeamLimitRank;//[Offset: 0xf4, Size: 0x4]
	<int,ApexTeamState*> TeamStateMap;//[Offset: 0x170, Size: 0x3c]
	delegate OnTeamStateSpawned;//[Offset: 0x1ac, Size: 0xc]
	delegate OnTeamStateDestroyed;//[Offset: 0x1b8, Size: 0xc]
	void RemoveRecoverBanner(int TeamID, uint32 PlayerKey);// 0x25f4190
	int RecoverBannerNum(int TeamID);// 0x25f3fd4
	void OnTeamStateSpawned__DelegateSignature(ApexTeamState* TeamState);// 0x2ce6f18
	void OnTeamStateDestroyed__DelegateSignature(ApexTeamState* TeamState);// 0x2ce6f18
	void OnPlayerEnterFightStage();// 0x25f44d8
	bool HasRecoverBanner(int TeamID, uint32 PlayerKey);// 0x25f4054
	ApexPlayerState*[] GetDefenderTeam();// 0x25f4444
	ApexPlayerState*[] ConvertWeakPtrTeam(ApexPlayerState*[] WeakPtrTeam);// 0x25f4308
	void ClearRecoverBanner(int TeamID);// 0x25f4118
	void AddRecoverBanner(int TeamID, uint32 PlayerKey);// 0x25f424c

--------------------------------
Class: AIWorldVolume.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x1f8, Size: 0x4]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 0x1]
	class Object[] CachedTagClasses;//[Offset: 0x200, Size: 0xc]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x268, Size: 0x3c]
	ParachutePoint*[] ALLParachutePoint;//[Offset: 0x2a4, Size: 0xc]
	void SaveTagActors();// 0x23f0610
	void OnActorSpawned(Actor* Actor);// 0x23f0598
	void GetTagActors(const Object* Context, class Object Class, FName Tag, out Actor*[] OutActors);// 0x23f0428
	void GetCacheActors(const Object* Context, class Object Class, out Actor*[] OutActors);// 0x23f0308

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x1d0, Size: 0x4]
	int TeamID;//[Offset: 0x1d4, Size: 0x4]
	WayPointLink[] Links;//[Offset: 0x1d8, Size: 0xc]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x1e4, Size: 0x4]
	BillboardComponent* ShowSprite;//[Offset: 0x1e8, Size: 0x4]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DynamicSpawnComponent.ActorComponent.Object
	ApexGameMode* SavedGamemode;//[Offset: 0xa8, Size: 0x4]
	class LevelDirector* LevelDirectorClass;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MapEdgeVolume.Volume.Brush.Actor.Object
	bool bIsMapCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]

--------------------------------
Class: EditorPlayerLoginInfo
	FString PlayerNameOption;//[Offset: 0x0, Size: 0xc]
	uint32 PlayerKeyOption;//[Offset: 0xc, Size: 0x4]
	FString NameOption;//[Offset: 0x10, Size: 0xc]
	int PlayerIndex;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SelectStateManger.Object
	GameStateSelectLegendComp* DataCenterComp;//[Offset: 0x1c, Size: 0x4]
	SelectLegendWidgetBase* CurrentStage;//[Offset: 0x34, Size: 0x4]
	bool bHiddenHisUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	<enum,SoftClassPath> Stage_PathClassMap;//[Offset: 0x40, Size: 0x3c]
	AkAudioEvent*[] BGMs;//[Offset: 0x7c, Size: 0xc]
	FString StateValue;//[Offset: 0x88, Size: 0xc]
	<enum,SelectLegendWidgetBase*> Stage_WidgetInstanceMap;//[Offset: 0x94, Size: 0x3c]
	float LoadingThreshold;//[Offset: 0xf4, Size: 0x4]
	void UnLoadDisplayCharacterClass();// 0x2ce6f18
	void UnLoadBattleUI();// 0x2ce6f18
	void UIInit(SelectLegendWidgetBase* Widget);// 0x2ce6f18
	void SwitchLoading(bool bLoading);// 0x2ce6f18
	void ShowModeAtSlot();// 0x2ce6f18
	void ShowLegendModel(int legend_id, FName ani_name, int skin_id, bool with_effect, bool no_hide_pre_effect);// 0x2ce6f18
	void ShowBoard();// 0x2ce6f18
	void PreLoadLevel(SelectLegendWidgetBase* Widget);// 0x27493f8
	Object* OpenSelectUI(FString Path);// 0x2ce6f18
	void OnInitSelectStage();// 0x2ce6f18
	void OnFinishSelectStage();// 0x2ce6f18
	void OnEnsureEnterState(FString UIDefine);// 0x2ce6f18
	void OnClientExitGame();// 0x2749224
	void OnClassLoaded();// 0x2749470
	void NetConnectCheck();// 0x2749484
	void LuaInstanceInit();// 0x2ce6f18
	void LoadDisplayCharacterClass();// 0x2ce6f18
	void EnsureEnterNext(SelectLegendWidgetBase* StateWidget);// 0x2749380
	BattleReusltStateWidget* CreateUMG(FString UIDefine);// 0x2ce6f18
	void CloseUMG(FString UIDefine);// 0x2ce6f18
	void CloseSelectUI(FString Path);// 0x2ce6f18
	void ClearUnluaRegisterClass();// 0x2ce6f18
	bool ChangeTo(int CurrentIndex, SelectStageConfig StateConfig);// 0x2749238

--------------------------------
Class: SelectLegendWidgetBase.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	AkAudioEvent*[] StateBGMs;//[Offset: 0x2d8, Size: 0xc]
	SelectLegendWidgetBase* MainStateWidget;//[Offset: 0x2e4, Size: 0x4]
	SelectStageConfig Config;//[Offset: 0x2e8, Size: 0x14]
	GameStateSelectLegendComp* DataCenter;//[Offset: 0x308, Size: 0x4]
	SelectStateManger* SelectManager;//[Offset: 0x30c, Size: 0x4]
	enum StageHandle;//[Offset: 0x310, Size: 0x1]
	bool bMainStage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	FString LevelPath;//[Offset: 0x314, Size: 0xc]
	FName CameraTag;//[Offset: 0x320, Size: 0x8]
	void StateInit();// 0x23ec178
	void PreLoadLevel();// 0x2747f88
	void PreEnterState(SelectStageConfig StateConfig, SelectLegendWidgetBase* InMainStateWidget);// 0x274829c
	void OnSyncTeamInfo(out const TeammateItemData[] TeammateDatas, byte TeamSyncType, int64 PlayerKey);// 0x2747fb0
	void OnStateInit();// 0x2ce6f18
	void OnReceiveTeamInfo(out const TeammateItemData[] TeammateDatas, byte TeamSyncType, int64 PlayerKey);// 0x2748120
	void OnPrepareFinish();// 0x2748288
	void OnPrepare();// 0x23ec15c
	void ExitStateFinish();// 0x2747f74
	void ExitState();// 0x23ec108
	void EnterStateFinish();// 0x2747f9c
	void EnterState();// 0x23ec140

--------------------------------
Class: GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	FString ModuleName;//[Offset: 0x298, Size: 0xc]
	bool bClipMarker_Max;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	bool bClipMarker_Min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1]
	FString LaunchLuaModule;//[Offset: 0x2a8, Size: 0xc]
	FString GameLuaModule;//[Offset: 0x2b4, Size: 0xc]
	FString GetModuleName();// 0x2621478

--------------------------------
Class: SelectStageConfig
	enum Stage;//[Offset: 0x0, Size: 0x1]
	float Duration;//[Offset: 0x4, Size: 0x4]
	SelecStateInfo Info;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: SelecStateInfo
	AkAudioEvent*[] StateBGMs;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: TeammateItemData
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Health;//[Offset: 0x4, Size: 0x4]
	float MaxHealth;//[Offset: 0x8, Size: 0x4]
	float HealthHealing;//[Offset: 0xc, Size: 0x4]
	float ShieldHealing;//[Offset: 0x10, Size: 0x4]
	int ShieldQuality;//[Offset: 0x14, Size: 0x4]
	int HelmetQuality;//[Offset: 0x18, Size: 0x4]
	int GradableShieldExpRemain;//[Offset: 0x1c, Size: 0x4]
	int GradableShieldLevel;//[Offset: 0x20, Size: 0x4]
	int BackpackLevel;//[Offset: 0x24, Size: 0x4]
	int KnockDownShieldLevel;//[Offset: 0x28, Size: 0x4]
	float ShieldValue;//[Offset: 0x2c, Size: 0x4]
	float MaxShieldValue;//[Offset: 0x30, Size: 0x4]
	FString PlayerName;//[Offset: 0x34, Size: 0xc]
	int LegendId;//[Offset: 0x40, Size: 0x4]
	int SkinId;//[Offset: 0x44, Size: 0x4]
	int ChooseLegendID;//[Offset: 0x48, Size: 0x4]
	int ConfirmLegendID;//[Offset: 0x4c, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x50, Size: 0x4]
	uint64 UID;//[Offset: 0x58, Size: 0x8]
	uint32 TeamIdx;//[Offset: 0x60, Size: 0x4]
	bool bIsCommander;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bIsNetLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bIsSingleParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool bIsProtectedByTotem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	uint32 DyingCount;//[Offset: 0x68, Size: 0x4]
	byte DyingTimeoutSec;//[Offset: 0x6c, Size: 0x1]
	byte RespawningTime;//[Offset: 0x6d, Size: 0x1]
	int UseItemID;//[Offset: 0x70, Size: 0x4]
	byte BatBeState;//[Offset: 0x74, Size: 0x1]
	byte BannerState;//[Offset: 0x75, Size: 0x1]
	uint32 FirstSlotBulletId;//[Offset: 0x78, Size: 0x4]
	uint32 SecondSlotBulletId;//[Offset: 0x7c, Size: 0x4]
	uint32 SyncDyingRealTime;//[Offset: 0x80, Size: 0x4]
	uint32 SyncRespawningRealTime;//[Offset: 0x84, Size: 0x4]
	uint32 SyncShownRespawningRealTime;//[Offset: 0x88, Size: 0x4]
	uint32 AIHostPlayerKey;//[Offset: 0x8c, Size: 0x4]
	bool bAIHosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	int AIHostFunc1;//[Offset: 0x94, Size: 0x4]
	int AIHostFunc2;//[Offset: 0x98, Size: 0x4]
	int AIHostFunc3;//[Offset: 0x9c, Size: 0x4]
	int AIHostFunc4;//[Offset: 0xa0, Size: 0x4]
	int AIHostFunc5;//[Offset: 0xa4, Size: 0x4]
	bool bUseSecIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: BattleReusltStateWidget.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	BattleStateInfo Args;//[Offset: 0x2e8, Size: 0xc]
	FString EndResultType;//[Offset: 0x2f4, Size: 0xc]
	BattleResultStateMgrComp* DataCenter;//[Offset: 0x300, Size: 0x4]
	float Duration;//[Offset: 0x304, Size: 0x4]
	float Internal;//[Offset: 0x308, Size: 0x4]
	float PrewaitingTime;//[Offset: 0x30c, Size: 0x4]
	float RemainingTime;//[Offset: 0x310, Size: 0x4]
	float RespawnRemainingTime;//[Offset: 0x314, Size: 0x4]
	bool bNeedRemoveBattleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	void PreEnterState(FString EndReason, BattleResultStateMgrComp* Mgr, out const BattleStateInfo Info);// 0x253aa98
	void PlayBGM(AkAudioEvent*[] BGMs);// 0x253a858
	void OnTimerInternalUpdate();// 0x2ce6f18
	void OnTimerFinished();// 0x2ce6f18
	void OnPrepareFinish();// 0x253aa84
	void OnPrepare();// 0x2ce6f18
	void OnParentInternalUpdate();// 0x253abd8
	void ExitStateFinish();// 0x253aa5c
	void ExitState();// 0x2ce6f18
	void EnterStateFinish();// 0x253aa70
	void EnterState();// 0x2ce6f18
	void ChangeToNextState(FString EndReason);// 0x253a9cc
	void ChangeToFinalState(FString EndReason);// 0x253a93c

--------------------------------
Class: BattleResultStateMgrComp.ActorComponent.Object
	MPBattleResult MPResult;//[Offset: 0xac, Size: 0x2c]
	bool bFromOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	SimpleBattleResultData BattleResultData;//[Offset: 0xe8, Size: 0x5c]
	bool bAlreadyExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	float ExitWaitTime;//[Offset: 0x164, Size: 0x4]
	BattleAccountingInfo[] AccountingInfos;//[Offset: 0x168, Size: 0xc]
	BattleAccountingInfo[] OBAccountingInfos;//[Offset: 0x174, Size: 0xc]
	BattleAccountingInfo DeathConfig;//[Offset: 0x180, Size: 0x20]
	FString WinModeShowLevel;//[Offset: 0x1a0, Size: 0xc]
	AkAudioEvent*[] WinBGMs;//[Offset: 0x1ac, Size: 0xc]
	AkAudioEvent*[] DrawBGMs;//[Offset: 0x1b8, Size: 0xc]
	AkAudioEvent*[] SingleDeadBGMs;//[Offset: 0x1c4, Size: 0xc]
	AkAudioEvent*[] FailedBGMs;//[Offset: 0x1d0, Size: 0xc]
	bool bCanEnterOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	int FilterID;//[Offset: 0x1e0, Size: 0x4]
	WinModeInfo[] ValidWinTeam;//[Offset: 0x1e4, Size: 0xc]
	void UnLoadBattleUI();// 0x2ce6f18
	WinModeInfo[] SortWinOccupation(out const WinModeInfo[] WinTeam);// 0x2539164
	void ReturnToLobby();// 0x2ce6f18
	void ResetClientAccounting(Actor* OBTarget);// 0x25394e4
	void PreEnter(FString EndReason, bool bSkipToEnd);// 0x2539324
	void OnResetClientAccounting();// 0x2ce6f18
	void OnReceiveWinTeamInfo(WinModeInfo[] WinTeams);// 0x2538e20
	void OnEnterReplayBattleResult();// 0x253955c
	void OnEnterPlayerDeath();// 0x2539570
	void OnEnsureEnterState(FString UIDefine);// 0x2ce6f18
	void OnClientReceivedGameEnd(FString EndReason, out const SimpleBattleResultData ResultData);// 0x2538f70
	void OnClientExitGameBegin();// 0x2ce6f18
	void OnClientExitGame();// 0x25394d0
	void OnClassLoaded();// 0x25396ac
	void LuaInstanceInit();// 0x2ce6f18
	void HoldClientAccounting(bool bHold);// 0x25396c0
	MPBattleResult GetMPResult();// 0x2539740
	void EnsureEnterNext(BattleReusltStateWidget* StateWidget);// 0x2539458
	BattleReusltStateWidget* CreateUMG(FString UIDefine, FString EndReason);// 0x2ce6f18
	void CloseUMG(FString UIDefine);// 0x2ce6f18
	void CheckReturnToLobby(FString EndReason);// 0x2ce6f18
	void BeginClientAccounting(FString EndReason, byte ExitReason);// 0x2539584

--------------------------------
Class: BattleAccountingInfo
	SoftClassPath ClassPath;//[Offset: 0x0, Size: 0x14]
	BattleStateInfo BattleStateInfo;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: BattleStateInfo
	AkAudioEvent*[] StateBGMs;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: SelectScreenBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_in;//[Offset: 0x1c8, Size: 0x4]
	WidgetAnimation* Anim_out;//[Offset: 0x1cc, Size: 0x4]
	void PlayAniout();// 0x2748ec4
	void PlayAniin();// 0x2748eb0
	float GetAnioutDuration();// 0x2748e88

--------------------------------
Class: UIS_CurtainBase.SelectLegendWidgetBase.GameUserWidget.APUserWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_in;//[Offset: 0x328, Size: 0x4]
	WidgetAnimation* Ani_SelectFadeOut;//[Offset: 0x32c, Size: 0x4]
	void PlaySelectFadeOut();// 0x27f07cc
	float GetSelectFadeOutDuration();// 0x27f07a4

--------------------------------
Class: GameStateInGameChatComp_BP_C.InGameChatManagerComponent.ActorComponent.Object
	FString GetModuleName();// 0x2ce6f18

--------------------------------
Class: InGameChatManagerComponent.ActorComponent.Object
	InGameChatDataReporter* DataReporter;//[Offset: 0xd0, Size: 0x4]
	void UnRegisterTextFilterRsp();// 0x2ce6f18
	void RegisterTextFilterRsp();// 0x2ce6f18
	void OnFilterTextRsp(FString ContentRsp);// 0x26524ec
	void OnFilterText(int64 PlayerKey, FString Content);// 0x2ce6f18
	FString GetParachutingMsg(out const InGameChatInfo Info);// 0x2652264
	FString GetChatContent(out const InGameChatInfo Info);// 0x26523ac

--------------------------------
Class: InGameChatDataReporter.Object
	void SendDataStatisticsFlow(out const InGameChatReportData ReportData);// 0x2651098

--------------------------------
Class: InGameChatReportData

--------------------------------
Class: GameStateMultiplayerComp.ActorComponent.Object
	int GameWinScore;//[Offset: 0xa8, Size: 0x4]
	int GameKillScore;//[Offset: 0xac, Size: 0x4]
	int LoadoutWeaponRandomNum;//[Offset: 0xb0, Size: 0x4]
	bool bIsInitPlayerLoadoutOnEndChoose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bUseWinByTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	int MaxWinScore;//[Offset: 0xb8, Size: 0x4]
	int MinWinScore;//[Offset: 0xbc, Size: 0x4]
	int MinTieNum;//[Offset: 0xc0, Size: 0x4]
	float UIStatusEndTime;//[Offset: 0xc4, Size: 0x4]
	enum UIStatus;//[Offset: 0xc8, Size: 0x1]
	void StartChooseLoadoutWeapon(float Duration);// 0x2609bac
	void ShowRoundBegin(bool bIsShow, float Duration);// 0x2609cec
	void ShowReadyCountdown(bool bIsShow, float Duration);// 0x2609c24
	void OnRepMultiplayerUIStatus();// 0x2609b98
	void OnRep_GameWinScore();// 0x2609db4

--------------------------------
Class: GameStatisticsManager_MPBase.GameStatisticsManager.ActorComponent.Object
	GameBasicStatistics_MP GameBasicStatistics;//[Offset: 0x158, Size: 0x578]
	void OnRep_GameBasicStatistics();// 0x261aa74
	void OnGameStart();// 0x25858f4
	int GetPlayerScore(int PlayerKey);// 0x261b4ec
	int GetPlayerRank(int PlayerKey);// 0x261b46c
	int GetPlayerPlantSuccessTime(int PlayerKey);// 0x261b674
	int GetPlayerPlantDefuseTime(int PlayerKey);// 0x261b5ec
	int GetPlayerDeaths(int PlayerKey);// 0x261b56c
	int GetPlayerContinuousKills(int PlayerKey);// 0x261b3ec
	GameCampStatistics_MP[] GetGameCampStatistics();// 0x261ac10
	GameBasicStatistics_MP GetGameBasicStatistics();// 0x261aca0
	int GetCampScore(int CampID);// 0x261b110
	FString GetCampResult(int CampID);// 0x261b210
	int GetCampRank(int CampID);// 0x261b2ec
	GamePlayerStatistics_MP[] GetCampPlayerStatistics(int CampID);// 0x261aa88
	int GetCampKill(int CampID);// 0x261b36c
	int GetCampDeaths(int CampID);// 0x261b190
	float GetCampDamage(int CampID);// 0x261b090
	void BoardcastAddPlayerScore(int PlayerKey, int Score);// 0x261b84c
	void BoardcastAddCampScore(int CampID, int Score, enum Reason, bool IsFinishGame);// 0x261b6fc

--------------------------------
Class: GameBasicStatistics_MP.GameBasicStatistics
	GamePlayerStatistics_MP[] GamePlayerStatistics;//[Offset: 0x4c0, Size: 0xc]
	GameCampStatistics_MP[] GameCampStatistics;//[Offset: 0x4cc, Size: 0xc]
	CampScoringRecord[] CampScoringRecords;//[Offset: 0x4d8, Size: 0xc]
	int TiedTimes;//[Offset: 0x4e4, Size: 0x4]
	<int,GameBombDefusalPlayerData> BombDefusalPlayerData;//[Offset: 0x538, Size: 0x3c]

--------------------------------
Class: GameBasicStatistics
	FString GameModeName;//[Offset: 0x0, Size: 0xc]
	uint64 GameModeID;//[Offset: 0x10, Size: 0x8]
	uint32 Observers;//[Offset: 0x18, Size: 0x4]
	uint32 LinkPlayer;//[Offset: 0x1c, Size: 0x4]
	uint32 TotalPlayer;//[Offset: 0x20, Size: 0x4]
	uint32 LinkAI;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: GamePlayerStatistics_MP.GamePlayerStatistics
	int Score;//[Offset: 0x994, Size: 0x4]
	int Deaths;//[Offset: 0x998, Size: 0x4]
	int ContinuousKills;//[Offset: 0x99c, Size: 0x4]
	int Rank;//[Offset: 0x9a0, Size: 0x4]
	int OpenMaterialNum;//[Offset: 0x9a4, Size: 0x4]
	int OpenBinNum;//[Offset: 0x9a8, Size: 0x4]
	int OpenAirDropNum;//[Offset: 0x9ac, Size: 0x4]
	int PlayerIndex;//[Offset: 0x9b0, Size: 0x4]
	float OpenShopTime;//[Offset: 0x9b4, Size: 0x4]
	MPFlowData FlowData;//[Offset: 0x9b8, Size: 0x14]

--------------------------------
Class: GamePlayerStatistics
	PlayerInfo PlayerInfo;//[Offset: 0x0, Size: 0xc8]
	bool bDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	float DyingTime;//[Offset: 0xd8, Size: 0x4]
	float Damage;//[Offset: 0xdc, Size: 0x4]
	float DamageToAI;//[Offset: 0xe0, Size: 0x4]
	<ZiplineComponent*,int> ZipLineMap;//[Offset: 0x178, Size: 0x3c]
	PlayerInfo[] Observers;//[Offset: 0x388, Size: 0xc]
	uint32[] Assists;//[Offset: 0x394, Size: 0xc]
	uint32[] Kills;//[Offset: 0x3a0, Size: 0xc]
	int[] RatingKillAssistScore;//[Offset: 0x67c, Size: 0xc]

--------------------------------
Class: MPFlowData
	float OpenShopTime;//[Offset: 0x0, Size: 0x4]
	int OpenSocreTime;//[Offset: 0x4, Size: 0x4]
	int SlidingWeaponListTime;//[Offset: 0x8, Size: 0x4]
	int ClickSellTime;//[Offset: 0xc, Size: 0x4]
	int ClickChangeFittingTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GameCampStatistics_MP
	int CampID;//[Offset: 0x0, Size: 0x4]
	int Rank;//[Offset: 0x4, Size: 0x4]
	FString Result;//[Offset: 0x8, Size: 0xc]
	uint32[] CampMembers;//[Offset: 0x14, Size: 0xc]
	uint16 Kills;//[Offset: 0x20, Size: 0x2]
	uint16 Died;//[Offset: 0x22, Size: 0x2]
	int Score;//[Offset: 0x24, Size: 0x4]
	float Damage;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: GameBombDefusalPlayerData
	int PlantSuccessTime;//[Offset: 0x0, Size: 0x4]
	int DefuseSuccessTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BP_HitTip3D_C.HitTip3D.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x210, Size: 0x4]
	ArrowComponent* Arrow;//[Offset: 0x214, Size: 0x4]
	void ReceiveTick(float DeltaSeconds);// 0x2ce6f18
	void ExecuteUbergraph_BP_HitTip3D(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x2ce6f18

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x45c, Size: 0x4]
	float ArrowSize;//[Offset: 0x460, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 0x1]
	float ScreenSize;//[Offset: 0x468, Size: 0x4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46c, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x465330c

--------------------------------
Class: BP_AutoEffectBullet_C.AutoEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x250, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x254, Size: 0x4]

--------------------------------
Class: BP_OBEffectBullet_C.OBEffectBullet.SignificanceManagedActor.Actor.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x220, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x224, Size: 0x4]

--------------------------------
Class: RifleBullet_C.ShootWeaponBullet.SignificanceManagedActor.Actor.Object
	SphereComponent* Sphere;//[Offset: 0x2d0, Size: 0x4]

--------------------------------
Class: TeamLevelInstanceActor.ReplicatedLevelInstanceActor.Actor.Object

--------------------------------
Class: ClimbGuideActor_C.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x1d0, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1d4, Size: 0x4]

--------------------------------
Class: SelectBackGround_BR_C.BP_BackgroundBoard_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1dc, Size: 0x4]
	StaticMeshComponent* Effect_Plane;//[Offset: 0x1e0, Size: 0x4]
	void SetBGColor(Color InColor);// 0x2ce6f18
	static void ExecuteUbergraph_SelectBackGround_BR(int EntryPoint, Color K2Node_Event_InColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x2ce6f18

--------------------------------
Class: BP_BackgroundBoard_C.Actor.Object
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x1d0, Size: 0x4]
	StaticMeshComponent* BackgroundMesh;//[Offset: 0x1d4, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1d8, Size: 0x4]
	void SetBGColor(Color InColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x2ce6f18

--------------------------------
Class: Target_Character_01_C.APGameCharacter_Target_Base_BP_C.ApexCharacterTargetBase.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1838, Size: 0x4]
	void ReceiveTick(float DeltaSeconds);// 0x2ce6f18
	static void ExecuteUbergraph_Target_Character_01(int EntryPoint, float K2Node_Event_DeltaSeconds, Actor* CallFunc_GetParentActor_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2ce6f18

--------------------------------
Class: APGameCharacter_Target_Base_BP_C.ApexCharacterTargetBase.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1830, Size: 0x4]
	TargetCenter_C* TargetCenter;//[Offset: 0x1834, Size: 0x4]
	Vector GetScoreDisplayLocation(Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x2ce6f18
	static void ReceiveTick(float DeltaSeconds);// 0x2ce6f18
	void ReceiveBeginPlay();// 0x2ce6f18
	static void ExecuteUbergraph_APGameCharacter_Target_Base_BP(int EntryPoint, float K2Node_Event_DeltaSeconds, bool CallFunc_Not_PreBool_ReturnValue);// 0x2ce6f18

--------------------------------
Class: ApexCharacterTargetBase.ApexCharacter.ApexCharacterBase.Character.Pawn.Actor.Object
	bool bInfiniteHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1820, Size: 0x1]
	bool bShowDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1821, Size: 0x1]
	Vector GetScoreDisplayLocation();// 0x2ce6f18

--------------------------------
Class: TargetCenter_C.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_CommDiscardMag_C.CommDiscardMagDisplay.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1d0, Size: 0x4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x1d4, Size: 0x4]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x1d8, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1dc, Size: 0x4]
	void LoadSkeletalMesh(enum InMeshType);// 0x2ce6f18
	static void ExecuteUbergraph_BP_CommDiscardMag(int EntryPoint, const delegate Temp_delegate_Variable, const delegate Temp_delegate_Variable, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, SkeletalMeshAsync* CallFunc_SetSkeletalMeshAsync_ReturnValue, enum K2Node_Event_InMeshType, bool K2Node_SwitchEnum_CmpSuccess);// 0x2ce6f18

--------------------------------
Class: CommDiscardMagDisplay.Actor.Object
	void LoadSkeletalMesh(enum InMeshType);// 0x2ce6f18

--------------------------------
Class: SkeletalMeshAsync.AsyncLoaderBase.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x24, Size: 0x4]
	SkeletalMesh* SOPSkeletalMesh;//[Offset: 0x28, Size: 0x20]
	class AnimInstance* AnimClass;//[Offset: 0x48, Size: 0x4]
	class AnimInstance* SOPAnimClass;//[Offset: 0x4c, Size: 0x20]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x70, Size: 0x4]
	void StopAnimation();// 0x2764574
	void OnLoadSkeletalMeshFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, SkeletalMesh* NewMesh);// 0x2764224
	void OnLoadAnimClassFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, class AnimInstance NewClass);// 0x2763fac
	void OnLoadAnimAssetFinished(out const SoftObjectPath[] Paths, out const Object*[] Assets, AnimationAsset* NewAnimToPlay);// 0x2763d34
	void K2_SetSkeletalMesh(SkeletalMeshComponent* NewMeshComp, SkeletalMesh* NewMesh, out const delegate FinishedCallback);// 0x2764588
	SkeletalMesh* GetSOPSkeletalMesh();// 0x26d3878
	class AnimInstance GetSOPAnimClass();// 0x276449c
	SkeletalMesh* GetSkeletalMesh();// 0x26d3950
	class AnimInstance GetAinmClass();// 0x26d3850

--------------------------------
Class: BP_3DUI_2X_C.Weapon3DUIActor.SignificanceManagedActor.Actor.Object
	WeaponWidgetComponent* 3DUI_2X_BulletNum;//[Offset: 0x258, Size: 0x4]
	WeaponWidgetComponent* 3DUI_2X_Aim;//[Offset: 0x25c, Size: 0x4]
	StaticMeshComponent* SM_3DUI_2X_BulletSocket;//[Offset: 0x260, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x264, Size: 0x4]

--------------------------------
Class: WeaponWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x600, Size: 0x4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x604, Size: 0x4]
	bool bUpdateShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x60c, Size: 0x4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x610, Size: 0x4]
	int UINum;//[Offset: 0x614, Size: 0x4]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x2835200
	void SetUINum(int Num);// 0x2834ea4
	void SetScopeZeroPointConfig(ScopeZeroPointConfig[] ZeroPointConfig);// 0x2834f1c
	void SetDynamicMaterialParam(LinearColor Color, bool bFlash);// 0x2835130
	void SetBasicParams(ApexCharacter* OwnerCharacter, ItemDefineID _ItemID);// 0x2835060
	Actor* GetBindOwner();// 0x28353b8
	MeshComponent* GetAttachedMeshComponent();// 0x283539c
	void BindOwner(Actor* Owner);// 0x28353d4
	void BindEvent();// 0x2835448

--------------------------------
